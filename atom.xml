<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet SymPy</title>
  <updated>2013-01-17T11:20:37Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Ondrej Certik</name>
    <email>ondrej@certik.cz</email>
  </author>
  <id>http://planet.sympy.org/atom.xml</id>
  <link href="http://planet.sympy.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://planet.sympy.org/" rel="alternate"/>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2013/01/17/LogPy-Facts-Relations</id>
    <link href="http://matthewrocklin.com/blog//work/2013/01/17/LogPy-Facts-Relations" rel="alternate" type="text/html"/>
    <title>LogPy - Facts and Relations</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In <a href="http://mrocklin.github.com/blog/work/2013/01/14/LogPy-Introduction/">my last post</a> I introduced <a href="http://github.com/logpy/logpy">LogPy</a>, a library for logic and relational programming in Python. In this post I show how LogPy can be used as a quick and dirty in-memory database.</p>

<h2 id="data">Data</h2>

<p>As an example we’ll look at the 50 states in the US. We know two things about each state.</p>

<ol>
<li>Is it coastal? For example California (CA) is coastal because it is next to the Pacific Ocean, Arizona (AZ) is not.</li>

<li>To which other states is it adjacent? For example California (CA) is adjacent to Oregon (OR), Arizona (AZ) and Nevada (NV).</li>
</ol>

<p>We express data in LogPy using relations and facts</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">logpy</span> <span class="kn">import</span> <span class="n">Relation</span><span class="p">,</span> <span class="n">fact</span><span class="p">,</span> <span class="n">facts</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">coastal</span> <span class="o">=</span> <span class="n">Relation</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">fact</span><span class="p">(</span><span class="n">coastal</span><span class="p">,</span> <span class="s">'CA'</span><span class="p">)</span>
</code></pre></div>
<p>here we have asserted the fact that <code>'CA'</code> is coastal. Lets quickly do this for all of the coastal states</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">coastal_states</span> <span class="o">=</span> <span class="s">'WA,OR,CA,TX,LA,MI,AL,GA,FL,SC,NC,VI,MD,DW,NJ,NY,CT,RI,MA,MN,NH,AK,HI'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">coastal_states</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">):</span>
<span class="o">...</span>     <span class="n">fact</span><span class="p">(</span><span class="n">coastal</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
</code></pre></div>
<p>Adjacency is only slightly more complex to express. The following code asserts that California (CA) is adjacent to Arizona (AZ) and that California (CA) is adjacent to Oregon (OR).</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">adjacent</span> <span class="o">=</span> <span class="n">Relation</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">fact</span><span class="p">(</span><span class="n">adjacent</span><span class="p">,</span> <span class="s">'CA'</span><span class="p">,</span> <span class="s">'AZ'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">fact</span><span class="p">(</span><span class="n">adjacent</span><span class="p">,</span> <span class="s">'CA'</span><span class="p">,</span> <span class="s">'OR'</span><span class="p">)</span>
</code></pre></div>
<p>Now we need a list of all adjacent pairs of states. Fortunately <a href="http://writeonly.wordpress.com/2009/03/20/adjacency-list-of-states-of-the-united-states-us/">someone else</a> has already compiled such a list. His data looks like this</p>

<pre><code>AK
AL,MS,TN,GA,FL
AR,MO,TN,MS,LA,TX,OK
AZ,CA,NV,UT,CO,NM
CA,OR,NV,AZ
CO,WY,NE,KS,OK,NM,AZ,UT
...</code></pre>

<p>Each line says that the first element is adjacent to the following ones. So for example Alaska (AK) is adjacent to no states and California (CA) is adjacent to Oregon (OR), Nevada (NV) and Arizona (AZ). We can parse this file and assert the relevant facts with fairly standard Python code</p>
<div class="highlight"><pre><code class="python"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'examples/data/adjacent-states.txt'</span><span class="p">)</span>  <span class="c"># lines like 'CA,OR,NV,AZ'</span>
<span class="n">adjlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>
<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">for</span> <span class="n">L</span> <span class="ow">in</span> <span class="n">adjlist</span><span class="p">:</span>                   <span class="c"># ['CA', 'OR', 'NV', 'AZ']</span>
    <span class="n">head</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">L</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>        <span class="c"># 'CA', ['OR', 'NV', 'AZ']</span>
    <span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">tail</span><span class="p">:</span>
        <span class="n">fact</span><span class="p">(</span><span class="n">adjacent</span><span class="p">,</span> <span class="n">head</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span> <span class="c"># e.g. 'CA' is adjacent to 'OR',</span>
                                    <span class="c">#      'CA' is adjacent to 'NV', etc...</span>
</code></pre></div>
<h2 id="querys">Querys</h2>

<p>Once have asserted the relevant facts we can run queries with the logical expressions of LogPy. Recall from the <a href="http://mrocklin.github.com/blog/work/2013/01/14/LogPy-Introduction/">last post</a> that we can use relations to express logical goals and use <code>run</code> to search for cases that satisfy those goals. Here are two simple queries</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">logpy</span> <span class="kn">import</span> <span class="n">var</span><span class="p">,</span> <span class="n">run</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">var</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">run</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">adjacent</span><span class="p">(</span><span class="s">'CA'</span><span class="p">,</span> <span class="s">'NY'</span><span class="p">))</span> <span class="c"># is California adjacent to New York?</span>
<span class="p">()</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">run</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">adjacent</span><span class="p">(</span><span class="s">'CA'</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>    <span class="c"># all states next to California</span>
<span class="p">(</span><span class="s">'OR'</span><span class="p">,</span> <span class="s">'NV'</span><span class="p">,</span> <span class="s">'AZ'</span><span class="p">)</span>
</code></pre></div>
<p>We can construct more complex queries with multiple goals. In SQL the following queries would require a <code>JOIN</code></p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">var</span><span class="p">()</span>  <span class="c"># create second variable for complex queries</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">run</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">adjacent</span><span class="p">(</span><span class="s">'TX'</span><span class="p">,</span> <span class="n">x</span><span class="p">),</span>    <span class="c"># all coastal states next to Texas</span>
<span class="o">...</span>                 <span class="n">coastal</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="p">(</span><span class="s">'LA'</span><span class="p">,)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">run</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">coastal</span><span class="p">(</span><span class="n">y</span><span class="p">),</span>           <span class="c"># five states that border a coastal state</span>
<span class="o">...</span>                 <span class="n">adjacent</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
<span class="p">(</span><span class="s">'VT'</span><span class="p">,</span> <span class="s">'AL'</span><span class="p">,</span> <span class="s">'WV'</span><span class="p">,</span> <span class="s">'DE'</span><span class="p">,</span> <span class="s">'WA'</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">run</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">adjacent</span><span class="p">(</span><span class="s">'TN'</span><span class="p">,</span> <span class="n">x</span><span class="p">),</span>    <span class="c"># all states adjacent to Tennessee</span>
<span class="o">...</span>                 <span class="n">adjacent</span><span class="p">(</span><span class="s">'FL'</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>    <span class="c">#        and adjacent to Florida</span>
<span class="p">(</span><span class="s">'GA'</span><span class="p">,</span> <span class="s">'AL'</span><span class="p">)</span>
</code></pre></div>
<p>Facts and relations are currently indexed by default, yielding relatively fast query times.</p>

<h2 id="conclusion">Conclusion</h2>

<p>LogPy provides a declarative interface to query complex data. Data is stored as facts/tuples and queries are expressed as logical goals. This system is expressive and can match SQL in many respects. The use of Logic programming languages for database queries has roots in <a href="http://en.wikipedia.org/wiki/Datalog">Datalog</a> a subset of Prolog designed for databases.</p></div>
    </summary>
    <updated>2013-01-17T08:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T11:20:31Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2013/01/14/LogPy-Introduction</id>
    <link href="http://matthewrocklin.com/blog//work/2013/01/14/LogPy-Introduction" rel="alternate" type="text/html"/>
    <title>Introducing LogPy</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://github.com/logpy/logpy">LogPy</a> is a library for logic and relational programming in Python. This post contains some introductory examples.</p>

<h2 id="informative_examples">Informative Examples</h2>

<p>LogPy enables the expression of relations and the search for values which satisfy them. The following code is the “Hello, world!” of logic programming. It asks for <code>1</code> number, <code>x</code>, such that <code>x == 5</code></p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">logpy</span> <span class="kn">import</span> <span class="n">run</span><span class="p">,</span> <span class="n">eq</span><span class="p">,</span> <span class="n">membero</span><span class="p">,</span> <span class="n">var</span><span class="p">,</span> <span class="n">conde</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">var</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">run</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">eq</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
<span class="p">(</span><span class="mi">5</span><span class="p">,)</span>
</code></pre></div>
<p>Multiple variables and multiple goals can be used simultaneously. The following code asks for a number x such that <code>x == z</code> and <code>z == 3</code></p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">z</span> <span class="o">=</span> <span class="n">var</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">run</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">eq</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="p">),</span>
              <span class="n">eq</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="p">(</span><span class="mi">3</span><span class="p">,)</span>
</code></pre></div>
<p>LogPy uses <a href="http://en.wikipedia.org/wiki/Unification_%28computer_science%29">unification</a>, an advanced form of pattern matching, to match within expression trees. The following code asks for a number, x, such that <code>(1, 2) == (1, x)</code> holds.</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">run</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">eq</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">)))</span>
<span class="p">(</span><span class="mi">2</span><span class="p">,)</span>
</code></pre></div>
<p>The above examples use <code>eq</code>, a <em>goal</em> to state that two expressions are equal. Other goals exist. <code>membero(item, coll)</code>, a goal, states that <code>item</code> is a member of <code>coll</code>, a collection.</p>

<p>The following example uses <code>membero</code> twice to ask for 2 values of x, such that x is a member of <code>(1, 2, 3)</code> <em>and</em> that x is a member of <code>(2, 3, 4)</code>.</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">run</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">membero</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)),</span>  <span class="c"># x is a member of (1, 2, 3)</span>
              <span class="n">membero</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)))</span>  <span class="c"># x is a member of (2, 3, 4)</span>
<span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</code></pre></div>
<p>We can write other fancier goals too. Here is a list of all prime numbers within <code>1..10</code>. <code>primo</code> depends on the traditional <code>prime</code> and <code>isprime</code> functions found in <code>sympy</code>.</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">logpy.math</span> <span class="kn">import</span> <span class="n">primo</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">run</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="n">membero</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span>
              <span class="p">(</span><span class="n">primo</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
<span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div>
<p>Want just a few primes? Here are five numbers that satisfy the <code>primo</code> goal</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">run</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">primo</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>
</code></pre></div>
<h2 id="relations">Relations</h2>

<p>We often want to state and then query data. Logic programming represents data a set of facts and represents queries with logical goals. In the following examples we assert some facts about the Simpsons family, construct queries through logical goals and then run the queries to obtain results.</p>

<p>The following code defines a <code>parent</code> relation and uses it to state who fathered whom.</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">logpy</span> <span class="kn">import</span> <span class="n">Relation</span><span class="p">,</span> <span class="n">facts</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">Relation</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">facts</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="p">(</span><span class="s">'Homer'</span><span class="p">,</span> <span class="s">'Bart'</span><span class="p">),</span>
<span class="o">...</span>               <span class="p">(</span><span class="s">'Homer'</span><span class="p">,</span> <span class="s">'Lisa'</span><span class="p">),</span>
<span class="o">...</span>               <span class="p">(</span><span class="s">'Abe'</span><span class="p">,</span>  <span class="s">'Homer'</span><span class="p">))</span>
</code></pre></div>
<p>We ask some questions using the <code>parent</code> relation as a goal constructor. Who is Bart’s father?</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">run</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">parent</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="s">'Bart'</span><span class="p">))</span>  <span class="c"># one x such that x is a parent of Bart</span>
<span class="p">(</span><span class="s">'Homer'</span><span class="p">,)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">run</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">parent</span><span class="p">(</span><span class="s">'Homer'</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span> <span class="c"># two xs such that Homer is a parent of x</span>
<span class="p">(</span><span class="s">'Lisa'</span><span class="p">,</span> <span class="s">'Bart'</span><span class="p">)</span>
</code></pre></div>
<p>We can use intermediate variables for more complex queries. Who is Bart’s grandfather?</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">var</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">run</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">parent</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> 
              <span class="n">parent</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="s">'Bart'</span><span class="p">))</span>  
<span class="p">(</span><span class="s">'Abe'</span><span class="p">,)</span>
</code></pre></div>
<p>We can express the grandfather relationship separately. In this example we use <code>conde</code>, a goal constructor for logical <em>and</em> and <em>or</em>.</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">grandparent</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
<span class="o">...</span>     <span class="n">y</span> <span class="o">=</span> <span class="n">var</span><span class="p">()</span>
<span class="o">...</span>     <span class="k">return</span> <span class="n">conde</span><span class="p">((</span><span class="n">parent</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">parent</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)))</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">run</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">grandparent</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="s">'Bart'</span><span class="p">))</span>
<span class="p">(</span><span class="s">'Abe,'</span><span class="p">)</span>
</code></pre></div>
<p><code>grandparent</code> demonstrates that we can construct complex relations programmatically. How would you define sibling? How about uncle or aunt? How about descendant?</p>

<p>If you’d like to play with LogPy you can install it with pip or easy_install using</p>

<pre><code>pip install logic</code></pre>

<p>or clone it directly from github</p>

<pre><code>git clone git@github.com:logpy/logpy.git</code></pre>

<p>Source is available at <a href="http://github.com/logpy/logpy/">http://github.com/logpy/logpy/</a>, design input and contributions are much appreciated.</p>

<h2 id="logic_programming_in_general">Logic Programming in General</h2>

<p>Logic and relational programming are making a comeback. They were popular in the 80s, died during the AI dark ages, and have recently begun a resurgence in the functional programming community. Logic programs write music, search databases, write numeric algorithms, and build testing frameworks. It is expressive for a wide class of problems.</p>

<p>The design of LogPy is based off of <code>miniKanren</code>, a simple and powerful implementation in Scheme popularized through the <code>core.logic</code> Clojure library.</p>

<h2 id="references">References</h2>

<ol>
<li><a href="http://kanren.sourceforge.net/">miniKanren</a></li>

<li><a href="https://github.com/clojure/core.logic">core.logic</a></li>

<li><a href="http://en.wikipedia.org/wiki/Logic_programming">Wikipedia article on Logic Programming</a></li>

<li><a href="https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer">core.logic primer</a></li>
</ol></div>
    </summary>
    <updated>2013-01-14T08:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T11:20:30Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://brianegranger.com/?p=261</id>
    <link href="http://brianegranger.com/?p=261" rel="alternate" type="text/html"/>
    <title>Personal Reflections on Features and Scope</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In a previous <a href="http://brianegranger.com/?p=249" target="_blank" title="previous blog post">blog post</a>, I talked about the problem of ever expanding feature sets in open source software projects.  I discussed the hidden  costs and liabilities of adding new features and proposed practical ways of tackling these problems.  However, I think that story is incomplete.  Of course open source [...]</p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In a previous <a href="http://brianegranger.com/?p=249" target="_blank" title="previous blog post">blog post</a>, I talked about the problem of ever expanding feature sets in open source software projects.  I discussed the hidden  costs and liabilities of adding new features and proposed practical ways of tackling these problems.  However, I think that story is incomplete.  Of course open source projects will want to add features, even some with massive costs and liabilities, but how should that happen?  How should projects decide which features to add?  What criteria should be used?  To answer these questions, I want to describe a few of my own experiences in dealing with features and scope in IPython and PyZMQ.</p>
<p>First, <a href="http://ipython.org/" target="_blank" title="IPython">IPython</a>.  Anyone who is familiar with IPython will probably read my previous blog post and say, “wait, hasn’t IPython experienced a massive amount of feature creep over the last few years.  It started out as a simple terminal based interactive shell, but has grown to include parallel computing, a web application and a GUI application.  The IPython developers, including yourself, have shown little, if any restraint in adding features.”</p>
<p>Back in 2004, IPython was the 3 year old child of Fernando Perez.  At that point, it was already a popular, enhanced interactive Python shell.  I had started to work on parallel computing libraries for Python, when Fernando visited me at Santa Clara University (we had been classmates in graduate school starting in 1996).  We stayed up until 3 am talking about Python’s rapidly evolving ecosystem of scientific computing libraries, interactive computing environments and the future of IPython and my parallel computing libraries.  IPython was a fantastic tool, but both of us wanted more.  We wanted a web based IPython Notebook.  We wanted integrated parallel computing tools.  We began to see that all of these things required the same architecture: a stateful computational engine, the IPython Kernel, that could run user code and send back results over a network.  Once that existed, everything else could be layered on top, even the terminal based IPython.  The vision that emerged that night was specific and, while ambitious, was ultimately finite.  As Fernando describes, in this <a href="http://blog.fperez.org/2012/01/ipython-notebook-historical.html" target="_blank" title="History of the IPython Notebook">blog post</a>, it took us ~6 years and multiple attempts to build this architecture.  Now, we have a terminal, QtConsole, web-based notebook and parallel computing library all built on top of a common IPython Kernel and message specification.  While these things may look like feature creep from the outside, they have been part of a deliberate and calculated plan.</p>
<p>What I have learned from this experience is that it is absolutely critical for the core developers of an open source project to consciously and deliberately set the scope and vision for the project.  This vision can even be ambitious.  Once that scope is set, choosing which features to add becomes easy: to first order, you add features within that scope.  That doesn’t mean you don’t count the cost of those features or that you add all possible features within the scope.  The scope provides an upper bound on the feature set.  So why does IPython have parallel computing tools?  Because we set the scope early on to include that.</p>
<p>Second, <a href="https://github.com/zeromq/pyzmq" target="_blank" title="PyZMQ">PyZMQ</a>.  As we developed IPython’s architecture, we realized that we needed better networking/messaging libraries.  This led to the creation of PyZMQ in 2010, which is a set of Python bindings for <a href="http://www.zeromq.org/" target="_blank" title="ZeroMQ">ZeroMQ</a>.  Notice the scope of PyZMQ: Python bindings for ZeroMQ.  Fast forward to Spring of 2012.  In the course of working on the IPython Notebook, I had written some additional code for building PyZMQ based web applications: a module for simple, PyZMQ-based RPC and a module for running Tornado event handlers in a scalable and distributed manner using PyZMQ.  I submitted two <a href="https://github.com/zeromq/pyzmq/pull/177" target="_blank" title="pull request 1">pull</a> <a href="https://github.com/zeromq/pyzmq/pull/174" target="_blank" title="pull request 2">requests</a> to include these modules in PyZMQ.  One of them was quickly merged and the other languished in code review for almost a year.  Min began to sense that these modules, while useful, were not a good match for inclusion in PyZMQ.  Their API was very unstable and they hadn’t been well tested.  They would require a much faster release cycle compared to the rest of PyZMQ, which was very stable and well tested.  This Christmas break, I finally woke up to the real problem.  These modules were outside the scope of PyZMQ.  They involved an implicit and undiscussed increase in scope from “Python bindings for ZeroMQ” to “A general place for ZeroMQ based tools in Python.”  Once I realized this, Min and I pulled them out of PyZMQ and created separate projects for them.  Again, the important thing is to set the scope of a project.</p>
<p> </p>
<p> </p></div>
    </content>
    <updated>2013-01-09T18:44:01Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Brian Granger</name>
    </author>
    <source>
      <id>http://brianegranger.com</id>
      <link href="http://brianegranger.com/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://brianegranger.com" rel="alternate" type="text/html"/>
      <subtitle>Physics ∩ Computing</subtitle>
      <title>Brian E. Granger</title>
      <updated>2013-01-10T17:00:17Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://brianegranger.com/?p=249</id>
    <link href="http://brianegranger.com/?p=249" rel="alternate" type="text/html"/>
    <title>Features and Scope in Open Source Software</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Follow up: I have created another blog post to clarify some of these issues <a href="http://brianegranger.com/?p=261" target="_blank" title="Follow up post.">here</a>.</p> <p>The IPython project, through UC Berkeley and Cal Poly San Luis Obispo, just received a $1.15 million dollar grant from the Alfred P. Sloan Foundation to develop the IPython Notebook over a two year period. [...]</p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Follow up: I have created another blog post to clarify some of these issues <a href="http://brianegranger.com/?p=261" target="_blank" title="Follow up post.">here</a>.</p>
<p>The IPython project, through UC Berkeley and Cal Poly San Luis Obispo, just received a $1.15 million dollar grant from the Alfred P. Sloan Foundation to develop the IPython Notebook over a two year period.  More details about this grant can be found on the <a href="http://ipython.org/sloan-grant.html" target="_blank" title="IPython website">IPython website</a>.  This is really exciting for us because, so far, we have mostly developed IPython in our spare time.  But I think there is also a potential danger here.  <strong>The danger is that we will add lots of new features.</strong>  What, you say, lots of features will endanger IPython?  What else are you going to do with a million dollars if you are not going to add lots of new features?  The answer is simple: we are going to add as few features as possible and knock each of them out of the park.  The future of the project depends on this.</p>
<p>This is a topic that I have been thinking about a lot lately: how do open source projects decide which features to implement.  Most active open source projects I am involved in see a continual stream of new features.  Just hop onto the GitHub pages for <a href="https://github.com/sympy/sympy/pulls" target="_blank" title="SymPy GitHub">SymPy</a> or <a href="https://github.com/ipython/ipython/pulls" target="_blank" title="IPython GitHub">IPython</a> and watch the activity.  Anyone with the right skill set can fork a project on GitHub and submit a pull request within a few hours.  Amazingly, this is happening all the time; apparently people love to code.  While each new feature is an asset for the project, it also brings a cost, or liability, with it.  If a project ignores those costs, it can have long term, detrimental effects on the project.  What are these liabilities and costs associated with new features?</p>
<ul>
<li>Each new feature adds complexity to the code base.  Complexity makes a code base less hackable, maintainable, extensible.</li>
<li>Each new feature increases the “bug surface” of the project.  When a feature also adds complexity, those bugs become harder to find and fix.</li>
<li>Each new feature requires documentation to be written and maintained.</li>
<li>Each new feature requires support over email or IRC.</li>
<li>Endless feature expansion, or feature creep, requires developers to specialize.  They can’t follow the entire project, so they have to focus on a subset that can fit into their brain and schedule.</li>
<li>Each new feature has to be tested on a wide variety on platforms (Linux, Mac, Windows) and environments (PyPy, Python 2, Python 3).</li>
<li>Each new feature adds complexity to the user experience.  Sometimes it’s the documentation, other times the UI or configuration options.</li>
<li>When you spend on one feature, another feature or bug fix didn’t get worked on.  If you didn’t prioritize things beforehand, you just spent time on something less important to your users.  Either that or you did shoddy work while trying to do it all.</li>
<li>Features multiply like bunnies.  How many times have you heard, “wow, that new feature is really cool, could you make it do X as well?”</li>
<li>Features are easy to add, difficult to remove.  Once you add a feature, you are stuck with the costs and liabilities.</li>
</ul>
<p>For a typical open source project, what percentage of features get used regularly by most users?  15%? 40%?.  Let’s be really optimistic and say that number is 60%.  That means that developers are spending 40% of their time and effort on features that don’t really get used.  Ouch.  Then why do open source projects keep adding features without counting the cost?  I think there are a number of factors that lead to this, but one in particular comes to my mind.  <strong>It is hard to say no.</strong>  When an end user submits a feature request over email or on GitHub issues, it is hard to tell them, “great idea, but we are not doing that.”  It is even more difficult to say no after someone submits a pull request that implements a new feature.  It is difficult to build a vibrant project community if you are always saying no in these contexts.</p>
<p>Clearly, we need a better way of limiting feature expansion in open source projects.  What can we do to better evaluate the hidden costs of adding new features so we can make informed, strategic decisions about which features to add?  Here are some ideas that have emerged out of my recent reading and conversations.</p>
<ul>
<li>Create a wiki page for your project, where you list all of the features you are <strong>not</strong> going to implement.  Publicize this list, discuss it and make it an important part of the development workflow.  Another way of phrasing this is to decide on a finite scope for the project.  When you are going through this exercise, come up with an initial scope and then force yourself to reduce it.</li>
<li>Make features fight hard to be accepted and implemented.  Communicate to the community and developers that the default answer to feature requests is no (it’s not personal!) and don’t even consider implementation until the much of the community is crying “we absolutely must have this.” Even then, you don’t have to say yes.</li>
<li>Create a workflow that separates feature requests from other tickets/issues.  When people submit new feature requests, encourage discussion, but don’t automatically promote the feature to the project’s todo list.  Then you can promote them, as needed, to the project’s todo list in an informed and prioritized manner.</li>
<li>When new feature requests appear, discuss the specific costs and liabilities associated with the feature.  Build this thinking into your development DNA.</li>
<li>Communicate to the community and its developers why it is important to fight against feature expansion.  Focus on the benefits of waging this war: smaller, simpler code base, fewer bugs, more time to focus on important features, easier to support, etc.</li>
<li>Remove features that have too great a cost or that few users actually use.  Maybe even create a special exception you can raise (FeatureReductionWarning?) to help people transition away from them.</li>
<li>Refactor the codebase to reduce complexity.  While this doesn’t directly reduce the number of features, it can mitigate the cost of existing and future features.  Extra bonus points if you can implement a new feature while dramatically reducing the complexity of the code base.</li>
<li>Improve testing.  Again, this is mitigation.</li>
</ul>
<p>As you discuss and evaluate features, here are some questions you can ask yourself and the community:</p>
<ul>
<li>What fraction of your user base will use the feature?  How often will they use it?  If it won’t be used by most of your users, just say no.</li>
<li>Can the feature be added as a third party plugin or library?  This is especially useful if the new feature would increase the overall scope of the project, but make a great standalone project.</li>
<li>How difficult will it be to test, debug, document, and maintain the feature?  What fraction of your development team is capable or interested in doing this work?  If the maintanence is huge and only one person is willing to do it, it is time to rethink it.</li>
<li>Can you implement the functionality in a more limited, but much simpler manner?  Developers absolutely love to implement features in the most general way possible.  It requires developer discipline and focus to resist this temptation.</li>
<li>One way that developers over engineer things is by making every conceivable thing configurable.  Can you simplify the feature by removing configurability and just choosing great defaults?</li>
</ul>
<p>One thoughtful discussion of these issues is in the book <a href="http://gettingreal.37signals.com/" target="_blank" title="Getting Real">Getting Real</a>, by some of the folks at <a href="http://37signals.com/" target="_blank" title="37signals">37signals</a>.  They propose something quite radical for handling feature requests in commercial web applications.  Here is what they say: “How do you manage them?  You don’t.  Just read them and then throw them away.”  Their experience is that the important features will keep coming up.  When this happens, you know they are important and you don’t have to write them down to keep track of them.  This is definitely my experience in developing the IPython Notebook.  The most important features, the ones that I am going to spend time on this year, are probably not written down anywhere, but everyone in the community is discussing them and couldn’t possibly forget them.  So why on earth do we currently have <a href="https://github.com/ipython/ipython/issues?direction=desc&amp;labels=type-enhancement&amp;page=1&amp;sort=updated&amp;state=open" target="_blank" title="177 open enhancement issues for IPython">177 open new feature issues</a> (we call them “enhancements”) on IPython’s GitHub site?</p>
<p>In an open source project, I don’t think it makes sense to literally throw away feature requests; sometimes the ensuing discussion is valuable and worth preserving.  But what about allowing the discussion to occur, for example in the context of a GitHub issue, but then closing the issue.  If someone wants to re-open the feature request at a later time to voice their support, they should be encouraged to do that.  But again, once discussion stops, the issue should be re-closed.  As this process repeats itself, the community is essentially voting for the features they want.  This would also dramatically reduce the number of open issues, which helps developers to better manage the active work on the project.</p>
<p>I don’t think this is the only way to manage feature requests intelligently in an open source project.  I would love to hear other ideas.  How are you managing these things in your own projects?  I realize that I am far from the first person to write about these things.  What other resources do you know of that address these problems?</p></div>
    </content>
    <updated>2013-01-09T03:49:20Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Brian Granger</name>
    </author>
    <source>
      <id>http://brianegranger.com</id>
      <link href="http://brianegranger.com/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://brianegranger.com" rel="alternate" type="text/html"/>
      <subtitle>Physics ∩ Computing</subtitle>
      <title>Brian E. Granger</title>
      <updated>2013-01-10T17:00:17Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:fseoane.net/blog,2013-01-04:2013/memory-plots-with-memory_profiler/</id>
    <link href="http://fseoane.net/blog/2013/memory-plots-with-memory_profiler/" rel="alternate" type="text/html"/>
    <title>Memory plots with memory_profiler</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Besides performing a line-by-line analysis of memory consumption,
<a href="http://pypi.python.org/pypi/memory_profiler"><code>memory_profiler</code></a>
exposes some functions that allow to retrieve the memory consumption
of a function in real-time, allowing e.g. to visualize the memory
consumption of a given function over time.</p>
<p>The function to be used is <code>memory_usage</code>. The first argument
specifies what code is to be monitored. This can represent either an
external process or a Python function. In the case of an external
process the first argument is an integer representing its process
identifier (PID). In the case of a Python function, we need pass the
function and its arguments to memory_usage. We do this by passing the
tuple <code>(f, args, kw)</code> that specifies the function, its position
arguments as a tuple and its keyword arguments as a dictionary,
respectively. This will be then executed by <code>memory_usage</code> as
<code>f(*args, **kw)</code>.</p>
<p>Let's see this with an example. Take as function NumPy's
<a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.pinv.html">pseudo-inverse function</a>. Thus
<code>f = numpy.linalg.pinv</code> and <code>f</code> takes one positional argument (the
matrix to be inverted) so <code>args = (a,)</code> where <code>a</code> is the matrix to be
inverted. Note that args must be a tuple consisting of the different
arguments, thus the parenthesis around <code>a</code>. The third item is a
dictionary <code>kw</code> specifying the keyword arguments. Here kw is optional
and is omitted.</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">memory_profiler</span> <span class="kn">import</span> <span class="n">memory_usage</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="c"># create a random matrix</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">mem_usage</span> <span class="o">=</span> <span class="n">memory_usage</span><span class="p">((</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">pinv</span><span class="p">,</span> <span class="p">(</span><span class="n">a</span><span class="p">,)),</span> <span class="n">interval</span><span class="o">=.</span><span class="mo">01</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">mem_usage</span><span class="p">)</span>
<span class="p">[</span><span class="mf">57.02734375</span><span class="p">,</span> <span class="mf">55.0234375</span><span class="p">,</span> <span class="mf">57.078125</span><span class="p">,</span> <span class="o">...</span><span class="p">]</span>
</pre></div>


<p>This has given me a list specifying at different time intervals <code>(t0,
t0 + .01, t0 + .02, ...)</code> at which the measurements where taken. Now I can
use that to for example plot the memory consumption as a function of
time:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pylab</span> <span class="kn">as</span> <span class="nn">pl</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pl</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">mem_usage</span><span class="p">))</span> <span class="o">*</span> <span class="o">.</span><span class="mo">01</span><span class="p">,</span> <span class="n">mem_usage</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'linalg.pinv'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pl</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Time (in seconds)'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pl</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Memory consumption (in MB)'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pl</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>


<p><img alt="Memory plot" src="http://fseoane.net/blog/static/images/2013/plot_memory_pinv.png"/></p>
<p>This will give the memory usage of a single function across time, which 
might be interesting for example to detect temporaries that would be
created during the execution. </p>
<p>Another use case for <code>memory_usage</code> would be to see how memory behaves
as input data gets bigger. In this case we are interested in memory as
a function of the input data. One obvious way we can do this is by
calling the same function each time with a different input and take as
memory consumption the maximum consumption over time. This way we will
have a memory usage for each input.</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>
<span class="o">...</span>    <span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">i</span><span class="p">,</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span>
<span class="o">...</span>    <span class="n">mem_usage</span> <span class="o">=</span> <span class="n">memory_usage</span><span class="p">((</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">pinv</span><span class="p">,</span> <span class="p">(</span><span class="n">A</span><span class="p">,)))</span>
<span class="o">...</span>    <span class="k">print</span> <span class="nb">max</span><span class="p">(</span><span class="n">mem_usage</span><span class="p">)</span>

<span class="mf">29.22</span>
<span class="mf">30.10</span>
<span class="mf">40.66</span>
<span class="mf">53.96</span>
</pre></div>


<p>It is now possible to plot these results as a function of the
dimensions.</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pylab</span> <span class="kn">as</span> <span class="nn">pl</span>
<span class="kn">from</span> <span class="nn">memory_profiler</span> <span class="kn">import</span> <span class="n">memory_usage</span>

<span class="n">dims</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">pinv_mem</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">dims</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i_dim</span><span class="p">,</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dims</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="n">memory_usage</span><span class="p">((</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">pinv</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,)),</span> <span class="n">interval</span><span class="o">=.</span><span class="mo">01</span><span class="p">)</span>
    <span class="n">pinv_mem</span><span class="p">[</span><span class="n">i_dim</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>

<span class="n">pl</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">dims</span><span class="p">,</span> <span class="n">pinv_mem</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'np.linalg.pinv'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Memory (in MB)'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Dimension of the square matrix'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'upper left'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'tight'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>


<p><img alt="Memory plot" src="http://fseoane.net/blog/static/images/2013/plot_memory_pinv_2.png"/></p></div>
    </summary>
    <updated>2013-01-03T23:00:00Z</updated>
    <category term="Python"/>
    <category term="memory"/>
    <category term="memory_profiler"/>
    <author>
      <name>Fabian Pedregosa</name>
    </author>
    <source>
      <id>http://fseoane.net/blog/</id>
      <link href="http://fseoane.net/blog/" rel="alternate" type="text/html"/>
      <link href="http://fseoane.net/blog//feed/rss.xml" rel="self" type="application/atom+xml"/>
      <title>I say things</title>
      <updated>2013-01-09T15:20:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1168</id>
    <link href="http://asmeurersympy.wordpress.com/2013/01/01/emacs-one-year-later/" rel="alternate" type="text/html"/>
    <title>Emacs: One year later</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As readers of this blog may remember, back in 2011, I decided to move to a command-line based editor. For roughly two weeks in December, 2011, I exclusively used Vim, and for the same amount of time in January, 2012, I used exclusively Emacs. I had used a little of each editor in the past, [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1168&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As readers of this blog may remember, back in 2011, I decided to move to a command-line based editor. For roughly two weeks in December, 2011, I exclusively used Vim, and for the same amount of time in January, 2012, I used exclusively Emacs. I had used a little of each editor in the past, but this was my first time using them to do true editing work. My experiences are chronicled in my blog posts (parts <a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/" title="1">1</a>, <a href="http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/" title="2">2</a>, <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/" title="3">3</a>, and <a href="http://asmeurersympy.wordpress.com/2012/07/09/emacs-7-months-later/" title="7 months later follow up">7 months later follow up</a>).  </p>
<p>To summarize, I decided to use Emacs, as I found it to be much more intuitive, and much more user-friendly.  Today, January 1, marks the one-year point of my using Emacs as my sole text editor, with some exceptions (notably, I’m currently writing this blog post in the browser).  So I’d like to make some observations:</p>
<li>Either one of these editors (Vim or Emacs) is going to really suck unless you are willing to make a serious investment in customizing them and installing nice addons. For the second point, Emacs has an advantage, because the philosophy of Vim is to be barebones whereas the philosophy of Emacs is to be featureful, so that in particular many things that were once addons of Emacs are now included in the standard installation.  For customization, on the one hand, Emacs is easier, because it has a nice interface (<code>M-x customize</code>), but on the other hand, Vim’s scripting language is much easier to hack on than Emacs lisp (I still can’t code in Lisp to save my life; it’s a very challenging programming language).
<p>But my point here is that neither has really great defaults. For example, in Emacs, <code>M-space</code> is bound to <code>just-one-space</code>, which is great for programming.  What it does is remove all spaces around the cursor, except for one.  But to be really useful, it also should include newlines.  It doesn’t do this by default.  Rather, you have to call it with a negative argument.  So to be really useful, you have to add</p>
<p/><pre class="brush: plain;">(defun just-one-space-with-newline ()
  "Call just-one-space with a negative argument"
  (interactive)
  (just-one-space -1))

(global-set-key (kbd "M-SPC") 'just-one-space-with-newline)
</pre><p/>
<p>to your <code>.emacs</code> file.</p></li>
<li>Emacs has great features, but I always have to look them up.  Or rather, I have to look up the keyboard shortcuts for them.  I only have the keyboard shortcuts memorized for the things I do every day.  I even ended up forgetting really important ones, like <code>M-w</code> (Emacs version of copy).  And if a feature involves several keystrokes to access, forget about it (for example, rectangular selection, or any features of special modes).  If I use a new mode, e.g., for some file type that I rarely edit (like HTML), I might as well not have any of the features, other than the syntax highlighting, because I either don’t know what they are, or even if I know that they should exist (like automatic tag completion for html), I have no idea how to access them.
<p>There’s really something to be said about GUI editors, which give these things to users in a way that they don’t have to memorize anything.  Perhaps I should try to use the menu more.  Or maybe authors of addons should aim to make features require as little cognitive user interaction as possible (such as the excellent <a href="http://cx4a.org/software/auto-complete/manual.html"><code>auto-complete-mode</code></a> I mentioned in <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/">part 3</a>).</p>
<p> I mention this because it is one of the things I complained about with Vim, that the keybindings were too hard to memorize.  Of course, the difference with Vim is that one has to memorize keybindings to do even the most basic of editing tasks, whereas with Emacs one can always fall back to more natural things like <code>Shift-Arrow Key</code> to select text or <code>Delete</code> to delete the character under the cursor (and yes, I know you can rebind this stuff in Vim; I refer you to the previous bullet point). </p></li>
<li>I mentioned at the end of part 3 that Vim might still be useful to learn, as vi is available literally anywhere that you have POSIX.  I honestly don’t think I would be able to use vi or vim if I had to, customization or no, unless I had my keyboard cheat sheet and a decent amount of time.  If I’m stuck on a barebones system and I can’t do anything about it, I’ll use nano/pico before I use vi.  It’s not that I hate vi. I just can’t do anything with it. It is the same to me now as it was before I used it in-depth.  I have forgotten all the keyboard shortcuts, except for <code>ESC</code> and <code>i</code>.</li>
<li>I don’t use <code>emacsclient</code> any more.  Ever since I got my new retina MacBook Pro, I don’t need it any more, because with the solid state drive starting Emacs from scratch is instantaneous.  I’m glad to get rid of it, because it had some seriously annoying glitches.</li>
<li>Add <code>alias e=emacs</code> to your Bash config file (<code>.profile</code> or <code>.bashrc</code>). It makes life much easier. “emacs” is not an easy word to type, at least on QWERTY keyboards.</li>
<li>I still feel like I am not nearly as efficient in Emacs as I could be. On the one hand, I know there are built-in features (like rectangular selection) that I do not take advantage of enough.  I have been a bit lazy with customization: there are a handful of things that I do often that require several keystrokes, but I still haven’t created custom keyboard shortcuts for (off the top of my head: copying and pasting to/from the Mac OS X clipboard and rigidly indenting/dedenting a block of text (<code>C-u 4 C-x TAB</code>, actually <code>C-c u 4 C-x TAB</code>, since I did the sensible thing and rebound <code>C-u</code> to clear to the previous newline, and bound <code>universal-argument</code> to <code>C-c u</code>) come to mind).
<p>I feel as if I were to watch someone who has used Emacs for a long time that I would learn a lot of tricks.</p></li>
<li>I really should learn Emacs lisp. There are a lot of little customizations that I would like to make, but they are really niche, and can only be done programmatically.  But who has the time to learn a completely new programming language (plus a whole library, as just knowing Lisp is useless if you don’t know the proper Emacs funtions and variables and coding styles)?</li>
<li>I’ve still not found a good visual browser for jumping to function definitions in a file (mostly Python function definitions, but also other kinds of headers for other kinds of files).  The best I’ve found is <code>imenu</code>. If you know of anything, please let me know.  One thing I really liked about Vim was the <a href="http://www.vim.org/scripts/script.php?script_id=273">tag list</a> extension, which did this perfectly (thanks to commenter <a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/#comment-424">Scott</a> for pointing it out to me).  I’ve been told that Cedet has something like this, but every time I try to install it, I run into some issues that just seem like way too much work (I don’t remember what they are, it won’t compile or something, or maybe it just wants to do just way too much and I can’t figure out how to disable everything except for the parts I want).  </li>
<li>If you ever code in C, add the following to your Makefile
<p/><pre class="brush: plain;">check-syntax:
	$(CC) -o nul $(FLAGS) -S $(CHK_SOURCES)
</pre><p/>
<p>(and if you don’t use a Makefile, start using one now).  This is assuming you have <code>CC</code> and <code>FLAGS</code> defined at the top (generally to something like <code>cc</code> and <code>-Wall</code>, respectively). Also, add the following to your <code>.emacs</code></p>
<p/><pre class="brush: plain;">;; ===== Turn on flymake-mode ====

(add-hook 'c-mode-common-hook 'turn-on-flymake)
(defun turn-on-flymake ()
  "Force flymake-mode on. For use in hooks."
  (interactive)
  (flymake-mode 1))

(add-hook 'c-mode-common-hook 'flymake-keyboard-shortcuts)
(defun flymake-keyboard-shortcuts ()
  "Add keyboard shortcuts for flymake goto next/prev error."
  (interactive)
  (local-set-key "\M-n" 'flymake-goto-next-error)
  (local-set-key "\M-p" 'flymake-goto-prev-error))
</pre><p/>
<p>The last part adds the useful keyboard shortcuts <code>M-n</code> and <code>M-p</code> to move between errors.  Now, errors in your C code will show up automatically as you type.  If you use the command line version of emacs like I do, and not the GUI version, you’ll also need to install the <a href="http://www.emacswiki.org/emacs/flymake-cursor.el">flymake-cursor</a> module, which makes the errors show up in the mode line, since otherwise it tries to use mouse popups.  You can change the colors using <code>M-x customize-face</code> (search for “flymake”). </p></li>
<li>I never got flymake to work with LaTeX.  Does anyone know how to do it? It seems it is hardcoded to use MikTeX, the Windows version of LaTeX. I found some stuff, but none of it worked.
<p>Actually, what I really would like is not syntax checking (I rarely make syntax mistakes in LaTeX any more), but rather something that automatically builds the PDF constantly as I type.  That way, I can just look over at the PDF as I am writing (I use an external monitor for this. I highly recommend it if you use LaTeX, especially one of those monitors that swivels to portrait mode).  </p></li>
<li>If you use Mac OS X, you can use the very excellent <a href="http://pqrs.org/macosx/keyremap4macbook/">KeyRemap4MacBook</a> program to make regular Mac OS X programs act more like Emacs.  Mac OS X already has many Emacs shortcuts built in (like <code>C-a</code>, <code>C-e</code>, etc.), but that only works in Cocoa apps, and it doesn’t include any meta key shortcuts.  This lets you use additional shortcuts literally everywhere (don’t worry, it automatically doesn’t use them in the Terminal), including an emulator for <code>C-space</code> and some <code>C-x</code> commands (like <code>C-x C-s</code> to <code>Command-s</code>).  It doesn’t work on context sensitive shortcuts, unfortunately, unless the operating system already supports it with another keyboard shortcut (e.g., it can map <code>M-f</code> to <code>Option-right arrow</code>).  For example, it can’t enable moving between paragraphs with <code>C-S-{</code> and <code>C-S-}</code>.  If anyone knows how to do that, let me know. </li>
<li>For about a month this summer, I had to use a Linux laptop, because my Mac broke and my new Mac took a month to arrive (the downside to ordering a new computer immediately after it is announced by Apple).  At this point, my saving of all my customizations to <a href="http://pqrs.org/macosx/keyremap4macbook/">GitHub</a> really helped a lot.  I created a new branch for the Linux computer (because several things in my customizations were Mac specific), and just symlinked the files I wanted.  A hint I can give to people using Linux is to use Konsole.  The Gnome terminal sucks.  One thing I never figured out is how to make Konsole (or any other Terminal for that matter) to send Control-Shift shortcuts to Emacs (see <a href="http://superuser.com/q/439961/39697" rel="nofollow">http://superuser.com/q/439961/39697</a>).   I don’t use Linux any more at the moment, but if anyone knows what was going on there, add an answer to that question. </li>
<li>In <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/">part 3</a> mentioned that <a href="http://www.dr-qubit.org/predictive/predictive-user-manual/html/index.php">predictive mode</a> was cool, but not very useful.  What it does is basically add tab completion for every word in the English language.  Actually, I’ve found using auto-complete-mode even when editing text (or LaTeX) to be very useful.  Unlike predictive mode, it only guesses words that you’ve already typed  (it turns out that you tend to type the same words over and over, and doubly so if those words are LaTeX math commands).  Also, predictive mode has a set order of words, which supposedly helps to use it with muscle memory, whereas auto-complete-mode tries to learn what words you are more likely to use based on some basic statistical machine-learning.  Also, auto-complete-mode has a much better visual UI and smarter defaults than predictive mode. The result is that it’s actually quite useful and makes typing plain text, as well as LaTeX (actually, pretty much anything, as long as you tend to use the same words repeatedly) much faster.  I recommend enabling auto-complete-mode almost everywhere using hooks, like
<p/><pre class="brush: plain;">(add-hook 'latex-mode-hook 'auto-complete-mode)
(add-hook 'LaTeX-mode-hook 'auto-complete-mode)
(add-hook 'prog-mode-hook 'auto-complete-mode)
;; etc.
</pre><p/>
</li>
<li>At the end of the day, I’m pretty happy with Emacs.  I’ve managed to fix most of the things that make it annoying, and it is orders of magnitude more powerful than any GUI editor or IDE I’ve ever seen, especially at just basic text editing, which is the most important thing (I can always use another program for other things, like debugging or whatever).  The editor uses the basic shortcuts that I am used to, and is quite efficient to write in.  Extensions like auto-complete-mode make using it much faster, though I could use some more extensions to make it even better (namely, a better isearch and a better imenu). Regarding Vim vs. Emacs, I’d like to quote something I said back in my <a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1">first blog post</a> about Vim over a year ago:<br/>
<blockquote><p>Vim is great for text <em>editing</em>, but not so hot for text <em>writing</em> (unless you always write text perfectly, so that you never need to leave insert mode until you are done typing). Just the simple act of deleting a mistyped word (yes, word, that happens a lot when you are decently fast touch typist) takes several keystrokes, when it should in my opinion only take one (two if you count the meta-key).</p></blockquote>
<p>Needless to say, I find Emacs to be great for both text editing and text writing. </p></li>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1168/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1168/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1168&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-01-01T09:51:21Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2013-01-17T11:20:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1165</id>
    <link href="http://asmeurersympy.wordpress.com/2012/12/30/2012-in-review/" rel="alternate" type="text/html"/>
    <title>2012 in review</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The WordPress.com stats helper monkeys prepared a 2012 annual report for this blog. Here’s an excerpt: 4,329 films were submitted to the 2012 Cannes Film Festival. This blog had 20,000 views in 2012. If each view were a film, this blog would power 5 Film Festivals Click here to see the complete report.<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1165&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The WordPress.com stats helper monkeys prepared a 2012 annual report for this blog.</p>
<p>	<a href="http://asmeurersympy.wordpress.com/2012/annual-report/"><img alt="" src="http://www.wordpress.com/wp-content/mu-plugins/annual-reports/img/2012-emailteaser.png" width="100%"/></a></p>
<p>Here’s an excerpt:</p>
<blockquote><p>4,329 films were submitted to the 2012 Cannes Film Festival. This blog had <strong>20,000</strong> views in 2012. If each view were a film, this blog would power 5 Film Festivals</p></blockquote>
<p><a href="http://asmeurersympy.wordpress.com/2012/annual-report/">Click here to see the complete report.</a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1165/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1165/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1165&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-12-30T23:07:19Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2013-01-17T11:20:13Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2012/12/11/Statistical-Simplification</id>
    <link href="http://matthewrocklin.com/blog//work/2012/12/11/Statistical-Simplification" rel="alternate" type="text/html"/>
    <title>Statistical Simplification</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://matthewrocklin.com/blog/feed.sympy.xml">Lawrence Leemis</a>, a statistician at Williams and Mary, recently published <a href="http://www.math.wm.edu/~leemis/chart/UDR/UDR.html">a wonderful interactive visualization</a> on the reduction relationships of statistical distributions. (found via <a href="http://www.johndcook.com/blog/2012/12/10/extended-distribution-chart/">John Cook’s blog</a>)</p>

<p><a href="http://www.math.wm.edu/~leemis/chart/UDR/UDR.html"><img alt="" src="http://www.johndcook.com/leemis.png"/></a></p>

<p>This excites me because it touches on one of my favorite topics</p>

<p><em>How do we reusably encode expert knowledge into computational systems?</em></p>

<h2 id="the_big_challenge">The Big Challenge</h2>

<p>Correct use of mathematical information can accelerate important computations by several orders of magnitude. Unfortunately the people who know the mathematics are not always the ones doing the computation. This results in substantial waste.</p>

<p>How do we integrate expert mathematical knowledge everywhere? One solution is to collaborate more. While collaboration is generally good it doesn’t scale well. As problems become more complex it is more difficult to find all of the necessary experts, especially for smaller relatively unimportant projects. Also, collaboration rarely results in reusable infrastructure. Statistical chemistry projects are rarely applicable to statistical biology problems despite their shared interest in statistics.</p>

<h2 id="one_solution__multistage_compilation">One Solution - Multi-Stage Compilation</h2>

<p>We could write each expert’s knowledge into a single project and then connect many such projects into a multi-stage compiler. At each each stage we simplify the expression with the knowledge relevant at that stage. We must create a transformation between each pair of connecting stages. Ideally the conceptual distance between connected stages is small and so these transformations are easy.</p>

<p>This isn’t clearly the right solution. It is difficult to chain many small projects together and end up with efficient code. You need to find the right sequence of intermediate layers that are able to communicate mathematical information down to the lowest-level of computational code.</p>

<h2 id="relevance_to_sympystats">Relevance to SymPy.stats</h2>

<p>SymPy.stats endeavors to be a transformation in such a toolchain. It converts stochastic expressions into integral expressions.</p>

<p>The surrounding infrastructure looks like this</p>

<p><img alt="" src="http://mrocklin.github.com/blog/images/stats-simp.png"/></p>

<p>When SymPy expressions are imbued with random variables they form stochastic expressions. Sympy.stats transforms these into integral expressions which are then again converted through a variety of methods, either numeric (like Monte Carlo) or again symbolic.</p>

<p>Each stage within this pipeline presents us with the opportunity to simplify the expression with knowledge relevant to that stage. For example at the input and output SymPy Expr layers we make algebraic and trigonometric simplifications like the following</p>

<pre><code>X + X -&gt; 2*X
sin(x)**2 + cos(x)**2 -&gt; 1 </code></pre>

<p>At the integration stage we might separate multivariate integrals if possible or use integration by parts.</p>

<p>Notice that there is no such simplification self-loop at the <code>Stochastic Expr</code> node. This is where the information in Leemis’ chart would fit.</p>

<h3 id="a_failing_of_sympystats">A Failing of sympy.stats</h3>

<p>Currently sympy.stats does not simplify stochastic expressions with expert knowledge; it converts directly from stochastic expressions to integral expressions without first applying known simplifications like what is encoded in Leemis’ chart. This causes some fairly embarassing failures</p>
<div class="highlight"><pre><code class="python"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">sympy.stats</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">X</span> <span class="o">=</span> <span class="n">Normal</span><span class="p">(</span><span class="s">'X'</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>  <span class="c"># A standard normal random variable</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">density</span><span class="p">(</span><span class="n">X</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>  
<span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> 
<span class="o">&lt;&lt;</span> <span class="n">failure</span><span class="p">:</span> <span class="n">unevaluated</span> <span class="n">integral</span> <span class="o">&gt;&gt;</span>
</code></pre></div>
<p>Any statistician could tell you that the expression <code>X**2</code> has a Chi Squared distribution which has a simple and well understood density. This relation is commonly known and commonly occurs in practice.</p>

<p>Because sympy.stats doesn’t know this it blindly takes the expression <code>density(X**2)</code> and converts it directly into an integral. The resulting integral is difficult and stumps the integration routines.* In this case knowing basic statistics would have turned an impossible problem into a trivial one.</p>

<h3 id="future_work">Future work</h3>

<p>We should encode relations on distributions into SymPy. The knowledge in Leemis’s chart could be written down as a knowledgebase of known transformations. Transformations like the following could solve our immediate problem.</p>
<div class="highlight"><pre><code class="python"><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">StandardNormal</span><span class="p">()</span>
<span class="n">StandardNormal</span><span class="p">()</span><span class="o">**</span><span class="mi">2</span> <span class="o">-&gt;</span> <span class="n">ChiSquared</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">StandardNormal</span><span class="p">()</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">ChiSquared</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ChiSquared</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div>
<p>Each stage in the compilation pipeline presents us with an opportunity to apply expert knowledge. The <code>Stochastic Expr</code> stage is such an opportunity of which we are not currently taking advantage.</p>

<p>Leemis’s chart is written declaratively, highlighting which logical transformations are possible under which conditions. The new modules on <a href="http://mrocklin.github.com/blog/work/2012/11/01/Unification/">unification</a> and <a href="http://mrocklin.github.com/blog/work/2012/11/07/Strategies/">strategies</a> should provide all of the necessary infrastructure to translate Leemis’ chart to functioning code. Writing a minimal simpliication scheme for the above problem might be as simple as</p>
<div class="highlight"><pre><code class="python"><span class="c">#    rewriterule(from-pattern, to-pattern, wilds)</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">rewriterule</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">StandardNormal</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="n">wilds</span><span class="o">=</span><span class="p">(</span><span class="n">name</span><span class="p">,))</span>
<span class="n">p2</span> <span class="o">=</span> <span class="n">rewriterule</span><span class="p">(</span><span class="n">StandardNormal</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">ChiSquared</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">wilds</span><span class="o">=</span><span class="p">(</span><span class="n">name</span><span class="p">,))</span>
<span class="n">p3</span> <span class="o">=</span> <span class="n">rewriterule</span><span class="p">(</span><span class="n">StandardNormal</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">ChiSquared</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span> 
                 <span class="n">ChiSquared</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">wilds</span><span class="o">=</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span>

<span class="n">statsimp</span> <span class="o">=</span> <span class="n">exhaust</span><span class="p">(</span><span class="n">bottom_up</span><span class="p">(</span><span class="n">multiplex</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">p3</span><span class="p">)))</span>
</code></pre></div>
<p>If anyone is interested in this I’d be happy to help out. This is the sort of project that really excites me but that I can’t currently justify time-wise.</p></div>
    </summary>
    <updated>2012-12-11T08:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T11:20:30Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:fseoane.net/blog,2012-12-08:2012/singular-value-decomposition-in-scipy/</id>
    <link href="http://fseoane.net/blog/2012/singular-value-decomposition-in-scipy/" rel="alternate" type="text/html"/>
    <title>Singular Value Decomposition in SciPy</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>SciPy contains two methods to compute the singular value decomposition (SVD) of a matrix: <code>scipy.linalg.svd</code> and <code>scipy.sparse.linalg.svds</code>. In this post I'll compare both methods for the task of computing the full SVD of a large dense matrix.</p>
<p>The first method, <code>scipy.linalg.svd</code>, is perhaps the best known and uses the linear algebra library <a href="http://www.netlib.org/lapack/">LAPACK</a> to handle the computations. This implements the Golub-Kahan-Reisch algorithm <sup id="fnref:1"><a href="http://fseoane.net/blog/feed/#fn:1" rel="footnote">1</a></sup>, which is accurate and highly efficient with a cost of O(n^3) floating-point operations <sup id="fnref:2"><a href="http://fseoane.net/blog/feed/#fn:2" rel="footnote">2</a></sup>.</p>
<p>The second method is <code>scipy.sparse.linalg.svds</code> and despite it's name it works fine also for dense arrays. This implementation is based on the <a href="http://www.caam.rice.edu/software/ARPACK/">ARPACK</a> library and consists of an iterative procedure that finds the SVD decomposition by reducing the problem to an eigendecomposition on the array X -&gt; dot(X.T, X). This method is usually very effective when the input matrix X is sparse or only the largest singular values are required. There are other SVD solvers that I did not consider, such as <a href="http://pypi.python.org/pypi/sparsesvd/">sparsesvd</a> or <a href="http://pysparse.sourceforge.net/introduction.html#jdsym">pysparse.jdsym</a>, but my points for the sparse solve probably hold for those packages too since they both implement iterative algorithms based on the same principles.</p>
<p>When the input matrix is dense and all the singular values are required, the first method is usually more efficient. To support this statement I've created a little benchmark: timings for both methods as a function of the size of the matrices. Notice that we are in a case that is clearly favorable to the <code>linalg.svd</code>: after all <code>sparse.linalg.svds</code> was not created with this setting in mind, it was created for sparse matrices or dense matrices with some special structure. We will see however that even in this setting it has interesting advantages.</p>
<p>I'll create random square matrices with different sizes and plot the timings for both methods. For the benchmarks I used SciPy v0.12 linked against Intel Math Kernel Library v11. Both methods are single-threaded (I had to set OMP_NUM_THREADS=1 so that MKL does not try to parallelize the computations). <a href="https://gist.github.com/4250756#file-svd_timing-py">[code]</a></p>
<p><img alt="svd timings" src="http://fseoane.net/blog/static/uploads/2012/svd_timing.png"/></p>
<p>Lower timings are better, so this gives <code>scipy.linalg.svd</code> as clear winner. However, this is just part of the story. What this graph doesn't show is that this method is winning at the price of allocating a huge amount of memory for temporary computations. If we now plot the memory consumption for both methods under the same settings, the story is completely different. <a href="https://gist.github.com/4250756#file-svd_memory-py">[code]</a></p>
<p><img alt="svd memory" src="http://fseoane.net/blog/static/uploads/2012/svd_memory.png"/></p>
<p>The memory requirements of <code>scipy.linalg.svd</code> scale with the number of dimensions, while for the sparse version the amount of allocated memory is constant. Notice that we are measuring the amount of total memory used, it is thus natural to see a slight increase in memory consumption since the input matrix is bigger on each iteration.</p>
<p>For example, in my applications, I need to compute the SVD of a matrix for whom the needed workspace does not fit in memory. In cases like this, the sparse algorithm (<code>sparse.linalg.svds</code>) can come in handy: the timing is just a factor worse (but I can easily parallelize jobs) and the memory requirements for this method is peanuts compared to the dense version.</p>
<div class="footnote">
<hr/>
<ol>
<li id="fn:1">
<p>Calculating the singular values and pseudo-inverse of a matrix, <em>Golub, Gene H., Kahan, William</em>, 1965, <a href="http://www.jstor.org/stable/2949777">JSTOR</a> <a href="http://fseoane.net/blog/feed/#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
<li id="fn:2">
<p>A Survey of Singular Value Decomposition Methods and Performance Comparison of Some Available Serial Codes, <em>Plassman, Gerald E.</em> 2005 <a href="http://research.microsoft.com/en-us/um/people/zhoulin/2005-a%20survey%20of%20singular%20value%20decomposition_plassman.pdf">PDF</a> <a href="http://fseoane.net/blog/feed/#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">↩</a></p>
</li>
</ol>
</div></div>
    </summary>
    <updated>2012-12-07T23:00:00Z</updated>
    <category term="python"/>
    <category term="scipy"/>
    <category term="svd"/>
    <author>
      <name>Fabian Pedregosa</name>
    </author>
    <source>
      <id>http://fseoane.net/blog/</id>
      <link href="http://fseoane.net/blog/" rel="alternate" type="text/html"/>
      <link href="http://fseoane.net/blog//feed/rss.xml" rel="self" type="application/atom+xml"/>
      <title>I say things</title>
      <updated>2013-01-09T15:20:23Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2012/12/03/Characteristic-Functions</id>
    <link href="http://matthewrocklin.com/blog//work/2012/12/03/Characteristic-Functions" rel="alternate" type="text/html"/>
    <title>Characteristic Functions</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In a recent post, <a href="http://jpktd.blogspot.com/2012/12/characteristic-functions-and-scipystats.html">Characteristic Functions and scipy.stats</a>, <a href="https://github.com/josef-pkt">Josef Perktold</a> created functions for the <a href="http://en.wikipedia.org/wiki/Characteristic_function">characteristic functions</a> of the <a href="http://en.wikipedia.org/wiki/Normal_distribution">Normal</a> (easy) and <a href="http://en.wikipedia.org/wiki/Student%27s_t-distribution">t</a> (hard) distributions. The t-distribution is challenging because the solution involves special functions and has numerically challenging behavior around 0 for high degrees of freedom. Some quotes</p>

<p><em>The characteristic function for the normal distribution is easy, but looking at the characteristic function of the t-distribution, I wish someone had translated it into code already</em></p>

<p><em>Since I haven’t seen it yet, I sat down and tried it myself. I managed to code the characteristic function of the t-distribution, but it returns NaNs when it is evaluated close to zero for large df. I didn’t find a Bessel “k” function that works in this case</em></p>

<p>He then includes his code and discusses a particular application of the characteristic function which I won’t discuss here.</p>

<h2 id="symbolic_solution">Symbolic Solution</h2>

<p>Josef wished that this code had been written already. Characteristic functions aren’t built into SymPy but we may be able to derive them automatically.</p>

<p>Wikipedia says that the characteristic function \(\phi(t)\) of a random variable <code>X</code> is defined as follows</p>

<p>$$ \phi_X(t) = E(e^{itX}) $$</p>

<p>It equal to the expectation of <code>exp(i*t*X)</code>. Lets do this in SymPy</p>

<pre><code>&gt;&gt;&gt; from sympy.stats import *
&gt;&gt;&gt; mu = Symbol('mu', bounded=True)
&gt;&gt;&gt; sigma = Symbol('sigma', positive=True, bounded=True)
&gt;&gt;&gt; t = Symbol('t', positive=True)

&gt;&gt;&gt; X = Normal('X', mu, sigma)  # Normal random variable
&gt;&gt;&gt; simplify(E(exp(I*t*X)))     # Expectation of exp(I*t*X)
              2  2
             σ ⋅t 
     ⅈ⋅μ⋅t - ─────
               2  
   ℯ             </code></pre>

<p>I was actually pretty surprised that this worked as smoothly as it did. SymPy stats wasn’t designed for this.</p>

<p>Here are some gists for the <a href="https://gist.github.com/4186685">Cauchy</a> and <a href="https://gist.github.com/4186709">Student-T</a> distributions. Cauchy simplifies down pretty well but the Student-T characteristic function has a few special functions included.</p>

<h2 id="behavior_near_zero">Behavior near zero</h2>

<p>Josef says that the behavior of the characteristic function of the t distribution near zero for high degrees of freedom (the nu parameter) is challenging to compute numerically. Can SymPy handle this symbolically?</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">nu</span> <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'nu'</span><span class="p">,</span> <span class="n">positive</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">integer</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'t'</span><span class="p">,</span> <span class="n">positive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">X</span> <span class="o">=</span> <span class="n">StudentT</span><span class="p">(</span><span class="s">'X'</span><span class="p">,</span> <span class="n">nu</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">simplify</span><span class="p">(</span><span class="n">E</span><span class="p">(</span><span class="n">exp</span><span class="p">(</span><span class="n">I</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="n">X</span><span class="p">)))</span>
</code></pre></div>
<p><img alt="" src="http://goo.gl/a6xcw"/></p>

<p>The bold scripted I’s are besseli functions. We restrict this expression to a specific number of degrees of freedom, setting <code>nu = 50</code></p>

<pre><code>&gt;&gt;&gt; simplify(E(exp(I*t*X))).subs(nu, 50)  # replace nu with 50
         ⎛         ___  ⎞            ⎛        ___  ⎞
∞⋅besseli⎝-25, 5⋅╲╱ 2 ⋅t⎠ - ∞⋅besseli⎝25, 5⋅╲╱ 2 ⋅t⎠</code></pre>

<p>Whoops, simple substitution at that number of degrees of freedom fails, giving us infinities. What if we build the expression with <code>50</code> from the beginning? This gives the integration routines more information when they compute the expectation.</p>

<pre><code>&gt;&gt;&gt; X = StudentT('X', 50)
&gt;&gt;&gt; simplify(E(exp(I*t*X)))
        ⎛              │     2  -ⅈ⋅π⎞           ⎛              │     2  ⅈ⋅π⎞
╭─╮3, 1 ⎜   1/2        │ 25⋅t ⋅ℯ    ⎟   ╭─╮3, 1 ⎜   1/2        │ 25⋅t ⋅ℯ   ⎟
│╶┐     ⎜              │ ───────────⎟ + │╶┐     ⎜              │ ──────────⎟
╰─╯1, 3 ⎝25, 0, 1/2    │      2     ⎠   ╰─╯1, 3 ⎝25, 0, 1/2    │     2     ⎠
────────────────────────────────────────────────────────────────────────────
                        1240896803466478878720000⋅π                         </code></pre>

<p>The solution is in terms of <a href="http://en.wikipedia.org/wiki/Meijer-G">Meijer-G</a> functions. Can we evaluate this close to <code>t = 0</code>?</p>

<pre><code>&gt;&gt;&gt; simplify(E(exp(I*t*X))).subs(t, 1e-6).evalf()
0.999999999999479 + 1.56564942264937e-29⋅ⅈ

&gt;&gt;&gt; simplify(E(exp(I*t*X))).subs(t, 1e-30).evalf()  
1.0 - 1.2950748484704e-53⋅ⅈ</code></pre>

<p>This is where scipy’s special functions failed in Josef’s post, yielding infinity instead of 1.</p>

<p>And finally we plot the behavior around 0.</p>

<pre><code>&gt;&gt;&gt; plot(re(simplify(E(exp(I*t*X)))), (t, 1e-7, 1e-1))</code></pre>

<p><img alt="" src="http://mrocklin.github.com/blog/images/student-t-characteristic-near-zero.png"/></p>

<h2 id="closing_notes">Closing Notes</h2>

<p>The <code>sympy.stats</code> module was not designed with characteristic functions in mind. I was pleasantly surprised when I entered code almost identical to the mathematical definition</p>

<pre><code>X = Normal('X', mu, sigma)
E(exp(I*t*X))</code></pre>

<p>and received the correct answer. I am always happy when projects work on problems for which they were not originally designed. The fact that this works is largely due to SymPy’s excellent handling of integrals of special functions, due largely to <a href="https://github.com/ness01">Tom Bachmann</a>.</p>

<p>If you do complex work on statistical functions I recommend you take a look at <code>sympy.stats</code>. It’s able to perform some interesting high level transformations. Thanks to recent work by <a href="https://github.com/raoulb">Raoul Bourquin</a> many of the common distributions found in <code>scipy.stats</code> are now available (with even more in a <a href="https://github.com/sympy/sympy/pull/1413">pull request</a>).</p></div>
    </summary>
    <updated>2012-12-03T08:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T11:20:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://brianegranger.com/?p=235</id>
    <link href="http://brianegranger.com/?p=235" rel="alternate" type="text/html"/>
    <title>PyData NY</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This past month, I attended <a href="http://nyc2012.pydata.org/" target="_blank" title="PyData NY">PyData NY</a> in midtown Manhattan. This is the second PyData conference and the folks at <a href="http://continuum.io/" target="_blank" title="Continuum Analytics">Continuum Analytics</a> have done a spectacular job in promoting and running this conference. In less than a year PyData has grown to over 200 attendees.  The timing [...]</p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This past month, I attended <a href="http://nyc2012.pydata.org/" target="_blank" title="PyData NY">PyData NY</a> in midtown Manhattan. This is the second PyData conference and the folks at <a href="http://continuum.io/" target="_blank" title="Continuum Analytics">Continuum Analytics</a> have done a spectacular job in promoting and running this conference. In less than a year PyData has grown to over 200 attendees.  The timing (right after <a href="http://strataconf.com/" target="_blank" title="Strata">Strata</a>) and location (NY and Bay Area) of the PyData conferences are definitely a strong part of the success.</p>
<p>The conference had a wide range of talks from a fantastic set of speakers. It is very clear that the community is growing in leaps and bounds and that there are a lot of bright people writing great code.  It is always fun to think back on where the community and various projects were in the past.  Just think, it wasn’t that long ago, that <a href="http://pandas.pydata.org/" target="_blank" title="Pandas">Pandas</a> didn’t exist!  Where will we be in another 3 years?</p>
<p>The representation of IPython at the conference was amazing.  Not only did I present two talks on the IPython Notebook and IPython.parallel, but many of the other presenters used the IPython Notebook in their talks.  Ultimately, in developing the IPython Notebook we are scratching our own itch.  We are working scientists who need better tools for our research.  But it is seriously gratifying to see that how useful other people find it.  That makes developing it one of the most enjoyable things I have ever done.</p>
<p>Continuum has put all of the talks on Vimeo <a href="http://vimeo.com/continuumanalytics" target="_blank" title="here">here</a>, but I wanted to point out a few related to IPython:</p>
<p>First, I gave a talk about the <a href="http://vimeo.com/53051817" target="_blank" title="IPython Notebook">IPython Notebook</a>.  With 45 minutes, I was able to give a talk that was almost tutorial in nature.  In preparing this talk, I went through the IPython example Notebooks and organized/updated all of them.  This should provide a much nicer set of materials for people wanting to learn about the Notebook.  We are currently in the process of reviewing the pull request for these updates.</p>
<p>Second, I gave a talk about <a href="http://vimeo.com/53056634" target="_blank" title="IPython parallel">IPython.parallel</a>.  For this talk, I mostly followed a set of materials that Min Ragan-Kelley prepared for previous SciPy/PyCon tutorials.  Min has done a fantastic job with IPython.parallel and this set of materials really goes into great depth on all of the details.  This material is hosted <a href="https://github.com/ipython/talks" target="_blank">here</a>.</p>
<p>Third, Michael Selik gave a nice talk entitled <a href="http://vimeo.com/53105125" target="_blank" title="IPython as a teaching tool">IPython as a teaching tool</a>, which explores using the IPython Notebook in a teaching context.  It is becoming clear that the Notebook is particularly useful in this context and it was very helpful to have someone reflect on how that was going for them.</p>
<p>Finally, Massimo di Stefano is doing some <a href="http://vimeo.com/53094837" target="_blank" title="amazing things">amazing things</a> with the Notebook and GIS.  He is really leveraging the ability of the Notebook to embed arbitrary HTML.  He even has a “gearth” function that embeds Google Earth in an output cell!  Here is one of his <a href="http://nbviewer.ipython.org/url/epi.whoi.edu/esr/GIS_GRASS-R_Example.ipynb" target="_blank" title="GIS Notebook">Notebooks</a> on nbviewer.ipython.org.</p>
<p>Unfortunately, many people left early because of hurricane Sandy, so the sprints were sparsely attended.  I was glad to catch my flight back to the west coast only hours before JFK closed.  Can’t wait for <a href="http://sv2013.eventbrite.com/" target="_blank" title="PyData Silicon Valley">PyData in Silicon Valley</a> after PyCon.</p>
<p> </p></div>
    </content>
    <updated>2012-11-29T05:36:31Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Brian Granger</name>
    </author>
    <source>
      <id>http://brianegranger.com</id>
      <link href="http://brianegranger.com/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://brianegranger.com" rel="alternate" type="text/html"/>
      <subtitle>Physics ∩ Computing</subtitle>
      <title>Brian E. Granger</title>
      <updated>2013-01-10T17:00:17Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2012/11/24/Kalman-Filter</id>
    <link href="http://matthewrocklin.com/blog//work/2012/11/24/Kalman-Filter" rel="alternate" type="text/html"/>
    <title>Computing the Kalman Filter</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The <a href="http://en.wikipedia.org/wiki/Kalman_filter">Kalman Filter</a> is an algorithm to update probability distributions with new observations made under noisy conditions. It is used in everything from smartphone GPS navigation systems to large scale climate simulations. It is implemented in hardware ranging from embedded devices to super-computers. It is important and widely used.</p>

<p>In this post I will</p>

<ol>
<li>Show how to compute the Kalman Filter with BLAS/LAPACK</li>

<li>Relate this to old work on <code>sympy.stats</code></li>

<li>Analyze the computation graph for some flaws and features</li>
</ol>

<h2 id="results">Results</h2>

<p>The Kalman filter can be defined as a pair of matrix expressions</p>
<div class="highlight"><pre><code class="python"><span class="c"># kalman.py</span>
<span class="kn">from</span> <span class="nn">sympy.matrices.expressions</span> <span class="kn">import</span> <span class="n">MatrixSymbol</span><span class="p">,</span> <span class="n">Identity</span>
<span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Symbol</span><span class="p">,</span> <span class="n">Q</span>

<span class="n">n</span><span class="p">,</span> <span class="n">k</span>    <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'n'</span><span class="p">),</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'k'</span><span class="p">)</span>
<span class="n">mu</span>      <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'mu'</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">Sigma</span>   <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'Sigma'</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">H</span>       <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'H'</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">R</span>       <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'R'</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
<span class="n">data</span>    <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'data'</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">I</span>       <span class="o">=</span> <span class="n">Identity</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

<span class="n">new_mu</span>      <span class="o">=</span> <span class="n">mu</span> <span class="o">+</span> <span class="n">Sigma</span><span class="o">*</span><span class="n">H</span><span class="o">.</span><span class="n">T</span> <span class="o">*</span> <span class="p">(</span><span class="n">R</span> <span class="o">+</span> <span class="n">H</span><span class="o">*</span><span class="n">Sigma</span><span class="o">*</span><span class="n">H</span><span class="o">.</span><span class="n">T</span><span class="p">)</span><span class="o">.</span><span class="n">I</span> <span class="o">*</span> <span class="p">(</span><span class="n">H</span><span class="o">*</span><span class="n">mu</span> <span class="o">-</span> <span class="n">data</span><span class="p">)</span>
<span class="n">new_Sigma</span>   <span class="o">=</span> <span class="p">(</span><span class="n">I</span> <span class="o">-</span> <span class="n">Sigma</span><span class="o">*</span><span class="n">H</span><span class="o">.</span><span class="n">T</span> <span class="o">*</span> <span class="p">(</span><span class="n">R</span> <span class="o">+</span> <span class="n">H</span><span class="o">*</span><span class="n">Sigma</span><span class="o">*</span><span class="n">H</span><span class="o">.</span><span class="n">T</span><span class="p">)</span><span class="o">.</span><span class="n">I</span> <span class="o">*</span> <span class="n">H</span><span class="p">)</span> <span class="o">*</span> <span class="n">Sigma</span>

<span class="n">assumptions</span> <span class="o">=</span> <span class="p">(</span><span class="n">Q</span><span class="o">.</span><span class="n">positive_definite</span><span class="p">(</span><span class="n">Sigma</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">Sigma</span><span class="p">)</span> <span class="o">&amp;</span>
               <span class="n">Q</span><span class="o">.</span><span class="n">positive_definite</span><span class="p">(</span><span class="n">R</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">R</span><span class="p">))</span>
</code></pre></div>
<p>We convert these matrix expressions into a computation</p>
<div class="highlight"><pre><code class="python"><span class="c"># kalman_computation.py</span>
<span class="kn">from</span> <span class="nn">kalman</span> <span class="kn">import</span> <span class="n">new_mu</span><span class="p">,</span> <span class="n">new_Sigma</span><span class="p">,</span> <span class="n">assumptions</span>
<span class="kn">from</span> <span class="nn">sympy.computations.matrices.compile</span> <span class="kn">import</span> <span class="n">make_rule</span><span class="p">,</span> <span class="n">patterns</span>
<span class="kn">from</span> <span class="nn">sympy.computations.core</span> <span class="kn">import</span> <span class="n">Identity</span>

<span class="n">ident</span> <span class="o">=</span> <span class="n">Identity</span><span class="p">(</span><span class="n">new_mu</span><span class="p">,</span> <span class="n">new_Sigma</span><span class="p">)</span>
<span class="n">rule</span> <span class="o">=</span> <span class="n">make_rule</span><span class="p">(</span><span class="n">patterns</span><span class="p">,</span> <span class="n">assumptions</span><span class="p">)</span>
<span class="n">mathcomp</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">rule</span><span class="p">(</span><span class="n">ident</span><span class="p">))</span>
<span class="n">mathcomp</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<p><a href="http://mrocklin.github.com/blog/images/kalman-math-1.pdf"><img alt="" src="http://mrocklin.github.com/blog/images/kalman-math-1.png"/></a></p>

<p>This is a useful result.</p>

<h2 id="history_with_stats">History with stats</h2>

<p>Two years ago I wrote two blogposts about the Kalman filter, one on <a href="http://sympystats.wordpress.com/2011/07/02/a-lesson-in-data-assimilation-using-sympy/">the univariate case</a> and one on <a href="http://sympystats.wordpress.com/2011/07/19/multivariate-normal-random-variables/">the multivariate case</a>. At the time I was working on <code>sympy.stats</code>, a module that enabled uncertainty modeling through the introduction of a random variables into the SymPy language.</p>

<p>SymPy stats was designed with atomicity in mind. It tried to be as small and thin a layer as possible.</p>

<ul>
<li>It turned queries on continuous random expressions into integral expressions.</li>

<li>It turned queries on discrete random expressions into iterators and sums.</li>

<li>It also turned queries on multivariate normal random expressions into matrix expressions.</li>
</ul>

<p>The goal was to turn a specialized problem (uncertainty quantification) into a general one (integrals, sums, matrix expressions) under the assumption that tools are much richer to solve general problems than specific ones.</p>

<p>The first blogpost on the univariate kalman filter produced integral expressions that were then solved by SymPy’s integration routines. The <a href="http://sympystats.wordpress.com/2011/07/19/multivariate-normal-random-variables/">second blogpost</a> on the multivariate Kalman filter generated the following matrix expressions</p>

<p>$$\mu’ = \mu + \Sigma H^T \left( R + H \Sigma H^T \right )^{-1} \left(H\mu - \textrm{data} \right) $$ $$\Sigma’ = \left( \mathbb{I} - \Sigma H^T \left(R + H \Sigma H^T \right)^{-1} H \right) \Sigma $$</p>

<p>That blogpost finished with this result, claiming that the job of <code>sympy.stats</code> was finished and that any of the popular numerical linear algebra packages could pick up from that point.</p>

<p>These two equations are the Kalman filter and were our starting point for today. Matrix Expressions are an intermediate representation layer between <code>sympy.stats</code> and <code>sympy.computations.matrices</code>.</p>

<p>By composing these projects we compile high level statistical expressions of <code>sympy.stats</code> to intermediate level matrix expressions to the DAGs of <code>sympy.computations</code> and even down to low level Fortran code. If we add a traditional Fortran compiler we can build working binaries directly from <code>sympy.stats</code>.</p>

<h2 id="features_and_flaws_in_the_kalman_graph">Features and Flaws in the Kalman graph</h2>

<p>Lets investigate the Kalman computation. It contains a few notable features.</p>

<p>First, unlike previous examples it has two outputs, <code>new_mu</code> and <code>new_Sigma</code>. These two have large common subexpressions like <code>H*Sigma*H' + R</code>. You can see that these were computed once and shared.</p>

<p>Second, lets appreciate that <code>H*Sigma*H + R</code> is identified as symmetric positive definite allowing the more efficient <code>POSV</code> routine. I’ve brought this up before in artificial examples. It’s nice to see that this occurs in practice.</p>

<p>Third, there is an unfortunately common motif. This instance was taken from the upper right of the image but the <code>GE/SYMM -&gt; AXPY</code> motif occurs four times in this graph.</p>

<p><img alt="" src="http://mrocklin.github.com/blog/images/kalman-math-gemm-axpy-motif.png"/></p>

<p><code>GEMM/SYMM</code> are matrix multiply operations used to break down expressions like <code>alpha*A*B</code>. <code>AXPY</code> is a matrix addition used to break down expressions like <code>alpha*A + B</code>. They are both used properly here.</p>

<p>This motif is unforunate because <code>GEMM</code> is also capable of breaking down a larger expression like <code>alpha*A*B + beta*C</code>, doing a fused matrix multiply and add all in one pass. The <code>AXPY</code> would be unnecessary if the larger <code>GE/SYMM</code> patterns had matched correctly.</p>

<h2 id="canonicalization">Canonicalization</h2>

<p>The <code>alpha*A*B + beta*C</code> patterns did not match here for a silly reason, there wasn’t anything to match for the scalars <code>alpha</code> and <code>beta</code>. Instead the patterns were like <code>A*B - C</code>. One solution to this problem is to make more patterns with all possibilities. Alternatively we could change how we canonicalize <code>MatMul</code> objects so that they always have a scalar coefficient, even if it defaults to 1.</p>

<p>We don’t want to change <code>MatMul</code> to behave like this throughout all of SymPy though; the extra 1 is usually unwanted. This is a case where there are multiple correct definitions of canonical. Fortunately <code>MatMul</code> is written with this eventuality in mind.</p>

<h2 id="links">Links</h2>

<ol>
<li><a href="http://sympystats.wordpress.com/2011/07/02/a-lesson-in-data-assimilation-using-sympy/">A Lesson in Data Assimilation using SymPy</a></li>

<li><a href="http://sympystats.wordpress.com/2011/07/19/multivariate-normal-random-variables/">Multivariate Normal Random Variables</a></li>

<li>Source for this post: <a href="http://mrocklin.github.com/blog/scripts/kalman.py">kalman.py</a>, <a href="http://mrocklin.github.com/blog/scripts/kalman_comp.py">kalman_comp.py</a></li>
</ol></div>
    </summary>
    <updated>2012-11-24T08:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T11:20:31Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2012/11/23/BuildingComputations</id>
    <link href="http://matthewrocklin.com/blog//work/2012/11/23/BuildingComputations" rel="alternate" type="text/html"/>
    <title>Building Computations</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In my <a href="http://mrocklin.github.com/blog/work/2012/11/21/Computations/">last post</a> I described a base type that represented a computation as a directed acyclic graph. In my post on <a href="http://mrocklin.github.com/blog/work/2012/11/10/GeneratingBLAS-PreliminaryResults/">preliminary results</a> I showed how we could write Fortran code for a simple matrix expression. In this post I want to show how unificaiton, rewrite rules, and manipulations on computations can compile computations from fairly complex matrix expressions.</p>

<h2 id="inputs">Inputs</h2>

<p>Lets begin with a complex expression and a set of assumptions</p>
<div class="highlight"><pre><code class="python">    <span class="n">expr</span> <span class="o">=</span> <span class="p">(</span><span class="n">Y</span><span class="o">.</span><span class="n">I</span><span class="o">*</span><span class="n">Z</span><span class="o">*</span><span class="n">Y</span> <span class="o">+</span> <span class="n">b</span><span class="o">*</span><span class="n">Z</span><span class="o">*</span><span class="n">Y</span> <span class="o">+</span> <span class="n">c</span><span class="o">*</span><span class="n">W</span><span class="o">*</span><span class="n">W</span><span class="p">)</span><span class="o">.</span><span class="n">I</span><span class="o">*</span><span class="n">Z</span><span class="o">*</span><span class="n">W</span>
    <span class="n">assumptions</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">positive_definite</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</code></pre></div>
<p>We also specify a list of conditional rewrite patterns. A pattern has the following form</p>
<div class="highlight"><pre><code class="python">    <span class="n">Source</span><span class="p">:</span>     <span class="n">alpha</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span>
    <span class="n">Target</span><span class="p">:</span>     <span class="n">SYMM</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">S</span><span class="o">.</span><span class="n">Zero</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
    <span class="n">Wilds</span><span class="p">:</span>      <span class="n">alpha</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span>
    <span class="n">Condition</span><span class="p">:</span>  <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">|</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</code></pre></div>
<p>This means that we convert the expression <code>alpha*A*B</code> into the computation <code>SYMM(alpha, A, B, S.Zero, B)</code> (a SYmmetric Matrix Multiply) for any <code>(alpha, A, B)</code> when either <code>A</code> is symmetric or <code>B</code> is symmetric.</p>

<p>Thanks to <a href="http://mrocklin.github.com/blog/work/2012/11/01/Unification/">unification</a> rewrite patterns are easy to write. Someone who is familiar with BLAS/LAPACK but unfamiliar with compilers would be able to make these easily.</p>

<h2 id="expressions_to_computations">Expressions to Computations</h2>

<p>Each pattern is turned into a function/rule that transforms an expression into a computation. We start with an identity computation</p>
<div class="highlight"><pre><code class="python">    <span class="n">expr</span> <span class="o">=</span> <span class="p">(</span><span class="n">Y</span><span class="o">.</span><span class="n">I</span><span class="o">*</span><span class="n">Z</span><span class="o">*</span><span class="n">Y</span> <span class="o">+</span> <span class="n">b</span><span class="o">*</span><span class="n">Z</span><span class="o">*</span><span class="n">Y</span> <span class="o">+</span> <span class="n">c</span><span class="o">*</span><span class="n">W</span><span class="o">*</span><span class="n">W</span><span class="p">)</span><span class="o">.</span><span class="n">I</span><span class="o">*</span><span class="n">Z</span><span class="o">*</span><span class="n">W</span>
    <span class="n">assumptions</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">positive_definite</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
    <span class="n">identcomp</span> <span class="o">=</span> <span class="n">Identity</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
    <span class="n">identcomp</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<p>Computations are able to print themselves in the <a href="http://en.wikipedia.org/wiki/DOT_language">DOT Language</a> enabling simple visualization. Here we see a computation that produces the expression we want but its input is the same. We’d prefer one that had more atomic inputs like <code>a, b, c, W, X, Y, Z</code></p>

<p><img alt="" src="http://mrocklin.github.com/blog/images/complex-matrix-computation-identity.png"/></p>

<p>Our patterns know how to break down big expressions into smaller ones by adding the right computation (e.g <code>alpha*A*B</code> -&gt; <code>alpha, A, B</code> via <code>SYMM</code>.) We convert each of our patterns into a rule. This rule looks at the inputs and, if it finds a matching expression adds on a new computation to break down that expression. We use <a href="http://mrocklin.github.com/blog/work/2012/11/09/BranchingStrategies/">branching strategies</a> to orchestrate <em>how</em> all of these rules are applied. This is accomplished in the last line of the <code>make_matrix_rule</code> function</p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">make_matrix_rule</span><span class="p">(</span><span class="n">patterns</span><span class="p">,</span> <span class="n">assumptions</span><span class="p">):</span>
        <span class="n">rules</span> <span class="o">=</span> <span class="p">[</span><span class="n">expr_to_comp_rule</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">wilds</span><span class="p">,</span> <span class="n">cond</span><span class="p">,</span> <span class="n">assumptions</span><span class="p">)</span>
                 <span class="k">for</span> <span class="n">src</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">wilds</span><span class="p">,</span> <span class="n">cond</span> <span class="ow">in</span> <span class="n">patterns</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">exhaust</span><span class="p">(</span><span class="n">multiplex</span><span class="p">(</span><span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="n">input_crunch</span><span class="p">,</span> <span class="n">rules</span><span class="p">)))</span>
</code></pre></div>
<p>This function combines logic (<code>patterns/assumptions</code>) with control (<code>exhaust/multiplex/input_crunch</code>) to create a <a href="http://www.icsd.aegean.gr/lecturers/stamatatos/courses/Logic/Prolog/Ch1/Ch1_files/algorithm%3Dlogic%2Bcontrol.pdf">complete algorithm</a>. We apply this algorithm to our identity computation and pull off a compiled result</p>
<div class="highlight"><pre><code class="python">    <span class="n">rule</span> <span class="o">=</span> <span class="n">make_matrix_rule</span><span class="p">(</span><span class="n">patterns</span><span class="p">,</span> <span class="n">assumptions</span><span class="p">)</span>
    <span class="n">comp</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">rule</span><span class="p">(</span><span class="n">identcomp</span><span class="p">))</span>
    <span class="n">comp</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<p><img alt="" src="http://mrocklin.github.com/blog/images/complex-matrix-computation.png"/></p>

<p>We still have same output but now the input is broken down into smaller pieces by a set of computations. These computations are arranged in a graph based on their dependencies. We had to use a <code>GESV</code>, a <code>POSV</code>, two <code>GEMM</code>s a <code>SYMM</code> and two <code>AXPY</code>s to break down this computation. Our inputs are now <code>a,b,c,W,X,Y,Z</code> as desired.</p>

<p><code>rule(identcomp)</code> iterates over all possible computations to compute this expression. If you are not satisfied with the computation above you may ask for another.</p>

<h2 id="inplace_computations">Inplace Computations</h2>

<p>The BLAS/LAPACK routines are <em>inplace</em>; they write their results to the memory locations of some of their inputs. The above <em>matheamtical</em> graph doesn’t have the necessary information to think about this <em>computational</em> concern. We have a separate system to compile and optimize inplace computations.</p>
<div class="highlight"><pre><code class="python">    <span class="kn">from</span> <span class="nn">sympy.computations.inplace</span> <span class="kn">import</span> <span class="n">inplace_compile</span>
    <span class="n">icomp</span> <span class="o">=</span> <span class="n">inplace_compile</span><span class="p">(</span><span class="n">comp</span><span class="p">)</span>
    <span class="n">icomp</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<p><img alt="" src="http://mrocklin.github.com/blog/images/complex-matrix-computation-inplace.png"/></p>

<p>Each variable is now of the form</p>

<pre><code>Mathematical Expression @ memory location</code></pre>

<p>We have introduced <code>Copy</code> operations into the graph where necessary to prevent dangerous overwrites. If you track the memory locations you can see which BLAS/LAPACK operations overwrite which variables. For example <code>Z</code> is never overwritten and so is never copied. On the other hand <code>W</code> is used in two overwrite operations and so it is copied to two new variables, <code>W_2</code> and <code>W_3</code>. Copies are not added if obviously unnecessary.</p>

<h2 id="future_work">Future Work</h2>

<p>There are a couple of small items and one large one.</p>

<ol>
<li>
<p>An expert in BLAS/LAPACK will note that there are some issues with my graphs; they are not yet ideal. I don’t handle <code>IPIV</code> permutation operations well (I need to add some new patterns), I am overwrie the <code>INFO</code> out parameter, and there are a few cases where a copy could be avoided by operation reordering.</p>
</li>

<li>
<p>I need to refactor my old Fortran generation code to work with the new inplace system.</p>
</li>

<li>
<p>The largest challenge is to build strategies for intelligent application of rewrite rules. Expressions are now large enough and the list of patterns is now long enough so that checking all possiblities is definitely infeasible. I need to think hard about traversals. Fortunately this problem is purely algorithmic and has no connection to BLAS, inplace computations, etc…. I should be able to think about it in isolation.</p>
</li>
</ol>

<h2 id="closing_note">Closing Note</h2>

<p>Except for the mathematical definition of BLAS none of this code is specific to generating matrix computations. The majority of this technology isn’t even specific to building computations. The computaitonal core of most of the technologies isn’t even dependent on SymPy. My final <code>sympy.computations.matrices</code> directory is small.</p>

<p>Throughout this project I’ve tried to keep all of the technology as general as possible in hopes that others will make use of it. Only a small fraction of my work has been specific to my application. I hope that others find this work interesting. I hope that this technology enables a variety of other unrelated projects.</p>

<h2 id="links">Links</h2>

<ol>
<li><a href="https://github.com/mrocklin/sympy/tree/compblas">Development Branch</a></li>

<li><a href="http://mrocklin.github.com/blog/scripts/2012-11-23-BuildingComputations.py">Script to generate images within this post</a></li>
</ol></div>
    </summary>
    <updated>2012-11-23T08:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T11:20:31Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2012/11/21/Computations</id>
    <link href="http://matthewrocklin.com/blog//work/2012/11/21/Computations" rel="alternate" type="text/html"/>
    <title>Computations</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>How can we symbolically represent computations? In SymPy we normally represent expressions as trees. Each node in the graph is an expression; it depends on some operation like <code>Add</code> or <code>Mul</code> and a sequence of arguments/children.</p>

<p><img alt="" src="http://mrocklin.github.com/blog/images/add-mul-tree.png"/></p>

<p>While trees are a convenient data structure they are also very restrictive. Consider the following operation</p>

<p><img alt="" src="http://mrocklin.github.com/blog/images/min-max-dag.png"/></p>

<p>This <code>MinMax</code> operation takes two inputs variables, <code>x</code>, and <code>y</code>, and produces two outputs <code>Min(x, y)</code>, <code>Max(x, y)</code>. Computationally you might prefer this over two separate trees because both outputs can be produced at once with a single comparison. This also supports natural grouping of common sub-expressions. If <code>x</code> and <code>y</code> were large trees we would not want two have copies of each in separate <code>Min</code> and <code>Max</code> trees.</p>

<p><img alt="" src="http://mrocklin.github.com/blog/images/min-tree.png"/> <img alt="" src="http://mrocklin.github.com/blog/images/max-tree.png"/></p>

<p>Because the <code>MinMax</code> operation has two outputs we can no longer represent its graph with a single tree, we need a more general data structure. This graph can be described as a bipartite directed acyclic graph (BiDAG). It is bipartite because there are two types of nodes, variables (circles) and operations [boxes]. It is directed and acyclic by the dependence of data (e.g. if <code>Min(x, y)</code> depends on <code>x</code> then <code>x</code> can not depend on <code>Min(x, y)</code>).</p>

<p>A DAG is the next most restrictive graph subtype. In some sense this is the smallest generalization we can make.</p>

<h2 id="computation_type">Computation Type</h2>

<p>Enter the <code>Computation</code> base type. This is an interface that must provide tuples of <code>inputs</code> and <code>outputs</code> instead of the standard <code>args</code> we use for trees.</p>

<p>We also add a <code>CompositeComputation</code> type which collects many computations together. Consider the collection of the following computations.</p>

<p><img alt="" src="http://mrocklin.github.com/blog/images/min-max-dag.png"/> <img alt="" src="http://mrocklin.github.com/blog/images/op.png"/></p>

<p>Note that <code>A</code> produces <code>x</code> which is used by <code>MinMax</code>. This computation has inputs (<code>w</code>, <code>y</code>) and outputs (<code>Min(x, y)</code>, <code>Max(x, y)</code>). The data dependencies infer an ordering; the <code>A</code> computation must occur before the <code>MinMax</code> computation.</p>

<h2 id="internal_representation">Internal Representation</h2>

<p>My current implementation of <code>CompositeComputation</code> is represented internally as an immutable set of computations. Inter-computation interactions are inferred as needed by their variables. We provide methods to form an alternative dict-based data structure with fast access and traversal should performance become necessary.</p>

<p>All variables are assumed immutable and unique. The intention is that variables should be entirely defined by their mathematical meaning. The expectation is that the variables are SymPy expressions.</p>

<p>This approach has a focus on immutability and mathematical attributes rather than performance and computational attributes. For example it is impossible to represent a <code>Copy</code> operation within this framework because mathematical meanings of the input and output variable would be identical. Similarily inplace operations are not checkable in this framework.</p>

<h2 id="inplace">Inplace</h2>

<p>And yet copies and inplace operations are important parts of real computation. We make an explicit separation between mathematics-based optimizations and infrastructure-based optimizations (like inplace). We perform this transition by replacing each variable with a pair that contains a purely mathematical expression (left) and a purely computational variable (right).</p>

<p><img alt="" src="http://mrocklin.github.com/blog/images/min-max-dag-pure.png"/></p>

<p>In the example above we see the <code>MinMax</code> computation where the <code>x</code> and <code>y</code> expressions are stored in variables <code>"x"</code> and <code>"y"</code> and the outputs are stored in dummy variables <code>"_1"</code> and <code>"_2"</code>. For performance reasons a computation may write the outputs back into the memory for the inputs as follows (note that the two outputs are stored in the same variables as the inputs.)</p>

<p><img alt="" src="http://mrocklin.github.com/blog/images/min-max-dag-inplace.png"/></p>

<p>Inplace computations provide higher performance at the cost of memory safety. We must avoid situations like the following where the <code>x</code> variable may be overwritten (for example by <code>B</code>) before it is read (by <code>C</code>).</p>

<p><img alt="" src="http://mrocklin.github.com/blog/images/dangerous-inplace.png"/></p>

<h2 id="motivation">Motivation</h2>

<p>I am working to translate matrix expressions (tree) into a computation (DAG) of BLAS/LAPACK operations. I do this through setting up and matching mathematical patterns like the following</p>

<pre><code>alpha*X*Y + beta*Z -&gt; GEMM(alpha, X, Y, beta, Z)</code></pre>

<p>However the available operations (like <code>GEMM</code>) are inplace by default. These two goals of mathematical pattern matching and inplace computations are challenging to solve simultaneously for non-trivial expressions. My solution has been to consider the mathematical pattern matching problem first and then switch to ‘inplace mode’ and resolve the inplace issues separately.</p>

<h2 id="question">Question</h2>

<p>Should this be a part of SymPy?</p></div>
    </summary>
    <updated>2012-11-21T08:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T11:20:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=286</id>
    <link href="http://rhoforsympy.wordpress.com/2012/11/17/my-gsoc-experience/" rel="alternate" type="text/html"/>
    <title>My GSoC Experience</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Recently, I gave a talk at UIC Friendly Friday session!   The slides give an overview about Google Summer of Code, some relevant links and what is in it for students. Take a peek. slide/pdf<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=286&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Recently, I gave a talk at UIC Friendly Friday session!  </p>
<p>The slides give an overview about Google Summer of Code, some relevant links and what is in it for students.</p>
<p>Take a peek.</p>
<p>
<a href="https://docs.google.com/open?id=0B9GZJ0kXSmnRSzJCejVVWkk4Rk0" target="_blank" title="pdf slides">slide/pdf</a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/286/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/286/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=286&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-11-17T16:59:36Z</updated>
    <category term="GSoc"/>
    <category term="Sympy"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2013-01-17T11:20:36Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2012/11/10/GeneratingBLAS-PreliminaryResults</id>
    <link href="http://matthewrocklin.com/blog//work/2012/11/10/GeneratingBLAS-PreliminaryResults" rel="alternate" type="text/html"/>
    <title>Preliminary BLAS Results</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the last few posts I’ve built up some independent technology.</p>

<ol>
<li><a href="http://mrocklin.github.com/blog/work/2012/10/29/Matrix-Computations/">BLAS and code generation</a> - a logical description</li>

<li><a href="http://mrocklin.github.com/blog/work/2012/11/01/Unification/">Unification</a> - advanced pattern matching</li>

<li><a href="http://mrocklin.github.com/blog/work/2012/11/07/Strategies/">Strategies</a> - programmatic control</li>

<li><a href="http://mrocklin.github.com/blog/work/2012/11/09/BranchingStrategies/">Branching Strategies</a> - control with multiple possibilities</li>
</ol>

<p>In this post I’ll pull them all together for my first substantial results generating Fortran code to call BLAS/LAPACK. Lets go through a working example</p>

<p>We set up a problem that we’d like to solve. We want to compute \((4 X X^{T} + 2 Z)^{-1} X\) where \( X \) is invertible and and \(Z\) is symmetric positive definite.</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="c"># Set up a mathematical problem to solve</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">X</span> <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'X'</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Z</span> <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'Z'</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">target</span> <span class="o">=</span> <span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">X</span><span class="o">*</span><span class="n">X</span><span class="o">.</span><span class="n">T</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">Z</span><span class="p">)</span><span class="o">.</span><span class="n">I</span><span class="o">*</span><span class="n">X</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">assumptions</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">invertible</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">positive_definite</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
</code></pre></div>
<p>We have described a set of BLAS/LAPACK operations to perform certain transformations when the right conditions are met. Each BLAS operation is a single rewrite rule.</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.matrices.expressions.gen</span> <span class="kn">import</span> <span class="n">rr_from_blas</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.matrices.expressions.blas</span> <span class="kn">import</span>   <span class="n">GEMM</span><span class="p">,</span> <span class="n">SYMM</span><span class="p">,</span> <span class="n">TRMM</span><span class="p">,</span> <span class="n">TRSV</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.matrices.expressions.lapack</span> <span class="kn">import</span> <span class="n">POSV</span><span class="p">,</span> <span class="n">GESV</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">routines</span> <span class="o">=</span> <span class="p">(</span><span class="n">TRSV</span><span class="p">,</span> <span class="n">POSV</span><span class="p">,</span> <span class="n">GESV</span><span class="p">,</span> <span class="n">TRMM</span><span class="p">,</span> <span class="n">SYMM</span><span class="p">,</span> <span class="n">GEMM</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rules</span> <span class="o">=</span> <span class="p">[</span><span class="n">rr_from_blas</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">assumptions</span><span class="p">)</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">routines</span><span class="p">]</span>
</code></pre></div>
<p>Each of these rules can convert one kind of expression into a computation given certain conditions. For example</p>

<pre><code>SYMM:  alpha*A*B + beta*C -&gt; SYMM(alpha, A, B, beta, C) if A or B is symmetric</code></pre>

<p>We need to combine them to turn the large target expression into a set of atomic inputs. Some of the BLAS routines overlap so there are potentially many possibilities.</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.matrices.expressions.gen</span> <span class="kn">import</span> <span class="n">top_down</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.rules.branch</span> <span class="kn">import</span> <span class="n">multiplex</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">rule</span> <span class="o">=</span> <span class="n">top_down</span><span class="p">(</span><span class="n">multiplex</span><span class="p">(</span><span class="o">*</span><span class="n">rules</span><span class="p">))</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">computations</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">rule</span><span class="p">(</span><span class="n">target</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">computations</span><span class="p">)</span>
<span class="mi">2</span>
</code></pre></div>
<p>We generate Fortran code from the first computation</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">computations</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">print_Fortran</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">assumptions</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre><code class="fortran"><span class="k">subroutine </span><span class="nv">f</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Z</span><span class="p">,</span> <span class="nv">INFO</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>

<span class="kt">real</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="k">intent</span><span class="p">(</span><span class="nv">inout</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">X</span><span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>
<span class="kt">real</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="k">intent</span><span class="p">(</span><span class="nv">inout</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">Z</span><span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>
<span class="kt">integer</span><span class="p">,</span> <span class="k">intent</span><span class="p">(</span><span class="nv">out</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">INFO</span>
<span class="kt">integer</span><span class="p">,</span> <span class="k">intent</span><span class="p">(</span><span class="nv">in</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">n</span>

<span class="k">call </span><span class="nv">dgemm</span><span class="p">(</span><span class="s1">'N'</span><span class="p">,</span> <span class="s1">'T'</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nv">Z</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>
<span class="k">call </span><span class="nv">dposv</span><span class="p">(</span><span class="nv">U</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">Z</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">INFO</span><span class="p">)</span>

<span class="k">RETURN</span>
<span class="k">END</span>
</code></pre></div>
<p>This solution first uses <code>GEMM</code> to multiply \(4X X^{T} + 2 Z\). It then uses <code>POSV</code> to perform the solve \((4X X^{T} + 2Z)^{-1} X\). The <code>POSV</code> routine solves systems of the form \(A^{-1}B\) where \(A\) is symmetric positive definite. Internally we used a logical programming framework to infer that \(4X X^{T} + 2Z\) is symmetric positive definite given the original mathematical assumptions.</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">assumptions</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">invertible</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">positive_definite</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">expr</span> <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="n">X</span><span class="o">*</span><span class="n">X</span><span class="o">.</span><span class="n">T</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">Z</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ask</span><span class="p">(</span><span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">positive_definite</span><span class="p">(</span><span class="n">expr</span><span class="p">),</span> <span class="n">assumptions</span><span class="p">)</span>
<span class="bp">True</span>
</code></pre></div>
<p>This computation is in-place. <code>GEMM</code> stores its result in the argument <code>Z</code>. <code>POSV</code> uses <code>Z</code> and stores the output in <code>X</code>. Note that both <code>X</code> and <code>Z</code> have been declared with <code>inout</code> intents in the Fortran code.</p>

<p>This Fortran code is independent of Python or SymPy and can be used in any project. However, if we prefer the Python environment we can bring it back into the Python session with F2PY.</p>

<pre><code>&gt;&gt;&gt; f = computations[0].build(str, assumptions) 
&gt;&gt;&gt; f?
f - Function signature:
  info = f(x,z,[n])
Required arguments:
  x : in/output rank-2 array('d') with bounds (n,n)
  z : in/output rank-2 array('d') with bounds (n,n)
Optional arguments:
  n := shape(x,0) input int
Return objects:
  info : int</code></pre>

<p>This function accepts numpy arrays and so integrates well into the Python scientific computing stack.</p>

<h2 id="multiple_matches">Multiple Matches</h2>

<p>There were two computations. What was the other?</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">computations</span><span class="p">)</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">computations</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">print_Fortran</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">assumptions</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre><code class="fortran"><span class="k">subroutine </span><span class="nv">f</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Z</span><span class="p">,</span> <span class="nv">INFO</span><span class="p">,</span> <span class="nv">IPIV</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>

<span class="kt">real</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="k">intent</span><span class="p">(</span><span class="nv">inout</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">X</span><span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>
<span class="kt">real</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="k">intent</span><span class="p">(</span><span class="nv">inout</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">Z</span><span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>
<span class="kt">integer</span><span class="p">,</span> <span class="k">intent</span><span class="p">(</span><span class="nv">out</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">INFO</span>
<span class="kt">integer</span><span class="p">,</span> <span class="k">intent</span><span class="p">(</span><span class="nv">out</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">IPIV</span><span class="p">(</span><span class="nv">n</span><span class="p">)</span>
<span class="kt">integer</span><span class="p">,</span> <span class="k">intent</span><span class="p">(</span><span class="nv">in</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">n</span>

<span class="k">call </span><span class="nv">dgemm</span><span class="p">(</span><span class="s1">'N'</span><span class="p">,</span> <span class="s1">'T'</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nv">Z</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>
<span class="k">call </span><span class="nv">dgesv</span><span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">Z</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">IPIV</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">INFO</span><span class="p">)</span>

<span class="k">RETURN</span>
<span class="k">END</span>
</code></pre></div>
<p>This solution uses the <code>GESV</code> routine for general matrices in place of the specialized <code>POSV</code> for symmetric positive definite matrices. Which is best? In this case <code>POSV</code> is likely faster because it is able to use faster algorithms due to the symmetric positive definite assumption. After looking at both possibilities we choose it.</p>

<p>For large matrix expressions the number of possible computations may stop us from inspecting all possible solutions. How can we ensure that the best solution is in the first few?</p>

<h2 id="code_separation">Code Separation</h2>

<p>The definition of BLAS/LAPACK is separated from the pattern matching code and the branching control code. This allows me (or other people) to develop one without thinking about the other. It also allows for a declarative definition of BLAS and LAPACK routines. If anyone is interested I could use more routines than just the six used in this example.</p>

<p>This project requires the technology from the previous four posts. While all of that technology (strategies, unification, code generation) is necessary to this project none of it is specific to this project. All of the pieces are general, composable, and applicable to other ends. I hope that others are able to find some use for them.</p>

<h2 id="caveats">Caveats</h2>

<p>This code is still experimental. It is not yet merged into the SymPy master branch. The interface may change. Results are promising but there are stil big pieces missing before its ready for public use.</p>

<h2 id="references">References</h2>

<ol>
<li><a href="http://cens.ioc.ee/projects/f2py2e/">F2PY</a></li>

<li>D. Fabregat-Traver, P. Bientinesi, <a href="http://www.aices.rwth-aachen.de:8080/aices/preprint/documents/AICES-2012-01-02.pdf"><em>A Domain-Specific Comiler for Linear Algebra Operations</em></a>, arXiv preprint arXiv:1205.5975 (2012).</li>

<li><a href="http://mrocklin.github.com/blog/scripts/2012-11-10-GeneratingBLAS-PreliminaryResults.py">Example code</a> from this post</li>

<li><a href="https://github.com/mrocklin/sympy/tree/blas">My development branch of SymPy</a></li>
</ol></div>
    </summary>
    <updated>2012-11-10T08:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T11:20:31Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2012/11/09/BranchingStrategies</id>
    <link href="http://matthewrocklin.com/blog//work/2012/11/09/BranchingStrategies" rel="alternate" type="text/html"/>
    <title>Branching Strategies</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In my last post on <a href="http://matthewrocklin.com/blog/work/2012/11/07/Strategies/">strategies</a> I introduced a set of higher order functions to represent common control patterns (like <code>top_down</code>). We combined these with transformation rules (like <code>flatten</code>) to create complex functions for tree manipulation (like <code>flatten_tree</code>)</p>

<pre><code>rule     :: expr -&gt; expr
strategy :: parameters, rule -&gt; rule</code></pre>

<p>In my post on <a href="http://matthewrocklin.com/blog/work/2012/11/01/Unification/">unification</a> we showed how to easily create rules from patterns. At the end of this post I described that because patterns might match in multiple ways one rule might produce many different results. To avoid combinatorial blowup in the number of possible matches we solved this by yielding matches lazily.</p>

<p>Transformation rules produced by unify don’t return values, they yield possible solutions lazily. How do we reconcile this with our previous notion of rules and strategies? We make a new set of strategies for branching rules.</p>

<pre><code>branching-rule      :: expr -&gt; {expr} 
branching-strategy  :: parameters, branching-rule -&gt; branching-rule</code></pre>

<p>In <code>sympy.rules.branch</code> we have implemented lazy analogs for the strategies found in <code>sympy.rules</code>. This allows us to apply strategies to transformations like the <code>sincos_to_one</code> rule created in the unification post.</p>

<h2 id="toy_problem">Toy Problem</h2>

<p>Lets see branching strategies with a toy problem. Consider the following “function”</p>

<p>$$ f(x) = \cases{ x+1 &amp; \text{if } 5 &lt; x &lt; 10 \\ x-1 &amp; \text{if } 0 &lt; x &lt; 5 \\ x+1 \text{ or } x-1 &amp; \text{if } x = 5 \\ x &amp; \text{otherwise} \\ } $$</p>

<p>And it’s equivalent in Python</p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>   <span class="k">yield</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="mi">5</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>  <span class="k">yield</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>      <span class="k">yield</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="k">yield</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span>
</code></pre></div>
<p>Notice that in the case where <code>x = 5</code> there are two possible outcomes. Each of these is preserved by the application of branching strategies. We use the branching version of the <code>exhaust</code> strategy to make a new exhaustive version of this function</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.rules.branch</span> <span class="kn">import</span> <span class="n">exhaust</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">newf</span> <span class="o">=</span> <span class="n">exhaust</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="nb">set</span><span class="p">(</span><span class="n">newf</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
    <span class="p">{</span><span class="mi">10</span><span class="p">}</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="nb">set</span><span class="p">(</span><span class="n">newf</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
    <span class="p">{</span><span class="mi">0</span><span class="p">}</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="nb">set</span><span class="p">(</span><span class="n">newf</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
    <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">}</span>
</code></pre></div><hr/>
<h2 id="practical_problem">Practical Problem</h2>

<p>We have all the machinery necessary. Lets make a <code>sin(x)**2 + cos(x)**2 -&gt; 1</code> tree-wise simplification function.</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.rules.branch.traverse</span> <span class="kn">import</span> <span class="n">top_down</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.unify.usympy</span> <span class="kn">import</span> <span class="n">patternify</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.unify.rewrite</span> <span class="kn">import</span> <span class="n">rewriterule</span>

    <span class="o">&gt;&gt;&gt;</span> <span class="n">pattern_source</span> <span class="o">=</span> <span class="n">patternify</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">sincos_to_one</span> <span class="o">=</span> <span class="n">rewriterule</span><span class="p">(</span><span class="n">pattern_source</span><span class="p">,</span> <span class="n">S</span><span class="o">.</span><span class="n">One</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">sincos_tree</span> <span class="o">=</span> <span class="n">top_down</span><span class="p">(</span><span class="n">sincos_to_one</span><span class="p">)</span>
    
    <span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">sincos_tree</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="n">c</span><span class="o">**</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)))</span>  <span class="c"># see footnote</span>
    <span class="p">[</span><span class="n">c</span><span class="o">**</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> 
</code></pre></div>
<p>Lets make a rule to simplify expressions like <code>c**1</code></p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.rules.branch.strat_pure</span> <span class="kn">import</span> <span class="n">multiplex</span><span class="p">,</span> <span class="n">exhaust</span> 

    <span class="o">&gt;&gt;&gt;</span> <span class="n">pattern</span> <span class="o">=</span> <span class="n">patternify</span><span class="p">(</span><span class="n">Pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">evaluate</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span> <span class="n">x</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">pow_simp</span> <span class="o">=</span> <span class="n">rewriterule</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>                  <span class="c"># footnote 2</span>

    <span class="o">&gt;&gt;&gt;</span> <span class="n">simplify</span> <span class="o">=</span> <span class="n">exhaust</span><span class="p">(</span><span class="n">top_down</span><span class="p">(</span><span class="n">multiplex</span><span class="p">(</span><span class="n">sincos_to_one</span><span class="p">,</span> <span class="n">pow_simp</span><span class="p">)))</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">simplify</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="n">c</span><span class="o">**</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)))</span>
    <span class="p">[</span><span class="n">c</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span>
</code></pre></div>
<p>We see how we can easiy build up powerful simplification functions through the separate description of logic</p>

<pre><code>sin(x)**2 + cos(x)**2 -&gt; 1
x ** 1 -&gt; x</code></pre>

<p>and control</p>

<pre><code>simplify = exhaust(top_down(multiplex( ... )))</code></pre>
<hr/>
<p><em>Footnote 1</em>: At the time of this writing this line should actually be</p>

<pre><code>map(rebuild, sincos_tree( ... )</code></pre>

<p>The <code>rebuild</code> function is necessary because rules don’t play well with <code>Expr</code>s. Expr’s need to be constructed normally in order to function properly. In particular all expressions built by rules lack the <code>is_commutative</code> flag which is attached onto the object at construction time. I neglected to mention this above to simplify the discussion.</p>

<p><em>Footnote 2</em>: This also requires a slight modification due to the Expr/rules mismatch. In particular the pattern <code>Pow(x, 1, evaluate=False)</code> unfortunately matches to just <code>x</code> because <code>x == x**1</code> in SymPy.</p></div>
    </summary>
    <updated>2012-11-09T08:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T11:20:30Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2012/11/07/Strategies</id>
    <link href="http://matthewrocklin.com/blog//work/2012/11/07/Strategies" rel="alternate" type="text/html"/>
    <title>Strategies</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In <a href="http://matthewrocklin.com/blog/work/2012/11/01/Unification/">my last post</a> I showed how unification and rewrite rules allow us to express <em>what</em> we want without specifying <em>how</em> to compute it. As an example we were able to turn the mathematical identity <code>sin(x)**2 + cos(x)**2 -&gt; 1</code> into a function with relatively simple code</p>
<div class="highlight"><pre><code class="python">    <span class="c"># Transformation : sin(x)**2 + cos(x)**2 -&gt; 1</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">pattern</span> <span class="o">=</span> <span class="n">patternify</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">sincos_to_one</span> <span class="o">=</span> <span class="n">rewriterule</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

    <span class="o">&gt;&gt;&gt;</span> <span class="n">sincos_to_one</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
    <span class="mi">1</span>
</code></pre></div>
<p>However we found that this function did not work deep within an expression tree</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">sincos_to_one</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="n">c</span><span class="o">**</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)))</span> <span class="c"># no matches</span>
    <span class="p">[]</span>
</code></pre></div>
<p><code>sincos_to_one</code> does not know <em>how</em> to traverse a tree. It is pure logic and has no knowledge of control. We define traverals separately using strategies.</p>

<p><em>Short version</em>: we give you a higher order function, <code>top_down</code> which turns a expression-wise function into a tree-wise function. We provide a set of similar functions which can be composed to various effects.</p>
<hr/>
<h2 id="a_toy_example">A Toy Example</h2>

<p>How do we express control programmatically?</p>

<p>Traditional control flow is represented with constructs like <code>if</code>, <code>for</code>, <code>while</code>, <code>def</code>, <code>return</code>, <code>try</code>, etc…. These terms direct the flow of what computation occurs when. Traditionally we mix control and logic. Consider the following toy problem that reduces a number until it reaches a multiple of ten</p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">reduce_to_ten</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="sd">""" Reduce a number to the next lowest multiple of ten </span>

<span class="sd">        &gt;&gt;&gt; reduce_ten(26)</span>
<span class="sd">        20</span>
<span class="sd">        """</span>
        <span class="n">old</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">while</span><span class="p">(</span><span class="n">old</span> <span class="o">!=</span> <span class="n">x</span><span class="p">):</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">):</span>
                <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">x</span>
</code></pre></div>
<p>While the logic in this function is somewhat trivial</p>
<div class="highlight"><pre><code class="python">    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
</code></pre></div>
<p>the control pattern is quite common in serious code</p>
<div class="highlight"><pre><code class="python">    <span class="k">while</span><span class="p">(</span><span class="n">old</span> <span class="o">!=</span> <span class="n">expr</span><span class="p">):</span>
        <span class="n">old</span> <span class="o">=</span> <span class="n">expr</span> 
        <span class="n">expr</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">expr</span>
</code></pre></div>
<p>It is the “Exhaustively apply this function until there is no effect” control pattern. It occurs often in general programming and very often in the SymPy sourcecode. We separate this control pattern into a higher order function named <code>exhaust</code></p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">exhaust</span><span class="p">(</span><span class="n">rule</span><span class="p">):</span>
        <span class="sd">""" Apply a rule repeatedly until it has no effect """</span>
        <span class="k">def</span> <span class="nf">exhaustive_rl</span><span class="p">(</span><span class="n">expr</span><span class="p">):</span>
            <span class="n">old</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">while</span><span class="p">(</span><span class="n">expr</span> <span class="o">!=</span> <span class="n">old</span><span class="p">):</span>
                <span class="n">expr</span><span class="p">,</span> <span class="n">old</span> <span class="o">=</span> <span class="n">rule</span><span class="p">(</span><span class="n">expr</span><span class="p">),</span> <span class="n">expr</span> 
            <span class="k">return</span> <span class="n">expr</span> 
        <span class="k">return</span> <span class="n">exhaustive_rl</span>
</code></pre></div>
<p>We show how to use this function to achieve the previous result.</p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">dec_10</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>                          <span class="c"># Close to pure logic</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">):</span>   <span class="k">return</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>               <span class="k">return</span> <span class="n">x</span>

    <span class="n">reduce_to_ten</span> <span class="o">=</span> <span class="n">exhaust</span><span class="p">(</span><span class="n">dec_10</span><span class="p">)</span>
</code></pre></div>
<p>By factoring out the control strategy we achieve several benefits</p>

<ol>
<li>Code reuse of the <code>while(old != new)</code> control pattern</li>

<li>Exposure of logic - we can use the <code>dec_10</code> function in other contexts more easily. This version is more extensible.</li>

<li>Programmability of control - the control pattern is now first class. We can manipulate and compose it as we would manipulate or compose a variable or function.</li>
</ol>

<h2 id="example__debug">Example - Debug</h2>

<p>When debugging code we often want to see the before and after effects of running a function. We often do something like the following</p>
<div class="highlight"><pre><code class="python">    <span class="n">new</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">old</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">new</span> <span class="o">!=</span> <span class="n">old</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"Before: "</span><span class="p">,</span> <span class="n">old</span> 
        <span class="k">print</span> <span class="s">"After:  "</span><span class="p">,</span> <span class="n">new</span> 
</code></pre></div>
<p>This common structure is encapsulated in the debug strategy</p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">debug</span><span class="p">(</span><span class="n">rule</span><span class="p">):</span>
        <span class="sd">""" Print out before and after expressions each time rule is used """</span>
        <span class="k">def</span> <span class="nf">debug_rl</span><span class="p">(</span><span class="n">expr</span><span class="p">):</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">rule</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">result</span> <span class="o">!=</span> <span class="n">expr</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"Rule: "</span><span class="p">,</span> <span class="n">rule</span><span class="o">.</span><span class="n">func_name</span>
                <span class="k">print</span> <span class="s">"In:   "</span><span class="p">,</span> <span class="n">expr</span>
                <span class="k">print</span> <span class="s">"Out:  "</span><span class="p">,</span> <span class="n">result</span>
            <span class="k">return</span> <span class="n">result</span>
        <span class="k">return</span> <span class="n">debug_rl</span>
</code></pre></div>
<p>Because control is separated we can inject this easily into our function</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="n">reduce_to_ten</span> <span class="o">=</span> <span class="n">exhaust</span><span class="p">(</span><span class="n">debug</span><span class="p">(</span><span class="n">dec_10</span><span class="p">))</span>
    
    <span class="o">&gt;&gt;&gt;</span> <span class="n">reduce_to_ten</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span>
    <span class="n">Rule</span><span class="p">:</span>  <span class="n">dec_10</span>
    <span class="n">In</span><span class="p">:</span>    <span class="mi">23</span>
    <span class="n">Out</span><span class="p">:</span>   <span class="mi">22</span>
    <span class="n">Rule</span><span class="p">:</span>  <span class="n">dec_10</span>
    <span class="n">In</span><span class="p">:</span>    <span class="mi">22</span>
    <span class="n">Out</span><span class="p">:</span>   <span class="mi">21</span>
    <span class="n">Rule</span><span class="p">:</span>  <span class="n">dec_10</span>
    <span class="n">In</span><span class="p">:</span>    <span class="mi">21</span>
    <span class="n">Out</span><span class="p">:</span>   <span class="mi">20</span>
    <span class="mi">20</span>
</code></pre></div>
<h2 id="traversals">Traversals</h2>

<p>Finally we show off the use of a tree traversal strategy which applies a function at each node in an expression tree. Here we use the <code>Basic</code> type to denote a tree of generic nodes.</p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">top_down</span><span class="p">(</span><span class="n">rule</span><span class="p">):</span>
        <span class="sd">""" Apply a rule down a tree running it on the top nodes first """</span>
        <span class="k">def</span> <span class="nf">top_down_rl</span><span class="p">(</span><span class="n">expr</span><span class="p">):</span>
            <span class="n">newexpr</span> <span class="o">=</span> <span class="n">rule</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">is_leaf</span><span class="p">(</span><span class="n">newexpr</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">newexpr</span>
            <span class="k">return</span> <span class="n">new</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">newexpr</span><span class="p">),</span> <span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="n">top_down_rl</span><span class="p">,</span> <span class="n">newexpr</span><span class="o">.</span><span class="n">args</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">top_down_rl</span>

    <span class="o">&gt;&gt;&gt;</span> <span class="n">reduce_to_ten_tree</span> <span class="o">=</span> <span class="n">top_down</span><span class="p">(</span><span class="n">exhaust</span><span class="p">(</span><span class="n">tryit</span><span class="p">(</span><span class="n">dec_10</span><span class="p">)))</span>

    <span class="o">&gt;&gt;&gt;</span> <span class="n">expr</span> <span class="o">=</span> <span class="n">Basic</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="n">Basic</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span> <span class="n">Basic</span><span class="p">(</span><span class="n">Basic</span><span class="p">(</span><span class="mi">5</span><span class="p">)))</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">reduce_to_ten_tree</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
    <span class="n">Basic</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="n">Basic</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">Basic</span><span class="p">(</span><span class="n">Basic</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>
</code></pre></div>
<h2 id="use_in_practice">Use in Practice</h2>

<p>We have rewritten the canonicalization code in the Matrix Expression module to use these strategies. There are a number of small functions to represent atomic logical transformations of expressions. We call these rules. Rules are functions from expressions to expressions</p>

<pre><code>rule :: expr -&gt; expr</code></pre>

<p>And there are a number of strategies like <code>exhaust</code> and <code>top_down</code> which transform rules and parameters into larger rules</p>

<pre><code>strategy :: parameters, rule -&gt; rule</code></pre>

<p>For example there are general rules like <code>flatten</code> that simplify nested expressions like</p>

<p><code>Add(1, 2, Add(3, 4)) -&gt; Add(1, 2, 3, 4)</code></p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">flatten</span><span class="p">(</span><span class="n">expr</span><span class="p">):</span>
        <span class="sd">""" Flatten T(a, b, T(c, d), T2(e)) to T(a, b, c, d, T2(e)) """</span>
        <span class="n">cls</span> <span class="o">=</span> <span class="n">expr</span><span class="o">.</span><span class="n">__class__</span>
        <span class="n">args</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">arg</span><span class="o">.</span><span class="n">__class__</span> <span class="o">==</span> <span class="n">cls</span><span class="p">:</span>
                <span class="n">args</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">args</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">new</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">__class__</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</code></pre></div>
<p>We compose these general rules (e.g. ‘flatten’, ‘unpack’, ‘sort’, ‘glom’) with strategies to create large canonicalization functions</p>
<div class="highlight"><pre><code class="python">    <span class="n">rules</span> <span class="o">=</span> <span class="p">(</span><span class="n">rm_identity</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">ZeroMatrix</span><span class="p">)),</span>
             <span class="n">unpack</span><span class="p">,</span>
             <span class="n">flatten</span><span class="p">,</span>
             <span class="n">glom</span><span class="p">(</span><span class="n">matrix_of</span><span class="p">,</span> <span class="n">factor_of</span><span class="p">,</span> <span class="n">combine</span><span class="p">),</span>
             <span class="n">sort</span><span class="p">(</span><span class="nb">str</span><span class="p">))</span>

    <span class="n">canonicalize</span> <span class="o">=</span> <span class="n">exhaust</span><span class="p">(</span><span class="n">top_down</span><span class="p">(</span><span class="n">typed</span><span class="p">({</span><span class="n">MatAdd</span><span class="p">:</span> <span class="n">do_one</span><span class="p">(</span><span class="o">*</span><span class="n">rules</span><span class="p">)})))</span>
</code></pre></div>
<h2 id="going_farther">Going Farther</h2>

<p>We use strategies to build large rules out of small rules. Can we build large strategies out of small strategies? The <code>canonicalize</code> function above follows a common pattern “Apply a set of rules down a tree, repeat until they have no effect.” This is built into the <code>canon</code> strategy.</p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">canon</span><span class="p">(</span><span class="o">*</span><span class="n">rules</span><span class="p">):</span>
        <span class="sd">""" Strategy for canonicalization """</span>
        <span class="k">return</span> <span class="n">exhaust</span><span class="p">(</span><span class="n">top_down</span><span class="p">(</span><span class="n">do_one</span><span class="p">(</span><span class="o">*</span><span class="n">rules</span><span class="p">)))</span>
</code></pre></div>
<h2 id="previous_work">Previous Work</h2>

<p>This implementation of strategies was inspired by the work in the language StrategoXT. Stratego is a language for control that takes these ideas much farther and implements them more cleanly. It is a language where control structure are the primitives that can be built up, composed, and compiled down. It is a language in which ideas like “breadth first search” and “dynamic programming” are natural expressions.</p>

<h2 id="references">References</h2>

<ol>
<li>Ralf Lämmel , Eelco Visser , Joost Visser, <a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CDMQFjAA&amp;url=http%3A%2F%2Fhomepages.cwi.nl%2F~ralf%2Feosp%2Fpaper.pdf&amp;ei=bJuaUNWwNuOc2AWQtICYCA&amp;usg=AFQjCNHG1lJTjP05tO1aElYQkXMYSmgNuw&amp;sig2=EwanltC52lXaC4gU4OtVvA"><em>The Essence of Strategic Programming</em></a>, 2002</li>

<li>Eelco Visser, <a href="http://www.springerlink.com/content/my9we5tj86u2f59n/"><em>Program Transformation with Stratego/XT</em></a></li>
</ol></div>
    </summary>
    <updated>2012-11-07T08:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T11:20:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=277</id>
    <link href="http://rhoforsympy.wordpress.com/2012/11/07/emacs-script-to-add-function-headers-in-python-mode/" rel="alternate" type="text/html"/>
    <title>Emacs script to add function headers in python mode</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I have an usual python-mode setup with python-mode.el and all packages that help set up a good IDE environment for Python in Emacs. But, I did not find any scripts/functions that would help me generate a doc string for methods. The script I have shared below should do the trick. This is the initial script [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=277&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have an usual python-mode setup with python-mode.el and all packages that help set up a good IDE environment for Python in Emacs. But, I did not find any scripts/functions that would help me generate a doc string for methods. The script I have shared below should do the trick. This is the initial script and I hope to add to this script as I use it. The script tries to follows the markup syntax that is supported by <a href="http://docutils.sourceforge.net/rst.html" title="reStructuredText">reStructuredText</a></p>
<p>Please feel free comment on the git repo if you find any issues or have any improvements</p>
<p><code><br/>
;; add the following lines to .emacs file.<br/>
;; When a function header needs to be generated, place the cursor<br/>
;; on the same line as function definition and call the function<br/>
;; generate-header. Alternatively, a key-binding can be added<br/>
;; using (global-set-key) or adding this function to the python-mode-hook</code></p><code>
<p>(defun get-function-definition(sentence)<br/>
  (if (string-match "def.*(.*):" sentence)<br/>
      (match-string 0 sentence))<br/>
  )</p>
<p>(defun get-parameters(sentence)<br/>
        (setq y (get-function-definition sentence))<br/>
        (if y<br/>
            (if (string-match "(.*)"  y)<br/>
             (match-string 0 y)))<br/>
        )</p>
</code><p><code>(require 'thingatpt)<br/>
(defun generate-header()<br/>
    (interactive)<br/>
    (setq p (get-parameters (thing-at-point 'sentence)))<br/>
    (forward-line 1)<br/>
    (insert "\t\"\"\"\n\n\n")<br/>
    (setq params (split-string p "[?\,?\(?\)?\ ]"))<br/>
    (while params<br/>
        (if (/= (length (chomp (car params))) 0)<br/>
        (progn<br/>
            (insert "\t:param ")<br/>
            (insert (chomp (car params)))<br/>
            (insert ": \n")))<br/>
        (setq params (cdr params)))<br/>
        (insert "\n\t\"\"\"\n\n")<br/>
    )<br/>
</code></p>
<p><a href="https://github.com/gdevanla/emacs_scripts/blob/master/emacs/generate-header.el" target="_blank" title="Git">Git</a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/277/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/277/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=277&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-11-07T05:14:50Z</updated>
    <category term="Elisp"/>
    <category term="Emacs"/>
    <category term="Programming"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2013-01-17T11:20:36Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2012/11/01/Unification</id>
    <link href="http://matthewrocklin.com/blog//work/2012/11/01/Unification" rel="alternate" type="text/html"/>
    <title>Unification in SymPy</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Unification is a way to ask questions by matching expressions against patterns. It is a powerful form of pattern matching found in logical programming languages like Prolog, Maude, and Datalog. It is the computational backbone behind the logical programming paradigm and is now a part of SymPy (in a pull request).</p>

<p>Consider the following example. Imagine that you want to find the name of the MatrixSymbol within the Transpose in the following expression (i.e. we’re looking for the string <code>'X'</code>)</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="n">X</span> <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'X'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'Y'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">expr</span> <span class="o">=</span> <span class="n">Transpose</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">+</span> <span class="n">Y</span>
</code></pre></div>
<p>Traditionally we could solve this toy problem with a simple function</p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">name_of_symbol_in_transpose_in_add</span><span class="p">(</span><span class="n">matadd</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">matadd</span><span class="o">.</span><span class="n">args</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="n">Transpose</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">arg</span><span class="p">,</span> <span class="n">MatrixSymbol</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">arg</span><span class="o">.</span><span class="n">arg</span><span class="o">.</span><span class="n">name</span>
</code></pre></div>
<p>We solve this task with unification by setting up a pattern and then unifying that pattern against a target expression</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="n">A</span> <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">B</span> <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'B'</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="c"># Look for an expression tree like A.T + B</span>
    <span class="c"># Treat the leaves 'name', n, m, B as Wilds</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">pattern</span> <span class="o">=</span> <span class="n">patternify</span><span class="p">(</span><span class="n">Transpose</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">+</span> <span class="n">B</span><span class="p">,</span> <span class="s">'name'</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>

    <span class="o">&gt;&gt;&gt;</span> <span class="n">unify</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">expr</span><span class="p">)</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
    <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'X'</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="n">B</span><span class="p">:</span> <span class="n">Y</span><span class="p">}</span>
</code></pre></div>
<p>We get back a matching for each of the wildcards (name, n, m, B) and see that <code>'name'</code> was matched to the string <code>'X'</code>. Is this better or worse than the straight Python solution? Given the relative number of users between Python and Prolog it’s a safe bet that the style of Python programs have some significant advantages over the logical programming paradigm. Why would we program in this strange way?</p>

<p>Unification allows a clean separation between <em>what we’re looking for</em> and <em>how we find it</em>. In the Python solution the mathematical definition of what we want is spread among a few lines and is buried inside of control flow.</p>
<div class="highlight"><pre><code class="python">    <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">matadd</span><span class="o">.</span><span class="n">args</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="n">Transpose</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">arg</span><span class="p">,</span> <span class="n">MatrixSymbol</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">arg</span><span class="o">.</span><span class="n">arg</span><span class="o">.</span><span class="n">name</span>
</code></pre></div>
<p>In the unification solution the line</p>
<div class="highlight"><pre><code class="python">    <span class="n">pattern</span> <span class="o">=</span> <span class="n">patternify</span><span class="p">(</span><span class="n">Transpose</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">+</span> <span class="n">B</span><span class="p">,</span> <span class="s">'name'</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
</code></pre></div>
<p>expresses exactly <em>what</em> we’re looking for and gives no information on <em>how</em> it should be found. The how is wrapped up in the call to <code>unify</code></p>
<div class="highlight"><pre><code class="python">    <span class="n">unify</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">expr</span><span class="p">)</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</code></pre></div>
<p>This separation of the <em>what</em> and <em>how</em> is what excites me about declarative programming. I think that this separation is useful when mathematical and algorithmic programmers need to work together to solve a large problem. This is often the case in scientific computing. Mathematical programmers think about <em>what</em> should be done while algorithmic programmers think about <em>how</em> it can be efficiently computed. Declarative techniques like unification enables these two groups to work independently.</p>

<h2 id="multiple_matches">Multiple Matches</h2>

<p>Lets see how unify works on a slightly more interesting expression</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="n">expr</span> <span class="o">=</span> <span class="n">Transpose</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">+</span> <span class="n">Transpose</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">unify</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">expr</span><span class="p">)</span>
    <span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">unify</span> <span class="n">at</span> <span class="mh">0x548cb90</span><span class="o">&gt;</span>
</code></pre></div>
<p>In this situation because both matrices <code>X</code> and <code>Y</code> are inside transposes our pattern to match “the name of a symbol in a transpose” could equally well return the strings <code>'X'</code> or <code>'Y'</code>. The unification algorithm will give us both of these options</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">match</span> <span class="ow">in</span> <span class="n">unify</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">expr</span><span class="p">):</span> 
    <span class="o">...</span>    <span class="k">print</span> <span class="n">match</span>
    <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'Y'</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="n">B</span><span class="p">:</span> <span class="n">X</span><span class="s">'}</span>
    <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'X'</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="n">B</span><span class="p">:</span> <span class="n">Y</span><span class="s">'}</span>
</code></pre></div>
<p>Because expr is commutative we can match <code>{A: Transpose(X), B: Transpose(Y)}</code> or <code>{A: Transpose(Y), B: Transpose(X)}</code> with equal validity. Instead of choosing one <code>unify</code>, returns an iterable of all possible matches.</p>

<h2 id="combinatorial_blowup">Combinatorial Blowup</h2>

<p>In how many ways can we match the following pattern</p>

<pre><code>w + x + y + z</code></pre>

<p>to the following expression?</p>

<pre><code>a + b + c + d + e + f</code></pre>

<p>This is a variant on the standard “N balls in K bins” problem often given in a discrete math course. The answer is “quite a few.” How can we avoid this combinatorial blowup?</p>

<p><code>unify</code> produces matches lazily. It returns a Python generator which yields results only as you ask for them. You can ask for just one match (a common case) very quickly.</p>

<p>The bigger answer is that if you aren’t satisfied with this and want a better/stronger/faster way to find your desired match you could always <em>rewrite unify</em>. The <code>unify</code> function is all about the <em>how</em> and is disconnected from the <em>what</em>. Algorithmic programmers can tweak unify without disrupting the mathematical code.</p>

<h2 id="rewrites">Rewrites</h2>

<p>Unification is commonly used in term rewriting systems. Here is an example</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="n">pattern_source</span> <span class="o">=</span> <span class="n">patternify</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">pattern_target</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">sincos_to_one</span> <span class="o">=</span> <span class="n">rewriterule</span><span class="p">(</span><span class="n">pattern_source</span><span class="p">,</span> <span class="n">pattern_target</span><span class="p">)</span>

    <span class="o">&gt;&gt;&gt;</span> <span class="n">sincos_to_one</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
    <span class="mi">1</span>
</code></pre></div>
<p>We were able to turn a mathematical identity <code>sin(x)**2 + cos(x)**2 =&gt; 1</code> into a function very simply using unification. However unification only does exact pattern matching so we can only find the <code>sin(x)**2 + cos(x)**2</code> pattern if that pattern is at the top node in the tree. As a result we’re not able to apply this simplification within a larger expression tree</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">sincos_to_one</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="n">c</span><span class="o">**</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)))</span> <span class="c"># no matches</span>
    <span class="p">[]</span>
</code></pre></div>
<p>I will leave the solution of this problem to a future post. Instead, I want to describe why I’m working on all of this.</p>

<h2 id="matrix_computations">Matrix Computations</h2>

<p><a href="http://matthewrocklin.com/blog/work/2012/10/29/Matrix-Computations/">My last post</a> was about translating Matrix Expressions into high-performance Fortran Code. I ended this post with the following problem:</p>
<hr/>
<p><em>So how can we transform a matrix expression like</em></p>
<div class="highlight"><pre><code class="python">    <span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="p">)</span><span class="o">.</span><span class="n">I</span> <span class="o">*</span> <span class="n">x</span>
</code></pre></div>
<p>…</p>

<p><em>Into a graph of <code>BLAS</code> calls like one of the following?</em></p>
<div class="highlight"><pre><code class="python">    <span class="n">DGEMM</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">DTRSV</span><span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
    <span class="n">DTRMM</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>       <span class="o">-&gt;</span> <span class="n">DTRSV</span><span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</code></pre></div><hr/>
<p>This problem can be partially solved by unification and rewrite rules. Each <code>BLAS</code> operation is described by a class</p>
<div class="highlight"><pre><code class="python"><span class="k">class</span> <span class="nc">MM</span><span class="p">(</span><span class="n">BLAS</span><span class="p">):</span>
    <span class="sd">""" Matrix Multiply """</span>
    <span class="n">_inputs</span>   <span class="o">=</span> <span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">beta</span><span class="p">,</span> <span class="n">C</span><span class="p">)</span>
    <span class="n">_outputs</span>  <span class="o">=</span> <span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span> <span class="o">+</span> <span class="n">beta</span><span class="o">*</span><span class="n">C</span><span class="p">,)</span>
</code></pre></div>
<p>The <code>_outputs</code> and <code>_inputs</code> fields mathematically define when <code>MM</code> is appropriate. This is all we need to make a transformation</p>
<div class="highlight"><pre><code class="python">    <span class="n">pattern_source</span> <span class="o">=</span> <span class="n">patternify</span><span class="p">(</span><span class="n">MM</span><span class="o">.</span><span class="n">_outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">*</span><span class="n">MM</span><span class="o">.</span><span class="n">_inputs</span><span class="p">)</span>
    <span class="n">pattern_target</span> <span class="o">=</span> <span class="n">MM</span><span class="p">(</span><span class="o">*</span><span class="n">MM</span><span class="o">.</span><span class="n">_inputs</span><span class="p">)</span>
    <span class="n">rewriterule</span><span class="p">(</span><span class="n">pattern_source</span><span class="p">,</span> <span class="n">pattern_target</span><span class="p">)</span>
</code></pre></div>
<p>Unification allows us to describe <code>BLAS</code> mathematically without thinking about how each individual operation will be detected in an expression. The control flow and the math are completely separated allowing us to think hard about each problem in isolation.</p>

<h2 id="references">References</h2>

<p>I learned a great deal from the following sources</p>

<ul>
<li><a href="http://aima.cs.berkeley.edu/">Artificial Intelligence: A Modern Approach</a> by Stuart Russel and Peter Norvig (Particularly section 9.2 in the second edition)</li>

<li><a href="http://stackoverflow.com/questions/13092092/algorithms-for-unification-of-list-based-trees">StackOverflow - Algorithms for Unification of list-based trees</a></li>

<li><a href="http://stackoverflow.com/questions/13131491/partition-n-items-into-k-bins-in-python-lazily">StackOverflow - Partition N items into K bins in Python lazily</a> (Special thanks to <a href="https://github.com/smichr">Chris Smith</a> who provided the best answer)</li>

<li><a href="http://en.wikipedia.org/wiki/Logic_programming">Logic Programming</a></li>

<li><a href="http://en.wikipedia.org/wiki/Term_rewriting">Term Rewriting</a></li>

<li><a href="http://www.learnprolognow.org/">My favorite Prolog tutorial</a></li>

<li><a href="http://goo.gl/ZqVHJ">SymPy E-mail thread on this topic</a></li>

<li><a href="https://github.com/sympy/sympy/pull/1633">Pull Request</a></li>
</ul></div>
    </summary>
    <updated>2012-11-01T07:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-17T04:40:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://gilbertgede.wordpress.com/2012/10/29/google-summer-of-code-mentor-summit-2012/</id>
    <link href="http://gilbertgede.wordpress.com/2012/10/29/google-summer-of-code-mentor-summit-2012/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code, Mentor Summit 2012</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I probably should have written a blog post during the summer, displaying Angadh’s work . . . oh well. SymPy sent me as one of 3 mentors to the GSoC Mentor Summit this year, at the Googleplex. I was very excited to go, meet some of the other SymPy developers (Matthew and Stefan), and meet [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=93&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I probably should have written a blog post during the summer, displaying <a href="http://angadhsympy.wordpress.com/" target="_blank" title="Angadh's work">Angadh’s work</a> . . . oh well.</p>
<p>SymPy sent me as one of 3 mentors to the GSoC Mentor Summit this year, at the Googleplex. I was very excited to go, meet some of the other SymPy developers (Matthew and Stefan), and meet others in the open source community. My overall experience was a little mixed though.</p>
<p>Matthew covered some feelings/conclusions I also share in his <a href="http://sympystats.wordpress.com/2012/10/22/gsoc-mentor-summit/" target="_blank" title="Matthew's Mentor Summit Write-Up">write-up</a> on the event, but I have some others.</p>
<p>Meeting and interacting with people in the open source community was probably the highlight of the trip for me. It was interesting to talk to a few people who had taken projects that were originally academic/research code and translated them into more successful (open source) products. I’m not sure if it will be relevant to SymPy’s future, but it might be to mine. A common thread seemed to be: jumpstart a project with grants, keep improving it for long enough with that money, and then put it in a position where it can join an umbrella organization or can be used by professionals who will pay for support. I certainly don’t speak for any other SymPy developers, but I’ve never got the feeling that this was the intended trajectory of the project (at least the selling support part).</p>
<p>There was a talk on how to structure student/mentor/organization interactions for future GSoC projects. Some of the organizations have a much more defined structure than SymPy though, and benefit from things like daily group meetings. SymPy seems to have a more distributed organizational structure though – there are a lot of different modules, that all have some independence from each other. Despite this, SymPy’s code base is of very high quality, with credit going to the review-process/reviewers and the high standards that are enforced.</p>
<p>The talk on forming non-profit organizations was also interesting. One major takeaway was that the IRS would rather you put your project under an existing umbrella, rather than grant you 501(c) status, due to the potential for abuse. Also, a lot of work is involved in managing money properly once a certain amount of cash flowing through. Although there are hurdles, getting to form a board of directors sounded interesting. Scheduling board meetings could also be fun (with the money being spent responsibly, of course…).</p>
<p>On the less positive side of things: the unconference format. I think that it could have worked a lot better. Again, Matthew touched on this in his post, but all of the sessions (that were not just presentations) were very unfocused, with some more productive than others. The lack of moderation was a serious impediment to keeping the discussions on track. There were definitely a few times were people would hijack a session to try and talk about or show off their project. While I don’t have a problem with people showing off their work, there was limited time for each session.</p>
<p>The time limitations on the sessions was another issue. Each one was ~45 minutes, and almost always there was another session waiting for you to leave the room so they could start. I think in a few of the talks I went to, people would have been happy to stay in the room and continue to discuss the subject. Perhaps the expectations, of the session initiators (and myself), on what we would accomplish were too high. Perhaps the 45 minutes should have been spent networking with other people thinking about that topic, and then spawning a more detailed discussion in the future? Again, I think moderation would have helped this.</p>
<p>There were also some talks, with interesting sounding titles, that were just unproductive. There was too much recounting of what one organization did, with little generalization to what others could use. There was also little consideration of what decisions were made which led to important decisions; e.g. the fact that a project was split into parts A and B which were developed separately was recounted, but not what went into making that decision. Perhaps another example of expectations being too high…</p>
<p>I’m certainly not going to write off the unconference format – I think it could have led to some really cool things. But I don’t think I will attend another one that has sessions which are so short and under-moderated.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/93/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/93/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=93&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-10-29T22:50:11Z</updated>
    <category term="SymPy"/>
    <category term="GSoC 2012"/>
    <category term="GSoC 2012 Mentor Summit"/>
    <author>
      <name>gilbertgede</name>
    </author>
    <source>
      <id>http://gilbertgede.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://gilbertgede.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://gilbertgede.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://gilbertgede.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://gilbertgede.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site, I guess...</subtitle>
      <title>Gilbert Gede's Blog</title>
      <updated>2013-01-17T11:20:23Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2012/10/29/Matrix-Computations</id>
    <link href="http://matthewrocklin.com/blog//work/2012/10/29/Matrix-Computations" rel="alternate" type="text/html"/>
    <title>Matrix Computations in SymPy</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I want to translate matrix expressions like this</p>
<div class="highlight"><pre><code class="python">    <span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="p">)</span><span class="o">.</span><span class="n">I</span> <span class="o">*</span> <span class="n">x</span>
</code></pre>
</div>
<p>Into Fortran code that call BLAS and LAPACK code like this</p>
<div class="highlight"><pre><code class="fortran">    <span class="k">subroutine </span><span class="nv">f</span><span class="p">(</span><span class="nv">alpha</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">B</span><span class="p">,</span> <span class="nv">x</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>

    <span class="kt">real</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span>  <span class="k">intent</span><span class="p">(</span><span class="nv">in</span><span class="p">)</span>     <span class="kd">::</span> <span class="nv">A</span><span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>
    <span class="kt">real</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span>  <span class="k">intent</span><span class="p">(</span><span class="nv">inout</span><span class="p">)</span>  <span class="kd">::</span> <span class="nv">B</span><span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>
    <span class="kt">real</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span>  <span class="k">intent</span><span class="p">(</span><span class="nv">in</span><span class="p">)</span>     <span class="kd">::</span> <span class="nv">alpha</span>
    <span class="kt">integer</span><span class="p">,</span> <span class="k">intent</span><span class="p">(</span><span class="nv">in</span><span class="p">)</span>     <span class="kd">::</span> <span class="nv">n</span>
    <span class="kt">real</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span>  <span class="k">intent</span><span class="p">(</span><span class="nv">inout</span><span class="p">)</span>  <span class="kd">::</span> <span class="nv">x</span><span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

    <span class="k">call </span><span class="nv">dgemm</span><span class="p">(</span><span class="s1">'N'</span><span class="p">,</span> <span class="s1">'N'</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">alpha</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">B</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">B</span><span class="p">,</span> <span class="nv">n</span><span class="p">)</span>
    <span class="k">call </span><span class="nv">dtrsv</span><span class="p">(</span><span class="s1">'L'</span><span class="p">,</span> <span class="s1">'N'</span><span class="p">,</span> <span class="s1">'N'</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">B</span><span class="p">,</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

    <span class="k">RETURN</span>
<span class="k">    END</span>
</code></pre>
</div>
<p>And then call it in Python like this</p>
<div class="highlight"><pre><code class="python">    <span class="n">nA</span><span class="p">,</span> <span class="n">nB</span><span class="p">,</span> <span class="n">nx</span> <span class="o">=</span> <span class="o">....</span> <span class="c"># Get numpy arrays</span>
    <span class="n">f</span><span class="p">(</span><span class="n">nalpha</span><span class="p">,</span> <span class="n">nA</span><span class="p">,</span> <span class="n">nB</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">nx</span><span class="o">.</span><span class="n">T</span><span class="p">))</span> 
</code></pre>
</div>
<h2 id="what_is_blas">What is BLAS?</h2>

<p><a href="http://en.wikipedia.org/wiki/BLAS">BLAS</a> stands for Basic Linear Algebra Subroutines. It is a library of Fortran functions for dense linear algebra first published in 1979.</p>

<p>The most famous BLAS routine is <a href="http://www.netlib.org/blas/dgemm.f">DGEMM</a> a routine for <strong>D</strong>ouble precision <strong>GE</strong>nerally structured <strong>M</strong>atrix <strong>M</strong>ultiplication. <code>DGEMM</code> is very well implemented. <code>DGEMM</code> traditionally handles blocking for fewer cache misses, autotuning for each individual architecture, and even assembly level code optimization. You should never code up your own matrix multiply, you should always use <code>DGEMM</code>. Unfortunately, you may not know Fortran, and, even if you did, you might find the function header to be daunting.</p>

<pre><code>SUBROUTINE DGEMM(TRANSA,TRANSB,M,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)</code></pre>

<p>Even if you’re capable of working at this low-level most scientific users are not. <code>DGEMM</code> is fast but inaccessible. To solve this problem we usually build layers on top of <code>BLAS</code>. For example <code>numpy.dot</code> calls <code>DGEMM</code> if the BLAS library is available on your system.</p>

<h2 id="why_not_just_use_numpy">Why not just use NumPy?</h2>

<p>If you’re reading this then you’re probably comfortable with NumPy and you’re very happy that it gives you access to highly optimized low-level code like <code>DGEMM</code>. What else could we desire? NumPy has two flaws</p>

<ol>
<li>
<p>Each operation occurs at the Python level. This causes sub-optimal operation ordering and lots of unnecessary copies. For example the following code is executed as follows</p>
<div class="highlight"><pre><code class="python"><span class="n">D</span> <span class="o">=</span> <span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="o">*</span><span class="n">C</span> <span class="c"># store A*B  -&gt; _1</span>
<span class="n">D</span> <span class="o">=</span> <span class="n">_1</span><span class="o">*</span><span class="n">C</span>  <span class="c"># store _1*C -&gt; _2</span>
<span class="n">D</span> <span class="o">=</span> <span class="n">_2</span>    <span class="c"># store _2   -&gt;  D</span>

</code></pre>
</div>
<p>It might have been cleaner to multiply <code>A*B*C</code> as <code>(A*B)*C</code> or <code>A*(B*C)</code> depending on the shapes of the matrices. Additionally the temporary matrices <code>_1</code>, and <code>_2</code> did not need to be created. If we’re allowed to <em>reason about the computation</em> before execution then we can make some substantial optimizaitons.</p>
</li>

<li>
<p>BLAS contains many special functions for special cases. For example you can use <code>DSYMM</code> when one of your matrices is <strong>SY</strong>metric or <code>DTRMM</code> when one of your matrices is <strong>TR</strong>iangular. These allow for faster execution time if we are able to reason about our matrices.</p>
</li>
</ol>

<h2 id="previous_work">Previous Work</h2>

<p>In the cases above we argue that we can make substantial gains if we are allowed to reason about the computation before it is executed. This is the job of a compiler. Computation usually happens as follows:</p>

<ol>
<li>Write down code</li>

<li>Reason about and transform code</li>

<li>Execute code</li>
</ol>

<p>Step (2) is often removed in scripting languages for programmer simplicity. There has been a lot of activity recently in putting it back in for array computations. The following projects compile array expressions prior to execution</p>

<ol>
<li>NumExpr</li>

<li>Theano</li>

<li>Numba</li>

<li>… I’m undoubtedly forgetting many excellent projects. Here is <a href="https://github.com/Theano/Theano/wiki/Lazy-Matrix-Algebra-Ecosystem">a more complete list</a></li>
</ol>

<h2 id="where_does_sympy_fit_in">Where does SymPy fit in?</h2>

<p>The projects above are all numerical in nature. They are generally good at solving problems of the first kind (operation ordering, inplace operations, …) but none of them think very clearly about the <em>mathematical</em> properties of the matrices. This is where SymPy can be useful. Using the assumptions logical programming framework SymPy is able to reason about the properties of matrix expressions. Consider the following situation</p>

<p>We know that <code>A</code> is symmetric and positive definite. We know that <code>B</code> is orthogonal.</p>

<p>Question: is <code>BAB'</code> symmetric and positive definite?</p>

<p>Lets see how we can pose this question in SymPy.</p>
<div class="highlight"><pre><code class="python">    <span class="o">&gt;&gt;&gt;</span> <span class="n">A</span> <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'A'</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">B</span> <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'B'</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">context</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">positive_definite</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">orthogonal</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">ask</span><span class="p">(</span><span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">B</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">positive_definite</span><span class="p">(</span><span class="n">B</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="o">.</span><span class="n">T</span><span class="p">),</span> <span class="n">context</span><span class="p">)</span>
    <span class="bp">True</span>
</code></pre>
</div>
<p>Positive-Definiteness is a very important property of matrix expressions. It strongly influences our choice of numerical algorithm. For example the fast <a href="http://en.wikipedia.org/wiki/Cholesky">Cholesky algorithm</a> for LU decomposition may only be used if a matrix is symmetric and positive definite. Expert numerical analysts know this but most scientific programmers do not. NumPy does not know this but SymPy does.</p>

<h2 id="describing_blas">Describing BLAS</h2>

<p>We describe a new matrix operation in SymPy with code like the following:</p>
<div class="highlight"><pre><code class="python">    <span class="n">S</span> <span class="o">=</span> <span class="n">MatrixSymbol</span><span class="p">(</span><span class="s">'S'</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="k">class</span> <span class="nc">LU</span><span class="p">(</span><span class="n">BLAS</span><span class="p">):</span>
        <span class="sd">""" LU Decomposition """</span>
        <span class="n">_inputs</span>   <span class="o">=</span> <span class="p">(</span><span class="n">S</span><span class="p">,)</span>
        <span class="n">_outputs</span>  <span class="o">=</span> <span class="p">(</span><span class="n">Lof</span><span class="p">(</span><span class="n">S</span><span class="p">),</span> <span class="n">Uof</span><span class="p">(</span><span class="n">S</span><span class="p">))</span>
        <span class="n">view_map</span>  <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span> <span class="c"># Both outputs are stored in first input</span>
        <span class="n">condition</span> <span class="o">=</span> <span class="bp">True</span>         <span class="c"># Always valid</span>

    <span class="k">class</span> <span class="nc">Cholesky</span><span class="p">(</span><span class="n">LU</span><span class="p">):</span>
        <span class="sd">""" Cholesky LU Decomposition """</span>
        <span class="n">condition</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">symmetric</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">positive_definite</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
</code></pre>
</div>
<p>This description allows us to consisely describe the expert knowledge used by numerical analysts. It allows us to describe the mathematical properties of linear algebraic operations.</p>

<h2 id="matrix_computation_graphs">Matrix Computation Graphs</h2>

<p>We usually write code in a linear top-down text file. This representation does not allow the full generality of a program. Instead we need to use a graph.</p>

<p>A computation can be described as a directed acyclic graph (DAG) where each node in the graph is an atomic computation (a function call like <code>DGEMM</code> or <code>Cholesky</code>) and each directed edge represents a data dependency between function calls (an edge from <code>DGEMM</code> to <code>Cholesky</code> implies that the <code>Cholesky</code> requires an output of the <code>DGEMM</code> call in order to run). This graph may not contain cycles - they would imply that some set of jobs all depend on each other; they could never start.</p>

<p>Graphs must be eventually linearized and turned into code. Before that happens we can think about optimal ordering and, if we feel adventurous, parallel scheduling onto different machines.</p>

<p>SymPy contains a very simple Computation graph object. Here we localize all of the logic about inplace operations, ordering, and (eventually) parallel scheduling.</p>

<h2 id="translating_matrix_expressions_into_matrix_computations">Translating Matrix Expressions into Matrix Computations</h2>

<p>So how can we transform a matrix expression like</p>
<div class="highlight"><pre><code class="python">    <span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="p">)</span><span class="o">.</span><span class="n">I</span> <span class="o">*</span> <span class="n">x</span>
</code></pre>
</div>
<p>And a set of predicates like</p>
<div class="highlight"><pre><code class="python">    <span class="n">Q</span><span class="o">.</span><span class="n">lower_triangular</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">lower_triangular</span><span class="p">(</span><span class="n">B</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">Q</span><span class="o">.</span><span class="n">invertible</span><span class="p">(</span><span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="p">)</span>
</code></pre>
</div>
<p>Into a graph of <code>BLAS</code> calls like one of the following?</p>
<div class="highlight"><pre><code class="python">    <span class="n">DGEMM</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">DTRSV</span><span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
    <span class="n">DTRMM</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>       <span class="o">-&gt;</span> <span class="n">DTRSV</span><span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</code></pre>
</div>
<p>And, once we have this set of valid computations how do we choose the right one? This is the question that this project faces right now. These are both challenging problems.</p>

<h2 id="references">References</h2>

<ul>
<li><a href="http://www.netlib.org/blas/">BLAS</a> and <a href="http://www.netlib.org/lapack/">LAPACK</a></li>

<li>J. Bergstra, O. Breuleux, F. Bastien, P. Lamblin, R. Pascanu, G. Desjardins, J. Turian, D. Warde-Farley and Y. Bengio. <a href="http://www.iro.umontreal.ca/~lisa/pointeurs/theano_scipy2010.pdf"><em>Theano: A CPU and GPU Math Expression Compiler</em></a>. Proceedings of the Python for Scientific Computing Conference (SciPy) 2010. June 30 - July 3, Austin, TX]</li>

<li><a href="http://www.continuum.io/">Numba at Continuum</a></li>

<li><a href="http://code.google.com/p/numexpr/">NumExpr</a></li>

<li><a href="https://github.com/Theano/Theano/wiki/Lazy-Matrix-Algebra-Ecosystem">A list of matrix projects in Python</a></li>

<li><a href="http://matthewrocklin.com/pub/ordering/partial-orders.pdf">M. Rocklin, <em>Partial Ordering in Theano</em></a></li>
</ul></div>
    </summary>
    <updated>2012-10-29T07:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2013-01-15T17:20:33Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://blog.krastanov.org/?p=561</id>
    <link href="http://blog.krastanov.org/2012/10/25/sage-vs-sympy-integration/" rel="alternate" type="text/html"/>
    <title>Sage vs SymPy – integration</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">During the recent GSoC summit I had the chance to participate in many fascinating discussions. One such occasion was while meeting the Sage representative. A detail he mentioned, was that during his tests SymPy frequently failed to solve integrals that Sage (using Maxima) was able to solve. An explanation, in which I like to believe, [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=561&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>During the recent GSoC summit I had the chance to participate in many fascinating discussions. One such occasion was while meeting the Sage representative.</p>
<p>A detail he mentioned, was that during his tests SymPy frequently failed to solve integrals that Sage (using Maxima) was able to solve. An explanation, in which I like to believe, would be that he was testing an old version of SymPy lacking the new integration routines implemented during the last few GSoC projects. Hence my decision the compare the most recent versions of both projects.</p>
<p>The tested versions are SymPy 0.7.2 and Sage 5.3.</p>
<p>Depending on screen size and wordpress theme the table might be badly formatted so here is a link to the <a href="https://raw.github.com/wiki/sympy/sympy/sympy_sage_integration.html" target="_blank">wiki html page</a> and a <a href="http://krastanov.files.wordpress.com/2012/10/sympy_sage.pdf">pdf</a> version.</p>
<p>It should be noted that Sage is more rigorous about the assumptions on its symbols and so it fails to integrate something like <img alt="x^n" class="latex" src="http://s0.wp.com/latex.php?latex=x%5En&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="x^n"/> if <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="n"/> is not explicitly different than -1. I personally think that this is a feature and not a bug. Due to this difference however the script used to test Sage differs from the one used for SymPy.</p>
<p>Another minor methodological difference in the tests is the fact that the timeout pattern that I used failed to work for the Sage interpreter. Hence, SymPy integration timeouts at about 120 seconds while Sage integration is manually interrupted when it takes too much time.</p>
<p>Final methodological difference is that I purge the SymPy cache between each integral as otherwise the RAM usage becomes too great.</p>
<p>The results show that SymPy is slightly better in using special functions to solve integrals, but there are also a few integrals that Sage solves while SymPy fails to do so. On few occasions Sage fails disgracefully, meaning  that it returns an error instead of unevaluated integral. When both packages fail to evaluate the integral SymPy is much slower to say so (timeout for SymPy compared to 1 or 2 seconds for Sage to return an unevaluated integral). Finally, on some occasions the results by Sage seem better simplified.</p>
<p>Integrals solved better by SymPy (if you consider special functions “better”):</p>
<ul>
<li><img alt="\frac{1}{a x^n + 1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7Ba+x%5En+%2B+1%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\frac{1}{a x^n + 1}"/> with the use of a special function while Sage returns unevaluated integrals</li>
<li><img alt="\frac{a x^n}{b x^m + 1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba+x%5En%7D%7Bb+x%5Em+%2B+1%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\frac{a x^n}{b x^m + 1}"/> with the use of a special function while Sage returns unevaluated integrals</li>
<li><img alt="\frac{a x^n + 1}{b x^m + 1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba+x%5En+%2B+1%7D%7Bb+x%5Em+%2B+1%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\frac{a x^n + 1}{b x^m + 1}"/> with the use of a special function while Sage returns unevaluated integrals</li>
<li><img alt="\frac{a x^5 + x^3 + 1}{b x^5 + x^3 + 1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba+x%5E5+%2B+x%5E3+%2B+1%7D%7Bb+x%5E5+%2B+x%5E3+%2B+1%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\frac{a x^5 + x^3 + 1}{b x^5 + x^3 + 1}"/> with the use of a special function while Sage returns unevaluated integrals</li>
</ul>
<p>Integrals solved better by Sage:</p>
<ul>
<li><img alt="\frac{a x^2}{b x^2 + 1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba+x%5E2%7D%7Bb+x%5E2+%2B+1%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\frac{a x^2}{b x^2 + 1}"/> solved by both but Sage’s result is simpler (it uses arctan instead of log)</li>
<li><img alt="\frac{1}{\sqrt{x^2 + 1}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7Bx%5E2+%2B+1%7D%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\frac{1}{\sqrt{x^2 + 1}}"/> SymPy fails this simple integral</li>
<li><img alt="\log\left(\frac{a x^3}{b x^3 + 1}\right)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%5Cleft%28%5Cfrac%7Ba+x%5E3%7D%7Bb+x%5E3+%2B+1%7D%5Cright%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\log\left(\frac{a x^3}{b x^3 + 1}\right)"/> solved by both but Sage’s result is much simpler</li>
<li><img alt="\log\left(\frac{a x^2 + 1}{b x^2 + 1}\right)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%5Cleft%28%5Cfrac%7Ba+x%5E2+%2B+1%7D%7Bb+x%5E2+%2B+1%7D%5Cright%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\log\left(\frac{a x^2 + 1}{b x^2 + 1}\right)"/> SymPy fails</li>
<li><img alt="\log\left(\frac{a x^3 + 1}{b x^3 + 1}\right)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%5Cleft%28%5Cfrac%7Ba+x%5E3+%2B+1%7D%7Bb+x%5E3+%2B+1%7D%5Cright%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\log\left(\frac{a x^3 + 1}{b x^3 + 1}\right)"/> SymPy fails</li>
<li><img alt="\frac{1}{\sin x + 1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csin+x+%2B+1%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\frac{1}{\sin x + 1}"/> SymPy fails</li>
<li><img alt="\frac{a \sin^2 x + 1}{b \sin^2 x + 1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba+%5Csin%5E2+x+%2B+1%7D%7Bb+%5Csin%5E2+x+%2B+1%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\frac{a \sin^2 x + 1}{b \sin^2 x + 1}"/> SymPy fails</li>
</ul>
<p>The code for the SymPy tests:</p>
<p/><pre class="brush: python;">import signal
from time import clock
from sympy import *
from sympy.core.cache import clear_cache

class TimeoutException(Exception):
pass

def timeout_handler(signum, frame):
raise TimeoutException()

a, b, x = symbols('a b x')
n, m = symbols('n m', integer=True)

integrants = [
x,
a*x**n,
a*x**n + 1,
a*x**b + 1,

1/x,
1/(x + 1),
1/(x**2 + 1),
1/(x**3 + 1),
1/(a*x**n),
1/(a*x**n + 1),
1/(a*x**b + 1),

a*x**2/(b*x**2 + 1),
a*x**3/(b*x**3 + 1),
a*x**n/(b*x**m + 1),
(a*x**2 + 1)/(b*x**2 + 1),
(a*x**3 + 1)/(b*x**3 + 1),
(a*x**n + 1)/(b*x**m + 1),
(a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1),

sqrt(1/x),
sqrt(1/(x + 1)),
sqrt(1/(x**2 + 1)),
sqrt(1/(x**3 + 1)),
sqrt(1/(a*x**n)),
sqrt(1/(a*x**n + 1)),
sqrt(1/(a*x**b + 1)),
sqrt(a*x**2/(b*x**2 + 1)),
sqrt(a*x**3/(b*x**3 + 1)),
sqrt(a*x**n/(b*x**m + 1)),
sqrt((a*x**2 + 1)/(b*x**2 + 1)),
sqrt((a*x**3 + 1)/(b*x**3 + 1)),
sqrt((a*x**n + 1)/(b*x**m + 1)),
sqrt((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)),

log(x),
log(1/x),
log(1/(x + 1)),
log(1/(x**2 + 1)),
log(1/(x**3 + 1)),
log(1/(a*x**n)),
log(1/(a*x**n + 1)),
log(1/(a*x**b + 1)),
log(a*x**2/(b*x**2 + 1)),
log(a*x**3/(b*x**3 + 1)),
log(a*x**n/(b*x**m + 1)),
log((a*x**2 + 1)/(b*x**2 + 1)),
log((a*x**3 + 1)/(b*x**3 + 1)),
log((a*x**n + 1)/(b*x**m + 1)),
log((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)),

sin(x),
sin(x)**n*cos(x)**m,
sin(a*x)**n*cos(b*x)**m,
1/sin(x),
1/(sin(x) + 1),
1/(sin(x)**2 + 1),
1/(sin(x)**3 + 1),
1/(a*sin(x)**n),
1/(a*sin(x)**n + 1),
1/(a*sin(x)**b + 1),
a*sin(x)**2/(b*sin(x)**2 + 1),
a*sin(x)**3/(b*sin(x)**3 + 1),
a*sin(x)**n/(b*sin(x)**m + 1),
(a*sin(x)**2 + 1)/(b*sin(x)**2 + 1),
(a*sin(x)**3 + 1)/(b*sin(x)**3 + 1),
(a*sin(x)**n + 1)/(b*sin(x)**m + 1),
(a*sin(x)**5 + sin(x)**3 + 1)/(b*sin(x)**5 + sin(x)**3 + 1),
]

integrated = []
durations = []

f_integrants = open('dump_integrants', 'w')
f_integrated = open('dump_integrated', 'w')
f_durations = open('dump_duration', 'w')

for index, integrant in enumerate(integrants):
clear_cache()
print '====================================='
print index, ' of ', len(integrants)
print '###', integrant
start = clock()
try:
old_handler = signal.signal(signal.SIGALRM, timeout_handler)
signal.alarm(120)
integrated.append(integrate(integrant, x))
signal.alarm(0)
except TimeoutException:
integrated.append(TimeoutException)
finally:
signal.signal(signal.SIGALRM, old_handler)
durations.append(clock() - start)
print '###', integrated[-1]
print 'in %f seconds'%durations[-1]

f_integrants.write(str(integrant))
f_integrated.write(str(integrated[-1]))
f_durations.write(str(durations[-1]))
f_integrants.write('\n')
f_integrated.write('\n')
f_durations.write('\n')
</pre><p/>
<p>And for Sage:</p>
<p/><pre class="brush: python;">import signal
from time import clock
from sage.all import *
from sage.symbolic.integration.integral import indefinite_integral

class TimeoutException(Exception):
pass

def timeout_handler(signum, frame):
raise TimeoutException()

a, b, x = var('a b x')
n, m = var('n m')
assume(n, 'integer')
assume(m, 'integer')

assume(n != 1)
assume(n != -1)
assume(n != 2)
assume(n&gt;0)
assume(b != 1)
assume(b != -1)
assume(b&gt;0)
assume(a&gt;0)

integrants = [
x,
a*x**n,
a*x**n + 1,
a*x**b + 1,

1/x,
1/(x + 1),
1/(x**2 + 1),
1/(x**3 + 1),
1/(a*x**n),
1/(a*x**n + 1),
1/(a*x**b + 1),

a*x**2/(b*x**2 + 1),
a*x**3/(b*x**3 + 1),
a*x**n/(b*x**m + 1),
(a*x**2 + 1)/(b*x**2 + 1),
(a*x**3 + 1)/(b*x**3 + 1),
(a*x**n + 1)/(b*x**m + 1),
(a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1),

sqrt(1/x),
sqrt(1/(x + 1)),
sqrt(1/(x**2 + 1)),
sqrt(1/(x**3 + 1)),
sqrt(1/(a*x**n)),
sqrt(1/(a*x**n + 1)),
sqrt(1/(a*x**b + 1)),
sqrt(a*x**2/(b*x**2 + 1)),
sqrt(a*x**3/(b*x**3 + 1)),
sqrt(a*x**n/(b*x**m + 1)),
sqrt((a*x**2 + 1)/(b*x**2 + 1)),
sqrt((a*x**3 + 1)/(b*x**3 + 1)),
sqrt((a*x**n + 1)/(b*x**m + 1)),
sqrt((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)),

log(x),
log(1/x),
log(1/(x + 1)),
log(1/(x**2 + 1)),
log(1/(x**3 + 1)),
log(1/(a*x**n)),
log(1/(a*x**n + 1)),
log(1/(a*x**b + 1)),
log(a*x**2/(b*x**2 + 1)),
log(a*x**3/(b*x**3 + 1)),
log(a*x**n/(b*x**m + 1)),
log((a*x**2 + 1)/(b*x**2 + 1)),
log((a*x**3 + 1)/(b*x**3 + 1)),
log((a*x**n + 1)/(b*x**m + 1)),
log((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)),

sin(x),
sin(x)**n*cos(x)**m,
sin(a*x)**n*cos(b*x)**m,
1/sin(x),
1/(sin(x) + 1),
1/(sin(x)**2 + 1),
1/(sin(x)**3 + 1),
1/(a*sin(x)**n),
1/(a*sin(x)**n + 1),
1/(a*sin(x)**b + 1),
a*sin(x)**2/(b*sin(x)**2 + 1),
a*sin(x)**3/(b*sin(x)**3 + 1),
a*sin(x)**n/(b*sin(x)**m + 1),
(a*sin(x)**2 + 1)/(b*sin(x)**2 + 1),
(a*sin(x)**3 + 1)/(b*sin(x)**3 + 1),
(a*sin(x)**n + 1)/(b*sin(x)**m + 1),
(a*sin(x)**5 + sin(x)**3 + 1)/(b*sin(x)**5 + sin(x)**3 + 1),
]

integrated = []
durations = []

f_integrants = open('dump_integrants', 'w')
f_integrated = open('dump_integrated', 'w')
f_durations = open('dump_duration', 'w')

for index, integrant in enumerate(integrants):
print '====================================='
print index, ' of ', len(integrants)
print '###', integrant
start = clock()
try:
old_handler = signal.signal(signal.SIGALRM, timeout_handler)
signal.alarm(120)
integrated.append(indefinite_integral(integrant, x))
signal.alarm(0)
except Exception, e:
integrated.append(e)
finally:
signal.signal(signal.SIGALRM, old_handler)
durations.append(clock() - start)
print '###', integrated[-1]
print 'in %f seconds'%durations[-1]

f_integrants.write(str(integrant))
f_integrated.write(str(integrated[-1]))
f_durations.write(str(durations[-1]))
f_integrants.write('\n')
f_integrated.write('\n')
f_durations.write('\n')
</pre><p/>
<p>Below is the complete table (available as a <a href="https://raw.github.com/wiki/sympy/sympy/sympy_sage_integration.html" target="_blank">wiki html page</a> and a <a href="http://krastanov.files.wordpress.com/2012/10/sympy_sage.pdf">pdf</a>).</p>
<table>
<caption>Sympy vs Sage integration routines</caption>
<tbody>
<tr>
<td style="font-size: 10pt;">Legend:</td>
<td/>
<td/>
<td/>
<td/>
<td/>
</tr>
<tr>
<td style="font-size: 10pt;">Disgraceful failure</td>
<td/>
<td/>
<td/>
<td/>
<td/>
</tr>
<tr>
<td style="font-size: 10pt;">Timeout or manual interupt</td>
<td/>
<td/>
<td/>
<td/>
<td/>
</tr>
<tr>
<td style="font-size: 10pt;">Return an unevalued integral</td>
<td/>
<td/>
<td/>
<td/>
<td/>
</tr>
<tr>
<td style="font-size: 10pt;">Asking for assumptions</td>
<td/>
<td/>
<td/>
<td/>
<td/>
</tr>
<tr>
<td style="font-size: 10pt;">Solution with fancy special functions</td>
<td/>
<td/>
<td/>
<td/>
<td/>
</tr>
<tr>
<td/>
<td/>
<td/>
<td/>
<td/>
<td/>
</tr>
<tr>
<td/>
<td/>
<td/>
<td/>
<td/>
<td/>
</tr>
<tr>
<td colspan="1" rowspan="2" style="font-size: 10pt;">Integrant</td>
<td colspan="2" rowspan="1" style="font-size: 10pt;">Sympy `integrate`</td>
<td colspan="2" rowspan="1" style="font-size: 10pt;">Sage `indefinite_integral`</td>
<td colspan="1" rowspan="2" style="font-size: 10pt;">Comments</td>
</tr>
<tr>
<td style="font-size: 10pt;">Result</td>
<td style="font-size: 10pt;">cpu time</td>
<td style="font-size: 10pt;">Result</td>
<td style="font-size: 10pt;">cpu time</td>
</tr>
<tr>
<td style="font-size: 10pt;">x</td>
<td style="font-size: 10pt;">x**2/2</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">1/2*x^2</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">a*x**n</td>
<td style="font-size: 10pt;">a*x**(n + 1)/(n + 1)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">a*x^(n + 1)/(n + 1)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage asks whether the denominator is zero before solving.</td>
</tr>
<tr>
<td style="font-size: 10pt;">a*x**n + 1</td>
<td style="font-size: 10pt;">a*x**(n + 1)/(n + 1) + x</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">a*x^(n + 1)/(n + 1) + x</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage asks whether the denominator is zero before solving.</td>
</tr>
<tr>
<td style="font-size: 10pt;">a*x**b + 1</td>
<td style="font-size: 10pt;">a*x**(b + 1)/(b + 1) + x</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">a*x^(b + 1)/(b + 1) + x</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage asks whether the denominator is zero before solving.</td>
</tr>
<tr>
<td style="font-size: 10pt;">1/x</td>
<td style="font-size: 10pt;">log(x)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">log(x)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">1/(x + 1)</td>
<td style="font-size: 10pt;">log(x + 1)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">log(x + 1)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">1/(x**2 + 1)</td>
<td style="font-size: 10pt;">atan(x)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">arctan(x)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">1/(x**3 + 1)</td>
<td style="font-size: 10pt;">log(x + 1)/3 – log(x**2 – x + 1)/6 + sqrt(3)*atan(2*sqrt(3)*x/3 – sqrt(3)/3)/3</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">1/3*sqrt(3)*arctan(1/3*(2*x – 1)*sqrt(3)) + 1/3*log(x + 1) – 1/6*log(x^2 – x + 1)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">x**(-n)/a</td>
<td style="font-size: 10pt;">x**(-n + 1)/(a*(-n + 1))</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">-x^(-n + 1)/((n – 1)*a)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage asks whether the denominator is zero before solving.</td>
</tr>
<tr>
<td style="font-size: 10pt;">1/(a*x**n + 1)</td>
<td style="font-size: 10pt;">x*gamma(1/n)*lerchphi(a*x**n*exp_polar(I*pi), 1, 1/n)/(n**2*gamma(1 + 1/n))</td>
<td style="font-size: 10pt;">2</td>
<td style="font-size: 10pt;">integrate(1/(x^n*a + 1), x)</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">Sympy solves with special functions an integral that Sage cannot solve.</td>
</tr>
<tr>
<td style="font-size: 10pt;">1/(a*x**b + 1)</td>
<td style="font-size: 10pt;">x*gamma(1/b)*lerchphi(a*x**b*exp_polar(I*pi), 1, 1/b)/(b**2*gamma(1 + 1/b))</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">integrate(1/(x^b*a + 1), x)</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">Sympy solves with special functions an integral that Sage cannot solve.</td>
</tr>
<tr>
<td style="font-size: 10pt;">a*x**2/(b*x**2 + 1)</td>
<td style="font-size: 10pt;">a*(sqrt(-1/b**3)*log(-b*sqrt(-1/b**3) + x)/2 – sqrt(-1/b**3)*log(b*sqrt(-1/b**3) + x)/2 + x/b)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">(x/b – arctan(sqrt(b)*x)/b^(3/2))*a</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">a*x**3/(b*x**3 + 1)</td>
<td style="font-size: 10pt;">a*(RootSum(_t**3 + 1/(27*b**4), Lambda(_t, _t*log(-3*_t*b + x))) + x/b)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">-1/6*(2*sqrt(3)*arctan(1/3*(2*b^(2/3)*x – b^(1/3))*sqrt(3)/b^(1/3))/b^(4/3) – 6*x/b – log(b^(2/3)*x^2 – b^(1/3)*x + 1)/b^(4/3) + 2*log((b^(1/3)*x + 1)/b^(1/3))/b^(4/3))*a</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Interesting examples deserving more study as Sympy uses the sum of the roots of a high order polynomial while Sage uses elementary special functions.</td>
</tr>
<tr>
<td style="font-size: 10pt;">a*x**n/(b*x**m + 1)</td>
<td style="font-size: 10pt;">a*(n*x*x**n*gamma(n/m + 1/m)*lerchphi(b*x**m*exp_polar(I*pi), 1, n/m + 1/m)/(m**2*gamma(1 + n/m + 1/m)) + x*x**n*gamma(n/m + 1/m)*lerchphi(b*x**m*exp_polar(I*pi), 1, n/m + 1/m)/(m**2*gamma(1 + n/m + 1/m)))</td>
<td style="font-size: 10pt;">3</td>
<td style="font-size: 10pt;">(m*integrate(x^n/((m – n – 1)*b^2*x^(2*m) + 2*(m – n – 1)*x^m*b + m – n – 1), x) – x^(n + 1)/((m – n – 1)*x^m*b + m – n – 1))*a</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sympy solves with special functions an integral that Sage cannot solve.</td>
</tr>
<tr>
<td style="font-size: 10pt;">(a*x**2 + 1)/(b*x**2 + 1)</td>
<td style="font-size: 10pt;">a*x/b + sqrt((-a**2 + 2*a*b – b**2)/b**3)*log(-b*sqrt((-a**2 + 2*a*b – b**2)/b**3)/(a – b) + x)/2 – sqrt((-a**2 + 2*a*b – b**2)/b**3)*log(b*sqrt((-a**2 + 2*a*b – b**2)/b**3)/(a – b) + x)/2</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">a*x/b – (a – b)*arctan(sqrt(b)*x)/b^(3/2)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage symplifies better (log-to-trig formulas).</td>
</tr>
<tr>
<td style="font-size: 10pt;">(a*x**3 + 1)/(b*x**3 + 1)</td>
<td style="font-size: 10pt;">a*x/b + RootSum(_t**3 + (a**3 – 3*a**2*b + 3*a*b**2 – b**3)/(27*b**4), Lambda(_t, _t*log(-3*_t*b/(a – b) + x)))</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">a*x/b – 1/3*(a*b – b^2)*sqrt(3)*arctan(1/3*(2*b^(2/3)*x – b^(1/3))*sqrt(3)/b^(1/3))/b^(7/3) + 1/6*(a*b^(2/3) – b^(5/3))*log(b^(2/3)*x^2 – b^(1/3)*x + 1)/b^2 – 1/3*(a*b^(2/3) – b^(5/3))*log((b^(1/3)*x + 1)/b^(1/3))/b^2</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Interesting examples deserving more study as Sympy uses the sum of the roots of a high order polynomial while Sage uses elementary special functions.</td>
</tr>
<tr>
<td style="font-size: 10pt;">(a*x**n + 1)/(b*x**m + 1)</td>
<td style="font-size: 10pt;">a*(n*x*x**n*gamma(n/m + 1/m)*lerchphi(b*x**m*exp_polar(I*pi), 1, n/m + 1/m)/(m**2*gamma(1 + n/m + 1/m)) + x*x**n*gamma(n/m + 1/m)*lerchphi(b*x**m*exp_polar(I*pi), 1, n/m + 1/m)/(m**2*gamma(1 + n/m + 1/m))) + x*gamma(1/m)*lerchphi(b*x**m*exp_polar(I*pi), 1, 1/m)/(m**2*gamma(1 + 1/m))</td>
<td style="font-size: 10pt;">5</td>
<td style="font-size: 10pt;">a*m*integrate(x^n/((m – n – 1)*b^2*x^(2*m) + 2*(m – n – 1)*x^m*b + m – n – 1), x) – a*x^(n + 1)/((m – n – 1)*x^m*b + m – n – 1) + integrate(1/(x^m*b + 1), x)</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">Sympy solves with special functions an integral that Sage cannot solve.</td>
</tr>
<tr>
<td style="font-size: 10pt;">(a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)</td>
<td style="font-size: 10pt;">a*x/b + RootSum(_t**5 + _t**3*(500*a**2*b**3 + 27*a**2 – 1000*a*b**4 – 54*a*b + 500*b**5 + 27*b**2)/(3125*b**6 + 108*b**3) + _t**2*(27*a**3 – 81*a**2*b + 81*a*b**2 – 27*b**3)/(3125*b**6 + 108*b**3) + _t*(9*a**4 – 36*a**3*b + 54*a**2*b**2 – 36*a*b**3 + 9*b**4)/(3125*b**6 + 108*b**3) + (a**5 – 5*a**4*b + 10*a**3*b**2 – 10*a**2*b**3 + 5*a*b**4 – b**5)/(3125*b**6 + 108*b**3), Lambda(_t, _t*log(x + (3662109375*_t**4*b**12 + 3986718750*_t**4*b**9 + 242757000*_t**4*b**6 + 3779136*_t**4*b**3 – 1054687500*_t**3*a*b**9 – 72900000*_t**3*a*b**6 – 1259712*_t**3*a*b**3 + 1054687500*_t**3*b**10 + 72900000*_t**3*b**7 + 1259712*_t**3*b**4 + 410156250*_t**2*a**2*b**9 + 655340625*_t**2*a**2*b**6 + 51267654*_t**2*a**2*b**3 + 944784*_t**2*a**2 – 820312500*_t**2*a*b**10 – 1310681250*_t**2*a*b**7 – 102535308*_t**2*a*b**4 – 1889568*_t**2*a*b + 410156250*_t**2*b**11 + 655340625*_t**2*b**8 + 51267654*_t**2*b**5 + 944784*_t**2*b**2 – 48828125*_t*a**3*b**9 – 186046875*_t*a**3*b**6 + 16774290*_t*a**3*b**3 + 629856*_t*a**3 + 146484375*_t*a**2*b**10 + 558140625*_t*a**2*b**7 – 50322870*_t*a**2*b**4 – 1889568*_t*a**2*b – 146484375*_t*a*b**11 – 558140625*_t*a*b**8 + 50322870*_t*a*b**5 + 1889568*_t*a*b**2 + 48828125*_t*b**12 + 186046875*_t*b**9 – 16774290*_t*b**6 – 629856*_t*b**3 – 2812500*a**4*b**6 + 3596400*a**4*b**3 + 104976*a**4 + 11250000*a**3*b**7 – 14385600*a**3*b**4 – 419904*a**3*b – 16875000*a**2*b**8 + 21578400*a**2*b**5 + 629856*a**2*b**2 + 11250000*a*b**9 – 14385600*a*b**6 – 419904*a*b**3 – 2812500*b**10 + 3596400*b**7 + 104976*b**4)/(9765625*a**4*b**8 + 26493750*a**4*b**5 + 746496*a**4*b**2 – 39062500*a**3*b**9 – 105975000*a**3*b**6 – 2985984*a**3*b**3 + 58593750*a**2*b**10 + 158962500*a**2*b**7 + 4478976*a**2*b**4 – 39062500*a*b**11 – 105975000*a*b**8 – 2985984*a*b**5 + 9765625*b**12 + 26493750*b**9 + 746496*b**6))))</td>
<td style="font-size: 10pt;">106</td>
<td style="font-size: 10pt;">-(a – b)*integrate((x^3 + 1)/(b*x^5 + x^3 + 1), x)/b + a*x/b</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sympy solves with special functions an integral that Sage cannot solve.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt(1/x)</td>
<td style="font-size: 10pt;">2*x*sqrt(1/x)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">2*x*sqrt(1/x)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt(1/(x + 1))</td>
<td style="font-size: 10pt;">2*x*sqrt(1/(x + 1)) + 2*sqrt(1/(x + 1))</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">2/sqrt(1/(x + 1))</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt(1/(x**2 + 1))</td>
<td style="font-size: 10pt;">Integral(sqrt(1/(x**2 + 1)), x)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">arcsinh(x)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sympy cannot solve this simple integral while Sage can.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt(1/(x**3 + 1))</td>
<td style="font-size: 10pt;">Integral(sqrt(1/(x**3 + 1)), x)</td>
<td style="font-size: 10pt;">3</td>
<td style="font-size: 10pt;">integrate(sqrt(1/(x^3 + 1)), x)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt(x**(-n)/a)</td>
<td style="font-size: 10pt;">-2*x*sqrt(1/a)*sqrt(x**(-n))/(n – 2)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">-2*x*sqrt(x^(-n)/a)/(n-2)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage asks whether the denominator is zero before solving.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt(1/(a*x**n + 1))</td>
<td style="font-size: 10pt;">Integral(sqrt(1/(a*x**n + 1)), x)</td>
<td style="font-size: 10pt;">29</td>
<td style="font-size: 10pt;">integrate(sqrt(1/(x^n*a + 1)), x)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt(1/(a*x**b + 1))</td>
<td style="font-size: 10pt;">Integral(sqrt(1/(a*x**b + 1)), x)</td>
<td style="font-size: 10pt;">35</td>
<td style="font-size: 10pt;">integrate(sqrt(1/(x^b*a + 1)), x)</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt(a*x**2/(b*x**2 + 1))</td>
<td style="font-size: 10pt;">sqrt(a)*x*sqrt(x**2)*sqrt(1/(b*x**2 + 1)) + sqrt(a)*sqrt(x**2)*sqrt(1/(b*x**2 + 1))/(b*x)</td>
<td style="font-size: 10pt;">2</td>
<td style="font-size: 10pt;">(sqrt(a)*b*x^2 + sqrt(a))/(sqrt(b*x^2 + 1)*b)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt(a*x**3/(b*x**3 + 1))</td>
<td style="font-size: 10pt;">Integral(sqrt(a*x**3/(b*x**3 + 1)), x)</td>
<td style="font-size: 10pt;">7</td>
<td style="font-size: 10pt;">integrate(sqrt(a*x^3/(b*x^3 + 1)), x)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt(a*x**n/(b*x**m + 1))</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">115</td>
<td style="font-size: 10pt;">integrate(sqrt(x^n*a/(x^m*b + 1)), x)</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt((a*x**2 + 1)/(b*x**2 + 1))</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">110</td>
<td style="font-size: 10pt;">integrate(sqrt((a*x^2 + 1)/(b*x^2 + 1)), x)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt((a*x**3 + 1)/(b*x**3 + 1))</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">109</td>
<td style="font-size: 10pt;">integrate(sqrt((a*x^3 + 1)/(b*x^3 + 1)), x)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt((a*x**n + 1)/(b*x**m + 1))</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">114</td>
<td style="font-size: 10pt;">integrate(sqrt((x^n*a + 1)/(x^m*b + 1)), x)</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sqrt((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1))</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">104</td>
<td style="font-size: 10pt;">integrate(sqrt((a*x^5 + x^3 + 1)/(b*x^5 + x^3 + 1)), x)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">log(x)</td>
<td style="font-size: 10pt;">x*log(x) – x</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">x*log(x) – x</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">log(1/x)</td>
<td style="font-size: 10pt;">-x*log(x) + x</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">-x*log(x) + x</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">log(1/(x + 1))</td>
<td style="font-size: 10pt;">-x*log(x + 1) + x – log(x + 1)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">-(x + 1)*log(x + 1) + x + 1</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">log(1/(x**2 + 1))</td>
<td style="font-size: 10pt;">-x*log(x**2 + 1) + 2*x – 2*I*log(x + I) + I*log(x**2 + 1)</td>
<td style="font-size: 10pt;">2</td>
<td style="font-size: 10pt;">-x*log(x^2 + 1) + 2*x – 2*arctan(x)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">log(1/(x**3 + 1))</td>
<td style="font-size: 10pt;">-x*log(x**3 + 1) + 3*x – 3*log(x + 1)/2 + sqrt(3)*I*log(x + 1)/2 + log(x**3 + 1)/2 – sqrt(3)*I*log(x**3 + 1)/2 + sqrt(3)*I*log(x – 1/2 – sqrt(3)*I/2)</td>
<td style="font-size: 10pt;">6</td>
<td style="font-size: 10pt;">-x*log(x^3 + 1) – sqrt(3)*arctan(1/3*(2*x – 1)*sqrt(3)) + 3*x – log(x + 1) + 1/2*log(x^2 – x + 1)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">log(x**(-n)/a)</td>
<td style="font-size: 10pt;">-n*x*log(x) + n*x – x*log(a)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">n*x + x*log(x^(-n)/a)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">log(1/(a*x**n + 1))</td>
<td style="font-size: 10pt;">Integral(log(1/(a*x**n + 1)), x)</td>
<td style="font-size: 10pt;">68</td>
<td style="font-size: 10pt;">n*x – n*integrate(1/(a*e^(n*log(x)) + 1), x) – x*log(x^n*a + 1)</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">log(1/(a*x**b + 1))</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">91</td>
<td style="font-size: 10pt;">b*x – b*integrate(1/(a*e^(b*log(x)) + 1), x) – x*log(a*e^(b*log(x)) + 1)</td>
<td style="font-size: 10pt;">2</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">log(a*x**2/(b*x**2 + 1))</td>
<td style="font-size: 10pt;">x*log(a) + 2*x*log(x) – x*log(b*x**2 + 1) + 2*I*log(x – I*sqrt(1/b))/(b*sqrt(1/b)) – I*log(b*x**2 + 1)/(b*sqrt(1/b))</td>
<td style="font-size: 10pt;">10</td>
<td style="font-size: 10pt;">x*log(a*x^2/(b*x^2 + 1)) – 2*arctan(sqrt(b)*x)/sqrt(b)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">log(a*x**3/(b*x**3 + 1))</td>
<td style="font-size: 10pt;">-216*b**4*x**6*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 216*(-1)**(2/3)*b**4*x**6*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 72*(-1)**(1/6)*sqrt(3)*b**4*x**6*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 72*sqrt(3)*I*b**4*x**6*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 588*b**2*x**5*(1/b)**(2/3)*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 1764*b**2*x**5*(1/b)**(2/3)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 588*b**2*x**5*(1/b)**(2/3)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 630*b**2*x**5*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 420*(-1)**(5/6)*sqrt(3)*b**2*x**5*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 210*sqrt(3)*I*b**2*x**5*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 981*b**2*x**3*(1/b)**(4/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 981*(-1)**(2/3)*b**2*x**3*(1/b)**(4/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 327*(-1)**(1/6)*sqrt(3)*b**2*x**3*(1/b)**(4/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 327*sqrt(3)*I*b**2*x**3*(1/b)**(4/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 135*b**2*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 135*(-1)**(2/3)*b**2*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 45*(-1)**(1/6)*sqrt(3)*b**2*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 45*sqrt(3)*I*b**2*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 147*(-1)**(2/3)*b*x**4*log(a)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 49*(-1)**(1/6)*sqrt(3)*b*x**4*log(a)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 49*(-1)**(5/6)*sqrt(3)*b*x**4*log(a)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 147*(-1)**(1/3)*b*x**4*log(a)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 882*(-1)**(2/3)*b*x**4*log(a)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(1/6)*sqrt(3)*b*x**4*log(a)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(5/6)*sqrt(3)*b*x**4*log(a)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(1/3)*b*x**4*log(a)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(1/3)*b*x**4*log(a)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 98*(-1)**(5/6)*sqrt(3)*b*x**4*log(a)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 98*(-1)**(1/6)*sqrt(3)*b*x**4*log(a)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(2/3)*b*x**4*log(a)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 588*(-1)**(2/3)*b*x**4*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 1323*(-1)**(2/3)*b*x**4*log(x)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 441*(-1)**(1/6)*sqrt(3)*b*x**4*log(x)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 441*(-1)**(5/6)*sqrt(3)*b*x**4*log(x)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 1323*(-1)**(1/3)*b*x**4*log(x)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 882*(-1)**(1/3)*b*x**4*log(x)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(5/6)*sqrt(3)*b*x**4*log(x)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(1/6)*sqrt(3)*b*x**4*log(x)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(2/3)*b*x**4*log(x)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 882*(-1)**(1/3)*b*x**4*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(5/6)*sqrt(3)*b*x**4*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(1/6)*sqrt(3)*b*x**4*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(2/3)*b*x**4*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(5/6)*sqrt(3)*b*x**4*log(x – (-1)**(1/3)*(1/b)**(1/3))/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(1/3)*b*x**4*log(x – (-1)**(1/3)*(1/b)**(1/3))/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 147*(-1)**(2/3)*b*x**4*log(b*x**3 + 1)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 49*(-1)**(1/6)*sqrt(3)*b*x**4*log(b*x**3 + 1)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 49*(-1)**(5/6)*sqrt(3)*b*x**4*log(b*x**3 + 1)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 147*(-1)**(1/3)*b*x**4*log(b*x**3 + 1)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 588*(-1)**(2/3)*b*x**4*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(1/6)*sqrt(3)*b*x**4*log(x – (-1)**(1/3)*sqrt(3)*I*(1/b)**(1/3)/2 + (-1)**(1/3)*(1/b)**(1/3)/2)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(2/3)*b*x**4*log(x – (-1)**(1/3)*sqrt(3)*I*(1/b)**(1/3)/2 + (-1)**(1/3)*(1/b)**(1/3)/2)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(2/3)*b*x**4/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 98*(-1)**(1/6)*sqrt(3)*b*x**4/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 98*(-1)**(5/6)*sqrt(3)*b*x**4/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(1/3)*b*x**4/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 588*b*x**2*(1/b)**(2/3)*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 1764*b*x**2*(1/b)**(2/3)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 588*b*x**2*(1/b)**(2/3)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 945*b*x**2*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 630*(-1)**(5/6)*sqrt(3)*b*x**2*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 315*sqrt(3)*I*b*x**2*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 98*(-1)**(1/6)*sqrt(3)*x*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 98*(-1)**(5/6)*sqrt(3)*x*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(2/3)*x*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(1/3)*x*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(5/6)*sqrt(3)*x*log(x – (-1)**(1/3)*(1/b)**(1/3))/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(1/3)*x*log(x – (-1)**(1/3)*(1/b)**(1/3))/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(1/3)*x*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(2/3)*x*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 98*(-1)**(5/6)*sqrt(3)*x*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 98*(-1)**(1/6)*sqrt(3)*x*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(1/6)*sqrt(3)*x*log(x – (-1)**(1/3)*sqrt(3)*I*(1/b)**(1/3)/2 + (-1)**(1/3)*(1/b)**(1/3)/2)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(2/3)*x*log(x – (-1)**(1/3)*sqrt(3)*I*(1/b)**(1/3)/2 + (-1)**(1/3)*(1/b)**(1/3)/2)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3))</td>
<td style="font-size: 10pt;">26</td>
<td style="font-size: 10pt;">x*log(a*x^3/(b*x^3 + 1)) – 1/2*(2*sqrt(3)*a*arctan(1/3*(2*b^(2/3)*x – b^(1/3))*sqrt(3)/b^(1/3))/b^(1/3) – a*log(b^(2/3)*x^2 – b^(1/3)*x + 1)/b^(1/3) + 2*a*log((b^(1/3)*x + 1)/b^(1/3))/b^(1/3))/a</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage simplifies better.</td>
</tr>
<tr>
<td style="font-size: 10pt;">log(a*x**n/(b*x**m + 1))</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">96</td>
<td style="font-size: 10pt;">(m – n + log(a))*x – m*integrate(1/(b*e^(m*log(x)) + 1), x) – x*log(x^m*b + 1) + x*log(x^n)</td>
<td style="font-size: 10pt;">2</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">log((a*x**2 + 1)/(b*x**2 + 1))</td>
<td style="font-size: 10pt;">Integral(log((a*x**2 + 1)/(b*x**2 + 1)), x)</td>
<td style="font-size: 10pt;">72</td>
<td style="font-size: 10pt;">x*log((a*x^2 + 1)/(b*x^2 + 1)) + 2*arctan(sqrt(a)*x)/sqrt(a) – 2*arctan(sqrt(b)*x)/sqrt(b)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage asks whether `a` and `b` are positive and then returns an answer. Sympy fails irrespective of the assumptions.</td>
</tr>
<tr>
<td style="font-size: 10pt;">log((a*x**3 + 1)/(b*x**3 + 1))</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">89</td>
<td style="font-size: 10pt;">x*log((a*x^3 + 1)/(b*x^3 + 1)) + sqrt(3)*arctan(1/3*(2*a^(2/3)*x – a^(1/3))*sqrt(3)/a^(1/3))/a^(1/3) – sqrt(3)*arctan(1/3*(2*b^(2/3)*x – b^(1/3))*sqrt(3)/b^(1/3))/b^(1/3) – 1/2*log(a^(2/3)*x^2 – a^(1/3)*x + 1)/a^(1/3) + log((a^(1/3)*x + 1)/a^(1/3))/a^(1/3) + 1/2*log(b^(2/3)*x^2 – b^(1/3)*x + 1)/b^(1/3) – log((b^(1/3)*x + 1)/b^(1/3))/b^(1/3)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage asks whether `a` and `b` are positive and then returns an answer. Sympy fails irrespective of the assumptions.</td>
</tr>
<tr>
<td style="font-size: 10pt;">log((a*x**n + 1)/(b*x**m + 1))</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">89</td>
<td style="font-size: 10pt;">(m – n)*x – m*integrate(1/(b*e^(m*log(x)) + 1), x) + n*integrate(1/(x^n*a + 1), x) – x*log(x^m*b + 1) + x*log(x^n*a + 1)</td>
<td style="font-size: 10pt;">4</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">log((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1))</td>
<td style="font-size: 10pt;">Integral(log((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)), x)</td>
<td style="font-size: 10pt;">42</td>
<td style="font-size: 10pt;">-x*log(b*x^5 + x^3 + 1) + x*log(a*x^5 + x^3 + 1) – integrate((2*x^3 + 5)/(b*x^5 + x^3 + 1), x) + integrate((2*x^3 + 5)/(a*x^5 + x^3 + 1), x)</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">When both Sage and Sympy fail, Sage is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sin(x)</td>
<td style="font-size: 10pt;">-cos(x)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">-cos(x)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">sin(x)**n*cos(x)**m</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">102</td>
<td style="font-size: 10pt;">No result</td>
<td style="font-size: 10pt;">110</td>
<td style="font-size: 10pt;">Disgraceful failure by Sage.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sin(a*x)**n*cos(b*x)**m</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">81</td>
<td style="font-size: 10pt;">No result</td>
<td style="font-size: 10pt;">112</td>
<td style="font-size: 10pt;">Disgraceful failure by Sage.</td>
</tr>
<tr>
<td style="font-size: 10pt;">1/sin(x)</td>
<td style="font-size: 10pt;">log(cos(x) – 1)/2 – log(cos(x) + 1)/2</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">1/2*log(cos(x) – 1) – 1/2*log(cos(x) + 1)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">1/(sin(x) + 1)</td>
<td style="font-size: 10pt;">-2/(tan(x/2) + 1)</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">-2/(sin(x)/(cos(x) + 1) + 1)</td>
<td style="font-size: 10pt;">0</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">1/(sin(x)**2 + 1)</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">96</td>
<td style="font-size: 10pt;">1/2*sqrt(2)*arctan(sqrt(2)*tan(x))</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage simply beats Sympy.</td>
</tr>
<tr>
<td style="font-size: 10pt;">1/(sin(x)**3 + 1)</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">87</td>
<td style="font-size: 10pt;">Maxima: `quotient’ by `zero’</td>
<td style="font-size: 10pt;">78</td>
<td style="font-size: 10pt;">Disgraceful failure by Sage.</td>
</tr>
<tr>
<td style="font-size: 10pt;">sin(x)**(-n)/a</td>
<td style="font-size: 10pt;">Integral(sin(x)**(-n)/a, x)</td>
<td style="font-size: 10pt;">36</td>
<td style="font-size: 10pt;">No result</td>
<td style="font-size: 10pt;">227</td>
<td style="font-size: 10pt;">Disgraceful failure by Sage.</td>
</tr>
<tr>
<td style="font-size: 10pt;">1/(a*sin(x)**n + 1)</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">98</td>
<td style="font-size: 10pt;">Maxima: expt: undefined: 0 to a negative exponent.</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">Disgraceful failure by Sage.</td>
</tr>
<tr>
<td style="font-size: 10pt;">1/(a*sin(x)**b + 1)</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">83</td>
<td style="font-size: 10pt;">No result</td>
<td style="font-size: 10pt;">140</td>
<td style="font-size: 10pt;">Disgraceful failure by Sage.</td>
</tr>
<tr>
<td style="font-size: 10pt;">a*sin(x)**2/(b*sin(x)**2 + 1)</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">93</td>
<td style="font-size: 10pt;">(x/b – arctan(sqrt(b + 1)*tan(x))/(sqrt(b + 1)*b))*a</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage simply beats Sympy.</td>
</tr>
<tr>
<td style="font-size: 10pt;">a*sin(x)**3/(b*sin(x)**3 + 1)</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">82</td>
<td style="font-size: 10pt;">No result</td>
<td style="font-size: 10pt;">568</td>
<td style="font-size: 10pt;">Disgraceful failure by Sage.</td>
</tr>
<tr>
<td style="font-size: 10pt;">a*sin(x)**n/(b*sin(x)**m + 1)</td>
<td style="font-size: 10pt;">Integral(a*sin(x)**n/(b*sin(x)**m + 1), x)</td>
<td style="font-size: 10pt;">24</td>
<td style="font-size: 10pt;">Manual Interupt</td>
<td style="font-size: 10pt;">1527</td>
<td style="font-size: 10pt;">Both Sage and Sympy fail, however Sympy is quicker.</td>
</tr>
<tr>
<td style="font-size: 10pt;">(a*sin(x)**2 + 1)/(b*sin(x)**2 + 1)</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">98</td>
<td style="font-size: 10pt;">a*x/b – (a – b)*arctan(sqrt(b + 1)*tan(x))/(sqrt(b + 1)*b)</td>
<td style="font-size: 10pt;">0</td>
<td style="font-size: 10pt;">Sage simply beats Sympy.</td>
</tr>
<tr>
<td style="font-size: 10pt;">(a*sin(x)**3 + 1)/(b*sin(x)**3 + 1)</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">96</td>
<td style="font-size: 10pt;">Manual Interupt</td>
<td style="font-size: 10pt;">203</td>
<td style=""/>
</tr>
<tr>
<td style="font-size: 10pt;">(a*sin(x)**n + 1)/(b*sin(x)**m + 1)</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">83</td>
<td style="font-size: 10pt;">Maxima: expt: undefined: 0 to a negative exponent.</td>
<td style="font-size: 10pt;">1</td>
<td style="font-size: 10pt;">Disgraceful failure by Sage.</td>
</tr>
<tr>
<td style="font-size: 10pt;">(a*sin(x)**5 + sin(x)**3 + 1)/(b*sin(x)**5 + sin(x)**3 + 1)</td>
<td style="font-size: 10pt;">Timeout</td>
<td style="font-size: 10pt;">89</td>
<td style="font-size: 10pt;">Manual Interupt</td>
<td style="font-size: 10pt;">142</td>
<td style=""/>
</tr>
</tbody>
</table>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=561&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-10-24T23:51:52Z</updated>
    <category term="SymPy"/>
    <category term="integrals"/>
    <category term="sage"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://blog.krastanov.org</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://blog.krastanov.org/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.krastanov.org" rel="alternate" type="text/html"/>
      <link href="http://blog.krastanov.org/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://blog.krastanov.org/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2013-01-16T22:00:46Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:fseoane.net/blog,2012-10-23:2012/learning-to-rank-with-scikit-learn-the-pairwise-transform/</id>
    <link href="http://fseoane.net/blog/2012/learning-to-rank-with-scikit-learn-the-pairwise-transform/" rel="alternate" type="text/html"/>
    <title>Learning to rank with scikit-learn: the pairwise transform</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This tutorial introduces the concept of pairwise preference used in most <a href="http://en.wikipedia.org/wiki/Learning_to_rank">ranking problems</a>. I'll use scikit-learn and for learning and matplotlib for visualization.</p>
<p>In the ranking setting, training data consists of lists of items with some order specified between items in each list. This order is typically induced by giving a numerical or ordinal score or a binary judgment (e.g. "relevant" or "not relevant") for each item, so that for any two samples <code>a</code> and <code>b</code>, either <code>a &lt; b</code>, <code>b &gt; a</code> or <code>b</code> and <code>a</code> are not comparable.</p>
<p>For example, in the case of a search engine, our dataset consists of results that belong to different queries and we would like to only compare the relevance for results coming from the same query.</p>
<p>This order relation is usually domain-specific. For instance, in information retrieval the set of comparable samples is referred to as a "query id". The goal behind this is to compare only documents that belong to the same query (<a href="http://dx.doi.org/10.1145/775047.775067">Joachims 2002</a>). In medical imaging on the other hand, the order of the labels usually depend on the subject so the comparable samples is given by the different subjects in the study (<a href="http://hal.inria.fr/hal-00717990/en">Pedregosa et al 2012</a>).</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">itertools</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">stats</span>
<span class="kn">import</span> <span class="nn">pylab</span> <span class="kn">as</span> <span class="nn">pl</span>
<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">svm</span><span class="p">,</span> <span class="n">linear_model</span><span class="p">,</span> <span class="n">cross_validation</span>
</pre></div>

<p>To start with, we'll create a dataset in which the target values consists of three graded measurements Y = {0, 1, 2} and the input data is a collection of 30 samples, each one with two features.</p>
<p>The set of comparable elements (queries in information retrieval) will consist of two equally sized blocks, $X = X_1 \cup X_2$, where each block is generated using a normal distribution with different mean and covariance. In the pictures, we represent $X_1$ with round markers and $X_2$ with triangular markers.</p>
<div class="highlight"><pre><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">theta</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">deg2rad</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
<span class="n">w</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">theta</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">theta</span><span class="p">)])</span>
<span class="n">K</span> <span class="o">=</span> <span class="mi">20</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">K</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">K</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">):</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">X</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">K</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">w</span><span class="p">))</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">y</span><span class="p">,</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">K</span><span class="p">))</span>

<span class="c"># slightly displace data corresponding to our second partition</span>
<span class="n">X</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span> <span class="o">-=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span> 
<span class="n">blocks</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>

<span class="c"># split into train and test set</span>
<span class="n">cv</span> <span class="o">=</span> <span class="n">cross_validation</span><span class="o">.</span><span class="n">StratifiedShuffleSplit</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=.</span><span class="mi">5</span><span class="p">)</span>
<span class="n">train</span><span class="p">,</span> <span class="n">test</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">cv</span><span class="p">)</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
<span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">b_train</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">train</span><span class="p">],</span> <span class="n">y</span><span class="p">[</span><span class="n">train</span><span class="p">],</span> <span class="n">blocks</span><span class="p">[</span><span class="n">train</span><span class="p">]</span>
<span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">b_test</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">test</span><span class="p">],</span> <span class="n">y</span><span class="p">[</span><span class="n">test</span><span class="p">],</span> <span class="n">blocks</span><span class="p">[</span><span class="n">test</span><span class="p">]</span>

<span class="c"># plot the result</span>
<span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">b_train</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">X_train</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">y_train</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> 
    <span class="n">marker</span><span class="o">=</span><span class="s">'^'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">pl</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">Blues</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="o">~</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">X_train</span><span class="p">[</span><span class="o">~</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">y_train</span><span class="p">[</span><span class="o">~</span><span class="n">idx</span><span class="p">],</span>
    <span class="n">marker</span><span class="o">=</span><span class="s">'o'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">pl</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">Blues</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">arrow</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fc</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span> <span class="n">ec</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span> 
    <span class="n">head_width</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">head_length</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'$w$'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">arrow</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fc</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span> <span class="n">ec</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span> 
    <span class="n">head_width</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">head_length</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="o">-</span><span class="mf">2.6</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="s">'$w$'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'equal'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

<p><img alt="" src="http://fseoane.net/blog/static/uploads/2012/pairwise_transform_files/pairwise_transform_fig_00.png"/></p>
<p>In the plot we clearly see that for both blocks there's a common vector w such that the projection onto w gives a list with the correct ordering.</p>
<p>However, because linear considers that output labels live in a metric space it will consider that all pairs are comparable. Thus if we fit this model to the problem above it will fit both blocks at the same time, yielding a result that is clearly not optimal. In the following plot we estimate $\hat{w}$ using an l2-regularized linear model.</p>
<div class="highlight"><pre><span class="n">ridge</span> <span class="o">=</span> <span class="n">linear_model</span><span class="o">.</span><span class="n">Ridge</span><span class="p">(</span><span class="mf">1.</span><span class="p">)</span>
<span class="n">ridge</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">coef</span> <span class="o">=</span> <span class="n">ridge</span><span class="o">.</span><span class="n">coef_</span> <span class="o">/</span> <span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">ridge</span><span class="o">.</span><span class="n">coef_</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">X_train</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">y_train</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> 
    <span class="n">marker</span><span class="o">=</span><span class="s">'^'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">pl</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">Blues</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="o">~</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">X_train</span><span class="p">[</span><span class="o">~</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">y_train</span><span class="p">[</span><span class="o">~</span><span class="n">idx</span><span class="p">],</span>
    <span class="n">marker</span><span class="o">=</span><span class="s">'o'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">pl</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">Blues</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">arrow</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span> <span class="o">*</span> <span class="n">coef</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">7</span> <span class="o">*</span> <span class="n">coef</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fc</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span> <span class="n">ec</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span> 
    <span class="n">head_width</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">head_length</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">'$\hat{w}$'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'equal'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Estimation by Ridge regression'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

<p><img alt="" src="http://fseoane.net/blog/static/uploads/2012/pairwise_transform_files/pairwise_transform_fig_01.png"/></p>
<p>To assess the quality of our model we need to define a ranking score. Since we are interesting in a model that <em>orders</em> the data, it is natural to look for a metric that compares the ordering of our model to the given ordering. For this, we use <a href="http://en.wikipedia.org/wiki/Kendall_tau_rank_correlation_coefficient">Kendall's tau correlation coefficient</a>, which is defined as (P - Q)/(P + Q), being P the number of concordant pairs and Q is the number of discordant pairs. This measure is used extensively in the ranking literature (e.g <a href="http://www.cs.cornell.edu/people/tj/publications/joachims_02c.pdf">Optimizing Search Engines using Clickthrough Data</a>).</p>
<p>We thus evaluate this metric on the test set for each block separately.</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">tau</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">kendalltau</span><span class="p">(</span>
        <span class="n">ridge</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="n">b_test</span> <span class="o">==</span> <span class="n">i</span><span class="p">]),</span> <span class="n">y_test</span><span class="p">[</span><span class="n">b_test</span> <span class="o">==</span> <span class="n">i</span><span class="p">])</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Kendall correlation coefficient for block </span><span class="si">%s</span><span class="s">: </span><span class="si">%.5f</span><span class="s">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">tau</span><span class="p">))</span>
</pre></div>

<div class="codehilite"><pre><span class="n">Kendall</span> <span class="n">correlation</span> <span class="n">coefficient</span> <span class="k">for</span> <span class="n">block</span> <span class="mi">0</span><span class="p">:</span> <span class="mf">0.71122</span>
<span class="n">Kendall</span> <span class="n">correlation</span> <span class="n">coefficient</span> <span class="k">for</span> <span class="n">block</span> <span class="mi">1</span><span class="p">:</span> <span class="mf">0.84387</span>
</pre></div>


<h2>The pairwise transform</h2>
<p>As proved in (<a href="http://www.mendeley.com/research/support-vector-learning-ordinal-regression/">Herbrich 1999</a>), if we consider linear ranking functions, the ranking problem can be transformed into a two-class classification problem. For this, we form the difference of all comparable elements such that our data is transformed into $(x'_k, y'_k) = (x_i - x_j, sign(y_i - y_j))$ for all comparable pairs.</p>
<p>This way we transformed our ranking problem into a two-class classification problem. The following plot shows this transformed dataset, and color reflects the difference in labels, and our task is to separate positive samples from negative ones. The hyperplane {x^T w = 0} separates these two classes.</p>
<div class="highlight"><pre><span class="c"># form all pairwise combinations</span>
<span class="n">comb</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">combinations</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">k</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">Xp</span><span class="p">,</span> <span class="n">yp</span><span class="p">,</span> <span class="n">diff</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="ow">in</span> <span class="n">comb</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">y_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">y_train</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> \
        <span class="ow">or</span> <span class="n">blocks</span><span class="p">[</span><span class="n">train</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">train</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
        <span class="c"># skip if same target or different group</span>
        <span class="k">continue</span>
    <span class="n">Xp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">X_train</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
    <span class="n">diff</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">y_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">y_train</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
    <span class="n">yp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sign</span><span class="p">(</span><span class="n">diff</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
    <span class="c"># output balanced classes</span>
    <span class="k">if</span> <span class="n">yp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">**</span> <span class="n">k</span><span class="p">:</span>
        <span class="n">yp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">Xp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">diff</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">k</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">Xp</span><span class="p">,</span> <span class="n">yp</span><span class="p">,</span> <span class="n">diff</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">asanyarray</span><span class="p">,</span> <span class="p">(</span><span class="n">Xp</span><span class="p">,</span> <span class="n">yp</span><span class="p">,</span> <span class="n">diff</span><span class="p">))</span>
<span class="n">pl</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">Xp</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">Xp</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">diff</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'o'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">pl</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">Blues</span><span class="p">)</span>
<span class="n">x_space</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x_space</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">-</span> <span class="n">x_space</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="s">'gray'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="s">'$\{x^T w = 0\}$'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">17</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'equal'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

<p><img alt="" src="http://fseoane.net/blog/static/uploads/2012/pairwise_transform_files/pairwise_transform_fig_02.png"/></p>
<p>As we see in the previous plot, this classification is separable. This will not always be the case, however, in our training set  there are no order inversions, thus the respective classification problem is separable.</p>
<p>We will now finally train an Support Vector Machine model on the transformed data. This model is known as RankSVM. We will then plot the training data together with the estimated coefficient $\hat{w}$ by RankSVM.</p>
<div class="highlight"><pre><span class="n">clf</span> <span class="o">=</span> <span class="n">svm</span><span class="o">.</span><span class="n">SVC</span><span class="p">(</span><span class="n">kernel</span><span class="o">=</span><span class="s">'linear'</span><span class="p">,</span> <span class="n">C</span><span class="o">=.</span><span class="mi">1</span><span class="p">)</span>
<span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">Xp</span><span class="p">,</span> <span class="n">yp</span><span class="p">)</span>
<span class="n">coef</span> <span class="o">=</span> <span class="n">clf</span><span class="o">.</span><span class="n">coef_</span><span class="o">.</span><span class="n">ravel</span><span class="p">()</span> <span class="o">/</span> <span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">clf</span><span class="o">.</span><span class="n">coef_</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">X_train</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">y_train</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span>
    <span class="n">marker</span><span class="o">=</span><span class="s">'^'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">pl</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">Blues</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="o">~</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">X_train</span><span class="p">[</span><span class="o">~</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">y_train</span><span class="p">[</span><span class="o">~</span><span class="n">idx</span><span class="p">],</span>
    <span class="n">marker</span><span class="o">=</span><span class="s">'o'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">pl</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">Blues</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">arrow</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span> <span class="o">*</span> <span class="n">coef</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">7</span> <span class="o">*</span> <span class="n">coef</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fc</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span> <span class="n">ec</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span>
    <span class="n">head_width</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">head_length</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">arrow</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="mi">7</span> <span class="o">*</span> <span class="n">coef</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">7</span> <span class="o">*</span> <span class="n">coef</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fc</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span> <span class="n">ec</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span>
    <span class="n">head_width</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">head_length</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">.</span><span class="mi">7</span><span class="p">,</span> <span class="s">'$\hat{w}$'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="o">-</span><span class="mf">2.6</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="s">'$\hat{w}$'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'equal'</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

<p><img alt="" src="http://fseoane.net/blog/static/uploads/2012/pairwise_transform_files/pairwise_transform_fig_03.png"/></p>
<p>Finally we will check that as expected, the ranking score (Kendall tau) increases with the RankSVM model respect to linear regression.</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">tau</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">kendalltau</span><span class="p">(</span>
        <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="n">b_test</span> <span class="o">==</span> <span class="n">i</span><span class="p">],</span> <span class="n">coef</span><span class="p">),</span> <span class="n">y_test</span><span class="p">[</span><span class="n">b_test</span> <span class="o">==</span> <span class="n">i</span><span class="p">])</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Kendall correlation coefficient for block </span><span class="si">%s</span><span class="s">: </span><span class="si">%.5f</span><span class="s">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">tau</span><span class="p">))</span>
</pre></div>

<div class="codehilite"><pre><span class="n">Kendall</span> <span class="n">correlation</span> <span class="n">coefficient</span> <span class="k">for</span> <span class="n">block</span> <span class="mi">0</span><span class="p">:</span> <span class="mf">0.83627</span>
<span class="n">Kendall</span> <span class="n">correlation</span> <span class="n">coefficient</span> <span class="k">for</span> <span class="n">block</span> <span class="mi">1</span><span class="p">:</span> <span class="mf">0.84387</span>
</pre></div>


<p>This is indeed higher than the values (0.71122, 0.84387) obtained in the case of linear regression.</p>
<p><strong>Original ipython notebook for this blog post can be found <a href="https://github.com/fabianp/minirank/blob/master/notebooks/pairwise_transform.ipynb">here</a></strong></p></div>
    </summary>
    <updated>2012-10-22T22:00:00Z</updated>
    <category term="python"/>
    <category term="scikit-learn"/>
    <category term="ranking"/>
    <author>
      <name>Fabian Pedregosa</name>
    </author>
    <source>
      <id>http://fseoane.net/blog/</id>
      <link href="http://fseoane.net/blog/" rel="alternate" type="text/html"/>
      <link href="http://fseoane.net/blog//feed/rss.xml" rel="self" type="application/atom+xml"/>
      <title>I say things</title>
      <updated>2013-01-09T15:20:21Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sympystats.wordpress.com/?p=273</id>
    <link href="http://sympystats.wordpress.com/2012/10/22/gsoc-mentor-summit/" rel="alternate" type="text/html"/>
    <title>GSoC Mentor Summit</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I’m in the airport waiting for my flight after finishing the Google Summer of Code Mentor Summit. This event took place this weekend. Two or three mentors from many of the GSoC projects came out to the Google campus to … <a href="http://sympystats.wordpress.com/2012/10/22/gsoc-mentor-summit/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=273&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’m in the airport waiting for my flight after finishing the Google Summer of Code Mentor Summit. This event took place this weekend. Two or three mentors from many of the GSoC projects came out to the Google campus to participate in an un-conference about GSoC. Google and SymPy were kind enough to send me and two others (Stefan Krastanov and Gilbert Gede) so I thought I’d slightly repay the favor by reporting my experiences. I’ll list some generated ideas and thoughts below. They range from the application process, to SymPy and scientific Python in general to some meta-thoughts about the conference itself.</p>
<h3>Application process</h3>
<p>How should we improve our application process to attract good students, detect good students, and match good students to appropriate mentors?</p>
<p>We should ask indirect questions to query for curiosity and passion.</p>
<p>Negative examples:</p>
<ul>
<li>Why do you want to work on SymPy?</li>
<li>Why do you like Math?</li>
<li>How long have you been programming?</li>
</ul>
<p>Positive examples:</p>
<ul>
<li>Copy the favorite snippet of SymPy code you’ve seen here and tell us why you like it.</li>
<li>What aspects of SymPy do you like the most?</li>
<li>What editor do you use and why?</li>
</ul>
<p>Experience was that direct questions tend to have low information content (everyone says the same thing). Indirect questions will be ignored by the lazy but engage the engaged. You often want to test for curiosity and passion more than actual experience in the domain.</p>
<p>We should match mathematically strong students with strong programmer mentors and strong programmer students with strong mathematical mentors. We often do the opposite due to shared interests but this might result in ideal contributions</p>
<h3>Funding</h3>
<p>Other people have funding. Should we? What would we do with it? How would we get it? It might not be as hard as we think. Who uses us? Can we get a grant? Are there companies who might be willing to fund directed work on SymPy?</p>
<h3>Interactions with SymPians</h3>
<p>This is my first time physically interacting with SymPy contributors other than my old mentor. It was a really positive experience. As a community we’re pretty distributed, both geographically and in applications/modules. Getting together and talking about SymPy was oddly fascinating. We should do it more. It made us think about SymPy at a bigger scale.</p>
<p>Some thoughts</p>
<ul>
<li>Do we want to organize a SymPy meetup (perhaps collocated with some other conference like SciPy)? What would this accomplish?</li>
<li>What is our big plan for SymPy? Do we have one or are we all just a bunch of hobbyists who work on our own projects? Are we actively pursuing a long term vision? I think that we could be more cohesive and generate more forward momentum. I think that this can be created by occasional collocation.</li>
<li>This could also be accomplished by some sort of digital meetup that’s more intense than the e-mail/IRC list. An easy test version of this could be a monthly video conference.</li>
</ul>
<h3>Broader community</h3>
<p>I’m accustomed to academic conferences. I recently had a different experience at the SciPy conference which mixed academic research with code. I really liked this mix of theory and application and had a great time at SciPy. GSoC amplified this change, replacing a lot of academics with attendees that were purely interested in code. This was personally very strange for me, I felt like an outsider.</p>
<p>The scientific/numeric python community doesn’t care as intensely about many of the issues that are religion to a substantial fraction of the open source world. My disinterest in these topics and my interest in more esoteric/academic topics also made me feel foreign. There were still people like me though and they were very fun to find, just a bit rarer.</p>
<p>This is the first conference I’ve been to where I was one of the better dressed attendees :)</p>
<h3>Local Community</h3>
<p>Other projects of our size exist under an umbrella organization like the Apache foundation. I see our local community as the numpy/scipy/matplotlib stack. How can we more tightly integrate ourselves with this community? NumFocus was started up recently. Should we engage/use NumFocus more? How can we make use of and how can we support our local community?</p>
<h3>Meta-Mentor Summit</h3>
<p>This section includes my thoughts about the summit itself. It’s distinctly structured. I’ll share my opinions about this structure.</p>
<p>The informal meeting spaces were excellent. Far better than the average academic conference. I felt very comfortable introducing myself and my project to everyone. It was a very social and outgoing crowd.</p>
<p>Some of the sessions were really productive and helpful. The unconference structure had a few strong successes.</p>
<p>There were a lot of sessions that could have been better organized.</p>
<ul>
<li>Frequently we didn’t have a goal in mind; this can be ok but I felt that in many cases a clear goal would have kept conversation on topic.</li>
<li>People very often wanted to share their experiences from events in their organization. This is good, we need to share experiences, but often people wouldn’t filter out org-specific details. We need to be mindful about holding the floor. We have really diverse groups and I’m pretty sure that the KDE guys don’t want to hear the details of symbolic algebra algorithms.</li>
<li>Sessions are sometimes dominated by one person</li>
<li>In general I think that we should use neutral meeting facilitators within the larager sessions. I think that they could be much more productive with some light amount of control.</li>
</ul>
<h3>Specific Interactions with other Orgs</h3>
<p>It was really cool to associate physical humans to all of the software projects I’ve benefitted from over the years. It’s awesome to realize that it’s all built by people, and not by some abstract force. I had a number of positive experiences with orgs like Sage and SciLab that are strongly related to SymPy as well as orgs that are completely unrelated like OpenIntents, Scala, and Tor.</p>
<h3>Conclusions</h3>
<p>I had a good time and came away with thoughts of the future. We have something pretty cool here and I think that we should think more aggressively about where we want to take it.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/273/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/273/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=273&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-10-22T15:30:03Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>mrocklin</name>
    </author>
    <source>
      <id>http://sympystats.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sympystats.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sympystats.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sympystats.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sympystats.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>sympy-stats</title>
      <updated>2013-01-17T11:20:26Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-2520472460430880330.post-1520965087387896738</id>
    <link href="http://sympy.blogspot.com/feeds/1520965087387896738/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=2520472460430880330&amp;postID=1520965087387896738" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/1520965087387896738" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/1520965087387896738" rel="self" type="application/atom+xml"/>
    <link href="http://sympy.blogspot.com/2012/10/sympy-072-is-released.html" rel="alternate" type="text/html"/>
    <title>SymPy 0.7.2 is released</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><br/><br/><div id="head" style="background-color: white; border-bottom-color: rgb(204, 204, 204); border-bottom-style: solid; border-width: 0px 0px 1px; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 10px; line-height: 14px; margin: 14px 0px 5px; overflow: hidden; padding: 5px 0px;"><span style="font-size: 14px; line-height: 1.6;">SymPy 0.7.2 was released on October 16, 2012.</span></div><div id="wiki-content" style="background-color: white; border: 0px; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 10px; line-height: 14px; margin: 0px; padding: 0px;"><div class="wrap" style="border: 0px; margin: 0px; padding: 0px;"><div class="gollum-markdown-content instapaper_body" id="wiki-body" style="border: 0px; margin: 0px; padding: 0px;"><div class="markdown-body" style="border: 0px; font-size: 14px; line-height: 1.6; margin: 0px; overflow: hidden; padding: 0px;"><h2 style="">Major Changes</h2><h3 style="">Python 3 support</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">SymPy now supports Python 3. The officially supported versions are 3.2 and 3.3, but 3.1 should also work in a pinch. The Python 3-compatible tarballs will be provided separately, but it is also possible to download Python 2 code and convert it manually, via the bin/use2to3 utility. See the README for more</div><h3 style="">PyPy support</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">All SymPy tests pass in recent nightlies of PyPy, and so it should have full support as of the next version after 1.9.</div><h3 style="">Combinatorics</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A new module called Combinatorics was added which is the result of a successful GSoC project. It attempts to replicate the functionality of Combinatorica and currently has full featured support for Permutations, Subsets, Gray codes and Prufer codes.</div><div style="border: 0px; margin-bottom: 15px; margin-top: 15px; padding: 0px;">In another GSoC project, facilities from computational group theory were added to the combinatorics module, mainly following the book "Handbook of computational group theory". Currently only permutation groups are supported. The main functionalities are: basic properties (orbits, stabilizers, random elements...), the Schreier-Sims algorithm (three implementations, in increasing speed: with Jerrum's filter, incremental, and randomized (Monte Carlo)), backtrack searching for subgroups with certain properties.</div><h3 style="">Definite Integration</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A new module called meijerint was added, which is also the result of a successful GSoC project. It implements a heuristic algorithm for (mainly) definite integration, similar to the one used in Mathematica. The code is automatically called by the standard integrate() function. This new algorithm allows computation of important integral transforms in many interesting cases, so helper functions for Laplace, Fourier and Mellin transforms were added as well.</div><h3 style="">Random Variables</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A new module called stats was added. This introduces a RandomSymbol type which can be used to model uncertainty in expressions.</div><h3 style="">Matrix Expressions</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A new matrix submodule named expressions was added. This introduces a MatrixSymbol type which can be used to describe a matrix without explicitly stating its entries. A new family of expression types were also added: Transpose, Inverse, Trace, and BlockMatrix. ImmutableMatrix was added so that explicitly defined matrices could interact with other SymPy expressions.</div><h3 style="">Sets</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A number of new sets were added including atomic sets like FiniteSet, Reals, Naturals, Integers, UniversalSet as well as compound sets like ProductSet and TransformationSet. Using these building blocks it is possible to build up a great variety of interesting sets.</div><h3 style="">Classical Mechanics</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A physics submodule named machanics was added which assists in formation of equations of motion for constrained multi-body systems. It is the result of 3 GSoC projects. Some nontrivial systems can be solved, and examples are provided.</div><h3 style="">Quantum Mechanics</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">Density operator module has been added. The operator can be initialized with generic Kets or Qubits. The Density operator can also work with TensorProducts as arguments. Global methods are also added that compute entropy and fidelity of states. Trace and partial-trace operations can also be performed on these density operators.</div><div style="border: 0px; margin-bottom: 15px; margin-top: 15px; padding: 0px;">To enable partial trace operations a Tr module has been added to the core library. While the functionality should remain same, this module is likely to be relocated to an alternate folder in the future. One can currently also use sympy.core.Tr to work on general trace operations, but this module is what is needed to work on trace and partial-trace operations on any sympy.physics.quantum objects.</div><div style="border: 0px; margin-bottom: 15px; margin-top: 15px; padding: 0px;">The Density operators, Tr and Partial trace functionality was implemented as part of student participation in GSoC 2012</div><div style="border: 0px; margin-bottom: 15px; margin-top: 15px; padding: 0px;">Expanded angular momentum to include coupled-basis states and product-basis states. Operators can also be treated as acting on the coupled basis (default behavior) or on one component of the tensor product states. The methods for coupling and uncoupling these states can work on an arbitrary number of states. Representing, rewriting and applying states and operators between bases has been improved.</div><h3 style="">Commutative Algebra</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A new module <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">agca</code> was started which seeks to support computations in commutative algebra (and eventually algebraic geometry) in the style of Macaulay2 and Singular. Currently there is support for computing Groebner bases of modules over a (generalized) polynomial ring over a field. Based on this, there are algorithms for various standard problems in commutative algebra, e.g., computing intersections of submodules, equality tests in quotient rings, etc....</div><h3 style="">Plotting Module</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A new plotting module has been added which uses Matplotlib as its back-end. The plotting module has functions to plot the following:</div><ul style="border: 0px; margin: 15px 0px; padding: 0px 0px 0px 30px;"><li style="border: 0px; margin: 0px; padding: 0px;">2D line plots</li><li style="border: 0px; margin: 0px; padding: 0px;">2D parametric plots.</li><li style="border: 0px; margin: 0px; padding: 0px;">2D implicit and region plots.</li><li style="border: 0px; margin: 0px; padding: 0px;">3D surface plots.</li><li style="border: 0px; margin: 0px; padding: 0px;">3D parametric surface plots.</li><li style="border: 0px; margin: 0px; padding: 0px;">3D parametric line plots.</li></ul><h3 style="">Differential Geometry</h3><div style="border: 0px; margin-bottom: 15px; padding: 0px;">Thanks to a GSoC project the beginning of a new module covering the theory of differential geometry was started. It can be imported with<code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">sympy.diffgeom</code>. It is based on "Functional Differential Geometry" by Sussman and Wisdom. Currently implemented are scalar, vector and form fields over manifolds as well as covariant and other derivatives.</div><h2 style="">Backwards compatibility breaks</h2><div style="border: 0px; margin-bottom: 15px; padding: 0px;">-The KroneckerDelta class was moved from sympy/physics/quantum/kronecker.py to sympy/functions/special/tensor_functions.py.</div><ul style="border: 0px; margin: 15px 0px; padding: 0px 0px 0px 30px;"><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">Merged the KroneckerDelta class in sympy/physics/secondquant.py with the class above.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">The Dij class in sympy/functions/special/tensor_functions.py was replaced with KroneckerDelta.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">The errors raised for invalid <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">float</code> calls on SymPy objects were changed in order to emulate more closely the errors raised by the standard library. The <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">__float__</code> and <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">__complex__</code> methods of <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">Expr</code> are concerned with that change.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">The <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">solve()</code> function returns empty lists instead of <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">None</code> objects if no solutions were found. Idiomatic code of the form<code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">sol = solve(...); if sol:...</code> will not be affected by this change.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">Piecewise no longer accepts a Set or Interval as a condition. One should explicitly specify a variable using Set().contains(x) to obtain a valid conditional.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">The statistics module has been deprecated in favor of the new stats module.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">sympy/galgebra/GA.py:</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">set_main() is no longer needed</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">make_symbols() is deprecated (use sympy.symbols() instead)</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">the symbols used in this package are no longer broadcast to the main program</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">The classes for Infinity, NegativeInfinity, and NaN no longer subclass from Rational. Creating a Rational with 0 in the denominator will still return one of these classes, however.</div></li></ul><h2 style="">Other Changes</h2><ul style="border: 0px; margin: 15px 0px; padding: 0px 0px 0px 30px;"><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A new module <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">gaussopt</code> was added supporting the most basic constructions from Gaussian optics (ray tracing matrices, geometric rays and Gaussian beams).</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">New classes were added to represent the following special functions: classical and generalized exponential integrals (Ei, expint), trigonometric (Si, Ci) and hyperbolic integrals (Shi, Chi), the polylogarithm (polylog) and the Lerch transcendent (lerchphi). In addition to providing all the standard sympy functionality (differentiation, numerical evaluation, rewriting ...), they are supported by both the new meijerint module and the existing hypergeometric function simplification module.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">An ImmutableMatrix class was created. It has the same interface and functionality of the old Matrix but is immutable and inherits from Basic.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A new function in geometry.util named <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">centroid</code> was added which will calculate the centroid of a collection of geometric entities. And the polygon module now allows triangles to be instantiated from combinations of side lengths and angles (using keywords sss, asa, sas) and defines utility functions to convert between degrees and radians.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">In ntheory.modular there is a function (<code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">solve_congruence</code>) to solve congruences such as "What number is 2 mod 3, 3 mod 5 and 2 mod 7?"</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">A utility function named <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">find_unit</code> has been added to physcis.units that allows one to find units that match a given pattern or contain a given unit.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">There have been some additions and modifications to Expr's methods:</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">Although the problem of proving that two expressions are equal is in general a difficult one (since whatever algorithm is used, there will always be an expression that will slip through the algorithm) the new method of Expr named <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">equals</code> will do its best to answer whether A equals B: A.equals(B) might given True, False or None.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">coeff now supports a third argument <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">n</code> (which comes 2nd now, instead of <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">right</code>). This <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">n</code> is used to indicate the exponent on x which one seeks: <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">(x**2 + 3*x + 4).coeff(x, 1)</code> -&gt; <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">3</code>. This makes it possible to extract the constant term from a polynomial:<code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">(x**2 + 3*x + 4).coeff(x, 0)</code> -&gt; <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">4</code>.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">The method <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">round</code> has been added to round a SymPy expression to a given a number of decimal places (to the left or right of the decimal point).</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">divmod is now supported for all SymPy numbers.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">In the simplify module, the algorithms for denesting of radicals (sqrtdenest) and simplifying gamma functions (in combsimp) has been significantly improved.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">The mathematica-similar <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">TableForm</code> function has been added to the printing.tableform module so one can easily generate tables with headings.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">In addition to the more noticeable changes listed above, there have been numerous smaller additions, improvements and bug fixes in the commits in this release. See the git log for a full list of all changes. The command <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">git log sympy-0.7.1..sympy-0.7.2</code> will show all commits made between this release and the last. You can also see the issues closed since the last release <a href="http://code.google.com/p/sympy/issues/list?can=1&amp;q=closed-after%3A2011%2F7%2F30+closed-before%3A2012%2F8%2F23&amp;sort=-closed&amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary+Stars+Closed&amp;cells=tiles" style="border: 0px; color: #4183c4; margin: 0px; padding: 0px; text-decoration: initial;">here</a>.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">The expand API has been updated. <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">expand()</code> now officially supports arbitrary <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">_eval_expand_hint()</code> methods on custom objects.<code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">_eval_expand_hint()</code> methods are now only responsible for expanding the top-level expression. All <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">deep=True</code> related logic happens in<code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">expand()</code> itself. See the <a href="http://docs.sympy.org/0.7.2/modules/core.html#sympy.core.function.expand" style="border: 0px; color: #4183c4; margin: 0px; padding: 0px; text-decoration: initial;">docstring of <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">expand()</code></a> for more information and an example.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">Two options were added to <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">isympy</code> to aid in interactive usage. <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">isympy -a</code> automatically creates symbols, so that typing something like<code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">a</code> will give <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">Symbol('a')</code>, even if you never typed <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">a = Symbol('a')</code> or <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">var('a')</code>. <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">isympy -i</code> automatically wraps integer literals with Integer, so that <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">1/2</code> will give <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">Rational(1, 2)</code> instead of <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">0.5</code>. <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">isympy -I</code> is the same as <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">isympy -a -i</code>. <code style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;">isympy -I</code> makes isympy act much more like a traditional interactive computer algebra system. These both require IPython.</div></li><li style="border: 0px; margin: 0px; padding: 0px;"><div style="border: 0px; margin-bottom: 15px; padding: 0px;">The official documentation at <a href="http://docs.sympy.org/" style="border: 0px; color: #4183c4; margin: 0px; padding: 0px; text-decoration: initial;">http://docs.sympy.org</a> now includes an extension that automatically hooks the documentation examples in to<a href="http://live.sympy.org/" style="border: 0px; color: #4183c4; margin: 0px; padding: 0px; text-decoration: initial;">SymPy Live</a>.</div></li></ul><h2 style="">Authors</h2><div style="border: 0px; margin-bottom: 15px; padding: 0px;">The following people contributed at least one patch to this release (names are given in alphabetical order by last name). A total of 103 people contributed to this release. People with a * by their names contributed a patch for the first time for this release; 77 people contributed for the first time for this release.</div><div style="border: 0px; margin-bottom: 15px; margin-top: 15px; padding: 0px;">Thanks to everyone who contributed to this release!</div><ul style="border: 0px; margin-bottom: 0px !important; margin-left: 0px; margin-right: 0px; margin-top: 15px; padding: 0px 0px 0px 30px;"><li style="border: 0px; margin: 0px; padding: 0px;">Sanket Agarwal*</li><li style="border: 0px; margin: 0px; padding: 0px;">Swapnil Agarwal*</li><li style="border: 0px; margin: 0px; padding: 0px;">Bilal Akhtar*</li><li style="border: 0px; margin: 0px; padding: 0px;">Nathan Alison*</li><li style="border: 0px; margin: 0px; padding: 0px;">Steve Anton*</li><li style="border: 0px; margin: 0px; padding: 0px;">Takafumi Arakaki*</li><li style="border: 0px; margin: 0px; padding: 0px;">Chancellor Arkantos*</li><li style="border: 0px; margin: 0px; padding: 0px;">Manoj Babu K.*</li><li style="border: 0px; margin: 0px; padding: 0px;">Tom Bachmann</li><li style="border: 0px; margin: 0px; padding: 0px;">Oscar Benjamin</li><li style="border: 0px; margin: 0px; padding: 0px;">Raoul Bourquin*</li><li style="border: 0px; margin: 0px; padding: 0px;">Christian Bühler*</li><li style="border: 0px; margin: 0px; padding: 0px;">Jorge E. Cardona*</li><li style="border: 0px; margin: 0px; padding: 0px;">Ondřej Čertík</li><li style="border: 0px; margin: 0px; padding: 0px;">Puneeth Chaganti*</li><li style="border: 0px; margin: 0px; padding: 0px;">Roberto Colistete, Jr.*</li><li style="border: 0px; margin: 0px; padding: 0px;">Renato Coutinho</li><li style="border: 0px; margin: 0px; padding: 0px;">Joan Creus*</li><li style="border: 0px; margin: 0px; padding: 0px;">Addison Cugini</li><li style="border: 0px; margin: 0px; padding: 0px;">Guru Devanla*</li><li style="border: 0px; margin: 0px; padding: 0px;">Joseph Dougherty*</li><li style="border: 0px; margin: 0px; padding: 0px;">Comer Duncan*</li><li style="border: 0px; margin: 0px; padding: 0px;">Joachim Durchholz*</li><li style="border: 0px; margin: 0px; padding: 0px;">Tarun Gaba*</li><li style="border: 0px; margin: 0px; padding: 0px;">Luis Garcia*</li><li style="border: 0px; margin: 0px; padding: 0px;">Gilbert Gede</li><li style="border: 0px; margin: 0px; padding: 0px;">Arpit Goyal*</li><li style="border: 0px; margin: 0px; padding: 0px;">Brian E. Granger</li><li style="border: 0px; margin: 0px; padding: 0px;">Alexey U. Gudchenko</li><li style="border: 0px; margin: 0px; padding: 0px;">Alexandr Gudulin*</li><li style="border: 0px; margin: 0px; padding: 0px;">Matt Habel*</li><li style="border: 0px; margin: 0px; padding: 0px;">Tristan Hume*</li><li style="border: 0px; margin: 0px; padding: 0px;">Kevin Hunter*</li><li style="border: 0px; margin: 0px; padding: 0px;">Gert-Ludwig Ingold*</li><li style="border: 0px; margin: 0px; padding: 0px;">Sachin Irukula*</li><li style="border: 0px; margin: 0px; padding: 0px;">Sergiu Ivanov*</li><li style="border: 0px; margin: 0px; padding: 0px;">Siddhant Jain*</li><li style="border: 0px; margin: 0px; padding: 0px;">Saurabh Jha*</li><li style="border: 0px; margin: 0px; padding: 0px;">Fredrik Johansson</li><li style="border: 0px; margin: 0px; padding: 0px;">David Ju*</li><li style="border: 0px; margin: 0px; padding: 0px;">Kendhia*</li><li style="border: 0px; margin: 0px; padding: 0px;">Andreas Kloeckner*</li><li style="border: 0px; margin: 0px; padding: 0px;">Carsten Knoll*</li><li style="border: 0px; margin: 0px; padding: 0px;">Piotr Korgul*</li><li style="border: 0px; margin: 0px; padding: 0px;">Marcin Kostrzewa*</li><li style="border: 0px; margin: 0px; padding: 0px;">Stefan Krastanov</li><li style="border: 0px; margin: 0px; padding: 0px;">Priit Laes</li><li style="border: 0px; margin: 0px; padding: 0px;">Tim Lahey*</li><li style="border: 0px; margin: 0px; padding: 0px;">Ronan Lamy</li><li style="border: 0px; margin: 0px; padding: 0px;">Nikolay Lazarov*</li><li style="border: 0px; margin: 0px; padding: 0px;">Tomo Lazovich</li><li style="border: 0px; margin: 0px; padding: 0px;">Tobias Lenz*</li><li style="border: 0px; margin: 0px; padding: 0px;">David Li*</li><li style="border: 0px; margin: 0px; padding: 0px;">Bharath M R*</li><li style="border: 0px; margin: 0px; padding: 0px;">Sam Magura</li><li style="border: 0px; margin: 0px; padding: 0px;">Aleksandar Makelov*</li><li style="border: 0px; margin: 0px; padding: 0px;">Saptarshi Mandal</li><li style="border: 0px; margin: 0px; padding: 0px;">Imran Ahmed Manzoor*</li><li style="border: 0px; margin: 0px; padding: 0px;">Shruti Mangipudi*</li><li style="border: 0px; margin: 0px; padding: 0px;">Davy Mao*</li><li style="border: 0px; margin: 0px; padding: 0px;">Miha Marolt*</li><li style="border: 0px; margin: 0px; padding: 0px;">marshall2389*</li><li style="border: 0px; margin: 0px; padding: 0px;">Michael Mayorov*</li><li style="border: 0px; margin: 0px; padding: 0px;">Aaron Meurer</li><li style="border: 0px; margin: 0px; padding: 0px;">Raphael Michel*</li><li style="border: 0px; margin: 0px; padding: 0px;">Jason Moore*</li><li style="border: 0px; margin: 0px; padding: 0px;">Ljubiša Moćić*</li><li style="border: 0px; margin: 0px; padding: 0px;">Angadh Nanjangud*</li><li style="border: 0px; margin: 0px; padding: 0px;">Natalia Nawara*</li><li style="border: 0px; margin: 0px; padding: 0px;">Jens H. Nielsen*</li><li style="border: 0px; margin: 0px; padding: 0px;">Sai Nikhil*</li><li style="border: 0px; margin: 0px; padding: 0px;">Ashwini Oruganti*</li><li style="border: 0px; margin: 0px; padding: 0px;">Prateek Papriwal*</li><li style="border: 0px; margin: 0px; padding: 0px;">Mateusz Paprocki</li><li style="border: 0px; margin: 0px; padding: 0px;">Vladimir Perić</li><li style="border: 0px; margin: 0px; padding: 0px;">Mario Pernici</li><li style="border: 0px; margin: 0px; padding: 0px;">Luke Peterson</li><li style="border: 0px; margin: 0px; padding: 0px;">Alexandr Popov*</li><li style="border: 0px; margin: 0px; padding: 0px;">Nicolas Pourcelot</li><li style="border: 0px; margin: 0px; padding: 0px;">Martin Povišer*</li><li style="border: 0px; margin: 0px; padding: 0px;">Matt Rajca*</li><li style="border: 0px; margin: 0px; padding: 0px;">Julien Rioux*</li><li style="border: 0px; margin: 0px; padding: 0px;">Matthew Rocklin</li><li style="border: 0px; margin: 0px; padding: 0px;">Nikhil Sarda</li><li style="border: 0px; margin: 0px; padding: 0px;">Siddhanathan Shanmugam*</li><li style="border: 0px; margin: 0px; padding: 0px;">Stepan Simsa*</li><li style="border: 0px; margin: 0px; padding: 0px;">Sam Sleight*</li><li style="border: 0px; margin: 0px; padding: 0px;">Chris Smith</li><li style="border: 0px; margin: 0px; padding: 0px;">Geoffry Song*</li><li style="border: 0px; margin: 0px; padding: 0px;">Andrew Straw</li><li style="border: 0px; margin: 0px; padding: 0px;">Alexey Subach*</li><li style="border: 0px; margin: 0px; padding: 0px;">Grzegorz Świrski*</li><li style="border: 0px; margin: 0px; padding: 0px;">Prafullkumar P. Tale</li><li style="border: 0px; margin: 0px; padding: 0px;">Matthias Toews*</li><li style="border: 0px; margin: 0px; padding: 0px;">tsmars15*</li><li style="border: 0px; margin: 0px; padding: 0px;">Nichita Utiu*</li><li style="border: 0px; margin: 0px; padding: 0px;">Srinivas Vasudevan*</li><li style="border: 0px; margin: 0px; padding: 0px;">Sean Vig</li><li style="border: 0px; margin: 0px; padding: 0px;">vishal*</li><li style="border: 0px; margin: 0px; padding: 0px;">George Waksman*</li><li style="border: 0px; margin: 0px; padding: 0px;">Luca Weihs</li><li style="border: 0px; margin: 0px; padding: 0px;">Raymond Wong</li><li style="border: 0px; margin: 0px; padding: 0px;">Jeremias Yehdegho</li><li style="border: 0px; margin: 0px; padding: 0px;">Jim Zhang*</li><li style="border: 0px; margin: 0px; padding: 0px;">Tiffany Zhu*</li><li style="border: 0px; margin: 0px; padding: 0px;">jerryma1121*</li><li style="border: 0px; margin: 0px; padding: 0px;">Rom le Clair*</li></ul><div><br/></div></div></div></div></div><div id="gollum-footer" style="background-color: white; border: 0px; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 12px; line-height: 19px; margin: 0px; padding: 0px;"/><br/></div>
    </content>
    <updated>2012-10-20T04:26:11Z</updated>
    <published>2012-10-20T04:26:00Z</published>
    <author>
      <name>Aaron Meurer</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/07681610358074038422</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-2520472460430880330</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>https://plus.google.com/104039945248245758823</uri>
      </author>
      <link href="http://sympy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://sympy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>The Official SymPy Blog</subtitle>
      <title>The Official SymPy Blog</title>
      <updated>2012-10-20T04:26:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://brianegranger.com/?p=215</id>
    <link href="http://brianegranger.com/?p=215" rel="alternate" type="text/html"/>
    <title>Blogging with the IPython Notebook</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The IPython dev team gets a lot of questions about how IPython Notebooks can be used on various blogging platforms. There have been a number of different attempts to use nbconvert to export a notebook to HTML and then embedding that HTML in the blogging platform. With the introduction of <a href="http://nbviewer.ipython.org" title="IPython Notebook Viewer"/></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The IPython dev team gets a lot of questions about how IPython Notebooks can be used on various blogging platforms. There have been a number of different attempts to use nbconvert to export a notebook to HTML and then embedding that HTML in the blogging platform. With the introduction of <a href="http://nbviewer.ipython.org" target="_blank" title="IPython Notebook Viewer">nbviewer</a> it is trivial to embed a Notebook in any web page using iframes.  Here is a simple example:</p>
<div class="codecolorer-container text default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="text codecolorer" style="">&lt;iframe src="http://nbviewer.ipython.org/3835181/" width="800" height="1500"&gt;&lt;/iframe&gt;</div></div>
<p>Which produces the embedded Notebook shown below.  The only subtle part is that you have to set the width and height attributes manually to avoid having scroll bars on the iframe.</p>
<p>&lt;iframe height="1500" src="http://nbviewer.ipython.org/3835181/" width="800"&gt;&lt;/iframe&gt;</p></div>
    </content>
    <updated>2012-10-05T02:54:59Z</updated>
    <category term="Computing"/>
    <author>
      <name>Brian Granger</name>
    </author>
    <source>
      <id>http://brianegranger.com</id>
      <link href="http://brianegranger.com/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://brianegranger.com" rel="alternate" type="text/html"/>
      <subtitle>Physics ∩ Computing</subtitle>
      <title>Brian E. Granger</title>
      <updated>2013-01-10T17:00:17Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1160</id>
    <link href="http://asmeurersympy.wordpress.com/2012/09/19/infinitely-nested-lists-in-python/" rel="alternate" type="text/html"/>
    <title>Infinitely nested lists in Python</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Readers of this blog know that I sometimes like to write about some strange, unexpected, and unusual things in Python that I stumble across. This post is another one of those. First, look at this What am I doing here? I’m creating a list, a, and I’m adding it to itself. What you end up [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1160&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Readers of this blog know that I sometimes like to write about some <a href="http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/">strange</a>, <a href="http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here/">unexpected</a>, and <a href="http://asmeurersympy.wordpress.com/2011/03/15/true-is-true-is-false-is-true-is-false/">unusual</a> things in Python that I stumble across.  This post is another one of those.</p>
<p>First, look at this</p>
<p/><pre class="brush: python;">&gt;&gt;&gt; a = []
&gt;&gt;&gt; a.append(a)
&gt;&gt;&gt; a
[[...]]
</pre><p/>
<p>What am I doing here?  I’m creating a list, <code>a</code>, and I’m adding it to itself.  What you end up with is an infinitely nested list.  The first interesting thing about this is that Python is smart enough to not explode when printing this list.  The following should convince you that <code>a</code> does indeed contain itself.</p>
<p/><pre class="brush: python;">&gt;&gt;&gt; a[0] is a
True
&gt;&gt;&gt; a[0] == a
True
</pre><p/>
<p>Now, if you have programmed in C, or a similar language that uses pointers, this should not come as a surprise to you.  Lists in Python, like most things, do not actually contain the items inside them.  Rather, they contain references (in C terminology, “pointers”) to the items inside them.  From this perspective, there is no issue at all with <code>a</code> containing a pointer to itself.</p>
<p>The first thing I wondered when I saw this was just how clever the printer was at noticing that the list was infinitely nested.  What if we make the cycle a little more complex?</p>
<p/><pre class="brush: python;">&gt;&gt;&gt; a = []
&gt;&gt;&gt; b = []
&gt;&gt;&gt; a.append(b)
&gt;&gt;&gt; b.append(a)
&gt;&gt;&gt; a
[[[...]]]
&gt;&gt;&gt; b
[[[...]]]
&gt;&gt;&gt; a[0] is b
True
&gt;&gt;&gt; b[0] is a
True
</pre><p/>
<p>So it still works.  I had thought that maybe repr just catches <code>RuntimeError</code> and falls back to printing <code>...</code> when the list is nested too deeply, but it turns out that is not true:</p>
<p/><pre class="brush: python;">&gt;&gt;&gt; a = []
&gt;&gt;&gt; for i in range(10000):
...     a = [a]
... 
&gt;&gt;&gt; a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: maximum recursion depth exceeded while getting the repr of a list
</pre><p/>
<p>And by the way, in case you were wondering, it is possible to catch a <code>RuntimeError</code> (using the same <code>a</code> as the previous code block)</p>
<p/><pre class="brush: python;">&gt;&gt;&gt; try:
...     print(a)
... except RuntimeError:
...     print("no way")
... 
no way
</pre><p/>
<p>(and you also may notice that this is Python 3. Things behave the same way in Python 2)</p>
<p>Back to infinitely nested lists, we saw that printing works, but there are some things that don’t work.</p>
<p/><pre class="brush: python;">&gt;&gt;&gt; a[0] == b
True
&gt;&gt;&gt; a[0] == a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: maximum recursion depth exceeded in comparison
</pre><p/>
<p><code>a[0] is b</code> holds (i.e., they are exactly the same object in memory), so <code>==</code> is able to short-circuit on them.  But to test <code>a[0] == a</code> it has to recursively compare the elements of <code>a</code> and <code>a[0]</code>.  Since it is infinitely nested, this leads to a recursion error.  Now an interesting question: why does this happen?  Is it because <code>==</code> on lists uses a depth first search?  If it were somehow possible to compare these two objects, would they be equal?</p>
<p>One is reminded of <a href="http://en.wikipedia.org/wiki/Russel%27s_paradox">Russel’s paradox</a>, and the reason why in <a href="http://en.wikipedia.org/wiki/Zermelo%E2%80%93Fraenkel_set_theory">axiomatic set theory</a>, sets are not allowed to contain themselves. </p>
<p>Thinking of this brought me to my final question.  Is it possible to make a Python <code>set</code> that contains itself?  The answer is obviously no, because <code>set</code> objects can only contain hashable objects, and <code>set</code> is not hashable.  But <code>frozenset</code>, <code>set</code>‘s counterpart, is hashable.  So can you create a <code>frozenset</code> that contains itself?  The same for <code>tuple</code>.  The method I used for <code>a</code> above won’t work, because <code>a</code> must be mutable to append it to itself.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1160/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1160/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1160&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-09-19T04:21:08Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2013-01-17T11:20:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=266</id>
    <link href="http://rhoforsympy.wordpress.com/2012/09/09/ubuntu-to-mac-my-experience-with-the-new-setup/" rel="alternate" type="text/html"/>
    <title>Ubuntu to Mac – My experience with the new setup</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Recently I had an opportunity to get my hands dirty on a Mac based development environment. I have done most of my development on Ubuntu and getting to work on Mac was a mixed experience. As anyone would have guessed the overall UI experience has been great. Here are some of the tools I was [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=266&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Recently I had an opportunity to get my hands dirty on a Mac based development environment. I have done most of my development on Ubuntu and getting to work on Mac was a mixed experience.  As anyone would have guessed the overall UI experience has been great. </p>
<p>Here are some of the tools I was introduced to during my first week:</p>
<p>1. SQLPro : This is a nice GUI based MySQL client. I was never impressed with the command line MySql client. I hated it all the more once I started using Postgress and the accompanying client. If you have used Golden for Oracle it is on par with that tool.</p>
<p>2. iTerm2: This is the tmux equivalent and tuned towards the Mac UI experience. The key bindings are easy to learn and worth spending time getting used to the keyboard shortcuts.</p>
<p>3. Homebrew: This is the Ubuntu equivalent of apt-get. Other options include MacPorts and Fink. I am yet to familiarize myself with the differences between the options.</p>
<p>4. Alfred: This is a quick launch app which helps you launch applications using Cmd-Space shortcut. This is equivalent to Alt-F2 on Ubuntu.</p>
<p>5. PyCharm : This is not Mac specific, but this tool has been handy in helping me step through code and understand the implementation as I debug.</p>
<p>6. Emacs on Mac : The biggest challenge I had was trying to set up Emacs to reflect my set up on Ubuntu. ‘Monaco’ is the usual font used in most of Mac applications. But, the GUI version of Emacs just does not render Monaco-11 or Monaco-12 in anti-aliased mode.Turning on/off anti-aliasing did not help either. Doing anything in a font bigger than that was very painful. Finally, I settled into to using the non gui-version of Emacs-24. I just had to create an alias called emacs24 and make it point to the Emacs app with the non-Gui option.  Here is the instruction you will need to follow, if you had the same experience.<br/>
a. Install the Emacs-24.x version.<br/>
b. Add this line to your bash_profile.</p>
<p>alias emacs=”/Applications/Emacs.app/Contents/MacOS/Emacs -nw”</p>
<p>c. And, happily run Emacs with the beautiful fonts rendered by iTerm2. </p>
<p>This option also helps you open Emacs within one of the sessions in iTerm2. That way you can remain working on the terminals without the need to switch windows.</p>
<p>There are some new Python tools I have started working in lately, and that will be the topic of my next post.</p>
<p>Happy Coding!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/266/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/266/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=266&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-09-09T11:29:19Z</updated>
    <category term="Programming"/>
    <category term="programming"/>
    <category term="software"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2013-01-17T11:20:36Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1154</id>
    <link href="http://asmeurersympy.wordpress.com/2012/08/31/isympy-i-a-saner-interactive-environment/" rel="alternate" type="text/html"/>
    <title>isympy -I:  A saner interactive environment</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As promised, here is another post describing a new feature in the upcoming SymPy 0.7.2. Automatic Symbol Definition While not as ground breaking as the feature I described in my last post, this feature is still quite useful. As you may know, SymPy is inherently a Python library, meaning that it lives by the rules [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1154&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As <a href="http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/">promised</a>, here is another post describing a new feature in the upcoming <a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.2">SymPy 0.7.2</a>.</p>
<h2>Automatic Symbol Definition</h2>
<p>While not as ground breaking as the feature I described in my <a href="http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/">last post</a>, this feature is still quite useful. As you may know, SymPy is inherently a Python library, meaning that it lives by the rules of Python. If you want to use any name, whether it be a Symbol or a function (like cos), you need to define it (in the case of Symbols), or import it (in the case of functions that come with SymPy). We provide the script <code>isympy</code> with SymPy to assist with this. This script automatically runs IPython (if it’s installed), imports all names from sympy (<code>from sympy import *</code>), and defines common symbol names (like <code>x</code>, <code>y</code>, and <code>z</code>).</p>
<p>But if you want to use a Symbol that is not one of the ones predefined by <code>isympy</code>, you will get something like</p>
<p/><pre class="brush: python;">In [1]: r*x
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
 in ()
----&gt; 1 r*x

NameError: name 'r' is not defined
</pre><p/>
<p>The best solution for this has been either to type <code>var('r')</code>, which will create the Symbol <code>r</code> and inject it into the namespace, or to wrap your text in a string and pass it to <code>sympify()</code>, like <code>sympify("r*x")</code>. Neither of these are very friendly in interactive mode.</p>
<p>In SymPy 0.7.2, <code>isympy</code> has a new command line option, <code>isympy -a</code>, which will enable a mechanism that will automatically define all undefined names as Symbols for you:</p>
<p/><pre class="brush: python;">In [1]: r*x
Out[1]: r⋅x
</pre><p/>
<p>There are some caveats to be aware of when using this feature:</p>
<ul>
<li>Names must be undefined for <code>isympy -a</code> to work. If you type something like <code>S*x</code>, you’ll get:<pre class="brush: python;">In [3]: S*x
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-3-6656a97ea7b0&gt; in &lt;module&gt;()
----&gt; 1 S*x

TypeError: unsupported operand type(s) for *: 'SingletonRegistry' and 'Symbol'
</pre>
<p>That’s because <code>S</code> is already defined (it’s the <code>SingletonRegistry</code>, and also a shortcut to <code>sympify()</code>). To use a name that’s already defined, either create it manually with <code>var()</code> or delete it using <code>del</code>.</p></li>
<li>This only works on the top level namespace. If you define a function with an undefined name, it will not automatically define that symbol when run.</li>
<li>This works by catching NameError, defining the name, and then re-running the expression. If you have a multiline statement, any lines before the undefined name will be run before the NameError will be caught. This usually won’t happen, but it’s a potential side-effect to be aware of. We plan to rewrite it using either ast or tokenize to avoid this issue.</li>
<li>Obviously, this is intended for interactive use only. If you copy code and put it in a script, or in some other place where someone might be expected to run it, but not necessarily from <code>isympy -a</code>, you should include symbol definitions.</li>
</ul>
<h2>Automatic int to Integer Conversion</h2>
<p>A second thing that is annoying with Python and SymPy is that something like <code>1/2</code> will be interpreted completely by Python, without any SymPy. This means that something like <code>1/2 + x</code> will give either <code>0 + x</code> or <code>0.5 + x</code>, depending on whether or not <code>__future__.division</code> has been imported. <code>isympy</code> has always ran <code>from __future__ import division</code>, so that you’ll get the latter, but we usually would prefer to get <code>Rational(1, 2)</code>. Previously, the best way to do this was again to either run it through <code>sympify()</code> as a string, or to sympify at least one of the numbers (here the <code>S()</code> shortcut to <code>sympify()</code> is useful, because you can type just <code>S(1)/2</code>).</p>
<p>With SymPy 0.7.2, you can run <code>isympy -i</code>, and it will automatically wrap all integers literals with <code>Integer()</code>. The result is that <code>1/2</code> produces <code>Rational(1, 2)</code>:</p>
<p/><pre class="brush: python;">In [1]: 1/2 + x
Out[1]: x + 1/2
</pre><p/>
<p>Again, there are a couple of caveats:</p>
<ul>
<li>If you want to get Python style division, you just need to wrap both arguments in <code>int()</code>:<pre class="brush: python;">In [2]: int(1)/int(2)
Out[2]: 0.5
</pre>
<p>Of course, if you just want a floating point number, you can just use <code>N()</code> or <code>.evalf()</code></p></li>
<li>This works by parsing the text and wrapping all integer literals with <code>Integer()</code>. This means that if you have a variable set to a Python int, it will still act like a Python int:<pre class="brush: python;">In [6]: a = int(1)

In [7]: b = int(2)

In [8]: a/b
Out[8]: 0.5
</pre>
<p>Note that to even do that example, I had to manually make <code>a</code> and <code>b</code> Python ints by wrapping them in <code>int()</code>. If I had just done <code>a = 1</code>, it would have been parsed as <code>a = Integer(1)</code>, and I would have gotten a SymPy Integer. But this can be an issue if you use the result of some function that returns an int (again, note that most functions in SymPy that return integers return Integer, not int).</p></li>
<li>The same as before: this will only work interactively. If you want to reuse your code outside of <code>isympy -i</code>, you should take care of any int/int by rewriting it as S(int)/int.</li>
</ul>
<p>Since these are both useful features, we’ve added a way that you can get them both at once: by doing <code>isympy -I</code> (the “I” stands for “Interactive”). If we add similar features in the future, we will also add them to the <code>-I</code> shortcut (for example, we may add an option to allow <code>^</code> to automatically be replaced with <code>**</code>).</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1154/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1154/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1154&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-31T03:30:08Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2013-01-17T11:20:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1122</id>
    <link href="http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/" rel="alternate" type="text/html"/>
    <title>SymPy Live Sphinx Extension</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I didn’t blog about SymPy all summer, so I thought I would write a post about my favorite feature of the upcoming SymPy 0.7.2 release.  In fact, this feature has got me more excited than any other feature from any version of SymPy.  Yeah, it’s that good. The feature is the SymPy Live Sphinx extension. [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1122&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I didn’t blog about SymPy all summer, so I thought I would write a post about my favorite feature of the upcoming SymPy 0.7.2 release.  In fact, this feature has got me more excited than any other feature from any version of SymPy.  Yeah, it’s that good.</p>
<p>The feature is the SymPy Live Sphinx extension.  To start, if you don’t know about it, check out <a href="http://live.sympy.org/" target="_blank">SymPy Live</a>.  This is a console that runs on the <a href="https://developers.google.com/appengine/">App Engine</a>.  We’ve actually had this for quite some time, but this winter, it got a huge upgrade thanks to the contribution of some <a href="http://www.google-melange.com/gci/homepage/google/gci2011">GCI</a> students.  Basically, SymPy Live lets you try out SymPy in your browser completely for free, because it runs all the code on the App Engine.  Actually, the console is a full Python console, so you can actually run any valid Python command on it.  This past winter, GCI students upgraded the look of the site, added a mobile version (visit live.sympy.org on your phone), and added other neat features like search history and autocompletion.</p>
<p>Now, <a href="http://sphinx.pocoo.org/">Sphinx</a> is the documentation system that we use to generate <a href="http://docs.sympy.org/">SymPy’s html documentation</a>. Last year, when I was at the <a href="http://asmeurersympy.wordpress.com/2011/07/17/the-scipy-2011-conference/">SciPy Conference</a>, Mateusz had an idea at the sprints to create an extension linking SymPy Live and Sphinx, so that the examples in Sphinx could be easily run in SymPy Live.  He didn’t finish the extension, but I’m happy to report that thanks to David Li, who was also one of the aforementioned GCI students, the extension is now complete, and is running live on our <a href="http://docs.sympy.org/dev/">development docs</a>.  When SymPy 0.7.2 is released (soon I promise), it will be part of the oficial documentation.</p>
<p>The best way to see how awesome this is is to visit the website and check it out.  You will need a modern browser (the latest version of Firefox, Safari, or Chrome will work, IE might work too).  Go to a page in the development docs with documentation examples, for example, <a href="http://docs.sympy.org/dev/tutorial.html#algebra">http://docs.sympy.org/dev/tutorial.html#algebra</a>, and click on one of the examples (or click on one of the green “Run code block in SymPy Live” buttons). You should see a console pop up from the bottom-right of the screen, and run your code.  For example:</p>
<div class="wp-caption alignnone" id="attachment_1149" style="width: 460px;"><a href="http://asmeurersympy.files.wordpress.com/2012/08/sympy-live-sphinx.png"><img alt="" class="size-full wp-image-1149" height="317" src="http://asmeurersympy.files.wordpress.com/2012/08/sympy-live-sphinx.png?w=450&amp;h=317" title="SymPy-Live-Sphinx" width="450"/></a><p class="wp-caption-text">Example of the SymPy Live Sphinx extension at <a href="http://docs.sympy.org/dev/tutorial.html#algebra">http://docs.sympy.org/dev/tutorial.html#algebra</a>. Click for larger image.</p></div>
<p> </p>
<p>You can access or hide the console at any time by clicking on the green box at the bottom-right of the page.  If you click on “Settings”, you will see that you can change all the same settings as the regular SymPy Live console, such as the printer type, and the keys for execution and autocompletion.  Additionally, there is a new setting, “Evaluation Mode”, which changes how the Sphinx examples are evaluated.  The default is “Evaluate”.  In this mode, if you click on an example, it is executed immediately.  The other option is “Copy”.  In this mode, if you click an example, it is copied to the console, but not executed right away. This way, you can edit the code to try something different.  Remember, this is a full fledged Python console running SymPy, so you can try literally anything</p>
<p>So play with this and <a href="http://groups.google.com/group/sympy">let us know</a> what you think.  We would love to hear ways that we can improve the experience even further.  In particular, I think we should think about ways to make the “Copy” mode more user-friendly.  Suggestions welcome!  Also, please <a href="http://code.google.com/p/sympy/issues">report any bugs</a>.</p>
<p>And one word of warning:  even though these are the development docs, SymPy Live is still running SymPy 0.7.1.  So some examples may not work until 0.7.2 is released, at which point we will update SymPy Live.</p>
<p>I believe that this extension represents the future of interactive documentation. I hope you enjoy.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1122/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1122/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1122&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-21T05:09:13Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2013-01-17T11:20:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=512</id>
    <link href="http://amakelov.wordpress.com/2012/08/20/google-summer-of-code-2012-week-13/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 13</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of my 13th (and last) week of GSoC. I continued my work on centralizers, improving normal closure, derived in lower central series, etc. My most recent pull request containing these additions just got merged and can be found here. This week I spent a lot of time on writing [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=512&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all, here’s a brief summary of my 13th (and last) week of GSoC.</p>
<ul>
<li>I continued my work on centralizers, improving normal closure, derived in lower central series, etc. My most recent pull request containing these additions just got merged and can be found <a href="https://github.com/sympy/sympy/pull/1495" target="_blank">here</a>. This week I spent a lot of time on writing better tests and developing some new test practices. The group-theoretical algorithms in the combinatorics module are getting more and more complicated, so better, cleverer and more thorough tests are needed. I came up with the following model for verification:<br/>
- since the results of the tests are very hard to compute by hand, some helper functions are needed that find the wanted object in a brute-force manner using only definitions. For example, we often look for a subgroup with certain properties. The most naive and robust approach to this is to:<br/>
- list all group elements, go over the list and check each element for the given property.<br/>
- Then, make a list of all the “good” elements and compare it (as a set) with the list of all elements of the group the function being tested returns.<br/>
Hence, a new file was created, sympy/combinatorics/testutil.py, that will host such functions. (Needless to say, they are exponential in complexity, and for example going over all the elements of SymmetricGroup(n) becomes infeasible for n larger than 10.)<br/>
- The presence of functions being used to test other functions gets us in a bit of a <a href="http://en.wikipedia.org/wiki/Quis_custodiet_ipsos_custodes%3F" target="_blank"><strong><em>Quis custodiet ipsos custodes?</em></strong></a> situation, but this is not fatal: the functions in testutil.py are extremely straightforward compared to the functions in perm_groups.py that they test, and it’s really obvious what they’re doing, so it’ll take less tests to verify <em>them. </em><br/>
- In the tests for the new functions from perm_groups.py, I introduced some comments to indicate what (and why) I’m testing. Another practice that seems to be good is to verify the algorithms for small groups (degrees 1, 2, 3) since there are a lot of corner cases there that seem to break them.</li>
<li>I started work on improving the disjoint cycle notation, namely excluding singleton cycles from the cyclic form; however, there are other changes to handling permutations that are waiting to be merged in the combinatorics module <a href="https://github.com/sympy/sympy/pull/1498" target="_blank">here</a>, so I guess I’ll first discuss my changes with <a href="https://github.com/smichr" target="_blank">Christopher</a>. Currently, I see the following two possibilities for handling the singleton cycles:<br/>
- add a <code>_size</code> attribute to the Permutation class, and then, when faced with something like <code>Permutation([[2, 3], [4, 5, 6], [8]])</code>, find the maximum index appearing in the permutation (here it’s 8) and assign the size of the permutation to that + 1. Then it remains to adjust some of the other methods in the class (after I adjusted <strong>mul</strong> so that it treats permutations of different sizes as if they leave all points outside their domain fixed, all the tests passed) so that they make sense with that new approach to cyclic forms.<br/>
- more ambitious: make a new class, <code>ExtendedArrayForm</code> or something, with a field <code>_array_form</code> that holds the usual array form of a permutation. Then we overload the <code>__getitem__</code> method so that if the index is outside the bounds of <code>self._array_form</code> we return the index unchanged. Of course, we’ll have to overload other things, like the <code>__len__</code> and <code>__str__</code> to make it behave like a list. Then instead of using a list to initialize the array form of a permutation, we use the corresponding <code>ExtendedArrayForm</code>. This will make all permutations behave as if they are acting on a practically infinite domain, and if we do it that way, we won’t have to make any changes to the methods in <code>Permutation</code> – everything is going to work as expected, no casework like <code>if len(a) &gt; len(b),...</code> will be needed. So this sounds like a rather elegant approach. On the other hand, I’m not entirely sure if it is possible to make it completely like a list, and also it doesn’t seem like a very performance-efficient decision since <code>ExtendedArrayForm</code> instances will be created all the time. (<strong>see the discussion <a href="https://github.com/sympy/sympy/pull/1498" target="_blank">here</a>).</strong></li>
<li>Still nothing on a database of groups. I looked around the web for a while but didn’t find any resources… the search continues. Perhaps I should ask someone more knowledgeable.</li>
</ul>
<p>That’s it for now, and that’s the end of my series of blog posts for the GSoC, but I don’t really feel that something has ended since it seems that my contributions to the combinatorics module will continue (albeit not that regularly : ) ). After all, it’s a lot of fun, and there are a lot more things to be implemented/fixed there! So, a big “Thank you” to everyone who helped me get through (and to) GSoC, it’s been a pleasure and I learned a lot. Goodbye!</p>
<p> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/512/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/512/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=512&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-20T14:38:23Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>Александър Макелов</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-12-21T08:00:32Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://www.catchmrbharath.in/programming/2012/08/19/gsoc-last-week</id>
    <link href="http://www.catchmrbharath.in/programming/2012/08/19/gsoc-last-week" rel="alternate" type="text/html"/>
    <title>GSoC last week</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This happens to be the last week of GSoC. The major things that I accomplished this week are</p>

<ul>
<li>Got pylab to work interactively.</li>

<li>Made more changes to the documentation of plotting module.</li>
</ul>

<p>I have a pull request for the restructured plotting module at <a href="https://github.com/sympy/sympy/pull/1468">here</a>. There has been lots of discussions on how the new plot API should look like in the pull request. The API as of now has 5 functions:</p>

<ul>
<li><code>plot_line</code> which plots 2D line plots, which I think I will change to <code>plot</code>.</li>

<li><code>plot_parametric</code> which plots 2D parametric plots.</li>

<li><code>plot3D</code> which plots 3D plots.</li>

<li><code>plot3D_parametric</code> which plots 3D parametric line plots. I think I will have to change it into <code>plot_parametric3D</code>.</li>

<li><code>plot3D_surface</code> which plots 3D parametric surfaces.</li>
</ul>

<p>The names are slightly confusing, but the alternative to these names are big. If you have any good names for 3D plots, please leave it in the comments.</p>

<p>I will have another post describing the things I learnt over this GSoC period.</p></div>
    </summary>
    <updated>2012-08-19T07:00:00Z</updated>
    <published>2012-08-19T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-10-11T13:20:19Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://blog.catchmrbharath.in/programming/2012/08/19/gsoc-last-week</id>
    <link href="http://blog.catchmrbharath.in/programming/2012/08/19/gsoc-last-week" rel="alternate" type="text/html"/>
    <title>GSoC last week</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This happens to be the last week of GSoC. The major things that I accomplished this week are</p>

<ul>
<li>Got pylab to work interactively.</li>

<li>Made more changes to the documentation of plotting module.</li>
</ul>

<p>I have a pull request for the restructured plotting module at <a href="https://github.com/sympy/sympy/pull/1468">here</a>. There has been lots of discussions on how the new plot API should look like in the pull request. The API as of now has 5 functions:</p>

<ul>
<li><code>plot_line</code> which plots 2D line plots, which I think I will change to <code>plot</code>.</li>

<li><code>plot_parametric</code> which plots 2D parametric plots.</li>

<li><code>plot3D</code> which plots 3D plots.</li>

<li><code>plot3D_parametric</code> which plots 3D parametric line plots. I think I will have to change it into <code>plot_parametric3D</code>.</li>

<li><code>plot3D_surface</code> which plots 3D parametric surfaces.</li>
</ul>

<p>The names are slightly confusing, but the alternative to these names are big. If you have any good names for 3D plots, please leave it in the comments.</p>

<p>I will have another post describing the things I learnt over this GSoC period.</p></div>
    </summary>
    <updated>2012-08-19T07:00:00Z</updated>
    <published>2012-08-19T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-10-06T05:40:18Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=484</id>
    <link href="http://amakelov.wordpress.com/2012/08/13/google-summer-of-code-2012-week-12/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 12</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of the 12th week of my GSoC: Centralizers got some more attention since there were several bugs in the implementation from last week; this also exposed a bug in .subgroup_search() as it is on sympy/master right now. Fortunately, I located it and fixed it earlier today, so the fix [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=484&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all, here’s a brief summary of the 12th week of my GSoC:</p>
<ul>
<li>Centralizers got some more attention since there were several bugs in the implementation from last week; this also exposed a bug in .subgroup_search() as it is on sympy/master right now. Fortunately, I located it and fixed it earlier today, so the fix for .subgroup_search() will be contained in my next pull request. In fact, it is just three more lines that should be added. Namely,<pre class="brush: python; wrap-lines: false;"># line 29: set the next element from the current branch and update
# accorndingly
c[l] += 1
element = ~(computed_words[l - 1])
</pre>
<p>should be replaced with</p>
<p/><pre class="brush: python; wrap-lines: false;"># line 29: set the next element from the current branch and update
# accorndingly
c[l] += 1
if l == 0:
    element = identity
else:
    element = ~(computed_words[l - 1])
</pre><p/>
<p>since we might be at the bottom level with <img alt="l=0" class="latex" src="http://s0.wp.com/latex.php?latex=l%3D0&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="l=0"/>. In this case, python doesn’t yell at you for looking up computed_words[-1] since negative indices wrap around the list in python. Yet another silly mistake that’s incredibly hard to track down! I hope that it will work properly from now on, and I’ll have to include some more tests to it.</p></li>
<li>The description of the algorithm for finding the center in polynomial time given in [1] didn’t really make sense to me, so instead a straightforward one,<br/>
<pre class="brush: python;">def center(self):
    return self.centralizer(self)
</pre><p/>
<p>was used. This can be updated later when I (or someone else) figures out the polynomial-time algorithm.</p></li>
<li>A new, faster algorithm for finding normal closures: this one uses the incremental version of Schreier-Sims, and some randomization. It’s described in [1].</li>
<li>Some applications of normal closure: the derived series, lower cenral series, the commutator of two subgroups of a group, nilpotency testing. Now we have things like this:<br/>
<pre class="brush: python; wrap-lines: false;">In [68]: from sympy.combinatorics.named_groups import *
In [69]: S = SymmetricGroup(4)
In [70]: ds = S.derived_series()
In [71]: len(ds)
Out[71]: 4
In [72]: ds[1] == AlternatingGroup(4)
Out[72]: True
In [73]: ds[2] == DihedralGroup(2)
Out[73]: True
In [74]: ds[3] == PermutationGroup([Permutation([0, 1, 2, 3])])
Out[74]: True
</pre><p/>
<p>demonstrating the well-known normal series of groups <img alt="e &lt; K_4 &lt; A_4 &lt; S_4" class="latex" src="http://s0.wp.com/latex.php?latex=e+%3C+K_4+%3C+A_4+%3C+S_4&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="e &lt; K_4 &lt; A_4 &lt; S_4"/> that solves the symmetric group on 4 letters. Note that the normal closure algorithm was already there thanks to the work of <a href="https://github.com/pernici" target="_blank">Mario</a>, I just improved it a bit and added some applications.</p></li>
<li>Moved DirectProduct() to a new file, group_constructs.py, that is planned to hold functions that treat several groups equally (for one other example, the commutator of two groups in the full symmetric group) rather than treating them in some sort of subgroup-supergroup relationship (such as .centralizer()).</li>
</ul>
<p>I wrote docstrings for the new stuff, and my current work can be found on <a href="https://github.com/amakelov/sympy/tree/week10" target="_blank">my week10 branch</a>. There will be some comprehensive test following the new additions (and I’ll need GAP to verify the results of some of them, probably). It seems that Todd-Coxeter won’t happen during GSoC since there’s just one more week; instead, I plan to focus on improving disjoint cycle notation and group databases.</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/484/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/484/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=484&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-13T15:00:09Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>Александър Макелов</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-12-21T08:00:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=251</id>
    <link href="http://rhoforsympy.wordpress.com/2012/08/13/week-12-starting-work-on-shors-algorithm/" rel="alternate" type="text/html"/>
    <title>Week 12 :  Starting work on Shor’s algorithm</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This has been a great 12 week run filled with learning and valuable experience! I believe I have accomplished most of what I had set out to do.  The only other thing pending as far as proposed tasks goes is to relocate the Tr module. This would be based on decisions that needs to be [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=251&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This has been a great 12 week run filled with learning and valuable experience! I believe I have accomplished most of what I had set out to do.  The only other thing pending as far as proposed tasks goes is to relocate the Tr module. This would be based on decisions that needs to be taken by more experienced folks here! Once, the decision is made, I don’t think this would take too much of my time. (I am estimating this based on the current approaches that have been proposed).  Therefore, I am committed to getting this done even if this goes beyond GSoC pencils down deadline which is this week!</p>
<p>So, that was all about the wrap up! So, what I am doing now?</p>
<p>~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.</p>
<p>Looking forward, I have taken up another interesting task I am excited to work on.  Past week I started working on implementing/completing Shor’s algorithm. The 2 major activities that consumed my time this week were</p>
<p>a) Understand Shor’s algorithm in more detail to help me understand what is available in the current implementation.</p>
<p>b) Review the current implementation and plan on next steps.</p>
<p>After reviewing the current implementation, I have decided to approach this task with the following smaller tasks:</p>
<p>a) Review and complete the implementation of <strong><em>QFT gate</em></strong> ( include tests, documentation), so that it can work independent of Shor’s algorithm.</p>
<p>b) Review and complete the implementation of <strong><em>CMOD gate</em></strong>. Right now, the implementation is not complete, and needs more tests too. This is the set of gates that would do the  |a mod N&gt; * |state&gt; over 2^j times for j = { 0, 1, ….2^(n-1)}</p>
<p>c) Put this all together and re-factor the current implementation (especially break down current <strong><em>period_find</em>()</strong> ) to help more detail testing.</p>
<p>d) Also, I plan to provide a argument to shor() method, to work as a <em>flag</em> to turn on detail logging as the circuit progresses.</p>
<p>All the code I am currenly reviewing and planning to work on are available on the master branch even though it is not complete.</p>
<p>Happy coding!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/251/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/251/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=251&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-13T06:00:17Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2013-01-17T11:20:36Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=384</id>
    <link href="http://scolobb.wordpress.com/2012/08/12/the-revolution-the-preview/" rel="alternate" type="text/html"/>
    <title>The Revolution (The Preview)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I continued the work on diagram embeddings and, unfortunately, I have discovered that Diagram did not actually work properly. I have written a status report E-mail to Tom, in which I briefly outine the progess. This E-mail (with some omissions) will serve as this week’s blog post, because writing a proper blog post [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=384&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I continued the work on diagram embeddings and, unfortunately, I have discovered that <tt>Diagram</tt> did not actually work properly.  I have written a status report E-mail to Tom, in which I briefly outine the progess.  This E-mail (with some omissions) will serve as this week’s blog post, because writing a proper blog post would take me at least three hours, and I would rather code right now, given the limited timeframe.</p>
<blockquote><p>
Unfortunately, I’ve got some, well, ambiguous news.</p>
<p>Remember I told you about hash-randomisation failures in computing<br/>
diagram embeddings?  Well, it turned out that diagram embeddings was<br/>
quite OK, and the problem went as far back as the Diagram class.<br/>
Essentially, I have done a really bad job implementing it at the<br/>
beginning of the summer: I wanted it to directly store all possible<br/>
morphism compositions.  However, in that implementation, I didn’t<br/>
really store all compositions, but just a part of them; which part I<br/>
stored depended on the order in which the morphisms were supplied<br/>
(severe facepalm <img alt=":-(" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif"/>  )</p>
<p>I tried thinking of some good fixes, but, as you can easily imagine,<br/>
the whole idea of storing all composites has suffered an epic<br/>
disintegration in the face of diagrams with cycles.  I am really<br/>
_really_ astonished at how this has managed to slip by me for such a<br/>
long time! <img alt=":-(" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif"/> </p>
<p>I have spent the first one third of Friday on trying to save the<br/>
existing design somehow, by carefully processing all possible edge<br/>
cases, but this has very quickly started to be abominable, and, of<br/>
course, it didn’t work.  So, I have spent the greater part of Friday<br/>
on thinking out a new Diagram.  I have spent all of yesterday, (all of<br/>
Saturday, that is), on implementing this new concept.  Basically, the<br/>
new Diagram only stores the relevant generator morphisms, but it is<br/>
still able to correctly determine and enumerate the morphisms that<br/>
belong to it.  It is also capable of determining whether it is finite<br/>
or not (i.e., whether there are cycles in the underlying directed<br/>
multigraph).  When asked for all morphisms, the new Diagram yields a<br/>
generator which acts correctly both in the finite and infinite cases.<br/>
In the finite case it produces all the morphisms of the Diagram.  This<br/>
is clearly impossible in the infinite case, but Diagram is<br/>
sufficiently clever in this case to produce the morphisms in a<br/>
BFS-like manner.  Intuitively, it will first yield all length one<br/>
morphisms, then all morphisms of length two, etc.</p>
<p>I have made some changes to the interface of the Diagram to better<br/>
reflect the new internals.  Nevertheless, the behaviour in the finite<br/>
case is the same as that of the old Diagram (modulo some property<br/>
names and minor changes, of course).</p>
<p>One bit of good news that deserves standing out in a separate<br/>
paragraph is that I only had to change _one_ line of code in<br/>
diagram_drawing.py to get it to work with the new Diagram.  (Well, I<br/>
did drop three other lines, because they were redundant), so this<br/>
radical swerve with the Diagram has left the larger part of my GSoC<br/>
work unaffected.</p>
<p>Now, I have started cherry-picking the diagram embeddings code, and I<br/>
have arrived at a conclusion that Diagram has to be further extended.<br/>
(“Extending” means adding something new, not rewriting it again.)<br/>
Namely, it is insufficient to know whether the whole Diagram is finite<br/>
or not; I really need to know whether a certain hom-set is finite or<br/>
not.  It’s not that hard to implement, and I’ve got a cool book on<br/>
graphs; however, it’s going to require some extra time.</p>
<p>Here comes the most important part of my message: I’m working at the<br/>
fullest possible cruising speed (not sprinting yet; that I’m saving<br/>
for the last 100m).  I won’t obviously have everything done tomorrow,<br/>
on Monday; however, I strongly believe that I only need another couple<br/>
days to finish the bulk of inferencing.  Provided that on Monday we<br/>
have what is referred to as _soft_ pencils-down date, I hope that I’m<br/>
still OK with the GSoC timeframe.  Further, I think I have already<br/>
mentioned a couple times that I’m going to have another couple free<br/>
weeks after GSoC, during which I will be easily able to finalise<br/>
whatever will be unfinished.  Do note, however, that I definitely<br/>
expect to have inferencing done _within_ the GSoC timeframe.</p>
<p>Conclusion: despite the rather radical direction things have taken in<br/>
the last two days, I’m _still_ more or less fine with the timing.</p>
<p>At the moment, you will not be able to see the code I’m working on on<br/>
GitHub.  The reason is that I’m juggling branches rather ninja-ily<br/>
right now, so I don’t really have the most relevant one to push<br/>
online, and they are all relatively short-lived.  I do expect to get<br/>
back to working sequentially today, and once I’ve got there, I’ll push<br/>
to ct3-commutativity to reflect the updates.</p>
<p>I’m documenting everything I do in as minute detail as possible.  I<br/>
think the Diagram class and the embeddings functionality has more<br/>
comments than actual code.  I expect this to make reviewing and later<br/>
maintenance considerably more agreeable.  Further, my commits are<br/>
almost all rather short, with acceptably long commit messages.  There<br/>
is one commit that breaks the rule, however: the commit which adds the<br/>
new Diagram.  It is one relatively large chunk of code, which replaces<br/>
the old Diagram with the new one and shows that the old tests still<br/>
pass modulo minor changes.  I have nevertheless reformatted the<br/>
history a bit to make this commit easier to review and, of course, the<br/>
code itself is just literally stuffed with comments.  All other<br/>
commits are much more like my usual ones.
</p></blockquote>
<p>Whenever I’m done with the core parts of inferencing, I will write a proper blogpost.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/384/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/384/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=384&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-12T19:16:45Z</updated>
    <category term="SymPy"/>
    <category term="category theory"/>
    <category term="commutative diagram"/>
    <category term="cycles in digraphs"/>
    <category term="deciding commutativity"/>
    <category term="diagram"/>
    <category term="diagram drawing"/>
    <category term="diagram embedding"/>
    <category term="subgraph isomorphism problem"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2013-01-17T11:20:34Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/?p=420</id>
    <link href="http://angadhsympy.wordpress.com/2012/08/12/penultimate-wee/" rel="alternate" type="text/html"/>
    <title>GSoC blog post</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Penultimate week of the GSoC period and it has been busy busy busy. In my last post I had spoken about opening a PR for LagrangesMethod and about cleaning up the PR on energy functions. (links to both are in last week’s post and I won’t repeat them here.) Much of this week was spent [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=420&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Penultimate week of the GSoC period and it has been busy busy busy.</p>
<p>In my last post I had spoken about opening a PR for LagrangesMethod and about cleaning up the PR on energy functions. (links to both are in last week’s post and I won’t repeat them here.) Much of this week was spent cleaning up both those PRs and quite extensive testing on LagrangesMethod. The testing has been mostly successful. I shall explaing why ‘mostly’ in the a bit. The PR for the renergy functions has been merged and I’m just waiting for approval from ‘the boss’ so that LagrangesMethod can be merged too.</p>
<p>I would like to direct the reader to my <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud%3A-sympy.physics.mechanics">proposal</a>. In it I had said that I would write this class only for unconstrained systems. The idea was to modify this to be a ‘complete’ class post the GSoC period. But as we got into the week to begin working on this class, Gilbert and I decided that we would make it a full fledged Lagrange class; that could handle any kind of constraint on mechanical systems. Constraints on mechanical systems are basically  of 2 types – configuration constraints (or holonomic constraints) and velocity constraints (or non-holonomic constraints). Depending on the methods used (Newton-Euler or Lagrange or Kane’s method and so on) these constraint equations are accounted for differently In the case of Lagrange’s method, there are additional terms due to these constraints that result in the introduction of the Lagrange multipliers. So, basically, repeating myself for the sake of clairty, one can now obtain the equations of motion in sympy.physics.mechanics using LagrangesMethod for any kind of system. I would even like to go out on a limb (quite literally under my current circumstances <img alt=":P" class="wp-smiley" src="http://s2.wp.com/wp-includes/images/smilies/icon_razz.gif"/> ) and claim that it could be made use of for more generic applications involving ‘The Method of Lagrange Multipliers’ provided the user has the Lagrangian and constraint equations. (The documentation will however be limited to the domain of mechanical systems but shouldn’t be too hard to translate into something more generic for a user). The class also handles nonconservative forces thus making it a complete class.</p>
<p>In terms of testing each of these functionalities, I feel the tests are pretty thorough. I have tested the nonconservative force handling of the class on a simple spring-mass-damper system. I have tested the handling of the constraint equations using the famous ‘disc on an inclined plane’ test problem. Tests on more complex 3d systems have been performed like the rolling disc (more on this later). And then tests on a multibody system have been verified for a double pendulum. All of these work correctly; results have been compared to solutions by ahnd.</p>
<p>So with all of this down, why did I say it was “mostly successful”? Well, as it turns out, the tests work perfectly well when limited to problems involving planar motion. The results match up to those obtained by hand. But the results from the class get extremely nasty when dealing with more complex systems; I have implemented the rolling disc in two separate cases. In one test, I use the minimal set of generalized coordinates and the correct eoms are generated. But in another case I tried to use the non-minimal set of GCs and the equations generated are near impossible to comprehend (or I haven’t found the best way to deal with them yet). A big contribution of this messiness is due to the way in which Lagranges approach requires the definition of generalized speeds. In his approach, it is erquired for the generlized speeds to be ‘simple’ i.e. the gen. speeds are just derivatives of the gen coords. This is different in Kane’s approach where the generalized speeds can but needn’t necessarily be ‘simple’. From my experience, Kane’s generalized speeds are defined in a manner which make physical sense. This definitely validates why most dynamicists today (or so I have heard) prefer to choose Kane’s method on complex multi-body systems. The only way I can think of circumventing this situation in teh ‘LagrangesMethod’ class right now is using the minimal set of GCs for well known systems like the rolling disc and hope for the best.</p>
<p>Having all the additional functionality in this class and also playing with the rolling disc in particular has definitely led to a lot of insight but also taken a good chunk of time away from a period I wanted to dedicate to the ‘code output section’ which I have been unable to get started on. It looks like I will be unable to meet that one goal by the ‘hard’ pencils down date as I complete and fine tune the documentation (pending final approval of the Lagrange PR, of course). But I do feel that the time spent on Lagrange has been for the good. The code, I personally feel, is easy to read and appears to be easy to use. With people’s comments I was able to weed out all the unnecessary stuff. It is also ‘complete’ like I previously highlighted. I will continue to work on ‘code output’ post the GSoC period though as it’s usefulness is undeniable and also because of a development of a general sense of interest in coding (surprise surprise!).</p>
<p>Anyhow, apart from this, the other stuff I got done this week- I wrote up minor functions to compute a Lagrangian, changed how the potential energy function behaves. That’s it for this week. See you next week, one last time.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/420/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/420/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=420&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-12T01:01:57Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2013-01-17T11:20:35Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=555</id>
    <link href="http://blog.krastanov.org/2012/08/08/graph-of-the-relations-between-objects-in-the-diffgeom-module/" rel="alternate" type="text/html"/>
    <title>Graph of the Relations between Objects in the diffgeom Module</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This graph, besides showing naively in a rather simplistic way the structure of the theory of differential geometry (and most of what I have implemented in the diffgeom module), brings attention to the one non-trivial part of the module on which I have spent most of my time lately. Namely, implementing covariant derivatives. All directional [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=555&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://krastanov.files.wordpress.com/2012/08/painful_christoffel_symbols.png"><img alt="" class="aligncenter size-full wp-image-556" height="450" src="http://krastanov.files.wordpress.com/2012/08/painful_christoffel_symbols.png?w=600&amp;h=450" title="painful_christoffel_symbols" width="600"/></a></p>
<p>This graph, besides showing naively in a rather simplistic way the structure of the theory of differential geometry (and most of what I have implemented in the diffgeom module), brings attention to the one non-trivial part of the module on which I have spent most of my time lately. Namely, implementing covariant derivatives.</p>
<p>All directional derivatives are defined as a limiting procedure on a transport operator. Besides the Lie derivatives which use a certain transport operator that is easy to express in a coordinate free way, all other derivatives, called covariant derivatives have to be expressed using something called Christoffel symbols. And these are the ugly coordinate-dependent sources of pain, as the module structure becomes very cumbersome when such dependence must be accounted for. Thankfully, I think I have found a nice way to implement them in a new CovariantDerivativeOperator class on its own, that will contain all the logic in the same way in which the Base*Field classes do it. This will also require rewrite of the LieDerivative into a LieDerivativeOperator class.</p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=555&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-08T11:21:46Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="covariant derivative"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://blog.krastanov.org</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://blog.krastanov.org/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.krastanov.org" rel="alternate" type="text/html"/>
      <link href="http://blog.krastanov.org/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://blog.krastanov.org/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2013-01-16T22:00:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=445</id>
    <link href="http://amakelov.wordpress.com/2012/08/06/google-summer-of-code-2012-week-11/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 11</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of the 11th week of my GSoC. Yay! Subgroup searching now works with the use of .stabilizer(), as I discussed in my previous blog post. Surprisingly, the running time is similar to that of the flawed version using .baseswap() (whenever the one using .baseswap() works), you can play around [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=445&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all, here’s a brief summary of the 11th week of my GSoC.</p>
<ul>
<li>Yay! Subgroup searching now works with the use of .stabilizer(), as I discussed in <a href="http://amakelov.wordpress.com/2012/07/30/google-summer-of-code-2012-week-10/" target="_blank">my previous blog post</a>. Surprisingly, the running time is similar to that of the flawed version using .baseswap() (whenever the one using .baseswap() works), you can play around with the two versions on my <a href="https://github.com/amakelov/sympy/tree/week6" target="_blank">week6</a> (has a bug, using .baseswap()) and <a href="https://github.com/amakelov/sympy/tree/week9" target="_blank">week9</a> (seems to work, using .stabilizer()) branches.</li>
<li>Consequently, I made a <a href="https://github.com/sympy/sympy/pull/1454" target="_blank">new pull request</a> containing the incremental version of Schreier-Sims, the remove_gens utility for getting rid of redundant generators in a strong generating set, and the new (working) subgroup_search algorithm. You’re most welcome to help with the review!</li>
</ul>
<ul>
<li>I worked on several applications of subgroup_search() and the incremental Schreier-Sims algorithm. Namely, the pointwise stabilizer of a set of points (via the incremental Schreier-Sims algorithm):</li>
</ul>
<p/><pre class="brush: python; wrap-lines: false;">In [4]: from sympy.combinatorics.named_groups import *
In [5]: A = AlternatingGroup(9)
In [6]: G = A.pointwise_stabilizer([2, 3, 5])
In [7]: G == A.stabilizer(2).stabilizer(3).stabilizer(5)
Out[7]: True
</pre><p/>
<p>(this is much faster than the naive implementation using .stabilizer() repeatedly), and the centralizer of a group <img alt="H" class="latex" src="http://s0.wp.com/latex.php?latex=H&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="H"/> inside a group <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="G"/>:</p>
<p/><pre class="brush: python; wrap-lines: false;">In [11]: from sympy.combinatorics.named_groups import *
In [12]: S = SymmetricGroup(6)
In [13]: A = AlternatingGroup(6)
In [14]: C = CyclicGroup(6)
In [15]: S_els = list(S.generate())
In [16]: G = S.centralizer(A)
In [17]: G.order()
Out[17]: 1
In [18]: temp = [[el*gen for gen in A.generators] == [gen*el for gen in A.generators] for el in S_els]
In [19]: temp.count(False)
Out[19]: 719
In [20]: temp.count(True)
Out[20]: 1
In [21]: G = S.centralizer(C)
In [22]: G == C
Out[22]: True
In [23]: temp = [[el*gen for gen in C.generators] == [gen*el for gen in C.generators] for el in S_els]
In [24]: temp.count(True)
Out[24]: 6
</pre><p/>
<p>(it takes some effort to see that these calculations indeed prove that .centralizer() returned the needed centralizer). The centralizer algorithm uses a pruning criterion described in [1], and even though it’s exponential in complexity, it’s fast for practical purposes. Both of the above functions are available (albeit not documented yet) on <a href="https://github.com/amakelov/sympy/tree/week10" target="_blank">my week10 branch</a>.</p>
<ul>
<li>The next steps are an algorithm for the centre in polynomial time, and an algorithm to find the intersection of two subgroups! And after that, I hope to be able to implement the Todd-Coxeter algorithm…</li>
</ul>
<p>That’s it for now!</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/445/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/445/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=445&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-06T14:26:08Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>Александър Макелов</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-12-21T08:00:32Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=357</id>
    <link href="http://scolobb.wordpress.com/2012/08/05/the-embedding/" rel="alternate" type="text/html"/>
    <title>The Embedding</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I have started some actual code of the derivation of commutativity of diagrams and implications. The first half of the week has gone to splitting Diagram into Diagram and Implication, as outlined in the previous post. Nothing really unexpected happened during that part, so there isn’t much to say about it, save for [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=357&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I have started some actual code of the derivation of commutativity of diagrams and implications.  The first half of the week has gone to splitting <tt>Diagram</tt> into <tt>Diagram</tt> and <tt>Implication</tt>, as outlined in the <a href="http://scolobb.wordpress.com/2012/07/29/the-reflection-about-inference/">previous post</a>.  Nothing really unexpected happened during that part, so there isn’t much to say about it, save for the thing that the code has become clearer and better organised.  Furthermore, I have gained a better understanding of some corner cases, as well as implemented more robust handling for those corner cases.</p>
<p>The second half of the week was considerably more exciting and thought intensive: it was related to finding diagram embeddings.  As it should be clear from the <a href="http://scolobb.wordpress.com/2012/07/29/the-reflection-about-inference/">last post</a>, this functionality lies at the foundation of deciding the commutativity of diagrams and implications.  In what follows, I will refer to the diagram which we need to embed as to the <em>pattern</em>, and  to the diagram into which we need to embed as to the <em>model</em>.  This seems to be an almost universally accepted terminology and comes from the fact that finding subgraph isomorphisms often lies at the base of various pattern matching implementations.</p>
<p>I have started by selecting and analysing the excellent paper by J. R. Ullman, [Ullm1976], which describes a very clear way of enumerating all possible graph embeddings.  This solution, however, was not exactly what I needed.  First of all, the algorithm described in details in [Ullm1976] is actually meant for <em>undirected</em> graphs, whereas one can clearly see arrows in diagrams.  Furthermore (a thought that has occurred to me quite late), diagrams, are actually multigraphs, in the sense that there can be more than one morphism between two objects.  Yet further, a diagram embedding must preserve morphism properties, in the sense that the embedding must map a morphism in the pattern to a morphism in the model, which has exactly the same properties as the morphism in the pattern.</p>
<p>I attempted to find whether someone has addressed the directed multigraph embedding problem before; however, I haven’t managed to find any references on the Internet, so I started thinking on adapting Ullman’s solution to my case.  The first thing I figured out was that I could reduce the directed multigraph embedding problem to a directed graph embedding problem.  Indeed, take a diagram and flatten down all multiple morphisms <em>going in the same direction</em> between the same to objects to one <em>directed</em> edge between these two objects.  Then construct directed graph embeddings and, for each such embeddings, for each directed edge <img alt="e" class="latex" src="http://s0.wp.com/latex.php?latex=e&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="e"/> of the flattened pattern, construct injective, property-preserving,  mappings from the set of morphisms of the pattern, which were flattened to <img alt="e" class="latex" src="http://s0.wp.com/latex.php?latex=e&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="e"/>, into the set of morphisms associated with the edge in the flattened model, to which <img alt="e" class="latex" src="http://s0.wp.com/latex.php?latex=e&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="e"/> is mapped by the subgraph isomorphism.  (These mappings are actually property-preserving embeddings in their own right, but I won’t call them so, since I’m good and I understand that the blog post has just become a bit unclear, so to say <img alt=":-D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/>  )</p>
<p>Let’s see an example.  Consider the diagram comprising two different morphisms: <img alt="f:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f:A\rightarrow B"/> and <img alt="g:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=g%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g:A\rightarrow B"/>, where <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f"/> has the property <tt>golden</tt>; this diagram is going to be out pattern.  Now, consider the model: a diagram comprising three morphisms <img alt="\alpha:C\rightarrow D" class="latex" src="http://s0.wp.com/latex.php?latex=%5Calpha%3AC%5Crightarrow+D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\alpha:C\rightarrow D"/>, <img alt="\beta:C\rightarrow D" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta%3AC%5Crightarrow+D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\beta:C\rightarrow D"/>, and <img alt="\gamma:C\rightarrow D" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cgamma%3AC%5Crightarrow+D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\gamma:C\rightarrow D"/>, in which <img alt="\beta" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\beta"/> has the property <tt>golden</tt>.  Quite obviously, all of our <em>property-preserving</em> embeddings should map <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f"/> to <img alt="\beta" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\beta"/>, while $\latex g$ can be mapped to either <img alt="\alpha" class="latex" src="http://s0.wp.com/latex.php?latex=%5Calpha&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\alpha"/> or <img alt="\beta" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\beta"/>.  Also note that the flattened pattern in this case is the graph consisting of a single edge <img alt="(A,B)" class="latex" src="http://s0.wp.com/latex.php?latex=%28A%2CB%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(A,B)"/>, while the flattened model is another one-edge graph, <img alt="(C,D)" class="latex" src="http://s0.wp.com/latex.php?latex=%28C%2CD%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(C,D)"/>.  More complex diagrams are treated in a similar fashion: flatten the pattern and the model to directed graphs, find directed graph embeddings, and then find the property-preserving morphism mappings.</p>
<p>There was another slight surprise underway, however.  Ullman does describe some of the modifications which will make the original algorithm capable of constructing directed graph embeddings, however, he has apparently forgot to describe one of them.  I will give some definitions before going into more detail.  Ullman uses <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> to refer to the adjacency matrix of the pattern, <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> to refer to the adjacency matrix of the model, and <img alt="M" class="latex" src="http://s0.wp.com/latex.php?latex=M&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M"/> to refer to the matrix representing a mapping of the vertices of the pattern into the vertices of the model; <img alt="M_{ij} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=M_%7Bij%7D+%3D+1&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M_{ij} = 1"/> means that vertex <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="i"/> in the pattern is mapped to vertex <img alt="j" class="latex" src="http://s0.wp.com/latex.php?latex=j&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="j"/> in the model.</p>
<p>Now, for given <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/>, <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/>, and <img alt="M" class="latex" src="http://s0.wp.com/latex.php?latex=M&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M"/>, compute <img alt="C = M (M B)^T" class="latex" src="http://s0.wp.com/latex.php?latex=C+%3D+M+%28M+B%29%5ET&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C = M (M B)^T"/>.  Condition (1) in [Ullm1976] states that, if <img alt="a_{ij} = 1\Rightarrow c_{ij} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=a_%7Bij%7D+%3D+1%5CRightarrow+c_%7Bij%7D+%3D+1&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="a_{ij} = 1\Rightarrow c_{ij} = 1"/>, for any vertices <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="i"/> and <img alt="j" class="latex" src="http://s0.wp.com/latex.php?latex=j&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="j"/> of the patern, then <img alt="M" class="latex" src="http://s0.wp.com/latex.php?latex=M&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M"/> represents an embedding.  (As usual, <img alt="a_{ij}" class="latex" src="http://s0.wp.com/latex.php?latex=a_%7Bij%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="a_{ij}"/> are elements of <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> and <img alt="c_{ij}" class="latex" src="http://s0.wp.com/latex.php?latex=c_%7Bij%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="c_{ij}"/> are elements of <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C"/>).  When I tried to actually use this criterion for a directed graph, I found that, apparently, <img alt="C^T" class="latex" src="http://s0.wp.com/latex.php?latex=C%5ET&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C^T"/> should be used, instead of <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C"/>.  The formal explanation follows.  By abuse of terminology, I will use “pattern” and “model” to refer to the flattened pattern and flattened model as well.</p>
<p>Let <img alt="D = M B" class="latex" src="http://s0.wp.com/latex.php?latex=D+%3D+M+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="D = M B"/>.  <img alt="d_{ij} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=d_%7Bij%7D+%3D+1&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="d_{ij} = 1"/> means that <img alt="\exists! k . (m_{ik} = 1 \mbox{ and } b_{kj} = 1)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cexists%21+k+.+%28m_%7Bik%7D+%3D+1+%5Cmbox%7B+and+%7D+b_%7Bkj%7D+%3D+1%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\exists! k . (m_{ik} = 1 \mbox{ and } b_{kj} = 1)"/>, where <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/> is a vertex of the model.  In other words, this means that the vertex <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="i"/> of the pattern is mapped to a unique vertex <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/> of the model, such that in the model there exists the (directed) edge <img alt="(k, j)" class="latex" src="http://s0.wp.com/latex.php?latex=%28k%2C+j%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(k, j)"/>.  Obviously, if <img alt="d^T_{ij}" class="latex" src="http://s0.wp.com/latex.php?latex=d%5ET_%7Bij%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="d^T_{ij}"/> is an element of <img alt="D^T" class="latex" src="http://s0.wp.com/latex.php?latex=D%5ET&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="D^T"/>, the role of the indices is reversed, that is: the vertex <img alt="j" class="latex" src="http://s0.wp.com/latex.php?latex=j&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="j"/> of the pattern is mapped to a unique vertex <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/> of the model, such that in the model there exists the (directed) edge <img alt="(k, i)" class="latex" src="http://s0.wp.com/latex.php?latex=%28k%2C+i%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(k, i)"/>.</p>
<p>Now, <img alt="c_{ij} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=c_%7Bij%7D+%3D+1&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="c_{ij} = 1"/> means that <img alt="\exists! t . (m_{it} = 1 \mbox{ and } d^T_{tj} = 1)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cexists%21+t+.+%28m_%7Bit%7D+%3D+1+%5Cmbox%7B+and+%7D+d%5ET_%7Btj%7D+%3D+1%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\exists! t . (m_{it} = 1 \mbox{ and } d^T_{tj} = 1)"/>.  Deciphering the meanings of the values of the elements of these matrices, this means that the vertex <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="i"/> of the pattern is mapped to a vertex <img alt="t" class="latex" src="http://s0.wp.com/latex.php?latex=t&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="t"/> of the model, vertex <img alt="j" class="latex" src="http://s0.wp.com/latex.php?latex=j&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="j"/> of the pattern is mapped to a vertex <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/> of the model, such that in the model there is the edge <img alt="(k, t)" class="latex" src="http://s0.wp.com/latex.php?latex=%28k%2C+t%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(k, t)"/>.  Now, suppose there is an edge <img alt="(i, j)" class="latex" src="http://s0.wp.com/latex.php?latex=%28i%2C+j%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(i, j)"/> in the pattern.  <img alt="c_{ij} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=c_%7Bij%7D+%3D+1&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="c_{ij} = 1"/> means <img alt="M" class="latex" src="http://s0.wp.com/latex.php?latex=M&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M"/> maps <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="i"/> to <img alt="t" class="latex" src="http://s0.wp.com/latex.php?latex=t&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="t"/> and <img alt="j" class="latex" src="http://s0.wp.com/latex.php?latex=j&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="j"/> to <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/>, such that the model contains the edge <img alt="(k, t)" class="latex" src="http://s0.wp.com/latex.php?latex=%28k%2C+t%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(k, t)"/>.  That is, the condition (1) as stated in [Ullm1976] and applied to directed graphs checks that <img alt="M" class="latex" src="http://s0.wp.com/latex.php?latex=M&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M"/> actually <em>reverses</em> the direction of edges!  Therefore, one must actually use <img alt="C^T" class="latex" src="http://s0.wp.com/latex.php?latex=C%5ET&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C^T"/> to check for embeddings.</p>
<p>Now, since the original algorithm in [Ullm1976] was designed for <em>undirected</em> graphs, this extra transposition did not matter, and I think this is the reason why Ullman does not mention it.</p>
<p>I have implemented all the things I have described so far, so diagram embeddings kinda work <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  I have played with python generators a bit, so the code only produces embeddings on the as-needed basis.  I did that because I thought of the situation when any diagram embedding will suffice, but also because using generators has resulted in what I believe to be more elegant code.  The code abounds in comments, so I think it shouldn’t be a problem to comprehend for someone different from myself.  I don’t have a formal proof for this statement, however, so, I guess, Tom is going to be the test subject for this supposition ^_^</p>
<p>There are still a couple things to do, though.  First of all Ullman shows a nice optimisation to his algorithm; it looks pretty simple, so I’ll add it.  I will then write a couple more tests, including some crash tests involving complete graphs.  I will also have to rename the function which does all this magic from <tt>subdiagram_embeddings</tt> to <tt>diagram_embeddings</tt>, for obvious (I hope <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  ) reasons.</p>
<h3>References</h3>
<p>[Ullm1976] J. R. Ullman, An Algorithm for Subgraph Isomorphism, J. Association of Computing Machinery, March, 1976, 16, 31–42.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/357/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/357/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=357&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-05T11:29:33Z</updated>
    <category term="SymPy"/>
    <category term="category theory"/>
    <category term="diagram embedding"/>
    <category term="graph embedding"/>
    <category term="subgraph isomorphism problem"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2013-01-17T11:20:34Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://www.catchmrbharath.in/programming/2012/08/05/gsoc-week-11</id>
    <link href="http://www.catchmrbharath.in/programming/2012/08/05/gsoc-week-11" rel="alternate" type="text/html"/>
    <title>GSOC week 11</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I got my adaptive sampling branch merged last week. Now the plots are sampled adaptively and is more accurate. I also added a lot of tests to the implicit plotting branch and the coverage now is greater than 90%.</p>

<p>One of the major things decided in the previous week was to restructure the plot function. Presently <code>plot</code> is a single function, which depending on its input, renders an 2d or an 3d plot. Though it plots the right kind of plot, the <code>plot</code> function is quite complex and it was decided to split the plot function into smaller functions that plots a particular type of plot. I tried an approach where all 2D plots are plotted by a <code>plot2d</code> function, the 3D plots by <code>plot3D</code> and the existing <code>plot_implicit</code> plots to plot regions and implicit equations. Aaron mentioned that the API is still very complex as I was using tuples and lists to differentiate between a parametric plot and a 2d line plot and he was right. It is a bit complex and it was decided to have a functions for each kind of plot.</p>

<p>I think i can have the new plot functions as an PR by next week and I would like to try getting a Mayavi backend ready by the end of my GSoC period.</p>

<p>I forgot to mention why I deviated from my what I said I would do in my GSoC application. I tried getting a svgfig backend ready for almost one and a half week, and it was quite difficult. svgfig is not being updated and I had a hard time getting the axis ticks labelling to work most of the time. I wrote to the project maintainer many times and he helped me with a lot of things, but the library was not polished enough to use it with Sympy Live. So plotting for SymPy Live should be attempted with a javascript plotting library rather than a python backend. If we get matplotlib support on GAE, then it would be awesome.</p></div>
    </summary>
    <updated>2012-08-05T07:00:00Z</updated>
    <published>2012-08-05T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-10-11T13:20:19Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/08/05/gsoc-week-11</id>
    <link href="http://catchmrbharath.github.com/programming/2012/08/05/gsoc-week-11" rel="alternate" type="text/html"/>
    <title>GSOC week 11</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I got my adaptive sampling branch merged last week. Now the plots are sampled adaptively and is more accurate. I also added a lot of tests to the implicit plotting branch and the coverage now is greater than 90%.</p>

<p>One of the major things decided in the previous week was to restructure the plot function. Presently <code>plot</code> is a single function, which depending on its input, renders an 2d or an 3d plot. Though it plots the right kind of plot, the <code>plot</code> function is quite complex and it was decided to split the plot function into smaller functions that plots a particular type of plot. I tried an approach where all 2D plots are plotted by a <code>plot2d</code> function, the 3D plots by <code>plot3D</code> and the existing <code>plot_implicit</code> plots to plot regions and implicit equations. Aaron mentioned that the API is still very complex as I was using tuples and lists to differentiate between a parametric plot and a 2d line plot and he was right. It is a bit complex and it was decided to have a functions for each kind of plot.</p>

<p>I think i can have the new plot functions as an PR by next week and I would like to try getting a Mayavi backend ready by the end of my GSoC period.</p>

<p>I forgot to mention why I deviated from my what I said I would do in my GSoC application. I tried getting a svgfig backend ready for almost one and a half week, and it was quite difficult. svgfig is not being updated and I had a hard time getting the axis ticks labelling to work most of the time. I wrote to the project maintainer many times and he helped me with a lot of things, but the library was not polished enough to use it with Sympy Live. So plotting for SymPy Live should be attempted with a javascript plotting library rather than a python backend. If we get matplotlib support on GAE, then it would be awesome.</p></div>
    </summary>
    <updated>2012-08-05T07:00:00Z</updated>
    <published>2012-08-05T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-19T07:40:29Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://blog.catchmrbharath.in/programming/2012/08/05/gsoc-week-11</id>
    <link href="http://blog.catchmrbharath.in/programming/2012/08/05/gsoc-week-11" rel="alternate" type="text/html"/>
    <title>GSOC week 11</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I got my adaptive sampling branch merged last week. Now the plots are sampled adaptively and is more accurate. I also added a lot of tests to the implicit plotting branch and the coverage now is greater than 90%.</p>

<p>One of the major things decided in the previous week was to restructure the plot function. Presently <code>plot</code> is a single function, which depending on its input, renders an 2d or an 3d plot. Though it plots the right kind of plot, the <code>plot</code> function is quite complex and it was decided to split the plot function into smaller functions that plots a particular type of plot. I tried an approach where all 2D plots are plotted by a <code>plot2d</code> function, the 3D plots by <code>plot3D</code> and the existing <code>plot_implicit</code> plots to plot regions and implicit equations. Aaron mentioned that the API is still very complex as I was using tuples and lists to differentiate between a parametric plot and a 2d line plot and he was right. It is a bit complex and it was decided to have a functions for each kind of plot.</p>

<p>I think i can have the new plot functions as an PR by next week and I would like to try getting a Mayavi backend ready by the end of my GSoC period.</p>

<p>I forgot to mention why I deviated from my what I said I would do in my GSoC application. I tried getting a svgfig backend ready for almost one and a half week, and it was quite difficult. svgfig is not being updated and I had a hard time getting the axis ticks labelling to work most of the time. I wrote to the project maintainer many times and he helped me with a lot of things, but the library was not polished enough to use it with Sympy Live. So plotting for SymPy Live should be attempted with a javascript plotting library rather than a python backend. If we get matplotlib support on GAE, then it would be awesome.</p></div>
    </summary>
    <updated>2012-08-05T07:00:00Z</updated>
    <published>2012-08-05T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-10-06T05:40:18Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/2012/08/04/gsoc-blog-post-58/</id>
    <link href="http://angadhsympy.wordpress.com/2012/08/04/gsoc-blog-post-58/" rel="alternate" type="text/html"/>
    <title>GSoC Blog Post</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So, in last week’s post I had said that the Lagrange class had neared completion. By mid-week I had it functional, so I opened a discussion on the mailing list asking for suggestions to improve the class. Several people in the group suggested that it’d be better to supply all the parameters on initialization. At first I was [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=419&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So, in last week’s post I had said that the Lagrange class had neared completion. By mid-week I had it functional, so I opened a discussion on the <a href="https://groups.google.com/forum/?fromgroups#!topic/sympy/LgSJPLgWmik">mailing list</a> asking for suggestions to improve the class. Several people in the group suggested that it’d be better to supply all the parameters on initialization. At first I was loath to make this change. This was for the following few reasons-</p>
<ol>
<li>My primary concern was that I felt it was taking away from the clarity in generating the equations of motion. I have spoken about that in some detail in the conversation on the group page about how I feel dynamicists would probably prefer typing an extra couple lines as long as the procedure to obtain the equations of motion feel similar to the work done by hand. I’m a a fan of the (possibly false) sense of security that comes from bookkeeping even whilst on a computer. Of course, I had to accede that it made no sense to have so many methods when everything could be passed at initialization. The argument that users would essentially have to memorize a sequence or procedure was a good one.</li>
<li>The other thing was that I felt was that this was making the structure of the ‘Lagrange’ class tremendously different from the ‘Kane’ class. But after discussions with Luke, Jason and Gilbert it became pretty apparent that even they felt that it might not have been the best way to implement that class. At one point I too felt like it was little weird that I was creating so many little methods which could’ve been merged into the initialization of the class itself. But I was just concentrating on staying true to the current structure of things in the mechanics package.</li>
<li>And the final reason for my apprehension was that I would have to revamp the whole method after having spent quite some time on it.</li>
</ol>
<p>But it was very clear after a point that things had to change. So, I spent a good chunk of time making the required changes.</p>
<p>Also, we decided on, what I feel is, a more appropriate name for the class changing it from ‘Lagrange’ to ‘LagrangesMethod’. Most of the equation derivation techniques in dynamics have the ‘Method’ attached to the founder’s name. It made even more sense for this class because Lagrange’s contributions are numerous so just calling a class ‘Lagrange’ could lead to some ambiguity.</p>
<p>Rewriting the class also helped me hone my Python skills some more. I had come across the keyword arguments construct several times in my preparation for the summer of code but I was a little reluctant to use it. It was probably because it was something that felt so alien to me as I have never seen something like that in my fledgling programming career. But with great explanations on the groups message (linked above), things were made clearer as to how it should be done.</p>
<p>So having rewritten the class, I added the docstrings for it. I’m not too pleased with that part right now, but I’m confident it will get better with more input on the <a href="https://github.com/sympy/sympy/pull/1460#issuecomment-7499946">PR</a> discussion.</p>
<p>So having opened that PR, I thought I would get back to working on the documentation as I had planned. But I ended up going off on a tangent with the discussion that was sparked on <a href="https://github.com/sympy/sympy/pull/1407/files#r1307146">PR 1407</a> which is the stuff that I have added on the energy functions. I spent a good chunk of time going through that and almost completely changing the way the ‘kinetic_energy’ function works.</p>
<p>On that same PR, there was a discussion about how a more readable error should be generated if a user calls the ‘potential_energy’ property for either a Particle or RigidBody without having first set the potential energy using the ‘set_potential_energy’ method. What at the time seemed an innocuous thing to repair became a little interesting challenge for me. Without going into too many more details, I was pleased to have found a relatively simple fix with the ‘callable’ function in Python with the help of the online forum ‘Stack Overflow’.</p>
<p>Having handled most of the recommendations on PR1407, I decided to skip on the documentation for the time being and returned to “complete” what would be the most important part relatied to the “LagrangesMethod” class- the test! While writing the class, I had written a little dummytest to check for the little tihngs but I hadn’t subjected a real dynamical system to the ultimate test (pun intended). I decided to test the well known ‘disc rolling down an inclined plane’ problem. Not to generate any suspense, but I would like to point out that in my proposal I had said that I would only concentrate on unconstrained systems. But Gilbert and I spent a little more time to make the ‘LagrangesMethod’ class more useful and complete. The class should now be able to handle any system i.e. constrained or unconstrained. A lot of the credit goes to Gilbert for helping me through the numerous confusions I had with the implementation of the constrained systems. But back to the test. I picked that system because it has a configuration constraint and we handle configuration constraints a little unconventionally in this class. I was a little anxious about how the results for this would turn out but ti worked like a charm. With the one test that I have written, which I think is a pretty good system to test, it appears that the ‘LagrangesMethod’ class works like a charm.</p>
<p>Anyhow, it’s now time to get some shuteye and more importantly rest the leg as I have been a little cavalier with it in the last couple of days. Until next week.</p>
<p> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/419/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/419/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=419&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-04T15:24:03Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2013-01-17T11:20:35Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=235</id>
    <link href="http://rhoforsympy.wordpress.com/2012/08/03/week-11-fidelity-of-quantum-states/" rel="alternate" type="text/html"/>
    <title>Week 11:  Fidelity of quantum states</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As discussed in my previous weeks report, this week I started addressing some of the issues in the pending PR’s and all the pending PRs were merged! In addition to getting the pending PRs accepted, I have stated working on 2 other tasks. One of them, that was completed is the feature to compute Fidelity [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=235&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As discussed in my previous weeks report, this week I started addressing some of the issues in the pending PR’s and all the pending PRs were merged!</p>
<p>In addition to getting the pending PRs accepted, I have stated working on 2 other tasks. One of them, that was completed is the feature to compute Fidelity (<a href="https://github.com/sympy/sympy/pull/1459">PR 1459</a>) of quantum states.  Some screen-shots follow (taken from notebook examples available with code base). Information regarding fidelity can be found at these 2 wikis: <a href="http://en.wikipedia.org/wiki/Fidelity_of_quantum_states">1</a>, <a href="http://www.quantiki.org/wiki/Fidelity">2</a></p>
<p>For the next week, my plan is to finish up work on the implementation of Shor’s algorithm available <a href="https://github.com/addisonc/sympy/blob/addison-main/sympy/physics/quantum/shor.py">here</a>.</p>
<p>Here are some examples of using the fidelity function:</p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/08/fidelity_ket.png"><img alt="" class="alignleft size-full wp-image-238" height="382" src="http://rhoforsympy.files.wordpress.com/2012/08/fidelity_ket.png?w=500&amp;h=382" title="fidelity_ket" width="500"/></a></p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/08/fidelity-qubit2.png"><img alt="" class="alignleft size-full wp-image-243" height="369" src="http://rhoforsympy.files.wordpress.com/2012/08/fidelity-qubit2.png?w=500&amp;h=369" title="fidelity-qubit" width="500"/></a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/235/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/235/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=235&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-03T21:19:25Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2013-01-17T11:20:36Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=551</id>
    <link href="http://blog.krastanov.org/2012/08/02/the-diffgeom-module-status-report/" rel="alternate" type="text/html"/>
    <title>The diffgeom Module – Status Report</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I have written already a few posts about the theory behind the module, the structure of the module, etc. However, besides some rare examples, I have not described in much details how the work progresses. So here is a short summary (check the git log for more details): The basics about coordinate systems and fields [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=551&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have written already a few posts about the theory behind the module, the structure of the module, etc. However, besides some rare examples, I have not described in much details how the work progresses. So here is a short summary (check the git log for more details):</p>
<ul>
<li>The basics about coordinate systems and fields are already in. There are numerous issues with all the simplify-like algorithms inside SymPy, however they are slowly ironed out.</li>
<li>Some simplistic methods for work with integral curves are implemented.</li>
<li>The basics of tensor/wedge products are in. Many simplification routines can be added. Contraction between tensor products and vectors is possible (special case of “lowering of an index”).</li>
<li>Over-a-map, pushforwards and pullbacks are not implemented yet.</li>
<li>Instead of them I have focused my work on derivatives and curvature tensors. For the moment work on these can be done in a limited coordinate-dependent way. A longer post explaining the theory is coming and with it an implementation slightly less dependent on coordinates (working with Christoffel symbols is a pain).</li>
<li>Hodge star operator – still not implemented.</li>
</ul>
<p>An example that I want to implement is a theorem that in irrotational cosmology isotropy implies homogeneity. Doing this will be the first non-trivial example in this module.</p>
<p>A serendipitous detour from the project was my work on the differential equations solver. Aaron had implemented a very thorough solver for single equations. I had tried to extend it in a few simple ways in order to work with systems of ODEs and initial conditions. However this led me to Jordan forms of matrices, generalized eigenvectors and a bunch of interesting details on which I work in my free time (especially this week).</p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=551&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-01T22:59:47Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://blog.krastanov.org</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://blog.krastanov.org/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.krastanov.org" rel="alternate" type="text/html"/>
      <link href="http://blog.krastanov.org/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://blog.krastanov.org/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2013-01-16T22:00:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=429</id>
    <link href="http://amakelov.wordpress.com/2012/07/30/google-summer-of-code-2012-week-10/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 10</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of what I’ve been doing during the 10th week of my GSoC. Though I fixed a bug in the SUBGROUPSEARCH function during the week, I ran some more comprehensive tests as I had planned to, and some of them broke the function. If you’re particularly interested, something like that [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=429&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all,</p>
<p>here’s a brief summary of what I’ve been doing during the 10th week of my GSoC.</p>
<ul>
<li>Though I fixed a bug in the SUBGROUPSEARCH function during the week, I ran some more comprehensive tests as I had planned to, and some of them broke the function. If you’re particularly interested, something like that will work:<br/>
<pre class="brush: python; wrap-lines: false;">In [87]: S = SymmetricGroup(5)
In [88]: prop_fix_3 = lambda x: x(3) == 3
In [89]: %autoreload
In [90]: S.subgroup_search(prop_fix_3)
---------------------------------------------------------------------------
StopIteration                             Traceback (most recent call last)
&lt;ipython-input-90-6b85aa1285b8&gt; in &lt;module&gt;()
----&gt; 1 S.subgroup_search(prop_fix_3)

/home/alexander/workspace/sympy/sympy/combinatorics/perm_groups.py in subgroup_search(self, prop, base, strong_gens, tests, init_subgroup)
2660
2661                 # this function maintains a partial BSGS structure up to position l
-&gt; 2662                 _insert_point_in_base(res, res_base, res_strong_gens, l, new_point, distr_gens=res_distr_gens, basic_orbits=res_basic_orbits, transversals=res_transversals)
2663                 # find the l+1-th basic stabilizer
2664                 new_stab = PermutationGroup(res_distr_gens[l + 1])

/home/alexander/workspace/sympy/sympy/combinatorics/util.py in _insert_point_in_base(group, base, strong_gens, pos, point, distr_gens, basic_orbits, transversals)
423     # baseswap with the partial BSGS structures. Notice that we need only
424     # the orbit and transversal of the new point under the last stabilizer
--&gt; 425     new_base, new_strong_gens = group.baseswap(partial_base, strong_gens, pos, randomized=False, transversals=partial_transversals, basic_orbits=partial_basic_orbits, distr_gens=partial_distr_gens)
426     # amend the basic orbits and transversals
427     stab_pos = PermutationGroup(distr_gens[pos])

/home/alexander/workspace/sympy/sympy/combinatorics/perm_groups.py in baseswap(self, base, strong_gens, pos, randomized, transversals, basic_orbits, distr_gens)
2472             # ruling out member of the basic orbit of base[pos] along the way
2473             while len(current_group.orbit(base[pos])) != size:
-&gt; 2474                 gamma = iter(Gamma).next()
2475                 x = transversals[pos][gamma]
2476                 x_inverse = ~x

StopIteration:

</pre><p/>
<p>The reason is certainly the change of base performed on line 11 in the pseudocode (this is also indicated in my code on my local week6 branch <a href="https://github.com/amakelov/sympy/tree/week6" target="_blank">here</a> ). The use of the function BASESWAP there is what gets us into trouble. It is meant to be applied to  base and a strong generating set relative to it, switch two consecutive base points and change the generating set accordinly.  However, in subgroup_search the goal is to change a base <img alt="(b_1, b_2, \ldots, b_l, \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%2C+%5Cldots%2C+b_k%29&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="(b_1, b_2, \ldots, b_l, \ldots, b_k)"/> to <img alt="(b_1, b_2, \ldots, b_l', \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%27%2C+%5Cldots%2C+b_k%29&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="(b_1, b_2, \ldots, b_l', \ldots, b_k)"/> where <img alt="b_l'" class="latex" src="http://s0.wp.com/latex.php?latex=b_l%27&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="b_l'"/> is a new point. The book ([1]) mentions that this is done by using BASESWAP but doesn’t provide any details. My strategy is the following: I cut the base so that it becomes <img alt="(b_1, b_2,\ldots, b_l)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_l%29&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="(b_1, b_2,\ldots, b_l)"/> and cut the correponding data structures – the strong generators <strong>strong_gens</strong>, the <strong>basic_orbits, </strong> the <strong>transversals</strong>, and the strong generators distributed according to membership in basic stabilizers <strong>distr_gens </strong>(I know, I still have to rename this to strong_gens_distr). Then I append the point <img alt="b_l'" class="latex" src="http://s0.wp.com/latex.php?latex=b_l%27&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="b_l'"/> so that the base is <img alt="(b_1, b_2, \ldots, b_l, b_l')" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%2C+b_l%27%29&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="(b_1, b_2, \ldots, b_l, b_l')"/> and calculate an orbit and transversal for $b_l’$ under the stabilzier of <img alt="b_1, b_2, \ldots, b_l" class="latex" src="http://s0.wp.com/latex.php?latex=b_1%2C+b_2%2C+%5Cldots%2C+b_l&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="b_1, b_2, \ldots, b_l"/>. Finally I apply BASESWAP to this new base in order to switch the two rightmost points. Then I go back to <img alt="(b_1, b_2, \ldots, b_l', \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%27%2C+%5Cldots%2C+b_k%29&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="(b_1, b_2, \ldots, b_l', \ldots, b_k)"/> by appending what I had cut in the start and calculating a transversal/orbit for <img alt="b_{l+1}" class="latex" src="http://s0.wp.com/latex.php?latex=b_%7Bl%2B1%7D&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="b_{l+1}"/> under the stabilizer just found, that of <img alt="b_1, \ldots, b_l'" class="latex" src="http://s0.wp.com/latex.php?latex=b_1%2C+%5Cldots%2C+b_l%27&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="b_1, \ldots, b_l'"/>. Obviously, the resulting BSGS structures are valid only up to position <img alt="l" class="latex" src="http://s0.wp.com/latex.php?latex=l&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="l"/>, and that’s all the information we can acquire without another application of baseswap or finding another stabilizer ( and in general, finding a stabilizer is a computationally hard task relative to calculating orbits/transversals). The entire purpose of this use of BASESWAP in SUBGROUPSEARCH is to obtain generators for the stabilizer of <img alt="b_1, b_2, \ldots, b_l'" class="latex" src="http://s0.wp.com/latex.php?latex=b_1%2C+b_2%2C+%5Cldots%2C+b_l%27&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="b_1, b_2, \ldots, b_l'"/> and maintain a base/strong generating set that are valid up to a certain position. There are many such base changes performed on the same base throughout the course of the function and something goes wrong along the way. I still have to figure out why and where.</p></li>
<li><strong>The good news</strong>: There is a straightforward alternative to using BASESWAP: maintain a list of generators for each of the basic stabilizers in <img alt="(b_1, b_2, \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_k%29&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="(b_1, b_2, \ldots, b_k)"/> and change it accordingly as the base is changed, using the function stabilizer() in sympy/combinatorics/perm_groups.py. For each base change we have to calculate one more stabilizer, so that’s not terrible. It is also sort of suggested in <a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CFIQFjAA&amp;url=http%3A%2F%2Fwww.math.colostate.edu%2F~hulpke%2FCGT%2Fcgtnotes.pdf&amp;ei=u48WUN24M4jf4QS2q4GgBg&amp;usg=AFQjCNHasgOmBkx2AetpE0_-92TFjSyU3A" target="_blank">“Notes on Computational Group Theory”</a> by Alexander Hulpke (page 34). The problem with this approach is that stabilizer() tends to return a group with many generators, and repeated applications keep increasing this number. However, using this <strong>removed the bug from SUBGROUPSEARCH. </strong>As before, more comprehensive tests are on the way : )</li>
<li><strong>Yet another alternative : </strong>we can use the incremental Schreier-Sims algorithm with the new base <img alt="(b_1, \ldots, b_l', \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+%5Cldots%2C+b_l%27%2C+%5Cldots%2C+b_k%29&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="(b_1, \ldots, b_l', \ldots, b_k)"/> and the strong generating set for <img alt="(b_1, \ldots, b_l, \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+%5Cldots%2C+b_l%2C+%5Cldots%2C+b_k%29&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="(b_1, \ldots, b_l, \ldots, b_k)"/>. There will likely be redundant generators after that, and it will probably involve more computation than finding a single stabilizer. However, in the long run (since there are many base changes performed) this might perform faster (due to the increasing number of generators that stabilizer() tends to create). I have not tried that approach yet.</li>
<li>Other than that, I had <a href="https://github.com/sympy/sympy/pull/1406" target="_blank">my latest major pull request</a> merged! Thanks a lot to <a href="https://github.com/Krastanov" target="_blank">Stefan</a> and my mentor <a href="https://github.com/wdjoyner" target="_blank">David</a> for the review! That was the largest one so far…</li>
<li>I started reading about some of the applications of subgroup search; subgroup intersection seems to be the easiest to implement, so I’ll probably go for it first.</li>
</ul>
<p>That’s it for now : )</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/429/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/429/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=429&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-30T13:46:30Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>Александър Макелов</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-12-21T08:00:32Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=222</id>
    <link href="http://rhoforsympy.wordpress.com/2012/07/30/week-10-finishing-up-density-matrices/" rel="alternate" type="text/html"/>
    <title>Week 10: Finishing up density matrices!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I largely wrapped up most of the items I had listed in the proposal. The current pending PR addresses and completes most of the major features I had proposed to implement. Some minor issues that are still pending should be addressed during the next week. 1. Adjust qapply() to complete some density based [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=222&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I largely wrapped up most of the items I had listed in the proposal. The current pending PR addresses and completes most of the major features I had proposed to implement. Some minor issues that are still pending should be addressed during the next week.</p>
<p>1. Adjust qapply() to complete some density based operations more gracefully.</p>
<p>2. Relocate the trace.py modules from core to another suggested folder. There have been some discussions on this on the mailing thread, which I plan to re-initiate and get a closure on this week.</p>
<p>Apart from these 2 items, based on some IRC discussions I had with Brian during past week, I have started looking at following 2 items. My plan is to work on the following 2 items during this month.</p>
<p>1. Finish up implementation of Shor’s algorithm currently available here: <a href="https://github.com/addisonc/sympy/blob/addison-main/sympy/physics/quantum/shor.py">git</a></p>
<p>2.  Implement the fidelity and trace distances for density matrices: <a href="http://en.wikipedia.org/wiki/Fidelity_of_quantum_states">Ref</a></p>
<div>Happy Coding!</div>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/222/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/222/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=222&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-30T04:03:39Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2013-01-17T11:20:36Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=308</id>
    <link href="http://scolobb.wordpress.com/2012/07/29/the-reflection-about-inference/" rel="alternate" type="text/html"/>
    <title>The Reflection about Inference</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I have been working both on fixing some existing code (including diagram layout) and on better understanding the code that I am going to write next. As far as the fixes are concerned, I have further polished the diagram layout code, including the addition of some pretty printing for DiagramGrid. I didn’t initially [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=308&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I have been working both on fixing some existing code (including <a href="https://github.com/sympy/sympy/pull/1429">diagram layout</a>) and on better understanding the code that I am going to write next.  As far as the fixes are concerned, I have further polished the diagram layout code, including the addition of some pretty printing for <tt>DiagramGrid</tt>.  I didn’t initially expect pretty printing to be useful for this class; however, it turned out that being able to quickly glance at the grid itself was very helpful in certain situations.</p>
<p>Something which makes me very content is that I have finally submitted a fix for the sort key problem for unordered collections.  The essence of the problem is as follows.  With hash randomisation enabled, the order of <tt>Basic.args</tt> changes on every run.  On the other hand, <tt>Basic.sort_key</tt> traverses the arguments in the order in which they are stored; therefore, sort keys are dependent on the actual order of the arguments.  This has given me trouble when working on laying out diagrams, specifically, in handling groups.  The thing is that the group handling code relies on <tt>FiniteSet</tt> (this maybe isn’t the best idea, but that’s a different story, really <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> ): groups are eventually converted to <tt>FiniteSet</tt>‘s of <tt>FiniteSet</tt>‘s.  To assure stable output, the collection of <tt>FiniteSet</tt>‘s is <em>sorted</em>.  However, due to the influence of hash randomisation on sort keys, this sorting would <em>not</em> actually produce the desired consequences.  There was a similar problem in the same block of functionality which had to do with sorting <tt>Diagram</tt>‘s; the issue there was that a <tt>Diagram</tt> stores <tt>Dict</tt>‘s which, being unordered collections, were subject to the same sort key trouble.  Pull request <a href="https://github.com/sympy/sympy/pull/1446">#1446</a> fixes all of these issues and, finally, the diagram drawing code almost always passes all of its tests.</p>
<p>It is worth mentioning that while the fix for the sort key problem was not included in the <a href="https://github.com/sympy/sympy/pull/1429">#1429</a>, I was inclined to classify all problems as related to <tt>FiniteSet.sort_key</tt>.  With the fix in the branch, it turned out that there were some other subtle sorting issues, which I am still fixing.</p>
<p>I have also sent pull request <a href="https://github.com/sympy/sympy/pull/1440">#1440</a> which fixes the pretty printing of morphisms and diagrams, introduced by myself in <a href="https://github.com/sympy/sympy/pull/1338">#1338</a>.  Initially, I would use short Unicode arrows for pretty printing morphisms, but Tom and I have arrived at the conclusion that these arrows look too condensed.  I have then chosen to use long Unicode arrows; it turned out however that Unicode characters which span more than one symbol are not rendered consistently across different machines.  On my computer, the longer arrow would overlap with the next character in line; on Tom’s, it would not.  Aaron has suggested building up arrows out of em dashes and black right-pointing triangles, and this seems to work better, although it still looks ugly with some fonts (e.g., the default font in <em>rxvt-unicode</em>, as reported by Tom).</p>
<p>I have also promised to implement variable-length horizontal arrows.  I have decided to postpone this for now, however, in order to better focus on my GSoC project.  I will keep that task in mind, however, and will most probably return to it in a couple of days.</p>
<p>As for deciding the commutativity of diagrams, I have run into an unexpected conceptual problem, arising from the fundamental difference between diagrams with conclusions and without conclusions.  Before explaining the problem, I will remind the description of these two types of constructions.  A commutative diagram is a collection of morphisms (which usually form a connected directed graph) with the property that composing all morphisms along any two paths between any two objects produces the same composite morphism.  While being quite general, in category theory it is customary to produce statements like “if there are such morphisms, there exist such morphisms, and the diagram is commutative”.  This statement is clearly an implication.  The class <tt>Diagram</tt> is a representation of the second type of statement and contains sets of premise morphisms and conclusion morphisms.  <tt>Diagram</tt> is also conventionally capable of representing simple commutativity if no conclusions are specified.</p>
<p>While I was initially quite comfortable with using <tt>Diagram</tt> for both types of statements, I am really inclined to considering the creation of two separate classes now.  Thus I plan to rename <tt>Diagram</tt> to <tt>Implication</tt> and add a different  <tt>Diagram</tt> which will represent what I used to call “commutative diagram without conclusions”.  That is, <tt>Diagram</tt> will hold only one collection of morphisms.</p>
<p>With this separation, it is immediately clear that, in the context of my model, the question “Is this diagram commutative?” actually incorporates two totally different questions:</p>
<ol>
<li>Is this <tt>Diagram</tt> commutative?</li>
<li>Is this <tt>Implication</tt> true and commutative?</li>
</ol>
<p>Fortunately for me ( <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  ), this newly-discovered separation does not remove the possibility of answering both questions with almost the same algorithm.  I will start with question (1) to further stress the difference between the semantics of diagrams and implications.</p>
<p>Consider a collection of <tt>Diagram</tt>‘s and <tt>Implication</tt>‘s known to be commutative.  (By saying “an <tt>Implication</tt> is commutative” I will abuse the terminology and mean “an <tt>Implication</tt> is true and commutative.”)  We need to decide whether the target <tt>Diagram</tt> is commutative.  The algorithm I will describe is based on <a href="http://en.wikipedia.org/wiki/Backward_chaining">backward chaining</a> and is therefore recursive.  A recursive step consists of two stages: the <em>commutativity</em> stage and the <em>inference</em> stage.  The goal of the commutativity stage is to decide whether the current version of the target <tt>Diagram</tt> is commutative; the goal of the inference stage is to see whether applying one of the <tt>Implication</tt>‘s will make the target <tt>Diagram</tt> commutative.</p>
<p>The commutativity stage starts with taking every morphism of the target <tt>Diagram</tt> and putting each of them into its own commutative subdiagram.  Now, for each commutative subdiagram, the algorithm will pick a subset of morphisms and will then put the subsets together to form another subdiagram.  This subdiagram will then be compared with each of the <tt>Diagram</tt>‘s known to be commutative.  If a match is found, the subdiagram is added to the set of commutative subdiagrams.  Then, all possible “absorptions” among the diagrams are performed (i.e., if subdiagram <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> is a subdiagram of <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/>, the subdiagram <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> is removed from the collection of subdiagrams (for obvious reasons)) and the iteration returns to its start, where it picks subsets of the new subdiagrams.  Since the number of morphisms in the diagram is finite, this process is finite.  If, in the end, the collection of commutative subdiagrams contains only the target diagram, it is deemed commutative.</p>
<p>Note that this alrogithm is very similar to one of the methods of finding all prime implicants of a boolean function (we called that Blake-Poretski algorithm at the university, but I cannot find any references on my Internet).  I have considered the possibilities of directly converting the commutativity stage to a boolean function minimisation problem, but I haven’t found a sufficiently elegant way yet.</p>
<p>The inference stage exactly follows the idea of backward chaining.  For each <tt>Implication</tt> an attempt is made to find the embedding of the premises into the target <tt>Diagram</tt>.  If such an embedding is found, the corresponding conclusions are added to a copy of the target <tt>Diagram</tt> and a recursive examination of the modified <tt>Diagram</tt> is made.  The found embedding of one of the <tt>Implication</tt>‘s plus the added conclusions are propagated down the recursion tree as commutative subdiagrams.  The commutative stages of the following recursive calls will take their commutativity for granted.</p>
<p>If one of these recursive calls returns a positive result, this positive result is propagated up the call stack.  If neither of the recursive calls returned a positive result, or if no embedding of an <tt>Implication</tt> has been found in a certain recursive call, a negative result is returned from this recursive call.</p>
<p>Note that it actually was the inference stage that I described in my original GSoC <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">proposal</a>.</p>
<p>Before showing how to answer question (2), I would like to analyse the algorithm idea I have just presented a little bit.  One can see that the commutativity and inference stages are <em>very</em> different; so different, in fact, that they are almost independent.  Therefore, these two bits of functionality will live in separate pieces of code, and will be later combined to function together.  I will start by defining two internal classes, <tt>_CommutativityStage</tt> and <tt>_InferenceStage</tt> which will host the corresponding functions.  The code that will actually combine the two will either be a global function or a class; this will be clearer later and is not important at the moment.</p>
<p>Question (2) now: “Is the given <tt>Implication</tt> true (and commutative)?”.  In this case, one should start from the premises of the given <tt>Implication</tt> and apply the same strategy as in answering question (1).  Here, however, the terminal criterion is that the target <tt>Diagram</tt> (obtained from the premises of the original <tt>Implication</tt>) is commutative <em>and</em> contains the conclusions of the original <tt>Implication</tt>.</p>
<p>A remark about comparing diagrams is due here: this is nothing but the <a href="http://en.wikipedia.org/wiki/Subgraph_isomorphism_problem">subgraph isomorphism problem</a>.  I have already found <a href="http://scolobb.wordpress.com/feed/software.nju.edu.cn/lingzong/papers/SGI.pdf">this paper</a> (haven’t read it yet), but I’m open to other paper suggestions in this regard <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>EDIT: I have decided to not follow this article and instead focus on a more basic solution.  Should the need occur, I will implement this (apparently) more efficient version.</p>
<p>It is necessary to keep in mind that, besides finding the subgraph isomporphism proper, the code will have to pay attention to morphism properties as well.</p>
<p>Now, the most attentive readers might have already remarked that semantically splitting the class <tt>Diagram</tt> into two will impact diagram drawing.  Yet, the impact will be rather modest, since the drawing code already knows how to deal with something similar to <tt>Implication</tt>; adding explicit support for new <tt>Diagram</tt> is going to require minimal effort.</p>
<p>In this blog post, I recognize that my initial class model was flawed in yet another place.  I try to see this is as a sign of personal progress, though <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/308/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/308/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=308&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-29T19:20:53Z</updated>
    <category term="SymPy"/>
    <category term="backward chaining"/>
    <category term="deciding commutativity"/>
    <category term="diagram layout"/>
    <category term="pretty printing"/>
    <category term="sort key"/>
    <category term="string representation"/>
    <category term="subgraph isomorphism problem"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2013-01-17T11:20:34Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/?p=305</id>
    <link href="http://angadhsympy.wordpress.com/2012/07/28/gsoc-blog-post/" rel="alternate" type="text/html"/>
    <title>GSoC Blog post</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In the week accompanying and the weeks following the evaluation, I have been working on the implementation of Lagrange’s method to the ‘mechanics’ armory. A lot can be written on the method but  I will spare the details here for now. In terms of progress on the coding itself, I feel like I have made significant [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=305&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the week accompanying and the weeks following the evaluation, I have been working on the implementation of <a href="http://en.wikipedia.org/wiki/Lagrangian_mechanics">Lagrange’s method</a> to the ‘mechanics’ armory. A lot can be written on the method but  I will spare the details here for now. In terms of progress on the coding itself, I feel like I have made significant strides in completing it. I expect to open a pull request in the middle of the upcoming week on Lagrange’s method, once I have some more of the ‘kinks’ ironed out.</p>
<p>I’m simultaneously working on the documentation aspect mentioned on my proposal. Currently, I’m working on adding to the theoretical or ‘text-book’ documentation that mechanics has on sympy docs. Specifically, I’m working on the theoretical material of the helper functions that I have added. Ideally, I will be opening a PR for this at the same time as the PR for Lagrange but that may not happen.</p>
<p>I would also like to apologise for missing out on the blog post last week. There were certain extenuating circumstances with respect to my physical health that I had to deal with coupled with a failure of my internet connection (which my ISP finally resolved on Wednesday). With regards to my health- I have had a troublesome knee problem which needed surgery. I had put off the surgery until the end of August but unfortunately the situation took a turn for the worse in the week following the evaluation. Anyhow it ended with me requiring an ACL reconstruction and meniscus removal. Unexpected but I have tried hard to not let it hamper productivity as best as possible. Nonetheless I apologise for my tardiness.</p>
<p>In terms of the bigger picture with respect to my GSoC goals, it may look like I’m a little behind schedule but since I’m  simultaneously working on two of my goals right now which will get knocked off, in the worst case scenario, in the next two weeks. I will still have a couple more weeks to work on my final goal which is the addition and improvement of the code output functionality of mechanics. At this time, it looks like I will meet my goals and in the worst case scenario, I will be mid way through my last goal.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/305/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/305/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=305&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-28T10:54:09Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2013-01-17T11:20:35Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://www.catchmrbharath.in/programming/2012/07/23/gsoc-week-9</id>
    <link href="http://www.catchmrbharath.in/programming/2012/07/23/gsoc-week-9" rel="alternate" type="text/html"/>
    <title>Gsoc week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This has been a really unproductive week. I was sick with fever for almost three days and could not spend my time on anything. I spent the next days getting the basic svgfig backend for 2d line plots. There are lots of issues with svgfig, and hence I am of the opinion svgfig should be used only for displaying images on the google app engine ie sympy live. First on the list is no support for 3-D graphs. I think this is ok, because there are not many libraries even in javascript which can do 3D plotting. Also, I am having problems with implementing contour plots and surface plots in svgfig. I am experimenting with a way, which would involve using marching squares algorithm to plot contour plots.</p>

<p>I think I am a little behind my gsoc schedule, and I should speed up things a little in the next few weeks.</p>

<p>So these are the things that I have to address</p>

<ul>
<li>Integration of svgfig with sympy live</li>

<li>Fix the multiple spawning of windows in matplotlib issue.</li>

<li>Fix the plot tests. As of now, the tests do nothing, as the process_series is not called if show is set to False.</li>

<li>I have been toying around with ipython to get isympy notebook and qtconsole working. The problem I am facing is, there are 2 instances of qtconsole created, instead of one, when I run it. I will have to figure out the problem.</li>

<li>Address the issues regarding the adaptive sampling of 2d plots.</li>

<li>Clean up my branch of implicit plotting (This is almost done).</li>

<li>Split the plot function into plot, plot3d, implicit_plot functions.</li>
</ul>

<p>I don’t think I will be able to do all of these by the end of gsoc period. But my priority will be getting the implicit plotting and svgfig backend working and getting my pull requests merged.</p></div>
    </summary>
    <updated>2012-07-23T07:00:00Z</updated>
    <published>2012-07-23T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-10-11T13:20:19Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/07/23/gsoc-week-9</id>
    <link href="http://catchmrbharath.github.com/programming/2012/07/23/gsoc-week-9" rel="alternate" type="text/html"/>
    <title>Gsoc week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This has been a really unproductive week. I was sick with fever for almost three days and could not spend my time on anything. I spent the next days getting the basic svgfig backend for 2d line plots. There are lots of issues with svgfig, and hence I am of the opinion svgfig should be used only for displaying images on the google app engine ie sympy live. First on the list is no support for 3-D graphs. I think this is ok, because there are not many libraries even in javascript which can do 3D plotting. Also, I am having problems with implementing contour plots and surface plots in svgfig. I am experimenting with a way, which would involve using marching squares algorithm to plot contour plots.</p>

<p>I think I am a little behind my gsoc schedule, and I should speed up things a little in the next few weeks.</p>

<p>So these are the things that I have to address</p>

<ul>
<li>Integration of svgfig with sympy live</li>

<li>Fix the multiple spawning of windows in matplotlib issue.</li>

<li>Fix the plot tests. As of now, the tests do nothing, as the process_series is not called if show is set to False.</li>

<li>I have been toying around with ipython to get isympy notebook and qtconsole working. The problem I am facing is, there are 2 instances of qtconsole created, instead of one, when I run it. I will have to figure out the problem.</li>

<li>Address the issues regarding the adaptive sampling of 2d plots.</li>

<li>Clean up my branch of implicit plotting (This is almost done).</li>

<li>Split the plot function into plot, plot3d, implicit_plot functions.</li>
</ul>

<p>I don’t think I will be able to do all of these by the end of gsoc period. But my priority will be getting the implicit plotting and svgfig backend working and getting my pull requests merged.</p></div>
    </summary>
    <updated>2012-07-23T07:00:00Z</updated>
    <published>2012-07-23T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-19T07:40:29Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://blog.catchmrbharath.in/programming/2012/07/23/gsoc-week-9</id>
    <link href="http://blog.catchmrbharath.in/programming/2012/07/23/gsoc-week-9" rel="alternate" type="text/html"/>
    <title>Gsoc week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This has been a really unproductive week. I was sick with fever for almost three days and could not spend my time on anything. I spent the next days getting the basic svgfig backend for 2d line plots. There are lots of issues with svgfig, and hence I am of the opinion svgfig should be used only for displaying images on the google app engine ie sympy live. First on the list is no support for 3-D graphs. I think this is ok, because there are not many libraries even in javascript which can do 3D plotting. Also, I am having problems with implementing contour plots and surface plots in svgfig. I am experimenting with a way, which would involve using marching squares algorithm to plot contour plots.</p>

<p>I think I am a little behind my gsoc schedule, and I should speed up things a little in the next few weeks.</p>

<p>So these are the things that I have to address</p>

<ul>
<li>Integration of svgfig with sympy live</li>

<li>Fix the multiple spawning of windows in matplotlib issue.</li>

<li>Fix the plot tests. As of now, the tests do nothing, as the process_series is not called if show is set to False.</li>

<li>I have been toying around with ipython to get isympy notebook and qtconsole working. The problem I am facing is, there are 2 instances of qtconsole created, instead of one, when I run it. I will have to figure out the problem.</li>

<li>Address the issues regarding the adaptive sampling of 2d plots.</li>

<li>Clean up my branch of implicit plotting (This is almost done).</li>

<li>Split the plot function into plot, plot3d, implicit_plot functions.</li>
</ul>

<p>I don’t think I will be able to do all of these by the end of gsoc period. But my priority will be getting the implicit plotting and svgfig backend working and getting my pull requests merged.</p></div>
    </summary>
    <updated>2012-07-23T07:00:00Z</updated>
    <published>2012-07-23T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-10-06T05:40:18Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=391</id>
    <link href="http://amakelov.wordpress.com/2012/07/23/google-summer-of-code-2012-week-9/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of what I’ve been doing for the 9th week of my GSoC. This week saw (and still has to see) some exciting new additions: I. The incremental Schreier-Sims algorithm. This is a version of the Schreier-Sims algorithm that takes a sequence of points and a generating set for a [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=391&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all, here’s a brief summary of what I’ve been doing for the 9th week of my GSoC.</p>
<p>This week saw (and still has to see) some exciting new additions:</p>
<p><strong><span style="font-size: large;">I. The incremental Schreier-Sims algorithm.</span></strong></p>
<p>This is a version of the Schreier-Sims algorithm that takes a sequence of points <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="B"/> and a generating set <img alt="S" class="latex" src="http://s0.wp.com/latex.php?latex=S&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="S"/> for a group <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="G"/> as input, and extends <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="B"/> to a base and <img alt="S" class="latex" src="http://s0.wp.com/latex.php?latex=S&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="S"/> to a strong generating set relative to it. It is described in [1], pp.87-93. The default value of <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="B"/> is <img alt="[]" class="latex" src="http://s0.wp.com/latex.php?latex=%5B%5D&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="[]"/>, and that of <img alt="S" class="latex" src="http://s0.wp.com/latex.php?latex=S&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="S"/> is <img alt="\text{G.generators}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctext%7BG.generators%7D&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="\text{G.generators}"/>. Here’s an example:</p>
<p/><pre class="brush: python;">In [41]: S = SymmetricGroup(5)
In [42]: base = [3, 4]
In [43]: gens = S.generators
In [44]: x = S.schreier_sims_incremental(base, gens)
In [45]: x
Out[45]:
([3, 4, 0, 1],
[Permutation([1, 2, 3, 4, 0]),
Permutation([1, 0, 2, 3, 4]),
Permutation([4, 0, 1, 3, 2]),
Permutation([0, 2, 1, 3, 4])])
In [46]: from sympy.combinatorics.util import _verify_bsgs
In [47]: _verify_bsgs(S, x[0], x[1])
Out[47]: True
</pre><p/>
<p>The current implementation stores the transversals for the basic orbits explicitly (the alternative is to use Schreier vectors to describe the orbits – this saves a lot of space, but requires more time in order to compute transversal elements whenever they are needed. This feature is still to be implemented, and this probably won’t happen in this GSoC). The current implementation of the Schreier-Sims algorithm on the master branch uses Jerrum’s filter (for more details and comparisons of the incremental version and the one using Jerrum’s filter, go <a href="http://www.m8j.net/data/List/Files-118/Documentation.pdf" target="_blank">here</a>) as an optimization, and also stores the transversals explicitly. The incremental version seems to be asymptotically faster though. Here’s several comparisons of the current version on the master branch and the incremental one which can be found on a local branch of mine which is somewhat inadequately called <a href="https://github.com/amakelov/sympy/tree/week6" target="_blank">week6</a>):</p>
<p>For symmetric groups:</p>
<p/><pre class="brush: python;">In [50]: groups = []
In [51]: for i in range(20, 30):
....:     groups.append(SymmetricGroup(i))
....:
In [52]: for group in groups:
....:     %timeit -r1 -n1 group.schreier_sims()
....:
1 loops, best of 1: 590 ms per loop
1 loops, best of 1: 719 ms per loop
1 loops, best of 1: 981 ms per loop
1 loops, best of 1: 1.35 s per loop
1 loops, best of 1: 1.66 s per loop
1 loops, best of 1: 2.19 s per loop
1 loops, best of 1: 2.74 s per loop
1 loops, best of 1: 3.37 s per loop
1 loops, best of 1: 4.28 s per loop
1 loops, best of 1: 5.37 s per loop
In [53]: for group in groups:
....:     %timeit -r1 -n1 group.schreier_sims_incremental()
....:
1 loops, best of 1: 612 ms per loop
1 loops, best of 1: 737 ms per loop
1 loops, best of 1: 927 ms per loop
1 loops, best of 1: 1.15 s per loop
1 loops, best of 1: 1.41 s per loop
1 loops, best of 1: 1.72 s per loop
1 loops, best of 1: 2.1 s per loop
1 loops, best of 1: 2.52 s per loop
1 loops, best of 1: 3.02 s per loop
1 loops, best of 1: 3.58 s per loop
</pre><p/>
<p>For alternating groups:</p>
<p/><pre class="brush: python;">In [54]: groups = []
In [55]: for i in range(20, 40, 2):
....:     groups.append(AlternatingGroup(i))
....:
In [56]: for group in groups:
%timeit -r1 -n1 group.schreier_sims()
....:
1 loops, best of 1: 613 ms per loop
1 loops, best of 1: 1.03 s per loop
1 loops, best of 1: 1.77 s per loop
1 loops, best of 1: 2.65 s per loop
1 loops, best of 1: 3.51 s per loop
1 loops, best of 1: 5.31 s per loop
1 loops, best of 1: 7.71 s per loop
1 loops, best of 1: 11.1 s per loop
1 loops, best of 1: 15.3 s per loop
1 loops, best of 1: 19.1 s per loop
In [57]: for group in groups:
%timeit -r1 -n1 group.schreier_sims_incremental()
....:
1 loops, best of 1: 504 ms per loop
1 loops, best of 1: 787 ms per loop
1 loops, best of 1: 1.23 s per loop
1 loops, best of 1: 1.9 s per loop
1 loops, best of 1: 2.8 s per loop
1 loops, best of 1: 3.99 s per loop
1 loops, best of 1: 5.48 s per loop
1 loops, best of 1: 7.45 s per loop
1 loops, best of 1: 10 s per loop
1 loops, best of 1: 13.2 s per loop
</pre><p/>
<p>And for some dihedral groups of large degree (to illustrate the case of small-base groups of large degrees):</p>
<p/><pre class="brush: python;">In [58]: groups = []
In [59]: for i in range(100, 2000, 200):
....:     groups.append(DihedralGroup(i))
....:
In [60]: for group in groups:
%timeit -r1 -n1 group.schreier_sims()
....:
1 loops, best of 1: 29.6 ms per loop
1 loops, best of 1: 108 ms per loop
1 loops, best of 1: 278 ms per loop
1 loops, best of 1: 527 ms per loop
1 loops, best of 1: 861 ms per loop
1 loops, best of 1: 1.29 s per loop
1 loops, best of 1: 1.83 s per loop
1 loops, best of 1: 2.39 s per loop
1 loops, best of 1: 3.06 s per loop
1 loops, best of 1: 3.83 s per loop
In [61]: for group in groups:
%timeit -r1 -n1 group.schreier_sims_incremental()
....:
1 loops, best of 1: 20.8 ms per loop
1 loops, best of 1: 52.8 ms per loop
1 loops, best of 1: 121 ms per loop
1 loops, best of 1: 223 ms per loop
1 loops, best of 1: 365 ms per loop
1 loops, best of 1: 548 ms per loop
1 loops, best of 1: 766 ms per loop
1 loops, best of 1: 1 s per loop
1 loops, best of 1: 1.25 s per loop
1 loops, best of 1: 1.51 s per loop
</pre><p/>
<p>In addition to this algorithm I implemented a related function _remove_gens in sympy.combinatorics.util which removes redundant generators from a strong generating set (since there tend to be some redundant ones after schreier_sims_incremental() is run):</p>
<p/><pre class="brush: python;">In [68]: from sympy.combinatorics.util import _remove_gens
In [69]: S = SymmetricGroup(6)
In [70]: base, strong_gens = S.schreier_sims_incremental()
In [71]: strong_gens
Out[71]:
[Permutation([1, 2, 3, 4, 5, 0]),
Permutation([1, 0, 2, 3, 4, 5]),
Permutation([0, 5, 1, 2, 3, 4]),
Permutation([0, 1, 2, 3, 5, 4]),
Permutation([0, 1, 2, 4, 3, 5]),
Permutation([0, 1, 3, 2, 4, 5]),
Permutation([0, 1, 2, 5, 4, 3]),
Permutation([0, 1, 5, 3, 4, 2])]
In [72]: new_gens = _remove_gens(base, strong_gens)
In [73]: new_gens
Out[73]:
[Permutation([1, 0, 2, 3, 4, 5]),
Permutation([0, 5, 1, 2, 3, 4]),
Permutation([0, 1, 2, 4, 3, 5]),
Permutation([0, 1, 2, 5, 4, 3]),
Permutation([0, 1, 5, 3, 4, 2])]
In [74]: _verify_bsgs(S, base, new_gens)
Out[74]: True
</pre><p/>
<p><strong><span style="font-size: large;">II. Subgroup search.</span></strong><br/>
This is an algorithm used to find the subgroup <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="K"/> of a given group <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="G"/> of all elements of <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="G"/> satisfying a given property <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="P"/>. It is described in [1], pp.114-118 and is <strong>quite sophisticated </strong>(the book is right when it says “The function SUBGROUPSEARCH is rather complicated and will require careful study by the reader.”). On the other hand, it is one of the most interesting additions to the groups module to date since it can do so much. The idea is to do a depth-first search over all group elements and prune large parts of the search tree based on several different criteria. It’s currently about 150 lines of code and works in many cases but still <strong>needs debugging</strong>. It can currently do some wonderful stuff like this:<br/>
</p><pre class="brush: python;">In [77]: S = SymmetricGroup(6)
In [78]: prop = lambda g: g.is_even
In [79]: G = S.subgroup_search(prop)
In [80]: G == AlternatingGroup(6)
Out[80]: True

</pre><p/>
<p>to find the alternating group as a subgroup of the full symmetric group by the defining property that all its elements are the even permutations, or this:</p>
<p/><pre class="brush: python;">In [81]: D = DihedralGroup(10)
In [82]: prop_true = lambda g: True
In [83]: G = D.subgroup_search(prop_true)
In [84]: G == D
Out[84]: True
</pre><p/>
<p>to find the dihedral group <img alt="D_{10}" class="latex" src="http://s0.wp.com/latex.php?latex=D_%7B10%7D&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="D_{10}"/> as a subgroup of itself using the trivial property that always returns <img alt="\text{True}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctext%7BTrue%7D&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="\text{True}"/>; or this:</p>
<p/><pre class="brush: python;">In [106]: A = AlternatingGroup(4)
In [107]: G = A.subgroup_search(prop_fix_23)
In [108]: G == A.stabilizer(2).stabilizer(3)
Out[108]: True
</pre><p/>
<p>to find the pointwise stabilizer of <img alt="\{2,3\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5C%7B2%2C3%5C%7D&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="\{2,3\}"/>. And so on and so on. What is more wonderful is that you can specify the base used for <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="G"/> in advance, and the generating set returned for <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=ffffff&amp;fg=4b5d67&amp;s=0" title="K"/> will be a strong generating set with respect to that base!</p>
<p/><pre class="brush: python;">In [119]: A = AlternatingGroup(5)
In [120]: base, strong_gens = A.schreier_sims_incremental()
In [121]: G = A.subgroup_search(prop_fix_1, base=base, strong_gens=strong_gens)
In [122]: G == A.stabilizer(1)
Out[122]: True
In [123]: _verify_bsgs(G, base, G.generators)
Out[123]: True
</pre><p/>
<p>The bad news is that the function breaks somewhere. For example:</p>
<p/><pre class="brush: python;">In [125]: S = SymmetricGroup(7)
In [126]: prop_true = lambda g: True
In [127]: G = S.subgroup_search(prop_true)
In [128]: G == S
Out[128]: False
</pre><p/>
<p>This needs some really careful debugging, but overall it looks promising since it works in so many cases – so the bug is hopefully small : ).</p>
<p>So, that’s it for now!</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/391/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/391/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=391&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-23T00:21:19Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>Александър Макелов</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-12-21T08:00:32Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=464</id>
    <link href="http://blog.krastanov.org/2012/07/22/form-fields-and-vector-fields-do-not-form-a-vector-space/" rel="alternate" type="text/html"/>
    <title>Form Fields and Vector Fields do not form a Vector Space</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Form fields or vector fields over a manifold (as opposed to forms and vectors) do not form a vector space. They form a module. The difference is that the scalars of a vector space form an algebraic field while the scalars of a module form a ring. For us humans (as opposed to “those higher [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=464&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://en.wikipedia.org/wiki/Tautological_one-form" target="_blank">Form fields</a> or <a href="http://en.wikipedia.org/wiki/Tangent_bundle#Canonical_vector_field_on_tangent_bundle" target="_blank">vector fields</a> over a <a href="http://en.wikipedia.org/wiki/Manifold" target="_blank">manifold</a> (as opposed to forms and vectors) do not form a <a href="http://en.wikipedia.org/wiki/Vector_space" target="_blank">vector space</a>. They form a <a href="http://en.wikipedia.org/wiki/Module_%28mathematics%29" target="_blank">module</a>.</p>
<p>The difference is that the scalars of a vector space form an algebraic <a href="http://en.wikipedia.org/wiki/Field_%28mathematics%29" target="_blank">field</a> while the scalars of a module form a <a href="http://en.wikipedia.org/wiki/Ring_%28mathematics%29" target="_blank">ring</a>. For us humans (as opposed to “those higher beings that I do not understand (a.k.a. mathematicians)”) this means that the scalars in the vector field can divide each other while the scalars in the spaces spanned by fields (i.e. a module) can not.</p>
<p>And just so we all can become even more confused: This has nothing to do with the fact that the “components” of each form field or vector field in certain basis are functions, i.e. themselves elements of a vector space with infinite number of dimensions.</p>
<p>The first way to see this module-not-a-vector-space characteristic is by showing directly that the scalars that form the “coordinate components” of a vector field can not always be divided, even if they are <strong>not</strong> identically zero. Take, for instance the, manifold <img alt="\mathbb{R}^2" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D%5E2&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\mathbb{R}^2"/> with the polar coordinate system and look at the vector <img alt="\begin{bmatrix} r \\ r\cos(\theta) \end{bmatrix}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbegin%7Bbmatrix%7D+r+%5C%5C+r%5Ccos%28%5Ctheta%29+%5Cend%7Bbmatrix%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\begin{bmatrix} r \\ r\cos(\theta) \end{bmatrix}"/>. The “scalars” are <img alt="r" class="latex" src="http://s0.wp.com/latex.php?latex=r&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="r"/> and <img alt="r\cos(\theta)" class="latex" src="http://s0.wp.com/latex.php?latex=r%5Ccos%28%5Ctheta%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="r\cos(\theta)"/>. Obviously we can not divide the former by the latter because it will be undefined at <img alt="\theta=\frac{\pi}{2}+n\pi" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctheta%3D%5Cfrac%7B%5Cpi%7D%7B2%7D%2Bn%5Cpi&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\theta=\frac{\pi}{2}+n\pi"/>.</p>
<p>Another, more amusing way to show that the space spanned by these fields is not a vector space is to explicitly show that a property expected from vector spaces is not fulfilled. Namely, that in <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="n"/> dimensions an <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="n"/>-uple of linearly independent elements forms a basis. However, in the case of fields over a manifold we can easily have a number of fields that are linearly independent over the manifold as a whole, and are at the same time linearly dependent (or simply equal to zero) on a subdomain. Hence, we have an <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="n"/>-uple of linearly independent fields that can not be linearly combined to represent another arbitrary field.</p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=464&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-22T15:11:31Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://blog.krastanov.org</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://blog.krastanov.org/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.krastanov.org" rel="alternate" type="text/html"/>
      <link href="http://blog.krastanov.org/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://blog.krastanov.org/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2013-01-16T22:00:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=475</id>
    <link href="http://blog.krastanov.org/2012/07/22/objects-implemented-in-the-diffgeom-module/" rel="alternate" type="text/html"/>
    <title>Objects Implemented in the diffgeom Module</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This post provides a summary of all mathematical types of expression implemented in the diffgeom module. I have chosen not to mention any python classes or other implementation details at all. This table shows how an object expected by the user to be of certain mathematical type operates on another object. If the expectations of [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=475&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This post provides a summary of all mathematical types of expression implemented in the diffgeom module. I have chosen not to mention any python classes or other implementation details at all. This table shows how an object expected by the user to be of certain mathematical type operates on another object. If the expectations of a user familiar with differential geometry do not meet the actual implementation, this is a bug in the implementation.</p>
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody>
<tr>
<th colspan="2" rowspan="2"/>
<th colspan="5">The Argument</th>
</tr>
<tr>
<td>point</td>
<td>scalar field</td>
<td>vector field</td>
<td>1-form field</td>
<td>higher form field</td>
</tr>
<tr>
<th rowspan="10">The Operator</th>
<td>scalar field</td>
<td>scalar</td>
<td>NA</td>
<td>NA</td>
<td>NA</td>
<td>NA</td>
</tr>
<tr>
<td>vector field</td>
<td>NA</td>
<td>scalar field</td>
<td>NA</td>
<td>NA</td>
<td>NA</td>
</tr>
<tr>
<td>1-form field (linear combination of differentials of scalar fields)</td>
<td>NA</td>
<td>NA</td>
<td>scalar field</td>
<td>NA</td>
<td>NA</td>
</tr>
<tr>
<td>higher form field (linear combination of tensor products of lower form fields)</td>
<td>NA</td>
<td>NA</td>
<td>it takes a tuple of vector fields and returns a scalar field</td>
<td>NA</td>
<td>NA</td>
</tr>
<tr>
<td>commutator of vector fields</td>
<td colspan="5">Behaves as a regular vector field.</td>
</tr>
<tr>
<td>Lie derivative (the argument is “called” on construction time)</td>
<td>NA</td>
<td colspan="4">You specify the object to be derived on creation. The Lie derivative of any object is an object of the same type.</td>
</tr>
</tbody>
</table>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=475&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-22T15:05:08Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://blog.krastanov.org</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://blog.krastanov.org/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.krastanov.org" rel="alternate" type="text/html"/>
      <link href="http://blog.krastanov.org/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://blog.krastanov.org/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2013-01-16T22:00:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=524</id>
    <link href="http://blog.krastanov.org/2012/07/22/the-schwarzschild-solution/" rel="alternate" type="text/html"/>
    <title>The Schwarzschild Solution</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">An “easy” solution to the Einstein equation (in free space) is the spherically symmetric Schwarzschild solution. The pdf bellow shows how one can use the diffgeom module in order to get the equations describing this solution. One starts with the most general spherically symmetrical metric and by using Einstein equation deduces the equations that must [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=524&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>An “easy” solution to the Einstein equation (in free space) is the spherically symmetric Schwarzschild solution. The pdf bellow shows how one can use the diffgeom module in order to get the equations describing this solution.</p>
<p>One starts with the most general spherically symmetrical metric and by using Einstein equation <img alt="R_{\mu \nu}=0" class="latex" src="http://s0.wp.com/latex.php?latex=R_%7B%5Cmu+%5Cnu%7D%3D0&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="R_{\mu \nu}=0"/> deduces the equations that must be fulfilled by the components of the metric (in the chosen basis).</p>
<p><a href="http://krastanov.files.wordpress.com/2012/07/schwarzschild.pdf">schwarzschild.pdf</a></p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;blog=15251174&amp;post=524&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-22T13:36:44Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="general relativity"/>
    <category term="gsoc"/>
    <category term="Schwarzschild"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://blog.krastanov.org</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://blog.krastanov.org/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.krastanov.org" rel="alternate" type="text/html"/>
      <link href="http://blog.krastanov.org/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://blog.krastanov.org/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2013-01-16T22:00:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=285</id>
    <link href="http://scolobb.wordpress.com/2012/07/22/the-polish-and-further-planning/" rel="alternate" type="text/html"/>
    <title>The Polish and Further Planning</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I am currently working on getting my two pull requests into master. Right now, the efforts have been concentrated on the first pull request, concerned with diagram layout. Among the minor fixes, there came a number of more important changes, which I am going to shortly describe in this post, before I get to my [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=285&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I am currently working on getting my two pull requests into <tt>master</tt>.  Right now, the efforts have been concentrated on the first pull request, concerned with diagram layout.  Among the minor fixes, there came a number of more important changes, which I am going to shortly describe in this post, before I get to my further plans.</p>
<p>Among the changes worth mentioning are some updates to the choice of internal data structures of <tt>DiagramGrid</tt>.  Previously, <tt>FiniteSet</tt> was used to store any sets.  Following my mentor’s suggestion, though, I have refactored the code to only use <tt>FiniteSet</tt> when something needs to be stored in <tt>Basic.args</tt>.  On all other occasions, the built-ins <tt>set</tt> and <tt>frozenset</tt> are used, depending on whether a mutable set or an immutable hashable container is needed.</p>
<p>The other change bearing no fundamental importance but still worth mentioning is the transition to storing undirected edges as two-element <tt>frozenset</tt>‘s.  Previously, edges were stored as two-element tuples which caused a bit of hassle in what concerned recognizing the equality of <tt>(A, B)</tt> and <tt>(B, A)</tt>.  The choice of <tt>frozenset</tt> has brought in more elegant code.  In terms of performance, I do not think that this transition has had a really important impact, since I didn’t really keep performance in mind when writing other parts of the code anyway.  (I am mainly referring to the construction of the skeleton of the diagram and splitting it into triangles.)will l</p>
<p>Among more significant improvements, I will list the support for disconnected diagrams, one-object diagrams, and, the pinnacle, graceful handling of the situations when growing a pseudopod fails.  Before you start thinking abut who the hell would need disconnected or one-object diagrams, I will remind/introduce the process and the necessity of pseudopods in diagram layout (Hey, that did sound like rubbish, did it <img alt=":-D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/>  )</p>
<p>The layout algorithm essentially considers the slightly augmented underlying undirected graph of the diagram and splits it into as many triangles as it can.  Then it tries to sort those triangles according to some rather heuristic (i.e., arbitrary) priority metric, picks them one by one, in this order, and tries to place them on the plane, edge to edge.  The strategy being pure greedy, at some point in time it may happen that there are still triangles, but there are no free edges on the plane to which they could be attached.  In this situation, the algorithm attempts to attach one of the remaining triangles by a vertex, that is, it tries to find such a vertex already in the plane, which also belongs to one of the remaining triangles.  Finally, the algorithm adds an edge of the found triangle to the plane and restarts the process of picking triangles and attaching them by edges.  This new added edge is referred to as <em>pseudopod</em>.</p>
<p>Now, what happens when a pseudopod cannot be grown?  Initially, I was under the impression that it is rather hard to construct such a diagram.  However, it turned out to be rather easy.  Consider the set of objects <img alt="\{A\}\cup\{A_i\mid 1\leq i\leq 10\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5C%7BA%5C%7D%5Ccup%5C%7BA_i%5Cmid+1%5Cleq+i%5Cleq+10%5C%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\{A\}\cup\{A_i\mid 1\leq i\leq 10\}"/> and the set of morphisms <img alt="\{f_i:A\rightarrow A_i\mid 1\leq i\leq 10\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5C%7Bf_i%3AA%5Crightarrow+A_i%5Cmid+1%5Cleq+i%5Cleq+10%5C%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\{f_i:A\rightarrow A_i\mid 1\leq i\leq 10\}"/>.  <tt>DiagramGrid</tt> will lay out the first 8 of the <img alt="A_i" class="latex" src="http://s0.wp.com/latex.php?latex=A_i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A_i"/> quite all right: as one would expect, <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> gets to be the center of a 3×3 square, whose borders consist of the 8 <img alt="A_i" class="latex" src="http://s0.wp.com/latex.php?latex=A_i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A_i"/>‘s.  However, the last two <img alt="A_i" class="latex" src="http://s0.wp.com/latex.php?latex=A_i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A_i"/>‘s condition the situation when there are triangles left, but no pseudopods can be grown.</p>
<p>In an attempt to address this problem, I have considered various possible strategies, and have chosen the following one.  When no pseudopod can be grown, take the set of all objects that have not yet been placed and construct from them a subdiagram of the diagram to plot.  Lay that diagram out recursively and then attach the resulting grid to the initial diagram.</p>
<p>One important remark is due here.  This strategy is a “oh, gosh, things have gone very bad” strategy, in that is is applied only when all other approaches have failed and in that it does not really guarantee the nice look of the final diagram.  However, it does provide a graceful handling of the specific situations and I do believe that the output is still going to look acceptable.</p>
<p>While the idea itself is rather simple, it is necessary to pay attention to what subtleties it actually brings around.  First of all, the subdiagram constructed from the remaining objects is <em>not</em> necessarily connected.  That’s easy to see even in the example I have shown in the previous paragraphs.  Furthermore, the constructed diagrams do not necessarily have non-loop morphisms!  (By abuse of graph theoretic terminology, I call a morphism with the same domain and codomain a <em>loop</em> morphism).  That is, addressing pseudopod extension failures brings about the necessity to handle disconnected diagrams and one-object diagrams.</p>
<p>There is not much to say about the support of disconnected diagrams and one-object diagrams, but that I have implemented support for these two cases as well.  The latter case is handled trivially, while the former case employs standard depth-first search of the underlying undirected graph and separate layout of the connected components.  The components are currently dumbly positioned side by side, in a line, and a comment in the source code evokes the possibility of using groups to get a different layout.  I’m open to suggestions of further improvements in this area, though.</p>
<p>It’s time to speak about my plans.  I have spent more than initially expected on handling pseudopod growth failures.  This means that there are still some suggestions by my mentor waiting to get fixed (I haven’t read them yet; hopefully, nothing fundamental there <img alt=":-D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/>  ). Further, I absolutely must fix the problem with the sort key of <tt>FiniteSet</tt>.  I have been talking about fixing it for about two weeks already, and it doesn’t seem to require that much effort.  It is essential that this fix be done, though, since, without it, tests in the <tt>categories</tt> module fail half of the time.  Finally, I will fix how morphisms are currently pretty printed by removing the use of wide Unicode symbols.  These activities will not hopefully take me more than 2 days, at the very most.</p>
<p>Next comes the other exciting part of my project, deciding the commutativity of diagrams.  I have provided the general idea of the algorithm in my <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">proposal</a>.  Given that I am currently about two weeks behind the schedule in my proposal, and that I will still need to spend time on getting the code in the pull requests up to snuff, I’m really feeling very wary about planning my own time.  However, since deciding the algorithm for deciding the commutativity of diagrams I describe in the proposals <em>seems</em> to be rather straightforward, I think I will have at least a basic working version of it two weeks from now, that is, by August 5.  Allowing another week as buffer time and yet another week for merging the corresponding pull request, I do expect to be in time for the firm pencils-down date.</p>
<p>One last remark to make is that after the official end of the GSoC timeframe, I will still have at least one week of rather spare time (I actually expect to have about 2.5 to 3 weeks of time), which means that I will bring the code to a sufficiently polished state despite any possible lags.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/285/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/285/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=285&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-21T23:21:49Z</updated>
    <category term="SymPy"/>
    <category term="automatic plotting"/>
    <category term="category theory"/>
    <category term="deciding commutativity"/>
    <category term="diagram layout"/>
    <category term="grid layout"/>
    <category term="internal data structures"/>
    <category term="layout algorithm"/>
    <category term="timeline"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2013-01-17T11:20:34Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=208</id>
    <link href="http://rhoforsympy.wordpress.com/2012/07/18/some-examples-for-latest-pull-request/" rel="alternate" type="text/html"/>
    <title>Some examples for latest pull request</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In the latest PR  2 features have been implemented and relevant examples were added to notebook.   Some examples for the first feature, can be found at this post.  Some updates and test cases were added after I had discussed it there. The second is a minor change to qapply() as seen in  the following 2 [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=208&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the latest <a href="https://github.com/sympy/sympy/pull/1428" target="_blank" title="PR 1428">PR</a>  2 features have been implemented and relevant examples were added to notebook.   Some examples for the first feature, can be found at this <a href="http://rhoforsympy.wordpress.com/2012/07/09/week-7-tr-operations-on-qubits/">post</a>.  Some updates and test cases were added after I had discussed it there.</p>
<p>The second is a minor change to qapply() as seen in  the following 2 examples:</p>
<p> </p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/07/qapply1.jpg"><img alt="" class="alignleft size-full wp-image-209" height="285" src="http://rhoforsympy.files.wordpress.com/2012/07/qapply1.jpg?w=500&amp;h=285" title="qapply1" width="500"/></a></p>
<p> </p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/07/qapply2.jpg"><img alt="" class="alignleft size-full wp-image-210" height="222" src="http://rhoforsympy.files.wordpress.com/2012/07/qapply2.jpg?w=500&amp;h=222" title="qapply2" width="500"/></a></p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>Happy Coding!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/208/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/208/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=208&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-18T16:25:51Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2013-01-17T11:20:36Z</updated>
    </source>
  </entry>
</feed>
