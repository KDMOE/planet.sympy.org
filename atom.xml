<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet SymPy</title>
  <updated>2011-12-04T20:40:16Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Ondrej Certik</name>
    <email>ondrej@certik.cz</email>
  </author>
  <id>http://planet.sympy.org/atom.xml</id>
  <link href="http://planet.sympy.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://planet.sympy.org/" rel="alternate"/>

  <entry>
    <id>tag:blogger.com,1999:blog-8510171342300140296.post-7586073962705778071</id>
    <link href="http://seanvig.blogspot.com/feeds/7586073962705778071/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/11/finalizing-arbitrary-spin-coupling.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/7586073962705778071" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/7586073962705778071" rel="self" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/11/finalizing-arbitrary-spin-coupling.html" rel="alternate" type="text/html"/>
    <title>Finalizing arbitrary spin coupling</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As expected, my work with Sympy slowed drastically once school started, but nevertheless, I have found enough time to polish off the coupling of arbitrary number of spin spaces that I started over the summer. I'll probably wait until after school is done (and the initial Google Code-In traffic dies down) before opening a pull request, but it has neared the state of conclusion, but I will outline the work done on the branch <a href="https://github.com/flacjacket/sympy/tree/multi_coupled">here</a>.<br/><br/>A notable change from the summer is the coupling and uncoupling code is now <i>much</i> cleaner. The old methods used messy <span style="font-family: 'Courier New', Courier, monospace;">while True:</span> loops  which would increment some parameters and check if some end condition was reached, which I found very unsatisfactory and open to some weird use case throwing it into complete disarray. The new methods utilize the notion that any coupling or uncoupling will occur such that there is a well defined change in either the j (in the case of coupling) or m (in the case of uncoupling) values from their maximal values, and this change can be applied over the (un)couplings in the same way you can distribute n balls in m boxes, then it is just matching an integer to a given state and check that the given state is physically feasible.<br/><br/>In addition, I have added all necessary documentation for the new functionality and fixed a few other minor issues with other parts of the new code. I may yet change some of the handling of the j_coupling parameter, but I will reevaluate that when I have more time to look at the code after I finish the semester.<br/><br/>The passing of quantum numbers to define the couplings and un-couplings is still quite verbose, but I see no better way of passing the parameters, hopefully in review someone will see a better way of defining states and couplings.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8510171342300140296-7586073962705778071?l=seanvig.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-11-28T05:58:52Z</updated>
    <published>2011-11-28T05:21:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Sean Vig</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/18029750000026588134</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8510171342300140296</id>
      <category term="sympy"/>
      <category term="GSoC"/>
      <author>
        <name>Sean Vig</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/18029750000026588134</uri>
      </author>
      <link href="http://seanvig.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://seanvig.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Developing Wigner-3nj Symbols in SymPy</subtitle>
      <title>Sean Vig's 2011 GSoC Project</title>
      <updated>2011-11-28T05:58:52Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=190</id>
    <link href="http://dlpeterson.com/blog/?p=190" rel="alternate" type="text/html"/>
    <title>Sad</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://dlpeterson.com/blog/wp-content/uploads/2011/11/Screenshot-11252011-082207-PM.png"><img alt="" class="aligncenter size-full wp-image-191" height="359" src="http://dlpeterson.com/blog/wp-content/uploads/2011/11/Screenshot-11252011-082207-PM.png" width="221"/></a></p></div>
    </content>
    <updated>2011-11-26T04:28:29Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-11-26T04:40:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=187</id>
    <link href="http://dlpeterson.com/blog/?p=187" rel="alternate" type="text/html"/>
    <title>Success in court</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I pleaded not guilty to a bicycle stop sign violation in Yolo county today. The judge found there to be reasonable doubt, and I was found not guilty.</p> <p>I was cited for failure to stop at the stop sign while headed eastbound at the intersection of East 8th street and J street, Davis, CA. <span style="color: #777;"> . . . → Read More: <a href="http://dlpeterson.com/blog/?p=187">Success in court</a></span></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I pleaded not guilty to a bicycle stop sign violation in Yolo county today.  The judge found there to be reasonable doubt, and I was found not guilty.</p>
<p>I was cited for failure to stop at the stop sign while headed eastbound at the intersection of East 8th street and J street, Davis, CA.  The citation occurred at 9:05am on a weekday.  The officer stated the indisputable facts of the case, and the key to my argument was that he was on the west side of J street, about 100 feet north of E 8th street, facing south.  I was coming to the intersection from the officers right, but I was in the bike lane next to the cars, so his view of me would be obstructed by automobile traffic had there been any.  I asked him if he recalled there being traffic at the intersection at the time of the incident.  He responded that he didn’t recall there being any.  I asked him also whether he would be able to see through the cars to see whether I stopped.  He responded that he couldn’t testify whether or not he could.  I then presented my case, which is as follows.</p>
<p>I commute by bicycle and pass through this intersection 2-4 times per day.  I know the stop signs are there and I know that I stop for them.  In the particular day in question, I recall there being traffic and being adjacent to cars (on the south side of eastbound traffic) as I approached the intersection.  I recall stopping, as I always do at that intersection.  I disputed the officer’s testimony that he could see me approach the intersection without slowing down and that I went through the intersection without stopping.  I argued that he couldn’t have seen me not stop because there were cars in between him and I.  I also reemphasized that I frequent this intersection a lot and that I always stop.  The officer responded by repeating his original statements but didn’t really add anything new to what he originally testified.  I responded by emphasizing that I know for a fact that there was traffic since it was 9:05am, and that there was no way he could have seen whether or not I stopped from his position, and that I pass through that intersection frequently and always stop.</p>
<p>The judge stated that he found there to be reasonable doubt of my guilt and that since there was no further evidence, I was found not guilty.</p>
<p>So, it was worth making 2 trips to the Yolo courthouse because I saved myself $200 and also avoided points being added to my DMV record.</p></div>
    </content>
    <updated>2011-11-23T22:08:16Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-11-26T04:40:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=177</id>
    <link href="http://dlpeterson.com/blog/?p=177" rel="alternate" type="text/html"/>
    <title>Feynman Lectures Exercise Challenge</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I noticed that the editors/publshers of the revised Feynman Lectures on Physics posted a challenge problem, so I decided to work out a solution. In doing so, I took the time to learn TikZ. The result was a pretty nice (I think) drawing of the pendulum system described in that problem. My solution is <span style="color: #777;"> . . . → Read More: <a href="http://dlpeterson.com/blog/?p=177">Feynman Lectures Exercise Challenge</a></span></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I noticed that the editors/publshers of the revised Feynman Lectures on Physics posted a <a href="http://feynmanlectures.info/forum/index.php?topic=47.0" target="_blank" title="Feynman Lectures Exercise Challenge">challenge problem</a>, so  I decided to work out a solution.  In doing so, I took the time to learn <a href="http://www.texample.net/tikz/" target="_blank" title="TikZ">TikZ</a>.  The result was a pretty nice (I think) drawing of the pendulum system described in that problem.  My solution is available <a href="http://dlpeterson.com/FLP_Exercise_Challenge/solution.pdf" target="_blank" title="Solution to Feynman Lectures Exercise Challenge">here</a>.</p></div>
    </content>
    <updated>2011-11-14T10:17:06Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-11-26T04:40:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=1128</id>
    <link href="http://fseoane.net/blog/2011/low-rank-approximation/" rel="alternate" type="text/html"/>
    <title>Low rank approximation</title>
    <summary>A little experiment to see what low rank approximation looks like. These are the best rank-k approximations (in the Frobenius norm) to the a natural image for increasing values of k and an original image of rank 512. Python code can be found here. GIF animation made using ImageMagic’s convert script.</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>A little experiment to see what low rank approximation looks like. These are the best rank-k approximations (in the Frobenius norm) to the a natural image for increasing values of k and an original image of rank 512.</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/11/animation1.gif"><img alt="" class="aligncenter size-full wp-image-1156" height="400" src="http://fseoane.net/blog/wp-content/uploads/2011/11/animation1.gif" title="Low-rank approximation for the Lena Image" width="600"/></a></p>
<p>Python code can be found <a href="https://gist.github.com/1342033">here</a>. GIF animation made using ImageMagic’s convert script.</p></div>
    </content>
    <updated>2011-11-06T10:05:09Z</updated>
    <category term="General"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2011-11-06T10:20:08Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8814696591561172392.post-7396657487035470347</id>
    <link href="http://vperic.blogspot.com/feeds/7396657487035470347/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://vperic.blogspot.com/2011/11/gsoc-final-report.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/7396657487035470347" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/7396657487035470347" rel="self" type="application/atom+xml"/>
    <link href="http://vperic.blogspot.com/2011/11/gsoc-final-report.html" rel="alternate" type="text/html"/>
    <title>GSoC: Final Report</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><span style="font-size: large;"><b>Introduction</b></span><br/><br/>My project, officially named just "Porting to Python 3", is actually divided into two separate (albeit mutually complimentary) parts: my first goal was to set up a testing framework, to ensure continuous testing of SymPy across different versions of Python. SymPy used to have a server that ran buildbot, but it stopped working some time ago. This was to provide a solid base for working on my main project, making the code Python 3 compatible. As this was to be done with a single code-base, I estimated (correctly) that these could lead to subtle incompatibilities between various Python versions. Time permitting, I also intended to leverage this framework and my knowledge to get SymPy compatible with PyPy, too. The original application can be seen at the SymPy Wiki, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application%3A-Vladimir-Peri%C4%87%3A-Porting-to-Python-3">here</a>. More details about my progress can also be found in <a href="http://vperic.blogspot.com/">my blog</a>.<br/><br/><span style="font-size: large;"><b>Testing framework</b></span><br/><br/>As mentioned above, SymPy used to use buildbot, so this was my first choice. I also read about Tox, a tool that is written for the sole purpose of testing Python programs under various conditions (different interpreters, presence or lack of certain dependencies), which also provides good integration with Jenkins, a well known server for continuous integration. My initial thoughts on this are in <a href="http://vperic.blogspot.com/2011/05/continuous-integration-and-sympy.html">one of my first blog posts</a>, where I had decided to use Tox and then later try to integrate it with Jenkins, to form a fully functioning CI server. While Tox was immediately useful (here's <a href="http://vperic.blogspot.com/2011/06/setting-up-and-using-tox-in-sympy.html">a post on setting up and using it</a>), the integration with Jenkins proved to be more arduous than my initial tests showed. In retrospect, perhaps I should have given buildbot a more thorough look later, rather than eliminate it so early. Furthermore, while I saw Tox as a great tool, the uptake among other developers has been.. less than stellar (other than Aaron, I'm not aware of anyone using it regularly).<br/><br/>Fortunately, parallel to me setting up Tox/Jenkins, work was progressing on <a href="https://github.com/sympy/sympy-bot">sympy-bot</a>. The main need for continuous integration came from a desire to review all pull requests and test them for errors - while bigger companies and projects might need real CI, all of SymPy's code gets in through the GitHub pull request system, so theoretically it should be enough to just thoroughly test every pull request; sympy-bot was developed with this purpose in mind. Designed to be ran manually, it still has the basic functionality which I couldn't manage to replicate in Jenkins: run the test suite and post the results back. Work on it has also quickened somewhat in the last couple of months, and <i>I now consider further development of sympy-bot a better idea than working more with Jenkins.</i><br/><br/><span style="font-size: large;"><b>Python 3 porting</b></span><br/><br/>Even with the relative failure of setting up a robust testing framework, my main project was also progressing. Due to the nature of the issue, progress was somewhat sporadic and didn't proceed at a steady pace. This was particularly apparent during the start - I was simply stumped by some of the errors I was getting and couldn't get around them; once I made a key breakthrough, I was quickly able to get SymPy importable under Python 3, though this only happened <a href="http://vperic.blogspot.com/2011/06/gsoc-week-5-sympy-now-runs-in-python-3.html">by week five</a>. The rest of my summer was spent hunting down the remaining errors, which was interesting at first but got very tiresome by the end. In fact, at the end Mateusz had to step in and fix the remaining few failures as I simply couldn't bring myself to look at them <i>yet again</i>. Thanks Mateusz! [Mateusz also did a lot of work on improving PyPy support, something for which I simply didn't find the time, so double thanks to Mateusz!]<br/><br/>One issue that arose early during the porting process was the (un)bundling of libraries with SymPy. SymPy bundled Pyglet and mpmath. Bundling the first was probably a bad idea at the start, and it was finally removed by Stefan Krastanov sometime early in the summer to unanimous approval. Unbundling mpmath was a more contentious issue, it sparked <a href="https://code.google.com/p/sympy/issues/detail?id=2482">a very lively discussion on the issue tracker</a>. I won't rephrase it here, but in the end it was decided <b>not</b> to unbudle it. This meant that I had to write a custom tool to handle calling 2to3: we needed to avoid calling it on the mpmath/ directories, because mpmath is already py3k compatible (and running 2to3 on such code produces bad code).<br/><br/>It was ultimately decided that this tool will live in bin/use2to3 and work by creating a Python 3-compatible version of the source code in a py3k-sympy/ subdirectory (originally sympy-py3k/ but that interfered too much with tab-completion!), from which SymPy could then be ran normally under Python 3. While I initially had misgivings about the script, I now think it's quite powerful. It's not the most ideal solution, but it does work and was the last missing link in seamless Python 3 support (eg. it also corrects shebangs and fixes some whitespace issues caused by 2to3).<br/><br/><b><span style="font-size: large;">Conclusion</span></b><br/><br/>Officially, my project was a success, but I really couldn't have done it without the help of other developers working on SymPy, in particular Ronan, Aaron and Mateusz. Beyond the GSoC period, I've got every intention to continue working with SymPy, as I think I've already shown with the few pull requests I've submitted since; I have also decided to take a more active role in helping with the <a href="https://github.com/sympy/sympy/wiki/GCI-2011-Organization-Application">Google Code-In project</a> (assuming SymPy is accepted). As for my project, I intend to focus more on the infrastructure needed to support SymPy, rather than the math issues. Still, as my knowledge of math and SymPy internals increases, I'm sure I'll find other places to contribute as well.<br/><br/>To future GSoC students, I suggest maintaining good communication links and trying to be involved with the project as much as possible. Good communication with the core developers and general awareness of the current state of SymPy helped me a lot. While this was arguably more important for my project than others, at least <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig-Symbolic-Clebsch-Gordon-coefficients%3AWigner-symbols-and-Implementing-Addition-of-Spin-Angular-Momenta">Sean Vig</a> has also expressed regret at not being more involved. The second most important bit of advice is to try and split your work into multiple pull requests and try to get them merged as fast as possible. SymPy has a very rapid pace of development, and as such it is <i>always</i> better to integrate sooner rather than later. This ties in to making good, atomic commits, but means more than that: your work should be clearly separated into small, logical chunks (&lt;= 20 commits is my suggestion). A lot of the work done this summer has still to be integrated, or there were many troubles getting it finally in (eg. the physics.mechanics module). Finally, try to budget a lot of extra time in your project application - most of us are not experienced developers and cannot estimate the amount of work needed for something correctly. Plus, when some additional problems arise (and they <i>will</i>), it's always better to have time set aside to deal with them.<br/></div><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8814696591561172392-7396657487035470347?l=vperic.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-10-31T23:02:24Z</updated>
    <published>2011-10-31T23:02:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="SymPy"/>
    <author>
      <name>Vladimir Perić</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8814696591561172392</id>
      <category term="SymPy"/>
      <category term="Tox"/>
      <author>
        <name>Vladimir Perić</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://vperic.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/-/SymPy" rel="self" type="application/atom+xml"/>
      <link href="http://vperic.blogspot.com/search/label/SymPy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Vlada's SymPy Blog</title>
      <updated>2011-10-31T23:39:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=175</id>
    <link href="http://dlpeterson.com/blog/?p=175" rel="alternate" type="text/html"/>
    <title>The price of a single stitch</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>About 2 months ago on a Saturday evening, I was working on my bike and cut the middle joint of my index finger. The cut was deep enough, and the hacksaw was dirty enough, that I knew that I needed get it looked by a doctor. I looked up my health benefits on my <span style="color: #777;"> . . . → Read More: <a href="http://dlpeterson.com/blog/?p=175">The price of a single stitch</a></span></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>About 2 months ago on a Saturday evening, I was working on my bike and cut the middle joint of my index finger.  The cut was deep enough, and the hacksaw was dirty enough, that I knew that I needed get it looked by a doctor.  I looked up my health benefits on my insurance card and tried to find a clinic that was open at 9pm on a Saturday night.  Nothing was open anywhere.  So, my options were to wait until Monday, or go to the ER.  I choose to go to the ER.  They weren’t busy and I was in and out in less than 45 minutes.  They cleaned the wound and put a single stitch in it, then put a bit of neosporin on it and put a band aid on it.</p>
<p>The total cost?  $1060.71.  Seriously?  Luckily I am insured, and I am only responsible for $100 of that.  I don’t know what the cost would have been if I had gone to a clinic during normal business hours (8am-5pm on a weekday).  </p>
<p>If I didn’t have insurance, would I have gone?  I don’t think so.  With national unemployment at 9.1% it is a safe bet that at least 1 in 10, probably 1 in 5, either don’t have health insurance or have insurance that wouldn’t cover enough for them to be able to afford such a trip to the hospital to get a relatively minor finger injury taken care of properly.  So 1 in 5 wouldn’t get such a serious injury taken care of.  Imagine if it were a more serious injury.  This system is broken.</p></div>
    </content>
    <updated>2011-10-30T18:26:18Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-11-26T04:40:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=1062</id>
    <link href="http://fseoane.net/blog/2011/qr_multiply-function-in-scipy-linalg/" rel="alternate" type="text/html"/>
    <title>qr_multiply function in scipy.linalg</title>
    <summary>In scipy’s development version there’s a new function closely related to the QR-decomposition of a matrix and to the least-squares solution of a linear system. What this function does is to compute the QR-decomposition of a matrix and then multiply the resulting orthogonal factor by another arbitrary matrix. In pseudocode: def qr_multiply(X, Y):     [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In scipy’s development version there’s a new function closely related to the <a href="http://en.wikipedia.org/wiki/QR_decomposition">QR-decomposition</a> of a matrix and to the least-squares solution of a linear system.</p>
<p>What this function does is to compute the QR-decomposition of a matrix and then multiply the resulting orthogonal factor by another arbitrary matrix. In pseudocode:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style=""><span style="color: #ff7700; font-weight: bold;">def</span> qr_multiply<span style="color: black;">(</span>X, Y<span style="color: black;">)</span>:<br/>
    Q, R = qr<span style="color: black;">(</span>X<span style="color: black;">)</span><br/>
    <span style="color: #ff7700; font-weight: bold;">return</span> dot<span style="color: black;">(</span>Q.<span style="color: black;">T</span>, Y<span style="color: black;">)</span></div></div>
<p>but unlike this naive implementation, <code>qr_multiply</code> is able to do all this <b>without</b> explicitly computing the orthogonal Q matrix, resulting both in memory and time saving. In the following picture I measured the memory consumption as a function of time of running this computation on a 1.000 x 1.000 matrix X and a vector Y (full code can be found <a href="https://gist.github.com/1287168">here</a>):</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/10/qr_multiply1.png"><img alt="" class="aligncenter size-medium wp-image-1076" height="225" src="http://fseoane.net/blog/wp-content/uploads/2011/10/qr_multiply1-300x225.png" title="Memory usage for a QR multiplication" width="300"/></a></p>
<p>It can be seen that not only <code>qr_multiply</code> is almost twice as fast as the naive approach, but also that the memory consumption is significantly reduced, since the orthogonal factor is never explicitly computed.</p>
<p>Credit for implementing the qr_multiply function goes to <a href="https://github.com/tecki">Martin Teichmann</a>. </p></div>
    </content>
    <updated>2011-10-14T14:44:10Z</updated>
    <category term="Python"/>
    <category term="scipy"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2011-11-06T10:20:08Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=172</id>
    <link href="http://dlpeterson.com/blog/?p=172" rel="alternate" type="text/html"/>
    <title>Matlab function syntax is abysmal</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today I was helping some undergraduates in a mechanical vibrations course to use ode45. The way you specify the right hand side of the ode’s must fit Matlab’s particular form (using an @ before the function name, which must be contained in a file of the same name, with a ‘.m’ extension). Looking at <span style="color: #777;"> . . . → Read More: <a href="http://dlpeterson.com/blog/?p=172">Matlab function syntax is abysmal</a></span></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today I was helping some undergraduates in a mechanical vibrations course to use ode45.  The way you specify the right hand side of the ode’s must fit Matlab’s particular form (using an @ before the function name, which must be contained in a file of the same name, with a ‘.m’ extension).  Looking at the documentation, I found this gem that really made me want to suck start a shotgun:<br/>
<code><br/>
One way to provide additional parameters to a functional argument of a function function is to write a file that:<br/>
  -- Accepts the additional parameters as inputs<br/>
  -- Invokes the function function<br/>
  -- Contains the function called by the function function as a nested function<br/>
</code><br/>
That last one is a real doozy.  Try saying that 5 times real fast, then explain what the hell it means to an undergrad.  I’d rather explain what a pointer to pointer to char is, personally.</p></div>
    </content>
    <updated>2011-10-12T00:40:14Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-11-26T04:40:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=1048</id>
    <link href="http://fseoane.net/blog/2011/scikit-learn-0-9/" rel="alternate" type="text/html"/>
    <title>scikit-learn 0.9</title>
    <summary>Last week we released a new version of scikit-learn. The Changelog is particularly impressive, yet personally this release is important for other reasons. This will probably be my last release as a paid engineer. I’m starting a PhD next month, and although I plan to continue contributing to the project and make a few more [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Last week we released a new version of scikit-learn. The <a href="http://scikit-learn.sourceforge.net/stable/whats_new.html">Changelog is particularly impressive</a>, yet personally this release is important for other reasons. </p>
<p>This will probably be my last release as a paid engineer. I’m starting a PhD next month, and although I plan to continue contributing to the project and make a few more releases, I will certainly have less time to devote to it. Luckily, I received a lot of help from the community while preparing the release, from Changelog writing to build of Windows binaries, thus I expect the transition to go smoothly.</p>
<p>Almost two years have elapsed since the first 0.1 release. During this time, we did a lot of refactoring and broke the API several times. However, I’ve seen some concerns about API stability both at the EuroScipy conference and in the mailing list where I’ve realized we need to provide an API that does not break in every release, and do this in a way that the project remains fun for developers.</p>
<p> That’s why I’m extremely glad to see that although this release is big in changes, these have been made in a more organized manner. Yes, we’ve broken the API once again, but now there’s a compatibility layer that ensures that code written for 0.8 will continue working with the new release. </p></div>
    </content>
    <updated>2011-10-02T09:19:57Z</updated>
    <category term="General"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2011-11-06T10:20:07Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=1017</id>
    <link href="http://fseoane.net/blog/2011/reworked-example-gallery-for-scikit-learn/" rel="alternate" type="text/html"/>
    <title>Reworked example gallery for scikit-learn</title>
    <summary>I’ve been working lately in improving the scikit-learn example gallery to show also a small thumbnail of the plotted result. Here is what the gallery looks like now And the real thing should be already displayed in the development documentation. The next thing is to add a static image to those that don’t generate any [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been working lately in improving the scikit-learn example gallery to show also a small thumbnail of the plotted result. Here is what the gallery looks like now</p>
<p><a href="http://scikit-learn.sourceforge.net/dev/auto_examples/index.html"><img alt="" src="http://fseoane.net/blog/wp-content/uploads/2011/09/Screenshot-Examples-&#x2014;-scikit-learn-v0.9-git-documentation-Google-Chrome.png" title="Screenshot-Examples" width="600"/></a></p>
<p><br/></p>
<p>And the real thing should be already displayed in the <a href="http://scikit-learn.sourceforge.net/dev/auto_examples/index.html">development documentation</a>. The next thing is to add a static image to those that don’t generate any result, examples such as the <a href="http://scikit-learn.sourceforge.net/dev/auto_examples/applications/svm_gui.html">SVM GUI</a> should have an image to display.</p></div>
    </content>
    <updated>2011-09-04T18:09:02Z</updated>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2011-11-06T10:20:08Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=999</id>
    <link href="http://fseoane.net/blog/2011/scikit-learn%e2%80%99s-euroscipy-2011-coding-sprint-day-two/" rel="alternate" type="text/html"/>
    <title>scikit-learn’s EuroScipy 2011 coding sprint — day two</title>
    <summary>Today’s coding sprint was a bit more crowded, with some notable scipy hackers such as Ralph Gommers, Stefan van der Walt, David Cournapeau or Fernando Perez from Ipython joining in. On what got done: – We merged Jake‘s new BallTree code. This is a pure Cython implementation of a nearest-neighbor search similar to the KDTree [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/all.jpg"><img alt="" class="aligncenter size-medium wp-image-1001" height="225" src="http://fseoane.net/blog/wp-content/uploads/2011/08/all-300x225.jpg" title="scikit-learn coding sprint" width="300"/></a></p>
<p>Today’s coding sprint was a bit more crowded, with some notable scipy hackers such as Ralph Gommers, <a href="http://mentat.za.net/">Stefan van der Walt</a>, <a href="http://cournape.wordpress.com/">David Cournapeau</a> or <a href="http://blog.fperez.org/">Fernando Perez</a> from Ipython joining in. On what got done:</p>
<p>  – We merged <a href="http://www.astro.washington.edu/users/vanderplas/">Jake</a>‘s new BallTree code. This is a pure Cython implementation of a nearest-neighbor search similar to the KDTree class in scipy.spatial, but much faster. The code looks awesome and it’s a big speedup compared to the older code.</p>
<p>  – Vlad is ready to merge his<a href="https://github.com/scikit-learn/scikit-learn/pull/221"> dictionary learning code</a>, something that should happen in the upcoming days.</p>
<p>  – Initial support for Python 3. scikit-learn should now at least build and import cleanly under Python 3.</p>
<p>  – some bugfixes in the Pipeline object and in docstrings.</p>
<p>So this was the end of the scikit-learn sprint, but EuroScipy has just begun. See you tomorrow at the conference (follow the signs)!</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0093.jpg"><img alt="" class="alignleft size-medium wp-image-1003" height="300" src="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0093-202x300.jpg" title="IMG_0093" width="202"/></a></p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0092.jpg"><img alt="" class="alignleft size-medium wp-image-1004" height="300" src="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0092-189x300.jpg" title="yannick" width="189"/></a></p>
<div style="clear: both;">
–
</div></div>
    </content>
    <updated>2011-08-24T22:33:10Z</updated>
    <category term="General"/>
    <category term="Python"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2011-11-06T10:20:08Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=974</id>
    <link href="http://fseoane.net/blog/2011/scikit-learns-euroscipy-2011-coding-sprint-day-one/" rel="alternate" type="text/html"/>
    <title>scikit-learn’s EuroScipy 2011 coding sprint  — day one</title>
    <summary>As a warm-up for the upcoming EuroScipy conference, some of the scikit-learn developers decided to gather and work together for a couple of days. Today was the first day and there was only a handfull of us, as the real kickoff is expected tomorrow. Some interesting coding happened, although most of us where still preparing [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As a warm-up for the upcoming <a href="http://www.euroscipy.org/conference/euroscipy2011">EuroScipy conference</a>, some of the <a href="http://scikit-learn.sf.net">scikit-learn</a> developers decided to gather and work together for a couple of days.</p>
<p>Today was the first day and there was only a handfull of us, as the real kickoff is expected tomorrow. Some interesting coding happened, although most of us where still preparing material for the EuroScipy tutorials …</p>
<p>    – API changes: remove of keyword parameters to <i>fit</i> method, added method <i>set_params</i>  (<a href="https://github.com/scikit-learn/scikit-learn/pull/306">pull request</a>).</p>
<p>    – Some bugfixing in NuSVR (<a href="https://github.com/scikit-learn/scikit-learn/pull/315">pull request</a>)</p>
<p>    – Review of <a href="http://vene.ro">Vlad</a>‘s code, developed during his Summer of Code program.</p>
<p>    – A lot of discussion about algorithm, code, APIs and buildbot dance !</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0076.jpg"><img alt="" class="alignleft size-thumbnail wp-image-977" height="150" src="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0076-150x150.jpg" title="varokoo" width="150"/></a></p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-3.png"><img alt="" class="alignleft size-thumbnail wp-image-979" height="150" src="http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-3-150x150.png" title="Olivier Grisel" width="150"/></a></p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0074.jpg"><img alt="" class="alignleft size-thumbnail wp-image-982" height="150" src="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0074-150x150.jpg" title="Vlad" width="150"/></a></p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-5.png"><img alt="" class="alignleft size-thumbnail wp-image-986" height="150" src="http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-5-150x150.png" title="Me and Jean" width="150"/></a></p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/emanuelle.jpg"><img alt="" class="alignleft size-thumbnail wp-image-990" height="150" src="http://fseoane.net/blog/wp-content/uploads/2011/08/emanuelle-150x150.jpg" title="emanuelle" width="150"/></a></p>
<div style="clear: both;">
–
</div></div>
    </content>
    <updated>2011-08-23T19:38:09Z</updated>
    <category term="General"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2011-11-06T10:20:07Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8510171342300140296.post-4221049810717497721</id>
    <link href="http://seanvig.blogspot.com/feeds/4221049810717497721/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/08/finishing-gsoc.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/4221049810717497721" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/4221049810717497721" rel="self" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/08/finishing-gsoc.html" rel="alternate" type="text/html"/>
    <title>Finishing GSoC</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So this is the last week of the GSoC program. I'll be writing up a full report on what I've done over the summer <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig">here</a> and it will be updated over this next week. This blog post will be recapping this last week of progress and looking forward past the GSoC.<br/><br/>The main thing to report with this last week was the finishing the work on the spin coupling work that was laid out last week and the writing of the code for Coupled spin states, the last pull request I'll get in during the GSoC project is currently open and should only need a last bit of code review to get pulled.<br/><br/>The main thing now is moving beyond the work that will be done during the GSoC project. While I'll be starting classes this next week and I have my qual the next week, so work will definitely slow down. However, this last week, I worked on the multi_coupling branch, which takes the coupling work that is in the current pull and expands it to allow for an arbitrary number of spin bases. The first thing to implement with this was a means of representing the coupling between the spin bases, since the order in which spaces are coupled matters. To do this, I added a jcoupling option to the functions that deal with coupled states. It currently seems pretty messy, but I'm not sure of a better way to do it, as coupling multiple spaces will just pick up a bunch of additional quantum numbers that need to be represented somehow. Basically, this parameter is passed as a list of lists, where each element of the outermost list represents a coupling between two spin spaces. These inner lists have 3 elements, 2 giving the number of the space that is being coupled and the third being the j value of these spaces coupled together. For example, if we wanted to represent a state |j,m,j1,j2,(j12),j3&gt;, the jcoupling would be ( (1,2,j12), ). If this option is not set, then the methods default to coupling the spaces in numerical order, i.e. 1 and 2, then 1,2 and 3, etc. Using this, I have been able to rewrite the uncouple code. The results do not yet have tests, and I'll definitely need to do some calculations by hand to make sure this is working properly, but looking at it, I am pretty confident in the results, tho the code could use some cleaning up.<br/><br/>Moving forward from this would be to get the couple method working with arbitrary spin spaces and run through all of the functions that deal with spin coupling and make sure nothing is still hard coded to use two spin bases. Other than that, the project that I'd set out to work on has been basically completed. I'll continue to work with and develop sympy when I have some spare and hopefully continue to add features and functionality to the quantum module.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8510171342300140296-4221049810717497721?l=seanvig.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-08-20T04:37:48Z</updated>
    <published>2011-08-20T04:37:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="GSoC"/>
    <author>
      <name>Sean Vig</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/18029750000026588134</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8510171342300140296</id>
      <category term="sympy"/>
      <category term="GSoC"/>
      <author>
        <name>Sean Vig</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/18029750000026588134</uri>
      </author>
      <link href="http://seanvig.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://seanvig.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Developing Wigner-3nj Symbols in SymPy</subtitle>
      <title>Sean Vig's 2011 GSoC Project</title>
      <updated>2011-11-28T05:58:52Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8814696591561172392.post-3859482934470016015</id>
    <link href="http://vperic.blogspot.com/feeds/3859482934470016015/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://vperic.blogspot.com/2011/08/gsoc-final-week.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/3859482934470016015" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/3859482934470016015" rel="self" type="application/atom+xml"/>
    <link href="http://vperic.blogspot.com/2011/08/gsoc-final-week.html" rel="alternate" type="text/html"/>
    <title>GSoC: final week</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Well, I obviously haven't kept up with my blogging. Partly this is because there wasn't too much to report - I've been stuck at the few remaining bugs for a couple of weeks now and just couldn't make myself go at them for real. Still, I've now tentatively submitted <a href="https://github.com/sympy/sympy/pull/558">a "final" pull request</a>, which has some misc fixes and more importantly adds the "use2to3" script that will form the basis of our Python 3 support. The idea is to run the script, which will create a "sympy-py3k" directory, which is a copy of the SymPy directory structure but with 2to3 ran where required. It should then be possible to use SymPy normally under Python 3 from that folder (even installing it). Now, this script could do with some improvements (looking at "git ls-files" instead of traversing the whole dir structure for one), but most importantly it is <i>not really well tested</i>. I've only tested it on my computer and while it should be sound there have already been some problems reported (in the pull request). Still, the script should hopefully be robust and so, if you have the time and/or care about Python 3 support at all: <i>please</i> try out the script and see if it breaks. You can get it in my "porting4" branch.<br/><br/>Now, there are some issues remaining (Ronan is working on <a href="http://code.google.com/p/sympy/issues/detail?id=2574">the LambertW issue</a> and the other two, <a href="http://code.google.com/p/sympy/issues/detail?id=2609">test_priority error</a> and <a href="http://code.google.com/p/sympy/issues/detail?id=2611">tensor doctest failures</a> are on the issue tracker), but I still consider my project as successful. Python 3 support is a moving target anyway (all new code that gets in is another potential error, at least until people start actively testing it) and I also expect issues to crop up that just aren't covered by the test suite. For the moment, Python 3 support can be considered an experimental, dev feature and I'd like to keep it that way for a few weeks before considering a release. Again, if you are interested in Python 3 support, please try it out, start using it for your normal work and note if something unexpected comes up. <br/><br/>For the foreseeable future, I definitely intend to stay with SymPy. I found the hacking genuinely interesting and would like to finish my stated goals of achieving both Python 3 and PyPy compatibility. Part of my reasoning is completely selfish - I expect these skills to be quite valuable in the near future and hacking one a code base as large as SymPy is bound to teach me a few tricks. Mostly, though, I'd just like to make SymPy better - my line of thought being, if I can do the mundane infrastructure work, then that will enable the mathematicians and physicists among us to implement more cool algorithms. <br/><br/>I'd also like to extend my thanks to Ronan Lamy, my mentor, who was kind enough to solve a few issues for me and for generally always being around to point me in the right direction; to Aaron Meurer, the maintainer of SymPy, who always had the time for a detailed review of my code, even if our views didn't always coincide :) (<a href="http://code.google.com/p/sympy/issues/detail?id=2482">mpmath, anyone?</a>); and finally, to all the other devs in SymPy who've helped me by reviewing my code and for making such a great program in the first place! <div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8814696591561172392-3859482934470016015?l=vperic.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-08-19T19:39:38Z</updated>
    <published>2011-08-19T19:39:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="SymPy"/>
    <author>
      <name>Vladimir Perić</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8814696591561172392</id>
      <category term="SymPy"/>
      <category term="Tox"/>
      <author>
        <name>Vladimir Perić</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://vperic.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/-/SymPy" rel="self" type="application/atom+xml"/>
      <link href="http://vperic.blogspot.com/search/label/SymPy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Vlada's SymPy Blog</title>
      <updated>2011-10-31T23:39:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1042</id>
    <link href="http://asmeurersympy.wordpress.com/2011/08/18/sqrtx-now-prints-as-sqrtx/" rel="alternate" type="text/html"/>
    <title>sqrt(x) now prints as "sqrt(x)"</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Just a few moments ago, a branch was pushed in that fixed one of my biggest grievances in SymPy, if not the biggest. Previously we had this behavior: Now suppose you took the output of those expressions and pasted them into isympy: That’s with __future__.division. Here’s what would happen with old division: This is because [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1042&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Just a few moments ago, <a href="https://github.com/sympy/sympy/pull/548" target="_blank">a branch</a> was pushed in that fixed one of my biggest grievances in SymPy, if not the biggest.  Previously we had this behavior:</p>
<p/><pre class="brush: python;">In [1]: sqrt(x)
Out[1]: x**(1/2)

In [2]: solve(x**2 - 2, x)
Out[2]: [-2**(1/2), 2**(1/2)]
</pre><p/>
<p>Now suppose you took the output of those expressions and pasted them into isympy:</p>
<p/><pre class="brush: python;">In [3]: x**(1/2)
Out[3]: x**0.5

In [4]: [-2**(1/2), 2**(1/2)]
Out[4]: [-1.41421356237, 1.41421356237]
</pre><p/>
<p>That’s with <code>__future__.division</code>.  Here’s what would happen with old division:</p>
<p/><pre class="brush: python;">In [2]: x**(1/2)
Out[2]: 1

In [3]: [-2**(1/2), 2**(1/2)]
Out[3]: [-1, 1]
</pre><p/>
<p>This is because with old division, <code>1/2</code> evaluates to <code>0</code>.</p>
<p>The problem is that Python evaluates <code>1/2</code> to <code>0.5</code> (or <code>0</code>) before SymPy has a change to convert it to a Rational.  There were several ways that people got around this.  If you copy an expression with number division in it and want to paste it into a SymPy session, the easiest way to do this was to pass it as a string to <code>sympify()</code>:</p>
<p/><pre class="brush: python;">In [1]: sympify("x**(1/2)")
Out[1]: x**(1/2)

In [2]: sympify("[-2**(1/2), 2**(1/2)]")
Out[2]: [-2**(1/2), 2**(1/2)]
</pre><p/>
<p>If that was too much typing for you, you could use the <code>S()</code> shortcut to <code>sympify()</code></p>
<p/><pre class="brush: python;">In [3]: S("x**(1/2)")
Out[3]: x**(1/2)

In [4]: S("[-2**(1/2), 2**(1/2)]")
Out[4]: [-2**(1/2), 2**(1/2)]
</pre><p/>
<p>This solution is fine if you want to paste an expression into a SymPy session, but it’s not a very clean one if you want to paste code into a script. For that, you need to modify the code so that it no longer contains Python int/Python int.  The easiest way to do this is to sympify one of the ints.  So you would do something like</p>
<p/><pre class="brush: python;">In [5]: x**(S(1)/2)
Out[5]: x**(1/2)

In [6]: [-2**(S(1)/2), 2**(S(1)/2)]
Out[6]: [-2**(1/2), 2**(1/2)]
</pre><p/>
<p>This wasn’t terribly readable, though.  The <em>best</em> way to fix the problem when you had a power of one half was to use <code>sqrt()</code>, which is a shortcut to <code>Pow(…, Rational(1, 2))</code>.  </p>
<p>Well, this last item should make you think.  If <code>sqrt(x)</code> is more readable than <code>x**(S(1)/2)</code> or even <code>x**(1/2)</code>, why not print it like that in the first place.  Well, I thought so, so I changed the string printer, and now this is the way that SymPy works.  So 90% of the time, you can just paste the result of <code>str()</code> or <code>print</code>, and it will just work, because there won’t be any <code>**(1/2)</code>, which was by far the most common problem of “Python evaluating the expression to something before we can.”  In the git master, SymPy now behaves like</p>
<p/><pre class="brush: python;">In [1]: sqrt(x)
Out[1]: sqrt(x)

In [2]: solve(x**2 - 2, x)
Out[2]: [-sqrt(2), sqrt(2)]
</pre><p/>
<p>You can obviously just copy and paste these results, and you get the exact same thing back.  Not only does this make expressions more copy-and-pastable, but the output is <em>much</em> nicer in terms of readability.  Here are some before and afters that come from actual SymPy doctests that I had to change after fixing the printer:</p>
<p/><pre class="brush: python;">Before:
&gt;&gt;&gt; e = ((2+2*sqrt(2))*x+(2+sqrt(8))*y)/(2+sqrt(2))
&gt;&gt;&gt; radsimp(e)
2**(1/2)*x + 2**(1/2)*y

After:
&gt;&gt;&gt; radsimp(e)
sqrt(2)*x + sqrt(2)*y
</pre><p/>
<p/><pre class="brush: python;">Before:
&gt;&gt;&gt; b = besselj(n, z)
&gt;&gt;&gt; b.rewrite(jn)
2**(1/2)*z**(1/2)*jn(n - 1/2, z)/pi**(1/2)

After:
&gt;&gt;&gt; b.rewrite(jn)
sqrt(2)*sqrt(z)*jn(n - 1/2, z)/sqrt(pi)
</pre><p/>
<p/><pre class="brush: python;">Before:
&gt;&gt;&gt; x = sympify('-1/(-3/2+(1/2)*sqrt(5))*sqrt(3/2-1/2*sqrt(5))')
&gt;&gt;&gt; x
(3/2 - 5**(1/2)/2)**(-1/2)

After
&gt;&gt;&gt; x
1/sqrt(3/2 - sqrt(5)/2)
</pre><p/>
<p>And not only is <code>sqrt(x)</code> easier to read than <code>x**(1/2)</code> but it’s fewer characters.</p>
<p>In the course of changing this, I went ahead and did some greps of the repository to get rid of all <code>**(S(1)/2)</code>, <code>**Rational(1, 2)</code> and similar throughout the code base (not just in the output of doctests where the change had to be made), replacing them with just <code>sqrt</code>.  Big thanks to Chris Smith for helping me catch all instances of this.  Now the code should be a little easier to read and maintain.</p>
<p><strong>Future Work</strong></p>
<p>This is a big change, and I believe it will fix the copy-paste problem for 90% of expressions. But it does not solve it completely.  It is still possible to get int/int in the string form of an expression.  Only powers of 1/2 and -1/2 are converted to sqrt, so any other rational power will still print as a/b, like</p>
<p/><pre class="brush: python;">In [1]: x**Rational(3, 2)
Out[1]: x**(3/2)
</pre><p/>
<p>Also, as you may have noticed in the last example above, a rational number that sits by itself will still be printed as int/int, like</p>
<p/><pre class="brush: python;">In [2]: (1 + x)/2
Out[2]: x/2 + 1/2
</pre><p/>
<p>Therefore, I’m leaving the <a href="http://code.google.com/p/sympy/issues/detail?id=2359" target="_blank">issue for this</a> open to discuss potential future fixes to the string printer.  One idea is to create a <code>root</code> function that is a shortcut to <code>root(x, a) == x**(1/a)</code>. This would work for rational powers where the numerator is 1.  For other rational powers, we could then denest these with an integer power.  It’s important to do this in the right order, though, as they are not equivalent.  You can see that SymPy auto-simplifies it when it is mathematically correct in all cases, and not when it is not:</p>
<p/><pre class="brush: python;">In [3]: sqrt(x**3)
Out[3]: sqrt(x**3)

In [4]: sqrt(x)**3
Out[4]: x**(3/2)
</pre><p/>
<p>Thus <img alt="\left(\sqrt{x}\right)^3 = x^{\frac{3}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cleft%28%5Csqrt%7Bx%7D%5Cright%29%5E3+%3D+x%5E%7B%5Cfrac%7B3%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\left(\sqrt{x}\right)^3 = x^{\frac{3}{2}}"/> but <img alt="\sqrt{x^3} \neq x^{\frac{3}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csqrt%7Bx%5E3%7D+%5Cneq+x%5E%7B%5Cfrac%7B3%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\sqrt{x^3} \neq x^{\frac{3}{2}}"/> (to see this, replace <img alt="x" class="latex" src="http://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/> with -1).</p>
<p>So the idea would be to print <code>Pow(expr, Rational(a, b))</code> as <code>root(expr, b)**a</code>.  </p>
<p>The merits of this are debatable, but anyway I think we should have this <code>root()</code> function in any case (see <a href="http://code.google.com/p/sympy/issues/detail?id=2643" target="_blank">issue 2643</a>).</p>
<p>Another idea, which is probably not a good one, is to always print <code>int/int</code> as <code>S(int)/int</code>.  So we would get</p>
<p/><pre class="brush: python;">&gt;&gt;&gt; Rational(1, 2)
S(1)/2
&gt;&gt;&gt; x**Rational(4, 5)
x**(S(4)/5)
</pre><p/>
<p>This is probably a bad idea because even though expressions would always be copy-pastable, they would be slightly less readable.  </p>
<p>By the way, in case you didn’t catch it, all of these changes only affect the string printer.  The pretty printer remained unaffected, and would under any additional changes, as it isn’t copy-pastable anyway, and already does a superb job of printing roots.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1042/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1042/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1042/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1042/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1042/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1042/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1042/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1042/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1042/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1042/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1042/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1042/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1042/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1042/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1042&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-08-18T03:11:32Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-12-04T20:40:07Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://saptman.wordpress.com/?p=32</id>
    <link href="http://saptman.wordpress.com/2011/08/14/summer-is-ending/" rel="alternate" type="text/html"/>
    <title>Summer is ending :(</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">A beautiful summer is coming to an end and I am at the last leg of my Gsoc. I must apologize for the erratic posts but its mostly because I was “busy” with other things (mostly enjoying myself in the US of A, eating steaks, going out for barbecues, and enjoying the beautiful Maryland summer … <a href="http://saptman.wordpress.com/2011/08/14/summer-is-ending/">Read more</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=saptman.wordpress.com&amp;blog=23040289&amp;post=32&amp;subd=saptman&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>A beautiful summer is coming to an end and I am at the last leg of my Gsoc. I must apologize for the erratic posts but its mostly because I was “busy” with other things (mostly enjoying myself in the US of A, eating steaks, going out for barbecues, and enjoying the beautiful Maryland summer weather.)</p>
<p>In the last few weeks I spent a bit of time cleaning up Gray code. It went through a few API changes and I hope to have the subsets and partitions branches merged in within this week. I also implemented a demo of the Permutations branch that involves Polyhedron rotations. I hope to show one involving a Rubik’s cube when I have the Permutation group module in (more on that in a while). I also implemented a residue class and a residue group module as that was missing in the number theory branch of Sympy. That branch needs an overhaul both in terms of functionality as well as the code that is already there and I hope I can get some momentum going in that direction with the code I have written. I also wrote some generators for Permutation groups. This is fairly easy to do now, the basic algorithm is to generate all permutations and filter out those that do not fit the criteria. Of course, generating all permutations is inefficient, and some generators have certain special properties that we can use. For example, the Cyclic group can be generated in linear time as that simply involves a single rotation. Alternating group however requires the generation of all even permutations. Some group generators will probably make use of the specialized algorithms that have been implemented in the iterables section of Sympy.</p>
<p>I have also managed to implement the Schreier sims algorithm but its extremely ugly and unpythonic for now. Algorithms for generating orbits and stabilizer chains are also there but they are fairly inefficient. I hope to clean them up and submit them for a pull request in this week before the hard pencils down date.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/saptman.wordpress.com/32/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/saptman.wordpress.com/32/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/saptman.wordpress.com/32/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/saptman.wordpress.com/32/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/saptman.wordpress.com/32/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/saptman.wordpress.com/32/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/saptman.wordpress.com/32/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/saptman.wordpress.com/32/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/saptman.wordpress.com/32/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/saptman.wordpress.com/32/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/saptman.wordpress.com/32/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/saptman.wordpress.com/32/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/saptman.wordpress.com/32/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/saptman.wordpress.com/32/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=saptman.wordpress.com&amp;blog=23040289&amp;post=32&amp;subd=saptman&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-08-14T21:25:54Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>saptman</name>
    </author>
    <source>
      <id>http://saptman.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://saptman.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://saptman.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://saptman.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://saptman.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My symply awesome gsoc summer</subtitle>
      <title>saptman</title>
      <updated>2011-12-04T20:40:16Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://lazovichsympy.wordpress.com/?p=91</id>
    <link href="http://lazovichsympy.wordpress.com/2011/08/13/cool-results-in-represent/" rel="alternate" type="text/html"/>
    <title>Cool results in represent</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This post right now is just a quick update with an example python session showing the cool things we can do in represent now, after a very hectic week of code writing. I’m currently in the process of finalizing things in the way that represent works, so I will post a much more detailed post [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;blog=22774068&amp;post=91&amp;subd=lazovichsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This post right now is just a quick update with an example python session showing the cool things we can do in represent now, after a very hectic week of code writing. I’m currently in the process of finalizing things in the way that represent works, so I will post a <em>much</em> more detailed post at some point later, but right now I just want to show that we can actually do quantum mechanics in continuous bases! (In this case, with the particle in a box system).</p>
<p>Here is an example python session with notes on the output:</p>
<pre>&gt;&gt;&gt; from sympy.physics.quantum import *
&gt;&gt;&gt; from sympy.physics.quantum.piab import *
&gt;&gt;&gt; wf = represent(PIABKet())
&gt;&gt;&gt; wf
Wavefunction(2**(1/2)*(1/L)**(1/2)*sin(pi*n*x_1/L), (x_1, 0, L))
&gt;&gt;&gt; wf.norm
1</pre>
<div id=":2qo">
<p>We get a particle-in-the-box Wavefunction when it is represented and it’s properly normalized.</p>
<pre>&gt;&gt;&gt; represent(XOp()*PIABKet())
Wavefunction(2**(1/2)*x_2*(1/L)**(1/2)*sin(pi*n*x_2/L), x_2)</pre>
<p>We now get a wavefunction with an extra factor of x!</p>
<pre>&gt;&gt;&gt; represent(PxOp()*PIABKet(), basis=XKet)
Wavefunction(-2**(1/2)*hbar*I*pi*n*(1/L)**(1/2)*cos(pi*n*x_2/L)/L, x_2)</pre>
<p>The PxOp actually takes the derivative of the wavefunction correctly! (Momentum operators in the position basis are differential operators).</p>
<pre>&gt;&gt;&gt; represent(PIABBra()*XOp()*PIABKet(), basis=XKet)
0</pre>
<p>Here, we insert two unities. The first one integrated collapses a delta function, but the second one integrated actually computes the expectation value of x for the particle-in-a-box wavefunction (which is what you expect from representing &lt;psi|X|psi&gt;).</p>
<p>EDIT: As you’ll see in the comments, Raoul pointed out that this is actually incorrect, and I will be looking into it!</p>
<p>There are still a few kinks being worked out, but we’re very close to having a nice finished product which is why I am reserving a longer post for tomorrow. I am quite pleased with the results we’re seeing so far though!</p>
</div>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/lazovichsympy.wordpress.com/91/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/lazovichsympy.wordpress.com/91/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/lazovichsympy.wordpress.com/91/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/lazovichsympy.wordpress.com/91/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/lazovichsympy.wordpress.com/91/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/lazovichsympy.wordpress.com/91/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/lazovichsympy.wordpress.com/91/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/lazovichsympy.wordpress.com/91/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/lazovichsympy.wordpress.com/91/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/lazovichsympy.wordpress.com/91/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/lazovichsympy.wordpress.com/91/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/lazovichsympy.wordpress.com/91/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/lazovichsympy.wordpress.com/91/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/lazovichsympy.wordpress.com/91/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;blog=22774068&amp;post=91&amp;subd=lazovichsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-08-14T03:39:06Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>lazovich</name>
    </author>
    <source>
      <id>http://lazovichsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://lazovichsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://lazovichsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://lazovichsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://lazovichsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My adventures during GSoC 2011</subtitle>
      <title>Tomo Lazovich's SymPy Blog</title>
      <updated>2011-12-04T20:40:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://gilbertgede.wordpress.com/?p=82</id>
    <link href="http://gilbertgede.wordpress.com/2011/08/13/gsoc-week-12/" rel="alternate" type="text/html"/>
    <title>GSoC, Week 12</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Well, this past week was the final “full” week of the 2011 Google Summer of Code. The ‘soft’ pencils down date is Monday. This week, I mostly rewrote interfaces to some functions and classes. I should probably go back through previous blog posts and update those to show how they are different, so if anyone [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=82&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Well, this past week was the final “full” week of the 2011 Google Summer of Code. The ‘soft’ pencils down date is Monday.</p>
<p>This week, I mostly rewrote interfaces to some functions and classes. I should probably go back through previous blog posts and update those to show how they are different, so if anyone comes across this in the future, there won’t be example code which doesn’t work. I also tried to finish up the documentation this week. I decided a little late in the week to add another page, a “advanced/future interfaces” page, to describe how some functions/classes have different interfaces (and their advantages/disadvantages) as well as some discussed extensions to the current interface (that probably won’t be implemented right now). Some of these things were: more ways to access basis vectors, more printing options, and more ways to initialize the Kane object. Like I said, I don’t think I’ll be able to implement these now. I think I’ll try and do those three things this Fall though.</p>
<p>I also went through an example of bringing non-contributing forces into evidence (I discussed this topic a little in last week’s blog post). With the changes to the Kane interface it has ended up working out quite nicely. I put some code for this into the examples section, so hopefully it will be relatively easy for others to figure out. I didn’t make as much progress as I’d like with the code output function, but I think it can do an adequate job at the moment. I also spent most of a day rebasing all of my code of the latest master. I’m not sure what I did wrong, but somehow, I managed to get double commits again, so I took care of this. I think it might have been how I branched, rebased on one branch, then merged? It took some time to sort out.</p>
<p>I see there being two more things to do. The first is updating the images I have in the documentation; they’re all hand-drawn and of low quality. I plan on spending a little time this weekend on that, as well as Monday. The other thing is updating my pull request, getting others to look at it, and making necessary changes (and hopefully during this time, I’ll be able to check out other people’s pull requests and help them). Working with the pull request will probably take longer than updating the images…</p>
<p>Anyways, this is the last required blog post, but I think I’ll do at least one more as part of the Summer of Code, to wrap things up, and maybe introduce one more example.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/82/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/82/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/gilbertgede.wordpress.com/82/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/gilbertgede.wordpress.com/82/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/gilbertgede.wordpress.com/82/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/gilbertgede.wordpress.com/82/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/gilbertgede.wordpress.com/82/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/gilbertgede.wordpress.com/82/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/gilbertgede.wordpress.com/82/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/gilbertgede.wordpress.com/82/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/gilbertgede.wordpress.com/82/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/gilbertgede.wordpress.com/82/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/gilbertgede.wordpress.com/82/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/gilbertgede.wordpress.com/82/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=82&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-08-13T15:46:15Z</updated>
    <category term="GSoC 2011"/>
    <category term="PyDy"/>
    <category term="SymPy"/>
    <author>
      <name>gilbertgede</name>
    </author>
    <source>
      <id>http://gilbertgede.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://gilbertgede.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://gilbertgede.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://gilbertgede.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://gilbertgede.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>gilbertgede</title>
      <updated>2011-12-04T20:40:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sympystats.wordpress.com/?p=239</id>
    <link href="http://sympystats.wordpress.com/2011/08/13/week-12-pull-requests/" rel="alternate" type="text/html"/>
    <title>Week 12: Pull Requests</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As before, not much to report. Slow plodding through testing, bug fixing, etc…. I have a pull request here for Matrix Expressions https://github.com/sympy/sympy/pull/532 My branch for Finite and Continuous Random Variables is below. It doesn’t have a pull request yet … <a href="http://sympystats.wordpress.com/2011/08/13/week-12-pull-requests/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=239&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As before, not much to report. Slow plodding through testing, bug fixing, etc….</p>
<p>I have a pull request here for Matrix Expressions</p>
<p><a href="https://github.com/sympy/sympy/pull/532">https://github.com/sympy/sympy/pull/532</a></p>
<p>My branch for Finite and Continuous Random Variables is below. It doesn’t have a pull request yet (I’m waiting for Tom’s code to get in) but I’d be thrilled if anyone wanted to look it over in the meantime.</p>
<p><a href="https://github.com/mrocklin/sympy/tree/rv2">https://github.com/mrocklin/sympy/tree/rv2</a></p>
<p>There is another branch for Multivariate Random Normals that depends on the previous two. I suspect that it might have to change based on feedback from the previous two branches. It’s probably not worth reviewing at this point but, if you’re interested, here it is.</p>
<p><a href="https://github.com/mrocklin/sympy/tree/mvn_rv">https://github.com/mrocklin/sympy/tree/mvn_rv</a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/239/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/239/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/239/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/239/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/239/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/239/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/239/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/239/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/239/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/239/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/239/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/239/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/239/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/239/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=239&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-08-13T15:04:26Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>mrocklin</name>
    </author>
    <source>
      <id>http://sympystats.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sympystats.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sympystats.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sympystats.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sympystats.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>sympy-stats</title>
      <updated>2011-12-04T20:40:15Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8510171342300140296.post-984850516976455252</id>
    <link href="http://seanvig.blogspot.com/feeds/984850516976455252/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/08/getting-coupledspin-merged.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/984850516976455252" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/984850516976455252" rel="self" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/08/getting-coupledspin-merged.html" rel="alternate" type="text/html"/>
    <title>Getting coupled_spin merged</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The biggest development this week was working out what is needed to get the coupled_spin which implements spin coupling merged back into master. There were some things to clean up with non-spin modules and a few minor things to address, but in cleaning this up, there will be some big changes to the way spin coupling works. First, with respect to things that have been implemented, rewrite and represent will no longer handle the coupling and uncoupling of states. To do coupling and uncoupling, instead, a couple and uncouple method will be created to handle the coupling and uncoupling of states. In addition, coupled states will now be represented by new classes, J?KetCoupled for the Cartesian directions. These will be returned by rewrite when a TensorProduct is coupled and will return the proper vector for the coupled space when it is represented and can be uncoupled when an uncoupled operator acts on it.<br/><br/>Most of these new changes have been implemented to varying degrees. There is some functionality lacking, but much of what remains for this is to implement tests for the new functions and make sure everything is working properly.<br/><br/>The coupling of arbitrary number of spin spaces had made slow progress due to some ambiguity when coupled states were created using normal states, but with the new Coupled classes, specifying the coupling should be possible, thus making the computations easier.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8510171342300140296-984850516976455252?l=seanvig.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-08-13T01:50:40Z</updated>
    <published>2011-08-13T01:50:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="GSoC"/>
    <author>
      <name>Sean Vig</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/18029750000026588134</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8510171342300140296</id>
      <category term="sympy"/>
      <category term="GSoC"/>
      <author>
        <name>Sean Vig</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/18029750000026588134</uri>
      </author>
      <link href="http://seanvig.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://seanvig.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Developing Wigner-3nj Symbols in SymPy</subtitle>
      <title>Sean Vig's 2011 GSoC Project</title>
      <updated>2011-11-28T05:58:52Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://nessgrh.wordpress.com/?p=366</id>
    <link href="http://nessgrh.wordpress.com/2011/08/12/last-status-update-probably/" rel="alternate" type="text/html"/>
    <title>Last Status Update (Probably)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Time flies by … I feel like I just started hyperexpand() yesterday (not quite actually; but you get the idea *g*). I’ve been moving around this week, so I wasn’t terribly productive so far. I did, however, compute (reasonably) neat representations for all the in the hyperexpand() table. These examples demonstrate the kind of neat [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=366&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Time flies by … I feel like I just started hyperexpand() yesterday (not quite actually; but you get the idea *g*). I’ve been moving around this week, so I wasn’t terribly productive so far. I did, however, compute (reasonably) neat representations for all the <img alt="{}_pF_{p-1}" class="latex" src="http://s0.wp.com/latex.php?latex=%7B%7D_pF_%7Bp-1%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="{}_pF_{p-1}"/> in the hyperexpand() table. These <a href="http://pastebin.com/raw.php?i=fv9BNEMe">examples</a> demonstrate the kind of neat answers this can yield (compare to some of the examples from last week) [actually the tables contain some much more complicated functions, but I was not yet able to come up with interesting integrals that yield these answers *g*].</p>
<p>My final plan, beyond mere cleanup and bugfixing, is to do something along the way of simplifying convergence conditions. This won’t be anything fancy (I’m thinking of peep-hole optimisation); my goal is to make mess like the <a href="http://pastebin.com/raw.php?i=dYdgefP9">following</a> somewhat less horrific. I hope to have a final pull request ready by sunday night. Then I will finally slow down and relax; work towards merging my branches; perhaps review some other GSOC pull requests.</p>
<p>Quite a summer.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/366/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/366/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/366/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/366/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/366/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/366/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/366/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/366/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/366/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/366/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/366/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/366/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/366/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/366/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=366&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-08-12T18:22:27Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>nessgrh</name>
    </author>
    <source>
      <id>http://nessgrh.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://nessgrh.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://nessgrh.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://nessgrh.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://nessgrh.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My GSoC Project</subtitle>
      <title>nessgrh</title>
      <updated>2011-12-04T20:40:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://f1728.wordpress.com/?p=234</id>
    <link href="http://f1728.wordpress.com/2011/08/12/week-12/" rel="alternate" type="text/html"/>
    <title>Week 12</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi everyone, welcome to one of the last updates. This week I finally finished FGLM without having to use solve, which makes it quite fast. The problem I had was the following: Suppose you’re given a sequence of non-zero vectors one after the other. You know of them are linearly independant and thus you consider [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;blog=22515617&amp;post=234&amp;subd=f1728&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi everyone, welcome to one of the last updates. This week I finally finished FGLM without having to use <code>solve</code>, which makes it quite fast. The problem I had was the following:</p>
<p>Suppose you’re given a sequence of non-zero vectors <img alt="v_1 = (1, 0, \ldots, 0)^t, \ldots, v_r" class="latex" src="http://s0.wp.com/latex.php?latex=v_1+%3D+%281%2C+0%2C+%5Cldots%2C+0%29%5Et%2C+%5Cldots%2C+v_r&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="v_1 = (1, 0, \ldots, 0)^t, \ldots, v_r"/> one after the other. You know <img alt="n &lt; r" class="latex" src="http://s0.wp.com/latex.php?latex=n+%3C+r&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="n &lt; r"/> of them are linearly independant and thus you consider them to be a basis of the spanned space. Now you would like to iteratively determine of a new vector <img alt="v_s" class="latex" src="http://s0.wp.com/latex.php?latex=v_s&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="v_s"/> is linearly dependant on <img alt="v_1, \ldots, v_{s-1}" class="latex" src="http://s0.wp.com/latex.php?latex=v_1%2C+%5Cldots%2C+v_%7Bs-1%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="v_1, \ldots, v_{s-1}"/> and if not, add it to your basis.<br/>
You could do this by solving the following system <img alt="\sum_{i=1}^{s-1} \lambda_i v_i = v_s" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bs-1%7D+%5Clambda_i+v_i+%3D+v_s&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\sum_{i=1}^{s-1} \lambda_i v_i = v_s"/> but this will be a relatively expensive operation and it can be done better:</p>
<p>Let <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P"/> be the <img alt="n \times n" class="latex" src="http://s0.wp.com/latex.php?latex=n+%5Ctimes+n&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="n \times n"/> identity matrix. At the beginning, it maps <img alt="v_1" class="latex" src="http://s0.wp.com/latex.php?latex=v_1&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="v_1"/> to <img alt="P v_1 = v_1 = e_1" class="latex" src="http://s0.wp.com/latex.php?latex=P+v_1+%3D+v_1+%3D+e_1&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P v_1 = v_1 = e_1"/>, which is correct.</p>
<p>Suppose now, that <img alt="P \tilde{v}_i = e_i" class="latex" src="http://s0.wp.com/latex.php?latex=P+%5Ctilde%7Bv%7D_i+%3D+e_i&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P \tilde{v}_i = e_i"/> for all <img alt="i \in \{1, \ldots, s-1\}" class="latex" src="http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+%5Cldots%2C+s-1%5C%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="i \in \{1, \ldots, s-1\}"/>, then the following can occur: Either <img alt="P \tilde{v}_s" class="latex" src="http://s0.wp.com/latex.php?latex=P+%5Ctilde%7Bv%7D_s&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P \tilde{v}_s"/> has no non-zero entries after the <img alt="s-1" class="latex" src="http://s0.wp.com/latex.php?latex=s-1&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="s-1"/>-th, which means that <img alt="\tilde{v}_s" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctilde%7Bv%7D_s&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\tilde{v}_s"/> is an element of the vector space spanned by <img alt="\{\tilde{v}_1, \ldots, \tilde{v}_{s-1}\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5C%7B%5Ctilde%7Bv%7D_1%2C+%5Cldots%2C+%5Ctilde%7Bv%7D_%7Bs-1%7D%5C%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\{\tilde{v}_1, \ldots, \tilde{v}_{s-1}\}"/> and thus can be discarded, or it has a non-zero entry after the <img alt="s-1" class="latex" src="http://s0.wp.com/latex.php?latex=s-1&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="s-1"/>-th and is thus linearly independant from the previous vectors.<br/>
Now I’d like to update <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P"/>, such that <img alt="P \tilde{v}_i = e_i" class="latex" src="http://s0.wp.com/latex.php?latex=P+%5Ctilde%7Bv%7D_i+%3D+e_i&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P \tilde{v}_i = e_i"/> for all <img alt="i \in \{1, \ldots, s\}" class="latex" src="http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+%5Cldots%2C+s%5C%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="i \in \{1, \ldots, s\}"/>. Let <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="k"/> be the smallest index greater than <img alt="s" class="latex" src="http://s0.wp.com/latex.php?latex=s&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="s"/> such that <img alt="(P \tilde{v}_s)_k" class="latex" src="http://s0.wp.com/latex.php?latex=%28P+%5Ctilde%7Bv%7D_s%29_k&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="(P \tilde{v}_s)_k"/> is non-zero and <img alt="\lambda = P \tilde{v}_s" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clambda+%3D+P+%5Ctilde%7Bv%7D_s&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\lambda = P \tilde{v}_s"/>. Then</p>
<p><img alt="P_{i,j} = \begin{cases} \frac{P_{k, j}}{\lambda_k}  &amp; \mbox{if } i = s\\ P_{s,j} - \frac{P_{k,j}}{\lambda_k} \lambda_i  &amp; \mbox{if } i = k\\ P_{i,j} - \frac{P_{k,j}}{\lambda_k} \lambda{i}  &amp; \mbox{otherwise}\end{cases}" class="latex" src="http://s0.wp.com/latex.php?latex=P_%7Bi%2Cj%7D+%3D+%5Cbegin%7Bcases%7D+%5Cfrac%7BP_%7Bk%2C+j%7D%7D%7B%5Clambda_k%7D++%26+%5Cmbox%7Bif+%7D+i+%3D+s%5C%5C+P_%7Bs%2Cj%7D+-+%5Cfrac%7BP_%7Bk%2Cj%7D%7D%7B%5Clambda_k%7D+%5Clambda_i++%26+%5Cmbox%7Bif+%7D+i+%3D+k%5C%5C+P_%7Bi%2Cj%7D+-+%5Cfrac%7BP_%7Bk%2Cj%7D%7D%7B%5Clambda_k%7D+%5Clambda%7Bi%7D++%26+%5Cmbox%7Botherwise%7D%5Cend%7Bcases%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P_{i,j} = \begin{cases} \frac{P_{k, j}}{\lambda_k}  &amp; \mbox{if } i = s\\ P_{s,j} - \frac{P_{k,j}}{\lambda_k} \lambda_i  &amp; \mbox{if } i = k\\ P_{i,j} - \frac{P_{k,j}}{\lambda_k} \lambda{i}  &amp; \mbox{otherwise}\end{cases}"/></p>
<p>This new <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P"/> has the desired properties (just multiply it with <img alt="\tilde{v}_1, \ldots, \tilde{v}_s" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctilde%7Bv%7D_1%2C+%5Cldots%2C+%5Ctilde%7Bv%7D_s&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\tilde{v}_1, \ldots, \tilde{v}_s"/>). Instead of having to use <code>solve</code>, multiply with <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P"/> and look if enough coefficients at the end are <img alt="0" class="latex" src="http://s0.wp.com/latex.php?latex=0&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="0"/>, if so, the vector is linearly dependant on the previous, if not, add it to the basis and update the matrix <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P"/>.</p>
<p>Being reluctant and not thinking about this thoroughly before trying to write code cost a lot of time. :/</p>
<p>Anyway, other than FGLM I wrote some documentation (which was overdue… sorry) and tried to improve rational simplification a bit (without much success).</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/f1728.wordpress.com/234/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/f1728.wordpress.com/234/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/f1728.wordpress.com/234/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/f1728.wordpress.com/234/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/f1728.wordpress.com/234/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/f1728.wordpress.com/234/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/f1728.wordpress.com/234/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/f1728.wordpress.com/234/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/f1728.wordpress.com/234/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/f1728.wordpress.com/234/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/f1728.wordpress.com/234/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/f1728.wordpress.com/234/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/f1728.wordpress.com/234/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/f1728.wordpress.com/234/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;blog=22515617&amp;post=234&amp;subd=f1728&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy"/></div>
    </content>
    <updated>2011-08-12T15:40:02Z</updated>
    <category term="SymPy"/>
    <author>
      <name>f1728</name>
    </author>
    <source>
      <id>http://f1728.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://f1728.wordpress.com/category/SymPy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://f1728.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://f1728.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://f1728.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>f1728 » SymPy</title>
      <updated>2011-08-12T15:40:14Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1020</id>
    <link href="http://asmeurersympy.wordpress.com/2011/08/08/hacking-pudb-now-an-even-better-python-debugger/" rel="alternate" type="text/html"/>
    <title>Hacking PuDB: Now an even better Python debugger</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Readers of this blog may remember last year when I wrote about this awesome visual console Python debugger called PuDB. I suggest you read that post if you haven’t. At the end of that post, I noted that Ondřej and I had hacked it to make the colors more livable. Well, a couple of weeks [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1020&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Readers of this blog may remember last year when I <a href="http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger/" target="_blank">wrote</a> about this awesome visual console Python debugger called <a href="http://pypi.python.org/pypi/pudb" target="_blank">PuDB</a>.  I suggest you read that post if you haven’t.</p>
<p>At the end of that post, I noted that Ondřej and I had hacked it to make the colors more livable.  Well, a couple of weeks ago, GitHub user <a href="https://github.com/jtriley" target="_blank">jtriley</a> sent me an email asking me to back port my changes.</p>
<p>A lot has changed since I wrote my blog post last year.  PuDB now has an official <a href="http://lists.tiker.net/listinfo/pudb" target="_blank">mailing list</a> and an official <a href="https://github.com/inducer/pudb" target="_blank">GitHub repo</a>.</p>
<p>So I deleted my <a href="https://github.com/asmeurer/pudb" target="_blank">GitHub clone</a> and reforked from the official version.  </p>
<p>A lot has also changed in the official code.  Andreas had added config support, including a built-in prefs dialog that lets you set a few settings:  the ability to turn on or off line numbers and the ability to change themes.</p>
<p>So I took the new code and added my theme as an official theme.  This was pretty straight forward to do.</p>
<p>But then, I got a little carried away.  </p>
<p>I noticed that it was difficult to choose a theme with the built-in prefs window because you had to close and reopen the window each time you made a change.  So I added code to make it auto-update your changes as you made them.</p>
<p>Then I went back and looked at my original blog post and looked at the things that I didn’t like.  There were two things.  First, the default stringifier for variables is <code>type</code>, which is completely useless.  This is because <code>type</code> is very fast and stable to compute.  I had previously hacked this to be <code>str</code>, but now that there was an official config file with a prefs dialog, I figured it should go there. </p>
<p>So I added support to change this setting.  But this wasn’t enough for me.  I also added the ability to define your own custom stringifier.  You just create a Python file that defines a function called <code>pudb_stringifier(obj)</code>, which converts <code>obj</code> into the desired string representation.  I included an <a href="https://github.com/inducer/pudb/blob/master/example-stringifier.py" target="_blank">example file</a> that gives a fancy example that uses signals to compute the string value, but times out after one second and falls back to the type.  This alleviates one of the problems of using <code>str</code>, which is that it can be slow for objects with large string expressions, especially SymPy objects, where sometimes the printer can be slow.</p>
<p>The second thing I didn’t like was that although you can change the width of the right-hand side bar, you could not change the relative heights of the variables, stack, and breakpoints boxes.  I never use breakpoints, and rarely use the stack, so I would prefer to have those smaller and the variables larger.  So I implemented it so that the <code>[</code> and <code>]</code> keys make the selected view smaller or larger.  This information is all saved in the config file, so it’s remembered when you close and reopen PuDB.</p>
<p>There was one other thing that I didn’t like, which a change since my last blog post that reversed the order of the stack variables from what it was.  It used to be most recent at the bottom, but it was changed to most recent at the top.  This perhaps makes more sense, but the buttons to move around the stack, <code>u</code> and <code>d</code>, were still the same: <code>u</code> moves down the stack (i.e., less recent), and <code>d</code> moves up.  These keys were already well established—indeed, these are the same keys used in Python’s built-in debugger pdb—so I added a setting to change the stack order.  This was an easy change to make at this point, as I was already well aquatinted with the settings code, and only two lines of code needed to be changed when the setting changed.  Like all other settings, this uses the cool magic that changes the setting in real time, so you can see the effect without closing the settings window.</p>
<p>Then someone on the mailing list requested a feature that I realized I also wanted, the ability to wrap variables.  Previously, any variable that was longer than the variable view would just be cut off.  You could make it wider, but that only helped a little bit.  Otherwise, if you wanted to see the whole variable, you had to open IPython by pressing <code>!</code> and view it there.</p>
<p>So, I implemented this.  This was definitely the hardest thing to implement.  I found out that it’s ironically very difficult to debug PuDB itself.  You can’t run PuDB inside of PuDB if PuDB crashes, as both instances will just crash.  Also, PuDB eats any print statements.  The solution, suggested by PuDB author Andreas Klöckner, was to get the ttys file of another terminal (e.g., <code>/dev/ttys012</code>) and write the output to that.</p>
<p>I also made it so that non-wrapped variables show <code>...</code> at the end, at Andreas’s suggestion.  I wanted to use the unicode <code>…</code>, but this was not working at all.  I discovered how much unicode really is a mess in Python 2.  The problem has something to do with … being a three byte character, and I think it also has to do with the color codes that urwid uses.  I’ll try it again once PuDB is ported to Python 3, but for now,  we are going to have to do with the three ascii dots.</p>
<p>The wrapping code is waiting for merge, but the rest are already in.  Here is a screen shot demonstrating some of the things I did:</p>
<div class="wp-caption alignnone" id="attachment_1021" style="width: 310px;"><a href="http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm.png"><img alt="" class="size-medium wp-image-1021" height="245" src="http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm.png?w=300&amp;h=245" title="Improved PuDB" width="300"/></a><p class="wp-caption-text">Click for full size image</p></div>
<p>Things that I implemented to notice here:</p>
<p>- The midnight theme.<br/>
- The stack and breakpoints views have been shrunken.<br/>
- The variables are wrapped.<br/>
- Wrapping for the variable <code>fourhundred</code> has been turned off (you can turn wrapping on or off on a per-variable basis by selecting the variable and pressing <code>w</code>).   Notice that there is an ellipsis at the end to note it has been cut off.<br/>
- Nested variables now have <code>|</code> before them, to distinguish them from wrapped variables, which are also indented.  This change may or may not be accepted by Andreas.</p>
<p>Here’s a screen shot showing the prefs window.  I did not implement this, but I did implement all but the first two preferences in the window. I’ve made my window tall so you can see all the options.  You really have to get the code and try it to see the auto-update awesomeness.  You can open the prefs window by pressing <code>Ctrl-p</code> (this was not at all obvious to me the first time I used it, so I also submitted a patch that makes it open the first time you use PuDB).</p>
<div class="wp-caption alignnone" id="attachment_1023" style="width: 253px;"><a href="http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-41-30-pm.png"><img alt="" class="size-medium wp-image-1023" height="300" src="http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-41-30-pm.png?w=243&amp;h=300" title="PuDB Prefs Window" width="243"/></a><p class="wp-caption-text">Click to see full size image</p></div>
<p>So if you’re not already using this awesome Python debugger, you should.  You can <code>pip install pudb</code>, or <a href="https://github.com/inducer/pudb" target="_blank">fork it</a> at GitHub.</p>
<p>Running it in your code is very easy.  Just add</p>
<p/><pre class="brush: python;">import pudb;pudb.set_trace()
</pre><p/>
<p>in your code wherever you want to set a break point, or you can do <code>python -m pudb.run script.py</code>.</p>
<p>This awesome tool has increased my productivity tenfold since I discovered it, and has helped me track down bugs that would have otherwise extremely difficult if not impossible to find.  And now, it’s just better.</p>
<p>PuDB uses the <a href="http://excess.org/urwid/" target="_blank">urwid library</a> to do all its console GUI magic.  This library makes it pretty easy to do a lot of stuff. For example, it automatically does relative sizing of widgets, so, for example, when you resize the variables, stack, or breakpoints views, you are actually increasing the relative size of each, not the size in characters.  This makes it portable against any terminal size.  The library also made coding the prefs window autoupdate magic very easy.</p>
<p>Also, I just want to note that git and GitHub make collaboration like this very easy.  I just forked his project, made some improvements, and submitted them as pull requests.  Then it was easy to discuss the changes.  If the code had not been on GitHub and especially if it had not been in git, I probably would have never bothered to submit my contributions upstream.  I highly recommend that every open source project use git and GitHub.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1020/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1020/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1020/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1020/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1020/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1020/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1020/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1020/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1020/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1020/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1020/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1020/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1020/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1020/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1020&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-08-08T03:16:10Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-12-04T20:40:07Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://lazovichsympy.wordpress.com/?p=86</id>
    <link href="http://lazovichsympy.wordpress.com/2011/08/06/an-altered-internal-api-for-default-representations-and-fun-with-wavefunctions/" rel="alternate" type="text/html"/>
    <title>An altered internal API for default representations and fun with Wavefunctions</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week was a very, very busy week. While there were only a handful of commits, they were probably some of the most crucial ones yet in bringing this home and being able to start writing example systems. With pencils down only two weeks away, it is seriously crunchtime. A very nice development was the [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;blog=22774068&amp;post=86&amp;subd=lazovichsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week was a very, very busy week. While there were only a handful of commits, they were probably some of the most crucial ones yet in bringing this home and being able to start writing example systems. With pencils down only two weeks away, it is seriously crunchtime.</p>
<p>A very nice development was the incorporation of Wavefunctions (Wf) and Differential Operators (DO) into the main represent logic. If you now try to represent anything in cartesian.py, you will get expressions that actually include Wf and have the DO applied appropriately! (I will soon be adding support for a qapply flag, which if set to false will leave all DOs intact without applying them.) Support for this included adding calls to qapply as well a function which unwraps all Wf around expressions before integrating over unities, then rewrapping the final result in a single Wf object.</p>
<p>With this done, I moved on to another quite important task in the represent logic that I discussed with Brian. This involves dealing with the ambiguous case in represent where no basis is specified in the initial call to represent. The current way that the quantum modules are set up to handle this logic involves the states having an internal _represent_default_basis method, which simply calls the appropriate _represent_FOO method internally in the class. This entire process is basically a black box to the outer represent logic. This becomes a problem in continuous bases, where we actually need to know which basis was chosen for representing (in order to know if there were any unities inserted and integrate appropriately). This is also a more general problem in that if you have an arbitrary expression, you don’t know if all of the internal _represent_default_basis calls actually represent the individual QExprs in the same basis! You could, in fact, have one QExpr represented in a different basis than another and end up with some very weird things.</p>
<p>So, there are really two problems exposed by this API weakness, and we need to address them both. First, the main represent logic needs to know what the default basis for a given QExpr is. Second, in the case of arbitrary quantum expressions, we need to choose one basis to represent all of the individual QExprs in.</p>
<p>Brian and I have discussed strategies to address both of these issues. The first is a change in the internal API for default representations. Rather than using the current _represent_default_basis, classes should now contain an internal _get_default_basis, which simply returns  the class which is meant to be the default basis for that QExpr. This way, we can still replicate the previous behavior, but the main represent logic now knows which basis is the default for that class. Because this involves changing an already quite large base of classes in the spin and quantum computing modules, this was quite an arduous task. After much testing and grappling with errors, the spin and cartesian classes now follow the new represent conventions for this, with the quantum computing classes soon to follow. (I should note, that as these changes were made, the spin classes were also changed to follow additional new conventions for represent. The first is that internally, the basis option is converted to a basis state rather than left as an operator in represent. This means that all _represent_Op methods had to be changed to _represent_Ket methods. Second, rather than being able to specify a single operator, you must now specify the complete commuting set of operators for a given eigenket. This means, for the spin classes, rather than being able to pass basis=Jx, you now pass basis=set([J2, Jx]).)</p>
<p>The second change is to have represent choose which basis to represent in during the first step of the recursion. With the current algorithm, _represent_default_basis was simply called at the lowest level of the recursion, on the individual QExpr. Now, the basis is chosen based on the default basis of the first QExpr in the expression, and all QExprs in the arbitrary expression are represented in this basis. This means all the representations will be consistent and we aren’t left with any strange final expressions. This change in the represent logic is next on my TODO list.</p>
<p>It is really nice to see all of the pieces of a now very robust representation logic coming together. The schedule I have been following is not quite what I initially planned, but the changes to represent logic for continuous bases ended up being <strong>way</strong> more subtle than what I initially anticipated. With all the possibilities for different quantum systems out there, I really envision that at the end of the day this revamped represent will be able to handle what is thrown at it. By GSoC pencils down, I will have at least a few different nice example systems implemented and some very clear documentation. Documenting this is very important to me because I’ve put a ton of time into making sure it will work in very general cases (with Brian’s amazing help and discussion), so making sure users know how it works and how to use its full power is the most important thing to me.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/lazovichsympy.wordpress.com/86/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/lazovichsympy.wordpress.com/86/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/lazovichsympy.wordpress.com/86/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/lazovichsympy.wordpress.com/86/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/lazovichsympy.wordpress.com/86/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/lazovichsympy.wordpress.com/86/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/lazovichsympy.wordpress.com/86/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/lazovichsympy.wordpress.com/86/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/lazovichsympy.wordpress.com/86/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/lazovichsympy.wordpress.com/86/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/lazovichsympy.wordpress.com/86/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/lazovichsympy.wordpress.com/86/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/lazovichsympy.wordpress.com/86/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/lazovichsympy.wordpress.com/86/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;blog=22774068&amp;post=86&amp;subd=lazovichsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-08-06T22:54:00Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>lazovich</name>
    </author>
    <source>
      <id>http://lazovichsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://lazovichsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://lazovichsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://lazovichsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://lazovichsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My adventures during GSoC 2011</subtitle>
      <title>Tomo Lazovich's SymPy Blog</title>
      <updated>2011-12-04T20:40:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://gilbertgede.wordpress.com/?p=78</id>
    <link href="http://gilbertgede.wordpress.com/2011/08/06/gsoc-week-11/" rel="alternate" type="text/html"/>
    <title>GSoC, Week 11</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Well, it looks like there is a little over 1 full week left. This week’s post probably won’t be too long. I have a list of the last few things left to work on. The last few (big) pieces are: finishing code output, making sure you can bring non-contributing forces into evidence, and documentation work. Finishing [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=78&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Well, it looks like there is a little over 1 full week left. This week’s post probably won’t be too long. I have a list of the last few things left to work on. The last few (big) pieces are: finishing code output, making sure you can bring non-contributing forces into evidence, and documentation work.</p>
<p>Finishing the code output is fairly straight forward; there needs to be some thought given to: output quantities, time to write to file, correct use of cse(), and C code output. I already have code which writes to a file MATLAB or SciPy code for numerical integration, with an option to use cse() on the expressions. Using cse() makes it take longer to generate the code, but the code can execute significantly faster (especially with the bike, where there are a few hundred “common sub-expressions”). Writing to a file unfortunately seems to cost a similar amount of time as printing to the screen; in the case of the bike, a few minutes. There also needs to be some though of how to handle output quantities. When numerically integrating equations of motion, it’s common to look at things like total energy, or a body’s angular momentum, etc. A nice, clean way to work these into the integration would be ideal. There is also the issue of dealing with things like matrices as part of the code output; one might want to output a matrix for doing animations. Deciding on how to accept a matrix and format it for output also needs to be done.</p>
<p>One of the advantages of Kane’s Method is that “non-contributing forces” do not come into the equations of motion. Non-contributing forces are things like normal forces, contact (but not friction forces) such as pinned or rolling connections, along with some others. Unfortunately, this can also be a disadvantage of Kane’s Method; frequently one wants to know the value of these forces, in cases like: checking that normal forces do not go negative, calculating friction forces, joint constraint forces, etc. There is a way of using Kane’s Method which involves introducing “auxiliary speeds” and “fictitious forces”; the auxiliary speeds are defined as zero, additional equations are introduced, and then the forces are solved for (in terms of the “real” speeds).  I need to go through this to make sure my code is compatible with it; additionally, I’ve never done this for a system with non-holonomic constraints though, so I’ll have to check this out too.</p>
<p>Finally I’m finishing up the documentation. I have to go through and check docstring and doctest coverage; for some functions I don’t know if a doctest makes sense, such as generating a file from the code output, and I’m not sure what to do here, so I’ll have to look into this. Also, I have to finish the sphinx-documentation; most of it is done, but I need to go through and make sure I’ve covered some of the newer things I’ve added.</p>
<p>I hope by the end of next week to sort out my branches; right now they’re a little messy; I want to make them a little more organized. I’m planning on going back to having just a pydy branch, and a pydy pull branch. I’ll just work with the pydy-pull brach this time. Previously I made that branch, continued development on pydy, but also made corrections to pydy-pul in request to people’s comments. With development “stopping”, I think that will make things a bit less confusing by just working with issues on the pydy-pull branch.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/78/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/78/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/gilbertgede.wordpress.com/78/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/gilbertgede.wordpress.com/78/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/gilbertgede.wordpress.com/78/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/gilbertgede.wordpress.com/78/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/gilbertgede.wordpress.com/78/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/gilbertgede.wordpress.com/78/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/gilbertgede.wordpress.com/78/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/gilbertgede.wordpress.com/78/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/gilbertgede.wordpress.com/78/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/gilbertgede.wordpress.com/78/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/gilbertgede.wordpress.com/78/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/gilbertgede.wordpress.com/78/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=78&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-08-06T20:46:08Z</updated>
    <category term="GSoC 2011"/>
    <category term="PyDy"/>
    <category term="SymPy"/>
    <author>
      <name>gilbertgede</name>
    </author>
    <source>
      <id>http://gilbertgede.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://gilbertgede.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://gilbertgede.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://gilbertgede.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://gilbertgede.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>gilbertgede</title>
      <updated>2011-12-04T20:40:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://nessgrh.wordpress.com/?p=355</id>
    <link href="http://nessgrh.wordpress.com/2011/08/06/branching-once-more/" rel="alternate" type="text/html"/>
    <title>Branching, Once More</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As usual with my “out-of-line” posts, this one is again mostly to clear my own thoughts. It seeks to address the problem of how to get out “nice” answers, in the sense of e.g. finding a representation that is manifestly real (say to use inverse trig functions instead of logarithms with imaginary arguments). This turns [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=355&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As usual with my “out-of-line” posts, this one is again mostly to clear my own thoughts. It seeks to address the problem of how to get out “nice” answers, in the sense of e.g. finding a representation that is manifestly real (say to use inverse trig functions instead of logarithms with imaginary arguments). This turns out to be fairly delicate; let me explain why. Recall that when the code returns an expression like <img alt="\sqrt{1 + e^{-i \pi} z}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csqrt%7B1+%2B+e%5E%7B-i+%5Cpi%7D+z%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\sqrt{1 + e^{-i \pi} z}"/>, we really mean a certain function on the riemann surface of the logarithm which we try to crudely express above. First of all, it is clear that if we want neat answers, we cannot just return this expression as stated. This is because the square-root function <em>per se</em> has lots of meanings, whereas we attach here a <em>very</em> specific meaning to it. There is no realiable way to recognise and transform such expressions later. So we really should return a new function object “MySqrt(z)” which has well-defined meaning for all polar <img alt="z" class="latex" src="http://s0.wp.com/latex.php?latex=z&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="z"/>, and which can convert itself into a nice representation. The trouble is now that we have to very carefully <em>define</em> MySqrt(z) for all polar <img alt="z" class="latex" src="http://s0.wp.com/latex.php?latex=z&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="z"/>, in such a way that all slater-expansions are correct. It is not (to me) immediately obvious that this is even possible (although it will turn out it is); note in particular that this function will necessarily be discontinuous. The first problem to solve then is how to deal with hypergeometric and meijer g-functions branched at other points than zero and infinity. After that we need to find a way to display things nicely.</p>
<h2>Branching at +-1</h2>
<p>We have the following facts about <img alt="{}_pF_q(z)" class="latex" src="http://s0.wp.com/latex.php?latex=%7B%7D_pF_q%28z%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="{}_pF_q(z)"/>:</p>
<ul>
<li>unbranched if <img alt="p \le q" class="latex" src="http://s0.wp.com/latex.php?latex=p+%5Cle+q&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="p \le q"/></li>
<li>branched at <img alt="+1" class="latex" src="http://s0.wp.com/latex.php?latex=%2B1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="+1"/> if <img alt="p = q + 1" class="latex" src="http://s0.wp.com/latex.php?latex=p+%3D+q+%2B+1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="p = q + 1"/></li>
</ul>
<p>And we have the following facts about <img alt="G_{p,q}^{m,n}(z)" class="latex" src="http://s0.wp.com/latex.php?latex=G_%7Bp%2Cq%7D%5E%7Bm%2Cn%7D%28z%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="G_{p,q}^{m,n}(z)"/>:</p>
<ul>
<li>usually branched at <img alt="0, \infty" class="latex" src="http://s0.wp.com/latex.php?latex=0%2C+%5Cinfty&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="0, \infty"/></li>
<li>unbranched at <img alt="+1" class="latex" src="http://s0.wp.com/latex.php?latex=%2B1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="+1"/> if <img alt="\delta = p + q - (m + n)/2 &gt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdelta+%3D+p+%2B+q+-+%28m+%2B+n%29%2F2+%3E+0&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\delta = p + q - (m + n)/2 &gt; 0"/>; in this case it is even analytic in a neighborhood of the positive reals</li>
<li>if <img alt="p = q" class="latex" src="http://s0.wp.com/latex.php?latex=p+%3D+q&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="p = q"/>, branched at <img alt="(-1)^{p - m - n} = (-1)^{q - m - n}" class="latex" src="http://s0.wp.com/latex.php?latex=%28-1%29%5E%7Bp+-+m+-+n%7D+%3D+%28-1%29%5E%7Bq+-+m+-+n%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="(-1)^{p - m - n} = (-1)^{q - m - n}"/></li>
<li>always has a polar lift that is continuous on “circles” (spirals) of radius not equal to one</li>
</ul>
<p>Notice further that the Slater theorem (or a generalisation) can be used to come up with a nice (single) answer if <img alt="\delta &gt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdelta+%3E+0&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\delta &gt; 0"/>. We thus assume now that <img alt="p = q" class="latex" src="http://s0.wp.com/latex.php?latex=p+%3D+q&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="p = q"/> (so there is a problematic branch point) and <img alt="\delta &gt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdelta+%3E+0&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\delta &gt; 0"/> (so that we need to define the lift of the hypergeometric functions involved), and that a version of the slater theorem applies (else there is no work to do at all). As always, we let <img alt="\mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S}"/> be the riemann surface of the logarithm, we understand <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="G"/> to be defined thereon (although it is not continuous).</p>
<p>We immediately find that <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="G"/> is branched at <img alt="-1" class="latex" src="http://s0.wp.com/latex.php?latex=-1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="-1"/>, thus <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="G"/> can be expressed as a sum of hypergeometric functions of argument <img alt="-z" class="latex" src="http://s0.wp.com/latex.php?latex=-z&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="-z"/> or <img alt="\frac{-1}{z}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B-1%7D%7Bz%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\frac{-1}{z}"/>. Now given a hypergeometric function <img alt="{}_pF_{p-1}: D \rightarrow \mathbb{C}" class="latex" src="http://s0.wp.com/latex.php?latex=%7B%7D_pF_%7Bp-1%7D%3A+D+%5Crightarrow+%5Cmathbb%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="{}_pF_{p-1}: D \rightarrow \mathbb{C}"/> (where <img alt="D" class="latex" src="http://s0.wp.com/latex.php?latex=D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="D"/> is the unit disc, the region of convergence of the power series representation), we wish to define a lift <img alt="{}_pF_{p-1}: \mathcal{S} \rightarrow \mathbb{C}" class="latex" src="http://s0.wp.com/latex.php?latex=%7B%7D_pF_%7Bp-1%7D%3A+%5Cmathcal%7BS%7D+%5Crightarrow+%5Cmathbb%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="{}_pF_{p-1}: \mathcal{S} \rightarrow \mathbb{C}"/> which makes all slater-expansions valid for all polar <img alt="z" class="latex" src="http://s0.wp.com/latex.php?latex=z&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="z"/> (even though they were initially only valid for <img alt="|z| &lt; 1" class="latex" src="http://s0.wp.com/latex.php?latex=%7Cz%7C+%3C+1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="|z| &lt; 1"/>). Indeed I claim that there exists a <em>unique</em> <img alt="f(z)" class="latex" src="http://s0.wp.com/latex.php?latex=f%28z%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f(z)"/> lift satisfying the following list of properties:</p>
<ul>
<li><img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f"/> is defined on <img alt="\mathcal{S} \setminus \{e^{i t} | t \in \mathbb{R}\} \cup \{e^{i t}, t \in (0, 2\pi)\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D+%5Csetminus+%5C%7Be%5E%7Bi+t%7D+%7C+t+%5Cin+%5Cmathbb%7BR%7D%5C%7D+%5Ccup+%5C%7Be%5E%7Bi+t%7D%2C+t+%5Cin+%280%2C+2%5Cpi%29%5C%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S} \setminus \{e^{i t} | t \in \mathbb{R}\} \cup \{e^{i t}, t \in (0, 2\pi)\}"/></li>
<li>if <img alt="{}_pF_q" class="latex" src="http://s0.wp.com/latex.php?latex=%7B%7D_pF_q&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="{}_pF_q"/> does not have a pole at <img alt="1" class="latex" src="http://s0.wp.com/latex.php?latex=1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="1"/>, then <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f"/> is additionally defined on <img alt="e^0, e^{2 \pi i}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E0%2C+e%5E%7B2+%5Cpi+i%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^0, e^{2 \pi i}"/></li>
<li><img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f"/> is locally analytic (that is, if <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f"/> is defined at <img alt="z_0" class="latex" src="http://s0.wp.com/latex.php?latex=z_0&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="z_0"/> and <img alt="U" class="latex" src="http://s0.wp.com/latex.php?latex=U&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="U"/> is an open neighbourhood of <img alt="z_0" class="latex" src="http://s0.wp.com/latex.php?latex=z_0&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="z_0"/> on which <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f"/> is defined, then <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f"/> is analytic on <img alt="U" class="latex" src="http://s0.wp.com/latex.php?latex=U&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="U"/>)</li>
<li><img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f"/> <em>is</em> a lift, i.e. if <img alt="p:\mathcal{S} \rightarrow \mathbb{C}" class="latex" src="http://s0.wp.com/latex.php?latex=p%3A%5Cmathcal%7BS%7D+%5Crightarrow+%5Cmathbb%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="p:\mathcal{S} \rightarrow \mathbb{C}"/> denotes the usual projection, then for all <img alt="z \in p^{-1}(D)" class="latex" src="http://s0.wp.com/latex.php?latex=z+%5Cin+p%5E%7B-1%7D%28D%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="z \in p^{-1}(D)"/> we have <img alt="f(z) = {}_pF_q(p(z))" class="latex" src="http://s0.wp.com/latex.php?latex=f%28z%29+%3D+%7B%7D_pF_q%28p%28z%29%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f(z) = {}_pF_q(p(z))"/>.</li>
</ul>
<p>Such a function has, in particular, the following properties:</p>
<ul>
<li><img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f"/> is continuous along the ray <img alt="r e^{i\pi}, r &gt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=r+e%5E%7Bi%5Cpi%7D%2C+r+%3E+0&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="r e^{i\pi}, r &gt; 0"/></li>
<li>it is continuous on “circles” (spirals)</li>
</ul>
<p>From this it is easy to prove that if in all slater expansions the hypergeometric functions have argument <img alt="e^{i \pi}z" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7Bi+%5Cpi%7Dz&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{i \pi}z"/>, then with the above lift the slater expansion holds for all polar <img alt="z" class="latex" src="http://s0.wp.com/latex.php?latex=z&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="z"/>.</p>
<h2>Finding nice representations</h2>
<p>My idea is to create new objects to represent above-defined polar lifts, a la “MySqrt(z)”. hyperexpand() will work exclusively with these, except that in the end it (optionally) calls “rewrite(‘elementary’)”. The object then attempts to determine a “nice” representation (where what that means is up to the object, of course). I now have to sit down and compute said representations, and come up with a good way to test them. Sounds like a final project.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/355/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/355/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/355/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/355/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/355/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/355/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/355/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/355/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/355/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/355/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/355/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/355/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/355/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/355/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=355&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-08-06T19:32:42Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>nessgrh</name>
    </author>
    <source>
      <id>http://nessgrh.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://nessgrh.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://nessgrh.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://nessgrh.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://nessgrh.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My GSoC Project</subtitle>
      <title>nessgrh</title>
      <updated>2011-12-04T20:40:11Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8510171342300140296.post-3492520740647959899</id>
    <link href="http://seanvig.blogspot.com/feeds/3492520740647959899/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/08/moving-beyond-first-coupling-iteration.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/3492520740647959899" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/3492520740647959899" rel="self" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/08/moving-beyond-first-coupling-iteration.html" rel="alternate" type="text/html"/>
    <title>Moving beyond first coupling iteration</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In the last week, one of the main things I did was to submit a pull request for the coupled spin machinery that I have been working on. This pull request can be seen <a href="https://github.com/sympy/sympy/pull/524">here</a>. This implements the coupling and uncoupling operations for states and operators and how these states and operators interact for coupling of two spin states. This pull still has some kinks to work out and some details to iron out, but should be finished up soon.<br/><br/>Moving beyond this pull, the rest of this week has been in working on modifying the coupling methods developed in this pull and making them work for an arbitrary number of spin spaces. The current idea will be to pass a tuple of j values which are to be coupled instead of passing j1 and j2 parameters. While this would work, it would be nice to be able to define how the terms are coupled, noting that the order of how the spaces are coupled matter in determining the coefficients and what will be diagonal in the basis of the coupled states. The current way I am working the coupling is to couple j1 and j2, then couple this to j3, etc. I have currently changed the all the methods to accept the tuple of j values, however, the coupling and uncoupling methods have not been changed to accept arbitrary numbers of spaces. Most of this week has been thinking and trying to determine a good way to implement this machinery that scales to arbitrary numbers of spaces. While it is not directly necessary for dealing with spin states, I will likely also implement Wigner-6j/9j/12j coefficients in cg.py, which will be very similar to the Wigner-3j symbols that were implemented with the Clebsch-Gordan coefficients.<br/><br/>While I am starting to work on this final component of my project, it will be a close call as to whether or not it can get pushed in time to make it in before the end of the project, which will be in just 2 weeks. The initial coupling stuff should get in, but this will be a much closer call. That said, I will definitely see this last part of the project into master.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8510171342300140296-3492520740647959899?l=seanvig.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-08-06T00:00:17Z</updated>
    <published>2011-08-06T00:00:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="GSoC"/>
    <author>
      <name>Sean Vig</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/18029750000026588134</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8510171342300140296</id>
      <category term="sympy"/>
      <category term="GSoC"/>
      <author>
        <name>Sean Vig</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/18029750000026588134</uri>
      </author>
      <link href="http://seanvig.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://seanvig.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Developing Wigner-3nj Symbols in SymPy</subtitle>
      <title>Sean Vig's 2011 GSoC Project</title>
      <updated>2011-11-28T05:58:52Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://nessgrh.wordpress.com/?p=351</id>
    <link href="http://nessgrh.wordpress.com/2011/08/05/status-update%e2%80%94week-11/" rel="alternate" type="text/html"/>
    <title>Status Update—Week 11</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The end of GSOC is rapidly approaching, so this was one further busy week. Here is what I did: Fix some bugs in meijerint, uncovered by statistical integrals, Optimise meijerint and hyperexpand, Implement exponential integrals. Before I go into details, let me stake out a final list of things I hope to do before the [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=351&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The end of GSOC is rapidly approaching, so this was one further busy week. Here is what I did:</p>
<ul>
<li>Fix some bugs in meijerint, uncovered by statistical integrals,</li>
<li>Optimise meijerint and hyperexpand,</li>
<li>Implement exponential integrals.</li>
</ul>
<p>Before I go into details, let me stake out a final list of things I hope to do before the end of summer:</p>
<ol>
<li>Fix a test failure in meijerint. (explained below)</li>
<li>Think about branching again. In particular, investigate how we can come up with “nice” answers.</li>
<li>Investigate why hyperexpand results are sometimes ridiculously complicated.</li>
</ol>
<p>Let’s now turn to what I did. First Matthew reported some bugs in my integration code, mostly related to how real variables are converted into polar ones (that is, they were not, which is wrong). I took the opportunity to test lots of integrals that seemed to be important for statistics, e.g. <a href="http://pastebin.com/raw.php?i=WRyYNrFr">these</a>, computing various moments of the normal, exponential and chi-squared distributions.</p>
<p>Then I started to optimise my code. First I created a script (sympy/benchmark/bench_meijerint.py) which basically times all the individual integrals from the tests. This allowed me to quickly isolate biggest performance problems. <a href="http://pastebin.com/raw.php?i=ZSQb4GfZ">This</a> is the output of the first run, and <a href="http://pastebin.com/raw.php?i=XrDDQf8Y">this</a> is the output with my new optimisations. Let me go through the first few entries on both lists.</p>
<ul>
<li>
<pre>LT((t-apos)**bpos*exp(-cpos*(t-apos))*Heaviside(t-apos), t, s)</pre>
<p>This was my biggest worry, for two reasons. Firstly it seems fairly common—this is just a very basic laplace transform (though with many parameters). Second it is surprisingly hard—in order to do it, the algorithm has to expand the exponential, then bracket the two exponentials as G1, and the rest as G2. However, it turns out that a few tweaks allow us to recognise fairly quickly that the integral won’t be doable without expansion (because <img alt="e^{c*t + d}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7Bc%2At+%2B+d%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{c*t + d}"/> is not in the tables), and then a few improvements to the heuristics make us try things in a reasonable order. Thus this laplace transform is comfortably down in the second list; from 4.8 to 0.5 seconds.</p></li>
<li>
<pre>MT(bessely(a, sqrt(x))**2, x, s)</pre>
<p>and similar mellin transforms involving bessel functions or logarithms are slow for three reasons: (1) Hyperexpand(), is fairly slow to realise that a certain expansion <em>cannot</em> be done. This means that any “mis-step” the algorithm does is quite costly. (2) there tend to be confluent g-functions involved, for which we need series expansions (for computing residues), and these are slow. (3) Combsimp used to be slow. I improved combsimp, and I rewrote the residue function to use series expansions a bit more cleverly. I also improved hyperexpand a bit; the results are fairly noticable, but not as satisfying as for the laplace transform.</p></li>
<li>
<pre>E((x+y-1)**2)</pre>
<p>This computes a certain statistical double integral in two ways, and it is not actually that slow. By my calculation the code winds up doing about 40 integrals (splitting integrals along the real line into two patrs, expanding the binomial, doing a double integral in two steps, and finally doing it all over again the other way round), putting the time for every single integral well into a sensible range.</p></li>
</ul>
<p>I should mention that during this optimisations the path taken by meijerint was changed slightly, causing a test failure in test_meijerint which is actually fairly difficult to correct. So much for robust code…</p>
<p>Finally I implemented exponential integrals. This was quite good fun; let’s just look at a few <a href="http://pastebin.com/raw.php?i=1Lm7nmC4">examples</a>. A few things can be said here. The answers are sometimes messy; often expand() already yields a lot of cancellation. The noticable exception is the integral representation of the generalised exponential integral with two parameters, here more tricks are necessary (but I don’t really think there is any way to know in advance that expressing everything in terms of expint yields such a nice answer, short from recognising the integral). At one stage I’m using a polar variable, this is to allow <img alt="\log(u^2)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%28u%5E2%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\log(u^2)"/> to expand (alternatively one could safely use force here). The laplace transforms are a nice example where answers come out much messier than they have to (the other exponential integrals are mostly as bad es Si, noticable exception being e1). Some of the definite integrals illustrate a similar problem.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/351/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/351/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/351/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/351/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/351/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/351/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/351/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/351/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/351/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/351/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/351/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/351/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/351/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/351/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=351&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-08-05T22:08:31Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>nessgrh</name>
    </author>
    <source>
      <id>http://nessgrh.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://nessgrh.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://nessgrh.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://nessgrh.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://nessgrh.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My GSoC Project</subtitle>
      <title>nessgrh</title>
      <updated>2011-12-04T20:40:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sympystats.wordpress.com/?p=237</id>
    <link href="http://sympystats.wordpress.com/2011/08/05/week-11-testing-cleaning/" rel="alternate" type="text/html"/>
    <title>Week 11: Testing, cleaning</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I’m increasing testing coverage and fixing errors in my random variables branch. I’m not sure how to proceed with the matrix expressions ideas. On one hand I should wait until the community comes to a consensus about what SymPy Matrix … <a href="http://sympystats.wordpress.com/2011/08/05/week-11-testing-cleaning/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=237&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’m increasing testing coverage and fixing errors in my random variables branch.</p>
<p>I’m not sure how to proceed with the matrix expressions ideas. On one hand I should wait until the community comes to a consensus about what SymPy Matrix Expressions should be (or even if they should be at all). On the other hand I don’t ever see this consensus happening. How do I spur on a decision here?</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/237/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/237/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/237/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/237/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/237/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/237/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/237/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/237/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/237/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/237/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/237/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/237/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/237/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/237/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=237&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-08-05T13:26:14Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>mrocklin</name>
    </author>
    <source>
      <id>http://sympystats.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sympystats.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sympystats.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sympystats.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sympystats.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>sympy-stats</title>
      <updated>2011-12-04T20:40:15Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://f1728.wordpress.com/?p=216</id>
    <link href="http://f1728.wordpress.com/2011/08/05/week-11/" rel="alternate" type="text/html"/>
    <title>Week 11</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I tried to write the faster FGLM I mentioned last week. This isn’t so easy because the only source that properly describes this algorithm are Jean-Charles Faugère’s lecture notes (it is mentioned very vaguely in the original FGLM paper) but there are some errors in the update function. The purpose of the function [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;blog=22515617&amp;post=216&amp;subd=f1728&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I tried to write the faster FGLM I mentioned last week. This isn’t so easy because the only source that properly describes this algorithm are Jean-Charles Faugère’s <a href="http://www-salsa.lip6.fr/~jcf/Teaching/index.html">lecture notes</a> (it is mentioned very vaguely in the original FGLM paper) but there are some errors in the <code>update</code> function. The purpose of the function is to avoid determining whether <img alt="NF(x_i m)" class="latex" src="http://s0.wp.com/latex.php?latex=NF%28x_i+m%29&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="NF(x_i m)"/> is in the vectorspace spanned by <img alt="v_1, \ldots, v_s" class="latex" src="http://s0.wp.com/latex.php?latex=v_1%2C+%5Cldots%2C+v_s&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="v_1, \ldots, v_s"/> by using <code>solve</code>.</p>
<p>This can be done more efficiently by having a matrix <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P"/>, which maps the old basis to the new basis. This matrix is constructed iteratively, such that before every <code>update</code> call <img alt="P v_i = e_i" class="latex" src="http://s0.wp.com/latex.php?latex=P+v_i+%3D+e_i&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P v_i = e_i"/> for <img alt="i \in \{1, \ldots, s\}" class="latex" src="http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+%5Cldots%2C+s%5C%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="i \in \{1, \ldots, s\}"/> and <img alt="P v_{s+1} = \lambda" class="latex" src="http://s0.wp.com/latex.php?latex=P+v_%7Bs%2B1%7D+%3D+%5Clambda&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P v_{s+1} = \lambda"/>, which has not the desired shape, and afterwards <img alt="P v_i = e_i" class="latex" src="http://s0.wp.com/latex.php?latex=P+v_i+%3D+e_i&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P v_i = e_i"/> for <img alt="i \in \{1, \ldots, s + 1\}" class="latex" src="http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+%5Cldots%2C+s+%2B+1%5C%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="i \in \{1, \ldots, s + 1\}"/>. So instead of having to use <code>solve</code> (<img alt="O(dim^3)" class="latex" src="http://s0.wp.com/latex.php?latex=O%28dim%5E3%29&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="O(dim^3)"/>), matrix multiplication and changing some entries of a matrix would suffice (<img alt="O(dim^2)" class="latex" src="http://s0.wp.com/latex.php?latex=O%28dim%5E2%29&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="O(dim^2)"/>).</p>
<p>Now I have the problem that there are some errors in the description of the algorithm (and I am too stupid to fix them… so far):</p>
<p>First of all, it says <img alt="\alpha := \frac{P_{j,k}}{P_{k,k}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Calpha+%3A%3D+%5Cfrac%7BP_%7Bj%2Ck%7D%7D%7BP_%7Bk%2Ck%7D%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\alpha := \frac{P_{j,k}}{P_{k,k}}"/>, which should be <img alt="\frac{P_{k, j}}{\lambda_k}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7BP_%7Bk%2C+j%7D%7D%7B%5Clambda_k%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\frac{P_{k, j}}{\lambda_k}"/> because then <img alt="(P v_{s+1})_{s+1} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=%28P+v_%7Bs%2B1%7D%29_%7Bs%2B1%7D+%3D+1&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="(P v_{s+1})_{s+1} = 1"/> as desired. Then, some more indices seem to have the wrong order, at least with the current code I can convert a few more systems correctly. Currently, all old <img alt="v_i" class="latex" src="http://s0.wp.com/latex.php?latex=v_i&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="v_i"/> map to <img alt="e_i" class="latex" src="http://s0.wp.com/latex.php?latex=e_i&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="e_i"/> but <img alt="P v_{s+1}" class="latex" src="http://s0.wp.com/latex.php?latex=P+v_%7Bs%2B1%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P v_{s+1}"/> has non-zero entries apart from the <img alt="(s+1)" class="latex" src="http://s0.wp.com/latex.php?latex=%28s%2B1%29&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="(s+1)"/>-th. I dunno.</p>
<p>To give an example of the performance improvements for a small problem (for which the algorithm gives the correct result):</p>
<pre class="brush: python;">&gt;&gt;&gt; F=[x**3+x+1, y**2+1, z - (x**2 + y)]
&gt;&gt;&gt; G=groebner(F, x, y, z, order='grlex')
&gt;&gt;&gt; %timeit fglm(G, "lex", x,y,z, order='grlex')  # old
1 loops, best of 3: 822 ms per loop
&gt;&gt;&gt; %timeit fglm(G, x,y,z, order='grlex')
10 loops, best of 3: 45.1 ms per loop
</pre>
<p>This also due to using <code>sdp</code>s everywhere, whereas the old code had to convert between several representations. </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/f1728.wordpress.com/216/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/f1728.wordpress.com/216/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/f1728.wordpress.com/216/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/f1728.wordpress.com/216/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/f1728.wordpress.com/216/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/f1728.wordpress.com/216/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/f1728.wordpress.com/216/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/f1728.wordpress.com/216/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/f1728.wordpress.com/216/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/f1728.wordpress.com/216/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/f1728.wordpress.com/216/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/f1728.wordpress.com/216/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/f1728.wordpress.com/216/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/f1728.wordpress.com/216/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;blog=22515617&amp;post=216&amp;subd=f1728&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy"/></div>
    </content>
    <updated>2011-08-05T13:03:21Z</updated>
    <category term="SymPy"/>
    <author>
      <name>f1728</name>
    </author>
    <source>
      <id>http://f1728.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://f1728.wordpress.com/category/SymPy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://f1728.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://f1728.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://f1728.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>f1728 » SymPy</title>
      <updated>2011-08-12T15:40:14Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sherjilozair.wordpress.com/?p=80</id>
    <link href="http://sherjilozair.wordpress.com/2011/08/05/sorry-for-the-late-blogpost/" rel="alternate" type="text/html"/>
    <title>Sorry for the late blogpost</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hello everyone, sorry about the lack of activity. I had been on a vacation from 15th last month to 24th, and my college started on 25th. So I got busy with the new semester. I was still able to extract time to compile a pull request with all the final code I had written in [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sherjilozair.wordpress.com&amp;blog=14711170&amp;post=80&amp;subd=sherjilozair&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello everyone, sorry about the lack of activity. I had been on a vacation from 15th last month to 24th, and my college started on 25th. So I got busy with the new semester. I was still able to extract time to compile a pull request with all the final code I had written in my various experimental branches. You can take a look here. https://github.com/sympy/sympy/pull/525</p>
<p>Part of why I couldn’t get things done quickly is that I couldn’t agree upon what interface of the classes to use, since it depends so much on how the community wants it to be done. Still I have put in an interface as to how I feel it should be. Only a very small subset of matrix functionalities have been kept inside the Matrix classes, the rest of them are in a separate file called *_tools.py</p>
<p>But that’s just my inexperienced decision. Anyone with suggestions could go over to the diff and comment in appropriate places of what they think it should rather be. The algorithms are all working well. But things like imports, naming conventions are not consistent and well-formed as of now. So, the code is not very user-friendly as of now. I made a pull request so that everyone could look at my code, comment, review, etc.</p>
<p>Since my college has started, I would not be able to devote much portion of my day time to sympy work, so I request the mentor group to allow me to take work slowly and in small chunks from now on.</p>
<p> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sherjilozair.wordpress.com/80/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sherjilozair.wordpress.com/80/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/sherjilozair.wordpress.com/80/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/sherjilozair.wordpress.com/80/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/sherjilozair.wordpress.com/80/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/sherjilozair.wordpress.com/80/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/sherjilozair.wordpress.com/80/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/sherjilozair.wordpress.com/80/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/sherjilozair.wordpress.com/80/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/sherjilozair.wordpress.com/80/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/sherjilozair.wordpress.com/80/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/sherjilozair.wordpress.com/80/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/sherjilozair.wordpress.com/80/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/sherjilozair.wordpress.com/80/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sherjilozair.wordpress.com&amp;blog=14711170&amp;post=80&amp;subd=sherjilozair&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-08-04T20:23:08Z</updated>
    <category term="Sympy"/>
    <author>
      <name>Sherjil Ozair</name>
    </author>
    <source>
      <id>http://sherjilozair.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sherjilozair.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sherjilozair.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sherjilozair.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sherjilozair.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>Sherjil Ozair</title>
      <updated>2011-12-04T20:40:14Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://lazovichsympy.wordpress.com/?p=83</id>
    <link href="http://lazovichsympy.wordpress.com/2011/07/31/incorporating-wavefunction-and-differentialoperator-into-representations/" rel="alternate" type="text/html"/>
    <title>Incorporating Wavefunction and DifferentialOperator into representations</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This post is a bit late because I’ve been experiencing some computer troubles recently. Since my last post, the represent branch has been merged into sympy master! There are still some issues with representing continuous bases that need to be ironed out, so I have started a represent2 branch to deal with some of these [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;blog=22774068&amp;post=83&amp;subd=lazovichsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This post is a bit late because I’ve been experiencing some computer troubles recently.</p>
<p>Since my last post, the represent branch has been merged into sympy master! There are still some issues with representing continuous bases that need to be ironed out, so I have started a <a href="https://github.com/lazovich/sympy/tree/represent2" title="represent2">represent2</a> branch to deal with some of these changes.</p>
<p>The first commits in the branch are some simple fixes to docstrings and cleanup of the interfaces of Wavefunction (Wf) and DifferentialOperator (DO). Of note are the addition of an _eval_expand to Wf and DO, so that we can do simplifications like expand(Wavefunction((x+y)**2, x, y)) == Wavefunction(x**2, x, y) + Wavefunction(y**2, x, y) + Wavefunction(2*x*y, x, y).</p>
<p>The biggest tasks for represent2 are to incorporate the new Wf and DO classes into the internal represent logic of classes in quantum. Another big task is to simplify the logic of represent. In particular, rep_innerproduct and rep_expectation will become helper functions rather than being called from the main represent logic. This simplifies the main logic, but retains these methods to be called from the internal _represent methods. This is important because these functions know about proper indexing to form representations in these very standard forms, and this means we don’t have to reproduce that logic internally.</p>
<p>Both of these tasks are proving to be quite tricky and time consuming. I hope to have them done in the next couple of days. If that is the case, I expect to be able to rapidly move on to implementing coordinate systems and finally getting some example textbook quantum systems up and running. With only a few weeks of GSoC left, I’ll have to work extra hard to make that happen. Modifying the represent logic is taking much longer than expected, but we’re dealing with very complicated logic here and we want to make sure its robust. I’m confident, though, that I can have a nice finished product by the end of GSoC.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/lazovichsympy.wordpress.com/83/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/lazovichsympy.wordpress.com/83/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/lazovichsympy.wordpress.com/83/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/lazovichsympy.wordpress.com/83/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/lazovichsympy.wordpress.com/83/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/lazovichsympy.wordpress.com/83/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/lazovichsympy.wordpress.com/83/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/lazovichsympy.wordpress.com/83/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/lazovichsympy.wordpress.com/83/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/lazovichsympy.wordpress.com/83/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/lazovichsympy.wordpress.com/83/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/lazovichsympy.wordpress.com/83/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/lazovichsympy.wordpress.com/83/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/lazovichsympy.wordpress.com/83/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;blog=22774068&amp;post=83&amp;subd=lazovichsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-07-31T21:37:05Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>lazovich</name>
    </author>
    <source>
      <id>http://lazovichsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://lazovichsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://lazovichsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://lazovichsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://lazovichsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My adventures during GSoC 2011</subtitle>
      <title>Tomo Lazovich's SymPy Blog</title>
      <updated>2011-12-04T20:40:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://saptman.wordpress.com/?p=29</id>
    <link href="http://saptman.wordpress.com/2011/07/31/update-2/" rel="alternate" type="text/html"/>
    <title>Update</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I implemented generational routines for Fixed density Lyndon words, necklaces and Debruijn cycles. Its still not completely tested so caveat emptor! You can check it out in my iterables branch. Apart from this I got the Permutations branch merged in this week. This was a long standing pull request and will allow folks … <a href="http://saptman.wordpress.com/2011/07/31/update-2/">Read more</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=saptman.wordpress.com&amp;blog=23040289&amp;post=29&amp;subd=saptman&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I implemented generational routines for Fixed density Lyndon words, necklaces and Debruijn cycles. Its still not completely tested so caveat emptor! You can check it out in my iterables branch. Apart from this I got the Permutations branch merged in this week. This was a long standing pull request and will allow folks to do all sorts of stuff that combinatorica allows for Permutations. Currently some graph related stuff is missing but that will be taken care of once I clean up my NetworkX branch. I still need to clean up the Partitions and Subsets pulls which will add another large chunk to the combinatorics module.</p>
<p>I will probably spend this week cleaning up older pull requests rather than creating newer ones. Even so, those interested can keep track of my permutation_groups branch where most of my work related to that will go.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/saptman.wordpress.com/29/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/saptman.wordpress.com/29/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/saptman.wordpress.com/29/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/saptman.wordpress.com/29/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/saptman.wordpress.com/29/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/saptman.wordpress.com/29/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/saptman.wordpress.com/29/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/saptman.wordpress.com/29/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/saptman.wordpress.com/29/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/saptman.wordpress.com/29/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/saptman.wordpress.com/29/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/saptman.wordpress.com/29/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/saptman.wordpress.com/29/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/saptman.wordpress.com/29/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=saptman.wordpress.com&amp;blog=23040289&amp;post=29&amp;subd=saptman&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-07-31T01:45:27Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>saptman</name>
    </author>
    <source>
      <id>http://saptman.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://saptman.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://saptman.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://saptman.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://saptman.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My symply awesome gsoc summer</subtitle>
      <title>saptman</title>
      <updated>2011-12-04T20:40:16Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8510171342300140296.post-8561852009544025205</id>
    <link href="http://seanvig.blogspot.com/feeds/8561852009544025205/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/07/finishing-current-coupled-spin-work.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/8561852009544025205" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/8561852009544025205" rel="self" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/07/finishing-current-coupled-spin-work.html" rel="alternate" type="text/html"/>
    <title>Finishing current coupled spin work</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This last week I made some good headway towards finishing up the coupled spin state work for the coupling of two spin spaces. The decision was made that spin states should not contain any information as to their coupling, which greatly simplifies not only the code, but also the allowable cases when it comes doing things such as applying operators, rewriting, etc. As such, I am very close to finalizing this stage in the coupled spin work. I will try to fix up the implementation for some symbolic cases that should be doable under the current implementation, but all the current code has tests implemented and docstrings in place, so a pull request will be coming up shortly.<br/><br/>With this stage finishing, I will be moving on to generalizing the current implementation to coupling between more than two spin spaces. I will first need to expand cg.py to include Wigner-6j/9j/etc symbols to describe the coupling between these additional spaces. The logic for spin states will need to be reworked as well, not only to implement these new terms for coupling additional spin spaces, but most of the logic will need to be reworked to allow for an arbitrary number of coupled spin spaces.<br/><br/>While the change to get rid of what would be considered a coupled spin state (that is a state where the state has defined the coupled spaces) does simplify the current implementation, it does limit what can be done. For example, an uncoupled operator could not be applied to a coupled state, as the coupled states would need to be uncoupled, which is only possible if the j values of the coupled states is known. However it was suggested by Brian that a new class be created to deal with coupled states in this sense. Time permitting, I will begin to look at the possibility of implementing such a feature into the current spin framework.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8510171342300140296-8561852009544025205?l=seanvig.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-07-30T08:45:29Z</updated>
    <published>2011-07-30T08:45:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="GSoC"/>
    <author>
      <name>Sean Vig</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/18029750000026588134</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8510171342300140296</id>
      <category term="sympy"/>
      <category term="GSoC"/>
      <author>
        <name>Sean Vig</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/18029750000026588134</uri>
      </author>
      <link href="http://seanvig.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://seanvig.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Developing Wigner-3nj Symbols in SymPy</subtitle>
      <title>Sean Vig's 2011 GSoC Project</title>
      <updated>2011-11-28T05:58:52Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://gilbertgede.wordpress.com/?p=76</id>
    <link href="http://gilbertgede.wordpress.com/2011/07/30/gsoc-week-10/" rel="alternate" type="text/html"/>
    <title>GSoC, Week 10</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Week 10….? This week, there really isn’t that much to report. Week 10 was supposed to be finishing up the pretty and LaTeX printer, and I have done most of that. Tests and documentation need to be written for both though; I think I’ve learned that things haven’t really been coded successfully until you’ve done [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=76&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Week 10….?</p>
<p>This week, there really isn’t that much to report. Week 10 was supposed to be finishing up the pretty and LaTeX printer, and I have done most of that. Tests and documentation need to be written for both though; I think I’ve learned that things haven’t really been coded successfully until you’ve done those two steps.</p>
<p>I also got some more work done with the documentation. It’s a little further behind than I had hoped for, but it’s coming along. I definitely need to redo the images I have throughout it so far; they are just scans of sketches I have done, and are of low-quality. There also needs to be a lot more talk about linearization in the documentation. That in fact leads to the last two big coding things.</p>
<p>I think the last two major things are: more work in linearization and code output for numeric integration. The linearization routine still needs some work; mainly in dealing with situations where the qdot’s are defined with coefficients that depend on the q’s. The question of what to do with user defined dynamic symbols (such as forces or specified position) is also still up in the air. Forces will probably be easy to linearize (or really, take the partial with respect to), but with a specified position, it becomes more complicated; during the process of forming the equations of motion, most likely the derivative of that specified position will be brought into the expressions. I haven’t really decided what to do in this situation, as clearly some distance (say, l), and its derivative (say, l’) are not independent. I’m not sure if adding the position as a system state is the right thing to do here. I think I’ll play around with some simple examples to see what makes the most sense, and consult some other people. The part about code output also relates here, in that I need to decide how to deal with this situation (a value and its derivative). I can imagine just putting both as empty for the user to fill in, and telling them to do it the right way. Hopefully I’ll have this figured out more by next week. I also do need to write the code output stuff. I don’t think it will be that hard, I just have to make the decisions about the formats of of the output. The size of the expressions generated can be problematic though, taking tens of minutes to print out. I’m also not sure how to deal with this situation. Hopefully I can again find out more information on this issue by next weekend.</p>
<p> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/gilbertgede.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/gilbertgede.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/gilbertgede.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/gilbertgede.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/gilbertgede.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/gilbertgede.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/gilbertgede.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/gilbertgede.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/gilbertgede.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/gilbertgede.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/gilbertgede.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/gilbertgede.wordpress.com/76/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=76&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-07-30T06:00:01Z</updated>
    <category term="GSoC 2011"/>
    <category term="PyDy"/>
    <category term="SymPy"/>
    <author>
      <name>gilbertgede</name>
    </author>
    <source>
      <id>http://gilbertgede.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://gilbertgede.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://gilbertgede.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://gilbertgede.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://gilbertgede.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>gilbertgede</title>
      <updated>2011-12-04T20:40:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1016</id>
    <link href="http://asmeurersympy.wordpress.com/2011/07/30/sympy-0-7-1-released/" rel="alternate" type="text/html"/>
    <title>SymPy 0.7.1 Released</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Cross posted on the official SymPy Blog SymPy 0.7.1 has been released on July 29, 2011. It is available at http://sympy.org The source distribution can be downloaded from: http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz You can get the Windows installer here: http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe And the html documentation here: http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip About SymPy SymPy is a Python library for symbolic mathematics. It aims [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1016&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><em>Cross posted on the <a href="http://sympy.blogspot.com/2011/07/sympy-071-released.html">official SymPy Blog</a></em></p>
<p>SymPy 0.7.1 has been released on July 29, 2011. It is available at</p>
<p><a href="http://sympy.org">http://sympy.org<br/>
</a></p>
<p>The source distribution can be downloaded from:<br/>
<a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz">http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz<br/>
</a></p>
<p>You can get the Windows installer here:<br/>
<a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe">http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe<br/>
</a></p>
<p>And the html documentation here:<br/>
<a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip">http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip<br/>
</a></p>
<p><span style="font-weight: bold;">About SymPy<br/>
</span></p>
<p>SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python.</p>
<p><span style="font-weight: bold;">Release notes<br/>
</span></p>
<p><span style="font-weight: bold;">Major changes</span></p>
<p>- Python 2.4 is no longer supported.  SymPy will not work at all in<br/>
  Python 2.4.  If you still need to use SymPy under Python 2.4 for some<br/>
  reason, you will need to use SymPy 0.7.0 or earlier.</p>
<p>- The Pyglet plotting library is now an (optional) external dependency.<br/>
  Previously, we shipped a version of Pyglet with SymPy, but this was<br/>
  old and buggy.  The plan is to eventually make the plotting in SymPy<br/>
  much more modular, so that it supports many backends, but this has not<br/>
  been done yet.  For now, still only Pyglet is directly supported.<br/>
  Note that Pyglet is only an optional dependency and is only needed for<br/>
  plotting. The rest of SymPy can still be used without any dependencies<br/>
  (except for Python).</p>
<p>- isympy now works with the new IPython 0.11.</p>
<p>- mpmath has been updated to 0.17.  See the corresponding mpmath release<br/>
  notes at http://mpmath.googlecode.com/svn/trunk/CHANGES.</p>
<p>- Added a Subs object for representing unevaluated substitutions.  This<br/>
  finally lets us represent derivatives evaluated at a point, i.e.,<br/>
  `diff(f(x), x).subs(x, 0)` returns `Subs(Derivative(f(_x), _x), (_x,), (0,))`.<br/>
  This also means that SymPy can now correctly compute the chain rule<br/>
  when this functionality is required, such as with `f(g(x)).diff(x)`.</p>
<p><span style="font-weight: bold;">Hypergeometric functions/Meijer G-Functions</span></p>
<p>- Added classes hyper() and meijerg() to represent Hypergeometric and Meijer G-functions, respectively. They support numerical evaluation (using mpmath) and symbolic differentiation (not with respect to the parameters).</p>
<p>- Added an algorithm for rewriting hypergeometric and meijer g-functions in terms of more familiar, named special functions. It is accessible via the function hyperexpand(), or also via expand_func(). This algorithm recognises many elementary functions, and also complete and incomplete gamma functions, bessel functions, and error functions. It can easily be extended to handle more classes of special functions.</p>
<p><span style="font-weight: bold;">Sets</span></p>
<p>- Added FiniteSet class to mimic python set behavior while also interacting with existing Intervals and Unions</p>
<p>- FiniteSets and Intervals interact so that, for example `Interval(0, 10) – FiniteSet(0, 5)` produces `(0, 5) U (5, 10]`</p>
<p>- FiniteSets also handle non-numerical objects so the following is possible `{1, 2, ‘one’, ‘two’, {a, b}}`</p>
<p>- Added ProductSet to handle Cartesian products of sets</p>
<p>- Create using the `*` operator, i.e. `twodice = FiniteSet(1, 2, 3, 4, 5, 6) * FiniteSet(1, 2, 3, 4, 5, 6) or square = Interval(0, 1) * Interval(0, 1)`</p>
<p>- pow operator also works as expected: `R3 = Interval(-oo, oo)**3 ; (3, -5, 0) in R3 == True`</p>
<p>- Subtraction, union, measurement all work taking complex intersections into account. </p>
<p>- Added as_relational method to sets, producing boolean statements using And, Or, Eq, Lt, Gt, etc…</p>
<p>- Changed reduce_poly_inequalities to return unions of sets rather than lists of sets</p>
<p><span style="font-weight: bold;">Iterables</span></p>
<p>- Added generating routines for integer partitions and binary partitions. The routine for integer partitions takes 3 arguments, the number itself, the maximum possible element allowed in the partitions generated and the maximum possible number of elements that will be in the partition. Binary partitions are characterized by containing only powers of two.</p>
<p>- Added generating routine for multi-set partitions. Given a multiset, the algorithm implemented will generate all possible partitions of that multi-set.</p>
<p>- Added generating routines for bell permutations, derangements, and involutions. A bell permutation is one in which the cycles that compose it consist of integers in a decreasing order. A derangement is a permutation such that the ith element is not at the ith position. An involution is a permutation that when multiplied by itself gives the identity permutation.</p>
<p>- Added generating routine for unrestricted necklaces. An unrestricted necklace is an a-ary string of n characters, each of a possible types. These have been characterized by the parameters n and k in the routine.</p>
<p>- Added generating routine for oriented forests. This is an implementation of algorithm S in TAOCP Vol 4A.</p>
<p><span style="font-weight: bold;">xyz Spin bases</span></p>
<p>- The represent, rewrite and InnerProduct logic has been improved to work between any two spin bases. This was done by utilizing the Wigner-D matrix, implemented in the WignerD class, in defining the changes between the various bases. Representing a state, i.e. `represent(JzKet(1,0), basis=Jx)`, can be used to give the vector representation of any get in any of the x/y/z bases for numerical values of j and m in the spin eigenstate. Similarly, rewriting states into different bases, i.e. `JzKet(1,0).rewrite(‘Jx’)`, will write the states as a linear combination of elements of the given basis. Because this relies on the represent function, this only works for numerical j and m values. The inner product of two eigenstates in different bases can be evaluated, i.e. `InnerProduct(JzKet(1,0),JxKet(1,1))`. When two different bases are used, one state is rewritten into the other basis, so this requires numerical values of j and m, but innerproducts of states in the same basis can still be done symbolically.</p>
<p>- The `Rotation.D` and `Rotation.d` methods, representing the Wigner-D function and the Wigner small-d function, return an instance of the WignerD class, which can be evaluated with the `doit()` method to give the corresponding matrix element of the Wigner-D matrix.</p>
<p><span style="font-weight: bold;">Other changes</span></p>
<p>- We now use MathJax in our docs. MathJax renders LaTeX math entierly in<br/>
  the browser using Javascript.  This means that the math is much more<br/>
  readable than the previous png math, which uses images.  MathJax is<br/>
  only supported on modern browsers, so LaTeX math in the docs may not<br/>
  work on older browsers.</p>
<p>- nroots() now lets you set the precision of computations</p>
<p>- Added support for gmpy and mpmath’s types to sympify()</p>
<p>- Fix some bugs with lambdify()</p>
<p>- Fix a bug with as_independent and non-commutative symbols.</p>
<p>- Fix a bug with collect (issue 2516)</p>
<p>- Many fixes relating to porting SymPy to Python 3.  Thanks to our GSoC<br/>
  student Vladimir Perić, this task is almost completed.</p>
<p>- Some people were retroactively added to the AUTHORS file.</p>
<p>- Added a solver for a special case of the Riccati equation in the ODE<br/>
  module.</p>
<p>- Iterated derivatives are pretty printed in a concise way.</p>
<p>- Fix a bug with integrating functions with multiple DiracDeltas.</p>
<p>- Add support for Matrix.norm() that works for Matrices (not just vectors).</p>
<p>- Improvements to the Groebner bases algorithm.</p>
<p>- Plot.saveimage now supports a StringIO outfile</p>
<p>- Expr.as_ordered_terms now supports non lex orderings.</p>
<p>- diff now canonicalizes the order of differentiation symbols.  This is<br/>
  so it can simplify expressions like `f(x, y).diff(x, y) – f(x,<br/>
  y).diff(y, x)`.  If you want to create a Derivative object without<br/>
  sorting the args, you should create it explicitly with `Derivative`,<br/>
  so that you will get `Derivative(f(x, y), x, y) != Derivative(f(x, y), y, x)`.<br/>
  Note that internally, derivatives that can be computed are always<br/>
  computed in the order that they are given in.</p>
<p>- Added functions `is_sequence()` and `iterable()` for determining if<br/>
  something is an ordered iterable or normal iterable, respectively.</p>
<p>- Enabled an option in Sphinx that adds a `source` link next to each function, which links to a copy of the source code for that function.</p>
<p>In addition to the more noticeable changes listed above, there have been numerous other smaller additions, improvements and bug fixes in the ~300 commits in this release. See the git log for a full list of all changes.  The command `git log sympy-0.7.0..sympy-0.7.1` will show all commits made between this release and the last. You can also see the issues closed since the last release [here](http://code.google.com/p/sympy/issues/list?can=1&amp;q=closed-after%3A2010%2F6%2F13+closed-before%3A2011%2F7%2F30&amp;sort=-closed&amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary+Stars+Closed&amp;cells=tiles).</p>
<p><span style="font-weight: bold;">Authors</span></p>
<p>The following people contributed at least one patch to this release (names are given in alphabetical order by last name).  A total of 26 people contributed to this release.  People with a * by their names contributed a patch for the first time for this release.  Five people contributed for the first time for this release.  </p>
<p>Thanks to everyone who contributed to this release!</p>
<p>* Tom Bachmann<br/>
* Ondřej Čertík<br/>
* Renato Coutinho<br/>
* Bill Flynn<br/>
* Bradley Froehle*<br/>
* Gilbert Gede<br/>
* Brian Granger<br/>
* Emma Hogan*<br/>
* Yuri Karadzhov<br/>
* Stefan Krastanov*<br/>
* Ronan Lamy<br/>
* Tomo Lazovich<br/>
* Sam Magura*<br/>
* Saptarshi Mandal<br/>
* Aaron Meurer<br/>
* Sherjil Ozair<br/>
* Mateusz Paprocki<br/>
* Vladimir Perić<br/>
* Mario Pernici<br/>
* Nicolas Pourcelot<br/>
* Min Ragan-Kelley*<br/>
* Matthew Rocklin<br/>
* Chris Smith<br/>
* Vinzent Steinberg<br/>
* Sean Vig<br/>
* Thomas Wiecki</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1016/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1016/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1016/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1016/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1016/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1016/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1016/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1016/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1016/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1016/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1016/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1016/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1016/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1016/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1016&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-07-30T05:19:14Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-12-04T20:40:08Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-2520472460430880330.post-6591106898156468358</id>
    <link href="http://sympy.blogspot.com/feeds/6591106898156468358/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=2520472460430880330&amp;postID=6591106898156468358" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/6591106898156468358" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/6591106898156468358" rel="self" type="application/atom+xml"/>
    <link href="http://sympy.blogspot.com/2011/07/sympy-071-released.html" rel="alternate" type="text/html"/>
    <title>SymPy 0.7.1 Released</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">SymPy 0.7.1 has been released on July 29, 2011. It is available at<br/><br/><a href="http://sympy.org&lt;br /&gt;">http://sympy.org<br/></a><br/><br/>The source distribution can be downloaded from:<br/><a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz">http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz<br/></a><br/><br/>You can get the Windows installer here:<br/><a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe&lt;br /&gt;">http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe<br/></a><br/><br/>And the html documentation here:<br/><a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip&lt;br /&gt;">http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip<br/></a><br/><br/><span style="font-weight: bold;">About SymPy<br/></span><br/><br/>SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python.<br/><br/><span style="font-weight: bold;">Release notes<br/></span><br/><br/><span style="font-weight: bold;">Major changes</span><br/><br/>- Python 2.4 is no longer supported.  SymPy will not work at all in<br/>  Python 2.4.  If you still need to use SymPy under Python 2.4 for some<br/>  reason, you will need to use SymPy 0.7.0 or earlier.<br/><br/>- The Pyglet plotting library is now an (optional) external dependency. <br/>  Previously, we shipped a version of Pyglet with SymPy, but this was<br/>  old and buggy.  The plan is to eventually make the plotting in SymPy<br/>  much more modular, so that it supports many backends, but this has not<br/>  been done yet.  For now, still only Pyglet is directly supported. <br/>  Note that Pyglet is only an optional dependency and is only needed for<br/>  plotting. The rest of SymPy can still be used without any dependencies<br/>  (except for Python).<br/><br/>- isympy now works with the new IPython 0.11.<br/><br/>- mpmath has been updated to 0.17.  See the corresponding mpmath release<br/>  notes at http://mpmath.googlecode.com/svn/trunk/CHANGES.<br/><br/>- Added a Subs object for representing unevaluated substitutions.  This<br/>  finally lets us represent derivatives evaluated at a point, i.e.,<br/>  `diff(f(x), x).subs(x, 0)` returns `Subs(Derivative(f(_x), _x), (_x,), (0,))`.<br/>  This also means that SymPy can now correctly compute the chain rule<br/>  when this functionality is required, such as with `f(g(x)).diff(x)`.<br/><br/><span style="font-weight: bold;">Hypergeometric functions/Meijer G-Functions</span><br/><br/>- Added classes hyper() and meijerg() to represent Hypergeometric and Meijer G-functions, respectively. They support numerical evaluation (using mpmath) and symbolic differentiation (not with respect to the parameters).<br/><br/>- Added an algorithm for rewriting hypergeometric and meijer g-functions in terms of more familiar, named special functions. It is accessible via the function hyperexpand(), or also via expand_func(). This algorithm recognises many elementary functions, and also complete and incomplete gamma functions, bessel functions, and error functions. It can easily be extended to handle more classes of special functions.<br/><br/><span style="font-weight: bold;">Sets</span><br/><br/>- Added FiniteSet class to mimic python set behavior while also interacting with existing Intervals and Unions<br/><br/>- FiniteSets and Intervals interact so that, for example `Interval(0, 10) - FiniteSet(0, 5)` produces `(0, 5) U (5, 10]`<br/><br/>- FiniteSets also handle non-numerical objects so the following is possible `{1, 2, 'one', 'two', {a, b}}`<br/><br/>- Added ProductSet to handle Cartesian products of sets<br/><br/>- Create using the `*` operator, i.e. `twodice = FiniteSet(1, 2, 3, 4, 5, 6) * FiniteSet(1, 2, 3, 4, 5, 6) or square = Interval(0, 1) * Interval(0, 1)`<br/><br/>- pow operator also works as expected: `R3 = Interval(-oo, oo)**3 ; (3, -5, 0) in R3 == True`<br/><br/>- Subtraction, union, measurement all work taking complex intersections into account. <br/><br/>- Added as_relational method to sets, producing boolean statements using And, Or, Eq, Lt, Gt, etc...<br/><br/>- Changed reduce_poly_inequalities to return unions of sets rather than lists of sets<br/><br/><br/><span style="font-weight: bold;">Iterables</span><br/><br/>- Added generating routines for integer partitions and binary partitions. The routine for integer partitions takes 3 arguments, the number itself, the maximum possible element allowed in the partitions generated and the maximum possible number of elements that will be in the partition. Binary partitions are characterized by containing only powers of two.<br/><br/>- Added generating routine for multi-set partitions. Given a multiset, the algorithm implemented will generate all possible partitions of that multi-set.<br/><br/>- Added generating routines for bell permutations, derangements, and involutions. A bell permutation is one in which the cycles that compose it consist of integers in a decreasing order. A derangement is a permutation such that the ith element is not at the ith position. An involution is a permutation that when multiplied by itself gives the identity permutation.<br/><br/>- Added generating routine for unrestricted necklaces. An unrestricted necklace is an a-ary string of n characters, each of a possible types. These have been characterized by the parameters n and k in the routine.<br/><br/>- Added generating routine for oriented forests. This is an implementation of algorithm S in TAOCP Vol 4A.<br/><br/><span style="font-weight: bold;">xyz Spin bases</span><br/><br/>- The represent, rewrite and InnerProduct logic has been improved to work between any two spin bases. This was done by utilizing the Wigner-D matrix, implemented in the WignerD class, in defining the changes between the various bases. Representing a state, i.e. `represent(JzKet(1,0), basis=Jx)`, can be used to give the vector representation of any get in any of the x/y/z bases for numerical values of j and m in the spin eigenstate. Similarly, rewriting states into different bases, i.e. `JzKet(1,0).rewrite('Jx')`, will write the states as a linear combination of elements of the given basis. Because this relies on the represent function, this only works for numerical j and m values. The inner product of two eigenstates in different bases can be evaluated, i.e. `InnerProduct(JzKet(1,0),JxKet(1,1))`. When two different bases are used, one state is rewritten into the other basis, so this requires numerical values of j and m, but innerproducts of states in the same basis can still be done symbolically.<br/><br/>- The `Rotation.D` and `Rotation.d` methods, representing the Wigner-D function and the Wigner small-d function, return an instance of the WignerD class, which can be evaluated with the `doit()` method to give the corresponding matrix element of the Wigner-D matrix.<br/><br/><span style="font-weight: bold;">Other changes</span><br/><br/>- We now use MathJax in our docs. MathJax renders LaTeX math entierly in<br/>  the browser using Javascript.  This means that the math is much more<br/>  readable than the previous png math, which uses images.  MathJax is<br/>  only supported on modern browsers, so LaTeX math in the docs may not<br/>  work on older browsers.<br/><br/>- nroots() now lets you set the precision of computations<br/><br/>- Added support for gmpy and mpmath's types to sympify()<br/><br/>- Fix some bugs with lambdify()<br/><br/>- Fix a bug with as_independent and non-commutative symbols.<br/><br/>- Fix a bug with collect (issue 2516)<br/><br/>- Many fixes relating to porting SymPy to Python 3.  Thanks to our GSoC<br/>  student Vladimir Perić, this task is almost completed.<br/><br/>- Some people were retroactively added to the AUTHORS file.<br/><br/>- Added a solver for a special case of the Riccati equation in the ODE<br/>  module.<br/><br/>- Iterated derivatives are pretty printed in a concise way.<br/><br/>- Fix a bug with integrating functions with multiple DiracDeltas.<br/><br/>- Add support for Matrix.norm() that works for Matrices (not just vectors).<br/><br/>- Improvements to the Groebner bases algorithm.<br/><br/>- Plot.saveimage now supports a StringIO outfile<br/><br/>- Expr.as_ordered_terms now supports non lex orderings.<br/><br/>- diff now canonicalizes the order of differentiation symbols.  This is<br/>  so it can simplify expressions like `f(x, y).diff(x, y) - f(x,<br/>  y).diff(y, x)`.  If you want to create a Derivative object without<br/>  sorting the args, you should create it explicitly with `Derivative`,<br/>  so that you will get `Derivative(f(x, y), x, y) != Derivative(f(x, y), y, x)`.<br/>  Note that internally, derivatives that can be computed are always<br/>  computed in the order that they are given in.<br/><br/>- Added functions `is_sequence()` and `iterable()` for determining if<br/>  something is an ordered iterable or normal iterable, respectively.<br/><br/>- Enabled an option in Sphinx that adds a `source` link next to each function, which links to a copy of the source code for that function.<br/><br/>In addition to the more noticeable changes listed above, there have been numerous other smaller additions, improvements and bug fixes in the ~300 commits in this release. See the git log for a full list of all changes.  The command `git log sympy-0.7.0..sympy-0.7.1` will show all commits made between this release and the last. You can also see the issues closed since the last release [here](http://code.google.com/p/sympy/issues/list?can=1&amp;q=closed-after%3A2010%2F6%2F13+closed-before%3A2011%2F7%2F30&amp;sort=-closed&amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary+Stars+Closed&amp;cells=tiles).<br/><br/><span style="font-weight: bold;">Authors</span><br/><br/>The following people contributed at least one patch to this release (names are given in alphabetical order by last name).  A total of 26 people contributed to this release.  People with a * by their names contributed a patch for the first time for this release.  Five people contributed for the first time for this release.  <br/><br/>Thanks to everyone who contributed to this release!<br/><br/>* Tom Bachmann<br/>* Ondřej Čertík<br/>* Renato Coutinho<br/>* Bill Flynn<br/>* Bradley Froehle*<br/>* Gilbert Gede<br/>* Brian Granger<br/>* Emma Hogan*<br/>* Yuri Karadzhov<br/>* Stefan Krastanov*<br/>* Ronan Lamy<br/>* Tomo Lazovich<br/>* Sam Magura*<br/>* Saptarshi Mandal<br/>* Aaron Meurer<br/>* Sherjil Ozair<br/>* Mateusz Paprocki<br/>* Vladimir Perić<br/>* Mario Pernici<br/>* Nicolas Pourcelot<br/>* Min Ragan-Kelley*<br/>* Matthew Rocklin<br/>* Chris Smith<br/>* Vinzent Steinberg<br/>* Sean Vig<br/>* Thomas Wiecki<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/2520472460430880330-6591106898156468358?l=sympy.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-07-30T05:16:27Z</updated>
    <published>2011-07-30T05:11:00Z</published>
    <author>
      <name>Aaron Meurer</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/07681610358074038422</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-2520472460430880330</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02845032202161204018</uri>
      </author>
      <link href="http://sympy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://sympy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>Official SymPy blog</subtitle>
      <title>Official SymPy blog</title>
      <updated>2011-11-23T03:11:04Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sympystats.wordpress.com/?p=235</id>
    <link href="http://sympystats.wordpress.com/2011/07/29/week-10-for-random-variables/" rel="alternate" type="text/html"/>
    <title>Week 10 for Random Variables</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I’ve been neglecting my GSoC project this week. This is what’s on the burner though: Write up a blogpost on my implementation of Matrix Expressions. What they can and can’t do. I’d like to generate discussion on this topic. Test … <a href="http://sympystats.wordpress.com/2011/07/29/week-10-for-random-variables/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=235&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been neglecting my GSoC project this week. This is what’s on the burner though:</p>
<ol>
<li>Write up a blogpost on my implementation of Matrix Expressions. What they can and can’t do. I’d like to generate discussion on this topic.</li>
<li>Test my code against Tom’s integration code. This has been happening over the last 24 hours actually. It’s cool to see lots of new things work and work well – I feel like I’m driving a sports car. I think that this cross-branch testing has been helpful to locate bugs in both of our codebases.</li>
<li>After I check what will and won’t work with Tom’s code I need to fill out tests and polish documentation for my main Discrete and Continuous RV branch. It’d be nice to have it presentable to the community for review.</li>
</ol>
<div><span style="font-size: small;"><span class="Apple-style-span" style="line-height: 24px;"><br/>
</span></span></div>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/235/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/235/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/235/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/235/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/235/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/235/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/235/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/235/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/235/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/235/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/235/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/235/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/235/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/235/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=235&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-07-30T02:03:33Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>mrocklin</name>
    </author>
    <source>
      <id>http://sympystats.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sympystats.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sympystats.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sympystats.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sympystats.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>sympy-stats</title>
      <updated>2011-12-04T20:40:15Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://f1728.wordpress.com/?p=200</id>
    <link href="http://f1728.wordpress.com/2011/07/29/week-10/" rel="alternate" type="text/html"/>
    <title>Week 10</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">FGLM and rational simplification modulo a prime ideal work now, finally. The rational simplification modulo prime ideal algorithm, given a prime ideal , where is a Gröbner basis of , and finds , such that is minimal and . To find such , the algorithm looks takes polynomials and , where are the monomials with [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;blog=22515617&amp;post=200&amp;subd=f1728&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>FGLM and rational simplification modulo a prime ideal work now, finally.</p>
<p>The rational simplification modulo prime ideal algorithm, given a prime ideal <img alt="(G) = P \triangleleft K[X_1, \ldots, X_n]" class="latex" src="http://s0.wp.com/latex.php?latex=%28G%29+%3D+P+%5Ctriangleleft+K%5BX_1%2C+%5Cldots%2C+X_n%5D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="(G) = P \triangleleft K[X_1, \ldots, X_n]"/>, where <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="G"/> is a Gröbner basis of <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="P"/>, and <img alt="\frac{a}{b} \in K[X_1, \ldots, X_n]_P" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba%7D%7Bb%7D+%5Cin+K%5BX_1%2C+%5Cldots%2C+X_n%5D_P&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\frac{a}{b} \in K[X_1, \ldots, X_n]_P"/> finds <img alt="\frac{c}{d} \in K[X_1, \ldots, X_n]_P" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bc%7D%7Bd%7D+%5Cin+K%5BX_1%2C+%5Cldots%2C+X_n%5D_P&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\frac{c}{d} \in K[X_1, \ldots, X_n]_P"/>, such that <img alt="\deg(c) + \deg(d)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdeg%28c%29+%2B+%5Cdeg%28d%29&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\deg(c) + \deg(d)"/> is minimal and <img alt="\frac{a}{b} \equiv \frac{c}{d} \bmod{P_P}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba%7D%7Bb%7D+%5Cequiv+%5Cfrac%7Bc%7D%7Bd%7D+%5Cbmod%7BP_P%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\frac{a}{b} \equiv \frac{c}{d} \bmod{P_P}"/>. To find such <img alt="c, d" class="latex" src="http://s0.wp.com/latex.php?latex=c%2C+d&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="c, d"/>, the algorithm looks takes polynomials <img alt="c = \sum_i c_i m_i" class="latex" src="http://s0.wp.com/latex.php?latex=c+%3D+%5Csum_i+c_i+m_i&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="c = \sum_i c_i m_i"/> and <img alt="d = \sum_j d_j m_j" class="latex" src="http://s0.wp.com/latex.php?latex=d+%3D+%5Csum_j+d_j+m_j&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="d = \sum_j d_j m_j"/>, where <img alt="m_i, m_j" class="latex" src="http://s0.wp.com/latex.php?latex=m_i%2C+m_j&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="m_i, m_j"/> are the monomials with degree less than the degrees of <img alt="a" class="latex" src="http://s0.wp.com/latex.php?latex=a&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="a"/> and <img alt="b" class="latex" src="http://s0.wp.com/latex.php?latex=b&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="b"/> and <img alt="c_i, d_j" class="latex" src="http://s0.wp.com/latex.php?latex=c_i%2C+d_j&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="c_i, d_j"/> are indeterminates. Looking at the coefficients of the reduction of <img alt="a d - b c" class="latex" src="http://s0.wp.com/latex.php?latex=a+d+-+b+c&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="a d - b c"/> modulo <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="G"/> gives a linear system of equations in <img alt="c_i, d_j" class="latex" src="http://s0.wp.com/latex.php?latex=c_i%2C+d_j&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="c_i, d_j"/>. If a non-trivial solution exists, then a simpler representation (that is, a representation with smaller sum of total degrees) has been found.</p>
<p>Unfortunately, both rational simplification and FGLM are quite slow. With rational simplification a lot of time is lost converting between the several representations of polynomials. For example the following:</p>
<pre class="brush: python;">&gt;&gt;&gt; a = y**5 + x + y
&gt;&gt;&gt; b = x - y
&gt;&gt;&gt; ratsimpmodprime(a**2/b**2, [x*y**5 - x - y, x, y, order="lex")
x**4 + 2*x**3*y + 2*x**3 + x**2*y**2 + 4*x**2*y + x**2 + 2*x*y**2 + 2*x*y + y**2)/(x**4 - 2*x**3*y + x**2*y**2
</pre>
<p>takes 39.624 seconds with cProfile of which 25.218 are spent on reduced, which calls sdp_div, taking 14.535 seconds. The main work is done in reduced/sdp_div and solve (which takes 6.096 seconds). </p>
<p>FGLM can be done faster as explained at the end of the lecture notes by Jean-Charles Faugère <a href="http://www-salsa.lip6.fr/~jcf/Teaching/index.html">here</a>. I haven’t done the construction of the matrices corresponding to the maps <img alt="m \mapsto x_i m" class="latex" src="http://s0.wp.com/latex.php?latex=m+%5Cmapsto+x_i+m&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="m \mapsto x_i m"/> properly (because it’s the same, but more efficient, as constructing the matrices of the solver from last week). For some reason (presumably in connection with the update procedure) the resulting bases have weird coefficients, so this has still to be fixed. </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/f1728.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/f1728.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/f1728.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/f1728.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/f1728.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/f1728.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/f1728.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/f1728.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/f1728.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/f1728.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/f1728.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/f1728.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/f1728.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/f1728.wordpress.com/200/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;blog=22515617&amp;post=200&amp;subd=f1728&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy"/></div>
    </content>
    <updated>2011-07-29T15:37:48Z</updated>
    <category term="SymPy"/>
    <author>
      <name>f1728</name>
    </author>
    <source>
      <id>http://f1728.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://f1728.wordpress.com/category/SymPy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://f1728.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://f1728.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://f1728.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>f1728 » SymPy</title>
      <updated>2011-08-12T15:40:14Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://nessgrh.wordpress.com/?p=347</id>
    <link href="http://nessgrh.wordpress.com/2011/07/28/status-update%e2%80%94week-10/" rel="alternate" type="text/html"/>
    <title>Status Update—Week 10</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This is a little earlier than my usual status update, but I think now is a good time. I just commited some new code, and many new interesting things work now, hence it is a good time to show off . On the other hand there a quite a number of bugs in my code, [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=347&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This is a little earlier than my usual status update, but I think now is a good time. I just commited some new code, and many new interesting things work now, hence it is a good time to show off <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> . On the other hand there a quite a number of bugs in my code, so that’s probably what I will be spending next week on…</p>
<p>Anyway. First I added lerch phi to hyperexpand. Here are a few <a href="http://pastebin.com/raw.php?i=FkYNdpTN">examples</a>. There is not a lot to be said here, but it is good to see many common sums to work now.</p>
<p>Next I improved hyperexpand() to handle some expansions at “special points”. This means evaluating hypergeometric (or meijer g) functions at say <img alt="z=1" class="latex" src="http://s0.wp.com/latex.php?latex=z%3D1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="z=1"/>, even if we don’t know any closed-form expressions for general <img alt="z" class="latex" src="http://s0.wp.com/latex.php?latex=z&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="z"/>. There is  a vast literature on such “hypergeometric identities”, and my code is a very humble start at best. It basically just implements Gauss’ and Kummer’s summation theorems for 2F1 and nothing else, but this is fairly effective. Then I improved one of the convergence conditions—it turns out that in addition to what is listed on the wolfram functions site, in the russian book from which they took the conditions there is a crucial extra part. After finding someone to translate it to me I could implement this; now we can do some more integrals. The upshot of this is that the mellin transform of a product of bessel functions can now be <em>derived</em> by the code, instead of having to put it into the table.</p>
<p>Let me put this into perspective. There are (at least) the functions <img alt="J, Y, I, K" class="latex" src="http://s0.wp.com/latex.php?latex=J%2C+Y%2C+I%2C+K&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="J, Y, I, K"/>. The general products <img alt="J_a J_b, Y_a Y_b, J_a Y_b" class="latex" src="http://s0.wp.com/latex.php?latex=J_a+J_b%2C+Y_a+Y_b%2C+J_a+Y_b&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="J_a J_b, Y_a Y_b, J_a Y_b"/> can be exrpessed as g-functions, and similarly for <img alt="I, K" class="latex" src="http://s0.wp.com/latex.php?latex=I%2C+K&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="I, K"/>. Also many special products can be expressed. I had previously put in a few of the identities of the first kind. Now almost all of them can be derived from just the entries for single functions. (There are some problems with functions of the second kind, which tend to be singular and/or rapidly growing, so that they don’t really have mellin transforms; deriving formulae for these is difficult in the current setup). On the other hand, this can be somewhat slow; for this reason I only commented out the formulae instead of removing them. Here are a few <a href="http://pastebin.com/raw.php?i=f65MmSTU">timings</a>. These are evidently not great, I’ll have to see what can be done. My guess is that hyperexpand() is relatively slow, but I haven’t looked into this further. [Note also that running this with cache off is much slower, since the algorithm internally uses caching.]</p>
<p>Finally, I improved the integration heuristics so as to be able to do some more <a href="http://pastebin.com/raw.php?i=sbN8dQYA">integrals</a> [with a few additional factors the last integral is a representation of besselj]. Again I don’t know what makes this so slow.</p>
<p>In closing, let’s look at some more fun definite <a href="http://pastebin.com/raw.php?i=UVYgPFpB">integrals</a> (all played around with long enough until I found a variation that can be done in closed form <img alt=";)" class="wp-smiley" src="http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif"/>  ). Again not much to say here (except that (9) shows a bug in the hyperepand table, the minus sign must be <img alt="e^{-i\pi}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B-i%5Cpi%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{-i\pi}"/>); the numerical computations are for comparison with wolfram alpha.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/347/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/347/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/347/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/347/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/347/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/347/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/347/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/347/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/347/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/347/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/347/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/347/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/347/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/347/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=347&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-07-28T21:38:29Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>nessgrh</name>
    </author>
    <source>
      <id>http://nessgrh.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://nessgrh.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://nessgrh.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://nessgrh.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://nessgrh.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My GSoC Project</subtitle>
      <title>nessgrh</title>
      <updated>2011-12-04T20:40:11Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8814696591561172392.post-3132546778974806304</id>
    <link href="http://vperic.blogspot.com/feeds/3132546778974806304/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://vperic.blogspot.com/2011/07/gsoc-week-9-almost-there.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/3132546778974806304" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/3132546778974806304" rel="self" type="application/atom+xml"/>
    <link href="http://vperic.blogspot.com/2011/07/gsoc-week-9-almost-there.html" rel="alternate" type="text/html"/>
    <title>GSoC: week 9: Almost there</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I've just now seen I managed to completely miss my blog post last week. Bah! So, for the past two weeks, I've worked on two things in parallel. Lets take it from the top:<br/><br/><span style="font-size: large;">Python 3 support</span><br/><br/>This is going as well as could be hoped. <a href="https://github.com/vperic/sympy/tree/porting">The latest pull request</a> is awaiting merging. With it, there are three exceptions and one failure in the main test suite remaining and this hasn't changed in about a week. I've asked Ronan for help on these, and he's opened <a href="http://code.google.com/p/sympy/issues/detail?id=2574">an issue</a> for one of the exceptions. It's something deep in the assumptions code; as Ronan knows his way best around this code, I hope he'll be able to solve it. I haven't looked in detail at the other problems, but hopefully they won't be too hard.<br/><br/>What I have been doing is working on the doctests and the failures they show - at least three real issues that aren't covered in normal tests have beeen uncovered. The others have been mostly problems with the doctests themselves - doctests rely on comparing the exact output and some minor things have changed in Python 3 (eg. &lt;type&gt; is now &lt;class&gt;). Most of these fixes are in the pull request referenced above. There are 2 exceptions and 2 failures remaining to fix. One of the failures (while trivial to hack-fix) actually exposed <a href="http://code.google.com/p/sympy/issues/detail?id=2590">issue 2590</a>: "jn_zeros in functions/special/bessel.py should return SymPy Floats, not Python floats". The rest shouldn't be too bad (though I wish there was someone around to help me with tensor/index_methods.py). <br/><br/>The real problem was getting the doctests to actually run. Now, to start with, doctests also need to be converted by 2to3. This isn't done automatically but by passing a "-d" flag to 2to3 (which converts only doctests). Unfortunately, this crashed in ntheory/factor_.py because of the use of reduce(). I couldn't work around this so I've opened <a href="http://bugs.python.org/issue12611">an issue</a> upstream (I've also opened <a href="http://bugs.python.org/issue12616">two</a> <a href="http://bugs.python.org/issue12613">more</a> issues for other 2to3 deficiencies that I've managed to work around). This is a problem because even if there's a fix upstream it will only apply to new Pythons. For the moment I've just deleted the relevant bit of doctest, but this warrants further discussion. [EDIT: In fact, I've just opened <a href="http://code.google.com/p/sympy/issues/detail?id=2605">issue 2605</a> for this] There's one more fix required (unicode-related) but that can just be wrapped with a version check.<br/><br/>The second problem was running the .txt doctests. First I learned that I need to pass the .txt files to 2to3 explicitly, they aren't caught otherwise (this from Lennart Regebro's <i>excellent</i> <a href="http://python3porting.com/index.html">Porting to Python 3</a> book, which is now available for free; thanks Lennart!). Then it turned out our doctest runner depends on an internal procedure (_load_testfile) which changed from Python 2 to Python 3 to have an extra argument for an encoding. Finally, the doctests had a few errors in them but nothing major (one polys issue, though). The real peculiar thing is that some lines seem to print an extra "None" after what they're supposed to print; this happens in tutorial.txt and matrices.txt but nowhere else. As I haven't been able to reproduce this, I must conclude it's related to our testrunner somehow. Furthermore, this only happens with .txt doctests which further narrows it down. It's not clear to me how to solve this yet. Our doctest runner is a bit of a mess, using slightly different methods for .py and .txt doctests and copy-pasting some upstream methods but not all. One solution might be copying the rest of the code over, another could be porting us to py.test. This is something to raise at the next (IRC) meeting with my mentor. It's a minor issue, not impacting any real functionality, but as it could hide other issues it should be fixed.<br/><br/>We've also reached a solution - of sorts - on the unbundling of mpmath. As Aaron and Ondřej were adamantly against unbundling it, and as no clear benefit was then seen to porting to Distribute (not that it'd be easy without unbundling), I've decided to "concede" that argument. At the moment, the plan is to write a script which would copy the code to a sympy-py3k directory and run 2to3 as appropriate on it. This will probably require changes to various files (setup.py at least should then be compatible with both Python versions without the need for 2to3) and it's not yet clear how all details will be handled but it's definitely possible. I feel such a solution is going to be fragile by definition and could lead to problems down the line, but it's also basically the only way to have my work visible to users in the short run so I will go along it.<br/><br/>Nevertheless, I feel I'm very close to completing my goal (and the Python 3 part of my project) of porting SymPy to Python 3. Once the above script is decided upon and implemented, I hope to get wider testing from other developers and users. It is almost certain that there will be issues not caught by the tests and as I don't use SymPy myself having others test them is the only way for me to see them. There's an imminent minor release of SymPy, 0.7.1., which unfortunately doesn't include much of my work. I hope, however, that once it's fully complete and merged it will quickly be followed by a 0.7.2-alpha release to allow testing beyond the developer community.<br/><br/><span style="font-size: large;">Jenkins for SymPy</span><br/><br/>Last week Ondřej was free to work on reinstalling the current server we use and I've since setup a Jenkins CI server there; you can find it at the <a href="http://72.14.182.119:8080/">old address</a>. As before, anonymous users can see the build history while developers should drop me a note if they'd like an account. Currently the builds still have to be triggered manually, but I hope to get the Github-integration complete and have tests run on every change pushed. The <a href="http://code.google.com/p/sympy/issues/detail?id=2585">crucial issue</a> here was that the tests were taking up too much memory, causing Jenkins to swap and take hours to run the test suite. This was fixed with <a href="https://github.com/sympy/sympy/pull/507">pull 507</a>, which clears the cache after running each file. This more than halved the memory usage (from ~450 MB to less than 200) which allows Jenkins to complete the 6 test runs (py25-27 x {python, gmpy} ground types) in just under an hour. The change should otherwise be harmless enough, but issues could arise (which is why it isn't included in the upcoming release).<br/><br/>Increasing the number of tests ran (scipy and numpy integration should also be tested, but in separate jobs probably) and having a working framework for automatically testing pull requests are the remaining tasks, but I consider the Jenkins server running and this part of my project a success. It will also be invaluable when Python 3 support is finally in (as it's unlikely many, if any, developers will test on Python 3 when developing). I've also added another project to continually test a single file to help another GSoC student, <a href="http://nessgrh.wordpress.com/">Tom Bachmann</a> (ness), iron out some issues with random numbers in tests. It tests his branch every 5 minutes, which is many hundreads of runs daily and a lot more coverage than a single developer could reasonably provide. I consider it an experiment, to see how feasible it is to offer a level of extra support for critical changes. So far seems to be working fine. There's also a Jenkins plugin worth investigating, which implements priority for projects, which could allow us to have many such "side" experiments without impacting the main testing process whatsoever. The plugin is currently under development, but it is something to look into.<br/><br/><br/>Phew! That was one long post! Hopefully, it makes up for the missing last week post at least a bit.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8814696591561172392-3132546778974806304?l=vperic.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-07-25T13:47:56Z</updated>
    <published>2011-07-25T13:47:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="SymPy"/>
    <author>
      <name>Vladimir Perić</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8814696591561172392</id>
      <category term="SymPy"/>
      <category term="Tox"/>
      <author>
        <name>Vladimir Perić</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://vperic.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/-/SymPy" rel="self" type="application/atom+xml"/>
      <link href="http://vperic.blogspot.com/search/label/SymPy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Vlada's SymPy Blog</title>
      <updated>2011-10-31T23:39:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=981</id>
    <link href="http://asmeurersympy.wordpress.com/2011/07/25/merging-integration3-with-sympy-0-7-0-nightmare/" rel="alternate" type="text/html"/>
    <title>Merging integration3 with sympy-0.7.0 nightmare</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">For a long time, there have been several problems in my integration3 branch that were fixed in master. I decided that as an incentive to finish the release, I would hold off on merging master into my branch until the 0.7.0 release was finished. Well, here’s a little timeline: June 28, 2011: SymPy 0.7.0 final [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=981&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>For a long time, there have been several problems in my <code>integration3</code> branch that were fixed in <code>master</code>.  I decided that as an incentive to finish the release, I would hold off on merging <code>master</code> into my branch until the 0.7.0 release was finished.  Well, here’s a little timeline:</p>
<ul>
<li><strong>June 28, 2011:</strong> SymPy 0.7.0 final is released.</li>
<li><strong>June 29, 2011:</strong> I type <code>git merge sympy-0.7.0</code> in my <code>integration3</code> branch.</li>
<li><strong>July 24, 2011 (today; technically July 25 because it’s 2 AM):</strong> I finish merging <code>sympy-0.7.0</code> into <code>integration3</code>.</li>
</ul>
<p>That’s right, it took me over three weeks—almost a month—to merge <code>sympy-0.7.0</code> into <code>integration3</code> (granted, I worked on other things at the same time, such as the <a href="https://github.com/asmeurer/sympy/commit/52657848516ce7f4f7119b921d6b8d64131b58d3" target="_blank">SciPy 2011 conference</a>, but to me, any merge that takes longer than a day to complete is a problem).  This is because git decided that I needed to fix as a merge conflict just about every single change in the release branch since the base of <code>integration3</code>.  The total was over 100 files.  You can see the final merge commit <a href="https://github.com/asmeurer/sympy/commit/52657848516ce7f4f7119b921d6b8d64131b58d3" target="_blank">here</a>.</p>
<p>So I started <code>git mergetool</code>, without which this whole ordeal would have been 10 times worse.  The mergetool, which on my computer is opendiff, i.e., File Merge, gave the correct change by default in most cases, so I actually did not have to manually fix the majority of the conflicts.  But I did have to go through and do a lot of them.  I had to manually check each difference in the polys, as I had made several changes there in the course of working on <code>integration3</code>.  In several occisaions, I had to research a change using <code>git log -S</code> and fancy methods.  And I noticed at least two regressions in the polys, which I fixed.</p>
<p>mergetool was useless against <code>risch.py</code> and <code>test_risch.py</code>, because in my branch I had renamed these to <code>heurisch.py</code> and <code>test_heurisch.py</code>.  Fortunately, these were not really modified much by me, so I could basically just replace them with the <code>sympy-0.7.0</code> versions.</p>
<p>Once I finished merging I had to deal with test failures.  This was partly expected, as my branch has always had test failures due to my hack disabling algebraic substitution in <code>exp</code>, which is required for <code>risch_integrate()</code> to work, but there were also several unrelated ones.  </p>
<p>Some of these were caused by wrong merge conflict resolutions by me.  So I went through <code>git diff sympy-0.7.0</code> change by change and made sure that nothing was different that I didn’t want to be.  I would recommend doing this for any big merge.</p>
<p>Then, I had to fix a few bugs that caused test failures.  Several semantics were changed in the release.  I think the ones that I had to change were the renaming of <code>has_any_symbols</code> to just <code>has</code>, the renaming of <code>Poly.as_basic()</code> to <code>Poly.as_expr()</code>, and the swapping of the meanings of <code>quo</code> and <code>exquo</code> in the polys.  There were also some doctest failures due to the change to lexicographic ordering in the printer.</p>
<p>After all that, there were two regressions that caused test failures.  The first was the following:</p>
<p>Before:<br/>
</p><pre class="brush: python;">In [1]: Integral((exp(x*log(x))*log(x)), x).subs(exp(x*log(x)), x**x)
Out[1]: 
⌠             
⎮  x          
⎮ x ⋅log(x) dx
⌡             
</pre><p/>
<p>After:<br/>
</p><pre class="brush: python;">In [1]: Integral((exp(x*log(x))*log(x)), x).subs(exp(x*log(x)), x**x)
Out[1]: 
⌠                    
⎮  x⋅log(x)          
⎮ ℯ        ⋅log(x) dx
⌡                    
</pre><p/>
<p>This substitution is necessary because the Risch algorithm requires expressions like <img alt="x^x" class="latex" src="http://s0.wp.com/latex.php?latex=x%5Ex&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x^x"/> to be rewritten as <img alt="e^{x\log(x)}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7Bx%5Clog%28x%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^{x\log(x)}"/> before it can integrate them, but I try to convert them back after integrating so that the user gets the same thing in the result that he entered.  I created <a href="http://code.google.com/p/sympy/issues/detail?id=2571" target="_blank">issue 2571</a> for this.</p>
<p>The second was that I had several places in my docstrings with things like</p>
<blockquote><p>
Given a derivation D on k[t] and f, g in k(t) with f weakly normalized with respect to t, either raise NonElementaryIntegralException, in which case the equation Dy + f*y == g has no solution in k(t), or the quadruplet (a, b, c, h) such that a, h in k[t], b, c in k, and for any solution y in k(t) of Dy + f*y == g, q = y*h in k satisfies a*Dq + b*q == c.
</p></blockquote>
<p>The problem here is the “raise NonElementaryIntegralException,” part.  The code quality checker things that this is an old style exception (like <code>raise Exception, message</code>), due to a poorly formed regular expression.  I fixed this in a <a href="https://github.com/sympy/sympy/pull/511" target="_blank">pull request</a>.</p>
<p>The good news is that now a lot of stuff works that didn’t before because of fixes that were required that only existed in <code>master</code>.  For example, the following did not work before, but now does due to improvements to <code>RootSum</code>:</p>
<p/><pre class="brush: python;">In [1]: risch_integrate(1/(exp(5*x) + exp(x) + 1), x)
Out[1]: 
           ⎛    2                                                           
x + RootSum⎝21⋅z  + 6⋅z + 1, Lambda(_i, _i*log(-3381*_i**4/4 - 3381*_i**3/4 

                                       ⎞          ⎛     3        2          
- 625*_i**2/2 - 125*_i/2 + exp(x) - 5))⎠ + RootSum⎝161⋅z  + 115⋅z  + 19⋅z + 

                                                                            
1, Lambda(_i, _i*log(-3381*_i**4/4 - 3381*_i**3/4 - 625*_i**2/2 - 125*_i/2 +

             ⎞
 exp(x) - 5))⎠

In [2]: cancel(risch_integrate(1/(exp(5*x) + exp(x) + 1), x).diff(x))
Out[2]: 
      1      
─────────────
 5⋅x    x    
ℯ    + ℯ  + 1
</pre><p/>
<p>The general definition of the logarithmic part of an integral is a sum over the roots of a polynomial, which must be expressed as a <code>RootSum</code> in the general case.  Previously, <code>RootSum.diff</code> did not work, but thanks to Mateusz, an algorithm for computing exactly the RootSum where the Lambda expression is a rational function was implemented (see <a href="http://mattpap.github.com/scipy-2011-tutorial/html/mathematics.html#summing-roots-of-polynomials" target="_blank">this bit</a> from our SciPy tutorial for an idea on how this works), so now the Risch Algorithm can work with RootSum objects just as well with as an ordinary sum of logarithms.</p>
<p>Also, there was a bug in the square free algorithm in my branch that was fixed in <code>master</code> that was causing wrong results (I don’t remember the expression that produced them right now), and also there was a fix by me in <code>master</code> to make <code>is_rational_function()</code> faster, as it was significantly slowing down the calculation of some integrals (for example, <code>risch_integrate(Add(*(exp(i*x) for i in range(1000))))</code>, which is still slow to calculate, but now it’s because of other things).</p>
<p><strong>About big branches</strong></p>
<p>So this merge, along with the poly12 fiasco (which by the way, I think part of the reason git made me do all these merge conflict resolutions was because <code>polys12</code> was rebased from the <code>polys11</code> I had merged into integration3), has shown me very clearly that it is very bad to go off with your own branch and do a lot of work and wait a long time before merging it back into the main repo.</p>
<p>This is what was done with <code>polys12</code>.  Mateusz had a lot of new polynomials code that he developed in one big branch, and when it finally came to merging it back in, it was a mess.  This was for several reasons, which I do not want to discuss too much here, but it became clear to everyone I think that doing this was bad, and that it would have been better to have submitted many changes as pull requests as they were made than keeping them all together in one big branch for a long time.</p>
<p>This model also affected my work, as I had to work off of latest the polys branch, not <code>master</code>, as my work relied heavily on the latest and greatest in the polys.  </p>
<p>Well, with this merge of the main repo into my branch, I see that my branch is starting to become the same way.  I originally thought that I should finish the Risch algorithm before submitting it to be merged into <code>master</code>.  I know know that this is the wrong approach.  Development in <code>master</code> is too fast to keep code away from it for too long.  The divergence makes it more and more difficult to merge back with every time.  Furthermore, there are regressions that were never noticed to be regressions because the code that would have shown them existed only in my branch.  Now I have to fix these, whereas if the code were in <code>master</code>, the regression would have never happened in the first place, because the author would have seen it immediately from the test failures.</p>
<p>I also thought that I should wait to merge because there were so many bugs in my code.  But I see now that this is also wrong.  Merging with <code>master</code> will help me find these bugs, as people will actually use my code.  Sure, I’ve asked people to try out <code>risch_integrate()</code>, and some people have (and I thank you), but having it in the default <code>integrate()</code> in <code>master</code> will result in finding more bugs in the code than I ever would alone, which is basically the way it is right now with the code living only in my own branch.</p>
<p>I would prepare my code for merging with <code>master</code> today, if it weren’t for this <code>exp.subs</code> hack, which causes test failures and is technically a regression, but is required for the preparsing code to the Risch algorithm to work.  This is why I <a href="http://groups.google.com/group/sympy/browse_thread/thread/4a19d0f39f51fda6" target="_blank">wrote to the list</a> two weeks ago asking for advice on how to structure the substitution code so that we can nicely have various kinds of substitutions (e.g., exact like I need and algebraic like currently exists in <code>exp</code>) living together without cluttering up the code.</p>
<p>Therefore, I am going to focus my energies on fixing this subs problem so I can get my code merged with <code>master</code>.  Then, when this is done, I will continue my work on implementing the remaining cases of the Risch algorithm.  </p>
<p>So let this tale be a warning to people working on a lot of code in a big branch.  This especially applies to our GSoC students, as it’s extremely easy to let your code accumulate when you’re a GSoC student (technically this branch of mine is a GSoC branch).  I see that some of our students are doing a better job of this than others.  To those who have your code all in one big branch that hasn’t been merged, I recommend you ready your branch for merge now.  And in the future, try to break your code up into small but still meaningful chunks and submit those as pull requests.  With git, it’s easy to base the code you are currently working on on code that hasn’t been merged yet, while still keeping things in small chunks for the pull requests.  </p>
<p>On the other hand, git will only take you so far if you keep everything in a big branch, because there are going to be changes in <code>master</code> that will affect your work, no matter how isolated you think it is, and these are the sorts of things that it is impossible for git to fix for you.  But if your code is in <code>master</code>, it will be supported by everyone, and any major change that affects it will have to fix it. For example, if someone changes a printer and the doctests change, then he will have to change your doctest too if it’s in <code>master</code>, but if it’s in your branch, then you will have to fix it when you next merge/rebase with/against <code>master</code>.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/981/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/981/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/981/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/981/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/981/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/981/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/981/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/981/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/981/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/981/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/981/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/981/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/981/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/981/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=981&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-07-25T09:25:13Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-12-04T20:40:07Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://gilbertgede.wordpress.com/?p=70</id>
    <link href="http://gilbertgede.wordpress.com/2011/07/24/gsoc-week-9/" rel="alternate" type="text/html"/>
    <title>GSoC, Week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Week 9 already….? Also, my internet connection is down, so this post is a little later than I planned…. So there was some progress this week. A lot of it was in doing the math for the linearization process. Linearization is normally easy, but when dealing with dependent quantities becomes more complicated. It requires treating [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=70&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Week 9 already….? Also, my internet connection is down, so this post is a little later than I planned….</p>
<p>So there was some progress this week. A lot of it was in doing the math for the linearization process. Linearization is normally easy, but when dealing with dependent quantities becomes more complicated. It requires treating the dependent quantities as functions of the independent quantities, then taking partial derivatives. It ends up being simplest (that is the current theory at least) when using the chain rule; this was done by hand in order to ease the work done by SymPy’s routines. These expressions can get quite large, so minimizing the buildup of expression size is important. Or, to put it another way, we figured out the best way to operate on smaller chunks of expressions, rather than larger ones, and then combine them afterwards, minimizing the size of some of the expressions which have to be dealt with.</p>
<p>In our lab at UC Davis, one of the big projects currently is studying bicycle dynamics. A paper was written in 2007 which sought to provide benchmark/reference values to validate models of the bicycle against: J.P Meijaard, Jim M Papadopoulos, Andy Ruina and A.L Schwab. Linearized dynamics equations for the balance and steer of a bicycle: a benchmark and review. Proceedings of The Royal Society (2007) 463, 1955-1982 doi: 10.1098/rspa.2007.1857 . One of the goals for PyDy this year was to be able to generate the full nonlinear equations for the bicycle, and the linear equations for comparison of eigenvalues using the reference values. Well, it looks like my code can do that successfully now:</p>
<p>The code at the bottom of the post calculates the “A” matrix, and writes a few eigenvalues out. You can compare them to those presented in the paper. There are still 2 issues left to investigate as part of the linearization process, there is pretty printing, latex printing, and finally code output and all of the functionality will be “done”. There is also still lots of documentation to write…</p>
<p>One other issue, that is proving to be somewhat serious, is the speed of the code. The execution time of the code is usually not too terrible, and if it does get bad, turning of Vector’s auto simplification (Vector.simp = False) usually helps. The linearization can also be kinda slow, but not overwhelmingly so. What seems to really be an issue is both printing (to screen or file) and substituting. The expressions get fairly big (I think the forcing term for the bicycle is on the order of 1MB when in Ascii form) so I’m not completely unhappy or surprised about the printing issue. I am more unhappy about the substitution being slow. Right now I’m using .subs(), and it seems to take a few minutes. I’ve also tried .evalf(subs=dict) and lambdify, but .evalf hits a maximum recursion depth error, and I’m getting a syntax error with lambdify (it actually looks like this is due to the use of unknown functions; I’m sure I can solve this somehow).</p>
<p>Use the pydy-pull-funcderiv branch; that’s the current branch. Some pushes have been forced in, so beware….sorry. Also, Brian Granger’s code got pulled in, so I’ll be defining ‘dynamic symbols’ as undefined functions of time. My branches need a little work to get them organized and unified again.</p>
<p>Code Output:</p>
<pre>Calculation of Linearized Bicycle "A" Matrix, with States: Roll, Steer, Roll Rate, Steer Rate
Before Forming the List of Nonholonomic Constraints.
Before Handling of Dependent Speeds
Before Forming Generalized Active Forces, Fr
Before Forming Generalized Inertia Forces, Fr*
Base Equations of Motion Computed
Before Linearization of the "Forcing" Term
Before Substitution of Numerical Values
[               0,                                           0,                  1.0,                    0]
[               0,                                           0,                    0,                  1.0]
[9.48977444677355, -0.891197738059088*v**2 - 0.571523173729246, -0.105522449805691*v, -0.330515398992311*v]
[11.7194768719633,   -1.97171508499972*v**2 + 30.9087533932407,   3.67680523332153*v,  -3.08486552743311*v]
v = 1
{-3.13423125066578: 1, 3.52696170990069 - 0.80774027519931*I: 1, 3.52696170990069 + 0.80774027519931*I: 1, -7.11008014637441: 1}
v = 2
{-8.67387984831737: 1, -3.07158645641514: 1, 2.68234517512745 + 1.68066296590676*I: 1, 2.68234517512745 - 1.68066296590676*I: 1}
v = 3
{-2.63366137253665: 1, 1.70675605663973 + 2.31582447384324*I: 1, 1.70675605663973 - 2.31582447384324*I: 1, -10.3510146724592: 1}
v = 4
{0.41325331521124 - 3.07910818603205*I: 1, -12.1586142657644: 1, 0.41325331521124 + 3.07910818603205*I: 1, -1.42944427361326: 1}
v = 5
{-14.0783896927982: 1, -0.322866429004087: 1, -0.775341882195845 + 4.46486771378823*I: 1, -0.775341882195845 - 4.46486771378823*I: 1}</pre>
<p>Actual Code:</p>
<pre>from sympy import *
from sympy.physics.mechanics import *

# Code to get equations of motion for a bicycle modeled as in:
# J.P Meijaard, Jim M Papadopoulos, Andy Ruina and A.L Schwab. Linearized
# dynamics equations for the balance and steer of a bicycle: a benchmark and
# review. Proceedings of The Royal Society (2007) 463, 1955-1982
# doi: 10.1098/rspa.2007.1857

print('Calculation of Linearized Bicycle \"A\" Matrix, with States: Roll, '
      'Steer, Roll Rate, Steer Rate')

# Note that this code has been crudely ported from Autolev, which is the reason
# for some of the unusual naming conventions. It was purposefully as similar as
# possible in order to aide debugging.

# Vector's simplification routines need to be turned off, otherwise the
# expressions get too big and too slow to simplify
Vector.simp = False
mechanics_printing()

# Declare Coordinates &amp; Speeds
q1, q2, q4, q5 = dynamicsymbols('q1 q2 q4 q5')
q1d, q2d, q4d, q5d = dynamicsymbols('q1 q2 q4 q5', 1)
u1, u2, u3, u4, u5, u6 = dynamicsymbols('u1 u2 u3 u4 u5 u6')
u1d, u2d, u3d, u4d, u5d, u6d = dynamicsymbols('u1 u2 u3 u4 u5 u6', 1)

# Declare System's Parameters
WFrad, WRrad, htangle, forkoffset = symbols('WFrad WRrad htangle forkoffset')
forklength, framlength, forkcg1 = symbols('forklength framlength forkcg1')
forkcg3, framcg1, framcg3, Iwr11 = symbols('forkcg3 framcg1 framcg3 Iwr11')
Iwr22, Iwf11, Iwf22, Ifram11 = symbols('Iwr22 Iwf11 Iwf22 Ifram11')
Ifram22, Ifram33, Ifram31, Ifork11 = symbols('Ifram22 Ifram33 Ifram31 Ifork11')
Ifork22, Ifork33, Ifork31, g = symbols('Ifork22 Ifork33 Ifork31 g')
mframe, mfork, mwf, mwr = symbols('mframe mfork mwf mwr')

# Set up reference frames for the system
# N - inertial
# Y - yaw
# R - roll
# WR - rear wheel, rotation angle is ignorable coordinate so not oriented
# FRAM - bicycle frame
# TEMPFRAM - statically rotated frame for easier reference inertia definition
# FORK - bicycle fork
# TEMPFORK - statically rotated frame for easier reference inertia definition
# WF - front wheel, again posses a ignorable coordinate
N = ReferenceFrame('N')
Y = N.orientnew('Y', 'Simple', q1, 3)
R = Y.orientnew('R', 'Simple', q2, 1)
FRAM = R.orientnew('FRAM', 'Simple', q4 + htangle, 2)
WR = ReferenceFrame('WR')
TEMPFRAM = FRAM.orientnew('TEMPFRAM', 'Simple', -htangle, 2)
FORK = FRAM.orientnew('FORK', 'Simple', q5, 1)
TEMPFORK = FORK.orientnew('TEMPFORK', 'Simple', -htangle, 2)
WF = ReferenceFrame('WF')

# Declaration of the RigidBody containers
BodyFram = RigidBody()
BodyFork = RigidBody()
BodyWR = RigidBody()
BodyWF = RigidBody()

# Setting the masses for the bodies
BodyFram.mass = mframe
BodyFork.mass = mfork
BodyWF.mass = mwf
BodyWR.mass = mwr

# Assigning the appropriate frames to each body
BodyFram.frame = FRAM
BodyFork.frame = FORK
BodyWR.frame = WR
BodyWF.frame = WF

# Kinematics of the Bicycle
# First block of code is forming the positions of the relevant points
# rear wheel contact -&gt; rear wheel mass center -&gt; frame mass center +
# frame/fork connection -&gt; fork mass center + front wheel mass center -&gt; front
# wheel contact point
WRhat = Point('WRhat')
WRmc = WRhat.newpoint('WRmc', WRrad * R.z)
STEER = WRmc.newpoint('STEER', framlength * FRAM.z)
FRAMmc = WRmc.newpoint('FRAMmc', -framcg1 * FRAM.x + framcg3 * FRAM.z)
FORKmc = STEER.newpoint('FORKmc', -forkcg1 * FORK.x + forkcg3 * FORK.z)
WFmc = STEER.newpoint('WFmc', forklength * FORK.x + forkoffset * FORK.z)
WFhat = WFmc.newpoint('WFhat', WFrad*(dot(FORK.y, Y.z)*FORK.y - Y.z).unit)

# Set the angular velocity of each frame.
# Angular accelerations end up being calculated automatically by
# differentiating the angular velocities when first needed.
# u1 is yaw rate
# u2 is roll rate
# u3 is rear wheel rate
# u4 is frame pitch rate
# u5 is fork steer rate
# u6 is front wheel rate
Y.set_ang_vel(N, u1 * Y.z)
R.set_ang_vel(Y, u2 * R.x)
WR.set_ang_vel(FRAM, u3 * FRAM.y)
FRAM.set_ang_vel(R, u4 * FRAM.y)
FORK.set_ang_vel(FRAM, u5 * FORK.x)
WF.set_ang_vel(FORK, u6 * FORK.y)

# Form the velocities of the previously defined points, using the 2 - point
# theorem (written out by hand here).
# Accelerations again are calculated automatically when first needed.
WRhat.set_vel(N, 0)
WRmc.set_vel(N, WRhat.vel(N) + (WR.ang_vel_in(N) ^ WRmc.pos_from(WRhat)))
STEER.set_vel(N, WRmc.vel(N) + (FRAM.ang_vel_in(N) ^ STEER.pos_from(WRmc)))
FRAMmc.set_vel(N, WRmc.vel(N) + (FRAM.ang_vel_in(N) ^ FRAMmc.pos_from(WRmc)))
FORKmc.set_vel(N, STEER.vel(N) + (FORK.ang_vel_in(N) ^ FORKmc.pos_from(STEER)))
WFmc.set_vel(N, STEER.vel(N) + (FORK.ang_vel_in(N) ^ WFmc.pos_from(STEER)))
WFhat.set_vel(N, WFmc.vel(N) + (WF.ang_vel_in(N) ^ WFhat.pos_from(WFmc)))

# Assign the relevant points to each body.
BodyFram.mc = FRAMmc
BodyFork.mc = FORKmc
BodyWF.mc = WFmc
BodyWR.mc = WRmc

# Sets the inertias of each body. Uses the inertia frame to construct the
# inertia dyadics. Wheel inertias are only defined by principle moments of
# inertia, and are in fact constant in the frame and fork reference frames; it
# is for this reason that the orientations of the wheels does not need to be
# defined. The frame and fork inertias are defined in the 'TEMP' frames which
# are fixed to the appropriate body frames; this is to allow easier input of
# the reference values of the benchmark paper. Note that due to slightly
# different orientations, the products of inertia need to have their signs
# flipped; this is done later when entering the numerical value.
BodyFram.inertia = (inertia(TEMPFRAM, Ifram11, Ifram22, Ifram33, 0, 0, Ifram31), FRAMmc)
BodyFork.inertia = (inertia(TEMPFORK, Ifork11, Ifork22, Ifork33, 0, 0, Ifork31), FORKmc)
BodyWR.inertia = (inertia(FRAM, Iwr11, Iwr22, Iwr11), WRmc)
BodyWF.inertia = (inertia(FORK, Iwf11, Iwf22, Iwf11), WFmc)

print 'Before Forming the List of Nonholonomic Constraints.'

# The kinematic differential equations; they are defined quite simply. Each
# entry in this list is equal to zero.
kd = [q1d - u1, q2d - u2, q4d - u4, q5d - u5]

# The nonholonomic constraints are the velocity of the front wheel contact
# point dotted into the X, Y, and Z directions; the yaw frame is used as it is
# "closer" to the front wheel (1 less DCM connecting them). These constraints
# force the velocity of the front wheel contact point to be 0 in the inertial
# frame; the X and Y direction constraints enforce a "no-slip" condition, and
# the Z direction constraint forces the front wheel contact point to not move
# away from the ground frame, essentially replicating the holonomic constraint
# which does not allow the frame pitch to change in an invalid fashion.
conlspeed = [WFhat.vel(N) &amp; Y.x, WFhat.vel(N) &amp; Y.y, WFhat.vel(N) &amp; Y.z]
# The holonomic constraint is that the position from the rear wheel contact
# point to the front wheel contact point when dotted into the normal-to-ground
# plane direction must be zero; effectively that the front and rear wheel
# contact points are always touching the ground plane. This is actually not
# part of the dynamic equations, but instead is necessary for the lineraization
# process.
conlcoord = [WFhat.pos_from(WRhat) &amp; Y.z]

# The force list; each body has the appropriate gravitational force applied
# at its mass center.
FL = [(FRAMmc, -mframe * g * Y.z), (FORKmc, -mfork * g * Y.z), (WFmc,
      -mwf * g * Y.z), (WRmc, -mwr * g * Y.z)]
BL = [BodyFram, BodyFork, BodyWR, BodyWF]

# The N frame is the inertial frame, coordinates are supplied in the order of
# independent, dependent coordinates, as are the speeds. The kinematic
# differential equation are also entered here.
KM = Kane(N)
KM.coords([q1, q2, q5, q4])
KM.speeds([u2, u3, u5, u1, u4, u6])
KM.kindiffeq(kd)

print 'Before Handling of Dependent Speeds'

# Here the dependent speeds are specified, in the same order they were provided
# in earlier, along with the non-holonomic constraints.
# The dependent coordinate is also provided, with the holonomic constraint.
# Again, this is only provided for the linearization process.
KM.dependent_speeds([u1, u4, u6], conlspeed)
KM.dependent_coords([q4], conlcoord)

print 'Before Forming Generalized Active Forces, Fr'
fr = KM.form_fr(FL)
print 'Before Forming Generalized Inertia Forces, Fr*'
frstar = KM.form_frstar(BL)
print 'Base Equations of Motion Computed'

# This is the start of entering in the numerical values from the benchmark
# paper to validate the eigen values of the linearized equations from this
# model to the reference eigen values. Look at the aforementioned paper for
# more information. Some of these are intermediate values, used to transform
# values from the paper into the coordinate systems used in this model.
PaperRadRear                    =  0.3
PaperRadFront                   =  0.35
HTA                             =  evalf.N(pi/2-pi/10)
TrailPaper                      =  0.08
rake                            =  evalf.N(-(TrailPaper*sin(HTA)-(PaperRadFront*cos(HTA))))
PaperWb                         =  1.02
PaperFramCgX                    =  0.3
PaperFramCgZ                 	=  0.9
PaperForkCgX                  	=  0.9
PaperForkCgZ                	=  0.7
FramLength                  	=  evalf.N(PaperWb*sin(HTA)-(rake-(PaperRadFront-PaperRadRear)*cos(HTA)))
FramCGNorm                     	=  evalf.N((PaperFramCgZ-PaperRadRear-(PaperFramCgX/sin(HTA))*cos(HTA))*sin(HTA))
FramCGPar                      	=  evalf.N((PaperFramCgX/sin(HTA) + (PaperFramCgZ-PaperRadRear-PaperFramCgX/sin(HTA)*cos(HTA))*cos(HTA)))
tempa                         	=  evalf.N((PaperForkCgZ - PaperRadFront))
tempb                         	=  evalf.N((PaperWb-PaperForkCgX))
tempc                         	=  evalf.N(sqrt(tempa**2+tempb**2))
PaperForkL                      =  evalf.N((PaperWb*cos(HTA)-(PaperRadFront-PaperRadRear)*sin(HTA)))
ForkCGNorm                  	=  evalf.N(rake+(tempc * sin(pi/2-HTA-acos(tempa/tempc))))
ForkCGPar              		=  evalf.N(tempc * cos((pi/2-HTA)-acos(tempa/tempc))-PaperForkL)

# Here is the final assembly of the numerical values. The symbol 'v' is the
# forward speed of the bicycle (a concept which only makes sense in the
# upright, static equilibrium case?). These are in a dictionary which will
# later be substituted in. Again the sign on the *product* of inertia values is
# flipped here, due to different orientations of coordinate systems.
v = Symbol('v')
val_dict = {WFrad: PaperRadFront,
            WRrad: PaperRadRear,
            htangle: HTA,
            forkoffset: rake,
            forklength: PaperForkL,
            framlength: FramLength,
            forkcg1: ForkCGPar,
            forkcg3: ForkCGNorm,
            framcg1: FramCGNorm,
            framcg3: FramCGPar,
            Iwr11: 0.0603,
            Iwr22: 0.12,
            Iwf11: 0.1405,
            Iwf22: 0.28,
            Ifork11: 0.05892,
            Ifork22: 0.06,
            Ifork33: 0.00708,
            Ifork31: 0.00756,
            Ifram11: 9.2,
            Ifram22: 11,
            Ifram33: 2.8,
            Ifram31: -2.4,
            mfork: 4,
            mframe: 85,
            mwf: 3,
            mwr: 2,
            g: 9.81,
            q1: 0,
            q2: 0,
            q4: 0,
            q5: 0,
            u1: 0,
            u2: 0,
            u3: v/PaperRadRear,
            u4: 0,
            u5: 0,
            u6: v/PaperRadFront}

# Here a dictionary is formed using the kinematic differential equations. The
# expression is perhaps slightly more complicated then necessary in this case,
# but should work in all cases in order the generate a dictionary in the form
# {qd: f(u)}.
sub_dict = solve_linear_system_LU(Matrix([KM._k_kqdot.T,
        -(KM._k_ku*Matrix(KM._u) + KM._f_k).T]).T, KM._qdot)

print 'Before Linearization of the \"Forcing\" Term'
# Linearizes the forcing vector; the equations are set up as MM udot = forcing,
# where MM is the mass matrix, udot is the vector representing the time
# derivatives of the generalized speeds, and forcing is a vector which contains
# both external forcing terms and internal forcing terms, such as centripital
# or coriolis forces.
# This actually returns a matrix with as many rows as *total* coordinates and
# speeds, but only as many columns as independent coordinates and speeds.
forcing_lin = KM.linearize().subs(sub_dict)

# As mentioned above, the size of the linearized forcing terms is expanded to
# include both q's and u's, so the mass matrix must have this done as well.
# This will likely be changed to be part of the linearized process, for future
# reference.
MM_full = (KM._k_kqdot).row_join(zeros((4, 6))).col_join((zeros((6,
                4))).row_join(KM.mass_matrix))

print 'Before Substitution of Numerical Values'
# I think this is pretty self explanatory. It takes a really long time though.
# I've experimented with using evalf with substitution, this failed due to
# maximum recursion depth being exceeded; I also tried lambdifying this, and am
# not sure what the error message I got there meant.
MM_full = MM_full.subs(val_dict).evalf()
forcing_lin = forcing_lin.subs(val_dict).evalf()

# Finally, we construct an "A" matrix for the form xdot = A x (x being the
# state vector), although in this case, the sizes are a little off. The
# following line extracts only the minimum entries required for eigenvalue
# analysis, which correspond to rows and columns for lean, steer, lean rate,
# and steer rate.
Amat = MM_full.inv() * forcing_lin
A = Amat.extract([1,2,4,6],[1,2,3,5])
print A
print 'v = 1'
print A.subs(v, 1).eigenvals()
print 'v = 2'
print A.subs(v, 2).eigenvals()
print 'v = 3'
print A.subs(v, 3).eigenvals()
print 'v = 4'
print A.subs(v, 4).eigenvals()
print 'v = 5'
print A.subs(v, 5).eigenvals()</pre>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/70/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/70/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/gilbertgede.wordpress.com/70/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/gilbertgede.wordpress.com/70/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/gilbertgede.wordpress.com/70/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/gilbertgede.wordpress.com/70/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/gilbertgede.wordpress.com/70/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/gilbertgede.wordpress.com/70/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/gilbertgede.wordpress.com/70/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/gilbertgede.wordpress.com/70/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/gilbertgede.wordpress.com/70/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/gilbertgede.wordpress.com/70/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/gilbertgede.wordpress.com/70/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/gilbertgede.wordpress.com/70/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=70&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-07-24T01:25:23Z</updated>
    <category term="GSoC 2011"/>
    <category term="PyDy"/>
    <category term="SymPy"/>
    <author>
      <name>gilbertgede</name>
    </author>
    <source>
      <id>http://gilbertgede.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://gilbertgede.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://gilbertgede.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://gilbertgede.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://gilbertgede.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>gilbertgede</title>
      <updated>2011-12-04T20:40:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://saptman.wordpress.com/?p=26</id>
    <link href="http://saptman.wordpress.com/2011/07/23/permutation-groups-and-prufer-codes/" rel="alternate" type="text/html"/>
    <title>Permutation groups and Prufer codes</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The last week was a bit hectic. It was the first time I had even been on a 13 hour flight. I had implemented Prufer codes before I left, which is basically a one-to-one mapping to labelled trees. Using Prufer codes, we can generate trees in an ordered manner, rank and unrank them and do … <a href="http://saptman.wordpress.com/2011/07/23/permutation-groups-and-prufer-codes/">Read more</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=saptman.wordpress.com&amp;blog=23040289&amp;post=26&amp;subd=saptman&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The last week was a bit hectic. It was the first time I had even been on a 13 hour flight.</p>
<p>I had implemented Prufer codes before I left, which is basically a one-to-one mapping to labelled trees. Using Prufer codes, we can generate trees in an ordered manner, rank and unrank them and do all sorts of other cool stuff. By placing some restrictions on the enumerated Prufer codes, we can get the number of spanning trees of a complete bipartite graph. Apart from Prufer codes, I was also fixing up the algorithms I had implemented for bracelets, fixed-density and fixed-content necklaces, Lyndon brackets (these form the basis for free Lie algebra), meanders and stamp foldings. These are really specialized routines but it was decided in the mailing list that it would be really helpful for others to read.</p>
<p>Once I get the Permutations branch in, I can begin work on the Permutation Groups module, so that will be my immediate task.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/saptman.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/saptman.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/saptman.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/saptman.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/saptman.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/saptman.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/saptman.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/saptman.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/saptman.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/saptman.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/saptman.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/saptman.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/saptman.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/saptman.wordpress.com/26/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=saptman.wordpress.com&amp;blog=23040289&amp;post=26&amp;subd=saptman&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-07-23T15:21:39Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>saptman</name>
    </author>
    <source>
      <id>http://saptman.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://saptman.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://saptman.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://saptman.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://saptman.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My symply awesome gsoc summer</subtitle>
      <title>saptman</title>
      <updated>2011-12-04T20:40:16Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8510171342300140296.post-3285901508455144916</id>
    <link href="http://seanvig.blogspot.com/feeds/3285901508455144916/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/07/improving-rewrite-and-represent-for.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/3285901508455144916" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/3285901508455144916" rel="self" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/07/improving-rewrite-and-represent-for.html" rel="alternate" type="text/html"/>
    <title>Improving rewrite and represent for coupled/uncoupled states</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This last week, most of the coding I have done has been working on getting represent working properly for coupled and uncoupled states. After doing a quick double check on what the basis vectors of a coupled or uncoupled state would be, I was able to get this code in. Tests for the represent logic will still need to be added, but so far it seems to be working properly.<div><br/></div><div>In addition, I modified the rewrite logic to implement the represent method. This way all of the coupling and uncoupling logic is taken care of by represent, just as the represent method also takes care of all rotations of coordinate bases. To simplify the rewrite logic, I also implemented a vect_to_state, which returns a linear combination of states given any state vector when provided with the appropriate parameters, to specify coupled or uncoupled and what the j1 and j2 parameters are.</div><div><br/></div><div>In addition to this work, I also wrote up the shell of the class that would handle tensor products of operators. However, in its current state, it doesn't function as one would expect, as the _apply_operator_* methods are not being called by qapply. This, in addition to noting that there is very little logic that is in the TensorProductState class has been making me think I can move most of the logic for states and operators that are uncoupled out of the spin class, implementing it instead in places like qapply and represent. The only trick would be the uncoupled-&gt; coupled logic, which is just about the only bit of logic that the TensorProductState class has that couldn't necessarily be generalized, and the loss of the j1/j2/m1/m2 properties. I will be trying to do this in the coming week, which will in turn fix the problems I am having with getting tensor products of states to work.</div><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8510171342300140296-3285901508455144916?l=seanvig.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-07-23T00:30:30Z</updated>
    <published>2011-07-23T00:30:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="GSoC"/>
    <author>
      <name>Sean Vig</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/18029750000026588134</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8510171342300140296</id>
      <category term="sympy"/>
      <category term="GSoC"/>
      <author>
        <name>Sean Vig</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/18029750000026588134</uri>
      </author>
      <link href="http://seanvig.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://seanvig.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Developing Wigner-3nj Symbols in SymPy</subtitle>
      <title>Sean Vig's 2011 GSoC Project</title>
      <updated>2011-11-28T05:58:52Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://nessgrh.wordpress.com/?p=343</id>
    <link href="http://nessgrh.wordpress.com/2011/07/22/status-update%e2%80%94week-9/" rel="alternate" type="text/html"/>
    <title>Status Update—Week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This was one busy week again. I implemented polar numbers and changed over the integration and hyperexpand code to use them. This was more painful than I thought, but it seems to work now. Indeed the problems I mentioned before (other than matching) are gone now, as are the hacks. After this I cleaned up [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=343&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This was one busy week again. I implemented polar numbers and changed over the integration and hyperexpand code to use them. This was more painful than I thought, but it seems to work now. Indeed the problems I mentioned before (other than matching) are gone now, as are the hacks. After this I cleaned up my branch to such an extent that I considered it ready for review. There are still some minor issues regarding numerical evaluation that I’m working to sort out, but this shouldn’t affect the review much.</p>
<p>Then I started working on adding lerchphi and polylogarithms to sympy. The goal of this is to incorporate them into hyperexpand(), so that a few more interesting series can be summed. This is good fun. Here are a few <a href="http://pastebin.com/raw.php?i=bjrqW8Hp">exampes</a>. As you can see, all the standard things that one expects to work do work. And expand_func() can be used to reduce lerchphi to polylogarithms. In fact it can also reduce to hurwitz zeta functions in some cases but that is a <a href="http://pastebin.com/raw.php?i=aeyYzhmK">mess</a>. However, it is correct (tested numerically) and in a specific sense even simpler. In any case it’s nice to have it, even if it is not used much <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> .</p>
<p>I also started extending hyperexpand to recognise lerch phi … this is slightly non-trivial (compared to normal table extensions) because lerch phi is actually not hypergeometric unless the parameter s is an integer, and even then the number of parameters of the hypergeometric function depends on s. Thus we need a special function to recognise such hypergeometric functions and generate formulae on the fly, this is what I am working on now. It will be finished on monday (so I have something cool to show off next week again *g*).</p>
<p>Finally it turns out that there are some subtle bugs in random numeric testing for hyperexpand. Since the code is in master now and we are about to release this is fairly bad of course. But luckily another gsoc student is setting up jenkins and configured it in such a way to currently run the relevant tests every five minutes. That should allow me to weed out all bugs.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/343/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/343/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/343/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/343/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/343/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/343/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/343/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/343/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/343/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/343/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/343/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/343/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/343/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/343/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=343&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-07-22T22:08:02Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>nessgrh</name>
    </author>
    <source>
      <id>http://nessgrh.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://nessgrh.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://nessgrh.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://nessgrh.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://nessgrh.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My GSoC Project</subtitle>
      <title>nessgrh</title>
      <updated>2011-12-04T20:40:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://f1728.wordpress.com/?p=193</id>
    <link href="http://f1728.wordpress.com/2011/07/22/week-9/" rel="alternate" type="text/html"/>
    <title>Week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Last week I proclaimed that for the Gröbner Walk it would be possible to avoid solving for the coefficients of a linear combination. I misunderstood this completely and it is wrong (I think). Also my previous lamenting about solvers has less merit. The claimed rounding errors in FGLM were not rounding errors but a problem [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;blog=22515617&amp;post=193&amp;subd=f1728&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Last week I proclaimed that for the Gröbner Walk it would be possible to avoid solving for the coefficients of a linear combination. I misunderstood this completely and it is wrong (I think).</p>
<p>Also my previous lamenting about solvers has less merit. The claimed rounding errors in FGLM were not rounding errors but a problem of ordering expressions. This affected FGLM and rational simplification. <strong>EDIT:</strong> This is not an error. I did not realize that expressions order variables always alphabetically…</p>
<p>From the “Using Algebraic Geometry” book I implemented another way of solving polynomial equations. It sounds quite nice at first, but it turned out rather useless for SymPy: Instead of computing a Gröbner basis wrt lex, any term order can be used. Then, for every variably <img alt="X_i" class="latex" src="http://s0.wp.com/latex.php?latex=X_i&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="X_i"/>, the eigenvalues of the <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="K"/>-linear map <img alt="f + I \mapsto X_i f + I" class="latex" src="http://s0.wp.com/latex.php?latex=f+%2B+I+%5Cmapsto+X_i+f+%2B+I&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="f + I \mapsto X_i f + I"/> are computed (where the basis of <img alt="K[X_1, \ldots, X_n]/I" class="latex" src="http://s0.wp.com/latex.php?latex=K%5BX_1%2C+%5Cldots%2C+X_n%5D%2FI&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="K[X_1, \ldots, X_n]/I"/> is given by the monomials not divisible by the leading terms of the reduced Gröbner basis). These eigenvalues are the <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="i"/>-th coordinates of the solutions.</p>
<p>The problem is that the dimension of <img alt="K[X_1, \ldots, X_n]/I" class="latex" src="http://s0.wp.com/latex.php?latex=K%5BX_1%2C+%5Cldots%2C+X_n%5D%2FI&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="K[X_1, \ldots, X_n]/I"/> can be big and computing the eigenvalues by first computing the characteristic polynomial and then factoring it is slow. If we’d find eigenvalues numerically, it would be quite nice since the error would not propagate as it would otherwise. Additionally, if we’d allow randomness, only a single matrix would have to be considered (I haven’t read that part yet, though). Since finding the minimal polynomial of an algebraic number is just solving for the “last” variable, this could be modified to find minimal polynomials. Also, this can be useful for finding the radical of an ideal.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/f1728.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/f1728.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/f1728.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/f1728.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/f1728.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/f1728.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/f1728.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/f1728.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/f1728.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/f1728.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/f1728.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/f1728.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/f1728.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/f1728.wordpress.com/193/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;blog=22515617&amp;post=193&amp;subd=f1728&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy"/></div>
    </content>
    <updated>2011-07-22T17:21:47Z</updated>
    <category term="SymPy"/>
    <author>
      <name>f1728</name>
    </author>
    <source>
      <id>http://f1728.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://f1728.wordpress.com/category/SymPy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://f1728.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://f1728.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://f1728.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>f1728 » SymPy</title>
      <updated>2011-08-12T15:40:14Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://nessgrh.wordpress.com/?p=317</id>
    <link href="http://nessgrh.wordpress.com/2011/07/22/deciphering-branch-behaviour/" rel="alternate" type="text/html"/>
    <title>Deciphering Branch Behaviour</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Handling branches in computer systems is indeed unbelievably subtle. Here is one slightly complicated example which comes out correctly, at least when looked at in the right way; this is encouraging. The following integral comes up in an ODE test: . The right hand side is as computed by the meijerint code and looks suspicious, [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=317&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Handling branches in computer systems is indeed unbelievably subtle. Here is one slightly complicated example which comes out correctly, at least when looked at in the right way; this is encouraging. The following integral comes up in an ODE test: <img alt="\int \frac{\mathrm{d}x}{x \sqrt{1 - x^2}} = i \arcsin{\frac{1}{x}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint+%5Cfrac%7B%5Cmathrm%7Bd%7Dx%7D%7Bx+%5Csqrt%7B1+-+x%5E2%7D%7D+%3D+i+%5Carcsin%7B%5Cfrac%7B1%7D%7Bx%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\int \frac{\mathrm{d}x}{x \sqrt{1 - x^2}} = i \arcsin{\frac{1}{x}}"/>. The right hand side is as computed by the meijerint code and looks suspicious, not being invariant under complex conjugation. However, note that on both sides are branched functions: <img alt="\sqrt{1 - x^2}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csqrt%7B1+-+x%5E2%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\sqrt{1 - x^2}"/> and <img alt="\arcsin{\frac{1}{x}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Carcsin%7B%5Cfrac%7B1%7D%7Bx%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\arcsin{\frac{1}{x}}"/>. The left hand side is unbranched at the origin, whereas the right hand side is unbranched at infinity. The left hand side is branched at infinity, whereas the rigth hand side is not. (There is nothing unusual about this, there is no reason to expect indefinite integrals to retain branchpoints.)</p>
<p>Thus in order to understand what is going on, we first have to understand the extension of both functions to true polar numbers <img alt="x" class="latex" src="http://s0.wp.com/latex.php?latex=x&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="x"/>, because this is what the meijer g code works with. Since inverse sine is surely nasty, let’s try to understand the square root expression. A clue comes from enabling debug output: the meijerint code decides <img alt="\frac{1}{\sqrt{1-x^2}} = G(x^2 e^{i \pi}) = \sqrt{\pi} G_{1, 1}^{1, 1} \left(\begin{matrix}\frac{1}{2} \\ 0 \end{matrix}\middle| x^2 e^{i\pi} \right)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7B1-x%5E2%7D%7D+%3D+G%28x%5E2+e%5E%7Bi+%5Cpi%7D%29+%3D+%5Csqrt%7B%5Cpi%7D+G_%7B1%2C+1%7D%5E%7B1%2C+1%7D+%5Cleft%28%5Cbegin%7Bmatrix%7D%5Cfrac%7B1%7D%7B2%7D+%5C%5C+0+%5Cend%7Bmatrix%7D%5Cmiddle%7C+x%5E2+e%5E%7Bi%5Cpi%7D+%5Cright%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\frac{1}{\sqrt{1-x^2}} = G(x^2 e^{i \pi}) = \sqrt{\pi} G_{1, 1}^{1, 1} \left(\begin{matrix}\frac{1}{2} \\ 0 \end{matrix}\middle| x^2 e^{i\pi} \right)"/>. From the definitions, for <img alt="|x| &lt; 1" class="latex" src="http://s0.wp.com/latex.php?latex=%7Cx%7C+%3C+1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="|x| &lt; 1"/> we find <img alt="G(x) = F(x)" class="latex" src="http://s0.wp.com/latex.php?latex=G%28x%29+%3D+F%28x%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="G(x) = F(x)"/>, where <img alt="F(x)" class="latex" src="http://s0.wp.com/latex.php?latex=F%28x%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="F(x)"/>, which we shall define only for <img alt="|x| &lt; 1" class="latex" src="http://s0.wp.com/latex.php?latex=%7Cx%7C+%3C+1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="|x| &lt; 1"/>, is <img alt="(1 + x)^{-\frac{1}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=%281+%2B+x%29%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="(1 + x)^{-\frac{1}{2}}"/>, evaluated on the principal branch (indeed it is just a binomial series). Also from the definitions, we find that for <img alt="|x| &gt; 1" class="latex" src="http://s0.wp.com/latex.php?latex=%7Cx%7C+%3E+1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="|x| &gt; 1"/>, <img alt="G(x) = \frac{1}{\sqrt{x}} F\left(\frac{1}{x}\right)" class="latex" src="http://s0.wp.com/latex.php?latex=G%28x%29+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7Bx%7D%7D+F%5Cleft%28%5Cfrac%7B1%7D%7Bx%7D%5Cright%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="G(x) = \frac{1}{\sqrt{x}} F\left(\frac{1}{x}\right)"/>, where <img alt="\frac{1}{\sqrt{x}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7Bx%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\frac{1}{\sqrt{x}}"/> denotes the holomorphic function <img alt="\mathcal{S} \rightarrow \mathbb{C}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D+%5Crightarrow+%5Cmathbb%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S} \rightarrow \mathbb{C}"/> (which is, in particular, continuous, i.e. free of branch cuts). Finally we know that for <img alt="|Arg(x)| &lt; \pi" class="latex" src="http://s0.wp.com/latex.php?latex=%7CArg%28x%29%7C+%3C+%5Cpi&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="|Arg(x)| &lt; \pi"/>, these two definitions must patch together continuously.</p>
<p>Note how the branching has been resolved crudely: for every polar number x (outside a set of measure zero which does not disconnect <img alt="\mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S}"/>) the integrand has acquired a definite value, continuous on circles. However, there is a circular branch cut on every other sheet.</p>
<p>Now let’s look back at the integrand. The meijerint code interprets <img alt="\int \frac{1}{x \sqrt{1 - x^2}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint+%5Cfrac%7B1%7D%7Bx+%5Csqrt%7B1+-+x%5E2%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\int \frac{1}{x \sqrt{1 - x^2}}"/> as <img alt="\frac{G(e^{i\pi} x^2)}{x}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7BG%28e%5E%7Bi%5Cpi%7D+x%5E2%29%7D%7Bx%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\frac{G(e^{i\pi} x^2)}{x}"/>. [It's <img alt="e^{i\pi}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7Bi%5Cpi%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{i\pi}"/> and not <img alt="e^{-i\pi}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B-i%5Cpi%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{-i\pi}"/> since <img alt="-1" class="latex" src="http://s0.wp.com/latex.php?latex=-1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="-1"/> "in the wild" means <img alt="e^{i\pi}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7Bi%5Cpi%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{i\pi}"/> in the standard branch. Of course one can specify this by hand if it is not the desired choice.] Hence for <img alt="|x| &gt; 1" class="latex" src="http://s0.wp.com/latex.php?latex=%7Cx%7C+%3E+1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="|x| &gt; 1"/>, the integrand is <img alt="\frac{F\left(\frac{-1}{x^2} \right)}{x \sqrt{e^{i \pi}x^2} } = \frac{F\left(\frac{-1}{x^2} \right)}{x^2 e^{i \pi/2}} = \frac{-i}{x^2 \sqrt{1 - \frac{1}{x^2}}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7BF%5Cleft%28%5Cfrac%7B-1%7D%7Bx%5E2%7D+%5Cright%29%7D%7Bx+%5Csqrt%7Be%5E%7Bi+%5Cpi%7Dx%5E2%7D+%7D+%3D+%5Cfrac%7BF%5Cleft%28%5Cfrac%7B-1%7D%7Bx%5E2%7D+%5Cright%29%7D%7Bx%5E2+e%5E%7Bi+%5Cpi%2F2%7D%7D+%3D+%5Cfrac%7B-i%7D%7Bx%5E2+%5Csqrt%7B1+-+%5Cfrac%7B1%7D%7Bx%5E2%7D%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\frac{F\left(\frac{-1}{x^2} \right)}{x \sqrt{e^{i \pi}x^2} } = \frac{F\left(\frac{-1}{x^2} \right)}{x^2 e^{i \pi/2}} = \frac{-i}{x^2 \sqrt{1 - \frac{1}{x^2}}}"/> (Recall that in the first term the the square root means the continuous function on <img alt="\mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S}"/>, and so the second term is the same as the first. In the third term the square root denotes the principal branch, which is continuous throughout <img alt="|x|&gt;1" class="latex" src="http://s0.wp.com/latex.php?latex=%7Cx%7C%3E1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="|x|&gt;1"/> as well.)</p>
<p>Finally, for <img alt="|x| &lt; 1" class="latex" src="http://s0.wp.com/latex.php?latex=%7Cx%7C+%3C+1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="|x| &lt; 1"/>, the derivative of <img alt="\arcsin{x}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Carcsin%7Bx%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\arcsin{x}"/> is <img alt="\frac{1}{\sqrt{1 - x^2}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7B1+-+x%5E2%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\frac{1}{\sqrt{1 - x^2}}"/>, again with the principal branch of the square root (for the same reason as before: continue analytically on circles from the real-valued function). Thus lo and behold, if we differentiate <img alt="i\arcsin{\frac{1}{x}}" class="latex" src="http://s0.wp.com/latex.php?latex=i%5Carcsin%7B%5Cfrac%7B1%7D%7Bx%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="i\arcsin{\frac{1}{x}}"/> for <img alt="|x| &gt; 1" class="latex" src="http://s0.wp.com/latex.php?latex=%7Cx%7C+%3E+1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="|x| &gt; 1"/>, we do get out the right sign. As a side note, if we replace <img alt="-x^2" class="latex" src="http://s0.wp.com/latex.php?latex=-x%5E2&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="-x^2"/> in the integrand by <img alt="e^{-i\pi}x^2" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B-i%5Cpi%7Dx%5E2&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{-i\pi}x^2"/>, we get the other sign.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/317/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/317/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/317/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/317/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/317/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/317/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/317/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/317/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/317/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/317/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/317/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/317/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/317/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/317/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=317&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-07-22T13:43:53Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>nessgrh</name>
    </author>
    <source>
      <id>http://nessgrh.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://nessgrh.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://nessgrh.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://nessgrh.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://nessgrh.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My GSoC Project</subtitle>
      <title>nessgrh</title>
      <updated>2011-12-04T20:40:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sympystats.wordpress.com/?p=193</id>
    <link href="http://sympystats.wordpress.com/2011/07/19/multivariate-normal-random-variables/" rel="alternate" type="text/html"/>
    <title>Multivariate Normal Random Variables</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Multivariate Normal Random Variables are extraordinarily convenient. The probability density of a multivariate normal random variable is proportional to the following: Where is an n-dimensional state vector, is the mean of the distribution, and is an n by n covariance … <a href="http://sympystats.wordpress.com/2011/07/19/multivariate-normal-random-variables/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=193&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Multivariate Normal Random Variables are extraordinarily convenient.</p>
<p>The probability density of a multivariate normal random variable is proportional to the following:</p>
<p><img alt="f(X) = e^{ \left(- \mu + X\right)^T \Sigma^{-1} \left(- \mu + X\right)} " class="latex" src="http://s0.wp.com/latex.php?latex=f%28X%29+%3D+e%5E%7B+%5Cleft%28-+%5Cmu+%2B+X%5Cright%29%5ET+%5CSigma%5E%7B-1%7D+%5Cleft%28-+%5Cmu+%2B+X%5Cright%29%7D+&amp;bg=ffffff&amp;fg=333333&amp;s=3" title="f(X) = e^{ \left(- \mu + X\right)^T \Sigma^{-1} \left(- \mu + X\right)} "/></p>
<p>Where <img alt="X" class="latex" src="http://s0.wp.com/latex.php?latex=X&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="X"/> is an n-dimensional state vector, <img alt="\mu" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmu&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mu"/> is the mean of the distribution, and <img alt="\Sigma" class="latex" src="http://s0.wp.com/latex.php?latex=%5CSigma&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Sigma"/> is an n by n covariance matrix. Pictorally a 2-D density might be represented like this:</p>
<p style="text-align: center;"><a href="http://sympystats.files.wordpress.com/2011/07/mvn.png"><img alt="" class="aligncenter size-full wp-image-195" height="320" src="http://sympystats.files.wordpress.com/2011/07/mvn.png?w=448&amp;h=320" title="mvn" width="448"/></a>With contour lines showing decreasing probability levels dropping off around the mean (blue x). This distribution is entirely defined by the two quantities, <img alt="\mu" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmu&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mu"/> which gives the center of the distribution and <img alt="\Sigma" class="latex" src="http://s0.wp.com/latex.php?latex=%5CSigma&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Sigma"/> which effectively gives the shape of the ellipses. That is, rather than carry around the functional form above, we can simply define X as <img alt="X \sim N(\mu, \Sigma)" class="latex" src="http://s0.wp.com/latex.php?latex=X+%5Csim+N%28%5Cmu%2C+%5CSigma%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="X \sim N(\mu, \Sigma)"/> and forget the rest.</p>
<p>Multivariate normals are convenient for three reasons</p>
<ol>
<li>They are easy to represent – we only need a mean and covariance matrix</li>
<li>Linear transformations of normals are again normals</li>
<li>All operations are represented with linear algebra</li>
</ol>
<p>First off, multivariate normals are simple to represent. This ends up being a big deal for functions on very high dimensional spaces. Imagine writing down a general function on 1000 variables.</p>
<p>Second, linear functions of normals are again normals. This is huge. For example this means that we could project the image above to one of the coordinate axes (or any axis) and get out our old friend the bell curve. As we work on our random variables the three conveniences remain true.</p>
<p><a href="http://sympystats.files.wordpress.com/2011/07/bell_curve.gif"><img alt="" class="aligncenter size-medium wp-image-196" height="169" src="http://sympystats.files.wordpress.com/2011/07/bell_curve.gif?w=300&amp;h=169" title="bell_curve" width="300"/></a></p>
<p>Third, the computation to perform these linear transformations of random variables is done solely through linear algebra on the mean and covariance matrices. Fortunately, linear algebra is something about which we know quite a bit.</p>
<p>So, as long as we’re willing to say that our variables are normally distributed (which is often not far from the truth) we can efficiently represent and compute on huge spaces of interconnected variables.</p>
<hr/>
<p>Multivariate Normals (MVNs) have been a goal of mine for some time while working on this project. They’re where this project starts to intersect with my actual work. I do lots of manipulations on MVNs and would like to stop dealing with all the matrix algebra.</p>
<p>In order to build them correctly it was clear I would need a relatively powerful symbolic matrix expression system. I’ve been working on something over at <a href="https://github.com/mrocklin/sympy/tree/matrix_expr/sympy/matrices">this branch</a>.</p>
<p>Now we can represent symbolic matrices and, using them, represent MVN Random Variables</p>
<pre class="brush: python;"># Lets make a Multivariate Normal Random Variable
&gt;&gt;&gt; mu = MatrixSymbol('mu', n, 1) # n by 1 mean vector
&gt;&gt;&gt; Sigma = MatrixSymbol('Sigma', n, n) # n by n covariance matrix
&gt;&gt;&gt; X = Normal(mu, Sigma, 'X') # a multivariate normal random variable

# Density is represented just by the mean and covariance
&gt;&gt;&gt; Density(X)
(μ, Σ)

&gt;&gt;&gt; H = MatrixSymbol('H', k, n) # A linear operator
&gt;&gt;&gt; Density(H*X) # What is the density of X after being transformed by H?
(H⋅μ, H⋅Σ⋅H')

# Lets make some measurement noise
&gt;&gt;&gt; zerok = ZeroMatrix(k, 1) # mean zero
&gt;&gt;&gt; R = MatrixSymbol('R', k, k) # symbolic covariance matrix
&gt;&gt;&gt; noise = Normal(zerok, R, 'eta')

# Density after noise added in?
&gt;&gt;&gt; Density(H*X + noise) # This is a Block matrix
⎛[H  I]⋅⎡μ⎤, [H  I]⋅⎡Σ  0⎤⋅⎡H'⎤⎞
⎜       ⎢ ⎥        ⎢    ⎥ ⎢  ⎥⎟
⎝       ⎣0⎦        ⎣0  R⎦ ⎣I ⎦⎠

# When we collapse the above expression it looks much nicer
&gt;&gt;&gt; block_collapse(Density(H*X + noise))
(H⋅μ, R + H⋅Σ⋅H')

# Now lets imagine that we observe some value of HX+noise,
# what does that tell us about X? How does our prior distribution change?
&gt;&gt;&gt; data = MatrixSymbol('data', k, 1)
&gt;&gt;&gt; Density(X ,  Eq(H*X+noise, data)  ) # Density of X given  HX+noise==data
# I'm switching to the latex printer for this
</pre>
<p><img alt="\left[\begin{smallmatrix}\mathbb{I} &amp; \bold{0}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}\Sigma &amp; \bold{0}\\\bold{0} &amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}H &amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\Sigma &amp; \bold{0}\\\bold{0} &amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right]\right)^{-1} \left( \left[\begin{smallmatrix}H &amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\mu\\\bold{0}\end{smallmatrix}\right] - data\right) + \left[\begin{smallmatrix}\mu\\\bold{0}\end{smallmatrix}\right]\right)  " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5Cmathbb%7BI%7D+%26+%5Cbold%7B0%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%28%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5CSigma+%26+%5Cbold%7B0%7D%5C%5C%5Cbold%7B0%7D+%26+R%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH%5ET%5C%5C%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%28%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH+%26+%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5CSigma+%26+%5Cbold%7B0%7D%5C%5C%5Cbold%7B0%7D+%26+R%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH%5ET%5C%5C%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D%5Cright%29%5E%7B-1%7D+%5Cleft%28+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH+%26+%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5Cmu%5C%5C%5Cbold%7B0%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+-+data%5Cright%29+%2B+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5Cmu%5C%5C%5Cbold%7B0%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D%5Cright%29++&amp;bg=ffffff&amp;fg=333333&amp;s=2" title="\left[\begin{smallmatrix}\mathbb{I} &amp; \bold{0}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}\Sigma &amp; \bold{0}\\\bold{0} &amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}H &amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\Sigma &amp; \bold{0}\\\bold{0} &amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right]\right)^{-1} \left( \left[\begin{smallmatrix}H &amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\mu\\\bold{0}\end{smallmatrix}\right] - data\right) + \left[\begin{smallmatrix}\mu\\\bold{0}\end{smallmatrix}\right]\right)  "/></p>
<p><img alt="\left[\begin{smallmatrix}\mathbb{I} &amp; \bold{0}\end{smallmatrix}\right] \left(\mathbb{I} - \left[\begin{smallmatrix}\Sigma &amp; \bold{0}\\\bold{0} &amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}H &amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\Sigma &amp; \bold{0}\\\bold{0} &amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right]\right)^{-1} \left[\begin{smallmatrix}H &amp; \mathbb{I}\end{smallmatrix}\right]\right) \left[\begin{smallmatrix}\Sigma &amp; \bold{0}\\\bold{0} &amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}\mathbb{I}\\\bold{0}\end{smallmatrix}\right]  " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5Cmathbb%7BI%7D+%26+%5Cbold%7B0%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%28%5Cmathbb%7BI%7D+-+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5CSigma+%26+%5Cbold%7B0%7D%5C%5C%5Cbold%7B0%7D+%26+R%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH%5ET%5C%5C%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%28%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH+%26+%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5CSigma+%26+%5Cbold%7B0%7D%5C%5C%5Cbold%7B0%7D+%26+R%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH%5ET%5C%5C%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D%5Cright%29%5E%7B-1%7D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH+%26+%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D%5Cright%29+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5CSigma+%26+%5Cbold%7B0%7D%5C%5C%5Cbold%7B0%7D+%26+R%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5Cmathbb%7BI%7D%5C%5C%5Cbold%7B0%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D++&amp;bg=ffffff&amp;fg=333333&amp;s=2" title="\left[\begin{smallmatrix}\mathbb{I} &amp; \bold{0}\end{smallmatrix}\right] \left(\mathbb{I} - \left[\begin{smallmatrix}\Sigma &amp; \bold{0}\\\bold{0} &amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}H &amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\Sigma &amp; \bold{0}\\\bold{0} &amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right]\right)^{-1} \left[\begin{smallmatrix}H &amp; \mathbb{I}\end{smallmatrix}\right]\right) \left[\begin{smallmatrix}\Sigma &amp; \bold{0}\\\bold{0} &amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}\mathbb{I}\\\bold{0}\end{smallmatrix}\right]  "/></p>
<pre class="brush: python;"># Again, this block matrix expression can be collapsed to the following
&gt;&gt;&gt; block_collapse(Density(X, Eq(H*X+noise, data) ))
μ + Σ⋅H'⋅(R + H⋅Σ⋅H')^-1⋅(-H⋅μ + -data) ,
(I + -Σ⋅H'⋅(R + H⋅Σ⋅H')^-1⋅H)⋅Σ
</pre>
<p><img alt="\begin{smallmatrix}\mu + \Sigma H^T \left(R + H \Sigma H^T\right)^{-1} \left(  H \mu - data\right)\end{smallmatrix} " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbegin%7Bsmallmatrix%7D%5Cmu+%2B+%5CSigma+H%5ET+%5Cleft%28R+%2B+H+%5CSigma+H%5ET%5Cright%29%5E%7B-1%7D+%5Cleft%28++H+%5Cmu+-+data%5Cright%29%5Cend%7Bsmallmatrix%7D+&amp;bg=ffffff&amp;fg=333333&amp;s=2" title="\begin{smallmatrix}\mu + \Sigma H^T \left(R + H \Sigma H^T\right)^{-1} \left(  H \mu - data\right)\end{smallmatrix} "/></p>
<p><img alt="\begin{smallmatrix}\left(\mathbb{I} - \Sigma H^T \left(R + H \Sigma H^T\right)^{-1} H\right) \Sigma\end{smallmatrix} " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbegin%7Bsmallmatrix%7D%5Cleft%28%5Cmathbb%7BI%7D+-+%5CSigma+H%5ET+%5Cleft%28R+%2B+H+%5CSigma+H%5ET%5Cright%29%5E%7B-1%7D+H%5Cright%29+%5CSigma%5Cend%7Bsmallmatrix%7D+&amp;bg=ffffff&amp;fg=333333&amp;s=2" title="\begin{smallmatrix}\left(\mathbb{I} - \Sigma H^T \left(R + H \Sigma H^T\right)^{-1} H\right) \Sigma\end{smallmatrix} "/></p>
<p>This is the multivariate case of my <a href="http://sympystats.wordpress.com/2011/07/02/a-lesson-in-data-assimilation-using-sympy/">previous post on data assimilation</a>. Effectively all I’ve done here is baked in the logic behind the<a href="http://en.wikipedia.org/wiki/Kalman_filter"> Kalman Filter</a> and exposed it through my statistics operators Density, Given, etc… so that it has become more approachable.</p>
<p>Some disclaimers.<br/>
1) This is all untested. Please let me know if something is wrong. Already I see an error with the latex printing.<br/>
2) For organizational reasons it seems unlikely that Matrix Expressions will make it into SymPy in their current form. As a result this code probably won’t make it into SymPy any time soon.</p>
<p>My active branch is over here:<br/>
<a href="https://github.com/mrocklin/sympy/tree/mvn_rv/">https://github.com/mrocklin/sympy/tree/mvn_rv/</a></p>
<p>with the multivariate normal code here:<br/>
<a href="https://github.com/mrocklin/sympy/tree/mvn_rv/sympy/statistics/mvnrv.py">https://github.com/mrocklin/sympy/tree/mvn_rv/sympy/statistics/mvnrv.py</a></p>
<p>The matrices live here:<br/>
<a href="https://github.com/mrocklin/sympy/tree/matrix_expr/sympy/matrices">https://github.com/mrocklin/sympy/tree/matrix_expr/sympy/matrices</a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/193/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/193/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/193/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=193&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-07-19T23:59:14Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>mrocklin</name>
    </author>
    <source>
      <id>http://sympystats.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sympystats.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sympystats.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sympystats.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sympystats.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>sympy-stats</title>
      <updated>2011-12-04T20:40:15Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://lazovichsympy.wordpress.com/?p=76</id>
    <link href="http://lazovichsympy.wordpress.com/2011/07/19/summarizing-the-changes-in-represent/" rel="alternate" type="text/html"/>
    <title>Summarizing the changes in represent</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As the pending pull request gets closer to being merged, I thought it might be helpful to myself and others interested in the code if I summarized the changes that I have made to the code in represent.py. Hopefully people can use this post as a reference as they start digging into that portion of [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;blog=22774068&amp;post=76&amp;subd=lazovichsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As the pending pull request gets closer to being merged, I thought it might be helpful to myself and others interested in the code if I summarized the changes that I have made to the code in represent.py. Hopefully people can use this post as a reference as they start digging into that portion of the code in reviewing the PR.</p>
<p>Represent has behavior to handle almost any kind of expression, from Add, TensorProduct, or Mul to the basic QExpr. Most of the more complicated types of expressions, like Add, recursively call represent on smaller atoms of the expression, hoping to ultimately get to a single QExpr, which is a sort of termination point in the recursion. The logic for handling a single QExpr is what I mainly modified in my work. Previously, the QExpr handling was a simple attempt to call expr._represent. Now, however, the following sequence occurs:</p>
<ul>
<li>First, call get_basis. This function exists to unify different ways of calling represent. Whether represent is called with an operator or state class/instance as the basis in options, get_basis will examine this and try to return a state instance. At this point, the replace_none option is set to False. This is in place because represent_default_basis will only be called from expr._represent if there is no basis specified. Since the basis that get_basis returns may not be the one called by represent_default_basis, we want to make sure that if the basis in options is None, represent_default_basis gets called.</li>
<li>After setting the basis appropriately, call expr._represent. If this is successful, return the result</li>
<li>If a NotImplementedError (NIE) is raised, we set the replace_none option to True so that any future calls to get_basis will actually fill a basis into the options. At this point, any attempted call to represent_default_basis has failed, so we should now try representing in a basis state that we know.</li>
<li>If the passed QExpr is a Ket or Bra, we then call rep_innerproduct, which will return an innerproduct (&lt;x’|x&gt;) type representation for the given Ket</li>
<li>If the passed QExpr is an Operator, we call rep_expectation, which will return an expectation value like representation (&lt;x’ | A | x&gt;) for the given Operator</li>
</ul>
<p>In addition to QExpr handling, there were some additions to the processing of Muls. Originally, represent is called on each arg of the Mul individually. While this still happens, there is code added to keep track of the unities that have been inserted and the current index that should be being appended to dummy kets. Details of where the unities are inserted are in <a href="http://lazovichsympy.wordpress.com/2011/06/17/representing-arbitrary-quantum-expressions-in-sympy/" title="this">this</a> previous blog post.</p>
<p>Finally, before the result is returned, integrate_result is now called as well. If the expression passed to it is an Expr (presumably a continuous result), then it integrates over any unities (e.g. |x_1&gt;&lt;x_1|) which were inserted into the quantum expression. This collapses some of the Delta functions that were originally in the expression.</p>
<p>To see the latest represent, check out the version in my branch <a href="https://github.com/lazovich/sympy/blob/represent/sympy/physics/quantum/represent.py" title="here">here</a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/lazovichsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/lazovichsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/lazovichsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/lazovichsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/lazovichsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/lazovichsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/lazovichsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/lazovichsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/lazovichsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/lazovichsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/lazovichsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/lazovichsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/lazovichsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/lazovichsympy.wordpress.com/76/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;blog=22774068&amp;post=76&amp;subd=lazovichsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-07-19T23:52:41Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>lazovich</name>
    </author>
    <source>
      <id>http://lazovichsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://lazovichsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://lazovichsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://lazovichsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://lazovichsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My adventures during GSoC 2011</subtitle>
      <title>Tomo Lazovich's SymPy Blog</title>
      <updated>2011-12-04T20:40:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sympystats.wordpress.com/?p=200</id>
    <link href="http://sympystats.wordpress.com/2011/07/19/matrix-expressions/" rel="alternate" type="text/html"/>
    <title>Matrix Expressions</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Linear algebra is important. It is a language which both humans and computers understand well which we can use to describe a large class of important problems. Linear Algebra is an alternative approach to communicate with computers – alternative to … <a href="http://sympystats.wordpress.com/2011/07/19/matrix-expressions/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=200&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Linear algebra is important. It is a language which both humans and computers understand well which we can use to describe a large class of important problems. Linear Algebra is an alternative approach to communicate with computers – alternative to writing code.</p>
<p>Matrices are used in a number of contexts and, understandably, SymPy represents them in a few ways. You can represent a matrix or linear operator with a Symbol or you can write out a matrix’s components explicitly with a Matrix object. Thanks to recent work by Sherjil <a href="http://sherjilozair.wordpress.com/">over here</a>, Matrix objects are quickly becoming more powerful.</p>
<p>Recently I’ve wanted to build up purely symbolic matrix expressions using Symbol but kept running into problems because I didn’t want to add things to the SymPy core Expr that were specific to matrices.  The standard SymPy Expr wasn’t really designed with Matrices in mind and I found that this was holding me back a bit.</p>
<p>I decided to branch off a MatrixExpr class that, while much less stable, is open to experimentation. It’s been lots of fun so far. I’ve used it for my GSoC project to build up large expressions using block matrices.</p>
<p>I’ll have examples in a future post related to my GSoC project. For now if you’d like to check it out my code resides here:</p>
<p><a href="https://github.com/mrocklin/sympy/tree/matrix_expr/sympy/matrices">https://github.com/mrocklin/sympy/tree/matrix_expr/sympy/matrices</a></p>
<p>There is a MatrixExpr class with associated MatrixSymbol, MatAdd, MatMul, MatPow, Inverse, Transpose, Identity, ZeroMatrix objects. All the things you need for basic expressions. Most of the logic still depends on the subclassed Add, Mul, Pow classes with a little bit added on.</p>
<p>Also, because my GSoC project needed it I built a fun BlockMatrix class that holds MatrixExpr’s and can be freely mixed with normal MatrixExprs in an expression.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/200/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/200/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=200&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-07-19T23:12:43Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>mrocklin</name>
    </author>
    <source>
      <id>http://sympystats.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sympystats.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sympystats.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sympystats.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sympystats.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>sympy-stats</title>
      <updated>2011-12-04T20:40:15Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sherjilozair.wordpress.com/?p=77</id>
    <link href="http://sherjilozair.wordpress.com/2011/07/18/writing-tests/" rel="alternate" type="text/html"/>
    <title>Writing tests</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I have been conceptualizing and writing a test file for the three internal matrices. Doing that involves thinking what all functions should the matrices support. My approach is to write the tests before I make the tests work. I will write a complete test file, get it approved, edited by the community and then proceed to edit [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sherjilozair.wordpress.com&amp;blog=14711170&amp;post=77&amp;subd=sherjilozair&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have been conceptualizing and writing a test file for the three internal matrices. Doing that involves thinking what all functions should the matrices support. My approach is to write the tests before I make the tests work. I will write a complete test file, get it approved, edited by the community and then proceed to edit the class files to make the tests pass.</p>
<p>I’m currently on a week long vacation with my family, so I’m not doing much work. I plan to pick up speed when I return on the 24th.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sherjilozair.wordpress.com/77/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sherjilozair.wordpress.com/77/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/sherjilozair.wordpress.com/77/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/sherjilozair.wordpress.com/77/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/sherjilozair.wordpress.com/77/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/sherjilozair.wordpress.com/77/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/sherjilozair.wordpress.com/77/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/sherjilozair.wordpress.com/77/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/sherjilozair.wordpress.com/77/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/sherjilozair.wordpress.com/77/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/sherjilozair.wordpress.com/77/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/sherjilozair.wordpress.com/77/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/sherjilozair.wordpress.com/77/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/sherjilozair.wordpress.com/77/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sherjilozair.wordpress.com&amp;blog=14711170&amp;post=77&amp;subd=sherjilozair&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-07-17T21:24:34Z</updated>
    <category term="Sympy"/>
    <author>
      <name>Sherjil Ozair</name>
    </author>
    <source>
      <id>http://sherjilozair.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sherjilozair.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sherjilozair.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sherjilozair.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sherjilozair.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>Sherjil Ozair</title>
      <updated>2011-12-04T20:40:14Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=965</id>
    <link href="http://asmeurersympy.wordpress.com/2011/07/17/the-scipy-2011-conference/" rel="alternate" type="text/html"/>
    <title>The SciPy 2011 Conference</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So this past week, I attended the SciPy 2011 conference in Austin, TX, which was my first conference ever. Here are some highlights of the conference for me: I met a ton of cool people. This included meeting several people who I had previously known from mailing lists in person for the first time. I [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=965&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So this past week, I attended the SciPy 2011 conference in Austin, TX, which was my first conference ever.  Here are some highlights of the conference for me:</p>
<ul>
<li>I met a <em>ton</em> of cool people.  This included meeting several people who I had previously known from mailing lists in person for the first time.  I met the SymPy developers Mateusz Paprocki and Andy Terrel, and I also had already known or heard about people like Fernando Perez, Gael Varoquaux, and Robert Kern.  There are a lot of people out there who are excited to be using Python for their research, which is a real refresher from my university, where everyone is using Matlab and Maple.</li>
<li>Mateusz and I gave a tutorial on SymPy.  This was one of the four introductory track tutorials.  This was a great experience to teach SymPy to people.  You can see the <a href="http://mattpap.github.com/scipy-2011-tutorial/html/index.html">Sphinx document</a> that we used, and there should eventually be a video posted at the <a href="http://conference.scipy.org/scipy2011/tutorials.php#mateusz">SciPy 2011 website</a>.</li>
<li>In addition to our tutorial, I attended some of the other tutorials.  I particularly enjoyed the NumPy tutorial. Having never used NumPy before, I now feel comfortable with the basics.  I also attended Gael Varoquaux’s tutorial on scikits.learn and Corran Webster’s tutorial on Matplotlib, Traits, and Chaco. My only regret is that the advanced track and introductory track tutorials were held at the same time, so I could not attend half of them.  I plan to watch the ones I missed online.</li>
<li>The general conference was excellent.  Some of the talks that I particularly enjoyed were:
<ul>
<li>The keynotes.  I found Eric Jone’s keynote particularly relevant as the leader of SymPy, as he talked about some of the good things to do and bad things to not do when leading a scientific project.  I also enjoyed Perry Greenfield’s talk about how the astronomy community moved from some old proprietary system to Python.</li>
<li>Mateusz gave a talk on his <a href="http://lab.femhub.org/">FEMhub online lab</a>, which a was very impressive system for using Python entirely in the web browser.</li>
<li>By far the best talk of the entire conference was Fernando Perez’s talk on the new IPython 0.11, which will be coming out in about a week or so.  His demo of the new features such as the QT console and html notebook were very impressive.  If you want to watch just one video from the conference, I would recommend that one.</li>
<li>Mark Dewing gave a talk about a system he wrote using SymPy to do automated derivation of equations.  The system is impressive, and contains some features that would be nice to backport to SymPy.  He told me that he wants to do this, so follow the mailing list.  You can see what he has so far on his <a href="https://github.com/markdewing/sympy/tree/derivation_modeling">derivation_modeling</a> branch at GitHub.</li>
<li>The lightning talks.  These are very short talks at the end of the conference that are only five minutes long.  In addition to many interesting talks, both Mateusz and I gave a lightning talk. Mateusz gave a talk on <a href="http://live.sympy.org/">SymPy Live</a>, which he recently improved to do things like give LaTeX output, and I gave a talk on my work with the Risch algorithm.  I would also highly recommend watch this talk once they post the videos.</li>
<li>Again, regrettably, I could not attend half of the talks because they were held at the same time.  Fortunately, they filmed all of them, so I hope to watch them all online when they are posted (and I recommend that you do too).</li>
</ul>
</li>
<li>The sprints were a great time for getting together and hacking together.  I worked with Min Ragan-Kelley to make isympy work with the new IPython.  Having fixed this, I now want to release 0.7.1 very soon, so I used some of the time during the sprints getting ready for that.  We already have <a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.1">preliminary release notes</a>, and my hope is to create a release candidate on Monday (tomorrow).  I also finished up my <a href="https://github.com/sympy/sympy/pull/491">MathJax branch</a> and finished reviewing and pushed in Tom’s first GSoC pull request, which has a lot of really cool stuff relating to converting hypergeometric functions and Meijer G-functions into standard elementary functions.  This will all be in the release.
<p>Also at the sprints, Mateusz worked on an extension for our Sphinx docs that puts a SymPy Live console right in the docs.  You can then click on “evaluate” next to any of the code examples, and it will run it in SymPy live.  And of course, you can then edit it and play around with it.  He already had a working version of this by the end of the sprints (with a few bugs still), but I don’t think he has pushed it to GitHub yet.  I think this is going to be a landmark change for our documentation.  SymPy Live runs on the App Engine, so this approach can be applied to any library that can run in pure Python 2.5, and I think a lot of such projects are going to be jealous this and want to start using it, because it’s very impressive and useful.</p>
<p>We also had a couple of people from the conference come to our table and work on SymPy.  These were people who were new to SymPy, and I think attended our tutorial.  One of them, Emma Hogan, worked a little bit on improving our documentation, and has submitted a <a href="https://github.com/sympy/sympy/pull/490">pull request</a>.
</p></li>
<li>Austin, TX is a nice city with lots of fun places to go, but it is also very humid, which is something I could barely stand (I am used to the same heat, but in Albuquerque it is dry heat).  One interesting thing that some of us went and saw was the bats.  The bridge over this lake in Austin has over a million bats living under it, and at night they all fly out to feed.  </li>
</ul>
<p>There’s all kinds of fun and interesting stuff that happened that I did not mention here.  If you are interested in science and Python, I would highly recommend attending a future SciPy conference.  </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/965/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/965/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/965/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/965/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/965/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/965/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/965/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/965/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/965/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/965/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/965/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/965/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/965/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/965/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=965&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-07-17T16:32:31Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-12-04T20:40:07Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://lazovichsympy.wordpress.com/?p=73</id>
    <link href="http://lazovichsympy.wordpress.com/2011/07/16/a-week-of-cleanup/" rel="alternate" type="text/html"/>
    <title>A week of cleanup</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week was cut short by storms in the Midwest again. I lost power and internet from Monday until Wednesday, so I was stuck trying to find local cafes that still had power and also had internet. I did manage to have a very productive conversation with Brian about things that should still be cleaned [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;blog=22774068&amp;post=73&amp;subd=lazovichsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week was cut short by storms in the Midwest again. I lost power and internet from Monday until Wednesday, so I was stuck trying to find local cafes that still had power and also had internet. I did manage to have a very productive conversation with Brian about things that should still be cleaned up. I will post a more detailed description of the changes once I’ve finished the todo list we came up with, but for right now, some general themes that I’ve been working on include:</p>
<ul>
<li>Docstring cleanup throughout the PR: as this is my first time working with Sympy, I’m still figuring out how to write good docs that conform to the standards throughout the code base. As such, alot of work will go into writing better descriptions and examples, as well as cleaning up the formatting.</li>
<li>More test coverage: There are many tests that have been added, but its time to start thinking more generally and come up with more complicated tests. Examples of tests that were added include support for Bras in the operator &lt;-&gt; state mapping as well as testing multi-dimensional Lapalacians in DifferentialOperator.</li>
<li>API streamlining: the API for DifferentialOperator described in my last post was a bit cludgy, so we’ve now reduced it to be just the general expression form. This might be more verbose, but it also simplifies the internal code quite a bit. In Wavefunction, I’ve cleaned up the normalization a bit, as well as adding a normalize() function which will return a normalized Wavefunction. Things like _eval_dagger and _eval_conjugate are defined now as well.</li>
</ul>
<p>These changes were mainly to operatorset.py, Wavefunction, and DifferentialOperator. You can see some commits <a href="https://github.com/lazovich/sympy/commit/4e8fbb719204cbb386d177de830a2bc730c23a84" title="here">here</a>, <a href="https://github.com/lazovich/sympy/commit/1bd546d6f025e338ef94cb51759cb05aa60514f9" title="here">here</a>, and <a href="https://github.com/lazovich/sympy/commit/78433ab1eb4c8de9e1a2e0ae30e7193402b56284" title="here">here</a>. There’s still a bit left to do, mostly with docstrings and test coverage, and I will talk more about this later. This week was also the GSoC midterm evaluation, so I will try to post a summary of the first half and the changes that I have made as well.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/lazovichsympy.wordpress.com/73/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/lazovichsympy.wordpress.com/73/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/lazovichsympy.wordpress.com/73/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/lazovichsympy.wordpress.com/73/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/lazovichsympy.wordpress.com/73/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/lazovichsympy.wordpress.com/73/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/lazovichsympy.wordpress.com/73/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/lazovichsympy.wordpress.com/73/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/lazovichsympy.wordpress.com/73/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/lazovichsympy.wordpress.com/73/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/lazovichsympy.wordpress.com/73/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/lazovichsympy.wordpress.com/73/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/lazovichsympy.wordpress.com/73/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/lazovichsympy.wordpress.com/73/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;blog=22774068&amp;post=73&amp;subd=lazovichsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-07-17T01:30:19Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>lazovich</name>
    </author>
    <source>
      <id>http://lazovichsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://lazovichsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://lazovichsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://lazovichsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://lazovichsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My adventures during GSoC 2011</subtitle>
      <title>Tomo Lazovich's SymPy Blog</title>
      <updated>2011-12-04T20:40:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://gilbertgede.wordpress.com/?p=65</id>
    <link href="http://gilbertgede.wordpress.com/2011/07/16/gsoc-week-8/" rel="alternate" type="text/html"/>
    <title>GSoC, Week 8</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I don’t have as much to talk about this week, as I spent two days in travel. Mostly, I worked on the sphinx documentation for mechanics. I am continuing with the previous organization of the documentation: first the mathematical descriptions, then the SymPy implementations. I’m still not convinced that this is the best way to [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=65&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I don’t have as much to talk about this week, as I spent two days in travel. Mostly, I worked on the sphinx documentation for mechanics. I am continuing with the previous organization of the documentation: first the mathematical descriptions, then the SymPy implementations. I’m still not convinced that this is the best way to do things, but at the moment, at least the subsubmodule’s documentation is consistent. Also, there will most likely be changes to the code, probably relating to the switch to using Brian Granger’s functional derivative branch and the different printing. I’m also trying to use the same examples in both the mathematical sections and in the code sections. I think this is the most logical approach, and if I choose to rearrange the documentation, I won’t have to rewrite much. This is all in my ‘pydy’ branch.</p>
<p>The other thing I am working on is forming the equations of motion for the bicycle. Right now they are being computed, but I’m not sure of the accuracy. There are already tests in place for holonomic systems, but non for non-holonomic systems (for reference: http://en.wikipedia.org/wiki/Nonholonomic_system). Unfortunately, the equations for non-holonomic systems get very, very big. In our lab, with the bicycle, we form our equations, linearize them, substitute in the system parameters, and examine the eigenvalues in order to validate our equations. I’m currently using my SymPy code to do this with the bicycle model, but am encountering some difficulties. I’ve got the mass matrix and forcing terms solved for and linearized, and the udots have a solution, in the form udot = A x, where x = [q2,q4,q5,u2,u3,u5,u1,u4,u6].T . What should happen next is that the relevant entries from this matrix are extracted, as our final state is [u2,u5,q2,q5] (this is lean rate, steer rate, lean angle, steer angle), then a smaller matrix is constructed and the eigenvalues are examined. Now, I know that the eigenvalues are off already. Examining this “A” matrix though shows that some of the elements are correct, compared to a reference “A” matrix. It would appear that the partial derivative of the udots w.r.t. the lean angle and lean rate are correct, but are not right w.r.t. the steer angle and steer rate. I’m not sure how to interpret this, as it is showing that half of the correct numbers are there (and these are correct to ~13 significant digits when evaluated numerically), and the other half are wrong. I’m hoping that I have just performed the linearization wrong, or the order in which I have arranged my matrices is incorrect; I don’t see many other options.</p>
<p>The full equations come out in the form: MM udot = forcing, or the mass matrix multiplied by the time derivatives of the generalized speeds equals the forcing terms. MM is 6×6, and forcing is 6×1 (as is udot). What is done next is substitute in the current state into the mass matrix, find the jacobian of the forcing vector w.r.t. the vector x (from above), and substitute in the numerical values. Next, udot is found by performing MM.inv() * forcing (where forcing is now a 6×9 matrix). Since I am getting some of the correct values, it would appear that there are elements in both the MM and the forcing matrix which are correct. I’m going to continue to play around with things, as again, I feel that I am most likely assembling these things in the incorrect order. Hopefully this will prove successful though, and will provide a good, non-trivial example of what physics.mechanics can do.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/gilbertgede.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/gilbertgede.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/gilbertgede.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/gilbertgede.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/gilbertgede.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/gilbertgede.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/gilbertgede.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/gilbertgede.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/gilbertgede.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/gilbertgede.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/gilbertgede.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/gilbertgede.wordpress.com/65/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;blog=22677911&amp;post=65&amp;subd=gilbertgede&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-07-16T19:56:47Z</updated>
    <category term="GSoC 2011"/>
    <category term="PyDy"/>
    <category term="SymPy"/>
    <author>
      <name>gilbertgede</name>
    </author>
    <source>
      <id>http://gilbertgede.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://gilbertgede.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://gilbertgede.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://gilbertgede.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://gilbertgede.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>gilbertgede</title>
      <updated>2011-12-04T20:40:12Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8510171342300140296.post-8060045605525645513</id>
    <link href="http://seanvig.blogspot.com/feeds/8060045605525645513/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/07/developing-coupleduncoupled-states-and.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/8060045605525645513" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/8060045605525645513" rel="self" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/07/developing-coupleduncoupled-states-and.html" rel="alternate" type="text/html"/>
    <title>Developing coupled/uncoupled states and operators</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Most of this last week was spent developing coupled and uncoupled states, beginning to develop how operators will act on these states and writing tests to ensure the code returns the desired result. This week I finished up writing the code for expressing states, and the logic for rewriting from one to the other and back. In addition to this, I implemented the tests which are used for these rewrites. This mostly finishes up the logic for the coupled/uncoupled states, there is still the represent logic which may need to be implemented, tho this will take some looking into to determine what is appropriate and necessary to implement.<div><br/></div><div>For the operators, using the qapply logic already in place, I have begun to implement how operators act on coupled and uncoupled states. I have thus far only implemented logic for coupled operators, that is, for example Jz = Jz_1 + Jz_2(=Jz x 1 + 1 x Jz in an uncoupled representation). In addition to defining how uncoupled product states are acted upon by spin operators, I have expanded those already implemented methods to act on arbitrary states, as they had only previously been defined in how they act on JzKet's. This was done by defining a basis, such that, with the now improved rewrite logic, any state can be rewritten into an appropriate basis for the state and the state in then acted upon by the operator. I have begun to implement the tests that ensure the implemented logic is valid in all cases, both numerical and symbolic, tho this is still a work in progress.</div><div><br/></div><div>The focus for this next week will be continuing the development of the spin operators, hopefully getting to working with uncoupled spin operators, i.e. operators given in a tensor product to only act on one of the uncoulped states, and developing the tests necessary to the implementation of these states. If I can complete this, I will be closing in on the completion of the coupling of two spin spaces.</div><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8510171342300140296-8060045605525645513?l=seanvig.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-07-16T07:31:00Z</updated>
    <published>2011-07-16T07:31:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="GSoC"/>
    <author>
      <name>Sean Vig</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/18029750000026588134</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8510171342300140296</id>
      <category term="sympy"/>
      <category term="GSoC"/>
      <author>
        <name>Sean Vig</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/18029750000026588134</uri>
      </author>
      <link href="http://seanvig.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://seanvig.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Developing Wigner-3nj Symbols in SymPy</subtitle>
      <title>Sean Vig's 2011 GSoC Project</title>
      <updated>2011-11-28T05:58:52Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://nessgrh.wordpress.com/?p=300</id>
    <link href="http://nessgrh.wordpress.com/2011/07/16/status-update%e2%80%94week-8/" rel="alternate" type="text/html"/>
    <title>Status Update—Week 8</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Introduction So this week I finally extended the integration lookup tables to now include trigonomic, hyperbolic and exponential functions, certain algebraic functions, error functions, the logarithm, the error function, and various bessel functions. I also did some miscellaneous fixes and extensions which I might mention in passing. Furthermore I decided to create a “TODO later” [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=300&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h2>Introduction</h2>
<p>So this week I finally extended the integration lookup tables to now include trigonomic, hyperbolic and exponential functions, certain algebraic functions, error functions, the logarithm, the error function, and various bessel functions. I also did some miscellaneous fixes and extensions which I might mention in passing. Furthermore I decided to create a “TODO later” list: basically a list of things that I really really do want to fix, but that will not go into my first integrals pull request. For I have been working on this for so (comparatively) long, I feel I need to stabilise the branch. Indeed the only thing left to do before I subsmit it is a decent treatment of branched functions. After that I think progress can be incremential, and I will start working on the “TODO later” stuff in a gsoc-3 branch.</p>
<p>This post consists of three parts: the first shows results of this weeks work. The second describes some items on the “TODO later” list (to give an idea of what will be missing in the upcoming pull request). The third branch describes my ideas for polar numbers in detail, which I will start implementing tomorrow (I did not actually do any work today, instead I want to the Calypso Water park (near Ottawa). Hurray for flexible work hours.)</p>
<h2>Visible Results of the Extended Tables</h2>
<p>Basically now the code can solve the same sort of problems as before, just on many more classes of functions. One simple example is some <a href="http://pastebin.com/raw.php?i=qUR8AH1y">indefinite integration</a>. A few comments are in order. First of all, there is no use hiding that indefinite integration is hardly the strength of the algorithm. The examples show that it can be made to work in some situations, but basically any composition of functions or similar will stop it from working. (The same is true for definite integration, of course, but there nobody expects much more *g*.) We see in equations 4, 5, 7, 9 (sorry for the non-consecutive numbering) that integration of simple combinations of trigonometric and polynomial functions can be done, and can indeed be faster than existing code. Equations 12, 14, 15 show recursive mellin transforms in action, of course this gets much slower. Equations 18, 19, 20 and 38 show integration of bessel functions. Incidentially I could not verify the last by differentiation, so I will have to look into this again—before submitting the pull request, of course. Equations 40 and 41 illustrate integration of bessel functions. Equation 42 shows a slight shortcoming: the integral can be expressed using struve functions (I think), but they are just not in the table for expanding g-functions (and neither in sympy). Equation 43 shows a more serious limitation: the integral can be done using integration by parts, but the integrand is *not* a meijer g-function (mellin transform involves digamma functions), so this is not an integral the algorithm will be able to determine.</p>
<p>Let’s now look at some <a href="http://pastebin.com/raw.php?i=snLKLA60">definite integration</a>. There is not very much to say here, except that I show these integrals <em>because</em> they can be done. There are many more like them that can be done, and extremely many more like them that cannot be done. Some of these might look odd (23, 36); I will explain what is going on in the “TODO later” section.</p>
<h2>The “TODO Later” list</h2>
<p>One problem is that hyperexpand() sometimes is not very clever. For example in equation 28 of the definite integration examples, we see that apparently the integral cannot be done in named special functions. hyperexpand() retains the meijer g-function because the hypergeometric functions cannot be expanded; this is usually a good idea since a g-function expansion in hypergeometric functions can be very messy. However in this case the hypergeometric functions actually cancel! hyperexpand() note this and return the simplified result. However things are not quite so easy. Sometimes there is choice involved in what hypergeometric functions to expand into, and only some choices cancel. Moreover, sometimes the hypergeometric functions do not cancel, but instead can be evaluated at special arguments. Here are a few <a href="http://pastebin.com/raw.php?i=dH5pFZ4j">examples</a>. Equation 3 shows some non-obvious cancellation: the gammas have to be simplified, and then the symmetry of the arguments of the hypergeometric functions has to be used. Equation five shows an example that can be done because of the special argument, indeed 2F1 can always be summed at unity, using a theorem of Gauss’. Equation 7 shows something more complicated still, I know it can be done but I am not sure how (maybe using a so-called quadratic transformation). One side-effect of this shortcoming is that currently I have had to put formulae for e.g. <img alt="J_a(x) J_b(x)" class="latex" src="http://s0.wp.com/latex.php?latex=J_a%28x%29+J_b%28x%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="J_a(x) J_b(x)"/> into the table, even though they should be derivable (at a time cost, of course). This is a bad thing since it leads to an explosion of entries.</p>
<p>Another thing that should be fixed is that the convergence conditions for the integral of two g-functions are sometimes just too weak. For example none of the following can currently be done: <img alt="\int_0^\infty \sin{x} \cos{x} \frac{\mathrm{d}x}{\sqrt{x}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint_0%5E%5Cinfty+%5Csin%7Bx%7D+%5Ccos%7Bx%7D+%5Cfrac%7B%5Cmathrm%7Bd%7Dx%7D%7B%5Csqrt%7Bx%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\int_0^\infty \sin{x} \cos{x} \frac{\mathrm{d}x}{\sqrt{x}}"/>, <img alt="\int_0^\infty e^{-x} \sinh{\frac{x}{2}} \mathrm{d}x" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint_0%5E%5Cinfty+e%5E%7B-x%7D+%5Csinh%7B%5Cfrac%7Bx%7D%7B2%7D%7D+%5Cmathrm%7Bd%7Dx&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\int_0^\infty e^{-x} \sinh{\frac{x}{2}} \mathrm{d}x"/>, <img alt="\int_0^\infty e^{-x} \sinh{x} \frac{\mathrm{d}x}{x\sqrt{x}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint_0%5E%5Cinfty+e%5E%7B-x%7D+%5Csinh%7Bx%7D+%5Cfrac%7B%5Cmathrm%7Bd%7Dx%7D%7Bx%5Csqrt%7Bx%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\int_0^\infty e^{-x} \sinh{x} \frac{\mathrm{d}x}{x\sqrt{x}}"/>, <img alt="\int_0^\infty e^x H(1-x) \mathrm{d}x" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint_0%5E%5Cinfty+e%5Ex+H%281-x%29+%5Cmathrm%7Bd%7Dx&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\int_0^\infty e^x H(1-x) \mathrm{d}x"/>. This also stops the recursive algorithm from working.</p>
<p>Then the tables can and should of course be extended further. Notably missing currently are inverse trigonometric functions and powers of trigonometric/hyperbolic functions (though these should be derivable).</p>
<p>As another point, the code to transform an integrand and limits into a known form is not currently very clever. For example <img alt="\int_1^\infty \frac{\sin(zu)}{(u^2 - 1)^a} \mathrm{d}u" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint_1%5E%5Cinfty+%5Cfrac%7B%5Csin%28zu%29%7D%7B%28u%5E2+-+1%29%5Ea%7D+%5Cmathrm%7Bd%7Du&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\int_1^\infty \frac{\sin(zu)}{(u^2 - 1)^a} \mathrm{d}u"/> can be done by rewriting it as <img alt="\int_0^\infty H(u^2-1) \frac{\sin(zu)}{(u^2 - 1)^a} \mathrm{d}u" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint_0%5E%5Cinfty+H%28u%5E2-1%29+%5Cfrac%7B%5Csin%28zu%29%7D%7B%28u%5E2+-+1%29%5Ea%7D+%5Cmathrm%7Bd%7Du&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\int_0^\infty H(u^2-1) \frac{\sin(zu)}{(u^2 - 1)^a} \mathrm{d}u"/>, but the code cannot do this, yet.</p>
<p>On a related note, I should probably write a function to simplify bessel functions, e.g. equation 36 of the definite integration examples is just a single bessel I function (times a step function), but this is far from obvious. Importantly this needs proper treatment of polar numbers to get the branch factors right.</p>
<h2>Introducing Polar Numbers</h2>
<p>Finally, my new plan to treat branch cuts. I think there is no way around implementing proper polar numbers, in some way. Let’s first talk about the mathematics, and then about a possible implementation.</p>
<p>Let <img alt="\mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S}"/> again denote the riemann surface of the logarithm, and let <img alt="\mathbb{C}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathbb{C}"/> denote the ordinary complex line. [We shall sometimes think of <img alt="\mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S}"/> as an open subset of a topological space <img alt="S" class="latex" src="http://s0.wp.com/latex.php?latex=S&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="S"/> which contains one additional point called "origin"; notably there is no complex structure near it.] We have the holomorphic map <img alt="Exp: \mathbb{C} \rightarrow \mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=Exp%3A+%5Cmathbb%7BC%7D+%5Crightarrow+%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="Exp: \mathbb{C} \rightarrow \mathcal{S}"/> which is indeed a biholomorphism. Its inverse is <img alt="Log: \mathcal{S} \rightarrow \mathbb{C}" class="latex" src="http://s0.wp.com/latex.php?latex=Log%3A+%5Cmathcal%7BS%7D+%5Crightarrow+%5Cmathbb%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="Log: \mathcal{S} \rightarrow \mathbb{C}"/>. We also have a holomorphic projection map <img alt="p: \mathcal{S} \rightarrow \mathbb{C}, Exp(z) \mapsto exp(z)" class="latex" src="http://s0.wp.com/latex.php?latex=p%3A+%5Cmathcal%7BS%7D+%5Crightarrow+%5Cmathbb%7BC%7D%2C+Exp%28z%29+%5Cmapsto+exp%28z%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="p: \mathcal{S} \rightarrow \mathbb{C}, Exp(z) \mapsto exp(z)"/>, where <img alt="exp(z)" class="latex" src="http://s0.wp.com/latex.php?latex=exp%28z%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="exp(z)"/> denotes the ordinary exponential function from <img alt="\mathbb{C}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathbb{C}"/> to itself. There is a section (one-sided inverse) of <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="p"/> related to the standard branch of the argument which we shall denote <img alt="q: \mathbb{C} \rightarrow S, exp(k + i \theta) \mapsto Exp(k + i \theta), 0 \in \mathbb{C} \mapsto 0 \in S" class="latex" src="http://s0.wp.com/latex.php?latex=q%3A+%5Cmathbb%7BC%7D+%5Crightarrow+S%2C+exp%28k+%2B+i+%5Ctheta%29+%5Cmapsto+Exp%28k+%2B+i+%5Ctheta%29%2C+0+%5Cin+%5Cmathbb%7BC%7D+%5Cmapsto+0+%5Cin+S&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="q: \mathbb{C} \rightarrow S, exp(k + i \theta) \mapsto Exp(k + i \theta), 0 \in \mathbb{C} \mapsto 0 \in S"/>, where <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="k"/> is real and <img alt="-\pi &lt; \theta \le \pi" class="latex" src="http://s0.wp.com/latex.php?latex=-%5Cpi+%3C+%5Ctheta+%5Cle+%5Cpi&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="-\pi &lt; \theta \le \pi"/>. This function is <em>not</em> continuous at the non-positive reals, but holomorphic outside thereof.</p>
<p>Multiplication in <img alt="\mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S}"/> is defined in the obvious way. If <img alt="f: D \rightarrow \mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=f%3A+D+%5Crightarrow+%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="f: D \rightarrow \mathcal{S}"/> is a meromorphic (say) function, then <img alt="p \circ f: D \rightarrow \mathcal{C}" class="latex" src="http://s0.wp.com/latex.php?latex=p+%5Ccirc+f%3A+D+%5Crightarrow+%5Cmathcal%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="p \circ f: D \rightarrow \mathcal{C}"/> is also meromorphic. Similarly if <img alt="g: \mathbb{C} \rightarrow D" class="latex" src="http://s0.wp.com/latex.php?latex=g%3A+%5Cmathbb%7BC%7D+%5Crightarrow+D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="g: \mathbb{C} \rightarrow D"/> is any meromorphic (say) function, then so is <img alt="g \circ p: \mathcal{S} \rightarrow D" class="latex" src="http://s0.wp.com/latex.php?latex=g+%5Ccirc+p%3A+%5Cmathcal%7BS%7D+%5Crightarrow+D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="g \circ p: \mathcal{S} \rightarrow D"/>. This allows us to extend many more functions from <img alt="\mathbb{C}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathbb{C}"/> to <img alt="\mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S}"/>, and this is often done implicitely. Let’s mention two peculiarites: the sum of two elements in <img alt="\mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S}"/> cannot be defined very satisfactorily (although of course their sum in <img alt="\mathbb{C}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathbb{C}"/> is well-defined and well-behaved). Also if <img alt="a \in \mathcal{S}, b \in \mathbb{C}" class="latex" src="http://s0.wp.com/latex.php?latex=a+%5Cin+%5Cmathcal%7BS%7D%2C+b+%5Cin+%5Cmathbb%7BC%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="a \in \mathcal{S}, b \in \mathbb{C}"/> we can define <img alt="a^b = Exp(b Log(a))" class="latex" src="http://s0.wp.com/latex.php?latex=a%5Eb+%3D+Exp%28b+Log%28a%29%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="a^b = Exp(b Log(a))"/>, and if instead <img alt="b \in \mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=b+%5Cin+%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="b \in \mathcal{S}"/> we can define <img alt="a^b = Exp(p(b) Log(a))" class="latex" src="http://s0.wp.com/latex.php?latex=a%5Eb+%3D+Exp%28p%28b%29+Log%28a%29%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="a^b = Exp(p(b) Log(a))"/>. With these definitions all the usual algebraic relations (like <img alt="(xy)^z = x^z y^z" class="latex" src="http://s0.wp.com/latex.php?latex=%28xy%29%5Ez+%3D+x%5Ez+y%5Ez&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="(xy)^z = x^z y^z"/>) hold for <em>all</em> <img alt="x, y, z \in \mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=x%2C+y%2C+z+%5Cin+%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="x, y, z \in \mathcal{S}"/>.</p>
<p>Now about the implementation. First we need a function to create/represent elements of <img alt="\mathcal{S}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\mathcal{S}"/>. I had thought about exp(x, polar=True), polar being a new assumption. While I still think introducing an assumption is a good thing, I’m not so sure about this notation any more. The advantage is that the object looks very much like exp, so much code (printing, simplification) knows what to do with it. The disadvantage is that the assumption is easily lost, e.g. obj.func(*obj.args) will lose it, and also code might just create new exp objects, not knowing that there can be assumptions around. So probably creating a new function exp_polar is better.</p>
<p>Next I want to add an assumption polar which can be given to symbols. It does not interact much with other assumptions, except that positive shall imply polar. Much simplification code (notably in expand_log, powdenest, powsimp, logcombine) can now be updated to look for the polar assumption instead of the cruder positive.</p>
<p>Finally, for sake of usability, I propose the following functions: polarify(expr, subs=True/False) traverses the expression tree and turns any non-positive numeric constants (e.g. 1+I) into their image under <img alt="q" class="latex" src="http://s0.wp.com/latex.php?latex=q&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="q"/> (namely sqrt(2)*exp_polar(I*pi/4)). It also converts instances of exp into exp_polar. If subs=True, also all symbols that are not polar will be substituted for polar dummies; thus polarify() behaves much like posify(). A function unpolarify(expr) that essentially computes the image of expr under <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="p"/>, in as simple a form as possible. Thus it converts the outermost instances of exp_polar into exp, and recursively does the same thing for arguments of unbranched functions (e.g. powers with integral exponents, or things like sin(x)—here probably the function class should give a hint, similar to nargs). Then functions like expand, powdenest can accept a new argument polar=True/False which works like force, except that it calls polarify instead of posify. Finally for convenience Expr should get a method extract_branch_factor (a wrapper around extract_multiplicatively I imagine) that extracts factors of the form exp_polar(I*pi*n), n nt integer, which allows branched functions to expose their branching behaviour.</p>
<p>This is about it; I feel I have spent forever writing this post (it’s actually just 2.5 hours <img alt=":D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/> ).</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/300/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/300/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/300/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/300/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/300/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/300/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/300/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/300/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/300/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/300/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/300/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/300/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/300/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/300/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=300&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-07-15T23:32:59Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>nessgrh</name>
    </author>
    <source>
      <id>http://nessgrh.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://nessgrh.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://nessgrh.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://nessgrh.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://nessgrh.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My GSoC Project</subtitle>
      <title>nessgrh</title>
      <updated>2011-12-04T20:40:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://f1728.wordpress.com/?p=172</id>
    <link href="http://f1728.wordpress.com/2011/07/15/week-eight-grobner-walk-and-stuff/" rel="alternate" type="text/html"/>
    <title>Week eight: Gröbner Walk and stuff</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">FGLM is a bit frustrating. I’m very certain that it doesn’t work because of rounding errors due to the conversion of coefficients in solve. This leads to weird results, for example in Aaron’s example from Czichowski’s algorithm: G_fglm and G_lex look very similar but still G_lex != G_fglm. I have started working on the Gröbner [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;blog=22515617&amp;post=172&amp;subd=f1728&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>FGLM is a bit frustrating. I’m very certain that it doesn’t work because of rounding errors due to the conversion of coefficients in <code>solve</code>. This leads to weird results, for example in Aaron’s example from Czichowski’s algorithm:</p>
<pre class="brush: python;">&gt;&gt;&gt; from sympy.polys.fglm import *
&gt;&gt;&gt; x, t = symbols('x, t')
&gt;&gt;&gt; F = [9*x**8 + 36*x**7 - 32*x**6 - 252*x**5 - 78*x**4 + 468*x**3 + 288*x**2 - 108*x + 9, (-72 - 72*t)*x**7 + (-256 - 252*t)*x**6 + (192 + 192*t)*x**5 + (1280 + 1260*t)*x**4 + (312 + 312*t)*x**3 + (-404*t)*x**2 + (-576 - 576*t)*x + 96 + 108*t]
&gt;&gt;&gt; G_grevlex = groebner(F, x, t, order='grevlex')
&gt;&gt;&gt; G_fglm = fglm(G_grevlex, 'lex', x, t, order='grevlex')  # order of parameters comes from copying lots of stuff from `groebner`
&gt;&gt;&gt; G_lex = groebner(F, x, t, order='lex')
&gt;&gt;&gt; A = flatten([g.as_ordered_terms() for g in G_lex])
&gt;&gt;&gt; B = flatten([g.as_ordered_terms() for g in G_fglm])
&gt;&gt;&gt; [N(a/b) for (a, b) in zip(A, B)]
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
</pre>
<p><code>G_fglm</code> and <code>G_lex</code> look very similar but still <code>G_lex != G_fglm</code>.</p>
<p>I have started working on the Gröbner Walk algorithm, which works also for positive dimension. For the Gröbner Walk algorithm I don’t need <code>solve</code> (although I could use it) but instead I use a modified Buchberger algorithm, which computes a Gröbner basis for a rather simple system and simultanously performs the same operations on another system as well.</p>
<p>For a Gröbner basis <img alt="G_{&lt;_1}" class="latex" src="http://s0.wp.com/latex.php?latex=G_%7B%3C_1%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="G_{&lt;_1}"/> there is an weight vector <img alt="\mathbf{w} \in \mathbb{R}_{\geq 0}^n" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbf%7Bw%7D+%5Cin+%5Cmathbb%7BR%7D_%7B%5Cgeq+0%7D%5En&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\mathbf{w} \in \mathbb{R}_{\geq 0}^n"/>, such that the leading monomials of <img alt="G_{&lt;_1}" class="latex" src="http://s0.wp.com/latex.php?latex=G_%7B%3C_1%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="G_{&lt;_1}"/> are the same as the <img alt="\mathbf{w}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbf%7Bw%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\mathbf{w}"/>-initial-forms, which are the terms of a polynomial with the highest <img alt="\mathbf{w}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbf%7Bw%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\mathbf{w}"/>-weight <img alt="\mathbf{w} \cdot \alpha" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbf%7Bw%7D+%5Ccdot+%5Calpha&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\mathbf{w} \cdot \alpha"/>, where <img alt="\alpha \in \mathbb{N}_0^n" class="latex" src="http://s0.wp.com/latex.php?latex=%5Calpha+%5Cin+%5Cmathbb%7BN%7D_0%5En&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\alpha \in \mathbb{N}_0^n"/> is an exponent vector. The set of weight vectors that have this property form a cone in <img alt="\mathbb{R}_{\geq 0}^n" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D_%7B%5Cgeq+0%7D%5En&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\mathbb{R}_{\geq 0}^n"/>. For all ideals, there are only finitely many cones and the Gröbner Walk moves through some of them. Whenever a border between two cones is crossed, a Gröbner basis of the <img alt="\mathbf{w}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbf%7Bw%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\mathbf{w}"/>-initial forms at that point has to be computed and lifted to a Gröbner basis of the ideal (here the aforementioned simultanous operations on the polynomials happen). The algorithm proceeds until it is in the cone of the weight vector associated with the target order, where the lifted Gröbner basis is the Gröbner basis wrt the target order.</p>
<p>Some stuff is missing in the description, like orders arising from matrices and the connection with weight vectors because I don’t understand that well enough yet.</p>
<p>There are also situations when the crossings become expensive (like when moving along the border of cones or crossing at the border of more than two cones) which can be avoided by pertubating the path. I also have to look at <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.9646&amp;rep=rep1&amp;type=pdf">this</a> paper, which seems to solve the problem differently. So far my reference has been Using Algebraic Geometry by David A. Cox, John Little, Donal O’Shea, 2nd edition.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/f1728.wordpress.com/172/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/f1728.wordpress.com/172/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/f1728.wordpress.com/172/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/f1728.wordpress.com/172/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/f1728.wordpress.com/172/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/f1728.wordpress.com/172/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/f1728.wordpress.com/172/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/f1728.wordpress.com/172/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/f1728.wordpress.com/172/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/f1728.wordpress.com/172/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/f1728.wordpress.com/172/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/f1728.wordpress.com/172/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/f1728.wordpress.com/172/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/f1728.wordpress.com/172/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;blog=22515617&amp;post=172&amp;subd=f1728&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy"/></div>
    </content>
    <updated>2011-07-15T15:25:21Z</updated>
    <category term="SymPy"/>
    <author>
      <name>f1728</name>
    </author>
    <source>
      <id>http://f1728.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://f1728.wordpress.com/category/SymPy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://f1728.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://f1728.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://f1728.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>f1728 » SymPy</title>
      <updated>2011-08-12T15:40:14Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://nessgrh.wordpress.com/?p=276</id>
    <link href="http://nessgrh.wordpress.com/2011/07/13/a-question-of-the-argument%e2%80%94or-tricky-branch-cuts-revisited/" rel="alternate" type="text/html"/>
    <title>A question of the argument—or: Tricky branch cuts revisited</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This post is a continuation of my previous one on branch cuts. My usual status update will again come on friday, and this time I actually have something to show off. As before, the aim of this post is two-fold: both to clarify my thoughts, and to invite suggestions for solution. It turn out my [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=276&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This post is a continuation of my previous one on branch cuts. My usual status update will again come on friday, and this time I actually have something to show off.</p>
<p>As before, the aim of this post is two-fold: both to clarify my thoughts, and to invite suggestions for solution.</p>
<p>It turn out my previous treatment of branched functions was a bit short-sighted (who would have guessed that, hu? <img alt=":D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/> ). In order to make progress, I have for now been ignoring problems related to branches/arguments; but by now this is the last big problem before my branch can finally become “pull request ready” (more on that in friday’s post). Let me first describe the problem(s) at hand. I have picked five (six) representative examples.</p>
<ol start="0">
<li><img alt="IFT\left[\frac{1}{1 + 2\pi i k}\right](x), x &gt; 0." class="latex" src="http://s0.wp.com/latex.php?latex=IFT%5Cleft%5B%5Cfrac%7B1%7D%7B1+%2B+2%5Cpi+i+k%7D%5Cright%5D%28x%29%2C+x+%3E+0.&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="IFT\left[\frac{1}{1 + 2\pi i k}\right](x), x &gt; 0."/> (IFT stands for inverse fourier transform) As explained previously, this comes out as (roughly) <img alt="e^{-x} \left(\Gamma(0, e^{2 \pi i}) - \Gamma(0, 1) \right)" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B-x%7D+%5Cleft%28%5CGamma%280%2C+e%5E%7B2+%5Cpi+i%7D%29+-+%5CGamma%280%2C+1%29+%5Cright%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{-x} \left(\Gamma(0, e^{2 \pi i}) - \Gamma(0, 1) \right)"/>. The <img alt="e^{2 \pi i}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B2+%5Cpi+i%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{2 \pi i}"/> must not be simplified to <img alt="1" class="latex" src="http://s0.wp.com/latex.php?latex=1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="1"/> here.</li>
<li><img alt="IFT\left[ \frac{1}{1 + 2\pi i k} \right](x), x &lt; 0." class="latex" src="http://s0.wp.com/latex.php?latex=IFT%5Cleft%5B+%5Cfrac%7B1%7D%7B1+%2B+2%5Cpi+i+k%7D+%5Cright%5D%28x%29%2C+x+%3C+0.&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="IFT\left[ \frac{1}{1 + 2\pi i k} \right](x), x &lt; 0."/> As also explained previously, the G-function algorithm cannot compute this without realising that <img alt="exp(x)" class="latex" src="http://s0.wp.com/latex.php?latex=exp%28x%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="exp(x)"/> is unbranched, i.e. that the argument of this function may indeed be converted to <img alt="(-\pi, \pi]" class="latex" src="http://s0.wp.com/latex.php?latex=%28-%5Cpi%2C+%5Cpi%5D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="(-\pi, \pi]"/>.</li>
<li><img alt="MT\left[\frac{(b + \sqrt{b^2 + x^2})^a}{-\sqrt{b^2 + x^2}} \right], \text{where } b &lt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=MT%5Cleft%5B%5Cfrac%7B%28b+%2B+%5Csqrt%7Bb%5E2+%2B+x%5E2%7D%29%5Ea%7D%7B-%5Csqrt%7Bb%5E2+%2B+x%5E2%7D%7D+%5Cright%5D%2C+%5Ctext%7Bwhere+%7D+b+%3C+0&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="MT\left[\frac{(b + \sqrt{b^2 + x^2})^a}{-\sqrt{b^2 + x^2}} \right], \text{where } b &lt; 0"/>. (MT stands for mellin transform) This is curious. To understand what is going on, we have to realise that the function is actually represented as <img alt="C F(x^2/b^2)" class="latex" src="http://s0.wp.com/latex.php?latex=C+F%28x%5E2%2Fb%5E2%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="C F(x^2/b^2)"/> for some constant <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="C"/> independent of <img alt="x" class="latex" src="http://s0.wp.com/latex.php?latex=x&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="x"/>, and a function <img alt="F(z)" class="latex" src="http://s0.wp.com/latex.php?latex=F%28z%29&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="F(z)"/>. Thus <img alt="b" class="latex" src="http://s0.wp.com/latex.php?latex=b&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="b"/> and <img alt="x" class="latex" src="http://s0.wp.com/latex.php?latex=x&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="x"/> <em>together</em> determine the branch of the square root taken. Thus putting a negative <img alt="b" class="latex" src="http://s0.wp.com/latex.php?latex=b&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="b"/> in above expression yields <img alt="\frac{(b - \sqrt{b^2 + x^2})^a}{-\sqrt{b^2 + x^2}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B%28b+-+%5Csqrt%7Bb%5E2+%2B+x%5E2%7D%29%5Ea%7D%7B-%5Csqrt%7Bb%5E2+%2B+x%5E2%7D%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\frac{(b - \sqrt{b^2 + x^2})^a}{-\sqrt{b^2 + x^2}}"/>, where <img alt="\sqrt{z}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csqrt%7Bz%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\sqrt{z}"/> for once denotes the principal branch. This is surely (?) not what the user had in mind when entering the above expression (and btw we cannot compute the answer for this argument anyway).</li>
<li><img alt="\sqrt{x^2 + t^2} + t" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csqrt%7Bx%5E2+%2B+t%5E2%7D+%2B+t&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\sqrt{x^2 + t^2} + t"/> matches <img alt="\sqrt{x^2 + b^2} - b" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csqrt%7Bx%5E2+%2B+b%5E2%7D+-+b&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\sqrt{x^2 + b^2} - b"/> with <img alt="t = -b" class="latex" src="http://s0.wp.com/latex.php?latex=t+%3D+-b&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="t = -b"/>. This is wrong for the same reason as the example above, but this time the problem is that matching code thinks <img alt="(-1)^2 = 1" class="latex" src="http://s0.wp.com/latex.php?latex=%28-1%29%5E2+%3D+1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="(-1)^2 = 1"/>.</li>
<li><img alt="MT \left[e^{ax} \sin{ax} \right]." class="latex" src="http://s0.wp.com/latex.php?latex=MT+%5Cleft%5Be%5E%7Bax%7D+%5Csin%7Bax%7D+%5Cright%5D.&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="MT \left[e^{ax} \sin{ax} \right]."/> This mellin transform only exists for <img alt="a" class="latex" src="http://s0.wp.com/latex.php?latex=a&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="a"/> in the left half plane. The unsimplified result has a term (roughly) like <img alt="(e^{2 \pi i}a)^s" class="latex" src="http://s0.wp.com/latex.php?latex=%28e%5E%7B2+%5Cpi+i%7Da%29%5Es&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="(e^{2 \pi i}a)^s"/>, except that it is more complicated so that powdenest() doesn’t put the <img alt="s" class="latex" src="http://s0.wp.com/latex.php?latex=s&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="s"/> into the exponent. This only happens when calling simplify. The end result is that when we substitute the real <img alt="\pi" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cpi&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\pi"/> for the dummy an important factor of <img alt="e^{2 \pi i}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B2+%5Cpi+i%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{2 \pi i}"/> is lost. (In case this explanation is too confusing, look at this <a href="http://pastebin.com/raw.php?i=GyufFHh1">session log</a>. Crucially, the last equation has a factor of <img alt="e^{-2\pi i s}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B-2%5Cpi+i+s%7D&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="e^{-2\pi i s}"/> right before the gamma function, whereas the first does not.)</li>
<li><img alt="ILT \frac{a^\nu (s + \sqrt{s^2-a^2})^{-\nu}}{\sqrt{s^2 - a^2}}." class="latex" src="http://s0.wp.com/latex.php?latex=ILT+%5Cfrac%7Ba%5E%5Cnu+%28s+%2B+%5Csqrt%7Bs%5E2-a%5E2%7D%29%5E%7B-%5Cnu%7D%7D%7B%5Csqrt%7Bs%5E2+-+a%5E2%7D%7D.&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="ILT \frac{a^\nu (s + \sqrt{s^2-a^2})^{-\nu}}{\sqrt{s^2 - a^2}}."/> (ILT stands for inverse laplace transform) In this case a double minus sign is cancelled, for similar reasons as above. (Here is a <a href="http://pastebin.com/raw.php?i=AiD1y03c">log</a>.)</li>
</ol>
<p>I think the following conclusions can be drawn from these examples:</p>
<ol>
<li>powdenest(force=True) is not a reliable way to propagate exponents and thus not sufficient to be sure that we can safely substitute <img alt="\pi" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cpi&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="\pi"/> for a dummy. [It has other problems as well, e.g. powdenest(abs(x), force=True) == x, and that's probably not even a bug.]</li>
<li>It is (thus) not tenable to try to hide all branch computations from the user in the way I tried so far (i.e. to return a result with fully computed branches, where <img alt="-1" class="latex" src="http://s0.wp.com/latex.php?latex=-1&amp;bg=FFFFFF&amp;fg=000000&amp;s=0" title="-1"/>-s can be cancelled in etc).</li>
<li>There needs to be a function similar to arg() and unbranched_argument() that can return reduced arguments if this is known to be correct.</li>
<li>It would be desirable to to have functions somewhat like powdenest(force=True) that do all simplifications valid on the riemann surface of the logarithm. Note that fore=True works by pretending all symbols are positive, this is not necessarily the same thing.</li>
</ol>
<p><strong>I’m looking for an unintrusive way to solve the above four problems.</strong></p>
<p>I’m toying with the idea of adding a new assumption “polar” to sympy. I think almost no code needs to know about it, and it seems like it could solve my problems. I’m not very experienced with the sympy core, though, so I may be wrong. I imagine that this assumption can be set on various objects to make them behave like numbers on the riemann surface of the logarithm. In particular exp(z, polar=True) stops exp(2*pi*I) == 1. We could also allow this on e.g. I or -1, so that exp(pi*I, polar=True) can return -1 with the polar=True flag set. Multiplying two such factors together will propagate back to exp. Also polar=True should stop exp from being expanded trigonometrically (since adding polar numbers does not really make sense, as far as I can see—adding shouldn’t be disallowed though, since it can be useful formal notation). Matching code could propagate this flag (I’m fuzzy on the details). Similarly powdenest etc could watch out for it.</p>
<p>This solves all but (3), for which I could just make a new function. My existing machinery for handling branch cuts should be adapted, obviously (actually most of it could go now). argument_dummy can go of course.</p>
<p>It might even be advantageous to have an assumption “period” which can have a numerical value (where the old behaviour means period=None, and the above behaviour means period=oo); but I think assumptions must be flags so this cannot work. If it would, it might allow for a unified treatment of (1-4), but that’s probably not worth it.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/276/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/276/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/276/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/276/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/276/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/276/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/276/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/276/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/276/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/276/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/276/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/276/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/276/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/276/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;blog=22546379&amp;post=276&amp;subd=nessgrh&amp;ref=&amp;feed=1" width="1"/><div class="sharedaddy sd-like-enabled"/></div>
    </content>
    <updated>2011-07-13T21:24:33Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>nessgrh</name>
    </author>
    <source>
      <id>http://nessgrh.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://nessgrh.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://nessgrh.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://nessgrh.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://nessgrh.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My GSoC Project</subtitle>
      <title>nessgrh</title>
      <updated>2011-12-04T20:40:11Z</updated>
    </source>
  </entry>
</feed>
