<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet SymPy</title>
  <updated>2014-01-14T17:20:56Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Ondrej Certik</name>
    <email>ondrej@certik.cz</email>
  </author>
  <id>http://planet.sympy.org/atom.xml</id>
  <link href="http://planet.sympy.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://planet.sympy.org/" rel="alternate"/>

  <entry>
    <id>tag:blogger.com,1999:blog-5472769892551526876.post-2813863126593411914</id>
    <link href="http://codesachin.blogspot.com/feeds/2813863126593411914/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=5472769892551526876&amp;postID=2813863126593411914" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/2813863126593411914" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/2813863126593411914" rel="self" type="application/atom+xml"/>
    <link href="http://codesachin.blogspot.com/2013/10/gsoc-officially-done.html" rel="alternate" type="text/html"/>
    <title>GSoC (officially) done!</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">GSoC is now over, and I have officially passed the Final Evaluations :-).<br/>Looking back, this was an amazingly interesting and exciting process, and helped me learn a <i>lot</i> about SymPy, and also Python. Quite a few things that I learnt in the last three months (some resulting from my own coding, others from just messing around with SymPy code) were so full of Python 'magic' that I wondered whether I would ever use them again in any of my own work!<br/>There were a few problems, like dealing with architectural difficulties, physics-related problems (that I had not though of while writing my proposal) and the radical change in the plan of action mid-way through the GSoC period. This change came because Prasoon's module didn't shape up as we had planned earlier- perhaps we underestimated the difficulties associated with creating such a complex module and integrating it with the rest of the codebase. As a result the code I had written based on our decided API became useless - <i>almost</i>. Thankfully,  while coding all the new stuff (a mechanics core to support fields, electrostatics, a unified class for ReferenceFrame and Particle) I had made a modified version of the mechanics core to test it all on. Hence, Gilbert and I decided around July end that the best thing to do would be to modify the current framework accordingly and base all my work on it.<br/>After the mid-sem evals, I could not work as hard as I had during my vacations due to projects and course-work at college. Inspite of all that, I managed to get two PRs merged...one modifying sympy.physics.mechanics.essential to support scalar and vector fields, and other to add a <i>big </i>function to the functions.py file to calculate motion attributes from time-dependent vectors and boundary conditions.<br/>I have a few more PRs in the pipeline, these would essentially just modify the code I wrote over the summer to work with the current module and add the documentation for the done work. The first one of them is already in the review process :-)<br/>The help from Gilbert, Jason, Stefan and at times even Aaron, has been immense, and I am really thankful to them for it. Gilbert was a great mentor, especially while brainstorming solutions to problems that we faced from time to time. It was almost like solving problems with a college and getting tips to understand how some difficulties could be resolved.<br/>Obviously, I will continue to work for SymPy (mainly sympy.logic) and <a href="http://pydy.org/">PyDy</a> - though mostly PyDy for the foreseeable future, since I have to add the E-M module and extend it as I had envisioned earlier. It would be fun to code complex electromagnetic concepts to work with dynamic systems, and having Jason, Gilbert and DL Peterson (and the rest of the PyDy team) to help would be quite the experience on its own.<br/>For me, GSoC has just started my involvement with this community and its codebase, and I aim to be an active developer for them :-D Physics is one of the few things that I miss being in Computer Science, so writing Python code based on it in my free time is something that I am obviously looking forward to!<br/>I will keep updating my blog as and when I get something merged or I work on something that's worth writing about. Once again, thanks a lot to SymPy, Gilbert, Aaron, Ondrej, Stefan and obviously- Google and Carol, for this amazing opportunity!</div></div>
    </content>
    <updated>2013-10-02T18:40:42Z</updated>
    <published>2013-10-02T18:39:00Z</published>
    <author>
      <name>Sachin Joglekar</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/106302547764750990775</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5472769892551526876</id>
      <author>
        <name>Sachin Joglekar</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://codesachin.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>-Sachin Joglekar-</subtitle>
      <title>Dream. Think. Code.</title>
      <updated>2013-11-30T11:34:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://manojbits.wordpress.com/?p=760</id>
    <link href="http://manojbits.wordpress.com/2013/09/27/the-end-of-a-journey/" rel="alternate" type="text/html"/>
    <title>The end of a journey</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Well. It surely has been a few testing months of my life (due to various reasons, some of which I don’t want to mention here), and has been a up and down journey throughout with more of downs than ups.(damn these cliches) .It all began sometime during this February/March when I had nothing to do […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=760&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Well. It surely has been a few testing months of my life (due to various reasons, some of which I don’t want to mention here), and has been a up and down journey throughout with more of downs than ups.(damn these cliches) .It all began sometime during this February/March when I had nothing to do (I almost have nothing to do always) and people around me were doing cool stuff, when I thought of giving GSoC a shot. (I had initially thought GSoC was for people who knew ten programming languages before they were born, or who started hacking on stuff since fifth grade, so I was a bit pessimistic and I had barely written my first Hello World program in C, a year back). And after some amount of bug fixing and a large amount of luck, my organistion decided to go with my proposal <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  (For a slightly TLDR version of this, you can read <a href="http://manojbits.wordpress.com/2013/04/22/sympy-and-my-tryst-with-open-source/" rel="nofollow">http://manojbits.wordpress.com/2013/04/22/sympy-and-my-tryst-with-open-source/</a>)</p>
<p>I was assigned one of the most awesome mentors in SymPy, Sean Vig, who is a physics grad student (I think) in University of Illinois -Urbana-Champaign. I’m not saying this just because he passed me, but also because all that I had to do if I got stuck somewhere, was to ping him and he would reply almost immediately with some solution to my query (except when he went biking of course).</p>
<p>I don’t want to bore anyone with my project details, because I myself am slightly bored already, but a one line description would be that it involved strengthening the already existing ODE module, with a number of hints and power series solving methods. I want to mention two moments, which had me quite fascinated, the first one was the recursive design of the ODE module, which makes it really easy to to add additional hints, and the second one was when I hacked a bit of core SymPy, it would take me days to think of such an object oriented design.</p>
<p>GSoC taught me much more than coding. Patience maybe. There were times when I got stuck really bad, and someone in the mailing list, usually came up with some answer. (Especially Raoul who saved the day with his research papers). And also humility from the core developers, who are seasoned programmers, and who treat people like me at par with them while reviewing Pull Requests or otherwise. Perseverance and dedication too. You can have things like a bad breakup or something, but you still got to put in the required hours of work.</p>
<p>SymPy has a broad range of stuff that can be worked on, that I believe SymPy can be called as a separate language in itself. Also congrats to my fellow GSoCers, Sachin, Prasoon, Chetna, Katja, Mary Clark ,Thilina and Saurabh who managed to string up a project on his own. It was a pleasure working with you all. As I said, SymPy is so broad, that I have a very vague idea about what the other projects are, sometimes I never knew what was going on in my project itself, but yeah whatever. If you are looking for a well documented Python project to contribute to, SymPy should be at the top of your list.</p>
<p>On a personal note, the way ahead is as undecided as before. I obviously will contribute to SymPy in my free time. Frankly speaking, I don’t consider myself as a programmer still, and I know plenty of people in my own college who are much better than me and I still have to improve on my skillset. Lets see where life takes me from here.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/760/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/760/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=760&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-27T21:11:18Z</updated>
    <category term="Random"/>
    <category term="SymPy"/>
    <category term="gsoc"/>
    <category term="gsoc2013"/>
    <category term="python"/>
    <category term="sympy"/>
    <author>
      <name>Manoj Kumar</name>
    </author>
    <source>
      <id>http://manojbits.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://manojbits.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://manojbits.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://manojbits.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://manojbits.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>From a learner's perspective</subtitle>
      <title>Perspective » SymPy</title>
      <updated>2014-01-14T17:20:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://meclark256.wordpress.com/?p=172</id>
    <link href="http://meclark256.wordpress.com/2013/09/24/gsoc-wrapup/" rel="alternate" type="text/html"/>
    <title>GSOC Wrapup</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Well, GSOC 2013 is officially over.  I thought I’d write up a summary of what I accomplished over the last 14 weeks. -Classes for types A, B, C, D, E, F, and G which stores information about their Dynkin diagrams, Cartan matrices, roots, and size -A class, RootSystem, which allows users to work with the […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=172&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Well, GSOC 2013 is officially over.  I thought I’d write up a summary of what I accomplished over the last 14 weeks.</p>
<p>-Classes for types A, B, C, D, E, F, and G which stores information about their Dynkin diagrams, Cartan matrices, roots, and size</p>
<p>-A class, RootSystem, which allows users to work with the root system of a given Lie algebra.  It can generate all the roots of a Lie algebra, and has methods for adding roots together.</p>
<p>-A class WeylGroup, which is about the Weyl group of a given Lie algebra.  It gives the size and name of a given Weyl group as well as the matrix form of an element, and an element’s order.</p>
<p>-Methods for displaying the Cartan matrix and Dynkin diagram of a Lie algebra.</p>
<p> </p>
<p>That’s pretty much it.  I had a great time working with SymPy this summer!</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/172/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/172/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=172&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-24T19:00:55Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>meclark256</name>
    </author>
    <source>
      <id>http://meclark256.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://meclark256.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://meclark256.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://meclark256.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://meclark256.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Smile! You’re at the best WordPress.com site ever</subtitle>
      <title>My GSOC Adventure with SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-7526836182390500993.post-3579618109650799615</id>
    <link href="http://tarun-gaba.blogspot.com/feeds/3579618109650799615/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/09/gsoc-experiences4.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/3579618109650799615" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/3579618109650799615" rel="self" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/09/gsoc-experiences4.html" rel="alternate" type="text/html"/>
    <title>GSoC Experiences(4)</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">All is well that ends well!<br/>This is the only statement I can express in this last article for the series of articles under GSoC experiences.<br/><br/>I have been able to write a stable Javascript code which is fully functional, and has the basic functionality implemented.<br/><br/>For testing the new code on the grounds, I have ported the script of the PyDy Example Three link pendulum according to the new code.<br/><br/>I still need to write some tutorials on how to use the code, and I will post the relevant links to them, and if possible a simple tutorial on using the code here only.<br/><br/>Anyways I am leaving here a youtube link on the working Animation:<br/><a href="http://www.youtube.com/watch?v=W6MIwXUw7jQ&amp;feature=youtu.be">http://www.youtube.com/watch?v=W6MIwXUw7jQ&amp;feature=youtu.be</a><br/><br/>And here are some screenshots for those who dont like waiting for buffering :)<br/>It feels so exciting to see this work!<br/><br/><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-QukQSxYNvXk/Uj6Q0lCTzWI/AAAAAAAAARM/7ogvo7FXrYQ/s1600/Example2.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="179" src="http://3.bp.blogspot.com/-QukQSxYNvXk/Uj6Q0lCTzWI/AAAAAAAAARM/7ogvo7FXrYQ/s320/Example2.png" width="320"/></a></div><br/><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-aG9G4E__8Zo/Uj6QzENhdnI/AAAAAAAAARA/8fjWwQHVaMo/s1600/Example3.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="179" src="http://3.bp.blogspot.com/-aG9G4E__8Zo/Uj6QzENhdnI/AAAAAAAAARA/8fjWwQHVaMo/s320/Example3.png" width="320"/></a></div><br/><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-O0hRAfeGN9o/Uj6Q-yB2YdI/AAAAAAAAARU/1by-vlrDrqU/s1600/Example4.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="179" src="http://1.bp.blogspot.com/-O0hRAfeGN9o/Uj6Q-yB2YdI/AAAAAAAAARU/1by-vlrDrqU/s320/Example4.png" width="320"/></a></div><br/><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-QYep03lXkfo/Uj6Qy_En7xI/AAAAAAAAAQ8/-RdkP3IVgxA/s1600/Example1.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="179" src="http://1.bp.blogspot.com/-QYep03lXkfo/Uj6Qy_En7xI/AAAAAAAAAQ8/-RdkP3IVgxA/s320/Example1.png" width="320"/></a></div><br/><br/></div></div>
    </content>
    <updated>2013-09-22T06:42:17Z</updated>
    <published>2013-09-22T06:42:00Z</published>
    <author>
      <name>TARUN GABA</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/100217361579446727229</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-7526836182390500993</id>
      <author>
        <name>TARUN GABA</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://tarun-gaba.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://tarun-gaba.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Tarun Gaba</title>
      <updated>2013-09-26T18:13:16Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-7526836182390500993.post-8298334788334799954</id>
    <link href="http://tarun-gaba.blogspot.com/feeds/8298334788334799954/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/09/gsoc-experiences3.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/8298334788334799954" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/8298334788334799954" rel="self" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/09/gsoc-experiences3.html" rel="alternate" type="text/html"/>
    <title>GSoC Experiences(3)</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">This is the third article in the series of articles written on my GSoC experiences, describing some details  on project developments, which I couldn't report due to circumstances.<br/><br/>I will start where I left off. So, I was working on a GUI.<br/>This is what I came up with!<br/><br/><div class="separator" style="clear: both; text-align: center;"/><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-J4nmQC7fe5U/Uj2VpmZoFOI/AAAAAAAAAQs/g5NEBsAol0c/s1600/GUI.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="179" src="http://1.bp.blogspot.com/-J4nmQC7fe5U/Uj2VpmZoFOI/AAAAAAAAAQs/g5NEBsAol0c/s320/GUI.png" width="320"/></a></div><br/><br/>Well Its just a basic GUI with some simple implementation features, i.e. play pause and controls reset.<br/>But it was a good start, and seemed neat.<br/><br/>So after that I had to start working on Javascript class, Canvas class, which was going to handle all the visualization things.<br/>I felt that I did not have enought knowledge on Javascript structure based on Prototypes, So I spent some time knowing about prototypes, and  how to work with them.<br/><br/>I was stuck in more than one places during Javascript source code development phases.<br/>I was stuck with rendering the initial scene, the axes and the grid, and getting them altogether.<br/><br/>Another problem I encountered was with the dreaded "this" keyword in Javascripts.<br/>The problem was that the "Play","Pause" buttons had there OnClick attrubute attached to this.startAnimation, where "this" represented the Canvas class, But the buttons seemed to take this as the default window property of the browser, and gave errors. It took me some time to figure it out and debug them all. What works is instead of using "this.startAnimation", I was supposed to use "Canvas.prototype.startAnimation", hence this is one of the places where prototypes were savior.<br/><br/>Except this, there were some other minor glitches with animations, But thankfully, they were all resolved, and In next and last article of this series of GSoC Experiences, I am going to write about the final outcome of the hardwork, a working example of PyDyViz.<br/><br/><br/><br/></div></div>
    </content>
    <updated>2013-09-21T13:03:46Z</updated>
    <published>2013-09-21T13:03:00Z</published>
    <author>
      <name>TARUN GABA</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/100217361579446727229</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-7526836182390500993</id>
      <author>
        <name>TARUN GABA</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://tarun-gaba.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://tarun-gaba.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Tarun Gaba</title>
      <updated>2013-09-26T18:13:16Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-7526836182390500993.post-4908007987878683011</id>
    <link href="http://tarun-gaba.blogspot.com/feeds/4908007987878683011/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/09/gsoc-experiences2.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/4908007987878683011" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/4908007987878683011" rel="self" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/09/gsoc-experiences2.html" rel="alternate" type="text/html"/>
    <title>GSoC Experiences(2)</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">Continuing with my GSoC experiences, this is the second article in the list.<br/><br/>API seemed to be in good shape, I was supposed to start writing tests for javascripts.<br/>The main problem which occured to me was how.<br/>I had spent a few days figuring out exactly what I am supposed to write tests for defining the behaviour of code which will be used in animations, most of which is going to work in runtime(when we are using browser for animations).<br/><br/>I had some discussion with my mentor. He had given me some good motivation as well as ideas on test-writing. But (yes, call me a dumb), I cant still figure out how to do that. I had written some tests myself,<br/>during this time, but I wasn't exactly satisfied with it.<br/><br/>So to keep up with time, I had to switch to writing source code for javascripts.<br/>I was thinking that once I am complete with the source code, I should be more comfortable in writing tests for the same, once it is in working condition.<br/><br/>So with that in mind, I had started writing source code for the Javascripts side.<br/>First thing that crept in my mind before starting was to give a GUI to the project.<br/><br/><br/><br/><br/><br/></div></div>
    </content>
    <updated>2013-09-20T20:36:14Z</updated>
    <published>2013-09-20T20:36:00Z</published>
    <author>
      <name>TARUN GABA</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/100217361579446727229</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-7526836182390500993</id>
      <author>
        <name>TARUN GABA</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://tarun-gaba.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://tarun-gaba.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Tarun Gaba</title>
      <updated>2013-09-26T18:13:16Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-7526836182390500993.post-724914134740080503</id>
    <link href="http://tarun-gaba.blogspot.com/feeds/724914134740080503/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/09/gsoc-experiences1.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/724914134740080503" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/724914134740080503" rel="self" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/09/gsoc-experiences1.html" rel="alternate" type="text/html"/>
    <title>GSoC Experiences(1)</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><br/>Hi All,<br/>I have been unable to contact for a long time. This was mainly because I had ran into some troubles while working on Javascript side, and things were not going smooth. I had to work a lot for getting all in place. I totally apologise for missing all the weekly blog entries, which I should have made.<br/><br/>As a cover up, I am going to share my experiences during that time, for which I missed blog entries,<br/>In the form of GSoC Experiences articles.<br/><br/>So, I was able to finish with the python side by 12th August( a little late then expected).<br/>We had a basic server built in, using WebSockets for transferring content from python to browser.<br/>It was running smooth, and all the tests were passing.<br/><br/>It was decided that we would be using Jasmine for testing javascripts. I had started fleshing out a clean and detailed API on Javascripts side, as well familiarizing with Jasmine and how to write tests on Jasmine.<br/><br/>So we had some API fleshed out, and next I was supposed to write tests for Javascript side.<br/><br/></div></div>
    </content>
    <updated>2013-09-20T10:37:00Z</updated>
    <published>2013-09-20T10:37:00Z</published>
    <author>
      <name>TARUN GABA</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/100217361579446727229</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-7526836182390500993</id>
      <author>
        <name>TARUN GABA</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://tarun-gaba.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://tarun-gaba.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Tarun Gaba</title>
      <updated>2013-09-26T18:13:16Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://musingsofafriend.wordpress.com/?p=209</id>
    <link href="http://musingsofafriend.wordpress.com/2013/09/16/gsoc-week-13-plans-for-the-future/" rel="alternate" type="text/html"/>
    <title>GSoC Week 13: Plans for the future</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Today is the official soft pencils down date for GSoC 2013.  Any my work isn’t finished. This post, with the benefit of hindsight, seems eventful. So, as I was quite worried about for the last two weeks, the exam week … <a class="more-link" href="http://musingsofafriend.wordpress.com/2013/09/16/gsoc-week-13-plans-for-the-future/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=209&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today is the official soft pencils down date for GSoC 2013.  Any my work isn’t finished. This post, with the benefit of hindsight, seems eventful.</p>
<p>So, as I was quite worried about for the last two weeks, the exam week finally passed me by – and I can’t say I was unscathed. Nevertheless, I think I’ll get through without too bad a grade in most of my courses. Needless to say, I was unable to do any work this past week – exams had me occupied.</p>
<p>Getting to the topic of this post. Well, I saw that I wouldn’t be able to get the work done in time – at least not before 16th. So, I wrote to my mentors and the organisation admin hoping to continue working after the GSoC period on my project. Thankfully, my mentors and the org admins were accommodating. So, here’s a post mentioning what is the final goal of this project is and how things should look like once finished. Of course, this isn’t a complete post – I’ll do follow-up posts on this one in the coming weeks.</p>
<p>Right now, we are at a point where we have a foundation for the module – we can represent vectors in any orthogonal coordinate system (currently there are only three – although it is completely extensible with addition of classes for different coordinate systems) and do fundamental operations on it. In addition to the fundamental manipulations on the vectors, we can also do some other operations – dot and cross products, namely, for the time being. I should also point out the generic nature of our design – everything is generalized. That is how things stand now. In the near future – that is in the next one or two weeks, I believe that we should have implemented the differentiation methods on vectors – the simple differentiation, the grad (of scalars), the div and the curl. That much I am quite certain will work. The way ahead of that, I’m afraid, isn’t without its perils (okay, I exaggerate; :s/perils/challenges/g). The next thing to do is to implement the integration methods. I have already created a class for holding integrals – it is a base class. Then, there are two classes for two different type of integrals – one for line integrals and one for line integrals and one for surface integrals. I have also written methods that would reduce the integral to an internal in one variable for each of these classes. But, it remains to see if these will work.</p>
<p>Once I have these integration classes working, then, I should like to proceed with other integration classes – for example integrating vector over simple limits. I am fairly confident that <em>if</em> I can get the previous two classes working, then this class will work, too. The next order of business will be to implement numerical evaluation of these integration methods, which, given that I can reduce the integral to a normal scalar integration, shouldn’t be too difficult.</p>
<p>That would finish quite a few of the methods required for vector calculus. Then, I would like to work on the part that deal with reference frames. Currently, we have only three coordinate systems – I’d like to add two more; parabolic and elliptical coordinate systems seem like a good way to begin. Also, I’d like to implement more rotation methods – like adding quaternions, for example. Also, Stefan and I had a chat where her mentioned that I should remove the string based interface for these orientation method (and elsewhere as well). So, to take it one step further, I’d like to do some general refactoring – keeping coordinate systems in their own file, keeping vector classes separate, keeping integration classes separate and perhaps more separation based on helper methods.</p>
<p>One of the things that is quite important to do of course is profiling the code and optimizing the bottlenecks. Currently, I have identified several places in the code which can be easily optimized. But, I’m not beginning the optimization just yet; I should like to have a sense of completion before I begin optimizing the code. Currently, there is the <em>express</em> method that appears slow and that is because of the dcm  method – which is slow. So, I have a fairly good idea of how to go ahead with the optimizations – it is just that I will do it towards the end.</p>
<p>Now that those things are out-of-the-way, let me mention some of my current work. I am currently working to get the position of the coordinate systems work with the express method. That would work nicely except for the fact that I am having some trouble dealing with constant position dependent vectors. I am thinking of creating a new class for it. Anyway, that was a long post. There will be of course follow-up posts on my plans but for the time being, I would like to continue working.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/209/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/209/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=209&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-16T17:38:49Z</updated>
    <category term="Programming"/>
    <category term="Python"/>
    <category term="SymPy"/>
    <category term="vectors"/>
    <author>
      <name>musingsofafriend</name>
    </author>
    <source>
      <id>http://musingsofafriend.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://musingsofafriend.wordpress.com/tag/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://musingsofafriend.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://musingsofafriend.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://musingsofafriend.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>The greatest WordPress.com site in all the land!</subtitle>
      <title>musings of a friend - Prasoon Shukla » SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-5472769892551526876.post-2963201890134687039</id>
    <link href="http://codesachin.blogspot.com/feeds/2963201890134687039/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=5472769892551526876&amp;postID=2963201890134687039" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/2963201890134687039" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/2963201890134687039" rel="self" type="application/atom+xml"/>
    <link href="http://codesachin.blogspot.com/2013/09/gsoc-weeks-12-and-13_16.html" rel="alternate" type="text/html"/>
    <title>GSoc: Weeks 12 and 13</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">Work gained pace in the past two weeks.<br/>First off, I got my first GSoC PR merged into the SymPy base. This PR essentially modified the sympy.physics.mechanics core to incorporate the concept of coordinate variables and manipulations on them.<br/>For example, consider a vector V defined in frame R1, with coordinate variables of frame R2 occurring as symbols in its definition. Now,  while calculating d/dt(V) wrt R1, it would be necessary to substitute values of the base scalars of R2 wrt those of R1(as they will be functions of t). One small point- Coordinate variables, as far as possible should <i>not </i>be used as normal Symbols. This may mislead the 'dt' and 'express' methods to try substitution of variables of frames <i>not</i> linked to each other.<br/><br/>We also added a few optimisations, such as a dcm cache(turned out to be trickier than I thought) to 'remember' the DCMs once calculated, for later use. Also added the 'express' and 'dt' methods to the ReferenceFrame class- this would help re-expressions of scalar <i>as well as </i>vector fields in the said frame. During all these changes, I took care to preserve the old API of SymPy classes and methods- we din't want to make all the code written wrt the previous module version redundant.<br/><br/>Now, I currently have a PR in the pipeline for adding the get_motion functions to the sympy.physics.mechanics.functions file. After this, I will turn to the rather-tricky task of modifying the Point class to incorporate functionality as needed by ParticleCharge from my EM work (all the while, making sure the previous API does not change). Parallely, I will be adding documentation on my previous PR to the Sphinx docs.<br/><br/>However, all this after the 18th- the day my first semester exam ends. After that, I can start working on the project full-time again :-).<br/><br/>Anyways, have a great week :-)</div></div>
    </content>
    <updated>2013-09-16T12:41:51Z</updated>
    <published>2013-09-16T12:41:00Z</published>
    <author>
      <name>Sachin Joglekar</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/106302547764750990775</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5472769892551526876</id>
      <author>
        <name>Sachin Joglekar</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://codesachin.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>-Sachin Joglekar-</subtitle>
      <title>Dream. Think. Code.</title>
      <updated>2013-11-30T11:34:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sophiessympyblog.wordpress.com/?p=352</id>
    <link href="http://sophiessympyblog.wordpress.com/2013/09/15/12th-and-13th-week/" rel="alternate" type="text/html"/>
    <title>12th and 13th week</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Here is my status update on the factorization algorithm. I was able to close all remaining gaps in the code and the algorithm is working smoothly now. In particular, I implemented the -adic lifting I was taking about last time, which should improve performance for polynomials with large coefficients. First, I had to make the […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=352&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: justify;">Here is my status update on the factorization algorithm.</p>
<p style="text-align: justify;">I was able to close all remaining gaps in the code and the algorithm is working smoothly now. In particular, I implemented the <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="p"/>-adic lifting I was taking about last time, which should improve performance for polynomials with large coefficients. First, I had to make the Gaussian elimination code in matrices.py a little more flexible. For example, now one can pass a custom elimination function in addition to a custom iszero function. To solve linear systems over the ring <img alt="\mathbb Z_{p^l}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_%7Bp%5El%7D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z_{p^l}"/>, I then call it in a slightly strange way. Namely, I make calculations modulo <img alt="p^l" class="latex" src="http://s0.wp.com/latex.php?latex=p%5El&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="p^l"/>, but being zero is checked modulo <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="p"/>. The only drawback of this approach is that rows that contain only multiples of <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="p"/> will be treated as zero rows, thus the set of solutions might get bigger. However, in my use case this should happen only rarely and if it does, it will be detected later in the code.</p>
<p style="text-align: justify;">In the last week of my GSoC I will keep fine tuning the code and issue a PR for the factorization algorithm.</p>
<p style="text-align: justify;">Finally, here are some comparisons with <code>%timeit</code>.</p>
<p style="text-align: justify;">First, a small example. Let <img alt="\alpha" class="latex" src="http://s0.wp.com/latex.php?latex=%5Calpha&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\alpha"/> be a root of <img alt="t^4 + 1" class="latex" src="http://s0.wp.com/latex.php?latex=t%5E4+%2B+1&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="t^4 + 1"/> and <img alt="f = x^4 + y^4 \in \mathbb Q(\alpha)[x, y]" class="latex" src="http://s0.wp.com/latex.php?latex=f+%3D+x%5E4+%2B+y%5E4+%5Cin+%5Cmathbb+Q%28%5Calpha%29%5Bx%2C+y%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f = x^4 + y^4 \in \mathbb Q(\alpha)[x, y]"/>. The current SymPy factorization algorithm needs 166 ms on my laptop, whereas the new one only takes 69.1 ms.</p>
<p style="text-align: justify;">Now a bigger one. Let <img alt="\alpha" class="latex" src="http://s0.wp.com/latex.php?latex=%5Calpha&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\alpha"/> be a root of <img alt="t^4 + t^3 + t^2 + t + 1" class="latex" src="http://s0.wp.com/latex.php?latex=t%5E4+%2B+t%5E3+%2B+t%5E2+%2B+t+%2B+1&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="t^4 + t^3 + t^2 + t + 1"/> and <img alt="f = f_1 \cdot f_2 \cdot f_3 \cdot f_4 \in \mathbb Q(\alpha)[x, y, z]" class="latex" src="http://s0.wp.com/latex.php?latex=f+%3D+f_1+%5Ccdot+f_2+%5Ccdot+f_3+%5Ccdot+f_4+%5Cin+%5Cmathbb+Q%28%5Calpha%29%5Bx%2C+y%2C+z%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f = f_1 \cdot f_2 \cdot f_3 \cdot f_4 \in \mathbb Q(\alpha)[x, y, z]"/>, where</p>
<p style="text-align: center;"><img alt="\displaystyle f_1 = x^2 - 2 \alpha x - ( \alpha^3 + \alpha^2 + \alpha + 1) z^2 + \alpha^2 y + 12 \alpha^3 " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+f_1+%3D+x%5E2+-+2+%5Calpha+x+-+%28+%5Calpha%5E3+%2B+%5Calpha%5E2+%2B+%5Calpha+%2B+1%29+z%5E2+%2B+%5Calpha%5E2+y+%2B+12+%5Calpha%5E3+&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\displaystyle f_1 = x^2 - 2 \alpha x - ( \alpha^3 + \alpha^2 + \alpha + 1) z^2 + \alpha^2 y + 12 \alpha^3 "/><br/>
<img alt="\displaystyle f_2 = x^2 - 2 \alpha^2 x + \alpha^3 z^2 - ( \alpha^3 + \alpha^2 + \alpha + 1) y + 12 \alpha " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+f_2+%3D+x%5E2+-+2+%5Calpha%5E2+x+%2B+%5Calpha%5E3+z%5E2+-+%28+%5Calpha%5E3+%2B+%5Calpha%5E2+%2B+%5Calpha+%2B+1%29+y+%2B+12+%5Calpha+&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\displaystyle f_2 = x^2 - 2 \alpha^2 x + \alpha^3 z^2 - ( \alpha^3 + \alpha^2 + \alpha + 1) y + 12 \alpha "/><br/>
<img alt="\displaystyle f_3 = x^2 - 2 \alpha^3 x + \alpha^2 z^2 + \alpha y - 12 ( \alpha^3 + \alpha^2 + \alpha + 1) " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+f_3+%3D+x%5E2+-+2+%5Calpha%5E3+x+%2B+%5Calpha%5E2+z%5E2+%2B+%5Calpha+y+-+12+%28+%5Calpha%5E3+%2B+%5Calpha%5E2+%2B+%5Calpha+%2B+1%29+&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\displaystyle f_3 = x^2 - 2 \alpha^3 x + \alpha^2 z^2 + \alpha y - 12 ( \alpha^3 + \alpha^2 + \alpha + 1) "/><br/>
<img alt="\displaystyle f_4 = x^2 + 2 ( \alpha^3 + \alpha^2 + \alpha + 1) x + \alpha z^2 + \alpha^3 y + 12 \alpha^2 . " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+f_4+%3D+x%5E2+%2B+2+%28+%5Calpha%5E3+%2B+%5Calpha%5E2+%2B+%5Calpha+%2B+1%29+x+%2B+%5Calpha+z%5E2+%2B+%5Calpha%5E3+y+%2B+12+%5Calpha%5E2+.+&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\displaystyle f_4 = x^2 + 2 ( \alpha^3 + \alpha^2 + \alpha + 1) x + \alpha z^2 + \alpha^3 y + 12 \alpha^2 . "/></p>
<p style="text-align: justify;">The current SymPy factorization algorithm needs 215 seconds, whereas the new one only takes 60.3 seconds. More than three times faster! <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/352/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/352/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=352&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-15T17:56:51Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>katjasophie</name>
    </author>
    <source>
      <id>http://sophiessympyblog.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sophiessympyblog.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sophiessympyblog.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sophiessympyblog.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sophiessympyblog.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>my gsoc 2013 project</subtitle>
      <title>sophie's sympy blog</title>
      <updated>2014-01-14T17:20:51Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://thilinaatsympy.wordpress.com/?p=264</id>
    <link href="http://thilinaatsympy.wordpress.com/2013/09/14/status-of-the-diophantine-module-2/" rel="alternate" type="text/html"/>
    <title>Status of the Diophantine module</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi All, In my project proposal for a Diophantine equation for SymPy, I mentioned the following five deliverables. 1. Linear Diophantine equation : I implemented solutions for linear diophantine equations, you can access this functionality through `diop_linear()`. 2. Simplified Pell equation, : Not only I implemented solutions for simplified Pell equation, I completely solved the …<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=264&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi All,</p>
<p>In my project proposal for a Diophantine equation for SymPy, I mentioned the following five deliverables.</p>
<p>1. Linear Diophantine equation <img alt="a_1x_1 + a_2x_2 + . . . + a_nx_n = b" class="latex" src="http://s0.wp.com/latex.php?latex=a_1x_1+%2B+a_2x_2+%2B+.+.+.+%2B+a_nx_n+%3D+b&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a_1x_1 + a_2x_2 + . . . + a_nx_n = b"/>:<br/>
I implemented solutions for linear diophantine equations, you can access this functionality through `diop_linear()`.</p>
<p>2. Simplified Pell equation, <img alt="x^2 - Dy^2 = 1" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+-+Dy%5E2+%3D+1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 - Dy^2 = 1"/>:<br/>
Not only I implemented solutions for simplified Pell equation, I completely solved the general binary quadratic equation <img alt="ax^2 + bxy + cy^2 + dx + ey + f = 0" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%2B+dx+%2B+ey+%2B+f+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + bxy + cy^2 + dx + ey + f = 0"/>.</p>
<p>3. The equation, <img alt="x^2 + axy + y^2 = z^2" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+%2B+axy+%2B+y%5E2+%3D+z%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 + axy + y^2 = z^2"/>:<br/>
I implemented solutions for more general ternary quadratic equation <img alt="ax^2 + by^2 + cz^2 + dxy + eyz + fxz = 0" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%2B+cz%5E2+%2B+dxy+%2B+eyz+%2B+fxz+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + by^2 + cz^2 + dxy + eyz + fxz = 0"/>.</p>
<p>4. Extended Pythagorean equation,  <img alt="x_1^2 + x_2^2 + . . . + x_n^2 = x_{n+1}^2" class="latex" src="http://s0.wp.com/latex.php?latex=x_1%5E2+%2B+x_2%5E2+%2B+.+.+.+%2B+x_n%5E2+%3D+x_%7Bn%2B1%7D%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_1^2 + x_2^2 + . . . + x_n^2 = x_{n+1}^2"/>:<br/>
I implemented solutions for slightly more general equation <img alt="a_1^2x_1^2 + a_2^2x_2^2 + . . . + a_n^2x_n^2 = a_{n+1}^2x_{n+1}^2" class="latex" src="http://s0.wp.com/latex.php?latex=a_1%5E2x_1%5E2+%2B+a_2%5E2x_2%5E2+%2B+.+.+.+%2B+a_n%5E2x_n%5E2+%3D+a_%7Bn%2B1%7D%5E2x_%7Bn%2B1%7D%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a_1^2x_1^2 + a_2^2x_2^2 + . . . + a_n^2x_n^2 = a_{n+1}^2x_{n+1}^2"/>.</p>
<p>5. General sum of squares, <img alt="x_1^2 + x_2^2 + . . . + x_k^2 = n" class="latex" src="http://s0.wp.com/latex.php?latex=x_1%5E2+%2B+x_2%5E2+%2B+.+.+.+%2B+x_k%5E2+%3D+n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_1^2 + x_2^2 + . . . + x_k^2 = n"/>:<br/>
This is a computationally hard problem and method I implemented finds only one solution. It’s quick and work for large <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n"/> but not complete. I also implemented a brute force version which finds all the solutions but it doesn’t work for larger <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n"/>.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/264/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/264/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=264&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-14T17:22:56Z</updated>
    <category term="GSoC-2013-SymPy"/>
    <author>
      <name>Thilina Rathnayake</name>
    </author>
    <source>
      <id>http://thilinaatsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://thilinaatsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://thilinaatsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://thilinaatsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://thilinaatsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My Work related to sympy</subtitle>
      <title>Thilina's SymPy Blog</title>
      <updated>2014-01-14T17:20:47Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://thilinaatsympy.wordpress.com/?p=261</id>
    <link href="http://thilinaatsympy.wordpress.com/2013/09/14/change-of-plans-for-general-sum-of-squares/" rel="alternate" type="text/html"/>
    <title>Change of plans for general sum of squares</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi All, In my last post I described about Euler’s four square identity to for solving general sum of squares equation. My idea was to factorize the number, represent each prime as a sum of four squares, then use Euler’s four square identity to construct the sum of four squares representation for the original Number. …<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=261&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi All,</p>
<p>In my last post I described about Euler’s four square identity to for solving general sum of squares equation. My idea was to factorize the number, represent each prime as a sum of four squares, then use Euler’s four square identity to construct the sum of four squares representation for the original Number. But I found it slower than the algorithm I found <a href="http://www.schorn.ch/howto.html">here</a>. So I adapted the latter. The idea is to reduce the problem of representing a number as a sum of four squares to representing a number as a sum of three squares.</p>
<h4>Algorithm for representing a positive number n as a sum of three squares</h4>
<p>1. If <img alt="n == 0" class="latex" src="http://s0.wp.com/latex.php?latex=n+%3D%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n == 0"/>, then return <img alt="(0, 0, 0)" class="latex" src="http://s0.wp.com/latex.php?latex=%280%2C+0%2C+0%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(0, 0, 0)"/><br/>
2. Write <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n"/> as <img alt="4^vn_{1}" class="latex" src="http://s0.wp.com/latex.php?latex=4%5Evn_%7B1%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="4^vn_{1}"/><br/>
3. if <img alt="n_{1} \in S" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+%5Cin+S&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} \in S"/> then return the hard coded representation of <img alt="n_{1}" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1}"/>. Here, <img alt="S = {2, 3, 10, 34, 58, 85, 130, 214, 226, 370, 526, 706, 730, 1414, 1906, 2986, 9634}" class="latex" src="http://s0.wp.com/latex.php?latex=S+%3D+%7B2%2C+3%2C+10%2C+34%2C+58%2C+85%2C+130%2C+214%2C+226%2C+370%2C+526%2C+706%2C+730%2C+1414%2C+1906%2C+2986%2C+9634%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="S = {2, 3, 10, 34, 58, 85, 130, 214, 226, 370, 526, 706, 730, 1414, 1906, 2986, 9634}"/>. Representations for these numbers can be found <a href="http://www.schorn.ch/howto.html">here</a>.<br/>
4. If <img alt="n_{1}" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1}"/> is a perfect square then return <img alt="(2^v\sqrt{n_{1}}, 0, 0)" class="latex" src="http://s0.wp.com/latex.php?latex=%282%5Ev%5Csqrt%7Bn_%7B1%7D%7D%2C+0%2C+0%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(2^v\sqrt{n_{1}}, 0, 0)"/><br/>
5. if <img alt="n_{1} = 3 (mod 8)" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+3+%28mod+8%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} = 3 (mod 8)"/>, find an odd number <img alt="i, i &lt; \sqrt{n_{1}}" class="latex" src="http://s0.wp.com/latex.php?latex=i%2C+i+%3C+%5Csqrt%7Bn_%7B1%7D%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="i, i &lt; \sqrt{n_{1}}"/> such that <img alt="\frac{n_{1} - i^2}{2}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bn_%7B1%7D+-+i%5E2%7D%7B2%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\frac{n_{1} - i^2}{2}"/> is a prime. Set <img alt="x = i" class="latex" src="http://s0.wp.com/latex.php?latex=x+%3D+i&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x = i"/> and <img alt="p = \frac{n_{1} - i^2}{2}" class="latex" src="http://s0.wp.com/latex.php?latex=p+%3D+%5Cfrac%7Bn_%7B1%7D+-+i%5E2%7D%7B2%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="p = \frac{n_{1} - i^2}{2}"/>. Find two numbers <img alt="y, z" class="latex" src="http://s0.wp.com/latex.php?latex=y%2C+z&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="y, z"/> such that <img alt="y^2 + z^2 = p" class="latex" src="http://s0.wp.com/latex.php?latex=y%5E2+%2B+z%5E2+%3D+p&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="y^2 + z^2 = p"/>. (You can use Cornacchia’s  algorithm for this. Return <img alt="(2^vx, 2^v(y + z), 2^v|y - z|)" class="latex" src="http://s0.wp.com/latex.php?latex=%282%5Evx%2C+2%5Ev%28y+%2B+z%29%2C+2%5Ev%7Cy+-+z%7C%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(2^vx, 2^v(y + z), 2^v|y - z|)"/>.<br/>
6. If <img alt="n_{1} = 2 (mod 8)" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+2+%28mod+8%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} = 2 (mod 8)"/> or <img alt="n_{1} = 6 (mod 8)" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+6+%28mod+8%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} = 6 (mod 8)"/> then find an odd number <img alt="i, i &lt; \sqrt{n_{1}}" class="latex" src="http://s0.wp.com/latex.php?latex=i%2C+i+%3C+%5Csqrt%7Bn_%7B1%7D%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="i, i &lt; \sqrt{n_{1}}"/> such that <img alt="n_{1} - i^2" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+-+i%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} - i^2"/> is a prime. Else find an even number <img alt="i, i &lt; \sqrt{n_{1}}" class="latex" src="http://s0.wp.com/latex.php?latex=i%2C+i+%3C+%5Csqrt%7Bn_%7B1%7D%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="i, i &lt; \sqrt{n_{1}}"/> with the above requirement. Set <img alt="x = i" class="latex" src="http://s0.wp.com/latex.php?latex=x+%3D+i&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x = i"/> and <img alt="p = n_{1} - i^2" class="latex" src="http://s0.wp.com/latex.php?latex=p+%3D+n_%7B1%7D+-+i%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="p = n_{1} - i^2"/>. Find <img alt="y, z" class="latex" src="http://s0.wp.com/latex.php?latex=y%2C+z&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="y, z"/> such that <img alt="y^2 + z^2 = p" class="latex" src="http://s0.wp.com/latex.php?latex=y%5E2+%2B+z%5E2+%3D+p&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="y^2 + z^2 = p"/> . Return <img alt="(2^vx, 2^vy, 2^vz)" class="latex" src="http://s0.wp.com/latex.php?latex=%282%5Evx%2C+2%5Evy%2C+2%5Evz%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(2^vx, 2^vy, 2^vz)"/>.</p>
<p>Note that above algorithm can not be used if <img alt="n_{1} = 8k + 7" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+8k+%2B+7&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} = 8k + 7"/> for some integer <img alt="k \in Z" class="latex" src="http://s0.wp.com/latex.php?latex=k+%5Cin+Z&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k \in Z"/>. That is if <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n"/> is in the form <img alt="4^v(8k + 7)" class="latex" src="http://s0.wp.com/latex.php?latex=4%5Ev%288k+%2B+7%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="4^v(8k + 7)"/>.</p>
<h4>Algorithm for representing a positive number n as a sum of four squares</h4>
<p>Every non-negative integer <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n"/> can be represented as a sum of four squares.</p>
<p>1. Write <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n"/> as <img alt="4^vn_{1}" class="latex" src="http://s0.wp.com/latex.php?latex=4%5Evn_%7B1%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="4^vn_{1}"/>.<br/>
2. If <img alt="n_{1} = 7 (mod 8)" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+7+%28mod+8%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} = 7 (mod 8)"/> then set <img alt="d = 2" class="latex" src="http://s0.wp.com/latex.php?latex=d+%3D+2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="d = 2"/> and <img alt="n_{1} = n_{1} - 4" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+n_%7B1%7D+-+4&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} = n_{1} - 4"/>. If <img alt="n_{1} = 6 (mod 8)" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+6+%28mod+8%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} = 6 (mod 8)"/> or <img alt="n_{1} = 2 (mod 8)" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+2+%28mod+8%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} = 2 (mod 8)"/> then set <img alt="d = 1" class="latex" src="http://s0.wp.com/latex.php?latex=d+%3D+1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="d = 1"/> and <img alt="n_{1} = n_{1} - 1" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+n_%7B1%7D+-+1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1} = n_{1} - 1"/>. Otherwise set <img alt="d = 0" class="latex" src="http://s0.wp.com/latex.php?latex=d+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="d = 0"/>.<br/>
3. Use the algorithm described earlier to represent <img alt="n_{1}" class="latex" src="http://s0.wp.com/latex.php?latex=n_%7B1%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n_{1}"/> as a sum of three squares. Say, <img alt="x^2 + y^2 + z^2 = n" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+%2B+y%5E2+%2B+z%5E2+%3D+n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 + y^2 + z^2 = n"/>.<br/>
4. Return <img alt="(2^vd, 2^vx, 2^vy, 2^vz)" class="latex" src="http://s0.wp.com/latex.php?latex=%282%5Evd%2C+2%5Evx%2C+2%5Evy%2C+2%5Evz%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(2^vd, 2^vx, 2^vy, 2^vz)"/>.</p>
<p>By using these two algorithms one can represent any non-negative integer as a sum of four squares. In the general sum of squares equation, where a given integer <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n"/> needs to be represented as a sum of <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k"/> squares, we can divide <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k"/>  variables into segments of four and divide <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n"/> into that same number of segments and represent each segment by four squares using the algorithm given above.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/261/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/261/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=261&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-14T16:50:36Z</updated>
    <category term="GSoC-2013-SymPy"/>
    <category term="additive number theory"/>
    <category term="sum of four squares"/>
    <category term="sum of three squares"/>
    <author>
      <name>Thilina Rathnayake</name>
    </author>
    <source>
      <id>http://thilinaatsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://thilinaatsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://thilinaatsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://thilinaatsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://thilinaatsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My Work related to sympy</subtitle>
      <title>Thilina's SymPy Blog</title>
      <updated>2014-01-14T17:20:47Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://csousahome.wordpress.com/?p=120</id>
    <link href="http://csousahome.wordpress.com/2013/09/09/faster-common-subexpression-elimination-cse-in-sympy/" rel="alternate" type="text/html"/>
    <title>Faster Common Subexpression Elimination (CSE) in SymPy</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Over the past months I’ve been studying  how to improve performance of the Common Subexpression Elimination (CSE) routine of SymPy, so it can be used in SymPyBotics with acceptable computing times. This resulted in pull request #2355, which had already been merged into SymPy master branch (for release in version 0.7.4). Here is an example comparing both new and previous CSE implementations […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=csousahome.wordpress.com&amp;blog=24437078&amp;post=120&amp;subd=csousahome&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Over the past months I’ve been studying  how to improve performance of the Common Subexpression Elimination (CSE) routine of SymPy, so it can be used in <a href="http://cdsousa.github.com/sympybotics/" title="SymPyBotics">SymPyBotics</a> with acceptable computing times.</p>
<p>This resulted in pull request <a href="https://github.com/sympy/sympy/pull/2355" title="PR #2355">#2355</a>, which had already been merged into SymPy master branch (for release in version 0.7.4).</p>
<p><a href="http://nbviewer.ipython.org/5986996" title="CSE Implementations Comparison Example">Here</a> is an example comparing both new and previous CSE implementations when applied to the expressions of the ”generic torque”, computed with SymPyBotics, for the first 3 joints of a 7-DOF WAM Arm robot.</p>
<p>Cache has influence in times, but we can notice an average performance improvement of about 25x when external (pre and post) optimizations are used. When no external optimizations are used, the performance has an average improvement of <span style="text-decoration: underline;">90x</span>. With the new `order=’none’` option, the improvement rises to <span style="text-decoration: underline;">500x</span> for the non cached case, and to <span style="text-decoration: underline;">1000x</span> for the cached one!</p>
<p>For this particular case, the CSE is <span style="text-decoration: underline;">less</span> optimized when external optimizations are done (output has more operations) than when they are not.</p>
<h4><strong>How it works now</strong></h4>
<p>First, two remarks:</p>
<ul>
<li>expressions are not trees but rather directed acyclic graphs (DAG).  E.g., in the expression sin(x+1)+cos(x+1), the arguments of sin and cos are the same, x+1; indeed the node x+1 has two parents;</li>
<li>SymPy (sub)expressions are nicely and fastly hashable, thus great to use in sets and dictionaries.</li>
</ul>
<p>The CSE core/raw algorithm:</p>
<ol>
<li>The core of the new CSE parses the expression adding each seen subexpression to the <em>seen</em> set. If a subexpression was already seen, it is added to the <em>repeated</em> set and its children nodes are not parsed (there is no need to).</li>
<li>After knowing the repeated subexpressions (nodes with more than one parent), the core CSE rebuilds the whole tree using intermediate variables in place of repeated subexpressions.</li>
</ol>
<p>The internal optimizations:</p>
<ul>
<li>Before the core CSE algorithm is performed the expression is parsed to find optimization opportunities; when an optimizable subexpression is found it is added to the <em>opt_subs</em> substitutions dictionary.</li>
<li>When the core algorithm parses a subexpressions it looks for it in the <em>opt_subs</em> dictionary, if it is there is parses the substitution instead.</li>
<li>The currently implemented internal optimizations are the following:
<ul>
<li>negative signs are striped out from multiplications, e.g., -2*x is substituted by -1*(2*x)</li>
<li>negative signs are striped out from exponents, e.g., x**(-2*y) is substituted by (x**(2*y))**-1</li>
<li>common Add and Mul terms are grouped, e.g., in cos(a+b+c)+sin(a+b+d)),  a+b+c is substituted by (a+b)+c and a+b+d is substituted by (a+b)+d, so that a+b is a single and repeated node</li>
</ul>
</li>
</ul>
<h4>Future work</h4>
<p>In my opinion three things could further improve CSE:</p>
<ol>
<li>add support for MatrixExprs;</li>
<li>use replacement Symbols which could somehow clone the assumptions of the subexpressions they represent;</li>
<li>implement an optimal Mul/Add term matching system (maybe using Matthew Rocklin’s <a href="https://github.com/logpy/logpy" title="Logic Programming in Python">logpy</a> package).</li>
</ol><br/>Filed under: <a href="http://csousahome.wordpress.com/category/phd/">PhD</a>, <a href="http://csousahome.wordpress.com/category/sympybotics-2/">SymPyBotics</a>, <a href="http://csousahome.wordpress.com/category/work/">Work</a> Tagged: <a href="http://csousahome.wordpress.com/tag/python/">python</a>, <a href="http://csousahome.wordpress.com/tag/subexpression-elimination/">subexpression elimination</a>, <a href="http://csousahome.wordpress.com/tag/sympy/">sympy</a> <a href="http://feeds.wordpress.com/1.0/gocomments/csousahome.wordpress.com/120/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/csousahome.wordpress.com/120/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=csousahome.wordpress.com&amp;blog=24437078&amp;post=120&amp;subd=csousahome&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-09T11:59:37Z</updated>
    <category term="PhD"/>
    <category term="SymPyBotics"/>
    <category term="Work"/>
    <category term="python"/>
    <category term="subexpression elimination"/>
    <category term="sympy"/>
    <author>
      <name>csousa</name>
    </author>
    <source>
      <id>http://csousahome.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://csousahome.wordpress.com/tag/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://csousahome.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://csousahome.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://csousahome.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another blog</subtitle>
      <title>csousa home » sympy</title>
      <updated>2014-01-14T17:20:56Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://musingsofafriend.wordpress.com/?p=206</id>
    <link href="http://musingsofafriend.wordpress.com/2013/09/09/gsoc-week-12-things-are-finally-looking-up/" rel="alternate" type="text/html"/>
    <title>GSoC Week 12: Things are finally looking up!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week, finally, I was able to get the express method working completely. I knew that once the express method starts working, everything else will fall into place. And, as you might deduce from the title of the post, things … <a class="more-link" href="http://musingsofafriend.wordpress.com/2013/09/09/gsoc-week-12-things-are-finally-looking-up/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=206&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week, finally, I was able to get the express method working completely. I knew that once the express method starts working, everything else will fall into place. And, as you might deduce from the title of the post, things finally seem to be working.</p>
<p>First, a bit of background. I am developing a framework that can be used to represent vectors in Python and operate on them. There is this method called <em>express</em> that one can call on a vector and have it expressed in another coordinate systems. This vector calculus module was designed to with a very general approach – the vectors can be constructed from a variety of coordinate systems – the coordinate systems can be positioned, oriented and can also be in any orthogonal coordinate system (that are currently supported; new coordinate systems can be easily added). Also, and I won’t go into the details, the classes that represent vectors need to inherit from a SymPy class, <em>Basic</em>. This essentially means there’s a tree like structure of components so that objects can be decomposed into their forming components. All of this means decreased complexity for the user, but, increased complexity of the code. Anyway, as I was saying, the express method can be used to convert the vectors into different coordinate systems so that they can be operated on. I simply cannot overemphasize the importance of this one method. It took me a 3 weeks to finally be able to write this method and another 2 to test and make it work but finally, it got done this week.</p>
<p>Now that this method is working, I moved on the orientation methods. The majority of the work in this area was just the proper initialization of matrices when coordinate system objects are created. That was dealt with and as a result, the DCM methods (the methods that give the direction cosine matrices between two coordinate systems) are finally working as well.</p>
<p>Then, I wanted the operations on vectors to be working. Already, the basic operations of addition, subtraction, multiplication, division, expansion, factorization etc. were working. The next step was to get the dot and cross methods to work. That is what I did next. So, the dot and cross methods are now working.</p>
<p>Well, that was a bit of a long post. Anyway, I’d like to say that I did all this even though the next week (9-Sep-13 to 13-Sep-13) is the exam week. I didn’t study much in the last month. Usually, I would study really hard one week before the exams and hope for the best. But, I couldn’t follow my general practice this time. God knows what’ll happen this coming week! Anyway, just so that I don’t completely screw up my grades, I’ll try to study as much as humanly possible during the exam week and so, I won’t work at all during this week (till the weekend). That will give me from 13th evening to 16th night to get as much done as possible before the soft deadline. Then, there’d be about a week more before the hard deadline. Hopefully, I’ll be able to get most of the promised goals done by then including the documentation. Fingers crossed!</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/206/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/206/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=206&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-09T11:51:59Z</updated>
    <category term="Programming"/>
    <category term="Python"/>
    <category term="exams"/>
    <category term="SymPy"/>
    <category term="vectors"/>
    <author>
      <name>musingsofafriend</name>
    </author>
    <source>
      <id>http://musingsofafriend.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://musingsofafriend.wordpress.com/tag/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://musingsofafriend.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://musingsofafriend.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://musingsofafriend.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>The greatest WordPress.com site in all the land!</subtitle>
      <title>musings of a friend - Prasoon Shukla » SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://meclark256.wordpress.com/?p=167</id>
    <link href="http://meclark256.wordpress.com/2013/09/09/a-late-update/" rel="alternate" type="text/html"/>
    <title>A late update</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week has been work on the WeylGroup module, unsurprisingly.  I’ve implemented element_order and matrix_form for types A, B, C, D and G2, and matrix_form for E and F.  I think that implementing order for E and F is going to be much more difficult, because it’s not easy at all to realise those two […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=167&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week has been work on the WeylGroup module, unsurprisingly.  I’ve implemented element_order and matrix_form for types A, B, C, D and G2, and matrix_form for E and F.  I think that implementing order for E and F is going to be much more difficult, because it’s not easy at all to realise those two groups as permutations.  I’m going to look for the next day or two to see if I can find a clever way of doing it, but otherwise I’ll just utilise matrix_form to get the matrix representation of the element of the WeylGroup and then just brute force it to find the order of the element by just finding what power of the matrix gives the identity.  </p>
<p>I also changed bits in in the root_system PR to utilise Rational(x, y) instead of using floating point numbers. </p>
<p>I’m hoping to have most major coding done by the 13th, so I can spend the last 10 days of GSOC writing up more detailed docstrings and fixing other minor errors.</p>
<p> </p>
<p>Sorry for the short update, but I’m not feeling particularly verbose today.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/167/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/167/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=167&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-09T01:26:04Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>meclark256</name>
    </author>
    <source>
      <id>http://meclark256.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://meclark256.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://meclark256.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://meclark256.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://meclark256.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Smile! You’re at the best WordPress.com site ever</subtitle>
      <title>My GSOC Adventure with SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://manojbits.wordpress.com/?p=746</id>
    <link href="http://manojbits.wordpress.com/2013/09/06/towards-the-end/" rel="alternate" type="text/html"/>
    <title>Towards the end</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi, I finally managed to do some amount of work for the past ten days, and I’m happy to day that all that I had wanted to do this GSoC has been pushed in and I’m waiting for comments on my final Pull Request. These were the changes that I had made. 1. Making stuff […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=746&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi, I finally managed to do some amount of work for the past ten days, and I’m happy to day that all that I had wanted to do this GSoC has been pushed in and I’m waiting for comments on my final Pull Request. These were the changes that I had made.</p>
<p><strong>1. Making stuff similar to the series function </strong><br/>
While playing around with the code, I found out that, doing <strong>series(eq, n=terms)</strong>, gives the series expansion upto <img alt="O(x^n)" class="latex" src="http://s0.wp.com/latex.php?latex=O%28x%5En%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="O(x^n)"/> rather than the nth term. This makes the code look a lot neater too. Also the default power is 6, so I changes that too. For instance, take this sample SymPy session</p>
<pre class="brush: python; title: ; notranslate">from sympy import dsolve, series
from sympy.abc import x, y
f = Function("f")
pprint(series(exp(x))
         2    3    4     5        
        x    x    x     x     ⎛ 6⎞
1 + x + ── + ── + ── + ─── + O⎝x ⎠
        2    6    24   120       
eq = f(x).diff(x) - x*f(x)
pprint(dsolve(eq, hint='1st_power_series'))
                2       4        
            C₀⋅x    C₀⋅x     ⎛ 6⎞
f(x) = C₀ + ───── + ───── + O⎝x ⎠
              2       8       
</pre>
<p>I also added support for power series solutions of homogeneous differential equations at ordinary points, and regular singular points. A homogeneous second differential equation is of the form <img alt="P(x)\frac{d^2f}{dx^2} + Q(x)\frac{df}{dx} + R(x)" class="latex" src="http://s0.wp.com/latex.php?latex=P%28x%29%5Cfrac%7Bd%5E2f%7D%7Bdx%5E2%7D+%2B+Q%28x%29%5Cfrac%7Bdf%7D%7Bdx%7D+%2B+R%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="P(x)\frac{d^2f}{dx^2} + Q(x)\frac{df}{dx} + R(x)"/>. (Any DE mentioned below is homogeneous second order unless otherwise specified, because typing DE is easier than typing a homogeneous second order differential equation).<br/>
a] A point <img alt="x0" class="latex" src="http://s0.wp.com/latex.php?latex=x0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x0"/> is said to be ordinary, if <img alt="\frac{Q(x)}{P(x)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7BQ%28x%29%7D%7BP%28x%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{Q(x)}{P(x)}"/> and <img alt="\frac{R(x)}{P(x)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7BR%28x%29%7D%7BP%28x%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{R(x)}{P(x)}"/> are analytic at the point.<br/>
b] It is said to be regular singular, if <img alt="(x - x0)\frac{Q(x)}{P(x)}" class="latex" src="http://s0.wp.com/latex.php?latex=%28x+-+x0%29%5Cfrac%7BQ%28x%29%7D%7BP%28x%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="(x - x0)\frac{Q(x)}{P(x)}"/> and <img alt="(x - x0)^2\frac{Q(x)}{P(x)}" class="latex" src="http://s0.wp.com/latex.php?latex=%28x+-+x0%29%5E2%5Cfrac%7BQ%28x%29%7D%7BP%28x%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="(x - x0)^2\frac{Q(x)}{P(x)}"/> are analytic. For simplicity in the series expansions, assumptions are made such that <img alt="P(x)" class="latex" src="http://s0.wp.com/latex.php?latex=P%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="P(x)"/>, <img alt="Q(x)" class="latex" src="http://s0.wp.com/latex.php?latex=Q%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="Q(x)"/> and <img alt="R(x)" class="latex" src="http://s0.wp.com/latex.php?latex=R%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="R(x)"/> are polynomials. Okay, now for a bit more detail</p>
<p>1. <strong>Ordinary points</strong> : A DE has a power series solution, at <img alt="x0" class="latex" src="http://s0.wp.com/latex.php?latex=x0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x0"/>. This can be found by substituting <img alt="\sum_{k=0}^n a_{n}x^n" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csum_%7Bk%3D0%7D%5En+a_%7Bn%7Dx%5En&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\sum_{k=0}^n a_{n}x^n"/> in the DE, and equating the nth coefficient in order to obtain a recurrence relation. However this is not as trivial as it sounds and was one of the more tougher things I had to do.</p>
<p>Take the general case of <img alt="P(x)\frac{d^2f}{dx^2} + Q(x)\frac{df}{dx} + R(x)" class="latex" src="http://s0.wp.com/latex.php?latex=P%28x%29%5Cfrac%7Bd%5E2f%7D%7Bdx%5E2%7D+%2B+Q%28x%29%5Cfrac%7Bdf%7D%7Bdx%7D+%2B+R%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="P(x)\frac{d^2f}{dx^2} + Q(x)\frac{df}{dx} + R(x)"/>. Substituting <img alt="y" class="latex" src="http://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="y"/> as <img alt="\sum_{n = 0}^\infty a_{n}x^n" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csum_%7Bn+%3D+0%7D%5E%5Cinfty+a_%7Bn%7Dx%5En&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\sum_{n = 0}^\infty a_{n}x^n"/> in the DE. (One has to expand each of the terms <img alt="P(x)" class="latex" src="http://s0.wp.com/latex.php?latex=P%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="P(x)"/>, <img alt="Q(x)" class="latex" src="http://s0.wp.com/latex.php?latex=Q%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="Q(x)"/> and <img alt="R(x)" class="latex" src="http://s0.wp.com/latex.php?latex=R%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="R(x)"/>), make transformations such that for each term the power of <img alt="x" class="latex" src="http://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x"/> is <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="n"/>. The catch here is that the starting point of the summation also changes, so the necessary terms shouls be stripped off such that the starting point is same. This is better explained in one of these tutorials, <a href="http://tutorial.math.lamar.edu/Classes/DE/SeriesSolutions.aspx" rel="nofollow">http://tutorial.math.lamar.edu/Classes/DE/SeriesSolutions.aspx</a> , so you could read that after you’ve read the rest of the blogpost.</p>
<p>A small sample session.</p>
<pre class="brush: python; title: ; notranslate">from sympy import *
from sympy.abc import x, y
eq = (1 + x**2)*(f(x).diff(x, 2)) + 2*x*(f(x).diff(x)) -2*f(x)
pprint(eq)
                          2               
    d          ⎛ 2    ⎞  d                
2⋅x⋅──(f(x)) + ⎝x  + 1⎠⋅───(f(x)) - 2⋅f(x)
    dx                    2               
                        dx
pprint(dsolve(eq))
                 ⎛   4         ⎞        
                 ⎜  x     2    ⎟    ⎛ 6⎞
f(x) = C₁⋅x + C₀⋅⎜- ── + x  + 1⎟ + O⎝x ⎠
                 ⎝  3          ⎠
eq = f(x).diff(x, 2) + x*(f(x).diff(x)) + f(x)
pprint(eq)
                      2      
  d                  d       
x⋅──(f(x)) + f(x) + ───(f(x))
  dx                  2      
                    dx
pprint(dsolve(eq))
            ⎛   2    ⎞      ⎛ 4    2    ⎞        
            ⎜  x     ⎟      ⎜x    x     ⎟    ⎛ 6⎞
f(x) = C₁⋅x⋅⎜- ── + 1⎟ + C₀⋅⎜── - ── + 1⎟ + O⎝x ⎠
            ⎝  3     ⎠      ⎝8    2     ⎠  
</pre>
<p>2. <strong>Regular singular points</strong> :<br/>
    1.  Try expressing <img alt="(x - x0)P(x)" class="latex" src="http://s0.wp.com/latex.php?latex=%28x+-+x0%29P%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="(x - x0)P(x)"/> and <img alt="((x - x0)^{2})Q(x)" class="latex" src="http://s0.wp.com/latex.php?latex=%28%28x+-+x0%29%5E%7B2%7D%29Q%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="((x - x0)^{2})Q(x)"/> as power series<br/>
        solutions about <img alt="x0" class="latex" src="http://s0.wp.com/latex.php?latex=x0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x0"/>. Find <img alt="p0" class="latex" src="http://s0.wp.com/latex.php?latex=p0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="p0"/> and <img alt="q0" class="latex" src="http://s0.wp.com/latex.php?latex=q0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="q0"/> which are the constants of the<br/>
        power series expansions.<br/>
    2.  Solve the indicial equation <img alt="f(m) = m(m - 1) + m*p0 + q0" class="latex" src="http://s0.wp.com/latex.php?latex=f%28m%29+%3D+m%28m+-+1%29+%2B+m%2Ap0+%2B+q0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="f(m) = m(m - 1) + m*p0 + q0"/>, to obtain the<br/>
        roots <img alt="m1" class="latex" src="http://s0.wp.com/latex.php?latex=m1&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="m1"/> and <img alt="m2" class="latex" src="http://s0.wp.com/latex.php?latex=m2&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="m2"/> of the indicial equation.<br/>
    3.  If <img alt="m1 - m2" class="latex" src="http://s0.wp.com/latex.php?latex=m1+-+m2&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="m1 - m2"/> is a non integer there exists two series solutions. If<br/>
        <img alt="m1 = m2" class="latex" src="http://s0.wp.com/latex.php?latex=m1+%3D+m2&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="m1 = m2"/>, there exists only one solution. If <img alt="m1 - m2" class="latex" src="http://s0.wp.com/latex.php?latex=m1+-+m2&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="m1 - m2"/> is an integer,<br/>
        then the existence of one solution is confirmed. The other solution may<br/>
        or may not exist.</p>
<p>    The power series solution is of the form <img alt="x^{m}\sum_{n=0}^\infty a_{n}x^n" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E%7Bm%7D%5Csum_%7Bn%3D0%7D%5E%5Cinfty+a_%7Bn%7Dx%5En&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x^{m}\sum_{n=0}^\infty a_{n}x^n"/>. The<br/>
    coefficients are determined by the following recurrence relation.<br/>
    <img alt="a_{n} = -\frac{\sum_{k=0}^{n-1} q_{n-k} + (m + k)p_{n-k}}{f(m + n)}" class="latex" src="http://s0.wp.com/latex.php?latex=a_%7Bn%7D+%3D+-%5Cfrac%7B%5Csum_%7Bk%3D0%7D%5E%7Bn-1%7D+q_%7Bn-k%7D+%2B+%28m+%2B+k%29p_%7Bn-k%7D%7D%7Bf%28m+%2B+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="a_{n} = -\frac{\sum_{k=0}^{n-1} q_{n-k} + (m + k)p_{n-k}}{f(m + n)}"/>. For the case<br/>
    in which <img alt="m1 - m2" class="latex" src="http://s0.wp.com/latex.php?latex=m1+-+m2&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="m1 - m2"/> is an integer, it can be seen from the recurrence relation<br/>
    that for the lower root <img alt="m" class="latex" src="http://s0.wp.com/latex.php?latex=m&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="m"/>, when <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="n"/> equals the difference of both the<br/>
    roots, the denominator becomes zero. So if the numerator is not equal to zero,<br/>
    a second series solution exists. (Oh and by the way I just copy – pasted the docstring for the<br/>
    last part, because I was lazy to write the whole thing again :P)</p>
<pre class="brush: python; title: ; notranslate">    eq = x**2*(f(x).diff(x, 2)) - 3*x*(f(x).diff(x)) + (4*x + 4)*f(x)  # One solution
    pprint(dsolve(eq))
                ⎛      3                 ⎞        
              2 ⎜  16⋅x       2          ⎟    ⎛ 6⎞
   f(x) = C₀⋅x ⋅⎜- ───── + 4⋅x  - 4⋅x + 1⎟ + O⎝x ⎠
                ⎝    9                   ⎠  
    eq = x**2*(f(x).diff(x, 2)) - x**2*(f(x).diff(x)) + (
        x**2 - 2)*f(x)  # Two solutions
             ⎛    6      5    4    2        ⎞                                    
             ⎜   x    3⋅x    x    x    x    ⎟                                    
          C₁⋅⎜- ─── - ──── - ── + ── + ─ + 1⎟         ⎛   3    2        ⎞        
             ⎝  720    80    8    2    2    ⎠       2 ⎜  x    x    x    ⎟    ⎛ 6⎞
   f(x) = ─────────────────────────────────── + C₀⋅x ⋅⎜- ── + ── + ─ + 1⎟ + O⎝x ⎠
                           x                          ⎝  60   20   2    ⎠  
    </pre>
<p>Anyway, that sums up my official GSoC work. Now that I just need to address comments made on my PR which is at, <a href="https://github.com/sympy/sympy/pull/2395" rel="nofollow">https://github.com/sympy/sympy/pull/2395</a> . And I just realised that I have my exams coming up the next week, and its been a while since I touched my books (and gone to classes), and thats not a good thing. So have to catch up there. Seems like my whole life is about catching up.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/746/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/746/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=746&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-06T17:13:24Z</updated>
    <category term="SymPy"/>
    <category term="differential"/>
    <category term="differential equations"/>
    <category term="frobenius"/>
    <category term="gsoc"/>
    <category term="gsoc2013"/>
    <category term="ode"/>
    <category term="power series"/>
    <category term="python"/>
    <category term="sympy"/>
    <author>
      <name>Manoj Kumar</name>
    </author>
    <source>
      <id>http://manojbits.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://manojbits.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://manojbits.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://manojbits.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://manojbits.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>From a learner's perspective</subtitle>
      <title>Perspective » SymPy</title>
      <updated>2014-01-14T17:20:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://geekiology.wordpress.com/?p=410</id>
    <link href="http://geekiology.wordpress.com/2013/09/03/testing-of-cds-and-is_deriv-branches/" rel="alternate" type="text/html"/>
    <title>Testing of cds and is_deriv branches</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Currently we have merged cds and is_deriv branch to test and make the code working. We have been working to find the possible test errors to debug the every-bit of any condition added to the code This week I have worked on the issue of solving infinite loop in cds.py Cases Like: I am happy […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;blog=36553244&amp;post=410&amp;subd=geekiology&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Currently we have merged cds and is_deriv branch to test and make the code working. We have been working to find the possible test errors to debug the every-bit of any condition added to the code</p>
<p>This week I have worked on the issue of solving infinite loop in cds.py<br/>
Cases Like:</p>
<pre class="brush: python; title: ; notranslate">cds_cancel_primitive(Poly(sqrt(-1), t2), Poly(x, t2), Poly(2*x, t2),
 Poly(2*x/(x**2 + 1) - x*t2), Poly(2*x/(x**2 + 1) + 3*x*t2), DE, 5)
</pre>
<p>I am happy to announce that after having a brainstorming week, trying to look for every parameter missing, I did finally resolve the error of the infinite loop.<br/>
This would mean that integrate_hypertangent would start working for complicated tests etc and hence we would be able to get answers for rich_integrate for some of the hypertangent cases now.</p>
<p>Ouptut for the test</p>
<p>Above case translates as follows:<br/>
<img alt="\begin{pmatrix}2*x/(x^2 + 1)\\ 2*x/(x^2 + 1) \end{pmatrix} + \begin{pmatrix}x &amp; -2x\\ 2x &amp; x\end{pmatrix}\begin{pmatrix}t2\\ t2\end{pmatrix}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbegin%7Bpmatrix%7D2%2Ax%2F%28x%5E2+%2B+1%29%5C%5C+2%2Ax%2F%28x%5E2+%2B+1%29+%5Cend%7Bpmatrix%7D+%2B+%5Cbegin%7Bpmatrix%7Dx+%26+-2x%5C%5C+2x+%26+x%5Cend%7Bpmatrix%7D%5Cbegin%7Bpmatrix%7Dt2%5C%5C+t2%5Cend%7Bpmatrix%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\begin{pmatrix}2*x/(x^2 + 1)\\ 2*x/(x^2 + 1) \end{pmatrix} + \begin{pmatrix}x &amp; -2x\\ 2x &amp; x\end{pmatrix}\begin{pmatrix}t2\\ t2\end{pmatrix}"/> = <img alt="\begin{pmatrix}2*x/(x^2 + 1) - x*t2\\ 2*x/(x^2 + 1) + 3x t2 \end{pmatrix}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbegin%7Bpmatrix%7D2%2Ax%2F%28x%5E2+%2B+1%29+-+x%2At2%5C%5C+2%2Ax%2F%28x%5E2+%2B+1%29+%2B+3x+t2+%5Cend%7Bpmatrix%7D&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\begin{pmatrix}2*x/(x^2 + 1) - x*t2\\ 2*x/(x^2 + 1) + 3x t2 \end{pmatrix}"/><br/>
where t2 = <img alt="log(x^2 + 1)" class="latex" src="http://s0.wp.com/latex.php?latex=log%28x%5E2+%2B+1%29&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="log(x^2 + 1)"/></p>
<p><a href="http://geekiology.files.wordpress.com/2013/09/screenshot-from-2013-09-03-180938.png"><img alt="Screenshot from 2013-09-03 18:09:38" class="alignnone size-medium wp-image-417" height="168" src="http://geekiology.files.wordpress.com/2013/09/screenshot-from-2013-09-03-180938.png?w=300&amp;h=168" width="300"/></a></p>
<p>Previous week<br/>
I and Aaron solved the major difficulties incurred in the is_deriv part of the code.<br/>
<a href="http://geekiology.files.wordpress.com/2013/09/screenshot-from-2013-09-03-175154.png"><img alt="Screenshot from 2013-09-03 17:51:54" class="alignnone size-medium wp-image-413" height="168" src="http://geekiology.files.wordpress.com/2013/09/screenshot-from-2013-09-03-175154.png?w=300&amp;h=168" width="300"/></a><br/>
Cases like above where giving incorrect answers before, have a solution now.</p>
<p>The only issues which is till unresolved from the precious week is the infinite loops for polynomial_reduce kt . While I see similar issues in the original code for case polynomial_reduce(Poly((-64*t**6 + 64*t**4 + 64*t**2 – 64, t)/(2048*t**4 – 4096*t**2 + 2048)), DE) I am not able to find the stopping-condition for the same in the book.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/410/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/410/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;blog=36553244&amp;post=410&amp;subd=geekiology&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-03T13:10:40Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>chetnagupta</name>
    </author>
    <source>
      <id>http://geekiology.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://geekiology.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://geekiology.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://geekiology.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://geekiology.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>GSoC 2013 Blog</subtitle>
      <title>Risch Algorithm</title>
      <updated>2014-01-14T17:20:44Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-5472769892551526876.post-6552318906702222104</id>
    <link href="http://codesachin.blogspot.com/feeds/6552318906702222104/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=5472769892551526876&amp;postID=6552318906702222104" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/6552318906702222104" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/6552318906702222104" rel="self" type="application/atom+xml"/>
    <link href="http://codesachin.blogspot.com/2013/09/gsoc-week-10-and-11-modifying-mechanics.html" rel="alternate" type="text/html"/>
    <title>GSoC Week 10 and 11 : Modifying the mechanics core</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">Unfortunately, as GSoC is drawing to an end, my workload at college seems to be increasing too. Hence, I haven't been able to work for the project as much as I would have liked, though I have a new PR in queue. Since Prasoon's Vector module isn't close to completion yet, Gilbert and I decided to go ahead and modify and hack the current framework to make space for the modifications I require for my work.<br/>Last week, I opened a PR with the said modifications, but as I had expected, there are a *lot* of errors to be resolved. Changing one thing at one place gives rise to a hundred errors elsewhere in the module - my lesson for the week. We decided to go ahead and implement the caching of dcms and variable maps generated wrt pairs of reference frames, and it has led to quite some inconsistencies here and there. I am still struggling with them, I hope I can resolve all of them in a day or two. By this week-end, I should have this PR merged and a new one, with the new classes, opened.<br/>About EM, I dint get to do much, I just implemented ideal dipoles and wrote tests for them. I still haven't pushed them to the PR. Will do that soon, I guess.<br/>That's all there is for this week. Most probably, my GSoC work is going to stretch beyond the timeline, though that's not really a problem. Hope at the end of it, the code is perfectly shippable :-)<br/>Have a good week!</div></div>
    </content>
    <updated>2013-09-01T15:01:30Z</updated>
    <published>2013-09-01T15:01:00Z</published>
    <author>
      <name>Sachin Joglekar</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/106302547764750990775</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5472769892551526876</id>
      <author>
        <name>Sachin Joglekar</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://codesachin.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>-Sachin Joglekar-</subtitle>
      <title>Dream. Think. Code.</title>
      <updated>2013-11-30T11:34:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sophiessympyblog.wordpress.com/?p=281</id>
    <link href="http://sophiessympyblog.wordpress.com/2013/09/01/10th-and-11th-week/" rel="alternate" type="text/html"/>
    <title>10th and 11th week</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Wow, time seems to be flying right now, it’s already been two weeks again! In order to keep things clear, I described the factorization algorithm I am currently working on in another post. So here I want to talk about my progress and problems in the last two weeks. Let’s start with good news. My […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=281&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: justify;">Wow, time seems to be flying right now, it’s already been two weeks again! In order to keep things clear, I described the factorization algorithm I am currently working on in <a href="http://sophiessympyblog.wordpress.com/2013/09/01/factoring-polynomials-over-algebraic-number-fields/" title="Factoring polynomials over algebraic number&#xA0;fields">another post</a>. So here I want to talk about my progress and problems in the last two weeks.</p>
<p style="text-align: justify;">Let’s start with good news. My first two PRs have been merged! So now the modular GCD algorithms I implemented for polynomials over the integers and algebraic number fields are part of SymPy. <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p style="text-align: justify;">Progress on the factorization algorithm has not been as fast as I would have liked. I spent a lot of time with Hensel lifting, since the description of the algorithm is not very explicit in this part. I ended up adapting the already implemented Hensel lifting code to my use case. The last (big) part missing is the sparse <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="p"/>-adic lifting algorithm. The problem here is that I would have to solve a cumbersome system of linear equations over <img alt="\mathbb Z_{p^m}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_%7Bp%5Em%7D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z_{p^m}"/>. One possible way to work around this is to choose a large prime so that no lifting is necessary, which is the way it is currently done in the integer polynomial case. But of course, a lifting would be more efficient.</p>
<p style="text-align: justify;">I already made successful factorizations (by using big enough primes) for certain polynomials, and next week I hope to get it to work for arbitrary ones.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/281/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/281/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=281&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-01T14:52:35Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>katjasophie</name>
    </author>
    <source>
      <id>http://sophiessympyblog.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sophiessympyblog.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sophiessympyblog.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sophiessympyblog.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sophiessympyblog.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>my gsoc 2013 project</subtitle>
      <title>sophie's sympy blog</title>
      <updated>2014-01-14T17:20:51Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sophiessympyblog.wordpress.com/?p=283</id>
    <link href="http://sophiessympyblog.wordpress.com/2013/09/01/factoring-polynomials-over-algebraic-number-fields/" rel="alternate" type="text/html"/>
    <title>Factoring polynomials over algebraic number fields</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In this post I will describe the factorization algorithm given in [1] for polynomials over simple algebraic extensions of . First, I have to introduce some definitions and notations. We define the denominator of a polynomial as the smallest integer, such that . Most of the time we will work with the monic associate instead of […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=283&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: justify;">In this post I will describe the factorization algorithm given in [1] for polynomials over simple algebraic extensions of <img alt="\mathbb Q" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Q&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Q"/>.</p>
<p style="text-align: justify;">First, I have to introduce some definitions and notations.<br/>
We define the <em>denominator </em><img alt="\mathrm{den}(f)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathrm%7Bden%7D%28f%29&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathrm{den}(f)"/> of a polynomial <img alt="f \in \mathbb Q(\alpha)[x_o, \ldots, x_n]" class="latex" src="http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathbb+Q%28%5Calpha%29%5Bx_o%2C+%5Cldots%2C+x_n%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f \in \mathbb Q(\alpha)[x_o, \ldots, x_n]"/> as the smallest integer, such that <img alt="\mathrm{den}(f) f \in \mathbb Z[x_o, \ldots, x_n, z]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathrm%7Bden%7D%28f%29+f+%5Cin+%5Cmathbb+Z%5Bx_o%2C+%5Cldots%2C+x_n%2C+z%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathrm{den}(f) f \in \mathbb Z[x_o, \ldots, x_n, z]"/>. Most of the time we will work with the <em>monic associate </em><em> </em><img alt="\tilde f \in \mathbb Z[x_o, \ldots, x_n, z]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctilde+f+%5Cin+%5Cmathbb+Z%5Bx_o%2C+%5Cldots%2C+x_n%2C+z%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\tilde f \in \mathbb Z[x_o, \ldots, x_n, z]"/> instead of <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f"/>. It is defined as the associate of <img alt="\mathrm{den}\left(\frac 1 {\mathrm{lc}(f)} f \right) \frac 1 {\mathrm{lc}(f)} f" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathrm%7Bden%7D%5Cleft%28%5Cfrac+1+%7B%5Cmathrm%7Blc%7D%28f%29%7D+f+%5Cright%29+%5Cfrac+1+%7B%5Cmathrm%7Blc%7D%28f%29%7D+f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathrm{den}\left(\frac 1 {\mathrm{lc}(f)} f \right) \frac 1 {\mathrm{lc}(f)} f"/> which is primitive in <img alt="x_o, \ldots, x_n, z" class="latex" src="http://s0.wp.com/latex.php?latex=x_o%2C+%5Cldots%2C+x_n%2C+z&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="x_o, \ldots, x_n, z"/>.</p>
<p style="text-align: justify;">We will assume that the input polynomial <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f"/> is square-free and primitive in <img alt="x_o" class="latex" src="http://s0.wp.com/latex.php?latex=x_o&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="x_o"/>, because if this is not the case, <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f"/> can be easily factored into square-free parts and its content in <img alt="x_o" class="latex" src="http://s0.wp.com/latex.php?latex=x_o&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="x_o"/>. This can be done using only GCD computations.</p>
<p style="text-align: justify;">First, we compute <img alt="\tilde f" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctilde+f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\tilde f"/> and recursively call our algorithm to factor its leading coefficient in <img alt="x_0" class="latex" src="http://s0.wp.com/latex.php?latex=x_0&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="x_0"/> and obtain</p>
<p align="center" style="text-align: center;"><img alt="\displaystyle \mathrm{lc}_{x_o} (\tilde f) = \gamma \cdot \prod_{i = 1}^r l_i^{e_i}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cmathrm%7Blc%7D_%7Bx_o%7D+%28%5Ctilde+f%29+%3D+%5Cgamma+%5Ccdot+%5Cprod_%7Bi+%3D+1%7D%5Er+l_i%5E%7Be_i%7D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\displaystyle \mathrm{lc}_{x_o} (\tilde f) = \gamma \cdot \prod_{i = 1}^r l_i^{e_i}"/></p>
<p style="text-align: justify;">in <img alt="\mathbb Q(\alpha)[x_1, \ldots, x_n]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28%5Calpha%29%5Bx_1%2C+%5Cldots%2C+x_n%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Q(\alpha)[x_1, \ldots, x_n]"/>. If we get to the univariate case, we use the existing factoring algorithm by Trager.</p>
<p style="text-align: justify;">Now we enter the main loop. We choose a new evaluation point <img alt="\mathbf a = (a_1, \ldots, a_n) \in \mathbb Z^{n}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbf+a+%3D+%28a_1%2C+%5Cldots%2C+a_n%29+%5Cin+%5Cmathbb+Z%5E%7Bn%7D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbf a = (a_1, \ldots, a_n) \in \mathbb Z^{n}"/>, which has to satisfy certain conditions, e. g. <img alt="\tilde f(x_o, \mathbf a)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctilde+f%28x_o%2C+%5Cmathbf+a%29&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\tilde f(x_o, \mathbf a)"/> has to stay square-free.</p>
<p style="text-align: justify;">Again we use Trager’s algorithm, this time to factor <img alt="\tilde f(x_o, \mathbf a)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctilde+f%28x_o%2C+%5Cmathbf+a%29&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\tilde f(x_o, \mathbf a)"/> in <img alt="\mathbb Q(\alpha)[x_o]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28%5Calpha%29%5Bx_o%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Q(\alpha)[x_o]"/> and obtain</p>
<p align="center"><img alt="\displaystyle \tilde f(x_o, \mathbf a) = \Omega' \cdot \prod_{j = 1}^s u_j," class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Ctilde+f%28x_o%2C+%5Cmathbf+a%29+%3D+%5COmega%27+%5Ccdot+%5Cprod_%7Bj+%3D+1%7D%5Es+u_j%2C&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\displaystyle \tilde f(x_o, \mathbf a) = \Omega' \cdot \prod_{j = 1}^s u_j,"/></p>
<p style="text-align: justify;">where <img alt="\Omega' = \mathrm{lc}_{x_o}(f(x_o, \mathbf a)) \in \mathbb Q(\alpha)" class="latex" src="http://s0.wp.com/latex.php?latex=%5COmega%27+%3D+%5Cmathrm%7Blc%7D_%7Bx_o%7D%28f%28x_o%2C+%5Cmathbf+a%29%29+%5Cin+%5Cmathbb+Q%28%5Calpha%29&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\Omega' = \mathrm{lc}_{x_o}(f(x_o, \mathbf a)) \in \mathbb Q(\alpha)"/>. Note that if <img alt="\tilde f(x_o, \mathbf a)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctilde+f%28x_o%2C+%5Cmathbf+a%29&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\tilde f(x_o, \mathbf a)"/> is irreducible, we know that <img alt="\tilde f" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctilde+f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\tilde f"/> is irreducible and hence <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f"/>, so in this case we are done.</p>
<p style="text-align: justify;">In order to use Hensel lifting, we need to compute the true leading coefficients <img alt="\bar l_1, \ldots, \bar l_r \in \mathbb Q(\alpha)[x_1, \ldots, x_n]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbar+l_1%2C+%5Cldots%2C+%5Cbar+l_r+%5Cin+%5Cmathbb+Q%28%5Calpha%29%5Bx_1%2C+%5Cldots%2C+x_n%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\bar l_1, \ldots, \bar l_r \in \mathbb Q(\alpha)[x_1, \ldots, x_n]"/> of the irreducible factors of <img alt="\tilde f" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctilde+f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\tilde f"/>. This can be done with simple GCD computations.</p>
<p style="text-align: justify;">Now we choose a new prime <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="p"/>, which also has to satisfy certain requirements, e.g. <img alt="\tilde f(x_o, \mathbf a) \; \mathrm{mod} \, p" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctilde+f%28x_o%2C+%5Cmathbf+a%29+%5C%3B+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\tilde f(x_o, \mathbf a) \; \mathrm{mod} \, p"/> is still square-free and the minimal polynomial <img alt="\mu(z)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmu%28z%29&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mu(z)"/> of <img alt="\alpha" class="latex" src="http://s0.wp.com/latex.php?latex=%5Calpha&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\alpha"/> is still irreducible modulo <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="p"/>.</p>
<p style="text-align: justify;">Since evaluating at <img alt="x_1 = a_1, \ldots, x_n = a_n" class="latex" src="http://s0.wp.com/latex.php?latex=x_1+%3D+a_1%2C+%5Cldots%2C+x_n+%3D+a_n&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="x_1 = a_1, \ldots, x_n = a_n"/> is the same as factoring modulo the ideal <img alt="\mathcal I" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathcal+I&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathcal I"/> generated by <img alt="x_1 - a_1, \ldots, x_n - a_n" class="latex" src="http://s0.wp.com/latex.php?latex=x_1+-+a_1%2C+%5Cldots%2C+x_n+-+a_n&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="x_1 - a_1, \ldots, x_n - a_n"/>, we can use Hensel lifting to lift the univariate factors <img alt="u_1, \ldots, u_s" class="latex" src="http://s0.wp.com/latex.php?latex=u_1%2C+%5Cldots%2C+u_s&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="u_1, \ldots, u_s"/> and obtain</p>
<p align="center"><img alt="\displaystyle \tilde f(x_o, \ldots, x_n) = l \cdot \prod_{j = 1}^s \bar f_j(x_o, \ldots, x_n) \; \mathrm{mod} \, \left\langle p, \mathcal I^T\right\rangle," class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Ctilde+f%28x_o%2C+%5Cldots%2C+x_n%29+%3D+l+%5Ccdot+%5Cprod_%7Bj+%3D+1%7D%5Es+%5Cbar+f_j%28x_o%2C+%5Cldots%2C+x_n%29+%5C%3B+%5Cmathrm%7Bmod%7D+%5C%2C+%5Cleft%5Clangle+p%2C+%5Cmathcal+I%5ET%5Cright%5Crangle%2C&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\displaystyle \tilde f(x_o, \ldots, x_n) = l \cdot \prod_{j = 1}^s \bar f_j(x_o, \ldots, x_n) \; \mathrm{mod} \, \left\langle p, \mathcal I^T\right\rangle,"/></p>
<p style="text-align: justify;">where <img alt="T \in \mathbb N" class="latex" src="http://s0.wp.com/latex.php?latex=T+%5Cin+%5Cmathbb+N&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="T \in \mathbb N"/> is chosen large enough.</p>
<p style="text-align: justify;">That means, we have the correct factorization modulo the prime <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="p"/>. In order to get the desired factorization, we use a procedure that is also based on Hensel’s Lemma, called <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="p"/>-adic lifting. We lift the factors <img alt="\bar f_j" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbar+f_j&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\bar f_j"/> from <img alt="\mathbb Z_p(\alpha)[x_o, \ldots, x_n]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%28%5Calpha%29%5Bx_o%2C+%5Cldots%2C+x_n%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z_p(\alpha)[x_o, \ldots, x_n]"/> to <img alt="\mathbb Z_{p^m}(\alpha)[x_o, \ldots, x_n]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_%7Bp%5Em%7D%28%5Calpha%29%5Bx_o%2C+%5Cldots%2C+x_n%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z_{p^m}(\alpha)[x_o, \ldots, x_n]"/>, where <img alt="m" class="latex" src="http://s0.wp.com/latex.php?latex=m&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="m"/> is chosen big enough, such that</p>
<p align="center"><img alt="\displaystyle \tilde f(x_o, \ldots, x_n) = l \cdot \prod_{j = 1}^s f_j(x_o, \ldots, x_n) " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Ctilde+f%28x_o%2C+%5Cldots%2C+x_n%29+%3D+l+%5Ccdot+%5Cprod_%7Bj+%3D+1%7D%5Es+f_j%28x_o%2C+%5Cldots%2C+x_n%29+&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\displaystyle \tilde f(x_o, \ldots, x_n) = l \cdot \prod_{j = 1}^s f_j(x_o, \ldots, x_n) "/></p>
<p>also holds over <img alt="\mathbb Q(\alpha)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28%5Calpha%29&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Q(\alpha)"/> and we are done.</p>
<p>[1] <a href="http://www.cecm.sfu.ca/~monaganm/papers/mahdiFactor.pdf" rel="nofollow">http://www.cecm.sfu.ca/~monaganm/papers/mahdiFactor.pdf</a></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/283/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/283/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=283&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-09-01T13:21:54Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>katjasophie</name>
    </author>
    <source>
      <id>http://sophiessympyblog.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sophiessympyblog.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sophiessympyblog.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sophiessympyblog.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sophiessympyblog.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>my gsoc 2013 project</subtitle>
      <title>sophie's sympy blog</title>
      <updated>2014-01-14T17:20:51Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://thilinaatsympy.wordpress.com/?p=237</id>
    <link href="http://thilinaatsympy.wordpress.com/2013/08/31/status-of-the-diophantine-module/" rel="alternate" type="text/html"/>
    <title>Status of the Diophantine Module</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi All, I am really pleased to say that my work (proposed) with Diophantine equation is coming to an end. I have implemented all the deliverables in my project report. When the current PR gets merged into the master, I can start pushing the rest of my work. I also hope to improve the documentation …<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=237&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi All,</p>
<p>I am really pleased to say that my work (proposed) with Diophantine equation is coming to an end. I have implemented all the deliverables in my project report. When the current <a href="https://github.com/sympy/sympy/pull/2303">PR</a> gets merged into the master, I can start pushing the rest of my work. I also hope to improve the documentation during the weekend and get them in quickly. Ondrej is currently reviewing the PR. I invite all of you to go through the work and give your feedback. I am really thankful to Aaron, Pernici, Stephen and Julien for the support given so far. First of all let me give you a rough idea about the work currently not in Github.</p>
<h4>General Pythagorean equation</h4>
<p>A general Pythagorean equation is an equation of the form <img alt="x_{1}^2 + x_{2}^2 + . . . + x_{k}^2 = x_{k+1}^2" class="latex" src="http://s0.wp.com/latex.php?latex=x_%7B1%7D%5E2+%2B+x_%7B2%7D%5E2+%2B+.+.+.+%2B+x_%7Bk%7D%5E2+%3D+x_%7Bk%2B1%7D%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_{1}^2 + x_{2}^2 + . . . + x_{k}^2 = x_{k+1}^2"/>. The solutions for the equation can be given by using <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k"/> parameters like below,</p>
<p><img alt="x_{1} = m_{1}^2 + m_{2}^2 + . . . + m_{k-1}^2 - m_{k}^2" class="latex" src="http://s0.wp.com/latex.php?latex=x_%7B1%7D+%3D+m_%7B1%7D%5E2+%2B+m_%7B2%7D%5E2+%2B+.+.+.+%2B+m_%7Bk-1%7D%5E2+-+m_%7Bk%7D%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_{1} = m_{1}^2 + m_{2}^2 + . . . + m_{k-1}^2 - m_{k}^2"/><br/>
<img alt="x_{2} = 2m_{1}m_{k}" class="latex" src="http://s0.wp.com/latex.php?latex=x_%7B2%7D+%3D+2m_%7B1%7Dm_%7Bk%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_{2} = 2m_{1}m_{k}"/><br/>
.<br/>
.<br/>
<img alt="x_{k} = 2m_{k-1}m_{k}" class="latex" src="http://s0.wp.com/latex.php?latex=x_%7Bk%7D+%3D+2m_%7Bk-1%7Dm_%7Bk%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_{k} = 2m_{k-1}m_{k}"/><img alt="x_{k +1} = m_{1}^2 + m_{2}^2 + . . . + m_{k-1}^2 + m_{k}^2" class="latex" src="http://s0.wp.com/latex.php?latex=x_%7Bk+%2B1%7D+%3D+m_%7B1%7D%5E2+%2B+m_%7B2%7D%5E2+%2B+.+.+.+%2B+m_%7Bk-1%7D%5E2+%2B+m_%7Bk%7D%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_{k +1} = m_{1}^2 + m_{2}^2 + . . . + m_{k-1}^2 + m_{k}^2"/></p>
<p>I implemented solutions for slightly more  general equation <img alt="a_{1}^2x_{1}^2 + a_{2}^2x_{2}^2 + . . . + a_{k}^2x_{k}^2 = a_{k+1}^2x_{k+1}^2" class="latex" src="http://s0.wp.com/latex.php?latex=a_%7B1%7D%5E2x_%7B1%7D%5E2+%2B+a_%7B2%7D%5E2x_%7B2%7D%5E2+%2B+.+.+.+%2B+a_%7Bk%7D%5E2x_%7Bk%7D%5E2+%3D+a_%7Bk%2B1%7D%5E2x_%7Bk%2B1%7D%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a_{1}^2x_{1}^2 + a_{2}^2x_{2}^2 + . . . + a_{k}^2x_{k}^2 = a_{k+1}^2x_{k+1}^2"/>. Solutions for this equation can be constructed from the solutions of the former equation, multiplying each solution <img alt="x_{i}" class="latex" src="http://s0.wp.com/latex.php?latex=x_%7Bi%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_{i}"/> of it by <img alt="\frac{lcm(a_{1}, a_{2}, . . . a_{n})}{a_{i}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Blcm%28a_%7B1%7D%2C+a_%7B2%7D%2C+.+.+.+a_%7Bn%7D%29%7D%7Ba_%7Bi%7D%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\frac{lcm(a_{1}, a_{2}, . . . a_{n})}{a_{i}}"/>.</p>
<h4>General sum of n squares</h4>
<p>I also implemented solutions for <img alt="x_{i}^2 + x_{2}^2 + . . . + x_{n}^2 = k" class="latex" src="http://s0.wp.com/latex.php?latex=x_%7Bi%7D%5E2+%2B+x_%7B2%7D%5E2+%2B+.+.+.+%2B+x_%7Bn%7D%5E2+%3D+k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_{i}^2 + x_{2}^2 + . . . + x_{n}^2 = k"/> where <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k"/> is an integer. It is obvious that equation is solvable only when <img alt="k \geq 0" class="latex" src="http://s0.wp.com/latex.php?latex=k+%5Cgeq+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k \geq 0"/>.</p>
<p>Lagrange’s four square theorem states<img alt="\textsuperscript{[1]}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctextsuperscript%7B%5B1%5D%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\textsuperscript{[1]}"/> that every non-negative number can be expressed as a sum of four squares. It is also known that every integer not in the the form <img alt="4^k(8m + 7)" class="latex" src="http://s0.wp.com/latex.php?latex=4%5Ek%288m+%2B+7%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="4^k(8m + 7)"/> can be expressed as a sum of three squares<img alt="\textsuperscript{[2]}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctextsuperscript%7B%5B2%5D%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\textsuperscript{[2]}"/> where <img alt="m, n" class="latex" src="http://s0.wp.com/latex.php?latex=m%2C+n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="m, n"/> are non-negative integers.  Also any integer which doesn’t contain, in it’s canonical representation, odd powers of a prime of the form <img alt="4m + 3" class="latex" src="http://s0.wp.com/latex.php?latex=4m+%2B+3&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="4m + 3"/> can be expressed as a sum of two squares<img alt="\textsuperscript{[3]}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctextsuperscript%7B%5B3%5D%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\textsuperscript{[3]}"/>. For example, <img alt="N = 2^2.5^3.11^2.3^3" class="latex" src="http://s0.wp.com/latex.php?latex=N+%3D+2%5E2.5%5E3.11%5E2.3%5E3&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="N = 2^2.5^3.11^2.3^3"/> can’t be expressed as a sum of two squares since it contains and odd power of <img alt="3" class="latex" src="http://s0.wp.com/latex.php?latex=3&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="3"/>, which is a prime of the form <img alt="4m+3" class="latex" src="http://s0.wp.com/latex.php?latex=4m%2B3&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="4m+3"/>. But we can express <img alt="N = 2^2.5^3. 11^2.3^4" class="latex" src="http://s0.wp.com/latex.php?latex=N+%3D+2%5E2.5%5E3.+11%5E2.3%5E4&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="N = 2^2.5^3. 11^2.3^4"/> as a sum of two squares.</p>
<p>Also, there is an interesting identity, found by Euler, known as Euler’s four square identity which can be stated as,</p>
<p><img alt="(a_1^2+a_2^2+a_3^2+a_4^2)(b_1^2+b_2^2+b_3^2+b_4^2) = (a_1 b_1 - a_2 b_2 - a_3 b_3 - a_4 b_4)^2 + (a_1 b_2 + a_2 b_1 + a_3 b_4 - a_4 b_3)^2 + (a_1 b_3 - a_2 b_4 + a_3 b_1 + a_4 b_2)^2 + (a_1 b_4 + a_2 b_3 - a_3 b_2 + a_4 b_1)^2" class="latex" src="http://s0.wp.com/latex.php?latex=%28a_1%5E2%2Ba_2%5E2%2Ba_3%5E2%2Ba_4%5E2%29%28b_1%5E2%2Bb_2%5E2%2Bb_3%5E2%2Bb_4%5E2%29+%3D+%28a_1+b_1+-+a_2+b_2+-+a_3+b_3+-+a_4+b_4%29%5E2+%2B+%28a_1+b_2+%2B+a_2+b_1+%2B+a_3+b_4+-+a_4+b_3%29%5E2+%2B+%28a_1+b_3+-+a_2+b_4+%2B+a_3+b_1+%2B+a_4+b_2%29%5E2+%2B+%28a_1+b_4+%2B+a_2+b_3+-+a_3+b_2+%2B+a_4+b_1%29%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(a_1^2+a_2^2+a_3^2+a_4^2)(b_1^2+b_2^2+b_3^2+b_4^2) = (a_1 b_1 - a_2 b_2 - a_3 b_3 - a_4 b_4)^2 + (a_1 b_2 + a_2 b_1 + a_3 b_4 - a_4 b_3)^2 + (a_1 b_3 - a_2 b_4 + a_3 b_1 + a_4 b_2)^2 + (a_1 b_4 + a_2 b_3 - a_3 b_2 + a_4 b_1)^2"/>.</p>
<p>So, if we can represent each prime divisor of a number <img alt="N" class="latex" src="http://s0.wp.com/latex.php?latex=N&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="N"/> as a sum of four squares, we can then use this identity to construct such a representation for<img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n"/>. This is the idea behind my implementation of representing number as a sum of four squares. When we know how to do this, we have several approaches for representing a given non-negative integer <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k"/> as a sum of <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n"/> squares. Most obvious thing to do is, represent <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k"/> as a sum of four squares and set other <img alt="n -4" class="latex" src="http://s0.wp.com/latex.php?latex=n+-4&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n -4"/> variables to zero. We can also partition <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k"/> into approximately <img alt="n/4" class="latex" src="http://s0.wp.com/latex.php?latex=n%2F4&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="n/4"/> groups and represent each as a sum of four squares and later combine those results. I still haven’t decided on how to do this, I would like to know the ideas of the community.  I used a slightly modified version of  the algorithm found in<img alt="\textsuperscript{[5]}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctextsuperscript%7B%5B5%5D%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\textsuperscript{[5]}"/>.  I’ll describe the algorithm in my next blog post.</p>
<p>Apart from that, I did a lot of bug fixing and reviewed Pernici’s Pull request. My tests are now 2x faster after using his functions. A huge thank should go to Pernici for doing a great Job with solving quadratic congruences.</p>
<h4>References</h4>
<p>[1] Lagrange’s four square theorem, [online], Available: <a href="http://en.wikipedia.org/wiki/Lagrange%27s_four-square_theorem" rel="nofollow">http://en.wikipedia.org/wiki/Lagrange%27s_four-square_theorem</a><br/>
[2] Integer as a sum of three squares, [online], Available: <a href="http://www.proofwiki.org/wiki/Integer_as_Sum_of_Three_Squares" rel="nofollow">http://www.proofwiki.org/wiki/Integer_as_Sum_of_Three_Squares</a><br/>
[3] Sum of Squares, [online], Available: <a href="http://mathworld.wolfram.com/SumofSquaresFunction.html" rel="nofollow">http://mathworld.wolfram.com/SumofSquaresFunction.html</a><br/>
[4] Euler’s four square identity, [online], Available: <a href="http://en.wikipedia.org/wiki/Euler%27s_four-square_identity" rel="nofollow">http://en.wikipedia.org/wiki/Euler%27s_four-square_identity</a><br/>
[5] <a href="http://www.schorn.ch/howto.html" rel="nofollow">http://www.schorn.ch/howto.html</a></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/237/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/237/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=237&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-31T13:07:12Z</updated>
    <category term="GSoC-2013-SymPy"/>
    <author>
      <name>Thilina Rathnayake</name>
    </author>
    <source>
      <id>http://thilinaatsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://thilinaatsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://thilinaatsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://thilinaatsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://thilinaatsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My Work related to sympy</subtitle>
      <title>Thilina's SymPy Blog</title>
      <updated>2014-01-14T17:20:47Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://meclark256.wordpress.com/?p=137</id>
    <link href="http://meclark256.wordpress.com/2013/08/31/more-thoughts-on-the-weyl-group-module/" rel="alternate" type="text/html"/>
    <title>More thoughts on the Weyl group module</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So this week has been a lot more thinking about the Weyl group module.  I feel as though I didn’t accomplish much, but I have spent a fair amount of time researching and thinking.  I should note that I also did some fixes on the RootSystem module (fixing some doctests and whatnot).  After conferring with […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=137&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So this week has been a lot more thinking about the Weyl group module.  I feel as though I didn’t accomplish much, but I have spent a fair amount of time researching and thinking.  I should note that I also did some fixes on the RootSystem module (fixing some doctests and whatnot).  </p>
<p>After conferring with David, I’ve concluded that I want to implement a method that displays the Coxeter diagram corresponding to a Weyl group (i.e. the undirected Dynkin diagram), and that the best way to proceed with the Weyl group module is to implement all the Weyl groups as permutation groups.  This makes sense, because as I noted in my last post, the Weyl group for type A is the symmetric group, and the Weyl group for B&amp;C is the hyperoctahedral groups, which canb e thought of as permutations on the set [-n, ..., -1, 1, ... n].  The Weyl group for type D is is a subgroup of the hyperoctahedral group.  </p>
<p>This would make things like computing the order of an element of the Weyl group quite easy, as I could take input from the user and then get the permutation associated with it, and then use methods from the Permutation class to do what I want.  Now, the obvious challenge with this is that the Permutation class only allows permutations on positive integers like [0, ... , n].  So this presents problems with the hyperoctahedral group, since it include permutations on negative integers.  I reckon that I do not have the time to rewrite the entire Permutation class to allow it to act on an arbitrary set.  So, I am going to map the set [-n, ...., -1, 1, .... n] to a set of positive integers.  So I’m still thinking about how I want to do that.  </p>
<p>Furthermore, upon the suggestion of David, I think that I will try to include information about the hyperoctahedral group in the named groups module. </p>
<p>Lastly I am also trying to find more concrete information about the Weyl group of type D; I know that it is a subgroup of index 2, but I’m not sure what exact permutations and stuff that it corresponds to.  </p>
<p>So yeah.  This coming week, my plan is to figure out how I want to write the permutations of the hyperoctahedral group as permutations on positive integers, and then to take input from the user in the form of products of simple reflections, and generate the corresponding permutation, at least for types A, B, and C.  </p>
<p>For example, given A3, the Coxeter diagram is 0—0–0, and the generating reflections are r1, r2, r3, and the Weyl group is S4.   We can think of r1 as the permutation (1,2), r2 as (2,3), and r3 as (3,4).  So if the user gave the input r1r2 that would be the permutation (1,2)(2,3) = (1 3 2).  Oh, I also need to remember that the Permutation class starts with 0 instead of 1, so I need to remember to take that into account.</p>
<p>This week I will also implement a method that gives the Coxeter diagram of a given Weyl group.  This should be very easy, given the Coxeter diagram is the undirected Dynkin diagram. </p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/137/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/137/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=137&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-31T00:07:10Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>meclark256</name>
    </author>
    <source>
      <id>http://meclark256.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://meclark256.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://meclark256.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://meclark256.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://meclark256.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Smile! You’re at the best WordPress.com site ever</subtitle>
      <title>My GSOC Adventure with SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://csousahome.wordpress.com/?p=116</id>
    <link href="http://csousahome.wordpress.com/2013/08/30/pylmi-sdp/" rel="alternate" type="text/html"/>
    <title>PyLMI-SDP</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">PyLMI-SDP Symbolic linear matrix inequalities (LMI) and semi-definite programming (SDP) tools for PythonFiled under: PhD, Work Tagged: git, lmi, python, sdp, sympy<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=csousahome.wordpress.com&amp;blog=24437078&amp;post=116&amp;subd=csousahome&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://cdsousa.github.io/PyLMI-SDP/" title="PyLMI-SDP">PyLMI-SDP</a></p>
<p><em>Symbolic linear matrix inequalities (LMI) and semi-definite programming (SDP) tools for Python</em></p><br/>Filed under: <a href="http://csousahome.wordpress.com/category/phd/">PhD</a>, <a href="http://csousahome.wordpress.com/category/work/">Work</a> Tagged: <a href="http://csousahome.wordpress.com/tag/git-2/">git</a>, <a href="http://csousahome.wordpress.com/tag/lmi/">lmi</a>, <a href="http://csousahome.wordpress.com/tag/python/">python</a>, <a href="http://csousahome.wordpress.com/tag/sdp/">sdp</a>, <a href="http://csousahome.wordpress.com/tag/sympy/">sympy</a> <a href="http://feeds.wordpress.com/1.0/gocomments/csousahome.wordpress.com/116/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/csousahome.wordpress.com/116/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=csousahome.wordpress.com&amp;blog=24437078&amp;post=116&amp;subd=csousahome&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-30T17:50:09Z</updated>
    <category term="PhD"/>
    <category term="Work"/>
    <category term="git"/>
    <category term="lmi"/>
    <category term="python"/>
    <category term="sdp"/>
    <category term="sympy"/>
    <author>
      <name>csousa</name>
    </author>
    <source>
      <id>http://csousahome.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://csousahome.wordpress.com/tag/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://csousahome.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://csousahome.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://csousahome.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another blog</subtitle>
      <title>csousa home » sympy</title>
      <updated>2014-01-14T17:20:56Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://musingsofafriend.wordpress.com/?p=202</id>
    <link href="http://musingsofafriend.wordpress.com/2013/08/26/gsoc-week-10-on-to-the-testing/" rel="alternate" type="text/html"/>
    <title>GSoC Week 10: On to the testing</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">One of the things that I didn’t like about the way the development of code went was that I really couldn’t test most of the code until a certain amount of code was already written. This problem has raised its … <a class="more-link" href="http://musingsofafriend.wordpress.com/2013/08/26/gsoc-week-10-on-to-the-testing/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=202&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>One of the things that I didn’t like about the way the development of code went was that I really couldn’t test most of the code until a certain amount of code was already written. This problem has raised its head many times. So, when I had finally written the code for integration methods, I was finally able to put the pieces together for testing.</p>
<p>The tests were performed in the order of increasing complexity of procedures. So, the first thing that was tested was proper initialization of coordinate systems, base scalars, base vectors, VectMuls, and, VectAdds and while the initialization of coordinate systems, base scalars and base vectors could be done smoothly, the VectMul and the VectAdd objects raised errors. While debugging these errors, at first I thought that this might be another cache issues (here’s the first one <a href="https://github.com/sympy/sympy/pull/1746">#1746</a>) but fortunately, the error still showed with SYMPY_USE_CACHE=no. Upon further inspection, the error was due to args attribute of BaseScalar and BaseVector. That was fixed.</p>
<p>Once initialization problems were cured, then, I moved on to printing. Just setting the _sympystr function corrected that.</p>
<p>After that, I started initializing complex (as in long and nested) vector expressions. That pointed out some more errors in various helpers and some public methods too. Those were fixed as well – though it did take some time.</p>
<p>Next, I moved on to the operations on vectors. By now, the basic addition, multiplication operators etc. were working fine. The methods that I tested now were some other methods of low complexity (including helpers). Those included, for example, the express and the factor methods and the is_const_vect function. Problems were corrected as they appeared. Also, initialization of coordinate systems with their origins at any given point in space is also now possible.</p>
<p>The next piece of the puzzle was the express method. As I have repeatedly mentioned, this method is like the spine of the entire structure. In order for the testing to proceed any further, I need the express method to work flawlessly. So, the next order of business was to fix the express method. That is what I am doing now. Once the express method works, I’ll move on to  the other methods which have the express method as a dependency.</p>
<p>When the testing is finished, the project won’t in any way be finished. There’s a sprinkling of TODO comments throughout the code. But any work that will be done from there will be much easier.</p>
<p>On a side note, my mid semester exams are approaching, and fast. I think that I will be able to devote my full attention to the project till 5th September, I speculate. After that, I’ll be lucky to be able to contribute 3-4 hours daily. This shall go on till 13th September, when the exams will end. On a brighter note though, I just noticed that the final date of submission is 23rd September (and not 16th September, as I had been assuming until now). That will give me 10 days after my exams to get everything in order (perhaps also discussions on Github).</p>
<p>Back to testing!</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/202/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/202/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=202&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-26T12:24:23Z</updated>
    <category term="Programming"/>
    <category term="Python"/>
    <category term="SymPy"/>
    <category term="vectors"/>
    <author>
      <name>musingsofafriend</name>
    </author>
    <source>
      <id>http://musingsofafriend.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://musingsofafriend.wordpress.com/tag/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://musingsofafriend.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://musingsofafriend.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://musingsofafriend.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>The greatest WordPress.com site in all the land!</subtitle>
      <title>musings of a friend - Prasoon Shukla » SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://manojbits.wordpress.com/?p=728</id>
    <link href="http://manojbits.wordpress.com/2013/08/26/moving-on-to-power-series-methods/" rel="alternate" type="text/html"/>
    <title>Moving on to power series methods</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi, Sorry for the late post this week. I couldn’t do much of work last week, but I did manage to write some code. First of all, I managed to get the lie group hint finally in.  The Pull Request can be seen here, https://github.com/sympy/sympy/pull/2359 . Its nice to see the work that you have […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=728&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi, Sorry for the late post this week. I couldn’t do much of work last week, but I did manage to write some code.</p>
<p>First of all, I managed to get the lie group hint finally in.  The Pull Request can be seen here, <a href="https://github.com/sympy/sympy/pull/2359" rel="nofollow">https://github.com/sympy/sympy/pull/2359</a> . Its nice to see the work that you have been doing, for around two months, finally in <img alt=":D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/> </p>
<p>I just started work on the power series methods for first order differential equations. Contrary to what I learnt, which is substituting <img alt="\sum_{k=0}^n a_{k}x^k" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csum_%7Bk%3D0%7D%5En+a_%7Bk%7Dx%5Ek&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\sum_{k=0}^n a_{k}x^k"/> and finding out a recurrence relation, I found out a much better (straightforward) way to find the power series methods to a given differential equation. Before discussing the algorithm, when does any first order differential equation have a power series solution and what is a power series solution?. </p>
<p>1. Condition for power series solution: Let us take a general first order ODE <img alt="P(x, y) + Q(x, y)\frac{dy}{dx} = 0" class="latex" src="http://s0.wp.com/latex.php?latex=P%28x%2C+y%29+%2B+Q%28x%2C+y%29%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="P(x, y) + Q(x, y)\frac{dy}{dx} = 0"/>. It has a power series solution, at a given point when \frac{Q(x, y)}{P(x, y)} is analytic at a given point. Analyticity of an expression at a point is confirmed when, either the expression is infinitely differentiable at a given point, or when the expression has a Power series solution, at a given point. Right now, it is impossible to find out (atleast using SymPy) whether,<br/>
any of the above conditions are true. So for now, checking is just being done to see if <img alt="\frac{Q(x, y)}{P(x, y)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7BQ%28x%2C+y%29%7D%7BP%28x%2C+y%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{Q(x, y)}{P(x, y)}"/> and <img alt="\frac{d \frac{Q(x, y)}{P(x, y)}}{dx}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bd+%5Cfrac%7BQ%28x%2C+y%29%7D%7BP%28x%2C+y%29%7D%7D%7Bdx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{d \frac{Q(x, y)}{P(x, y)}}{dx}"/> , exist at the given point.</p>
<p>2.  A power series solution is when you can express the solution in the form of a Taylor series. Let us say the solution to a differential equation <img alt="P(x, y) + Q(x, y)\frac{dy}{dx} = 0" class="latex" src="http://s0.wp.com/latex.php?latex=P%28x%2C+y%29+%2B+Q%28x%2C+y%29%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="P(x, y) + Q(x, y)\frac{dy}{dx} = 0"/>, is <img alt="y = f(x)" class="latex" src="http://s0.wp.com/latex.php?latex=y+%3D+f%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="y = f(x)"/>, then a power series solution exists at <img alt="x0" class="latex" src="http://s0.wp.com/latex.php?latex=x0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x0"/> when, <img alt="f(x)" class="latex" src="http://s0.wp.com/latex.php?latex=f%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="f(x)"/>, can be written as <img alt="\sum_{k=0}^n (x - x0)\frac{f^{n}(x0)}{n!}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csum_%7Bk%3D0%7D%5En+%28x+-+x0%29%5Cfrac%7Bf%5E%7Bn%7D%28x0%29%7D%7Bn%21%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\sum_{k=0}^n (x - x0)\frac{f^{n}(x0)}{n!}"/>. As is evident, this can exist only when <img alt="f(x)" class="latex" src="http://s0.wp.com/latex.php?latex=f%28x%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="f(x)"/> is infinitely differentible at <img alt="x0" class="latex" src="http://s0.wp.com/latex.php?latex=x0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x0"/></p>
<p>The algorithm is as follows, lets say <img alt="\frac{dy}{dx} = h(x, y)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+h%28x%2C+y%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{dy}{dx} = h(x, y)"/> and <img alt="y(x0) = y0" class="latex" src="http://s0.wp.com/latex.php?latex=y%28x0%29+%3D+y0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="y(x0) = y0"/>. Then</p>
<p>1] <img alt="\frac{dy}{dx} = F1" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+F1&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{dy}{dx} = F1"/><br/>
2] <img alt="\frac{d^2 y}{dx ^2} = \frac{dF1}{dx} = \frac{\partial F1}{\partial x} + F1\frac{\partial F1}{\partial y} = F2" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bd%5E2+y%7D%7Bdx+%5E2%7D+%3D+%5Cfrac%7BdF1%7D%7Bdx%7D+%3D+%5Cfrac%7B%5Cpartial+F1%7D%7B%5Cpartial+x%7D+%2B+F1%5Cfrac%7B%5Cpartial+F1%7D%7B%5Cpartial+y%7D+%3D+F2&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{d^2 y}{dx ^2} = \frac{dF1}{dx} = \frac{\partial F1}{\partial x} + F1\frac{\partial F1}{\partial y} = F2"/><br/>
3] <img alt="\frac{d^2 y}{dx ^2} = \frac{dF2}{dx} = \frac{\partial F2}{\partial x} + F1\frac{\partial F2}{\partial y} = F3" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bd%5E2+y%7D%7Bdx+%5E2%7D+%3D+%5Cfrac%7BdF2%7D%7Bdx%7D+%3D+%5Cfrac%7B%5Cpartial+F2%7D%7B%5Cpartial+x%7D+%2B+F1%5Cfrac%7B%5Cpartial+F2%7D%7B%5Cpartial+y%7D+%3D+F3&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{d^2 y}{dx ^2} = \frac{dF2}{dx} = \frac{\partial F2}{\partial x} + F1\frac{\partial F2}{\partial y} = F3"/></p>
<p>and so on. Since we know the expressions, we can also find their value at a particular point.</p>
<p>A sample session.</p>
<pre class="brush: python; title: ; notranslate">from sympy import *
f = Function("f")
eq = f(x).diff(x) - sin(x*f(x))
pprint(dsolve(eq, hint='1st_power_series', ics={f(2):2, 'terms':1}))
f(x) = (x - 2)⋅sin(4) + 2
pprint(dsolve(eq, hint='1st_power_series', ics={f(2):2, 'terms':3}))
                                   2                                     
                            (x - 2) ⋅(2⋅cos(4) + 2⋅sin(4)⋅cos(4))    ⎛ 3⎞
f(x) = 2 + (x - 2)⋅sin(4) + ───────────────────────────────────── + O⎝x ⎠
                                              2
pprint(dsolve(eq))
        4 ⎛    3       ⎞            2        
       x ⋅⎝- C₀  + 3⋅C₀⎠        C₀⋅x     ⎛ 6⎞
f(x) = ───────────────── + C₀ + ───── + O⎝x ⎠
               24                 2

eq = f(x).diff(x) - x*f(x)
pprint(dsolve(eq, hint='1st_power_series'))

                2       4        
            C₀⋅x    C₀⋅x     ⎛ 6⎞
f(x) = C₀ + ───── + ───── + O⎝x ⎠
              2       8     
</pre>
<p>Thats all for now. Cheers!</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/728/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/728/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=728&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-26T10:54:14Z</updated>
    <category term="SymPy"/>
    <category term="differential"/>
    <category term="differential equations"/>
    <category term="gsoc"/>
    <category term="gsoc2013"/>
    <category term="ode"/>
    <category term="power series"/>
    <category term="python"/>
    <category term="sympy"/>
    <author>
      <name>Manoj Kumar</name>
    </author>
    <source>
      <id>http://manojbits.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://manojbits.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://manojbits.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://manojbits.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://manojbits.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>From a learner's perspective</subtitle>
      <title>Perspective » SymPy</title>
      <updated>2014-01-14T17:20:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://meclark256.wordpress.com/?p=113</id>
    <link href="http://meclark256.wordpress.com/2013/08/23/weyl-groups/" rel="alternate" type="text/html"/>
    <title>Weyl Groups</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So, for each semisimple Lie group, we have a Weyl group.  It is a subgroup of the isometry group of the root system.  Specifically, it’s the subgroup that is generated by reflections through the hyperplanes orthogonal to the roots.  Therefore, Weyl groups are reflection groups, and so a Weyl group is a finite Coxeter group.  […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=113&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So, for each semisimple Lie group, we have a Weyl group.  It is a subgroup of the isometry group of the root system.  Specifically, it’s the subgroup that is generated by reflections through the hyperplanes orthogonal to the roots.  Therefore, Weyl groups are reflection groups, and so a Weyl group is a finite Coxeter group. </p>
<p>Now, if we take a Lie algebra’s Dynkin diagram and delete all arrows from it, we have its Coxeter diagram, which encodes information about the reflections which generate the Weyl group, as follows.  The vertices of the Coxeter diagram represent the generating reflections of the Weyl group, s_i.  An edge is drawn between s_i and s_j if the order m(i, j) of s_i*s_j is greater than two.  If there is one edge, the order m(i, j) is 3.  If there are two edges, the order m(i, j) is 4, and if there are three edges, the order m(i, j) is 5.  </p>
<p>We note that the B series and the C series have the same Coxeter diagram, and hence have the same Weyl group, which is the hyperoctahedral group, which is the group of symmetries of a hypercube.  Considered as a permutation group, it is the signed symmetric group of permutations of the set  { −<i>n</i>, −<i>n</i> + 1, …, −1, 1, 2, …, <i>n</i> } such that <i>π</i>(<i>i</i>) = −<i>π</i>(−<i>i</i>) for all <i>i</i>.  The Weyl group of D_n is a subgroup of index two in the hyperoctahedral group.  The Weyl group of A_n is the symmetric group on n variables. </p>
<p>So, I’m now looking at working on the class WeylGroup.  Obviously it’s easy enough to write out the generating reflections, but I’m not sure how exactly I want to proceed from there.  Perhaps a function where a user can specify a reflection as a product of the generating reflections (e.g. input s1s2s5 or something…) and then have the function output its order?  I’m also thinking about how to I want to represent a given reflection.  I’m leaning towards representing it at the product of the generating reflections.  We’ll see.  I also have included a function which returns the order of a given Weyl group.  So yeah, that’s where I’m at.  This week has been generally slow in terms of concrete output, but I’ve been spending a lot of time reading and researching (as Weyl groups aren’t my specialty) and generally contemplating where I want to go with this class.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/113/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/113/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=113&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-23T20:00:56Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>meclark256</name>
    </author>
    <source>
      <id>http://meclark256.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://meclark256.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://meclark256.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://meclark256.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://meclark256.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Smile! You’re at the best WordPress.com site ever</subtitle>
      <title>My GSOC Adventure with SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1401</id>
    <link href="http://asmeurersympy.wordpress.com/2013/08/22/python-3-single-codebase-vs-2to3/" rel="alternate" type="text/html"/>
    <title>Python 3: Single codebase vs. 2to3</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In my previous post about switching to Python 3 as my default Python, I praised the use of a single codebase for supporting both Python 2 and Python 3. I even chastised the Python core developers for creating 2to3, writing, “I think that the core Python folks made a mistake by presenting Python 3 as […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1401&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In my <a href="http://asmeurersympy.wordpress.com/2013/08/09/using-python-3-as-my-default-python/">previous post</a> about switching to Python 3 as my default Python, I praised the use of a single codebase for supporting both Python 2 and Python 3. I even chastised the Python core developers for creating 2to3, writing, “I think that the core Python folks made a mistake by presenting Python 3 as a new language. It has made people antagonistic against Python 3 (well, that and the print function, which was another stupid mistake, because even if it was a good idea, it alone has kept too many people from switching). 2to3 was a mistake too, because it perpetuated this idea.”</p>
<p>Well, this isn’t entirely fair, because I myself used to be one of the biggest advocates of using 2to3 over a single codebase. Take this <a href="https://github.com/ipython/ipython/issues/2440#issuecomment-9058182">GitHub comment</a> from when the IPython guys were considering this issue, where I wrote, “maintaining a common code base is going to be a bit annoying from the developer side.…The main benefit of using 2to3 is that 99% of the time, you can just write your code as you would for Python 2, and when it gets to Python 3, it just works (maybe that percent is a bit smaller if you use strings a lot, but it’s still quite high). To write for Python 2 and 3 at the same time, you have to remember a lot of little rules, which no one will remember (and new contributors will not even know about). And given that IPython’s test coverage is still poor (unless I am mistaken, in which case, please correct me), little mistakes will slip through, and no one will notice until they try the certain behavior in Python 3.”</p>
<p>So I just want to clarify a few things.</p>
<ol>
<li><strong>I was wrong.</strong>  When I chastised the Python core developers for making people believe that Python 3 is a different language from Python 2, <em>I too</em> fell into that trap. It took a month of me working on a codebase that had to be directly Python 3 compatible to see the fallacy of this.  And seeing just how small the SymPy <a href="https://github.com/sympy/sympy/blob/master/sympy/core/compatibility.py">compatibility</a> file is sealed the deal. I now believe that I was completely wrong in saying that maintaining a common codebase is annoying. As I wrote in the previous post, it is no different from supporting 2.4-2.7, for instance (actually, by my memory, supporting 2.4-2.7 was much worse than supporting 2.6-3.3, because <em>so</em> many language features were introduced in Python 2.5)</li>
<li><strong>If you have to support 2.5 or earlier and Python 3, then 2to3 might actually be better.</strong> The reason is simple: Python 2.6 was the first version of Python to “know” about Python 3. So, for instance, <code>from __future__ import print_function</code> was introduced in Python 2.6. This means that to support a single codebase for 2.5-3.x you have to write <code>print('\n')</code> to print an empty line and to print something without a newline at the end, you have to use <code>sys.stdout.write</code>. Also, <code>except Exception as e</code>, using the <code>as</code> keyword, which is the only syntax allowed in Python 3, was introduced in Python 2.6, so if you want to catch an exception you have to use <code>sys.exc_info()[1]</code>. Now that really <em>is</em> annoying. But in Python 2.6, most differences can be fixed with simple definitions, most of which boil down to try, except ImportError, import x as y type workarounds. The worst are the print function, which can be imported from __future__, division, which can also be imported from __future__ (or worked around), and unicode literals (if it’s a big deal, drop support for Python 3.2). Most other things are just simple renames, like xrange -&gt; range, or making sure that you wrap functions that are iterators in Python 3 in <code>list</code> if you want to access items from them.</li>
<li><strong>I was right about test coverage.</strong> Supporting Python 2 and Python 3 in a single codebase if you have bad test coverage is not going to work. You can get around the worst things by making sure that __future__ imports are at the top of each file, but you are bound to miss things, because, as I said, you will forget that <code>map(f, s)[0]</code> doesn’t work in Python 3 or that the <code>StringIO</code> module has been renamed to <code>io</code>, or that you can’t pass around data as strings—they have to be bytes.
<p>Of course, you also need good test coverage to support Python 3 well using 2to3, but you can get away with more because 2to3 will take care of things like the above for you.  Perhaps instead of 2to3 what really should have been made is a pyflakes-like tool that uses the same knowledge as 2to3 to check for cross-compatibility for Python 2 and Python 3.</p></li>
<li><strong>In the end, you have to be actually using Python 3.</strong> I feel like people haven’t been, even today, taking Python 3 seriously. They aren’t actually using it. There’s a feeling that someday in the future they will, but for now, Python 2 is the way to go. 2to3 exacerbates this feeling, because to use it, you have to develop in Python 2. You shouldn’t touch the code generated by 2to3. As it is, then, if you develop with 2to3, you only ever use Python 3 to test that things are working in Python 3. You don’t prototype your code in Python 3, because then you will write code that doesn’t work in Python 2.
<p>With the single codebase, your view should change. You should start prototyping in Python 3. You should only use Python 2 to test that things work in Python 2 (and since you’ve been using Python 2 for so long before switching to Python 3, or at least if you’re like me you have, this is not that bad). Just yesterday, I found a <a href="https://github.com/sympy/sympy/pull/2398">bug</a> in SymPy in Python 3 that went unnoticed. It relates to what I said above about using bytes instead of strings for data. I just checked, and 2to3 wouldn’t have fixed it (and indeed, the bug is present in SymPy 0.7.3, which used 2to3), because there’s no way for 2to3 to have known that the data was bytes and not a string.  The code was obviously untested, but it would have been obvious that it didn’t work if anyone was using Python 3 to use SymPy interactively.  As it turns out, some of our users are doing this, and they pointed it out on the mailing list, but it remained unfixed until I found it myself independently. </p></li>
</ol>
<p>So old mistakes aside, the lessons to take away from this and the <a href="http://asmeurersympy.wordpress.com/2013/08/09/using-python-3-as-my-default-python/">previous blog post</a> are </p>
<ol>
<li>Use a single codebase instead of 2to3 to support both Python 2 and Python 3.</li>
<li>Use Python 3 as your default Python.</li>
<li>Keep Python 2 around, though, because not everything supports Python 3 yet.</li>
<li>Expect to find some bugs, because, until everyone starts doing this, people aren’t going to test their software in Python 3.</li>
</ol><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1401/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1401/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1401&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-22T00:45:57Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2014-01-14T17:20:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://manojbits.wordpress.com/?p=726</id>
    <link href="http://manojbits.wordpress.com/2013/08/18/slow-progress/" rel="alternate" type="text/html"/>
    <title>Slow Progress</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi, this week I decided to take a break from my actual GSoC project, and work on things that would indirectly some parts of my GSoC project. Firstly, I discovered this bug, when I was playing with the lie group solver, https://code.google.com/p/sympy/issues/detail?id=3976 . I thought I could fix it myself, but the source code of […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=726&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi, this week I decided to take a break from my actual GSoC project, and work on things that would indirectly some parts of my GSoC project.</p>
<p>Firstly, I discovered this bug, when I was playing with the lie group solver, <a href="https://code.google.com/p/sympy/issues/detail?id=3976" rel="nofollow">https://code.google.com/p/sympy/issues/detail?id=3976</a> . I thought I could fix it myself, but the source code of solve seemed to be a bit too dense for me to comprehend, or atleast within a couple of days. Anyway as I was playing with the source code, I found another bug in solve_linear. This time however someone I found out what actually was wrong and managed to open a Pull Request to it <a href="https://github.com/sympy/sympy/pull/2385" rel="nofollow">https://github.com/sympy/sympy/pull/2385</a> . The problem was that, <strong>solve_linear(<code>y - Integral(f(x), y)</code>) </strong>was giving <strong><code>(y, Integral(f(x), y)/(-f(x) + 1))</code> </strong>rather than <strong>(y, 0) </strong>. I managed to implement a quick hack that would get around the issue, though it had me atleast thinking for two hours.</p>
<p>Secondly the issue with Integral subs, I read thoroughly the discussion on the issue, and the respective Pull request , and I tried fixing the issue, <a href="https://github.com/sympy/sympy/pull/2390" rel="nofollow">https://github.com/sympy/sympy/pull/2390</a> . There seems to be a lot of test failures, so I am waiting for reviews on the PR, to see if my approach is right, before attempting to fix the failures.</p>
<p>Thirdly, the lie group hint is almost ready to go in, just a few major tweaks here and there and a final yes by Sean.</p>
<p>Finally, it seems that my exams are on September 14, so I need atleast five days before, so that I can pass them without any backlogs. And also I found a bit of time to clean up a bit, on some minor stuff I was “working” on last year <a href="https://github.com/Manoj-Kumar-S/Thermo" rel="nofollow">https://github.com/Manoj-Kumar-S/Thermo</a> . Contributors to the repository are welcome <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  . That’s it for now, I guess.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/726/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/726/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=726&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-18T19:41:45Z</updated>
    <category term="SymPy"/>
    <category term="gsoc"/>
    <category term="gsoc2013"/>
    <category term="ode"/>
    <category term="python"/>
    <category term="sympy"/>
    <author>
      <name>Manoj Kumar</name>
    </author>
    <source>
      <id>http://manojbits.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://manojbits.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://manojbits.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://manojbits.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://manojbits.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>From a learner's perspective</subtitle>
      <title>Perspective » SymPy</title>
      <updated>2014-01-14T17:20:46Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-5472769892551526876.post-60483212976312007</id>
    <link href="http://codesachin.blogspot.com/feeds/60483212976312007/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=5472769892551526876&amp;postID=60483212976312007" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/60483212976312007" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/60483212976312007" rel="self" type="application/atom+xml"/>
    <link href="http://codesachin.blogspot.com/2013/08/gsoc-week9-beginning-of-electrostatics.html" rel="alternate" type="text/html"/>
    <title>GSoC Week9 : Beginning of electrostatics</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">Week 8 of GSoC is now over, and just 5 more weeks remain till the hard pencils-down date.<br/>However, my work on the project will most likely exceed that time, since I will be having my first tests around September 17. I am sure I will be able to get all the code in by that time, but to make the entire work shippable, things like Sphinx documentation, doctests etc will also have to be finished, which may take a little more time beyond the actual deadline.<br/><br/>Anyways, coming to this week's work, I wrote some code for electrostatics. I added some functions and the ParticleCharge class (inheriting from Particle of mechanics module).<br/>However, the E-M module's handling of charged particles required me to modify my earlier implementation of Particle- most importantly, adding a 'set_motion' method. Like I mentioned earlier, Particle earlier had a frame attached to it. Gilbert and I discussed at length on this, and we agreed that making the <i>user </i>initialize a new frame everytime, just to attach it to a Particle, was quite cumbersome.<br/>Hence, I modified the class in the mechanics core- It still has a frame as an attribute, but its now 'hidden' from the user (nothing in Python in hidden from the user, but what I mean here is that the user can do everything with a Particle without caring about the frame). The set_motion method I mentioned earlier just initializes a new frame according to the motion parameters set by the user (similar to MovingRefFrame).<br/><br/>The main reason I want a frame attached to a Particle is the ease of inner working. Since a Particle will not have an 'angular acceleration', those parts of the MovingRefFrame code will never really get executed in Particle. However, Gilbert has a point in pointing out that its unnecessarily adding a complex attribute to the class. We havent finalized anything yet, but re-writing the motion-setting methods for Particle would be tedious, and more importantly, will lead to quite a lot of code duplication. Lets see what we end up doing.<br/><br/>Anyways, I also finished writing tests for the code I wrote this week, and I am waiting for a review from Gilbert. Jason and he also encouraged me to add example-tests to ensure everything works smoothly.<br/>Here are the example tests I wrote (they are really basic, but its better that way, since strenuous tests only make things worse)-<br/><br/><pre style=""><code style="color: black;"> def test_example_1():  <br/>   """  <br/>   This is a sample example meant to test the basic functionality of  <br/>   electrostatics.py  <br/>   <br/>   Consider a frame R, and a particle charge P(mass m, charge q) situated  <br/>   at its origin initially.  <br/>   Now, at time t=0, a field R.x+R.y+R.z is 'switched on' and kept that way  <br/>   for time 't0'.  <br/>   The user needs the x-coordinate of the particle charge as a function of  <br/>   time, after the field is switched off at time=t0.  <br/>   """  <br/>     <br/>   #Basic initialization  <br/>   m, q = symbols('m q')  <br/>   P = ParticleCharge('P', m, q)  <br/>   P.set_motion(R, pos_vector = 0)  <br/>   field = R.x + R.y + R.z  <br/>   time = dynamicsymbols._t  <br/>   t0 = Symbol('t0')  <br/>   #The acceleration is equal to the electrostatic force experience by the  <br/>   #particle charge, divided by its mass  <br/>   acceleration = P.electrostatic_force(field)/P.mass  <br/>   #Use get_motion_acc from the mechanics core to find velocity and position  <br/>   #parameters using acceleration function and boundary conditions  <br/>   translation = get_motion_acc(acceleration, \  <br/>                  0, P.pos_vector_wrt(R), frame = R)  <br/>   #Calculate the motion parameters of the particle charge at time t0  <br/>   acceleration = translation[0]  <br/>   velocity_at_t0 = translation[1].subs({time:t0})  <br/>   position_at_t0 = translation[2].subs({time:t0})  <br/>   #Set motion of P accordingly  <br/>   P.set_motion(R, trans_acc = 0, trans_vel_b = velocity_at_t0,  <br/>          pos_vector_b = position_at_t0)  <br/>   #assert that the dot product of P's pos_vector wrt R, with R.x  <br/>   #matches the actual result  <br/>   assert P.pos_vector_wrt(R).dot(R.x) == \  <br/>       q*t*t0/m + q*t0**2/(2*m)  <br/>   <br/>   <br/> def test_example_2():  <br/>   """  <br/>   This is a sample example meant to test the basic functionality of  <br/>   electrostatics.py  <br/>   <br/>   Consider a set of 3 particle charges of equal mass and charge placed  <br/>   symmetrically on a circle of unit radius around the origin, with one  <br/>   point lying at position vector of R.y  <br/>   We calculate the energy required to assemble this system of charges from  <br/>   infinity(with no kinetic energy in any particle) and find out values of  <br/>   the electrostatic fields and potentials at the origin  <br/>   """  <br/>   <br/>   #Basic initialization  <br/>   from sympy import sin, cos, pi  <br/>   m, q = symbols('m q')  <br/>   P = ParticleCharge('P', m, q)  <br/>   Q = ParticleCharge('Q', m, q)  <br/>   S = ParticleCharge('S', m, q)  <br/>   #Place particle charges as per required configuration  <br/>   P.set_motion(R, pos_vector = R.y)  <br/>   Q.set_motion(R, pos_vector = -cos(pi/6) * R.x + -sin(pi/6) * R.y)  <br/>   S.set_motion(R, pos_vector = cos(pi/6) * R.x + -sin(pi/6) * R.y)  <br/>   #Check outputs of required values  <br/>   assert charge_assembly_energy(P, Q, S) == 3*3**(-0.5)*k*q**2  <br/>   assert S.electrostatic_field(R, 0) + \  <br/>       Q.electrostatic_field(R, 0) + \  <br/>       P.electrostatic_field(R, 0) == 0  <br/>   assert P.electrostatic_potential(R, 0) == \  <br/>       Q.electrostatic_potential(R, 0) == \  <br/>       S.electrostatic_potential(R, 0)  <br/></code></pre><br/>If you think the API is a little complex, I think so too, but those modifications are for later. It would be good, according to me, to have something like an 'environment' infrastructure. Basically, the user will keep adding components (fields, particles etc etc) to it, and the constituents will keep getting modified accordingly. However, it will be good to have the module at a certain level of working before thinking on those lines.<br/><br/>That's all there is to report for this week. The coming week, I will be reading up on magnetostatics from Griffith's and start coding for the same. However, I am afraid things are only going to get more and more complex hereon. Lets hope for the best.<br/><br/>Have a great week :-)<br/><br/></div></div>
    </content>
    <updated>2013-08-18T17:29:03Z</updated>
    <published>2013-08-18T17:29:00Z</published>
    <author>
      <name>Sachin Joglekar</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/106302547764750990775</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5472769892551526876</id>
      <author>
        <name>Sachin Joglekar</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://codesachin.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>-Sachin Joglekar-</subtitle>
      <title>Dream. Think. Code.</title>
      <updated>2013-11-30T11:34:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://musingsofafriend.wordpress.com/?p=199</id>
    <link href="http://musingsofafriend.wordpress.com/2013/08/18/gsoc-week-9-getting-some-wotk-done/" rel="alternate" type="text/html"/>
    <title>GSoC Week 9: Getting some work done</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week was quite productive, I think. Finally, I was able to get some important parts done. So, for the last couple of weeks, I had been stuck on the express method for vectors. Reasons were many – the most … <a class="more-link" href="http://musingsofafriend.wordpress.com/2013/08/18/gsoc-week-9-getting-some-wotk-done/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=199&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week was quite productive, I think. Finally, I was able to get some important parts done.</p>
<p>So, for the last couple of weeks, I had been stuck on the express method for vectors. Reasons were many – the most prominent one being an onging coleege semester. Nevertheless, I knew that once I am done with the express method, then things will proceed at a much better pace. And it seems, foe once, I was right.</p>
<p>In the last post, I wrote that I had got started with the vector calculus methods for vectors. This means all the methods required to perform both differntiation operations as well as integration operations on vectors. The first in this series was the ‘grad’ method. This one required a little repetition of code from the express method; I’ll need to refactor that later on. One of the problems I faced with this method was due to the generic nature of coordinate system. Indeed, we are allowing for a vector field to be composed of any number of coordinate systems – limited only by the memory of the computer. But, because we are using such a generalized approach, we cannot apply even the most generalized of the formulae on these vector fields. Our only choice now is, either to operate on each component – while applying the generalized formula – or, to express the vector field in a single coordinate system. But even in the former method, we can have a component, say, c0.x * c1.y – which is still in two different coordinate systems. So, we’ll still need to apply express on this <em>part</em> of the vector field.</p>
<p>On doing some analysis, I reached the conclusion that computationally, we will end up doing many more calls to express and doing similar kinds of calculations, no matter which way we go. So, I chose the method which is clearer; if the vector is in a single coordinate systems, well and good; but, if the vector is in more than one coordinate systems, then, the user will need to provide a coordinate system to express the results in.</p>
<p>Anyway, that’s how I proceeded with this method. On similar lines, I also implemented the <em>div</em> and the <em>curl</em> methods for vector fields.<em> </em>Also, I finalized the <em>dot </em>and <em>cross</em> methods for vectors.<i><br/>
</i></p>
<p>Once this was done, I wanted to start with methods related to integration. The first step to vector integrals was to have a class that can be used to represent parametric regions in space. Right now, I have allowed for at most 2 free parameters do define a region in space. In other words, the user can define curves and surfaces in space but not voulmes. Of course, I’ll add support for volumes later on subject to the availibility of time. Anyway, after this class had been defined, I wanted to have a class to hold integrals. First, I was thinking of adding a generic class for all kinds of integrals. But, just a little bit f thinking proced to me that this method will be quote inefficient not to mention very complex adding to the complexity of the code. So, I decided to have a base class <em>VectIntegral</em> wich will be subclasses by classes that will represent each differnt category of integrals.</p>
<p>For now, I have added two classes - <em>LineVectIntegral</em> and <em>SurfaceVectInetgral. </em>These will represent line and surface intrgrals of vectors fields. I have also added and eval method for the <em>LineVectIntegral </em>class as well. Currently, I am trying to add an eval method to the <em>SurfaceVectIntegral</em> class.</p>
<p>Anyway, this is how the work is going on. According to the Google timeline, there is still one month to go till the end of the coding period. But for me, things will be much harder. Again, the reason is academics. My midterm examinations start 10th September and that means I’ll have to begin preparing a week before that. So, for me, only about 18 days are left at best. I’ll try to do the most I can in that period.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/199/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/199/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=199&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-18T10:58:15Z</updated>
    <category term="Linux"/>
    <category term="Programming"/>
    <category term="Python"/>
    <category term="SymPy"/>
    <category term="vectors"/>
    <author>
      <name>musingsofafriend</name>
    </author>
    <source>
      <id>http://musingsofafriend.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://musingsofafriend.wordpress.com/tag/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://musingsofafriend.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://musingsofafriend.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://musingsofafriend.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>The greatest WordPress.com site in all the land!</subtitle>
      <title>musings of a friend - Prasoon Shukla » SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://thilinaatsympy.wordpress.com/?p=186</id>
    <link href="http://thilinaatsympy.wordpress.com/2013/08/18/improving-the-solving-process-by-using-cornacchia/" rel="alternate" type="text/html"/>
    <title>Improving the solving process using Cornacchia</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi All, It has been sometime since I last wrote about my project.  I spent most of my time improving the solving methods used in binary quadratic forms. I also did a fair bit of refactoring of the earlier work and bug fixing. The implementation of ternary quadratic forms is now almost done and once …<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=186&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi All, It has been sometime since I last wrote about my project.  I spent most of my time improving the solving methods used in binary quadratic forms. I also did a fair bit of refactoring of the earlier work and bug fixing. The implementation of ternary quadratic forms is now almost done and once the <a href="https://github.com/sympy/sympy/pull/2307">pull request</a> by Pernici gets merged, we can use his function for finding the solutions for the quadratic congruence <img alt="x^2 \equiv a \ (mod \ p)" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+%5Cequiv+a+%5C+%28mod+%5C+p%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 \equiv a \ (mod \ p)"/> and the time taken to find the solutions for ternary / binary quadratic forms will be reduced considerably.</p>
<h4>Tweaks to the algorithms used in solving quadratic binary forms</h4>
<p>I had a misunderstanding earlier that the binary quadratic form <img alt="ax^2 + bxy + cy^2 + dx + ey + f = 0" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%2B+dx+%2B+ey+%2B+f+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + bxy + cy^2 + dx + ey + f = 0"/> can be converted to the form <img alt="x^2 - Dy^2 = N" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+-+Dy%5E2+%3D+N&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 - Dy^2 = N"/> only in the case <img alt="\Delta &gt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=%5CDelta+%3E+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\Delta &gt; 0"/> and <img alt="\Delta " class="latex" src="http://s0.wp.com/latex.php?latex=%5CDelta+&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\Delta "/> is not a perfect square. Here <img alt="\Delta = b^2 - 4ac" class="latex" src="http://s0.wp.com/latex.php?latex=%5CDelta+%3D+b%5E2+-+4ac&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\Delta = b^2 - 4ac"/>. It occurred to me only when I read [1] more carefully that any binary quadratic with <img alt="a \neq 0" class="latex" src="http://s0.wp.com/latex.php?latex=a+%5Cneq+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a \neq 0"/> and <img alt="c \neq 0" class="latex" src="http://s0.wp.com/latex.php?latex=c+%5Cneq+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="c \neq 0"/> can be transformed to the latter form. With this new discovery, our treatment of the binary quadratic becomes more general and efficient.  Now in both the cases <img alt="\Delta &gt; 0, \Delta" class="latex" src="http://s0.wp.com/latex.php?latex=%5CDelta+%3E+0%2C+%5CDelta&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\Delta &gt; 0, \Delta"/> is not a perfect square and <img alt="\Delta &lt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=%5CDelta+%3C+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\Delta &lt; 0"/>, we transform the equation to the form <img alt="x^2 -Dy^2 = N" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+-Dy%5E2+%3D+N&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 -Dy^2 = N"/>. The former case was earlier addressed under solving generalized Pell equation as the equation reduces to a generalized Pell equation in that case. My earlier approach with the latter case was to use brute force. I managed to implement the Cornacchia’s algorithm for this case as suggested by Pernici. Cornacchia’s algorithm can be used to solve the equation <img alt="ax^2 + by^2 = m" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%3D+m&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + by^2 = m"/> with <img alt="gcd(a, b) = 1 = gcd(a, m)" class="latex" src="http://s0.wp.com/latex.php?latex=gcd%28a%2C+b%29+%3D+1+%3D+gcd%28a%2C+m%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="gcd(a, b) = 1 = gcd(a, m)"/> and <img alt="a &gt; 0, b &gt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=a+%3E+0%2C+b+%3E+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a &gt; 0, b &gt; 0"/>. In our form under the case <img alt="\Delta &lt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=%5CDelta+%3C+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="\Delta &lt; 0"/>, <img alt="a = 1" class="latex" src="http://s0.wp.com/latex.php?latex=a+%3D+1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a = 1"/> and <img alt="b = -D &gt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=b+%3D+-D+%3E+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="b = -D &gt; 0"/>, so these two conditions are automatically fulfilled. Below is a rough outline of the Cornacchia’s algorithm. Refer [2] and [3] for more details.</p>
<p>Solving <img alt="ax^2 + by^2 = m" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%3D+m&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + by^2 = m"/> by Cornacchia’s method</p>
<p>1. Let <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="p"/> be such that <img alt="ap + mq = gcd(a, m)" class="latex" src="http://s0.wp.com/latex.php?latex=ap+%2B+mq+%3D+gcd%28a%2C+m%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ap + mq = gcd(a, m)"/>.<br/>
2. Construct a set <img alt="v" class="latex" src="http://s0.wp.com/latex.php?latex=v&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="v"/> such that <img alt="v = \{ x | x^2 \equiv -bp \ (mod \ m) \}" class="latex" src="http://s0.wp.com/latex.php?latex=v+%3D+%5C%7B+x+%7C+x%5E2+%5Cequiv+-bp+%5C+%28mod+%5C+m%29+%5C%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="v = \{ x | x^2 \equiv -bp \ (mod \ m) \}"/>. We can ommit solutions greater than <img alt="m/2" class="latex" src="http://s0.wp.com/latex.php?latex=m%2F2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="m/2"/>.<br/>
3. For each <img alt="t \in v" class="latex" src="http://s0.wp.com/latex.php?latex=t+%5Cin+v&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="t \in v"/> set <img alt="u_{1} = t, r_{1} = m" class="latex" src="http://s0.wp.com/latex.php?latex=u_%7B1%7D+%3D+t%2C+r_%7B1%7D+%3D+m&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="u_{1} = t, r_{1} = m"/>.<br/>
4. Define the sequences, <img alt="u_{i+1} = r_{i}" class="latex" src="http://s0.wp.com/latex.php?latex=u_%7Bi%2B1%7D+%3D+r_%7Bi%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="u_{i+1} = r_{i}"/> and <img alt="r_{i+1} = u_{i} \ mod \ r_{i}" class="latex" src="http://s0.wp.com/latex.php?latex=r_%7Bi%2B1%7D+%3D+u_%7Bi%7D+%5C+mod+%5C+r_%7Bi%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="r_{i+1} = u_{i} \ mod \ r_{i}"/> for <img alt="i &gt; 1" class="latex" src="http://s0.wp.com/latex.php?latex=i+%3E+1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="i &gt; 1"/>.<br/>
5. Find the terms <img alt="u_{i}, r_{i}" class="latex" src="http://s0.wp.com/latex.php?latex=u_%7Bi%7D%2C+r_%7Bi%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="u_{i}, r_{i}"/> until the condition <img alt="ar_{i}^2 &lt; m" class="latex" src="http://s0.wp.com/latex.php?latex=ar_%7Bi%7D%5E2+%3C+m&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ar_{i}^2 &lt; m"/> is met.<br/>
6. Set <img alt="m_{1} = m - ar_{i}^2" class="latex" src="http://s0.wp.com/latex.php?latex=m_%7B1%7D+%3D+m+-+ar_%7Bi%7D%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="m_{1} = m - ar_{i}^2"/>.<br/>
7. If <img alt="b | m_{1}" class="latex" src="http://s0.wp.com/latex.php?latex=b+%7C+m_%7B1%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="b | m_{1}"/> and <img alt="m_{2} = m_{1}/b" class="latex" src="http://s0.wp.com/latex.php?latex=m_%7B2%7D+%3D+m_%7B1%7D%2Fb&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="m_{2} = m_{1}/b"/> is a perfect square we have the solution <img alt="x = r_{i}" class="latex" src="http://s0.wp.com/latex.php?latex=x+%3D+r_%7Bi%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x = r_{i}"/> and <img alt="y = \sqrt{m_{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=y+%3D+%5Csqrt%7Bm_%7B2%7D%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="y = \sqrt{m_{2}}"/>.<br/>
8. Add <img alt="(x, y)" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%2C+y%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x, y)"/> to a set <img alt="S" class="latex" src="http://s0.wp.com/latex.php?latex=S&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="S"/>.<br/>
9. When we are done with all <img alt="t, S" class="latex" src="http://s0.wp.com/latex.php?latex=t%2C+S&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="t, S"/> contains all the solutions to the equation <img alt="ax^2 + by^2 = m" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%3D+m&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + by^2 = m"/>.</p>
<p>Cornacchia’s method finds solutions such that <img alt="gcd(x, y) = 1" class="latex" src="http://s0.wp.com/latex.php?latex=gcd%28x%2C+y%29+%3D+1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="gcd(x, y) = 1"/>. So it won’t find solutions to the equation <img alt="x^2 + y^2 = 20" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+%2B+y%5E2+%3D+20&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 + y^2 = 20"/> since the solutions of this equation is <img alt="(x, y) = (4, 2)" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%2C+y%29+%3D+%284%2C+2%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x, y) = (4, 2)"/> and <img alt="gcd(x, y) &gt; 1" class="latex" src="http://s0.wp.com/latex.php?latex=gcd%28x%2C+y%29+%3E+1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="gcd(x, y) &gt; 1"/>. So we have to extract out square factors in <img alt="m" class="latex" src="http://s0.wp.com/latex.php?latex=m&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="m"/> and find solutions to the equation with this new <img alt="m" class="latex" src="http://s0.wp.com/latex.php?latex=m&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="m"/> value and reconstruct the solutions. For example in the above example, 2 is a square factor of 20 (i.e square of two divides 20) so, we find solutions to <img alt="m = 20 /2^2 = 5" class="latex" src="http://s0.wp.com/latex.php?latex=m+%3D+20+%2F2%5E2+%3D+5&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="m = 20 /2^2 = 5"/>, i.e for the equation <img alt="x^2 + y^2 = 5" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+%2B+y%5E2+%3D+5&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 + y^2 = 5"/> and then reconstruct the solutions for the original equation.</p>
<h4>diophantine() and check_solutions()</h4>
<p>I replaced the main routine of the module by a new method `diophantine()`. What the old method,`diop_solve()` did was, when given with an input equation, it tried to find  the type of the equation using `classify_diop()` and called the appropriate solving function accordingly. So when given an equation like <img alt="x^2 + 3xy + 5x = 0 " class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+%2B+3xy+%2B+5x+%3D+0+&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 + 3xy + 5x = 0 "/>, diop_solve will identify this as a binary quadratic and try to solve this using methods for binary quadratics. But the best thing to do in this case is to factorize the above equation as <img alt="x(x + 3y + 5) = 0" class="latex" src="http://s0.wp.com/latex.php?latex=x%28x+%2B+3y+%2B+5%29+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x(x + 3y + 5) = 0"/> and solve <img alt="x = 0" class="latex" src="http://s0.wp.com/latex.php?latex=x+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x = 0"/> and <img alt="x+3y+5 = 0" class="latex" src="http://s0.wp.com/latex.php?latex=x%2B3y%2B5+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x+3y+5 = 0"/> separately. After that, we can construct the general solution by adding parameters. The general solution <img alt="(x, y, z) = (0, n_{1}, n_{2})" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%280%2C+n_%7B1%7D%2C+n_%7B2%7D%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x, y, z) = (0, n_{1}, n_{2})"/> will be constructed after solving <img alt="x = 0" class="latex" src="http://s0.wp.com/latex.php?latex=x+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x = 0"/> and will be added to the solution set for <img alt="x^2 + 3xy + 5x = 0 " class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+%2B+3xy+%2B+5x+%3D+0+&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 + 3xy + 5x = 0 "/>. This was done by introducing the new routine `diophantine()`. This is now the main routine for the module and when we call `diophantine(eq)`, first `diophantine()` tries to factor `eq` and then solve each factor using `diop_solve()`. Then it creates the general solution and that will be added to the solution set for `eq`. This is a very good approach and it is also a very common method used when we try to solve Diophantine equations manually.</p>
<p>I also unified various kinds of  functions in `test_diophantine.py` which were used to find whether the solutions returned by a function satisfies the input equation. I wrote a new method `check_solutions()`. Aaron should be thanked for proposing such a method and now the `test_diophantine.py` looks nicer and whoever trying to hack it doesn’t need to study various kinds of solution checking functions. To be honest, I was running out of names for these functions because a new one had to be created for each equation type.</p>
<h4>Bug Fixing</h4>
<p>I spent a considerable time fixing the bugs in the module, especially towards the end of the last week. I had done some mistakes when transforming general ternary quadratic equation into the form <img alt="ax^2 + by^2 + cz^2 = 0" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%2B+cz%5E2+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + by^2 + cz^2 = 0"/>. Also, in `diophantine()` method, I hadn’t check for the case when None is returned to indicate the insolubility of the equation. I also found a bug in the `factor_list()` function under Python3. Here is the issue I created for it: <a href="https://code.google.com/p/sympy/issues/detail?id=3968" rel="nofollow">https://code.google.com/p/sympy/issues/detail?id=3968</a></p>
<p>Hmm, That is pretty much everything I did during the past weeks. I hope in the upcoming week I can start on solving extended Pythagorean equation.</p>
<h4>References</h4>
<p>[1]<em> Solving the equation ax^2 + bxy + cy^2 + dx + ey + f = 0</em>, John P.Robertson, May 8, 2003. <a href="http://www.jpr2718.org/ax2p.pdf" rel="nofollow">http://www.jpr2718.org/ax2p.pdf</a><br/>
[2] <em>Solving ax^2 + by^2 = m by Cornacchia’s method</em>, Number theory web, <a href="http://www.numbertheory.org/php/cornacchia.html" rel="nofollow">http://www.numbertheory.org/php/cornacchia.html</a><br/>
[3] A. Nitaj, <em>L’algorithme de Cornacchia</em>, Expositiones Mathematicae 13 (1995), 358-365</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/186/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/186/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=186&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-18T04:25:25Z</updated>
    <category term="GSoC-2013-SymPy"/>
    <category term="Binary quadratic forms"/>
    <category term="Cornacchia"/>
    <category term="Cornacchia's Algorithm"/>
    <category term="Diophantine Equations"/>
    <author>
      <name>Thilina Rathnayake</name>
    </author>
    <source>
      <id>http://thilinaatsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://thilinaatsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://thilinaatsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://thilinaatsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://thilinaatsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My Work related to sympy</subtitle>
      <title>Thilina's SymPy Blog</title>
      <updated>2014-01-14T17:20:47Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://meclark256.wordpress.com/?p=98</id>
    <link href="http://meclark256.wordpress.com/2013/08/16/week-9/" rel="alternate" type="text/html"/>
    <title>Week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I have been doing more work with the RootSystem class.   I created a PR (https://github.com/sympy/sympy/pull/2382) with everything that I accomplished on it last week, just so that it’s up there and people can comment on it.  This week, I implemented the root adding functions.  One function just takes any two simple roots and […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=98&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I have been doing more work with the RootSystem class.   I created a PR (<a href="https://github.com/sympy/sympy/pull/2382" rel="nofollow">https://github.com/sympy/sympy/pull/2382</a>) with everything that I accomplished on it last week, just so that it’s up there and people can comment on it. </p>
<p>This week, I implemented the root adding functions.  One function just takes any two simple roots and adds them together, and returns the new root.  It functions by having the user input two integers (which must be less than the rank of the lie algebra) and takes these integers to be the keys in the dictionary of positive roots, and retrieves the corresponding simple root.  Then it just add adds the lists corresponding to the roots (by adding together the two first elements, the two second elements, etc) and returns a new list, which is the new root.  </p>
<p> </p>
<p>Then, I also implemented a function which takes two roots as input, and if their sum is a root, returns their sum as a new root.  To do this, I first needed to have all the roots of a given Lie algebra available.  That is why last week I implemented a method for generating all the positive roots for A, B, C, and D.  This week I also did that for E, F, and G.  This enabled me to implement a method in RootSystem that generates all the roots of a given Lie algebra, by first getting the positive roots, and then using the positive roots to generate the negative roots (by multiplying each positive root by -1). </p>
<p> </p>
<p>Then the method add_as_root works by checking the dictionary of all roots to see if the sum of the two input roots is also a root.  If it’s not, it returns a string saying “The sum of these two roots is not a root”.  Otherwise it returns the sum as a list, as usual.</p>
<p>This week I also worked on documentation and the like for all my functions.  This weekend I’m going to make sure all the doctests pass.  Then, my plan for next week is to start work on the the WeylGroup class.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/98/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/98/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=98&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-16T19:11:19Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>meclark256</name>
    </author>
    <source>
      <id>http://meclark256.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://meclark256.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://meclark256.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://meclark256.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://meclark256.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Smile! You’re at the best WordPress.com site ever</subtitle>
      <title>My GSOC Adventure with SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sophiessympyblog.wordpress.com/?p=254</id>
    <link href="http://sophiessympyblog.wordpress.com/2013/08/16/8th-and-9th-week/" rel="alternate" type="text/html"/>
    <title>8th and 9th week</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Finally, here is my post on the last two weeks. First of all, I submitted a PR for the modular GCD algorithm for polynomials over algebraic fields. For this, I had to finish and update documentation and write tests. Another task was getting my first PR ready for merging. For this, I needed to cover […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=254&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: justify;">Finally, here is my post on the last two weeks. First of all, I submitted a <a href="https://github.com/sympy/sympy/pull/2365" title="Modular GCD for polynomials over algebraic number fields">PR</a> for the modular GCD algorithm for polynomials over algebraic fields. For this, I had to finish and update documentation and write tests.</p>
<p style="text-align: justify;">Another task was getting my <a href="https://github.com/sympy/sympy/pull/2281" title="modular GCD algorithm for integer polynomials">first PR</a> ready for merging. For this, I needed to cover more lines of the code, since every untested one is “a bug waiting to happen”. The difficulty here is the random choice of evaluation points in <code>_modgcd_multivariate_p</code>. So I searched for an example such that for one prime every evaluation point is unlucky. I am glad I found one, since the only other possibility would have been to add an optional argument to choose the evaluation points manually. Now almost every line is tested and the few ones that are not should be harmless. <img alt=";)" class="wp-smiley" src="http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif"/> </p>
<p style="text-align: justify;">After that, I thoroughly studied the article [1] on factorization of polynomials over algebraic domains. I also started with the implementation, but I did not get very far yet.</p>
<p style="text-align: justify;">Sorry for this entry being so late but still so short, I hope that next week there will be more stuff to blog about!</p>
<p style="text-align: justify;">[1] <a href="http://www.cecm.sfu.ca/~monaganm/papers/mahdiFactor.pdf" rel="nofollow">http://www.cecm.sfu.ca/~monaganm/papers/mahdiFactor.pdf</a></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/254/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/254/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=254&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-16T13:29:50Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>katjasophie</name>
    </author>
    <source>
      <id>http://sophiessympyblog.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sophiessympyblog.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sophiessympyblog.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sophiessympyblog.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sophiessympyblog.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>my gsoc 2013 project</subtitle>
      <title>sophie's sympy blog</title>
      <updated>2014-01-14T17:20:51Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://matthewrocklin.com/blog//work/2013/08/14/SymPy-Theano-part-4</id>
    <link href="http://matthewrocklin.com/blog//work/2013/08/14/SymPy-Theano-part-4" rel="alternate" type="text/html"/>
    <title>Using SymPy within Theano</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Several months ago I published a sequence of blogposts about using SymPy and Theano together to generate efficient mathematical codes. Main points from the posts were as follows</p>

<ul>
<li><a href="http://matthewrocklin.com/blog/work/2013/03/19/SymPy-Theano-part-1/">Code Generation</a>: We created a drop-in replacement for SymPy’s code generation with a thin layer to Theano.</li>

<li><a href="http://matthewrocklin.com/blog/work/2013/03/28/SymPy-Theano-part-2/">Scalar Simplificaiton</a>: We used SymPy’s simplification routines to accelerate programs prior to code printing in Theano</li>

<li><a href="http://matthewrocklin.com/blog/work/2013/04/05/SymPy-Theano-part-3/">Matrix Expressions</a>: We generate fast blocked numeric linear algebra programs from SymPy’s matrix expressions using Theano array operations.</li>
</ul>

<p>A week ago <a href="https://groups.google.com/d/topic/sympy/VtaxCRNO4sE/discussion">someone popped up on the SymPy mailing list</a> asking if a particular SymPy operation (<code>sympy.Piecewise</code>) could be supported in the SymPy-Theano translation. Because Theano has a similar operation (<code>theano.tensor.switch</code>) it was simple to add this translation. In general though this post raised some interesting questions:</p>

<ul>
<li>Is there a way to avoid constantly making new translations for operations that exist both in SymPy and in Theano?</li>

<li>What do we do with SymPy’s more exotic operations for which no Theano analog exists? E.g. how do we generate code for factorial or bessel functions?</li>
</ul>

<p>In an attempt to resolve these issues we recently merged a general <code>SymPyCCode</code> operation into the <code>Theano</code> project. It enables the expression of a Theano scalar operation through SymPy expressions using SymPy’s original code generation capability. For example we can create a simple addition operation like so</p>
<div class="highlight"><pre><code class="python"><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Symbol</span><span class="p">,</span> <span class="n">symbols</span>
<span class="kn">from</span> <span class="nn">theano.scalar.basic_sympy</span> <span class="kn">import</span> <span class="n">SymPyCCode</span>

<span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="s">'x,y'</span><span class="p">)</span>            <span class="c"># SymPy Symbols</span>
<span class="n">add</span> <span class="o">=</span> <span class="n">SymPyCCode</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">],</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span>  <span class="c"># A Theano addition operator</span>
</code></pre></div>
<p>Theano operators can be applied to Theano variables to make compound Theano expressions</p>
<div class="highlight"><pre><code class="python"><span class="kn">from</span> <span class="nn">theano.scalar</span> <span class="kn">import</span> <span class="n">floats</span>

<span class="n">xt</span><span class="p">,</span> <span class="n">yt</span> <span class="o">=</span> <span class="n">floats</span><span class="p">(</span><span class="s">'xy'</span><span class="p">)</span>
<span class="n">zt</span> <span class="o">=</span> <span class="n">add</span><span class="p">(</span><span class="n">xt</span><span class="p">,</span> <span class="n">yt</span><span class="p">)</span>
</code></pre></div>
<p>Theano can then turn these expressions into functions</p>
<div class="highlight"><pre><code class="python"><span class="kn">from</span> <span class="nn">theano</span> <span class="kn">import</span> <span class="n">function</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">function</span><span class="p">([</span><span class="n">xt</span><span class="p">,</span> <span class="n">yt</span><span class="p">],</span> <span class="n">zt</span><span class="p">)</span>
<span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c"># prints 5.0</span>
</code></pre></div>
<p>So we can describe scalar operations in SymPy and use them directly in Theano without having to translate anything. Of course, the <code>add</code> operation is already native in Theano. This is more useful for complex scalar expressions, particularly if Theano does not already have such an operation</p>
<div class="highlight"><pre><code class="python"><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">gamma</span>
<span class="n">theano_gamma</span> <span class="o">=</span> <span class="n">SymPyCCode</span><span class="p">([</span><span class="n">x</span><span class="p">],</span> <span class="n">gamma</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>

<span class="kn">from</span> <span class="nn">sympy.stats.crv_types</span> <span class="kn">import</span> <span class="n">NormalDistribution</span>
<span class="n">mu</span> <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'mu'</span><span class="p">,</span> <span class="n">bounded</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">sigma</span> <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'sigma'</span><span class="p">,</span> <span class="n">positive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">normal</span> <span class="o">=</span> <span class="n">SymPyCCode</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">],</span> <span class="n">NormalDistribution</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)(</span><span class="n">x</span><span class="p">))</span>
</code></pre></div>
<h2 id="under_the_hood">Under the Hood</h2>

<p>Internally the <code>SymPyCCode</code> op calls SymPy’s C code printers to generate an implementation of the scalar operation. For example the following SymPy code generates C code to compute the probability density function of a normal distribution.</p>
<div class="highlight"><pre><code class="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sympy.printing</span> <span class="kn">import</span> <span class="n">ccode</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ccode</span><span class="p">(</span><span class="n">NormalDistribution</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)(</span><span class="n">x</span><span class="p">))</span>
<span class="p">(</span><span class="mf">1.0</span><span class="n">L</span><span class="o">/</span><span class="mf">2.0</span><span class="n">L</span><span class="p">)</span><span class="o">*</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="n">L</span><span class="o">/</span><span class="mf">2.0</span><span class="n">L</span><span class="o">*</span><span class="nb">pow</span><span class="p">(</span><span class="o">-</span><span class="n">mu</span> <span class="o">+</span> <span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="nb">pow</span><span class="p">(</span><span class="n">sigma</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">M_PI</span><span class="p">)</span><span class="o">*</span><span class="n">sigma</span><span class="p">)</span>
</code></pre></div>
<p>Theano is then able to use this generated C code within its generated C program. Theano still handles memory, common sub-expressions, arrays, etc. but is now able to leverage SymPy to generate low-level kernels for mathematical operations.</p>

<h2 id="but_dont_use_this">But Don’t Use This</h2>

<p>But you shouldn’t use this mechanism if you don’t have to. Recall from the <a href="http://matthewrocklin.com/blog/work/2013/03/19/SymPy-Theano-part-1/">first post</a> that SymPy can translate many standard operations to Theano directly, without having to wrap the SymPy expressions up in a black box Theano operation. Native translation enables Theano to use many additional optimizations like the use of the GPU, automatic differentiation, and common sub-expression elimination across many expressions. This approach is mainly for cases where your complex scalar expressions don’t translate well to Theano. In some cases the SymPyCCode op may also provide better performance (maybe SymPy’s generated C code is a bit tighter?)</p>

<h2 id="future_work">Future Work</h2>

<p>We need to improve SymPy’s code printers. While they support all the standard operators they neglect to cover the really interesting cases like bessel functions or factorial. These are cases where the numerical analysis community can concisely describe the “right way” to compute many of these operations in isolation. For example the factorial of <code>n</code> can be computed as <code>gamma(n+1)</code>, a fact rarely known by mainstream programmers.</p>

<p>$$ n! = \Gamma(n+1) \;\; \forall n \in \mathbb{N} $$</p>

<p>I’ve been thinking about the right way to do this generally. Right now my thought is that we should create a new <code>expand</code> hint for computation. If you have thoughts I’d love to hear about them; please speak up in the comments.</p>

<h2 id="example">Example</h2>

<p>There are a number of ways to compute a SymPy expression numerically. I’m going to explicily run throuh an example with a few of them below. You should ignore this section if these are already familiar to you.</p>

<p>We create a function to evaluate a normal distribution probability density function for a particular mean and standard deviation across a range of values for <code>x</code>.</p>
<div class="highlight"><pre><code class="python"><span class="c"># The Target Expression</span>
<span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Symbol</span>
<span class="kn">from</span> <span class="nn">sympy.stats.crv_types</span> <span class="kn">import</span> <span class="n">NormalDistribution</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
<span class="n">mu</span> <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'mu'</span><span class="p">,</span> <span class="n">bounded</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">sigma</span> <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'sigma'</span><span class="p">,</span> <span class="n">positive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">NormalDistribution</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>

<span class="c"># Make a numpy `ufunc` with Pure SymPy</span>
<span class="kn">from</span> <span class="nn">sympy.utilities.autowrap</span> <span class="kn">import</span> <span class="n">ufuncify</span>
<span class="n">f_ufunc</span> <span class="o">=</span> <span class="n">ufuncify</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">],</span> <span class="n">result</span><span class="p">)</span>

<span class="c"># Make a Theano function with SymPy</span>
<span class="kn">from</span> <span class="nn">sympy.printing.theanocode</span> <span class="kn">import</span> <span class="n">theano_function</span>
<span class="n">f_sym_theano</span> <span class="o">=</span> <span class="n">theano_function</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">],</span> <span class="p">[</span><span class="n">result</span><span class="p">],</span> <span class="n">dims</span><span class="o">=</span><span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">mu</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sigma</span><span class="p">:</span> <span class="mi">0</span><span class="p">})</span>

<span class="c"># Make a special Theano op using a SymPyCCode</span>
<span class="kn">from</span> <span class="nn">theano.scalar.basic_sympy</span> <span class="kn">import</span> <span class="n">SymPyCCode</span>
<span class="kn">from</span> <span class="nn">theano.tensor.elemwise</span> <span class="kn">import</span> <span class="n">Elemwise</span>
<span class="n">normal_op</span> <span class="o">=</span> <span class="n">Elemwise</span><span class="p">(</span><span class="n">SymPyCCode</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">],</span> <span class="n">result</span><span class="p">))</span>

<span class="c"># And then use that `op` in plain Theano code</span>
<span class="kn">import</span> <span class="nn">theano</span>
<span class="n">xt</span>     <span class="o">=</span> <span class="n">theano</span><span class="o">.</span><span class="n">tensor</span><span class="o">.</span><span class="n">vector</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
<span class="n">mut</span>    <span class="o">=</span> <span class="n">theano</span><span class="o">.</span><span class="n">scalar</span><span class="o">.</span><span class="n">float32</span><span class="p">(</span><span class="s">'mu'</span><span class="p">)</span>
<span class="n">sigmat</span> <span class="o">=</span> <span class="n">theano</span><span class="o">.</span><span class="n">scalar</span><span class="o">.</span><span class="n">float32</span><span class="p">(</span><span class="s">'sigma'</span><span class="p">)</span>

<span class="n">ft</span> <span class="o">=</span> <span class="n">theano</span><span class="o">.</span><span class="n">function</span><span class="p">([</span><span class="n">xt</span><span class="p">,</span> <span class="n">mut</span><span class="p">,</span> <span class="n">sigmat</span><span class="p">],</span> <span class="n">normal_op</span><span class="p">(</span><span class="n">xt</span><span class="p">,</span> <span class="n">mut</span><span class="p">,</span> <span class="n">sigmat</span><span class="p">))</span>
</code></pre></div></div>
    </summary>
    <updated>2013-08-14T07:00:00Z</updated>
    <source>
      <id>http://matthewrocklin.com/blog/</id>
      <author>
        <name>MRocklin</name>
      </author>
      <link href="http://matthewrocklin.com/blog/" rel="alternate" type="text/html"/>
      <link href="http://matthewrocklin.com/blog//feed.sympy.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts tagged as 'SymPy'</subtitle>
      <title>Working notes by Matthew Rocklin - SymPy</title>
      <updated>2014-01-14T17:20:36Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-7526836182390500993.post-4016168199703936089</id>
    <link href="http://tarun-gaba.blogspot.com/feeds/4016168199703936089/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/08/gsoc-report-week-7-8_12.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/4016168199703936089" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/4016168199703936089" rel="self" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/08/gsoc-report-week-7-8_12.html" rel="alternate" type="text/html"/>
    <title>GSoC report week 7, 8</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><br/>This is the compiled report for the week 7 and 8.<br/>The stuff is getting quite hectic now.<br/><br/>I have just been able to complete writing a Socket server, which would be used for fetching<br/>simulation data and information to the browser, while calling the display method from<br/>python interpreter.<br/>The server is in very basic form, only accepting requests, and sending the data accordingly.<br/>But it should suffice to complete the python side of things, that is creating the json files, and<br/>creating a basic server, which would be able to serve the required files and data to the browser.<br/><br/><br/>On the other side I have to work on Javascript Tests.<br/>We would be using Jasmine framework for Javascript testing.<br/>As far as Javascript API is concerned, it would be a simple script, containing a single class for<br/>handling the visualizations, Canvas class.<br/><br/>Also I have to figure out some way to make a single javascript module to be used for both IPython<br/>based visualizations and browser based.<br/><br/><br/></div></div>
    </content>
    <updated>2013-08-12T16:48:12Z</updated>
    <published>2013-08-12T16:48:00Z</published>
    <author>
      <name>TARUN GABA</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/100217361579446727229</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-7526836182390500993</id>
      <author>
        <name>TARUN GABA</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://tarun-gaba.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://tarun-gaba.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Tarun Gaba</title>
      <updated>2013-09-26T18:13:16Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-7526836182390500993.post-8910071387754657368</id>
    <link href="http://tarun-gaba.blogspot.com/feeds/8910071387754657368/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/08/gsoc-report-week-7-8.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/8910071387754657368" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/8910071387754657368" rel="self" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/08/gsoc-report-week-7-8.html" rel="alternate" type="text/html"/>
    <title>GSoC report week 7, 8</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><br/>This is the compiled report for the week 7 and 8.<br/>The stuff is getting quite hectic now.<br/><br/>I have just been able to complete writing a Socket server, which would be used for fetching<br/>simulation data and information to the browser, while calling the display method from<br/>python interpreter.<br/>The server is in very basic form, only accepting requests, and sending the data accordingly.<br/>But it should suffice to complete the python side of things, that is creating the json files, and<br/>creating a basic server, which would be able to serve the required files and data to the browser.<br/><br/><br/>On the other side I have to work on Javascript Tests.<br/>We would be using Jasmine framework for Javascript testing.<br/>As far as Javascript API is concerned, it would be a simple script, containing a single class for<br/>handling the visualizations, Canvas class.<br/><br/>Also I have to figure out some way to make a single javascript module to be used for both IPython<br/>based visualizations and browser based.<br/><br/><br/></div></div>
    </content>
    <updated>2013-08-12T16:17:09Z</updated>
    <published>2013-08-12T16:17:00Z</published>
    <author>
      <name>TARUN GABA</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/100217361579446727229</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-7526836182390500993</id>
      <author>
        <name>TARUN GABA</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://tarun-gaba.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://tarun-gaba.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Tarun Gaba</title>
      <updated>2013-09-26T18:13:16Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-5472769892551526876.post-2220078330318634946</id>
    <link href="http://codesachin.blogspot.com/feeds/2220078330318634946/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=5472769892551526876&amp;postID=2220078330318634946" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/2220078330318634946" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/2220078330318634946" rel="self" type="application/atom+xml"/>
    <link href="http://codesachin.blogspot.com/2013/08/gsoc-week-8.html" rel="alternate" type="text/html"/>
    <title>GSoC: Week 8</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">Week 8's over.<br/>This week was more of 'studying' and 'preparing' rather than coding. Since the entire infrastructure behind my initial proposal has now shifted considerably, I am drawing out the plans anew and getting the basic things done before I start working on sympy.physics.em (tentative name).<br/><br/>First off, I finally got the logic docs up at the SymPy development docs. You can see them <a href="http://docs.sympy.org/dev/modules/logic.html">here</a>.<br/>Second, I wrote the basic field functions for electrostatic theory (including the tests).<br/>Apart from that, I was mostly busy with college stuff (first week of classes are usually a little difficult for adjusting) and going through Griffith's book. So hopefully, I will get a lot done by the end of the coming week (code + further plans).<br/>Prasoon's code is shaping up well, and I may help him with the testing and debugging part to speed up the development of sympy.vector. I feel quite optimistic about the projects (Prasoon's and mine) now.<br/><br/>Well, thats all (short post, I know) for now.<br/>Will come back with more next time.<br/>Have a great week :-)</div></div>
    </content>
    <updated>2013-08-11T16:56:07Z</updated>
    <published>2013-08-11T16:56:00Z</published>
    <author>
      <name>Sachin Joglekar</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/106302547764750990775</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5472769892551526876</id>
      <author>
        <name>Sachin Joglekar</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://codesachin.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>-Sachin Joglekar-</subtitle>
      <title>Dream. Think. Code.</title>
      <updated>2013-11-30T11:34:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://manojbits.wordpress.com/?p=705</id>
    <link href="http://manojbits.wordpress.com/2013/08/11/lie-group-hint-for-sympy/" rel="alternate" type="text/html"/>
    <title>Lie Group hint for SymPy</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi, this week started with two of my previous PR’s getting merged (finally). 1.  The heuristics PR – https://github.com/sympy/sympy/pull/2308 2. The variable coefficient PDE – https://github.com/sympy/sympy/pull/2346 I started working on the integration of the infinitesimals to the present dsolve architecture. Before telling about the issues I ran into (a number of them actually), let me […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=705&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi, this week started with two of my previous PR’s getting merged (finally).</p>
<p>1.  The heuristics PR – <a href="https://github.com/sympy/sympy/pull/2308" rel="nofollow">https://github.com/sympy/sympy/pull/2308</a><br/>
2. The variable coefficient PDE – <a href="https://github.com/sympy/sympy/pull/2346" rel="nofollow">https://github.com/sympy/sympy/pull/2346</a></p>
<p>I started working on the integration of the infinitesimals to the present dsolve architecture. Before telling about the issues I ran into (a number of them actually), let me explain the algorithm in a few lines.</p>
<p>As you know (If you have been following my blog),the past few weeks my focus was on solving this monster PDE.<br/>
<img alt="\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D+%2B+%28%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+y%7D+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+x%7D%29+%2A+h%28x%2C+y%29+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+y%7D%2Ah%28x%2Cy%29%5E%7B2%7D+-+%5Cxi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%5Ceta%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}"/><br/>
Why? Well, without going too much into detail, the solution to this PDE, <img alt="\xi" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cxi&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\xi"/> and <img alt="\eta" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ceta&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\eta"/>, give the infinitesimals of the ODE <img alt="\frac{dy}{dx} = h(x, y)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+h%28x%2C+y%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{dy}{dx} = h(x, y)"/>. After getting the infinitesimals, this method is adopted.<br/>
1] One has to solve the Partial Differential Equations (again?)<br/>
   a] <img alt="\xi\frac{\partial r}{\partial x} + \eta\frac{\partial r}{\partial y} = 0" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cxi%5Cfrac%7B%5Cpartial+r%7D%7B%5Cpartial+x%7D+%2B+%5Ceta%5Cfrac%7B%5Cpartial+r%7D%7B%5Cpartial+y%7D+%3D+0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\xi\frac{\partial r}{\partial x} + \eta\frac{\partial r}{\partial y} = 0"/><br/>
   b] <img alt="\xi\frac{\partial r}{\partial x} + \eta\frac{\partial s}{\partial y} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cxi%5Cfrac%7B%5Cpartial+r%7D%7B%5Cpartial+x%7D+%2B+%5Ceta%5Cfrac%7B%5Cpartial+s%7D%7B%5Cpartial+y%7D+%3D+1&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\xi\frac{\partial r}{\partial x} + \eta\frac{\partial s}{\partial y} = 1"/><br/>
2] Now one knows <img alt="r" class="latex" src="http://s0.wp.com/latex.php?latex=r&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="r"/> and <img alt="s" class="latex" src="http://s0.wp.com/latex.php?latex=s&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="s"/> in terms of <img alt="x" class="latex" src="http://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x"/> and <img alt="y" class="latex" src="http://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="y"/>, doing <img alt="\frac{ds}{dr} = \frac{\frac{\partial s}{\partial x} + \frac{\partial s}{\partial y}*h}{\frac{\partial s}{\partial x} + \frac{\partial s}{\partial y}*h}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bds%7D%7Bdr%7D+%3D+%5Cfrac%7B%5Cfrac%7B%5Cpartial+s%7D%7B%5Cpartial+x%7D+%2B+%5Cfrac%7B%5Cpartial+s%7D%7B%5Cpartial+y%7D%2Ah%7D%7B%5Cfrac%7B%5Cpartial+s%7D%7B%5Cpartial+x%7D+%2B+%5Cfrac%7B%5Cpartial+s%7D%7B%5Cpartial+y%7D%2Ah%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{ds}{dr} = \frac{\frac{\partial s}{\partial x} + \frac{\partial s}{\partial y}*h}{\frac{\partial s}{\partial x} + \frac{\partial s}{\partial y}*h}"/> and converting the R.H.S in terms of <img alt="r" class="latex" src="http://s0.wp.com/latex.php?latex=r&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="r"/> and <img alt="s" class="latex" src="http://s0.wp.com/latex.php?latex=s&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="s"/>, reduces into a quadrature, which can be solved quite easily with the ode_separable hint<br/>
3] After solving the ODE, it can be converted back into the original coordinates.</p>
<p>On a scale of optimism to pessimism, I am somewhere in between a realist and a pessimist, and I have to admit I was slightly disappointed with the effectiveness of the hint, since I was running into various issues, with a few ODEs that I had tested. These were some of them that I had identified.</p>
<p>1] Problem with Integral: I was testing an ODE in which, <img alt="r = x" class="latex" src="http://s0.wp.com/latex.php?latex=r+%3D+x&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="r = x"/>, and I had to integrate a huge expression, which couldn’t be integrated, something like <img alt="\frac{1}{\sqrt{a0 + a1*r + a2*r^{2} + a3^r{3}}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7Ba0+%2B+a1%2Ar+%2B+a2%2Ar%5E%7B2%7D+%2B+a3%5Er%7B3%7D%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{1}{\sqrt{a0 + a1*r + a2*r^{2} + a3^r{3}}}"/>, it gave me an output of the form Integral, and when I substitued <img alt="r" class="latex" src="http://s0.wp.com/latex.php?latex=r&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="r"/> as <img alt="x" class="latex" src="http://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x"/>, it gave me a definite value, this is because doing subs on an Integral object, doesn’t substitute for the variable with respect to which you are integrating to. I was pointed to this issue by Aaron, which I haven’t looked at yet.</p>
<p>2] Assumptions: When I was applying to SymPy for Google Summer of Code, I saw this awesome proposal by Tom Bachmann, which seemed Greek and Latin to me then (Some parts of it does still, but never mind). The bottom line, is <img alt="\frac{dr}{ds}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdr%7D%7Bds%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{dr}{ds}"/> simplifies to a quadrature, sometimes only when, there are certain assumptions on <img alt="r" class="latex" src="http://s0.wp.com/latex.php?latex=r&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="r"/> and <img alt="s" class="latex" src="http://s0.wp.com/latex.php?latex=s&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="s"/>. Lets take a random example, suppose <img alt="\frac{dr}{ds} = log{r^{s}} - s*log{r}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdr%7D%7Bds%7D+%3D+log%7Br%5E%7Bs%7D%7D+-+s%2Alog%7Br%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{dr}{ds} = log{r^{s}} - s*log{r}"/> reduces to zero only when <img alt="r &gt; 0" class="latex" src="http://s0.wp.com/latex.php?latex=r+%3E+0&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="r &gt; 0"/>, Since the input variable is <img alt="x" class="latex" src="http://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x"/>, giving assumptions on <img alt="x" class="latex" src="http://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x"/>, doesn’t seem to affect the assumptions on <img alt="r" class="latex" src="http://s0.wp.com/latex.php?latex=r&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="r"/>.</p>
<p>3] There are some cases when the final expression, cannot be solved explicitly for <img alt="y" class="latex" src="http://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="y"/> like this <a href="https://gist.github.com/Manoj-Kumar-S/6201842" rel="nofollow">https://gist.github.com/Manoj-Kumar-S/6201842</a> . I think the best way would be to return it as it is.</p>
<p>4] Recursion: Take the case of this wonderful ODE, <img alt="x^{2}*(-f(x)^{2} + \frac{df}{dx})- a*x^{2}*f(x) + 2 - a*x" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E%7B2%7D%2A%28-f%28x%29%5E%7B2%7D+%2B+%5Cfrac%7Bdf%7D%7Bdx%7D%29-+a%2Ax%5E%7B2%7D%2Af%28x%29+%2B+2+-+a%2Ax&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="x^{2}*(-f(x)^{2} + \frac{df}{dx})- a*x^{2}*f(x) + 2 - a*x"/>, calculating the infinitesimals, give me <img alt="\xi = x^{2}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cxi+%3D+x%5E%7B2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\xi = x^{2}"/> and <img alt="\eta = a*x^{2}*f(x) - 2 + a*x + x^{2}*(-f(x)^{2})" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ceta+%3D+a%2Ax%5E%7B2%7D%2Af%28x%29+-+2+%2B+a%2Ax+%2B+x%5E%7B2%7D%2A%28-f%28x%29%5E%7B2%7D%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\eta = a*x^{2}*f(x) - 2 + a*x + x^{2}*(-f(x)^{2})"/>. Since the first step in solving the PDE, <img alt="\frac{dy}{dx} = \frac{\eta}{\xi}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+%5Cfrac%7B%5Ceta%7D%7B%5Cxi%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{dy}{dx} = \frac{\eta}{\xi}"/> , it gives the same ODE again.</p>
<p>Apart from this I believe rest of the code is good.</p>
<p>P.S: First ten days of college is over. There have been huge disappointments, but apart from that I have enjoyed either roaming outside, and working on my SymPy project, and I have done nothing other than that.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/705/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/705/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=705&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-11T15:21:06Z</updated>
    <category term="SymPy"/>
    <category term="differential"/>
    <category term="gsoc"/>
    <category term="gsoc2013"/>
    <category term="lie-group"/>
    <category term="ode"/>
    <category term="pde"/>
    <category term="python"/>
    <category term="sympy"/>
    <author>
      <name>Manoj Kumar</name>
    </author>
    <source>
      <id>http://manojbits.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://manojbits.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://manojbits.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://manojbits.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://manojbits.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>From a learner's perspective</subtitle>
      <title>Perspective » SymPy</title>
      <updated>2014-01-14T17:20:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1362</id>
    <link href="http://asmeurersympy.wordpress.com/2013/08/09/using-python-3-as-my-default-python/" rel="alternate" type="text/html"/>
    <title>Using Python 3 as my default Python</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So I just finished my internship with Continuum. For the internship, I primarily worked on Anaconda, their free Python distribution, and conda, its free (BSD open source) package manager. I might write a blog post about conda later, but suffice it to say that I’m convinced that it is doing package management the right way. […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1362&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So I just finished my internship with <a href="http://continuum.io">Continuum</a>. For the internship, I primarily worked on <a href="http://continuum.io/downloads">Anaconda</a>, their free Python distribution, and <a href="https://github.com/continuumIO/conda">conda</a>, its free (BSD open source) package manager. I might write a blog post about conda later, but suffice it to say that I’m convinced that it is doing package management the right way. One of the major developments this summer that I helped out with was the ability for <a href="http://docs.continuum.io/conda/build.html">anybody to build a conda package</a>, and a site called <a href="https://binstar.org">Binstar</a> where people can upload them (the beta code is “binstar in beta” with no quotes). </p>
<p>Another thing that happened over the summer is that Almar Klein made conda Python 3 compatible, so that it can be used with the <a href="http://www.pyzo.org">Pyzo</a> project, which is Python 3 only.    The way this was done was by using a single code base for Python 2 and Python 3. Thus, this became the first time I have done any heavy development on Python source that had to be Python 3 compatible from a single codebase (as opposed to using the 2to3 tool). </p>
<p>Another development this summer was that SymPy was released (<a href="https://github.com/sympy/sympy/releases/tag/sympy-0.7.3">0.7.3</a>). This marked the last release to support Python 2.5. Around the same time, we discussed our Python 3 situation, and how annoying it is to run use2to3 all the time. The result was <a href="https://github.com/sympy/sympy/pull/2318">this pull request</a>, which made SymPy use a single code base for Python 2 and Python 3. Now, that pull request is hard to mull through, but the important part to look at is the <a href="https://github.com/sympy/sympy/pull/2318/files#diff-124">compatibility</a> file. Everything in that file has to be imported and used, because it represents things that are different between Python 2 and Python 3. Ondřej has written more about this on <a href="http://ondrejcertik.blogspot.com/2013/08/how-to-support-both-python-2-and-3.html">his blog</a>. </p>
<p>In all, I think that supporting Python 2.6-3.3 (not including 3.0 or 3.1) is not that bad. The compatibility file has a few things, but thinking back, it was just that bad or worse supporting Python 2.4-2.7 (heck, back then, we couldn’t even use the <code>all</code> function without importing it). The situation is much better today now that we use Travis too, since any mistake is caught before the pull request is merged. The worst of course is the <code>print</code> function, but since that can be imported from <code>__future__</code>, I will be warned about it pretty fast, since <code>print</code> as a statement is a SyntaxError in that case. It also doesn’t take that long to get into the habit of typing <code>()</code> after <code>print</code>. </p>
<p>Of course, there are a lot of nice Python 3 only features that we cannot use, but this was the case for supporting Python 2.4-2.7 too (e.g., the with statement and the ternary statement were both introduced in Python 2.5).   So this is really nothing new. There is always a stick to drop the oldest Python version we support, and a lag on what features we can use. Now that we have dropped Python 2.5 support in SymPy, we can finally start using new-style string formatting, abstract base classes, relative imports, and keyword arguments after <code>*args</code>.</p>
<p>So as a result of this, I’ve come to the conclusion that Python 3 is <em>not</em> another language. It’s just another version of the same language. Supporting Python 2.6-3.3 is no different from supporting Python 2.4-2.7. You have to have some compatibility imports, you can’t use new language features, and you have to have good test coverage. I think that the core Python folks made a mistake by presenting Python 3 as a new language. It has made people antagonistic against Python 3 (well, that and the <code>print</code> function, which was another stupid mistake, because even if it was a good idea, it alone has kept too many people from switching). 2to3 was a mistake too, because it perpetuated this idea. </p>
<p>In the past, I have always developed against the latest version of Python: 2.6 was the best when I learned Python, and then 2.7. Even though I have had to support back to 2.4, I only used 2.4 explicitly when testing. </p>
<p>Well, given what I said above, the only logical thing to do is to use Python 3.3 as my main development Python. If you use Anaconda, there are basically two ways you can do this. The first is to just create a Python 3 environment (<code>conda create -n python3 python=3</code>), and put that first in your <code>PATH</code> (you also will need to add <code>source activate python3</code> to your bash profile if you go this route, so that <code>conda install</code> will install into that environment by default). For me, though, I plan to use a Python 3 version of Anaconda, which has Python 3 as the default. The main difference here is that <code>conda</code> itself is written in Python 3. Aside from purity, and the fact that I plan to fix any occasional conda bugs that I come across, the other difference here is that conda itself will default to Python 3 in this case (i.e., when creating a new environment with Python like <code>conda create -n envname python</code>, the Python will be Python 3, not Python 2, and also it will build against Python 3 by default with <code>conda build</code>). Continuum does not yet make Python 3 versions of Anaconda, but there are Python 3 versions of <a href="http://repo.continuum.io/miniconda/index.html">Miniconda</a> (Miniconda3), which is a stripped down version of Anaconda with just Python, the conda package manager, and its dependencies. You can easily install Anaconda into it though with <code>conda install anaconda</code>. I personally prefer to install only what I need to keep the disk usage low (on an SSD, disk space is sparse), so this is perfect for me anyway.</p>
<p>My recommendation is to put a Python 2 installation second in your PATH, so that you can easily call <code>python2</code> if you want to use Python 2. The easiest way to do this is to create a conda environment for it (<code>conda create -n python2 python=2</code>) and add <code>~/anaconda/envs/python2</code> to your PATH. </p>
<p>So far, I have run into a few issues:</p>
<ul>
<li>Some packages aren’t build for Python 3 yet in Anaconda, or they don’t support it at all.  The biggest blocker in Anaconda is PySide (at least on Mac OS X), though it should be coming soon. </li>
<li>Some packages only install entry points with a “3″ suffix, which is annoying. The biggest offender here is IPython. I brought up this issue on their <a href="http://mail.scipy.org/pipermail/ipython-dev/2013-August/012074.html">mailing list</a>, <del>so hopefully they will see the light and fix this before the next release</del>, but it hasn’t been implemented yet. I also plan to make sure that the Anaconda package for IPython installs an <code>ipython</code> entry point into Python 3 environments. Even so, one has to remember this when installing old versions of IPython in environments. </li>
<li>There are some bugs in conda in Python 3. Actually, I suspect that there are bugs in a lot of packages in Python 3, because people don’t develop against it, unless they have excellent test coverage. Even SymPy missed a few print statements. </li>
<li>You can’t <code>setup.py develop</code> against anything that uses 2to3 (like IPython). </li>
<li>It’s a little annoying working against old versions of SymPy (e.g., when digging through the git history to track something down), because I have to explicitly use Python 2. Conda makes this easier because I can just create a Python 2 environment and do <code>source activate python2</code> when I am using Python 2. Or, for a one-off, I can just use <code>python2</code>, and keep a Python 2 environment second in my PATH. But this issue is not really new. For example, really old versions of SymPy only work with Python 2.5, because they used <code>as</code> as a variable name.</li>
<li>Everyone else isn’t using Python 3 yet, so if I write a script that only needs to support “the latest version of Python,” it probably needs to support Python 2.7, or else I should explicitly put <code>/usr/bin/env python3</code> in the shebang line. But for SymPy, I have to be aware of how to support 2.6-3.3, so I have to know all the features that are only in some versions anyway. On the other side of things, if I run some random Python script with a shebang line, it probably is going to expect Python 2 and not Python 3, so I either have to explicitly add <code>python2</code> to the command or activate a Python 2 environment</li>
<li>Some packages just don’t support Python 3 yet. Fabric (and its main dependency, Paramiko) is the one example I have come across so far in my own work. So I have to fall back to Python 2 if I want to use them. The best thing to do here is to pitch in and help these libraries port themselves.</li>
<li>People always give code examples with <code>print</code> as a statement instead of a function, so I either have to fix it manually before pasting it or use Python 2. I had tried at one point to make a <code>%print</code> magic for IPython that would let print work like a statement in Python 3, but I never finished it. I guess I should revisit it.</li>
</ul>
<p>I’ll update this list as I come across more issues. </p>
<p>In all, so far, it’s nothing too bad. Conda makes switching back to Python 2 easy enough, and dealing with these issues are hardly the worst thing I have to deal with when developing with Python. And if anything, seeing Python 2-3 bugs and issues makes me more aware of the differences between the two versions of the language, which is a good things since I have to develop against code that has to support both. </p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1362/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1362/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1362&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-09T21:59:55Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2014-01-14T17:20:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://meclark256.wordpress.com/?p=82</id>
    <link href="http://meclark256.wordpress.com/2013/08/09/week-8/" rel="alternate" type="text/html"/>
    <title>Week 8</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I have been working on the class RootSystem.  The first major decision that I had to make about this class was how to encode the CartanType data, for lack of a better way of phrasing it.   There are numerous ways of doing this, but I think that my solution is somewhat elegant.  Effectively, […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=82&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I have been working on the class RootSystem. </p>
<p>The first major decision that I had to make about this class was how to encode the CartanType data, for lack of a better way of phrasing it.   There are numerous ways of doing this, but I think that my solution is somewhat elegant.  Effectively, when one calls an instance of the class RootSystem, it takes an argument, cartantype.  Then, the __new__ function takes the input and sets an attribute of RootSystem called cartan_type as CartanType(cartantype).  The code is:</p>
<p>class RootSystem(Basic):</p>
<p>    def __new__(cls, cartantype):<br/>        “”"<br/>        Creates a new RootSystem object.  This method assigns an attribute<br/>        called cartan_type to each instance of a RootSystem object.  When<br/>        an instance of RootSystem is called, it needs an argument, which <br/>        should be an instance of a simple Lie algebra.  We then take the<br/>        CartanType of this argument and set it as the cartan_type attribute<br/>        of the RootSystem instance.  <br/>        “”"<br/>        obj = Basic.__new__(cls, cartantype)<br/>        obj.cartan_type = CartanType(cartantype)<br/>        return obj</p>
<p>By doing this, it means that I don’t need to check the argument and see if it is “A” or “B” or “G” or whatever, and then importing the associated class.  I can just call self.cartan_type.rank() or self.cartan_type.simple_root(i), which I think is quite neat.  </p>
<p> </p>
<p>I’ve also decided to add a method to the base classes that generates all of their positive roots (and since the negative roots are just minus the positive roots, we effectively have the entire root system).  I think that this will facilitate some of the addition methods that I want to implement in RootSystem.  I have so far done this for types A, B, C, and D. </p>
<p> </p>
<p>At this point, in RootSystem I have so far implemented a method that generates all the simple roots,  a method for displaying the root space, and then methods which return the Cartan matrix and Dynkin diagram of the Lie algebra.  I am currently pondering on how I want to implement some root addition methods.</p>
<p> </p>
<p>So yeah, that’s been my week!  To be honest, I think it has been fairly productive, and I am quite pleased about that.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/82/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/82/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=82&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-09T19:55:18Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>meclark256</name>
    </author>
    <source>
      <id>http://meclark256.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://meclark256.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://meclark256.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://meclark256.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://meclark256.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Smile! You’re at the best WordPress.com site ever</subtitle>
      <title>My GSOC Adventure with SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://geekiology.wordpress.com/?p=407</id>
    <link href="http://geekiology.wordpress.com/2013/08/09/week-6-7-2/" rel="alternate" type="text/html"/>
    <title>Week 6 &amp; 7</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Week 6, brought me back to my coding arena “YES COLLEGE”. Though it was a messed up week with tons and tons of administration work, course selections, juniors arrival but still I could manage re-going through the Manuel Bronstien to see what the “HELL” has been causing the recursion error in the code. Though the […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;blog=36553244&amp;post=407&amp;subd=geekiology&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Week 6, brought me back to my coding arena “YES COLLEGE”. Though it was a messed up week with tons and tons of administration work, course selections, juniors arrival but still I could manage re-going through the Manuel Bronstien to see what the “HELL” has been causing the recursion error in the code.</p>
<p>Though the code has started picking up the pace, it works for some of the simple cases I have included in my previous post (Week-5) but it ended others in recursion errors. These cases are the ones where I have more than one monomial, here is an example to demonstrate the failure.</p>
<p><a href="http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png"><img alt="Screenshot from 2013-07-30 21:43:22" class="alignnone size-medium wp-image-397" height="168" src="http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png?w=300&amp;h=168" width="300"/></a></p>
<p>There have been a lot of delays in me working on the PR, thanks to my awesome immunity system, after having food poisoning.</p>
<p>I need to really gear-up now, so have planned to update the blog as well as PRs daily. There is a lot which I guess we all would like to see implemented for the Risch Algorithm. I would really like to have a meeting soon with Aaron to discuss if we could please have daily meet-ups.<br/>
PS  : Some Announcements<br/>
PS1 : YES !! i have passed the mid-term evaluation <img alt=":D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/><br/>
PS2 : I am finally 20 !! <img alt=":D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/>  Adios teens !</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/407/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/407/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;blog=36553244&amp;post=407&amp;subd=geekiology&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-09T00:02:16Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>chetnagupta</name>
    </author>
    <source>
      <id>http://geekiology.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://geekiology.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://geekiology.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://geekiology.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://geekiology.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>GSoC 2013 Blog</subtitle>
      <title>Risch Algorithm</title>
      <updated>2014-01-14T17:20:44Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://geekiology.wordpress.com/?p=396</id>
    <link href="http://geekiology.wordpress.com/2013/08/08/week-6-7/" rel="alternate" type="text/html"/>
    <title>Week – 6 &amp; 7</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Week 6, brought me back to my coding arena “YES COLLEGE”. Though it was a messed up week with tons and tons of administration work, course selections, juniors arrival but still I could manage re-going through the Manuel Bronstien to see what the “HELL” has been causing the recursion error in the code. Though the […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;blog=36553244&amp;post=396&amp;subd=geekiology&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Week 6, brought me back to my coding arena “YES COLLEGE”. Though it was a messed up week with tons and tons of administration work, course selections, juniors arrival but still I could manage re-going through the Manuel Bronstien to see what the “HELL” has been causing the recursion error in the code.</p>
<p>Though the code has started picking up the pace, it works for some of the simple cases I have included in my previous post (Week-5) but it ended others in recursion errors. These cases are the ones where I have more than one monomial, here is an example to demonstrate the failure.</p>
<p><a href="http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png"><img alt="Screenshot from 2013-07-30 21:43:22" class="alignnone size-medium wp-image-397" height="168" src="http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png?w=300&amp;h=168" width="300"/></a></p>
<p>There have been a lot of delays in me working on the PR, thanks to my awesome immunity system, after having food poisoning.</p>
<p>I need to really gear-up now, so have planned to update the blog as well as PRs daily. There is a lot which I guess we all would like to see implemented for the Risch Algorithm. I would really like to have a meeting soon with Aaron to discuss if having daily meet-ups would be feasible for him.<br/>
PS  : Some Announcements<br/>
PS1 : YES !! i have passed the mid-term evaluation <img alt=":D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/><br/>
PS2 : I am finally 20 !! <img alt=":D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/>  Adios teens !</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/396/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/396/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;blog=36553244&amp;post=396&amp;subd=geekiology&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-08T23:38:16Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>chetnagupta</name>
    </author>
    <source>
      <id>http://geekiology.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://geekiology.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://geekiology.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://geekiology.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://geekiology.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>GSoC 2013 Blog</subtitle>
      <title>Risch Algorithm</title>
      <updated>2013-08-09T00:00:37Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sophiessympyblog.wordpress.com/?p=246</id>
    <link href="http://sophiessympyblog.wordpress.com/2013/08/04/seventh-week/" rel="alternate" type="text/html"/>
    <title>Seventh week</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I am very happy to report that I passed midterm evaluations! So what happened this week? First, I implemented a (user facing) function to calculate a multivariate GCD of two polynomials over an algebraic field, building on the work of the previous two weeks. I also spent a considerable amount of time hunting bugs, but […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=246&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: justify;">I am very happy to report that I passed midterm evaluations! <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p style="text-align: justify;">So what happened this week? First, I implemented a (user facing) function to calculate a multivariate GCD of two polynomials over an algebraic field, building on the work of the previous two weeks. I also spent a considerable amount of time hunting bugs, but it seems I got everything in working order.</p>
<p style="text-align: justify;">However, I realized that the polynomial ring I had been working with was not the best choice. So I went over the whole code again and rewrote everything to use polynomials in <img alt="\mathbb Z[t_1, \ldots, t_k][x, z]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bt_1%2C+%5Cldots%2C+t_k%5D%5Bx%2C+z%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z[t_1, \ldots, t_k][x, z]"/> instead of <img alt="\mathbb Z[x, t_1, \ldots, t_k, z]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bx%2C+t_1%2C+%5Cldots%2C+t_k%2C+z%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z[x, t_1, \ldots, t_k, z]"/>. This made some parts easier and some parts more difficult, but overall it looks like the more natural choice. The parts that got more difficult now involve rings like <img alt="\mathbb Z(t_k)[t_1, \ldots , t_{k-1}][x, z]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%28t_k%29%5Bt_1%2C+%5Cldots+%2C+t_%7Bk-1%7D%5D%5Bx%2C+z%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z(t_k)[t_1, \ldots , t_{k-1}][x, z]"/>, where I have to distinguish between the cases <img alt="k = 1" class="latex" src="http://s0.wp.com/latex.php?latex=k+%3D+1&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="k = 1"/> and <img alt="k &gt; 1" class="latex" src="http://s0.wp.com/latex.php?latex=k+%3E+1&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="k &gt; 1"/>. Maybe I will find a better solution for that in time.</p>
<p style="text-align: justify;">In the next few days I want to finish this part of my project so I can start with the factorization algorithm, which will be the biggest and final part of my project.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/246/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/246/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=246&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-04T20:59:18Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>katjasophie</name>
    </author>
    <source>
      <id>http://sophiessympyblog.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sophiessympyblog.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sophiessympyblog.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sophiessympyblog.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sophiessympyblog.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>my gsoc 2013 project</subtitle>
      <title>sophie's sympy blog</title>
      <updated>2014-01-14T17:20:51Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-5472769892551526876.post-7293418503164480029</id>
    <link href="http://codesachin.blogspot.com/feeds/7293418503164480029/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=5472769892551526876&amp;postID=7293418503164480029" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/7293418503164480029" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/7293418503164480029" rel="self" type="application/atom+xml"/>
    <link href="http://codesachin.blogspot.com/2013/08/gsoc-midterm-report-week-7.html" rel="alternate" type="text/html"/>
    <title>GSoC Midterm Report (Week 7)</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">Week 7 of GSoC is over, which means I am now in the 'second half' of the coding period. The midterms were conducted by Google from 29th to 2nd, and I am happy to report I passed them :-).<br/><br/><div>As I had predicted in my last blog post, this week wasn't very exciting, atleast as far as the project is concerned. I am now at Goa, and classes have started. However, I did get a few things done - The Dyadic framework is now almost complete, with all the classes functioning as expected (from point of view of dyadic operations). I also added all the special operations like cross, dot, express and time-differentiation. For now, just like last week, they use SymPy Symbols for temporary working.</div><div>Moreover, I finished writing all the tests for my first PR. Gilbert reviewed them, and I made a few changes (mostly API-wise).<br/>I also tested my MovingRefFrame implementation of vector time-derivatives on my hacked mechanics module, and I am happy that it worked fine. Thus, I now have the proof-of-concept for all the work I have done so far.</div><div>I have also submitted a PR to get the logic module docs into the online development documentation, but I am quite sure I am going wrong somewhere. I have pinged Aaron, and I hope it gets solved by the end of this week.</div><div><br/></div><div>To sum up my work till now, this is what I got done-</div><div><br/></div><div>1) <span style="font-family: inherit;"><u>MovingRefFrame</u></span> class - The basic class to represent moving reference frames in 3-D space. Inherits from the CoordSysRect class of the new vector module.</div><div><br/></div><div>2) <u>Particle</u> class - Class to represent particles (mass but no volume) in space. Each particle is associated with a frame of its own, and all it's parameters are calculated wrt it.</div><div><br/></div><div>3) Miscellaneous mechanics functions like the ones to obtain position vector given a time-dependent vector and boundary conditions.</div><div><br/></div><div>4) <u>Dyadic</u> framework - Classes Dyadic, BaseDyadic, DyadicAdd, DyadicMul. All these classes are based on relevant SymPy core classes and build dyadic-based functionality on top of them.</div><div/><div>Currently, I am reading Griffith's book (very helpful suggestion from <a href="https://plus.google.com/109170160946486271280">Aditya</a> - my collegemate) and taking notes for the EM module. Since the development of the new mechanics core is now nearing completion, I can focus time on working on the new addition to sympy.physics.</div><div><br/></div><div>Hence, the coming week will be spent on polishing off the mechanics work, making sure all required parts are in place, maybe helping Prasoon with some functions of vector fields (so that he can concentrate on vector-space integration).<br/>Plus, I have to design the vector-dyadic interfacing. Basically, how dyadics will be instantiated from vector 'outer' functions. Obviously, having a dyadic framework is useless without fitting it to the vector module.<br/>And last but not the least, I plan to code the electrostatic functions for the EM sub-module by this weekend. Hope I succeed.</div><div><br/></div><div>Have a great week :-)</div></div></div>
    </content>
    <updated>2013-08-04T14:54:18Z</updated>
    <published>2013-08-04T14:47:00Z</published>
    <author>
      <name>Sachin Joglekar</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/106302547764750990775</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5472769892551526876</id>
      <author>
        <name>Sachin Joglekar</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://codesachin.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>-Sachin Joglekar-</subtitle>
      <title>Dream. Think. Code.</title>
      <updated>2013-11-30T11:34:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://musingsofafriend.wordpress.com/?p=195</id>
    <link href="http://musingsofafriend.wordpress.com/2013/08/04/gsoc-weeks-6-and-7/" rel="alternate" type="text/html"/>
    <title>GSoC Weeks 6 and 7</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I hadn’t realized that I didn’t write the blog post last week. Sorry! Anyway, let us describe what was done in the last two weeks. Okay, so first, off, I passed the midterm evaluation! I hoped I would, of course, … <a class="more-link" href="http://musingsofafriend.wordpress.com/2013/08/04/gsoc-weeks-6-and-7/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=195&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I hadn’t realized that I didn’t write the blog post last week. Sorry! Anyway, let us describe what was done in the last two weeks.</p>
<p>Okay, so first, off, I passed the midterm evaluation! I hoped I would, of course, but I didn’t know for sure. For the evaluations, I was hoping to get the basic framework of the module to work completely. I was pretty much there but for one particular method – the <em>express</em> method for vectors – wasn’t coming along well; so unwell in fact that I wasn’t even sure what to do at one point.</p>
<p>Taking a few steps back, in week 6, I was primarily testing and fixing things – and hoping that I’ll be ready with the basic framework working and ready to go. But alas, it was in vain. In the meantime, Gilbert made quite a bit of restructuring to the design of the existing code and made a PR against my branch. I didn’t know about this PR for at least 4 days from the time when it was made. Sachin brought it to my attention – just as the week 6 was ending. By now, I had made some commits of my own. Merge conflicts ensued. I reported this to GIlbert, and, he fixed the merge conflicts. But by the time he did that, I had made some more commits! But I hadn’t pushed them so Gilbert didn’t know about that. Anyway, Gilbert said, and I realized, that the longer I tarry in merging, the more difficult it will get. So, I decided to leave the completion of the express method till later and got on with the merge.</p>
<p>Let me describe some of these structural changes. The first this is that we now have a new class, BaseVector, that would represent basis vectors. Just as a reminder, this class was called Vector up until the changes. Now, the Vector class is just a <em>foundation</em> class – all classes representing vectors, namely, BaseVector, Vector and VectMul – inherit from this Vector class. This is a more uniform structure, I think. This also reduced the clutter of the code as well.</p>
<p>Among other changes, we now don’t have <em>exec </em>statements in the initialization of CoordSys classes. Instead, we are now using<em> __setattr__ </em>special function now. This again, helped reduce clutter.</p>
<p>Anyway, by the end of week 6, Stefan had asked me for a date – so that he could test the orientation methods. I was overly optimistic (as he was keen to point out) and assessed the situation to give him working orient methods by the end of Sunday. Right around this time, the new PR by Gilbert came to my attention. It needed merging and I couldn’t get the work done in time. I wrote and email to Stefan, naturally quite abashed, telling him that I couldn’t deliver the code on the previously accepted time. Stefan pointed me to a study in social science – which explored the lack of pessimism in students. It was quite apt, I tell you. Stefan wished, as did I, that I would learn, and I quote, “<em>the art of pessimism”.</em><i><br/>
</i></p>
<p>Later, when I had merged the work of Gilbert in my branch, I decided to get back on track. The first order of business was to fix the orientation methods. Now, orientation methods rely heavily on the <em>express</em> method. So, I decided to write that one off first. I spent a day writing and testing things. I was confident that in a day or two at most, things will be good to go. But it seems that the art of pessimism was yet to be learned. Though this time, the problem was not an overestimation of my own abilities. Rather, it was an oversight that caused further delay. I wasn’t quite considering a certain case of vectors – and that had allowed me to cut a few corners. When that particular case finally dawned on me, well, I was quite angry with myself, to say the least. This particular case meant that I’d have to write a more general approach to a couple of methods – among them were <em>separate, dot, expres.</em> Now, this meant quite some work. I fixed the separate method first – but I’m not at all sure what the fixed method will achieve – or that whether it will achieve anything. The new case seems to have made this method redundant. But we shall see. The next in line was the <em>express</em> method – which is the foundation of a very large part of the code. Now, I was at a loss on how to implement this method the most general way – thanks to the new case that I talked about earlier. I had one idea that I had from doing a computer graphics course – but, I wasn’t quite sure about its feasibility. So, I ran for the hills <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  I asked a question stating my problems on the ML and got a reply by Sachin. Apparently, there’s an easier method. Gilbert made some further comments and finally, I had a solution – I hope it will work. I am currently coding it away though not wothout some difficulty (read academics).<span style="text-decoration: underline;"><br/>
</span></p>
<p>Sheeh! That was a long post. I hope to have covered all the major work done in the past two weeks. Hope to have a working implementation ready in a few days. Note that I haven’t said when – I seem to be learning <em>“the art of pessimism”.</em></p>
<p> <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/195/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/195/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=195&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-04T14:42:07Z</updated>
    <category term="Programming"/>
    <category term="Python"/>
    <category term="SymPy"/>
    <author>
      <name>musingsofafriend</name>
    </author>
    <source>
      <id>http://musingsofafriend.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://musingsofafriend.wordpress.com/tag/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://musingsofafriend.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://musingsofafriend.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://musingsofafriend.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>The greatest WordPress.com site in all the land!</subtitle>
      <title>musings of a friend - Prasoon Shukla » SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://manojbits.wordpress.com/?p=697</id>
    <link href="http://manojbits.wordpress.com/2013/08/04/gsoc-mid-term-report/" rel="alternate" type="text/html"/>
    <title>GSoC – Mid term report</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi,  I passed the midterm evaluations of GSoC, this is what I have accomplished till now. 1] Built the basic infrastructure of the pde module, and added hints that could solve general Partial Differential Equations with constant coefficients 2] Added a function, infinitesimals , that would try to find out the required infinitesimals of any […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=697&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,  I passed the midterm evaluations of GSoC, this is what I have accomplished till now.</p>
<p>1] Built the basic infrastructure of the pde module, and added hints that could solve general Partial Differential Equations with constant coefficients</p>
<p>2] Added a function, infinitesimals , that would try to find out the required infinitesimals of any given first order ODE. The following heuristics have been implemented.</p>
<p>a] abaco1_simple (Assumes one of the infinitesimals to be zero, and the other to be a function to x or y)<br/>
b] abaco1_product (Assumes one of the infinitesimals to be zero, and the other to be a product of a function of x and y)<br/>
c] abaco2_similar (Assumes both infintesimals to be a function of x or y)<br/>
d] abaco2_unique_unknown (This is when, one infinitesimals is a function of x and the other to be a function of y)<br/>
e] abaco2_unique_general (This is a more general case of the above mentioned hint)<br/>
f] linear (Infinitesimals are of the form <img alt="ax + by + c" class="latex" src="http://s0.wp.com/latex.php?latex=ax+%2B+by+%2B+c&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="ax + by + c"/><br/>
g] bivariate (Infinitesimals are bivariate, more general form of the above mnetioned hint)<br/>
h] function_sum (When the infinitesimals are the sum of two functions)<br/>
i] chi (Finds a polynomial <img alt="\chi" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cchi&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\chi"/> , which helps in calculating the infinitesimals directly)</p>
<p>3] Added a function<strong> checkinfsol </strong>, which helps in checking if the infinitesimals are the actual solutions to the PDE.</p>
<p>As far as this week went, I couldn’t do much but I managed to add a hint which helps in solving Linear PDE’s with variable coefficients. The general form of such a PDE is</p>
<p><img alt="a(x, y)\frac{\partial u}{\partial x} + b(x, y)\frac{\partial u}{\partial y} + c(x, y)u(x, y) = d(x, y)" class="latex" src="http://s0.wp.com/latex.php?latex=a%28x%2C+y%29%5Cfrac%7B%5Cpartial+u%7D%7B%5Cpartial+x%7D+%2B+b%28x%2C+y%29%5Cfrac%7B%5Cpartial+u%7D%7B%5Cpartial+y%7D+%2B+c%28x%2C+y%29u%28x%2C+y%29+%3D+d%28x%2C+y%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="a(x, y)\frac{\partial u}{\partial x} + b(x, y)\frac{\partial u}{\partial y} + c(x, y)u(x, y) = d(x, y)"/> , where <img alt="a(x, y), b(x, y), c(x, y)" class="latex" src="http://s0.wp.com/latex.php?latex=a%28x%2C+y%29%2C+b%28x%2C+y%29%2C+c%28x%2C+y%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="a(x, y), b(x, y), c(x, y)"/> and <img alt="d(x, y)" class="latex" src="http://s0.wp.com/latex.php?latex=d%28x%2C+y%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="d(x, y)"/> are arbitrary functions in x and y.  This can be done using the method of characteristics. However a simpler way, according to a paper that I skimmed through is, to convert the PDE into an ODE of one variable. The change of coordinates is <img alt="\xi" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cxi&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\xi"/> is the constant in the solution of the differential equation <img alt="\frac{dy}{dx} = \frac{b}{a}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+%5Cfrac%7Bb%7D%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\frac{dy}{dx} = \frac{b}{a}"/> and <img alt="\eta = x" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ceta+%3D+x&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\eta = x"/> (I don’t know why surely though) is selected such that the Jacobian doesn’t become zero. This is the Pull request, <a href="https://github.com/sympy/sympy/pull/2346" rel="nofollow">https://github.com/sympy/sympy/pull/2346</a></p>
<p>TODO’s for this week</p>
<p>1. Get the heuristics PR merged.<br/>
2. Try integrating the PDE hint with the ODE hint, (I can foresee a few problems here)</p>
<p>I guess that’s it. Cheers to a new life.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/697/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/697/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=697&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-04T07:51:25Z</updated>
    <category term="SymPy"/>
    <category term="differential"/>
    <category term="gsoc"/>
    <category term="gsoc2013"/>
    <category term="heuristics"/>
    <category term="lie-group ode"/>
    <category term="ode"/>
    <category term="pde"/>
    <category term="python"/>
    <category term="sympy"/>
    <author>
      <name>Manoj Kumar</name>
    </author>
    <source>
      <id>http://manojbits.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://manojbits.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://manojbits.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://manojbits.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://manojbits.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>From a learner's perspective</subtitle>
      <title>Perspective » SymPy</title>
      <updated>2014-01-14T17:20:46Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6568744196982634289.post-2033603696449441388</id>
    <link href="http://ondrejcertik.blogspot.com/feeds/2033603696449441388/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=6568744196982634289&amp;postID=2033603696449441388" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/2033603696449441388" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/2033603696449441388" rel="self" type="application/atom+xml"/>
    <link href="http://ondrejcertik.blogspot.com/2013/08/how-to-support-both-python-2-and-3.html" rel="alternate" type="text/html"/>
    <title>How to support both Python 2 and 3</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I'll start with the conclusion: making backwards incompatible version of a language is a terrible idea, and it was bad a mistake. This mistake was somewhat corrected over the years by eventually adding features to both Python 2.7 and 3.3 that actually allow to run a single code base on both Python versions --- which, as I show below, was discouraged by both Guido and the official Python documents (though the latest <a href="http://docs.python.org/dev/howto/pyporting.html">docs</a> mention it)... Nevertheless, a single code base fixes pretty much all the problems and it actually is fun to use Python again. The rest of this post explains my conclusion in great detail. My hope is that it will be useful to  other Python projects to provide tips and examples how to support both Python 2 and 3, as well as to future language designers to keep languages backwards compatible.</p> <p>When Python 3.x got released, it was pretty much a new language, backwards incompatible with Python 2.x, as it was not possible to run the same source code in both versions. I was extremely unhappy about this situation, because I simply didn't have time to port all my Python code to a new language.</p> <p>I read the <a href="http://www.python.org/dev/peps/pep-3000/#compatibility-and-transition">official documentation</a> about how the transition should be done, quoting:</p> <blockquote>  <p>You should have excellent unit tests with close to full coverage.</p>     <ol>  <li>Port your project to Python 2.6.</li>  <li>Turn on the Py3k warnings mode.</li>  <li>Test and edit until no warnings remain.</li>  <li>Use the 2to3 tool to convert this source code to 3.0 syntax. Do not manually edit the output!</li>  <li>Test the converted source code under 3.0.</li>  <li>If problems are found, make corrections to the 2.6 version of the source code and go back to step 3.</li>  <li>When it's time to release, release separate 2.6 and 3.0 tarballs (or whatever archive form you use for releases).</li>  </ol></blockquote> <p>I've also read Guido's blog <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=208549">post</a>, which repeats the above list and adds an encouraging comment:</p> <blockquote>  <p>Python 3.0 will break backwards compatibility. Totally. We're not even aiming for a specific common subset.</p></blockquote> <p>In other words, one has to maintain a Python 2.x code base, then run <code>2to3</code> tool to get it converted. If you want to develop using Python 3.x, you can't, because all code must be developed using 2.x. As to the actual porting, Guido says in the above post:</p> <blockquote>  <p>If the conversion tool and the forward compatibility features in Python 2.6 work out as expected, steps (2) through (6) should not take much more effort than the typical transition from Python 2.x to 2.(x+1).</p></blockquote> <p>So sometime in 2010 or 2011 I started porting <a href="http://sympy.org">SymPy</a>, which is now a pretty large code base (<code>sloccount</code> says over 230,000 lines of code, and in January 2010 it said almost 170,000 lines). I remember spending a few full days on it, and I just gave up, because it wasn't just changing a few things, but pretty fundamental things inside the code base, and one cannot just do it half-way, one has to get all the way through and then polish it up. We ended up using one full Google Summer of Code project for it, you can read the <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Vladimir-Peric%3A-Porting-to-Python-3">final report</a>. I should mention that we use metaclasses and other things, that make such porting harder. Conclusion: this was definitely not "the typical transition from Python 2.x to 2.(x+1)".</p> <p>Ok, after months of hard work by a lot of people, we finally have a Python 2.x code base that can be translated using the <code>2to3</code> tool and it works and tests pass in Python 3.x.</p> <p>The next problem is that Python 3.x is pretty much like a ghetto -- you can use it as a user, but you can't develop in it. The <code>2to3</code> translation takes over 5 minutes on my laptop, so any interactivity is gone. It is true that the tool can cache results, so the next pass is somewhat faster, but in practice this still turns out to be much much worse than any compilation of C or Fortran programs (done for example with <code>cmake</code>), both in terms of time and in terms of robustness. And I am not even talking about pip <a href="https://github.com/pypa/pip/issues/701">issues</a> or setup.py <a href="https://github.com/sympy/sympy/pull/2262">issues</a> regarding calling <code>2to3</code>. What a big mess... Programming should be fun, but this is not fun.</p> <p>I'll be honest, this situation killed a lot of my enthusiasm for Python as a platform. I learned modern Fortran in the meantime and with admiration I noticed that it still compiles old F77 programs without modification and I even managed to compile a 40 year old pre-F77 code with just minimal modifications (I had to port the code to F77). Yet modern Fortran is pretty much a completely different language, with all the fancy features that one would want. Together with my colleagues I created a <a href="http://fortran90.org">fortran90.org</a> website, where you can compare Python/NumPy side by side with modern Fortran, it's pretty much 1:1 translation and a similar syntax (for numerical code), except that you need to add types of course. Yet Fortran is fully backwards compatible. What a pleasure to work with!</p> <p>Fast forward to last week. A heroic effort by <a href="https://github.com/flacjacket">Sean Vig</a> who ported SymPy to single code base (<a href="https://github.com/sympy/sympy/pull/2318">#2318</a>) was merged. Earlier this year similar pull requests by other people have converted NumPy (<a href="https://github.com/numpy/numpy/pull/3178">#3178</a>, <a href="https://github.com/numpy/numpy/pull/3191">#3191</a>, <a href="https://github.com/numpy/numpy/pull/3201">#3201</a>, <a href="https://github.com/numpy/numpy/pull/3202">#3202</a>, <a href="https://github.com/numpy/numpy/pull/3203">#3203</a>, <a href="https://github.com/numpy/numpy/pull/3205">#3205</a>, <a href="https://github.com/numpy/numpy/pull/3208">#3208</a>, <a href="https://github.com/numpy/numpy/pull/3216">#3216</a>, <a href="https://github.com/numpy/numpy/pull/3223">#3223</a>, <a href="https://github.com/numpy/numpy/pull/3226">#3226</a>, <a href="https://github.com/numpy/numpy/pull/3227">#3227</a>, <a href="https://github.com/numpy/numpy/pull/3231">#3231</a>, <a href="https://github.com/numpy/numpy/pull/3232">#3232</a>, <a href="https://github.com/numpy/numpy/pull/3235">#3235</a>, <a href="https://github.com/numpy/numpy/pull/3236">#3236</a>, <a href="https://github.com/numpy/numpy/pull/3237">#3237</a>, <a href="https://github.com/numpy/numpy/pull/3238">#3238</a>, <a href="https://github.com/numpy/numpy/pull/3241">#3241</a>, <a href="https://github.com/numpy/numpy/pull/3242">#3242</a>, <a href="https://github.com/numpy/numpy/pull/3244">#3244</a>, <a href="https://github.com/numpy/numpy/pull/3245">#3245</a>, <a href="https://github.com/numpy/numpy/pull/3248">#3248</a>, <a href="https://github.com/numpy/numpy/pull/3249">#3249</a>, <a href="https://github.com/numpy/numpy/pull/3257">#3257</a>, <a href="https://github.com/numpy/numpy/pull/3266">#3266</a>, <a href="https://github.com/numpy/numpy/pull/3281">#3281</a>, <a href="https://github.com/numpy/numpy/pull/3191">#3191</a>, ...) and SciPy (<a href="https://github.com/scipy/scipy/pull/397">#397</a>) codes as well. Now all these projects have just one code base and it works in all Python versions (2.x and 3.x) without the need to call the <code>2to3</code> tool.</p> <p>Having a single code base, programming in Python is fun again. You can choose any Python version, be it 2.x or 3.x, and simply submit a patch. The patch is then tested using <a href="https://travis-ci.org/">Travis-CI</a>, so that it works in all Python versions. Installation has been simplified (no need to call any <code>2to3</code> tools and no more hacks to get <code>setup.py</code> working).</p> <p>In other words, this is how it should be, that you write your code once, and you can use any supported language version to run it/compile it, or develop in. But for some reason, this obvious solution has been discouraged by Guido and other Python documents, as seen above. I just looked up the latest official Python <a href="http://docs.python.org/dev/howto/pyporting.html">docs</a>, and that one is not upfront negative about a single code base. But it still does not recommend this approach as <em>the</em> one. So let me fix that: I do recommend a single code base as <em>the</em> solution.</p> <p>The newest Python documentation from the last paragraph also mentions</p> <blockquote>  <p>Regardless of which approach you choose, porting is not as hard or time-consuming as you might initially think.</p></blockquote> <p>Well, I encourage you to browse through the pull requests that I linked to above for SymPy, NumPy or SciPy. I think it is very time consuming, and that's just converting from <code>2to3</code> to single code base, which is the easy part. The hard part was to actually get SymPy to work with Python 3 (as I discussed above, that took couple months of hard work), and I am pretty sure it was pretty hard to port NumPy and SciPy as well.</p> <p>The docs also says:</p> <blockquote>  <p>It /single code base/ does lead to code that is not entirely idiomatic Python</p></blockquote> <p>That is true, but our experience has been, that with every Python version that we drop, we also delete lots of ugly hacks from our code base. This has been true for dropping support for 2.3, 2.4 and 2.5, and I expect it will also be true for dropping 2.6 and especially 2.7, when we can simply use the Python 3.x syntax. So not a big deal overall.</p> <p>To sum this blog post up, as far as I am concerned, pretty much all the problems with supporting Python 2.x and 3.x are fixed by having a single code base. You can read the pull requests above to see how to implemented things (like metaclasses, and other fancy stuff...). Python is still quite the same language, you write your code, you use a Python version of your choice and things will just work. Not a big deal overall. The official documentation should be fixed to recommend this approach, and deprecate the other approaches.</p> <p>I think that Python is great and I hope it will be used more in the future.</p> <blockquote>  <p>Written with <a href="http://benweet.github.io/stackedit/">StackEdit</a>.</p></blockquote></div>
    </content>
    <updated>2013-08-04T07:48:05Z</updated>
    <published>2013-08-04T07:40:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="debian"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="python"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="scipy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Ondřej Čertík</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/104039945248245758823</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6568744196982634289</id>
      <category term="sympy"/>
      <category term="debian"/>
      <category term="sage"/>
      <category term="scipy"/>
      <category term="python"/>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>https://plus.google.com/104039945248245758823</uri>
      </author>
      <link href="http://ondrejcertik.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://ondrejcertik.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Ondřej Čertík</title>
      <updated>2013-08-04T07:48:05Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://thilinaatsympy.wordpress.com/?p=169</id>
    <link href="http://thilinaatsympy.wordpress.com/2013/08/04/169/" rel="alternate" type="text/html"/>
    <title>Holzer reduction and some modifications</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi All, This week I managed to implement Holzer’s reduction and change the behaviour of DE module a little bit.  First let’s take a look at Holzer’s reduction. Holzer Reduction Holzer reduction is concerned with reducing solutions of the quadratic ternary nonrmal equation . The Holzer’s theorem says that if the above equation is solvable …<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=169&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi All, This week I managed to implement Holzer’s reduction and change the behaviour of DE module a little bit.  First let’s take a look at Holzer’s reduction.</p>
<h5>Holzer Reduction</h5>
<p>Holzer reduction is concerned with reducing solutions of the quadratic ternary nonrmal equation <img alt="ax^2 + by^2 +cz^2 = 0" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%2Bcz%5E2+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + by^2 +cz^2 = 0"/>. The Holzer’s theorem says that if the above equation is solvable there is always a solution <img alt="(x, y, z)" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x, y, z)"/> such that <img alt="x \leq \sqrt{|bc|}, y \leq \sqrt{|ac|}, z \leq \sqrt{|ab|}" class="latex" src="http://s0.wp.com/latex.php?latex=x+%5Cleq+%5Csqrt%7B%7Cbc%7C%7D%2C+y+%5Cleq+%5Csqrt%7B%7Cac%7C%7D%2C+z+%5Cleq+%5Csqrt%7B%7Cab%7C%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x \leq \sqrt{|bc|}, y \leq \sqrt{|ac|}, z \leq \sqrt{|ab|}"/>. The algorithm for this is explained in [1]. Below is a rough sketch. Before applying the algorithm we have to make <img alt="abc" class="latex" src="http://s0.wp.com/latex.php?latex=abc&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="abc"/> square free and we assume that <img alt="a, b" class="latex" src="http://s0.wp.com/latex.php?latex=a%2C+b&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a, b"/> positive and <img alt="c" class="latex" src="http://s0.wp.com/latex.php?latex=c&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="c"/> is negative(We can always select <img alt="a, b, c" class="latex" src="http://s0.wp.com/latex.php?latex=a%2C+b%2C+c&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a, b, c"/> in such a way that this is the case). Suppose there is a solution <img alt="(x_{0}, y_{0}, z_{0})" class="latex" src="http://s0.wp.com/latex.php?latex=%28x_%7B0%7D%2C+y_%7B0%7D%2C+z_%7B0%7D%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x_{0}, y_{0}, z_{0})"/> that is not Holzer reduced.</p>
<ul>
<li>If <img alt="c" class="latex" src="http://s0.wp.com/latex.php?latex=c&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="c"/> is even set <img alt="k = c /2" class="latex" src="http://s0.wp.com/latex.php?latex=k+%3D+c+%2F2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k = c /2"/> and let <img alt="u_{0}, v_{0}" class="latex" src="http://s0.wp.com/latex.php?latex=u_%7B0%7D%2C+v_%7B0%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="u_{0}, v_{0}"/> be any solution to the equation <img alt="k = uy_{0} - vx_{0}" class="latex" src="http://s0.wp.com/latex.php?latex=k+%3D+uy_%7B0%7D+-+vx_%7B0%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k = uy_{0} - vx_{0}"/>.</li>
<li>If <img alt="c" class="latex" src="http://s0.wp.com/latex.php?latex=c&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="c"/> is odd, c is odd let <img alt="k = 2c" class="latex" src="http://s0.wp.com/latex.php?latex=k+%3D+2c&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="k = 2c"/> and  let <img alt="u_{0}, v_{0}" class="latex" src="http://s0.wp.com/latex.php?latex=u_%7B0%7D%2C+v_%7B0%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="u_{0}, v_{0}"/> be any solution to the equation <img alt="c = uy_{0} - vx_{0}" class="latex" src="http://s0.wp.com/latex.php?latex=c+%3D+uy_%7B0%7D+-+vx_%7B0%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="c = uy_{0} - vx_{0}"/>.</li>
<li>Let <img alt="w" class="latex" src="http://s0.wp.com/latex.php?latex=w&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="w"/> be the nearest integer to <img alt="-(aux_{0} + bvy_{0})/(cz_{0})" class="latex" src="http://s0.wp.com/latex.php?latex=-%28aux_%7B0%7D+%2B+bvy_%7B0%7D%29%2F%28cz_%7B0%7D%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="-(aux_{0} + bvy_{0})/(cz_{0})"/>.</li>
<li>Then the following expressions for <img alt="x, y, z" class="latex" src="http://s0.wp.com/latex.php?latex=x%2C+y%2C+z&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x, y, z"/> gives a solution such that <img alt="z &lt; z_{0}" class="latex" src="http://s0.wp.com/latex.php?latex=z+%3C+z_%7B0%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="z &lt; z_{0}"/>.<br/>
<img alt="x = (x_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2u_{0}(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0})) / k" class="latex" src="http://s0.wp.com/latex.php?latex=x+%3D+%28x_%7B0%7D%28au_%7B0%7D%5E2+%2B+bv_%7B0%7D%5E2+%2B+cw%5E2%29+-+2u_%7B0%7D%28au_%7B0%7Dx_%7B0%7D+%2B+bv_%7B0%7Dy_%7B0%7D+%2B+cwz_%7B0%7D%29%29+%2F+k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x = (x_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2u_{0}(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0})) / k"/><br/>
<img alt="y = (y_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2v_{0}(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0})) / k" class="latex" src="http://s0.wp.com/latex.php?latex=y+%3D+%28y_%7B0%7D%28au_%7B0%7D%5E2+%2B+bv_%7B0%7D%5E2+%2B+cw%5E2%29+-+2v_%7B0%7D%28au_%7B0%7Dx_%7B0%7D+%2B+bv_%7B0%7Dy_%7B0%7D+%2B+cwz_%7B0%7D%29%29+%2F+k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="y = (y_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2v_{0}(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0})) / k"/><br/>
<img alt="z = (z_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2w(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0}))) / k" class="latex" src="http://s0.wp.com/latex.php?latex=z+%3D+%28z_%7B0%7D%28au_%7B0%7D%5E2+%2B+bv_%7B0%7D%5E2+%2B+cw%5E2%29+-+2w%28au_%7B0%7Dx_%7B0%7D+%2B+bv_%7B0%7Dy_%7B0%7D+%2B+cwz_%7B0%7D%29%29%29+%2F+k&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="z = (z_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2w(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0}))) / k"/></li>
</ul>
<p>Continuing this manner one would find a solution such that <img alt="z_{0} \leq \sqrt{|ab|}" class="latex" src="http://s0.wp.com/latex.php?latex=z_%7B0%7D+%5Cleq+%5Csqrt%7B%7Cab%7C%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="z_{0} \leq \sqrt{|ab|}"/>.</p>
<h5>Some changes to DE module</h5>
<p>I made some changes to the structure of DE module too. Now every type of equation returns a tuple ordered according to the sorted order of variable names used in the equation. Quadratic ternary forms and linear equations returns only one tuple, the parametric solution,  and quadratic binary equation returns a set of tuples. This format may be changed in future. The most important change I did to the DE module is that, now before solving any given equation, DE module checks whether that can be factored and If so, solves those factors separately. For example, given the equation <img alt="y^2 - 7xy + 4yz = 0" class="latex" src="http://s0.wp.com/latex.php?latex=y%5E2+-+7xy+%2B+4yz+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="y^2 - 7xy + 4yz = 0"/>, it will solve <img alt="y = 0" class="latex" src="http://s0.wp.com/latex.php?latex=y+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="y = 0"/> and <img alt="y-7x+4z = 0" class="latex" src="http://s0.wp.com/latex.php?latex=y-7x%2B4z+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="y-7x+4z = 0"/> separately and combine those results. Also I managed to implement a general method for testing that would check whether the solutions returned by various methods satisfy the original equation. So I hope to get rid of the other redundant methods like check_ternary_quadratic(), solution_ok_quadratic() in the test file. A thank should go to Aaron for proposing such a methodology.</p>
<h5>Future work</h5>
<p>Pernici has pointed out that some of the solution methodologies in quadratic binary form can be improved so that they take less time. He also has done a great job in implementing the solutions for quadratic congruence <img alt="x^2 \equiv a (mod \ b)" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+%5Cequiv+a+%28mod+%5C+b%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 \equiv a (mod \ b)"/>. I hope to use those results when his PR gets merged into master. He proposed a method due to cornacchia to improve the speed of the solutions but after a little surveying, I found that implementing solutions for <img alt="ax^2 + bxy + cy^2 = N" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%3D+N&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + bxy + cy^2 = N"/> can be used to improve the speed. Current algorithms for solving binary quadratic equation <img alt="ax^2 + bxy + cy^2 + dx + ey + f = 0" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%2B+dx+%2B+ey+%2B+f+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + bxy + cy^2 + dx + ey + f = 0"/> employs a general solving method so it miss out some speed enhancements for the special case <img alt="ax^2 + bxy + cy^2 = N" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%3D+N&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + bxy + cy^2 = N"/> . My plan is if <img alt="ax^2 + bxy + cy^2 + dx + ey + f = 0" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%2B+dx+%2B+ey+%2B+f+%3D+0&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + bxy + cy^2 + dx + ey + f = 0"/> can be converted to the form <img alt="ax^2 + bxy + cy^2 = N" class="latex" src="http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%3D+N&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="ax^2 + bxy + cy^2 = N"/>, then solve it using methods for that, otherwise apply the general method. I found a good reference [2] for this. A huge thank should go to Pernici for pointing out the improvements.</p>
<h5>References</h5>
<p>[1] Efficient Solution of Rational Conices, J. E. Cremona and D. Rusin, Mathematics of Computation, Volume 00, Number 0.<br/>
[2] Binary Quadratic Forms: An Algorithmic Approach, J. Buchmann and U. Vollmer, Springer-Verlag, Berlin, Heidelberg, 2007.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/169/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/169/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=169&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-04T04:49:10Z</updated>
    <category term="GSoC-2013-SymPy"/>
    <category term="Binary quadratic forms"/>
    <category term="Diophantine Equations"/>
    <category term="Holzer reduction"/>
    <category term="SymPy"/>
    <author>
      <name>Thilina Rathnayake</name>
    </author>
    <source>
      <id>http://thilinaatsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://thilinaatsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://thilinaatsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://thilinaatsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://thilinaatsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My Work related to sympy</subtitle>
      <title>Thilina's SymPy Blog</title>
      <updated>2014-01-14T17:20:47Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://meclark256.wordpress.com/?p=77</id>
    <link href="http://meclark256.wordpress.com/2013/08/01/week-7/" rel="alternate" type="text/html"/>
    <title>Week 7</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">(Or maybe week 6. See last week’s post). This week, I’ve started one new PR (https://github.com/sympy/sympy/pull/2344) which includes the Dynkin diagram functionality for all classes. I had PR 2297 merged, and I’m pretty sure I’ve fixed the merge conflicts for PR 2337 (which is the Cartan matrix stuff). Talking with David this week, he suggested […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=77&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>(Or maybe week 6.  See last week’s post).</p>
<p>This week, I’ve started one new PR (<a href="https://github.com/sympy/sympy/pull/2344" rel="nofollow">https://github.com/sympy/sympy/pull/2344</a>) which includes the Dynkin diagram functionality for all classes.  I had PR 2297 merged, and I’m pretty sure I’ve fixed the merge conflicts for PR 2337 (which is the Cartan matrix stuff).</p>
<p>Talking with David this week, he suggested that I include more technical information and sources in my code, to help explain some of the concepts in Lie algebras.  I thought this was a very good idea, and so I’ve started writing some more detailed docstrings, including sources.  </p>
<p>Additionally, I changed some of the classes in my code so that instead of using __init__ they use __new__ instead, as is the norm in the sympy code base.  </p>
<p>Currently, I am contemplating the root system class I want to write, and what it should contain/accomplish.   First off, it will need to generate all the simple roots for a given Lie algebra.  This is easy enough to accomplish, using functions from the individual classes, though I need to figure out how exactly I want to go about importing data from things type type_a.py, type_b.py, etc.  I think that it would be best to store these simple roots in a dictionary, with the keys being like, alpha1, alpha2, etc and then the values being vector representations of the roots.</p>
<p>I’d also like to have an addition method for adding simple roots together, and as David suggests, a method which would only add roots if the sum was a root.   </p>
<p>I’m still internally debating if I want to have the RootSystem class hold all the roots (well, hold all the positive roots, as a reflection would then generate the negative roots) or not.  I think it may make some of the above methods simpler, but then it might also just be overkill.  </p>
<p>I’ll also have a method returns the root space of a given root system, which is just the span of all the simple roots.  </p>
<p>So, yeah, that’s what I’m thinking and planning at the moment.  Hopefully I’ll be starting this stuff this weekend.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/77/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/77/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=77&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-08-01T21:16:28Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>meclark256</name>
    </author>
    <source>
      <id>http://meclark256.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://meclark256.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://meclark256.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://meclark256.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://meclark256.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Smile! You’re at the best WordPress.com site ever</subtitle>
      <title>My GSOC Adventure with SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-7526836182390500993.post-4220162376949001608</id>
    <link href="http://tarun-gaba.blogspot.com/feeds/4220162376949001608/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/07/gsoc-report-week-5-6.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/4220162376949001608" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default/4220162376949001608" rel="self" type="application/atom+xml"/>
    <link href="http://tarun-gaba.blogspot.com/2013/07/gsoc-report-week-5-6.html" rel="alternate" type="text/html"/>
    <title>GSoC Report : Week 5, 6</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">The last two weeks have been a little too hectic. I have been working on writing the source code for classes from Python side, and they are nearing the completion.<br/><br/>This is the week for midterm evaluations, and as per the timeline, I was supposed to completely finish the python part by now. Although most of the stuff is complete, I have one or two days work to be left to be done.<br/>I have finished with Shape, and VisualizationFrame classes. Also yesterday I just finished writing complete code for Camera classes.<br/>There were two instances for Camera, one is PerspectiveCamera, and other is Orthographic Camera.<br/><br/>The Camera class is inherited from VisualizationFrame class, which would make it inherit the generation of simulation data. This has very much utility for the fact that we can attach a camera to any moving object in our system, and hence we have  moving cameras, which is an aide for the effective visualizations.<br/><br/>Another approach we have been thinking upon is the possibility of applying multiple cameras to a system, which can effectively be tied upon different moving objects. and they can be switched by a keystroke in the browser.<br/>It would be kinda cool to see an animation from one camera, and then we can switch it to a different camera, in between the animation, without any extra pain, with a keystroke.<br/><br/>Anyways the priority is to get the basic functionality up, and then we can add these and many other features, as time permits.<br/><br/>Another concept which requires a little brainstorming is the Lighting. I am thinking of letting user choose where and what type of lights they want in their system.<br/><br/>These lights can be added in Scene class. and most probably they can also be inherited from VisualizationFrame class, giving them also the capability of motion, rather than static lights.<br/><br/></div></div>
    </content>
    <updated>2013-07-31T14:44:03Z</updated>
    <published>2013-07-31T14:44:00Z</published>
    <author>
      <name>TARUN GABA</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/100217361579446727229</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-7526836182390500993</id>
      <author>
        <name>TARUN GABA</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://tarun-gaba.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/7526836182390500993/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://tarun-gaba.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Tarun Gaba</title>
      <updated>2013-09-26T18:13:16Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://thilinaatsympy.wordpress.com/?p=154</id>
    <link href="http://thilinaatsympy.wordpress.com/2013/07/29/descent-method-with-gaussian-reduction/" rel="alternate" type="text/html"/>
    <title>Descent method with gaussian reduction.</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Sorry for a very late blog post, I had a really busy week and finally I managed to find sometime to write about the progress I made in the last week. I implemented an improved version of the descent method which uses gaussian reduction. I found this algorithm in [1]. Here is a sketch of …<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=154&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Sorry for a very late blog post, I had a really busy week and finally I managed to find sometime to write about the progress I made in the last week. I implemented an improved version of the descent method which uses gaussian reduction. I found this algorithm in [1]. Here is a sketch of the algorithm.</p>
<h4>descent(a, b)</h4>
<p>1. If <img alt="|a| &gt; |b|" class="latex" src="http://s0.wp.com/latex.php?latex=%7Ca%7C+%3E+%7Cb%7C&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="|a| &gt; |b|"/> then swap <img alt="a" class="latex" src="http://s0.wp.com/latex.php?latex=a&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a"/> and <img alt="b" class="latex" src="http://s0.wp.com/latex.php?latex=b&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="b"/>, solve the resulting equation, then swap <img alt="y" class="latex" src="http://s0.wp.com/latex.php?latex=y&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="y"/> and <img alt="z" class="latex" src="http://s0.wp.com/latex.php?latex=z&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="z"/> in the solution obtained.<br/>
2. If <img alt="b = 1" class="latex" src="http://s0.wp.com/latex.php?latex=b+%3D+1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="b = 1"/> then set <img alt="(x, y, z) = (1, 1, 0)" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%281%2C+1%2C+0%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x, y, z) = (1, 1, 0)"/> and stop.<br/>
3. If <img alt="a = 1" class="latex" src="http://s0.wp.com/latex.php?latex=a+%3D+1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a = 1"/>  then set <img alt="(x, y, z) = (1, 0, 1)" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%281%2C+0%2C+1%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x, y, z) = (1, 0, 1)"/> and stop.<br/>
4. If <img alt="b = -1" class="latex" src="http://s0.wp.com/latex.php?latex=b+%3D+-1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="b = -1"/> there is no solution (since <img alt="a" class="latex" src="http://s0.wp.com/latex.php?latex=a&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="a"/> must be <img alt="-1" class="latex" src="http://s0.wp.com/latex.php?latex=-1&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="-1"/>).<br/>
5. If <img alt="b = -a" class="latex" src="http://s0.wp.com/latex.php?latex=b+%3D+-a&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="b = -a"/> then set <img alt="(x, y, z) = (0, 1, 1)" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%280%2C+1%2C+1%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x, y, z) = (0, 1, 1)"/> and stop.<br/>
6. If <img alt="b = a" class="latex" src="http://s0.wp.com/latex.php?latex=b+%3D+a&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="b = a"/> then let <img alt="(x_{1}, y_{1}, z_{1})" class="latex" src="http://s0.wp.com/latex.php?latex=%28x_%7B1%7D%2C+y_%7B1%7D%2C+z_%7B1%7D%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x_{1}, y_{1}, z_{1})"/> be a solution of <img alt="X_{1}^2 + Z_{1}^2 = aY_{1}^2 " class="latex" src="http://s0.wp.com/latex.php?latex=X_%7B1%7D%5E2+%2B+Z_%7B1%7D%5E2+%3D+aY_%7B1%7D%5E2+&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="X_{1}^2 + Z_{1}^2 = aY_{1}^2 "/>, set <img alt="(x, y, z) = (ay_{1}, x_{1}, z_{1})" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%28ay_%7B1%7D%2C+x_%7B1%7D%2C+z_%7B1%7D%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x, y, z) = (ay_{1}, x_{1}, z_{1})"/> and stop.<br/>
7. Let <img alt="w" class="latex" src="http://s0.wp.com/latex.php?latex=w&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="w"/> be a solution to <img alt="x^2 \equiv a (mod \ b)" class="latex" src="http://s0.wp.com/latex.php?latex=x%5E2+%5Cequiv+a+%28mod+%5C+b%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x^2 \equiv a (mod \ b)"/>. with <img alt="w \leq |b|/2" class="latex" src="http://s0.wp.com/latex.php?latex=w+%5Cleq+%7Cb%7C%2F2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="w \leq |b|/2"/>, and set <img alt="(x_{0}, z_{0}) = (w, 1)" class="latex" src="http://s0.wp.com/latex.php?latex=%28x_%7B0%7D%2C+z_%7B0%7D%29+%3D+%28w%2C+1%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x_{0}, z_{0}) = (w, 1)"/>, so that <img alt="x_{0}^2 - az_{0}^2 \equiv 0 (mod \ b)" class="latex" src="http://s0.wp.com/latex.php?latex=x_%7B0%7D%5E2+-+az_%7B0%7D%5E2+%5Cequiv+0+%28mod+%5C+b%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_{0}^2 - az_{0}^2 \equiv 0 (mod \ b)"/>.<br/>
8. Use<strong><em> lattice reduction</em></strong> to find a new nontrivial solution <img alt="(x_{0}, z_{0})" class="latex" src="http://s0.wp.com/latex.php?latex=%28x_%7B0%7D%2C+z_%7B0%7D%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x_{0}, z_{0})"/> to the congruence <img alt="X^2 - aZ^2 \equiv 0 (mod \ b)" class="latex" src="http://s0.wp.com/latex.php?latex=X%5E2+-+aZ%5E2+%5Cequiv+0+%28mod+%5C+b%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="X^2 - aZ^2 \equiv 0 (mod \ b)"/> with <img alt="x_{0}^2 + |a|z_{0}^2" class="latex" src="http://s0.wp.com/latex.php?latex=x_%7B0%7D%5E2+%2B+%7Ca%7Cz_%7B0%7D%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="x_{0}^2 + |a|z_{0}^2"/> as small as possible.<br/>
9. Set <img alt="t = (x_{0}^2 - az_{0}^2)/b " class="latex" src="http://s0.wp.com/latex.php?latex=t+%3D+%28x_%7B0%7D%5E2+-+az_%7B0%7D%5E2%29%2Fb+&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="t = (x_{0}^2 - az_{0}^2)/b "/> and write <img alt="t = t_{1}t_{2}^2" class="latex" src="http://s0.wp.com/latex.php?latex=t+%3D+t_%7B1%7Dt_%7B2%7D%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="t = t_{1}t_{2}^2"/> with <img alt="t_{1}" class="latex" src="http://s0.wp.com/latex.php?latex=t_%7B1%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="t_{1}"/> square-free.<br/>
10. Let <img alt="(x_{1}, y_{1}, z_{1})" class="latex" src="http://s0.wp.com/latex.php?latex=%28x_%7B1%7D%2C+y_%7B1%7D%2C+z_%7B1%7D%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x_{1}, y_{1}, z_{1})"/> be a solution to <img alt="X^2 - aZ^2 = t_{1}Y^2" class="latex" src="http://s0.wp.com/latex.php?latex=X%5E2+-+aZ%5E2+%3D+t_%7B1%7DY%5E2&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="X^2 - aZ^2 = t_{1}Y^2"/> then<br/>
<img alt="(x, y, z) = (x_{0 }x_{1} + az_{0}z_{1}, t_{1}t_{2}y_{1}, z_{0}x_{1} + x_{0}z_{1})" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%28x_%7B0+%7Dx_%7B1%7D+%2B+az_%7B0%7Dz_%7B1%7D%2C+t_%7B1%7Dt_%7B2%7Dy_%7B1%7D%2C+z_%7B0%7Dx_%7B1%7D+%2B+x_%7B0%7Dz_%7B1%7D%29&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="(x, y, z) = (x_{0 }x_{1} + az_{0}z_{1}, t_{1}t_{2}y_{1}, z_{0}x_{1} + x_{0}z_{1})"/></p>
<p>I spent a lot of time finding an algorithm for lattice reduction. There were generalized algorithms but I looked for something which is faster because we are concerned with vectors with two bases. I found  gaussian reduction algorithm in [2] which uses a method specific to this case.</p>
<h4>References</h4>
<p>[1] .. Efficient Solution of Rational Conices, J. E. Cremona and D. Rusin, Mathematics of Computation, Volume 00, Number 0.<br/>
[2] .. Gaussian lattice Reduction [online]. Available: <a href="http://home.ie.cuhk.edu.hk/~wkshum/wordpress/?p=404" rel="nofollow">http://home.ie.cuhk.edu.hk/~wkshum/wordpress/?p=404</a></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/154/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/154/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=154&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-07-29T05:59:34Z</updated>
    <category term="GSoC-2013-SymPy"/>
    <category term="descent method"/>
    <category term="gaussian reduction"/>
    <author>
      <name>Thilina Rathnayake</name>
    </author>
    <source>
      <id>http://thilinaatsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://thilinaatsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://thilinaatsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://thilinaatsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://thilinaatsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My Work related to sympy</subtitle>
      <title>Thilina's SymPy Blog</title>
      <updated>2014-01-14T17:20:48Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sophiessympyblog.wordpress.com/?p=222</id>
    <link href="http://sophiessympyblog.wordpress.com/2013/07/28/sixth-week/" rel="alternate" type="text/html"/>
    <title>Sixth week</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I implemented most of the modular GCD algorithm for algebraic function fields [1], which I described in my last post. At the moment it works for univariate polynomials over algebraic extensions of . Almost everything is in place to also calculate GCDs of polynomials over algebraic function fields, but at the moment there […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=222&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: justify;">This week I implemented most of the modular GCD algorithm for algebraic function fields [1], which I described in my last post. At the moment it works for univariate polynomials over algebraic extensions of <img alt="\mathbb Q" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Q&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Q"/>. Almost everything is in place to also calculate GCDs of polynomials over algebraic function fields, but at the moment there is no (easy) way to represent them, since there is no “<code>AlgebraicFunctionField</code>” domain in sympy yet. However, if we wanted to compute the GCD of two polynomials <img alt="f, g \in \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x]" class="latex" src="http://s0.wp.com/latex.php?latex=f%2C+g+%5Cin+%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle+%5Bx%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f, g \in \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x]"/> right now, we could compute their primitive associates <img alt="\check f, \check g \in \mathbb Z[x, t_1, \ldots, t_k, z]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ccheck+f%2C+%5Ccheck+g+%5Cin+%5Cmathbb+Z%5Bx%2C+t_1%2C+%5Cldots%2C+t_k%2C+z%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\check f, \check g \in \mathbb Z[x, t_1, \ldots, t_k, z]"/> and the minimal polynomial in <img alt="\mathbb Z[t_1, \ldots, t_k, z]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bt_1%2C+%5Cldots%2C+t_k%2C+z%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z[t_1, \ldots, t_k, z]"/> manually and then directly use the private function <code>_func_field_modgcd_m</code>.</p>
<p style="text-align: justify;">So how to handle multivariate inputs? Van Hoeij and Monagan write that for <img alt="f, g \in \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_1, \ldots, x_n]" class="latex" src="http://s0.wp.com/latex.php?latex=f%2C+g+%5Cin+%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle+%5Bx_1%2C+%5Cldots%2C+x_n%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f, g \in \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_1, \ldots, x_n]"/> we have to make three additional steps. First, we view <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f"/> and <img alt="g" class="latex" src="http://s0.wp.com/latex.php?latex=g&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="g"/> as univariate polynomials in <img alt="\mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_2, \ldots, x_n][x_1]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle+%5Bx_2%2C+%5Cldots%2C+x_n%5D%5Bx_1%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_2, \ldots, x_n][x_1]"/> and calculate the GCD of their contents, <img alt="c_h" class="latex" src="http://s0.wp.com/latex.php?latex=c_h&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="c_h"/>. Here, we have to do multivariate GCD computations in one variable less. After dividing out <img alt="c_h" class="latex" src="http://s0.wp.com/latex.php?latex=c_h&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="c_h"/>, we treat the variables <img alt="x_2, \ldots, x_n" class="latex" src="http://s0.wp.com/latex.php?latex=x_2%2C+%5Cldots%2C+x_n&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="x_2, \ldots, x_n"/> as parameters, i.e. we view <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f"/> and <img alt="g" class="latex" src="http://s0.wp.com/latex.php?latex=g&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="g"/> as polynomials over <img alt="\mathbb Q(t_1, \ldots, t_k, x_2, \ldots, x_n)[z] / \langle m(z) \rangle" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%2C+x_2%2C+%5Cldots%2C+x_n%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Q(t_1, \ldots, t_k, x_2, \ldots, x_n)[z] / \langle m(z) \rangle"/> and compute their univariate GCD <img alt="h" class="latex" src="http://s0.wp.com/latex.php?latex=h&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="h"/>. Finally, we divide out the content of <img alt="h" class="latex" src="http://s0.wp.com/latex.php?latex=h&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="h"/>, which is again viewed as a polynomial in <img alt="\mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_2, \ldots, x_n][x_1]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle+%5Bx_2%2C+%5Cldots%2C+x_n%5D%5Bx_1%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_2, \ldots, x_n][x_1]"/>, and multiply it by the correct content <img alt="c_h" class="latex" src="http://s0.wp.com/latex.php?latex=c_h&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="c_h"/>.</p>
<p style="text-align: justify;">Next week I plan to cover the multivariate case as well, write tests and documentation and clean up the code.</p>
<p style="text-align: justify;">[1] <a href="http://www.cecm.sfu.ca/~mmonagan/papers/AFGCD.pdf" rel="nofollow">http://www.cecm.sfu.ca/~mmonagan/papers/AFGCD.pdf</a></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/222/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/222/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=222&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-07-28T11:31:17Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>katjasophie</name>
    </author>
    <source>
      <id>http://sophiessympyblog.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sophiessympyblog.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sophiessympyblog.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sophiessympyblog.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sophiessympyblog.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>my gsoc 2013 project</subtitle>
      <title>sophie's sympy blog</title>
      <updated>2014-01-14T17:20:51Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://manojbits.wordpress.com/?p=666</id>
    <link href="http://manojbits.wordpress.com/2013/07/28/half-the-summer-gone-by/" rel="alternate" type="text/html"/>
    <title>Half the “summer” gone by</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hello, before I blog about my SymPy work, its going to be an exciting new semester in college (I hope) , and a set of new interesting courses (or courses with interesting names atleast) to be bunked. Last semester, just flew away,  I have the faintest idea of what happened , and I’m just hoping […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=666&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello, before I blog about my SymPy work, its going to be an exciting new semester in college (I hope) , and a set of new interesting courses (or courses with interesting names atleast) to be bunked. Last semester, just flew away,  I have the faintest idea of what happened , and I’m just hoping this time, it wouldn’t be the same. The summer wasn’t any different, and I have no idea how it went by. I had thought maybe I could learn something other than my SymPy project, like revising my C concepts, or maybe basics of ML, but if there is anything that I suck at, it is definitely time management, for some strange reason I prefer to while away the entire mornings and afternoons, listening to music, on Quora, Facebook, and in the evenings when the guilty conscience of having done nothing pricks me, I start to write some SymPy code.  There are of course others things that I suck at, however this post is going to about my SymPy project and not about things that I suck at and don’t.</p>
<p>Well poor jokes apart,  I guess this was the most productive week of my GSoC project (Was it something to do with the mid-term deadline? ). After numerous changes, I finally got my sphinx PR <a href="https://github.com/sympy/sympy/pull/2282" rel="nofollow">https://github.com/sympy/sympy/pull/2282</a> and refactor PR <a href="https://github.com/sympy/sympy/pull/2286" rel="nofollow">https://github.com/sympy/sympy/pull/2286</a> merged. Other than that I read five new heuristics that Raoul gave me, and pushed it to a single PR <a href="https://github.com/sympy/sympy/pull/2308" rel="nofollow">https://github.com/sympy/sympy/pull/2308</a>. Since almost of all the algorithms are pretty straightforward, I’d just focus on the one that I found most interesting, and the one that I found well, not so interesting.</p>
<p>1. <strong>Linear:</strong></p>
<p>This one assumes <img alt="\xi" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cxi&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\xi"/> to be <img alt="ax + bf(x) + c" class="latex" src="http://s0.wp.com/latex.php?latex=ax+%2B+bf%28x%29+%2B+c&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="ax + bf(x) + c"/> and <img alt="\eta to be fx + gf(x) + h" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ceta+to+be+fx+%2B+gf%28x%29+%2B+h&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\eta to be fx + gf(x) + h"/>, This is similar to the bivariate heuristic, except for the fact that, that <img alt="h" class="latex" src="http://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="h"/> need not be a rational function.  This would mean cases even in which the exponents are symbolic constants would satisfy this heuristic. Substituting, <img alt="\xi" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cxi&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\xi"/> and <img alt="\eta" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ceta&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\eta"/> , the PDE is simplified to, <img alt="f + (g - a)h - bh^{2} - (ax + by + c)\frac{\partial h}{\partial x} - (fx + gy + h)\frac{\partial h}{\partial y}" class="latex" src="http://s0.wp.com/latex.php?latex=f+%2B+%28g+-+a%29h+-+bh%5E%7B2%7D+-+%28ax+%2B+by+%2B+c%29%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%28fx+%2B+gy+%2B+h%29%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="f + (g - a)h - bh^{2} - (ax + by + c)\frac{\partial h}{\partial x} - (fx + gy + h)\frac{\partial h}{\partial y}"/>  And as usual. grouping the coefficients and by using solve, one could get the value of the constants, <img alt="a, b, c, f, g, h" class="latex" src="http://s0.wp.com/latex.php?latex=a%2C+b%2C+c%2C+f%2C+g%2C+h&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="a, b, c, f, g, h"/></p>
<p>2. <strong>A</strong><strong>baco2_unique_general</strong>:</p>
<p>This algorithm seems like these huge formulae in my mechanical engineering exams (that nobody has any idea how it came into place, in which you just substitute things and get the answer, (I get most of them wrong anyway). This gist would explain the algorithm better than me, <a href="https://gist.github.com/Manoj-Kumar-S/6095045" rel="nofollow">https://gist.github.com/Manoj-Kumar-S/6095045</a></p>
<p>I guess thats it for now. I am waiting for Sean to give his comments, before I can go any further in my project. Cheers.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/666/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/666/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;blog=31971756&amp;post=666&amp;subd=manojbits&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-07-28T07:28:57Z</updated>
    <category term="SymPy"/>
    <category term="differential"/>
    <category term="gsoc"/>
    <category term="gsoc2013"/>
    <category term="heuristics"/>
    <category term="lie-group ode"/>
    <category term="ode"/>
    <category term="pde"/>
    <category term="python"/>
    <category term="sympy"/>
    <author>
      <name>Manoj Kumar</name>
    </author>
    <source>
      <id>http://manojbits.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://manojbits.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://manojbits.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://manojbits.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://manojbits.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>From a learner's perspective</subtitle>
      <title>Perspective » SymPy</title>
      <updated>2014-01-14T17:20:46Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-5472769892551526876.post-6303625907522831747</id>
    <link href="http://codesachin.blogspot.com/feeds/6303625907522831747/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=5472769892551526876&amp;postID=6303625907522831747" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/6303625907522831747" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/6303625907522831747" rel="self" type="application/atom+xml"/>
    <link href="http://codesachin.blogspot.com/2013/07/gsoc-week-6-first-halfalmost-done.html" rel="alternate" type="text/html"/>
    <title>GSoC Week 6: First half(almost) done</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">First, about the work done this week. It took me some time to set up my programming environment and get used to Ubuntu's interface. I fumbled around a bit messing up some things on the way, but now I can say I am quite comfortable...at least with the basics.<br/>For one, I got the docs for my work on the logic module merged into the master docs. Aaron also pointed me to the method for merging those changes with the <a href="http://docs.sympy.org/dev/">development version </a> of the SymPy docs. I will try and get it done in a day or two, before I leave for my campus.<br/>Second, Gilbert and I submitted a PR to Prasoon's branch with some changes that we made to his code. Since the number of merge conflicts are high, he would most probably be merging the relevant parts manually.<br/>Third, I started working on the code for dyadics. Initially, I submitted a <i>slightly </i>modified version of the earlier Dyadic class, but Gilbert soon made me realise that compatibility with SymPy's core would mean a lot more than just a few changes here and there. Sigh.<br/>So, I am now busy working on classes for dyadics, compatible with SymPy's global architecture-<br/>1) Dyadic(Expr), the super class - all operations and initializations will be handled from here<br/>2) BaseDyadic(Dyadic) - the class to represent basic components of dyadics, things like (R1.x|R2.y)<br/>3) DyadicAdd(Add, Dyadic) and DyadicMul(Mul, Dyadic) - additions and multiplications of dyadics<br/><br/>The last two classes are a little shaky for now, and the code I have submitted at the PR at the time I write this makes it quite evident. Inspite of that, I have got the basic operations- add, sub, mul, div and some others like 'and' to work as expected(conceptually). To see how it looks as of now, you can see <a href="http://pastebin.com/WxJ15ewk">this</a> (real SymPy session with mock arguments). However, it's quite obvious that getting these new classes to behave exactly according to SymPy's way of doing things and return accurate results is going to take quite some time, maybe a week more. Not to forget docs, doc examples and tests.<br/><br/>Anyways, I can't believe I am almost at the end of the first half of my GSoC period. I have learnt *quite* a lot, well, that's obvious from my blog posts- not just vector math, but a bunch of Python as well. I am happy with the progress till now, though nothing has been merged yet. But well, Prasoon and my projects are such that when things <i>will </i>get merged, a huge chunk will go in together.<br/>I plan to get the mechanics core done perfectly before I start with the EM module..and by 'done perfectly', I mean getting the main code merged, along with a lot of commentary-style documentation on the new module. I also have to enquire about putting deprecation signs on the old module- will have to consult the mailing list for this.<br/><br/>As mentioned earlier, I will be moving to Goa on Tuesday, so that period is going to be quite busy with getting things in order @the insti. Then I can start working again.<br/>The mid-term GSoC evaluations will be done from 29th to 2nd of August, after which I will get my first big payment in 4-5 days :-)<br/><br/>Thats all for now!<br/>Have a great week, and 'stay tuned' :-D.</div></div>
    </content>
    <updated>2013-07-27T18:32:15Z</updated>
    <published>2013-07-27T18:32:00Z</published>
    <author>
      <name>Sachin Joglekar</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/106302547764750990775</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5472769892551526876</id>
      <author>
        <name>Sachin Joglekar</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://codesachin.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>-Sachin Joglekar-</subtitle>
      <title>Dream. Think. Code.</title>
      <updated>2013-11-30T11:34:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://meclark256.wordpress.com/?p=75</id>
    <link href="http://meclark256.wordpress.com/2013/07/25/week-6/" rel="alternate" type="text/html"/>
    <title>Week 6</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Or is it week 5? I’m no longer sure. My ability to count has decreased dramatically as my number of years studying mathematics has increased. Excitingly, this week I’ve have two PRs merged, 2259 and 2237. Other than that, this week has been fairly slow. I’ve been battling illness and haven’t accomplished overly much. I’ve […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=75&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Or is it week 5? I’m no longer sure. My ability to count has decreased dramatically as my number of years studying mathematics has increased.</p>
<p>Excitingly, this week I’ve have two PRs merged, 2259 and 2237. Other than that, this week has been fairly slow. I’ve been battling illness and haven’t accomplished overly much. I’ve generally been cleaning up code for all the types (type_A and type_B are done, since those were in the PRs), and I’ve made definite progress with types C-F. I also think I’ve figured out the ascii art for the Dynkin diagrams.</p>
<p>To do the Dynkin diagrams, I learnt about the join function for strings in python, which made things 100 times easier. For instance, the code to generate the Dynkin diagram of A_n is:</p>
<p>&gt;&gt;&gt; diag = “—”.join(“0″ for i in range(1, n+1)) + “\n”<br/>
&gt;&gt;&gt; diag += ” “.join(str(i) for i in range(1, n+1))</p>
<p>For example for A_3 it produces a Dynkin diagram that looks like:<br/>
0—0—0<br/>
1    2     3<br/>
which I’m quite happy with. I though that I was going to have to use a loop, but the join command is much more elegant. The code for the other types looks very similar.</p>
<p>So yeah, that’s pretty much where I am. I seem to be getting over this illness, so I hope that I will be much more productive this weekend.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/75/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/75/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;blog=52875864&amp;post=75&amp;subd=meclark256&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-07-25T18:26:26Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>meclark256</name>
    </author>
    <source>
      <id>http://meclark256.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://meclark256.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://meclark256.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://meclark256.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://meclark256.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Smile! You’re at the best WordPress.com site ever</subtitle>
      <title>My GSOC Adventure with SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:fabianp.net/blog,2013-07-25:2013/different-ways-to-get-memory-consumption-or-lessons-learned-from-memory_profiler/</id>
    <link href="http://fabianp.net/blog/2013/different-ways-to-get-memory-consumption-or-lessons-learned-from-memory_profiler/" rel="alternate" type="text/html"/>
    <title>Different ways to get memory consumption or lessons learned from ``memory_profiler``</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As part of the development of
<a href="https://pypi.python.org/pypi/memory_profiler">memory_profiler</a> I've tried
several ways to get memory usage of a program from within Python. In this post
I'll describe the different alternatives I've tested.</p>
<h3>The psutil library</h3>
<p><a href="https://code.google.com/p/psutil/">psutil</a> is a python library that provides
an interface for retrieving information on running processes. It provides
convenient, fast and cross-platform functions to access the memory usage of a
Python module:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">memory_usage_psutil</span><span class="p">():</span>
    <span class="c"># return the memory usage in MB</span>
    <span class="kn">import</span> <span class="nn">psutil</span>
    <span class="n">process</span> <span class="o">=</span> <span class="n">psutil</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">())</span>
    <span class="n">mem</span> <span class="o">=</span> <span class="n">process</span><span class="o">.</span><span class="n">get_memory_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="nb">float</span><span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="mi">20</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">mem</span>
</pre></div>


<p>The above function returns the memory usage of the current Python process in
MiB. Depending on the platform it will choose the most accurate and fastest
way to get this information. For example, in Windows it will use the C++ Win32
API while in Linux it will read from <code>/proc</code>, hiding the implementation
details and proving on each platform a fast and accurate measurement.</p>
<p>If you are looking for an easy way to get the memory consumption within Python
this in my opinion your best shot. </p>
<h3>The resource module</h3>
<p>The <a href="http://docs.python.org/2/library/resource.html">resource module</a> is part
of the standard Python library. It's basically a wrapper around
&lt;sys&gt;resource.h&gt; <a>getrusage</a>,
which is a POSIX standard but some methods are <a href="http://linux.die.net/man/2/getrusage">still missing in
Linux</a> . However, the ones we are
interested seem to work fine in Ubuntu 10.04. You can get the memory usage
with this function:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">memory_usage_resource</span><span class="p">():</span>
    <span class="kn">import</span> <span class="nn">resource</span>
    <span class="n">rusage_denom</span> <span class="o">=</span> <span class="mf">1024.</span>
    <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span> <span class="o">==</span> <span class="s">'darwin'</span><span class="p">:</span>
        <span class="c"># ... it seems that in OSX the output is different units ...</span>
        <span class="n">rusage_denom</span> <span class="o">=</span> <span class="n">rusage_denom</span> <span class="o">*</span> <span class="n">rusage_denom</span>
    <span class="n">mem</span> <span class="o">=</span> <span class="n">resource</span><span class="o">.</span><span class="n">getrusage</span><span class="p">(</span><span class="n">resource</span><span class="o">.</span><span class="n">RUSAGE_SELF</span><span class="p">)</span><span class="o">.</span><span class="n">ru_maxrss</span> <span class="o">/</span> <span class="n">rusage_denom</span>
    <span class="k">return</span> <span class="n">mem</span>
</pre></div>


<p>In my experience this approach is several times faster than the one based in
psutil as was the default way to get the memory usage that I used in
<code>memory_profiler</code> from version 0.23 up to 0.26. I changed this behavior in
0.27 after a bug report by <a href="https://github.com/pgervais">Philippe Gervais</a>.
The problem with this approach is that it seems to report results that are
slightly different in some cases. Notably it seems to differ when objects
have been recently liberated from the python interpreter.</p>
<p>In the following example, orphaned arrays are liberated by the python
interpreter, which is correctly seen by <code>psutil</code> but not by <code>resource</code>:</p>
<div class="highlight"><pre><span class="n">mem_resource</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">mem_psutil</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">1000</span> <span class="o">*</span> <span class="n">i</span><span class="p">,</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">i</span><span class="p">))</span>
    <span class="n">mem_resource</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">memory_usage_resource</span><span class="p">())</span>
    <span class="n">mem_psutil</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">memory_usage_psutil</span><span class="p">())</span>
</pre></div>


<p><img alt="Memory plot" src="http://fa.bianp.net/blog/static/code/2013/resource_vs_psutil.png"/></p>
<p>By the way I would be delighted to be corrected if I'm doing something wrong
or informed of a workaround if this exists (I've got the code to reproduce the
figures <sup id="fnref:1"><a class="footnote-ref" href="http://fa.bianp.net/blog/feed/#fn:1" rel="footnote">1</a></sup>)</p>
<h3>querying <code>ps</code> directly</h3>
<p>The method based on <code>psutils</code> works great but is not available by default on all
Python systems. Because of this in <code>memory_profiler</code> we use as last resort
something that's pretty ugly but works reasonably well when all else fails:
invoking the system's <code>ps</code> command and parsing the output. The code is
something like::</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">memory_usage_ps</span><span class="p">():</span>
    <span class="kn">import</span> <span class="nn">subprocess</span>
    <span class="n">out</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">'ps'</span><span class="p">,</span> <span class="s">'v'</span><span class="p">,</span> <span class="s">'-p'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">())],</span>
    <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span><span class="o">.</span><span class="n">communicate</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">b</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="n">vsz_index</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">()</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">b</span><span class="s">'RSS'</span><span class="p">)</span>
    <span class="n">mem</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="n">vsz_index</span><span class="p">])</span> <span class="o">/</span> <span class="mi">1024</span>
    <span class="k">return</span> <span class="n">mem</span>
</pre></div>


<p>The main disadvantage of this approach is that it needs to fork a process for
each measurement. For some tasks where you need to get memory usage very fast,
like in line-by-line memory usage then this be a huge overhead on the code.
For other tasks such as getting information of long-running processes, where
the memory usage is anyway working on a separate process this is not too bad.</p>
<h3>benchmarks</h3>
<p>Here is a benchmark of the different alternatives presented above. I am
plotting the time it takes the different approaches to make 100 measurements
of the memory usage (lower is better). As can be seen the smallest one is
resource (although it suffers from the issues described above) followed
closely by <code>psutil</code> which is in my opinion the best option if you can count on
it being installed on the host system and followed far away by <code>ps</code> which is
roughly a hundred times slower than <code>psutil</code>.</p>
<p><img alt="Memory plot" src="http://fa.bianp.net/blog/static/code/2013/time_100_measurements.png"/></p>
<div class="footnote">
<hr/>
<ol>
<li id="fn:1">
<p>IPython notebook to reproduce the figures: <a href="http://nbviewer.ipython.org/url/fa.bianp.net/blog/static/code/2013/memory_usage.ipynb">html</a> <a href="http://fa.bianp.net/blog/static/code/2013/memory_usage.ipynb">ipynb</a> <a class="footnote-backref" href="http://fa.bianp.net/blog/feed/#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
</ol>
</div></div>
    </summary>
    <updated>2013-07-24T22:00:00Z</updated>
    <category term="Python"/>
    <category term="memory"/>
    <category term="memory_profiler"/>
    <author>
      <name>Fabian Pedregosa</name>
    </author>
    <source>
      <id>http://fabianp.net/blog/</id>
      <link href="http://fabianp.net/blog/" rel="alternate" type="text/html"/>
      <link href="http://fa.bianp.net/blog/feed/rss.xml" rel="self" type="application/atom+xml"/>
      <title>I say things</title>
      <updated>2013-09-17T07:20:15Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://geekiology.wordpress.com/?p=377</id>
    <link href="http://geekiology.wordpress.com/2013/07/22/week-5/" rel="alternate" type="text/html"/>
    <title>Week-5</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This was the week where things did start sprouting slowly and steadily but some things came about of blue storming the entire progress. Some of the outputs: Input: DE = DifferentialExtension(extension={‘D’: [Poly(1, x), Poly(1/x, t)], ‘L_K’: [1], ‘E_K’: [], ‘L_args’: [x], ‘E_args’: []}) g1 = Poly(t + 1 + x*t – x*t**3, t) g2 = […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;blog=36553244&amp;post=377&amp;subd=geekiology&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This was the week where things did start sprouting slowly and steadily but some things came about of blue storming the entire progress.<br/>
Some of the outputs:<br/>
<a href="http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-200838.png"><img alt="Screenshot from 2013-07-22 20:08:38" class="alignnone size-medium wp-image-380" height="168" src="http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-200838.png?w=300&amp;h=168" width="300"/></a><br/>
Input:<br/>
DE = DifferentialExtension(extension={‘D’: [Poly(1, x), Poly(1/x, t)],<br/>
  ‘L_K’: [1], ‘E_K’: [], ‘L_args’: [x], ‘E_args’: []})<br/>
g1 = Poly(t + 1 + x*t – x*t**3, t)<br/>
g2 = Poly(2 + 2*t + 3*x*t**3 + 2*x*t, t)<br/>
coupled_DE_system(Poly(t**2 + 1, t), Poly(t**2, t), g1, g2, DE)</p>
<p>Output<br/>
-&gt; The monomial is <img alt="\log x" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog+x&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\log x"/><br/>
-&gt; The s1, s2 should satisfy:<br/>
<img alt="Ds1 + (t^2 + 1)s1 - (t^2)s2 = 2*t + 1 " class="latex" src="http://s0.wp.com/latex.php?latex=Ds1+%2B+%28t%5E2+%2B+1%29s1+-+%28t%5E2%29s2+%3D+2%2At+%2B+1+&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="Ds1 + (t^2 + 1)s1 - (t^2)s2 = 2*t + 1 "/><br/>
<img alt="Ds2 + (t^2)s2 + (t^2 + 1)s1 = 2*t^2 + 2*t + 1 " class="latex" src="http://s0.wp.com/latex.php?latex=Ds2+%2B+%28t%5E2%29s2+%2B+%28t%5E2+%2B+1%29s1+%3D+2%2At%5E2+%2B+2%2At+%2B+1+&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="Ds2 + (t^2)s2 + (t^2 + 1)s1 = 2*t^2 + 2*t + 1 "/></p>
<p>This case arises while solving<br/>
<img alt="Ds + (1 + (\log x)^2 (1 + \iota)) s = (2*\log x + 1)(1 + \iota) +  2*(\log x)^2 \iota " class="latex" src="http://s0.wp.com/latex.php?latex=Ds+%2B+%281+%2B+%28%5Clog+x%29%5E2+%281+%2B+%5Ciota%29%29+s+%3D+%282%2A%5Clog+x+%2B+1%29%281+%2B+%5Ciota%29+%2B++2%2A%28%5Clog+x%29%5E2+%5Ciota+&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="Ds + (1 + (\log x)^2 (1 + \iota)) s = (2*\log x + 1)(1 + \iota) +  2*(\log x)^2 \iota "/></p>
<p><a href="http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-200602.png"><img alt="Screenshot from 2013-07-22 20:06:02" class="alignnone size-medium wp-image-378" height="168" src="http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-200602.png?w=300&amp;h=168" width="300"/></a></p>
<p>Input:<br/>
DE = DifferentialExtension(extension={‘D’: [Poly(1, x), Poly(t, t)],<br/>
   ‘L_K’: [], ‘E_K’: [1], ‘L_args’: [], ‘E_args’: [x]})<br/>
g1 = Poly(2*t + 1)<br/>
g2 = Poly(2*t^2 + 2*t + 1, t)<br/>
coupled_DE_system(Poly(t + 1, t), Poly(t – 1, t), g1, g2, DE)</p>
<p>Output<br/>
-&gt; The monomial is <img alt="\log x" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog+x&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="\log x"/><br/>
-&gt; The s1, s2 should satisfy:<br/>
<img alt="Ds1 + (t + 1)s1 - (t - 1)s2 = 2*t + 1 " class="latex" src="http://s0.wp.com/latex.php?latex=Ds1+%2B+%28t+%2B+1%29s1+-+%28t+-+1%29s2+%3D+2%2At+%2B+1+&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="Ds1 + (t + 1)s1 - (t - 1)s2 = 2*t + 1 "/><br/>
<img alt="Ds2 + (t - 1)s2 + (t + 1)s1 = 2*t^2 + 2*t + 1 " class="latex" src="http://s0.wp.com/latex.php?latex=Ds2+%2B+%28t+-+1%29s2+%2B+%28t+%2B+1%29s1+%3D+2%2At%5E2+%2B+2%2At+%2B+1+&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="Ds2 + (t - 1)s2 + (t + 1)s1 = 2*t^2 + 2*t + 1 "/></p>
<p><a href="http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-201020.png"><img alt="Screenshot from 2013-07-22 20:10:20" class="alignnone size-medium wp-image-381" height="168" src="http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-201020.png?w=300&amp;h=168" width="300"/></a><br/>
Input:<br/>
# t2 = e^(e^x)<br/>
t0, t1, t2 = symbols(‘t:3′)<br/>
DE = DifferentialExtension(extension={‘D’: [Poly(1, x), Poly(t1, t1), Poly(t2*t1, t2)],<br/>
   ‘L_K’: [], ‘E_K’: [1, 2], ‘L_args’: [], ‘E_args’: [t1, x]})<br/>
g1 = Poly(t2**2*t1 + t2**2*t1**2 – t2**4, t2, t1)<br/>
g2 = Poly(t2**4 + t1**3 + t2*t1**2 + t2*t1 + t1, t2, t1)<br/>
coupled_DE_system(Poly(t1**2, t1), Poly(t2**2, t2), g1, g2, DE)</p>
<p>Output:<br/>
NoElementaryIntegrals<br/>
monomial <img alt="e^(e^x)" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%28e%5Ex%29&amp;bg=ffffff&amp;fg=444444&amp;s=0" title="e^(e^x)"/> is expected to return the above</p>
<p>There are also other test(and probably the reason i am not able to commit the progress). These tests are ending up in recursion b/w cancellation algorithms and coupled_differential_system, probably I am missing the boundary conditions somewhere.<br/>
And yes i still need to add b1=0 ad b2=0 conditions(Asmeurer yups the book mentions about them at places) </p>
<p> Mostly the re-opening of the college would bottleneck the progress for a couple of days, excluding the travel time and resettling life at college there would be ongoing campus-interviews, keeping me busy away from the terminal in office boardrooms(which makes every bone of my body to shiver).</p>
<p>Life is definitely a roller-coaster, and I am about to the cross the highest point of it this week.<br/>
Hoping to witness no more crashes for a couple of days<br/>
Signing- off <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>   </p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/377/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/377/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;blog=36553244&amp;post=377&amp;subd=geekiology&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-07-22T15:05:01Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>chetnagupta</name>
    </author>
    <source>
      <id>http://geekiology.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://geekiology.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://geekiology.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://geekiology.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://geekiology.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>GSoC 2013 Blog</subtitle>
      <title>Risch Algorithm</title>
      <updated>2014-01-14T17:20:44Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://musingsofafriend.wordpress.com/?p=192</id>
    <link href="http://musingsofafriend.wordpress.com/2013/07/21/gsoc-week-5-a-week-gone-bad/" rel="alternate" type="text/html"/>
    <title>GSoC Week 5 : A week gone bad</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This was was rather eventful. And as such, I didn’t get much time to work. As a matter of fact, I hardly got any time to work at all. So, this week, a new semester in my college began, and, … <a class="more-link" href="http://musingsofafriend.wordpress.com/2013/07/21/gsoc-week-5-a-week-gone-bad/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=192&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This was was rather eventful. And as such, I didn’t get much time to work. As a matter of fact, I hardly got any time to work at all.</p>
<p>So, this week, a new semester in my college began, and, things were hectic, as it always does at the start of a new session. There was the usual hum-drum that is associated with a new session and more. But I was optimistic. I hoped that I’ll cover some ground in the weekend but alas! That was not to be. As it happens, a professor got hold of me for writing out some odd scripts. And the guy didn’t even offer a measly thanks in return. Nevertheless, as life settles down, I know I’ll find more time to work.</p>
<p>Nevertheless, there was some work that I did get done. First thing – the basic structure finally did get completed. There were some small bugs that have been taken care of. Now that the basic building block of the project are in their final state, I have finally begun the testing of the code written till now. I have been able to initialize coordinate system objects correctly and also tested initialization of VectAdd and VectMul objects using operators defined on various classes.</p>
<p>That’s pretty much it for this week. I know that it’s very little. But again, I am optimistic that I’ll get more time (much more in fact) in the coming weeks. By the end of this week, I hope to have corrected whatever errors that are still in the code, write tests and have a part of the code ready to go in.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/192/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/192/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;blog=36409097&amp;post=192&amp;subd=musingsofafriend&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-07-21T16:12:37Z</updated>
    <category term="Programming"/>
    <category term="Python"/>
    <category term="SymPy"/>
    <author>
      <name>musingsofafriend</name>
    </author>
    <source>
      <id>http://musingsofafriend.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://musingsofafriend.wordpress.com/tag/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://musingsofafriend.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://musingsofafriend.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://musingsofafriend.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>The greatest WordPress.com site in all the land!</subtitle>
      <title>musings of a friend - Prasoon Shukla » SymPy</title>
      <updated>2014-01-14T17:20:50Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sophiessympyblog.wordpress.com/?p=197</id>
    <link href="http://sophiessympyblog.wordpress.com/2013/07/21/fifth-week/" rel="alternate" type="text/html"/>
    <title>Fifth week</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I began this week with tracking down two problems with the modular GCD algorithm for multivariate integer polynomials. The first one was fixed by choosing evaluation points randomly instead of in a fixed order. For example, this happened with the polynomials and because is unlucky for every prime, but this was never detected. The second […]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=197&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: justify;">I began this week with tracking down two problems with the modular GCD algorithm for multivariate integer polynomials. The first one was fixed by choosing evaluation points randomly instead of in a fixed order. For example, this happened with the polynomials <img alt="f = x + y" class="latex" src="http://s0.wp.com/latex.php?latex=f+%3D+x+%2B+y&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f = x + y"/> and <img alt="g = x + y + z" class="latex" src="http://s0.wp.com/latex.php?latex=g+%3D+x+%2B+y+%2B+z&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="g = x + y + z"/> because <img alt="z = 0" class="latex" src="http://s0.wp.com/latex.php?latex=z+%3D+0&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="z = 0"/> is unlucky for every prime, but this was never detected.<br/>
The second problem occurred with polynomials in many variables. If one of the first variables was evaluated at an unlucky point, the algorithm would try out every combination of evaluation points for the remaining variables before the unlucky one was discarded. This was fixed by giving up an evaluation point if too many failures happen.<br/>
The good news is that now <code>bin/test</code> passes when <code>heugcd</code> is replaced by <code>modgcd_multivariate</code>.</p>
<p style="text-align: justify;">After that, I started implementing the modular GCD algorithm for polynomials over (simple) algebraic function fields, as described in [1]. The setting is as follows. We consider the field of rational functions in the parameters <img alt="t_1, \ldots, t_k" class="latex" src="http://s0.wp.com/latex.php?latex=t_1%2C+%5Cldots%2C+t_k&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="t_1, \ldots, t_k"/>, i.e. <img alt="\mathbb Q(t_1, \ldots, t_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Q(t_1, \ldots, t_k)"/>. Since we also want to be able to work with expressions like <img alt="\sqrt{2}, \, \sqrt{t_1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csqrt%7B2%7D%2C+%5C%2C+%5Csqrt%7Bt_1%7D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\sqrt{2}, \, \sqrt{t_1}"/> etc., we construct a suitable algebraic extension <img alt="L = \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle" class="latex" src="http://s0.wp.com/latex.php?latex=L+%3D+%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="L = \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle"/>, where <img alt="m(z) \in \mathbb Q(t_1, \ldots, t_k)[z]" class="latex" src="http://s0.wp.com/latex.php?latex=m%28z%29+%5Cin+%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="m(z) \in \mathbb Q(t_1, \ldots, t_k)[z]"/> is monic and irreducible. Our goal now is to calculate the GCD of two univariate polynomials <img alt="f(x), g(x) \in L[x]" class="latex" src="http://s0.wp.com/latex.php?latex=f%28x%29%2C+g%28x%29+%5Cin+L%5Bx%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f(x), g(x) \in L[x]"/>.</p>
<p style="text-align: justify;">First, the problem is reduced to polynomials over <img alt="\mathbb Z[t_1, \ldots, t_k][z] / \langle m(z) \rangle" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bt_1%2C+%5Cldots%2C+t_k%5D%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z[t_1, \ldots, t_k][z] / \langle m(z) \rangle"/> by clearing fractions in <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f"/> and <img alt="g" class="latex" src="http://s0.wp.com/latex.php?latex=g&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="g"/>. So basically, we are working with polynomials <img alt="f, g \in \mathbb Z[t_1, \ldots, t_k][z, x]" class="latex" src="http://s0.wp.com/latex.php?latex=f%2C+g+%5Cin+%5Cmathbb+Z%5Bt_1%2C+%5Cldots%2C+t_k%5D%5Bz%2C+x%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f, g \in \mathbb Z[t_1, \ldots, t_k][z, x]"/>. As always, the main loop picks suitable prime numbers <img alt="p" class="latex" src="http://s0.wp.com/latex.php?latex=p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="p"/>, calculates the GCD of <img alt="f \; \mathrm{mod} \, p" class="latex" src="http://s0.wp.com/latex.php?latex=f+%5C%3B+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f \; \mathrm{mod} \, p"/> and <img alt="g \; \mathrm{mod} \, p" class="latex" src="http://s0.wp.com/latex.php?latex=g+%5C%3B+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="g \; \mathrm{mod} \, p"/> with algorithm P and combines the new result with previous ones (for different primes) using the Chinese Remainder Theorem. Here we only pick those prime numbers and GCDs, where the leading terms match the one of the new GCD and obtain <img alt="c \; \mathrm{mod}\, m_c" class="latex" src="http://s0.wp.com/latex.php?latex=c+%5C%3B+%5Cmathrm%7Bmod%7D%5C%2C+m_c&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="c \; \mathrm{mod}\, m_c"/>. Next we use integer rational reconstruction (see [2]) on the coefficients of <img alt="c \; \mathrm{mod}\, m_c" class="latex" src="http://s0.wp.com/latex.php?latex=c+%5C%3B+%5Cmathrm%7Bmod%7D%5C%2C+m_c&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="c \; \mathrm{mod}\, m_c"/>, which tries to calculate <img alt="\frac a b \in \mathbb Q" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac+a+b+%5Cin+%5Cmathbb+Q&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\frac a b \in \mathbb Q"/> from <img alt="a b^{-1} \; \mathrm{mod} \, m_c" class="latex" src="http://s0.wp.com/latex.php?latex=a+b%5E%7B-1%7D+%5C%3B+%5Cmathrm%7Bmod%7D+%5C%2C+m_c&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="a b^{-1} \; \mathrm{mod} \, m_c"/>. This will only succeed if <img alt="a" class="latex" src="http://s0.wp.com/latex.php?latex=a&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="a"/> and <img alt="b" class="latex" src="http://s0.wp.com/latex.php?latex=b&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="b"/> are smaller than <img alt="\sqrt{\frac {m_c} 2}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csqrt%7B%5Cfrac+%7Bm_c%7D+2%7D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\sqrt{\frac {m_c} 2}"/>. Finally we check if we have found our GCD with trial division.</p>
<p style="text-align: justify;">Algorithm P works by recursively evaluating the parameters <img alt="t_1, \ldots, t_k" class="latex" src="http://s0.wp.com/latex.php?latex=t_1%2C+%5Cldots%2C+t_k&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="t_1, \ldots, t_k"/> for <img alt="f, g" class="latex" src="http://s0.wp.com/latex.php?latex=f%2C+g&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="f, g"/> and <img alt="m" class="latex" src="http://s0.wp.com/latex.php?latex=m&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="m"/>. When there are no parameters left, we have two polynomials in <img alt="\mathbb Z_p[z] / \langle m(z) \rangle [x]" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle+%5Bx%5D&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z_p[z] / \langle m(z) \rangle [x]"/>. Now we try to use the Euclidean Algorithm to compute their GCD. Because <img alt="m(z)" class="latex" src="http://s0.wp.com/latex.php?latex=m%28z%29&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="m(z)"/> may not be irreducible anymore, <img alt="\mathbb Z_p[z] / \langle m(z) \rangle" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle&amp;bg=f7f3ee&amp;fg=333333&amp;s=0" title="\mathbb Z_p[z] / \langle m(z) \rangle"/> is only a ring in general and we may encounter zero divisors. Therefore, it is possible that the Euclidean Algorithm fails. If a recursive call of algorithm P fails, then we have to choose a different evaluation point. Subresults are later combined with similar techniques as above. Again, we verify the result using trial division.</p>
<p style="text-align: justify;">Next week I hope to finish a working version of this algorithm.</p>
<p style="text-align: justify;">[1] <a href="http://www.cecm.sfu.ca/~mmonagan/papers/AFGCD.pdf" rel="nofollow">http://www.cecm.sfu.ca/~mmonagan/papers/AFGCD.pdf</a><br/>
[2] <a href="http://dl.acm.org/citation.cfm?id=806398" rel="nofollow">http://dl.acm.org/citation.cfm?id=806398</a></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/197/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/197/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;blog=53034828&amp;post=197&amp;subd=sophiessympyblog&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2013-07-21T14:58:48Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>katjasophie</name>
    </author>
    <source>
      <id>http://sophiessympyblog.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sophiessympyblog.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sophiessympyblog.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sophiessympyblog.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sophiessympyblog.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>my gsoc 2013 project</subtitle>
      <title>sophie's sympy blog</title>
      <updated>2014-01-14T17:20:51Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-5472769892551526876.post-4735040836898965200</id>
    <link href="http://codesachin.blogspot.com/feeds/4735040836898965200/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=5472769892551526876&amp;postID=4735040836898965200" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/4735040836898965200" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default/4735040836898965200" rel="self" type="application/atom+xml"/>
    <link href="http://codesachin.blogspot.com/2013/07/gsoc-week5.html" rel="alternate" type="text/html"/>
    <title>GSoC: Week5</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">A late post this week.<div>In terms of progress, last week was a bit slow, but things are going to move pretty fast now.</div><div>The past seven days, I wrote the tests for the code of MovingRefFrame, Particle and all the helper functions in the functions.py file. Trust me, if writing tests are the only thing you are doing, it can get <i>pretty </i>boring. Testing your code and experimenting with it is a lot of fun, but sadly, writing unit tests is not. Anyways, I finished writing most of them for the classes built till now. Some more may have to be added, but that will be after Prasoon's code gets pushed into SymPy's master repo.</div><div>Apart from that, I did some groundwork on Dyadics, which would be the focus of my GSoC work for the upcoming week. I will be taking hints from the old module's Dyadic class, but I will have to modify and hack it considerably to fit SymPy's global architecture. Plus, some methods like the __eq__ one need improvement, which I plan to do. I hope I can finish the class (operation methods as well as those for printing, etc) by the end of this week. Tests later.</div><div><br/></div><div>One great thing that happened this week- I <i>finally </i>decided to give up Windows as my coding environment. Its not like you cannot code in Windows; if you are good enough for what you are trying to do, you can pretty much do whatever you want there...but in Linux, its 10x easier. Especially since any library you want is just one small command away.</div><div>My laptop's LAN card got replaced, and it prompted me to set up a dual boot system on my machine.</div><div>Anyways, I am very happy with the linux(Ubuntu 12.04 LTS) experience!</div><div><br/></div><div>Yeah...one more thing! SymPy 0.7.3 finally got released, and this will be the first official release to include code from me (the work on sympy.logic)! However, the documentation for that code hasn't been added to the website docs, so I probably need to learn the basics of Sphinx documentation for that. I hope I can get it done this week. I tried working with Sphinx on Windows earlier, but it quite frankly was a little tricky for an impatient guy like me.</div><div><br/></div><div>That's all the 'progress' that happened this week.</div><div>The next week's post will be the last GSoC update I'll be posting from Mumbai. I'll be going to my campus at Goa on next Tuesday, that week's work may be a little bit delayed around the Tue-Wed period.</div><div>But thats for later.</div><div>Have a great week! </div></div></div>
    </content>
    <updated>2013-07-21T06:15:00Z</updated>
    <published>2013-07-21T06:15:00Z</published>
    <author>
      <name>Sachin Joglekar</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/106302547764750990775</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5472769892551526876</id>
      <author>
        <name>Sachin Joglekar</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://codesachin.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5472769892551526876/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>-Sachin Joglekar-</subtitle>
      <title>Dream. Think. Code.</title>
      <updated>2013-11-30T11:34:23Z</updated>
    </source>
  </entry>
</feed>
