<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet Example</title>
  <updated>2011-05-22T03:04:45Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Debian User</name>
    <email>nobody@localhost</email>
  </author>
  <id>http://planet.example.org/atom.xml</id>
  <link href="http://planet.example.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://planet.example.org/" rel="alternate"/>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=755</id>
    <link href="http://fseoane.net/blog/2011/handwritten-digits-and-locally-linear-embedding/" rel="alternate" type="text/html"/>
    <title>Handwritten digits and Locally Linear Embedding</title>
    <summary>I decided to test my new Locally Linear Embedding (LLE) implementation against a real dataset. At first I didn’t think this would turn out very well, since LLE seems to be somewhat fragile, yielding largely different results for small differences in parameters such as number of neighbors or tolerance, but as it turns out, results [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I decided to test my <a href="http://fseoane.net/blog/2011/locally-linear-embedding-and-sparse-eigensolvers/">new Locally Linear Embedding (LLE)</a> implementation against a real dataset. At first I didn’t think this would turn out very well, since LLE seems to be somewhat fragile, yielding largely different results for small differences in parameters such as number of neighbors or tolerance, but as it turns out, results are not bad at all.</p>
<p>The idea is to take a handwritten digit, stored as a 8×8 pixel image and flatten it into a an array of 8×8 = 64 floating-point values.</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/05/digits_transformation1.png"><img alt="" class="aligncenter size-full wp-image-786" src="http://fseoane.net/blog/wp-content/uploads/2011/05/digits_transformation1.png" title="digits_transformation" width="350"/></a></p>
<p>Then each handwritten digit can be seen as a point in a 64-dimensional space. Of course, visualizing in 64-dimensional spaces is not easy, and that’s where <a href="http://fseoane.net/blog/2011/locally-linear-embedding-and-sparse-eigensolvers/">Locally Linear Embedding</a> comes handy. We’ll use this method to reduce the dimension from 64 to 2 with the hope of preserving most of the underlying manifold structure. The following is a plot of the handwritten digits {0, 1, 2, 3, 4} after performing locally linear embedding. As you can see, some groups are nicely clustered, notably the 0 is isolated while other like {4, 5} are closer, precisely those that are more similar.</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/05/Picture-1.png"><img alt="" class="aligncenter size-full wp-image-757" src="http://fseoane.net/blog/wp-content/uploads/2011/05/Picture-1.png" title="Digitst and Locally Linear Embedding" width="500"/></a></p>
<p>Source code for this example <a href="https://gist.github.com/954815">can be found here</a> but relies on my manifold branch of scikit-learn. </p></div>
    </content>
    <updated>2011-05-04T08:46:47Z</updated>
    <category term="General"/>
    <category term="Python"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=845</id>
    <link href="http://asmeurersympy.wordpress.com/2011/04/27/advice-for-future-prospective-gsoc-students/" rel="alternate" type="text/html"/>
    <title>Advice for Future Prospective GSoC Students</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So now that Google has announced the results of Google Summer of Code, I want to write down some general things that I noticed when reviewing applications while they are still fresh in my mind. Note that none of these things apply to any specific student who applied to SymPy. Many of these things are [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=845&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So now that Google has <a href="http://asmeurersympy.wordpress.com/2011/04/27/accepted-gsoc-students-announced/">announced the results</a> of Google Summer of Code, I want to write down some general things that I noticed when reviewing applications while they are still fresh in my mind.  </p>
<p>Note that none of these things apply to any specific student who applied to SymPy.  Many of these things are things that I noticed that people did right.  </p>
<p>Most of this should apply to any organization, though some of them might be SymPy specific, since that is the lens that I am viewing this through.  These aren’t really in any particular order.  </p>
<ol>
<li><strong>Fulfill all the requirements.</strong> This is kind of a no brainer, and as it turns out, almost all students who applied to SymPy did indeed do this.  For SymPy, this means that you should submit a patch by the deadline. Other organizations might have other requirements.  If you don’t fulfill the requirements, it doesn’t matter how good your application is; you won’t be eligible and hence won’t be accepted.</li>
<li><strong>Discuss your proposal on the mailing list.</strong> A proposal submitted out of the blue has a poor chance of being accepted.  First, we like to see that you will be involved in the community, and if you don’t discuss the proposal at all, it shows badly.  Second, it is very likely that we will not like something about your proposal, or will have questions (see the next point).  If you don’t discuss it at all, you are making a shot in the dark.  Even if the proposal is good, it could be rejected simply because it’s not something that we feel that we want. And you don’t want to accidentally submit a proposal to do something that has already been implemented.
<p>It’s important to discuss it on the public mailing list, not just with a specific mentor.  Even if that mentor is the expert on your project subject and would likely be the person to mentor you if you are accepted, you need to remember that all the mentors review the proposals and decide who to accept.   Also, this year for SymPy, we are trying to put an emphasis on students doing things publicly with the whole community, instead of just with their mentors.</p></li>
<li><strong>Ask the mentors for advice on your proposal, and then follow it.</strong> Again, most students who applied to SymPy were good on this one too.  We request that all students put their proposals on the GitHub wiki, so that the mentors can take a look at them and give advice.  If you feel uncomfortable putting your application in a public place, send it to some mentors privately.
<p>But the most important thing here is to actually follow any advice that the mentors give you.  If they tell you that you should expand your timeline section, you should expand your timeline section.  If they tell you you should discuss the implementation more, you should do that (see the next point).  If you don’t follow the advice, it looks to the mentor like you didn’t listen to him, which doesn’t make you appear like a good candidate for acceptance.  Also, the things that they tell you to improve will tend to be the things that they will look at when reviewing your proposal.  </p></li>
<li><strong>Don’t just discuss the theory.</strong> I suspect that this may be more of a problem with SymPy than for other organizations, because SymPy is very math based, so many of the proposals to SymPy involve complex mathematics. One of the biggest issues I saw in proposals was that students discussed the theory of what they wanted to implement too much and not enough of the actual implementation. It’s easy to do this, but discussing the implementation is actually more important than the theory of what you want to do.
<p>An easy way to do this is to give a “fake” example session showing how your code might work after it is completed.  For example, if you were writing a proposal for a PDE solver, you might include something like</p>
<pre class="brush: python;">&gt;&gt;&gt; u = Function('u')
&gt;&gt;&gt; # Solve the Heat Equation in one dimension
&gt;&gt;&gt; pdesolve(u(x, t).diff(t) - c**2*u(x, t).diff(x, x), u(x), {u(x, 0):f(x), u(0, t):0, u(0, pi):0}, method='separation of variables')
2/pi*Sum(Integral(f(x)*sin(n*x), x)*sin(n*x)*exp(-n**2*c**2*t), (n, 1, oo))
&gt;&gt;&gt; # Use Fourier Transforms to get d'Alembert's Solution to the Wave Equation
&gt;&gt;&gt; …
</pre>
<p>in your proposal.  Just saying “I plan to implement solvers for PDEs using separation of variables and Fourier Transforms” tells us only what we already know, which is that you can solve PDEs using separation of variables and Fourier Transforms.  What we don’t know is how it will look.  The above example shows how the PDE, initial/boundary conditions, and method are entered by the user, and how the output looks.  </p>
<p>A more advanced thing that you can do is to give actual prototype code. This is not required, but it can show that you are dedicated enough to get a start, and can demonstrate how things will work for more complicated projects.</p></li>
<li><strong>But theory is important too.</strong> This might also be a problem more in SymPy, but maybe not.  The mathematical backgrounds of SymPy developers ranges quite a bit.  For example, I know a lot about the complicated Risch Algorithm for symbolic integration that the majority of people (even among SymPy developers) know hardly anything about, but I know basically nothing about quantum mechanics.  So that more mentors can have a chance to even have a clue about what you are talking about when they are reviewing your proposal, you should try to explain things to a general audience, at least in the introduction of your proposal.  It can also help to explain why your project would be useful, so that even if someone doesn’t know what it is, they can see why it would be nice to have.  This doesn’t mean that you should sacrifice details by dumbing everything down.  There’s a pretty good chance that someone will understand what you are talking about in your specifics, but you should also explain things from the other end.
<p>If you are implementing a specific algorithm, maybe you could give a brief overview of the algorithm.  This will not only explain things to the mentors who might not know how it works, but also it shows that you know how it works too.</p></li>
<li><strong>Be involved in the community.</strong> We understand that students have classes during the application period, but the more you involve yourself in the community beyond the patch requirement (or whatever requirement some other org might have), the better your chances of being accepted. Every org has to take risks accepting students, because there is always the chance that they will fail.  This is not good for anyone: the student doesn’t get paid the full stipend and the organization looses not only the project that would have been implemented, but also the slot that they could have given to someone who wouldn’t have failed.  Involving yourself in the community early is the best way to show the community that you are a low risk for failure.</li>
<li><strong>The proposal is the most important thing.</strong> But don’t assume that just because you are involved in the community that you will be accepted.  The most important thing is the proposal.  If you don’t have a good proposal, we will not even consider the rest of your activity.  So you should focus most of your energy on writing a high quality proposal.  The quality of the patch and your involvement in the community are secondary considerations after the quality of the proposal.  These might be used to narrow down the list of good proposals to fit the number of slots Google gives us and the number of mentors we have available, but the first phase is always to narrow down the list based on the quality of the proposals.</li>
<li><strong>Use a consistant nickname, preferably one based on your real name.</strong>  This is something that I think most people do not realize.  If your real name is John Smith, and your IRC nick, GitHub handle, Google Code handle, and GSoC link_id are all jsmith, it makes it very easy for me to associate in my mind: “OK, that person who just submitted that patch is the same person I talked to on IRC last week, and I remember reading his proposal on google-melange.com.”  But if your real name is John Smith, your IRC nick is freebird, your GitHub handle is mr.nice, your Google Code handle is smithy, and your link_id on google-melange.com is johnhsmith, I can have a very hard time associating your work in one place with your work in another (my apologies if those are anybodys’ real nicknames; I just made them up to make the point here).  Maybe you actually have been very active in the IRC channel, but it is hard for me to realize that based on your nick vs. your real name.  This year for SymPy, we had 25 applications by 25 students.  None of these students were members of the SymPy community a few months ago.  It’s very hard for the other mentors and I to keep track of which nicknames associate with which people, and in the end, we may mistakenly believe that you haven’t done as much as you really have.  Your best bet is to use one nickname everywhere, and to make it based on your real name, so that we can easily tell who it is even based on the nickname.  If your name is common enough that no one permutation is guaranteed to be available everywhere, at least try to be consistent with your nickname, or just use different permutations of your real name based on what site you are on.</li>
</ol>
<p>That’s all I can think of for now.  I kind of wish I had thought of two more, so I could make it “Ten pieces of advice,” but whatever.  If any SymPy mentors or mentors from other projects feel that something is missing, I would love to hear about it in the comments.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/845/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/845/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/845/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/845/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/845/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/845/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/845/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/845/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/845/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/845/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/845/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/845/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/845/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/845/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=845&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-04-27T21:15:54Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-05-22T03:04:11Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-2520472460430880330.post-775661391652616507</id>
    <link href="http://sympy.blogspot.com/feeds/775661391652616507/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=2520472460430880330&amp;postID=775661391652616507" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/775661391652616507" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/775661391652616507" rel="self" type="application/atom+xml"/>
    <link href="http://sympy.blogspot.com/2011/04/accepted-gsoc-students-announced.html" rel="alternate" type="text/html"/>
    <title>Accepted GSoC Students Announced</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div>So Google has announced the results of <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2011">Google Summer of Code</a>. I am proud to announce that we got nine slots from Google.  The following projects have been accepted: </div><div><br/></div><div><em>(Project, Student, Mentor, Link to proposal on the wiki) </em></div><em/><div/><div><ul><li>Definite Integration using Meijer G-functions, Tom Bachmann, Aaron Meurer, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Tom-Bachmann%3A-Definite-Integration">Proposal</a></li><li>PyDy, Gilbert Gede, Luke Peterson, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Gilbert-Gede%3A-PyDy">Proposal</a></li><li>Position and Momentum Bases for Quantum Mechanics, Tomo Lazovich, Brian Granger, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Tomo-Lazovich%3A-Position-and-Momentum-Bases-for-QM">Proposal</a></li><li>Combinatorics package for Sympy, Saptarshi Mandal, Christian Muise, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Saptarshi-Mandal">Proposal</a></li><li>Symbolic Linear Algebra, Sherjil Ozair, Vinzent Steinberg, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Sherjil-Ozair:-Symbolic-Linear-Algebra">Proposal</a></li><li>Porting to Python 3, Vladimir Perić, Ronan Lamy, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application%3A-Vladimir-Peri%C4%87%3A-Porting-to-Python-3">Proposal</a></li><li>SymPy Stats: Random Variables, Matthew Rocklin, Andy Terrel, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Matthew-Rocklin%3A-Random-Variables">Proposal</a></li><li>Symbolic Clebsch-Gordon coefficients/Wigner symbols and Implementing Addition of Spin Angular Momenta, Sean Vig, Ondřej Čertík, <a href="https://github.com/sympy/sympy/wiki/GSoC%202011%20Application%20Sean%20Vig">Proposal</a></li><li>Implementing F5, Jeremias Yehdegho, Mateusz Paprocki, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Jeremias-Yehdegho%3A-Implementing-F5">Proposal</a></li></ul></div><div><br/></div><div>Join me in congratulating these students on their acceptance.   </div><div>In case you don't know for some reason, Google Summer of Code is a program where Google pays students to write code for open source projects.  SymPy was accepted as a mentoring organization this year.  The goal of the summer is to help the students learn new skills, in particular in our case: </div><div><ul><li> contributing to open source </li><li> working with the community </li><li> learn git, pull requests, reviews </li><li> teach them how to review other's people patches </li><li> do useful work for SymPy </li><li> have fun, and encourage the students to stay around </li></ul></div><div><br/></div><div>Also see the <a href="http://sympy.blogspot.com/2011/03/sympy-is-google-summer-of-code-2011.html">previous blog post</a> about it.</div><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/2520472460430880330-775661391652616507?l=sympy.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-04-27T19:46:21Z</updated>
    <published>2011-04-27T19:41:00Z</published>
    <author>
      <name>Aaron Meurer</name>
      <email>asmeurer@gmail.com</email>
      <uri>http://www.blogger.com/profile/07681610358074038422</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-2520472460430880330</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02845032202161204018</uri>
      </author>
      <link href="http://sympy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://sympy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>Official SymPy blog</subtitle>
      <title>Official SymPy blog</title>
      <updated>2011-04-27T19:48:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=838</id>
    <link href="http://asmeurersympy.wordpress.com/2011/04/27/accepted-gsoc-students-announced/" rel="alternate" type="text/html"/>
    <title>Accepted GSoC Students Announced</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">(Cross posted on the Official SymPy Blog) So Google has announced the results of Google Summer of Code. I am proud to announce that we got nine slots from Google. The following projects have been accepted: (Project, Student, Mentor, Link to proposal on the wiki) - Definite Integration using Meijer G-functions, Tom Bachmann, Aaron Meurer, [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=838&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><em>(Cross posted on the <a href="http://sympy.blogspot.com/2011/04/accepted-gsoc-students-announced.html">Official SymPy Blog</a>)</em><br/>
So Google has announced the results of <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2011">Google Summer of Code</a>. I am proud to announce that we got nine slots from Google.  The following projects have been accepted: </p>
<p><em>(Project, Student, Mentor, Link to proposal on the wiki)<br/>
</em>- Definite Integration using Meijer G-functions, Tom Bachmann, Aaron Meurer, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Tom-Bachmann%3A-Definite-Integration">Proposal</a><br/>
- PyDy, Gilbert Gede, Luke Peterson, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Gilbert-Gede%3A-PyDy">Proposal</a><br/>
- Position and Momentum Bases for Quantum Mechanics, Tomo Lazovich, Brian Granger, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Tomo-Lazovich%3A-Position-and-Momentum-Bases-for-QM">Proposal</a><br/>
- Combinatorics package for Sympy, Saptarshi Mandal, Christian Muise, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Saptarshi-Mandal">Proposal</a><br/>
- Symbolic Linear Algebra, Sherjil Ozair, Vinzent Steinberg, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Sherjil-Ozair:-Symbolic-Linear-Algebra">Proposal</a><br/>
- Porting to Python 3, Vladimir Perić, Ronan Lamy, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application%3A-Vladimir-Peri&#x107;%3A-Porting-to-Python-3">Proposal</a><br/>
- SymPy Stats: Random Variables, Matthew Rocklin, Andy Terrel, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Matthew-Rocklin%3A-Random-Variables">Proposal</a><br/>
- Symbolic Clebsch-Gordon coefficients/Wigner symbols and Implementing Addition of Spin Angular Momenta, Sean Vig, Ondřej Čertík, <a href="https://github.com/sympy/sympy/wiki/GSoC%202011%20Application%20Sean%20Vig">Proposal</a><br/>
- Implementing F5, Jeremias Yehdegho, Mateusz Paprocki, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Jeremias-Yehdegho%3A-Implementing-F5">Proposal</a></p>
<p>Join me in congratulating these students on their acceptance.<br/>
In case you don’t know for some reason, Google Summer of Code is a program where Google pays students to write code for open source projects.  SymPy was accepted as a mentoring organization this year.  The goal of the summer is to help the students learn new skills, in particular in our case:<br/>
* contributing to open source<br/>
* working with the community<br/>
* learn git, pull requests, reviews<br/>
* teach them how to review other’s people patches<br/>
* do useful work for SymPy<br/>
* have fun, and encourage the students to stay around </p>
<p>Also see my <a href="http://asmeurersympy.wordpress.com/2011/03/18/sympy-is-a-google-summer-of-code-2011-mentoring-organization/">previous blog post</a> about it.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/838/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/838/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/838/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/838/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/838/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/838/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/838/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/838/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/838/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/838/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/838/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/838/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/838/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/838/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=838&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-04-27T19:45:06Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-05-22T03:04:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=546</id>
    <link href="http://fseoane.net/blog/2011/low-level-routines-for-support-vector-machines/" rel="alternate" type="text/html"/>
    <title>Low-level routines for Support Vector Machines</title>
    <summary>I’ve been working lately in improving the low-level API of the libsvm bindings in scikit-learn. The goal is to provide an API that encourages an efficient use of these libraries for expert users. These are methods that have lower overhead than the object-oriented interface as they are closer to the C implementation, but do not [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been working lately in improving the low-level API of the libsvm bindings in scikit-learn. The goal is to provide an API that encourages an efficient use of these libraries for expert users.</p>
<p>These are methods that have lower overhead than the <a href="http://scikit-learn.sourceforge.net/modules/svm.html">object-oriented interface</a> as they are closer to the C implementation, but do not have an interface as polished. Here, all parameters are expected to be of the correct type, and submitting one of the wrong type will make the function exit immediately with a ValueError. For instance, input data is expected to be of type float64, even for class labels!</p>
<p>Another peculiarity of these methods is that they only take and return numpy arrays. No custom objects, all method take and return arrays. That looks something like:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style=""><span style="color: #ff7700; font-weight: bold;">import</span> numpy <span style="color: #ff7700; font-weight: bold;">as</span> np<br/>
<span style="color: #ff7700; font-weight: bold;">from</span> scikits.<span style="color: black;">learn</span> <span style="color: #ff7700; font-weight: bold;">import</span> svm, datasets<br/>
<br/>
iris = datasets.<span style="color: black;">load_iris</span><span style="color: black;">(</span><span style="color: black;">)</span><br/>
iris.<span style="color: black;">target</span> = iris.<span style="color: black;">target</span>.<span style="color: black;">astype</span><span style="color: black;">(</span>np.<span style="color: black;">float64</span><span style="color: black;">)</span><br/>
<br/>
learned_params = svm.<span style="color: black;">libsvm</span>.<span style="color: black;">fit</span><span style="color: black;">(</span>iris.<span style="color: black;">data</span>, iris.<span style="color: black;">target</span><span style="color: black;">)</span><br/>
pred = svm.<span style="color: black;">libsvm</span>.<span style="color: black;">predict</span><span style="color: black;">(</span>iris.<span style="color: black;">data</span>, <span style="color: #66cc66;">*</span>learned_params<span style="color: black;">)</span></div></div>
<p>Here, I used the fact that the parameters returned by <a href="http://scikit-learn.sourceforge.net/dev/modules/generated/scikits.learn.svm.libsvm.fit.html">libsvm.fit</a> can just passed to <a href="http://scikit-learn.sourceforge.net/dev/modules/generated/scikits.learn.svm.libsvm.predict.html">libsvm.predict</a>. However, any other given parameters should be manually passed to both method.</p></div>
    </content>
    <updated>2011-04-27T13:27:17Z</updated>
    <category term="General"/>
    <category term="Python"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=587</id>
    <link href="http://fseoane.net/blog/2011/new-get_blas_funcs-in-scipy-linalg/" rel="alternate" type="text/html"/>
    <title>new get_blas_funcs in scipy.linalg</title>
    <summary>Today got merged some changes I made to function scipy.linalg.get_blas_funcs(). The main enhacement is that get_blas_funcs() now also accepts a single string as input parameter and a dtype, so that fetching the BLAS function for a specific type becomes more natural. For example, fetching the gemm routine for a single-precision complex number now looks like [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today got merged some changes I made to function scipy.linalg.get_blas_funcs(). The main enhacement is that get_blas_funcs() now also accepts a single string as input parameter and a dtype, so that fetching the BLAS function for a specific type becomes more natural. </p>
<p>For example, fetching the gemm routine for a single-precision complex number now looks like this:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">gemm = scipy.<span style="color: black;">linalg</span>.<span style="color: black;">get_blas_funcs</span><span style="color: black;">(</span><span style="color: #483d8b;">'gemm'</span>, dtype=np.<span style="color: black;">complex64</span><span style="color: black;">)</span></div></div>
<p>compared to the clumsy old syntax:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">X = np.<span style="color: black;">empty</span><span style="color: black;">(</span><span style="color: #ff4500;">0</span>, dtype=np.<span style="color: black;">complex64</span><span style="color: black;">)</span><br/>
gemm, = scipy.<span style="color: black;">linalg</span>.<span style="color: black;">get_blas_funcs</span><span style="color: black;">(</span><span style="color: black;">(</span><span style="color: #483d8b;">'gemm'</span>,<span style="color: black;">)</span>, <span style="color: black;">(</span>X,<span style="color: black;">)</span><span style="color: black;">)</span></div></div></div>
    </content>
    <updated>2011-04-23T16:24:17Z</updated>
    <category term="General"/>
    <category term="Python"/>
    <category term="scipy"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=597</id>
    <link href="http://fseoane.net/blog/2011/locally-linear-embedding-and-sparse-eigensolvers/" rel="alternate" type="text/html"/>
    <title>Locally linear embedding and sparse eigensolvers</title>
    <summary>I’ve been working for some time on implementing a locally linear embedding algorithm for the upcoming manifold module in scikit-learn. While several implementations of this algorithm exist in Python, as far as I know none of them is able to use a sparse eigensolver in the last step of the algorithm, falling back to dense [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been working for some time on implementing a <a href="http://www.cs.nyu.edu/~roweis/lle/algorithm.html">locally linear embedding</a> algorithm for the upcoming manifold module in scikit-learn. </p>
<p>While several implementations of this algorithm exist in Python, as far as I know none of them is able to use a sparse eigensolver in the last step of the algorithm, falling back to dense routines causing a huge overhead in this step. </p>
<p>To overcome this, my first implementation used <code>scipy.sparse.linalg.eigsh</code>, which is a sparse eigensolver shipped by scipy and based on ARPACK. However, this approach converged extremely slowly, with timings that exceeded largely those of dense solvers.</p>
<p>Recently I found a way that seems to work reasonably well, with timings that win by a factor of 5 on the swiss roll existing routines. This code is able to solve the problem making use of a preconditioner computed by <a href="http://code.google.com/p/pyamg/">PyAMG</a>.</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style=""><span style="color: #ff7700; font-weight: bold;">import</span> numpy <span style="color: #ff7700; font-weight: bold;">as</span> np<br/>
<span style="color: #ff7700; font-weight: bold;">from</span> scipy.<span style="color: black;">sparse</span> <span style="color: #ff7700; font-weight: bold;">import</span> linalg, eye<br/>
<span style="color: #ff7700; font-weight: bold;">from</span> pyamg <span style="color: #ff7700; font-weight: bold;">import</span> smoothed_aggregation_solver<br/>
<span style="color: #ff7700; font-weight: bold;">from</span> scikits.<span style="color: black;">learn</span> <span style="color: #ff7700; font-weight: bold;">import</span> neighbors<br/>
<br/>
<span style="color: #ff7700; font-weight: bold;">def</span> locally_linear_embedding<span style="color: black;">(</span>X, n_neighbors, out_dim, tol=1e-6, max_iter=<span style="color: #ff4500;">200</span><span style="color: black;">)</span>:<br/>
    W = neighbors.<span style="color: black;">kneighbors_graph</span><span style="color: black;">(</span><br/>
        X, n_neighbors=n_neighbors, mode=<span style="color: #483d8b;">'barycenter'</span><span style="color: black;">)</span><br/>
<br/>
    <span style="color: #808080; font-style: italic;"># M = (I-W)' (I-W)</span><br/>
    A = eye<span style="color: black;">(</span><span style="color: #66cc66;">*</span>W.<span style="color: black;">shape</span>, format=W.<span style="color: black;">format</span><span style="color: black;">)</span> - W<br/>
    A = <span style="color: black;">(</span>A.<span style="color: black;">T</span><span style="color: black;">)</span>.<span style="color: black;">dot</span><span style="color: black;">(</span>A<span style="color: black;">)</span>.<span style="color: black;">tocsr</span><span style="color: black;">(</span><span style="color: black;">)</span><br/>
<br/>
    <span style="color: #808080; font-style: italic;"># initial approximation to the eigenvectors</span><br/>
    X = np.<span style="color: #dc143c;">random</span>.<span style="color: black;">rand</span><span style="color: black;">(</span>W.<span style="color: black;">shape</span><span style="color: black;">[</span><span style="color: #ff4500;">0</span><span style="color: black;">]</span>, out_dim<span style="color: black;">)</span><br/>
    ml = smoothed_aggregation_solver<span style="color: black;">(</span>A, symmetry=<span style="color: #483d8b;">'symmetric'</span><span style="color: black;">)</span><br/>
    prec = ml.<span style="color: black;">aspreconditioner</span><span style="color: black;">(</span><span style="color: black;">)</span><br/>
<br/>
    <span style="color: #808080; font-style: italic;"># compute eigenvalues and eigenvectors with LOBPCG</span><br/>
    eigen_values, eigen_vectors = linalg.<span style="color: black;">lobpcg</span><span style="color: black;">(</span><br/>
        A, X, M=prec, largest=<span style="color: #008000;">False</span>, tol=tol, maxiter=max_iter<span style="color: black;">)</span><br/>
<br/>
    index = np.<span style="color: black;">argsort</span><span style="color: black;">(</span>eigen_values<span style="color: black;">)</span><br/>
    <span style="color: #ff7700; font-weight: bold;">return</span> eigen_vectors<span style="color: black;">[</span>:, index<span style="color: black;">]</span>, np.<span style="color: #008000;">sum</span><span style="color: black;">(</span>eigen_values<span style="color: black;">)</span></div></div>
<p>Full code for this algorithm applied to the swiss roll can be found here <a href="https://gist.github.com/934363">here</a>, and I hope it will soon be part of <a href="http://scikit-learn.sourceforge.net/">scikit-learn</a>.</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/04/lle1.png"><img alt="" class="aligncenter size-large wp-image-731" src="http://fseoane.net/blog/wp-content/uploads/2011/04/lle1-690x1024.png" title="Locally linear embedding on the swiss roll" width="500"/></a></p></div>
    </content>
    <updated>2011-04-21T12:28:17Z</updated>
    <category term="General"/>
    <category term="Python"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=694</id>
    <link href="http://fseoane.net/blog/2011/scikits-learn-is-now-part-of-pythonxy/" rel="alternate" type="text/html"/>
    <title>scikits.learn is now part of pythonxy</title>
    <summary>The guys behind pythonxy have been kind enough to add the latest scikit-learn as an additional plugin for their distribution. Having scikit-learn being in both pythonxy and EPD will hopefully make it easier to use for Windows users. For now I will continue to make windows precompiled binaries, but pythonxy users finally have a package [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The guys behind <a href="http://www.pythonxy.com/">pythonxy</a> have been kind enough to add the latest scikit-learn as an <a href="http://code.google.com/p/pythonxy/wiki/AdditionalPlugins">additional plugin</a> for their distribution. Having scikit-learn being in both <a href="http://www.pythonxy.com/">pythonxy</a> and <a href="http://www.enthought.com/products/epd.php">EPD</a> will hopefully make it easier to use for Windows users.</p>
<p><img alt="pythonxy-logo" class="alignnone size-full wp-image-695" height="70" src="http://fseoane.net/blog/wp-content/uploads/2011/04/pythonxy-logo.png" title="pythonxy-logo" width="161"/></p>
<p>For now I will continue to make windows precompiled binaries, but pythonxy users finally have a package that is guaranteed to work with their installation.</p></div>
    </content>
    <updated>2011-04-20T11:48:45Z</updated>
    <category term="General"/>
    <category term="Python"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-4754734402679928849.post-7530661868168314621</id>
    <link href="http://fredrik-j.blogspot.com/feeds/7530661868168314621/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=4754734402679928849&amp;postID=7530661868168314621" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/7530661868168314621" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/7530661868168314621" rel="self" type="application/atom+xml"/>
    <link href="http://fredrik-j.blogspot.com/2011/03/100-mpmath-one-liners-for-pi.html" rel="alternate" type="text/html"/>
    <title>100 mpmath one-liners for pi</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Since it's pi day today, I thought I'd share a list of mpmath one-liners for computing the value of pi to high precision using various representations in terms of special functions, infinite series, integrals, etc. Most of them can already be found as doctest examples in some form in the mpmath documentation.<br/><br/>A few of the formulas explicitly involve pi. Using those to calculate pi is rather <i>circular</i> (!), though a few of them could still be used for computing pi using numerical root-finding. In any case, most of the formulas are circular even when pi doesn't appear explicitly since mpmath is likely using its value internally. In any <i>further</i> case, the majority of the formulas are not efficient for computing pi to very high precision (at least as written). Still, ~50 digits is no problem. Enjoy!<br/><br/><pre><br/>from mpmath import *<br/>mp.dps = 50; mp.pretty = True<br/><br/>+pi<br/>180*degree<br/>4*atan(1)<br/>16*acot(5)-4*acot(239)<br/>48*acot(49)+128*acot(57)-20*acot(239)+48*acot(110443)<br/>chop(2*j*log((1-j)/(1+j)))<br/>chop(-2j*asinh(1j))<br/>chop(ci(-inf)/1j)<br/>gamma(0.5)**2<br/>beta(0.5,0.5)<br/>(2/diff(erf, 0))**2<br/>findroot(sin, 3)<br/>findroot(cos, 1)*2<br/>chop(-2j*lambertw(-pi/2))<br/>besseljzero(0.5,1)<br/>3*sqrt(3)/2/hyp2f1((-1,3),(1,3),1,1)<br/>8/(hyp2f1(0.5,0.5,1,0.5)*gamma(0.75)/gamma(1.25))**2<br/>4*(hyp1f2(1,1.5,1,1) / struvel(-0.5, 2))**2<br/>1/meijerg([[],[]], [[0],[0.5]], 0)**2<br/>(meijerg([[],[2]], [[1,1.5],[]], 1, 0.5) / erfc(1))**2<br/>(1-e) / meijerg([[1],[0.5]], [[1],[0.5,0]], 1)<br/>sqrt(psi(1,0.25)-8*catalan)<br/>elliprc(1,2)*4<br/>elliprg(0,1,1)*4<br/>2*agm(1,0.5)*ellipk(0.75)<br/>(gamma(0.75)*jtheta(3,0,exp(-pi)))**4<br/>cbrt(gamma(0.25)**4*agm(1,sqrt(2))**2/8)<br/>sqrt(6*zeta(2))<br/>sqrt(6*(zeta(2,3)+5./4))<br/>sqrt(zeta(2,(3,4))+8*catalan)<br/>exp(-2*zeta(0,1,1))/2<br/>sqrt(12*altzeta(2))<br/>4*dirichlet(1,[0,1,0,-1])<br/>2*catalan/dirichlet(-1,[0,1,0,-1],1)<br/>exp(-dirichlet(0,[0,1,0,-1],1))*gamma(0.25)**2/(2*sqrt(2))<br/>sqrt(7*zeta(3)/(4*diff(lerchphi, (-1,-2,1), (0,1,0))))<br/>sqrt(-12*polylog(2,-1))<br/>sqrt(6*log(2)**2+12*polylog(2,0.5))<br/>chop(root(-81j*(polylog(3,root(1,3,1))+4*zeta(3)/9)/2,3))<br/>2*clsin(1,1)+1<br/>(3+sqrt(3)*sqrt(1+8*clcos(2,1)))/2<br/>root(2,6)*sqrt(e)/(glaisher**6*barnesg(0.5)**4)<br/>nsum(lambda k: 4*(-1)**(k+1)/(2*k-1), [1,inf])<br/>nsum(lambda k: (3**k-1)/4**k*zeta(k+1), [1,inf])<br/>nsum(lambda k: 8/(2*k-1)**2, [1,inf])**0.5<br/>nsum(lambda k: 2*fac(k)/fac2(2*k+1), [0,inf])<br/>nsum(lambda k: fac(k)**2/fac(2*k+1), [0,inf])*3*sqrt(3)/2<br/>nsum(lambda k: fac(k)**2/(phi**(2*k+1)*fac(2*k+1)), [0,inf])*(5*sqrt(phi+2))/2<br/>nsum(lambda k: (4/(8*k+1)-2/(8*k+4)-1/(8*k+5)-1/(8*k+6))/16**k, [0,inf])<br/>2/nsum(lambda k: (-1)**k*(4*k+1)*(fac2(2*k-1)/fac2(2*k))**3, [0,inf])<br/>nsum(lambda k: 72/(k*expm1(k*pi))-96/(k*expm1(2*pi*k))+24/(k*expm1(4*pi*k)), [1,inf])<br/>1/nsum(lambda k: binomial(2*k,k)**3*(42*k+5)/2**(12*k+4), [0,inf])<br/>4/nsum(lambda k: (-1)**k*(1123+21460*k)*fac2(2*k-1)*fac2(4*k-1)/(882**(2*k+1)*32**k*fac(k)**3), [0,inf])<br/>9801/sqrt(8)/nsum(lambda k: fac(4*k)*(1103+26390*k)/(fac(k)**4*396**(4*k)), [0,inf])<br/>426880*sqrt(10005)/nsum(lambda k: (-1)**k*fac(6*k)*(13591409+545140134*k)/(fac(k)**3*fac(3*k)*(640320**3)**k), [0,inf])<br/>4/nsum(lambda k: (6*k+1)*rf(0.5,k)**3/(4**k*fac(k)**3), [0,inf])<br/>(ln(8)+sqrt(48*nsum(lambda m,n: (-1)**(m+n)/(m**2+n**2), [1,inf],[1,inf]) + 9*log(2)**2))/2<br/>-nsum(lambda x,y: (-1)**(x+y)/(x**2+y**2), [-inf,inf], [-inf,inf], ignore=True)/ln2<br/>2*nsum(lambda k: sin(k)/k, [1,inf])+1<br/>quad(lambda x: 2/(x**2+1), [0,inf])<br/>quad(lambda x: exp(-x**2), [-inf,inf])**2<br/>2*quad(lambda x: sqrt(1-x**2), [-1,1])<br/>chop(quad(lambda z: 1/(2j*z), [1,j,-1,-j,1]))<br/>3*(4*log(2+sqrt(3))-quad(lambda x,y: 1/sqrt(1+x**2+y**2), [-1,1],[-1,1]))/2<br/>sqrt(8*quad(lambda x,y: 1/(1-(x*y)**2), [0,1],[0,1]))<br/>sqrt(6*quad(lambda x,y: 1/(1-x*y), [0,1],[0,1]))<br/>sqrt(6*quad(lambda x: x/expm1(x), [0,inf]))<br/>quad(lambda x: (16*x-16)/(x**4-2*x**3+4*x-4), [0,1])<br/>quad(lambda x: sqrt(x-x**2), [0,0.25])*24+3*sqrt(3)/4<br/>mpf(22)/7 - quad(lambda x: x**4*(1-x)**4/(1+x**2), [0,1])<br/>mpf(355)/113 - quad(lambda x: x**8*(1-x)**8*(25+816*x**2)/(1+x**2), [0,1])/3164<br/>2*quadosc(lambda x: sin(x)/x, [0,inf], omega=1)<br/>40*quadosc(lambda x: sin(x)**6/x**6, [0,inf], omega=1)/11<br/>e*quadosc(lambda x: cos(x)/(1+x**2), [-inf,inf], omega=1)<br/>8*quadosc(lambda x: cos(x**2), [0,inf], zeros=lambda n: sqrt(n))**2<br/>2*quadosc(lambda x: sin(exp(x)), [1,inf], zeros=ln)+2*si(e)<br/>exp(2*quad(loggamma, [0,1]))/2<br/>2*nprod(lambda k: sec(pi/2**k), [2,inf])<br/>s=lambda k: sqrt(0.5+s(k-1)/2) if k else 0; 2/nprod(s, [1,inf])<br/>s=lambda k: sqrt(2+s(k-1)) if k else 0; limit(lambda k: sqrt(2-s(k))*2**(k+1), inf)<br/>2*nprod(lambda k: (2*k)**2/((2*k-1)*(2*k+1)), [1,inf])<br/>2*nprod(lambda k: (4*k**2)/(4*k**2-1), [1, inf])<br/>sqrt(6*ln(nprod(lambda k: exp(1/k**2), [1,inf])))<br/>nprod(lambda k: (k**2-1)/(k**2+1), [2,inf])/csch(pi)<br/>nprod(lambda k: (k**2-1)/(k**2+1), [2,inf])*sinh(pi)<br/>nprod(lambda k: (k**4-1)/(k**4+1), [2, inf])*(cosh(sqrt(2)*pi)-cos(sqrt(2)*pi))/sinh(pi)<br/>sinh(pi)/nprod(lambda k: (1-1/k**4), [2, inf])/4<br/>sinh(pi)/nprod(lambda k: (1+1/k**2), [2, inf])/2<br/>(exp(1+euler/2)/nprod(lambda n: (1+1/n)**n * exp(1/(2*n)-1), [1, inf]))**2/2<br/>3*sqrt(2)*cosh(pi*sqrt(3)/2)**2*csch(pi*sqrt(2))/nprod(lambda k: (1+1/k+1/k**2)**2/(1+2/k+3/k**2), [1, inf])<br/>2/e*nprod(lambda k: (1+2/k)**((-1)**(k+1)*k), [1,inf])<br/>limit(lambda k: 16**k/(k*binomial(2*k,k)**2), inf)<br/>limit(lambda x: 4*x*hyp1f2(0.5,1.5,1.5,-x**2), inf)<br/>1/log(limit(lambda n: nprod(lambda k: pi/(2*atan(k)), [n,2*n]), inf),4)<br/>limit(lambda k: 2**(4*k+1)*fac(k)**4/(2*k+1)/fac(2*k)**2, inf)<br/>limit(lambda k: fac(k) / (sqrt(k)*(k/e)**k), inf)**2/2<br/>limit(lambda k: (-(-1)**k*bernoulli(2*k)*2**(2*k-1)/fac(2*k))**(-1/(2*k)), inf)<br/>limit(lambda k: besseljzero(1,k)/k, inf)<br/>1/limit(lambda x: airyai(x)*2*x**0.25*exp(2*x**1.5/3), inf, exp=True)**2<br/>1/limit(lambda x: airybi(x)*x**0.25*exp(-2*x**1.5/3), inf, exp=True)**2<br/></pre><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/4754734402679928849-7530661868168314621?l=fredrik-j.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-04-16T17:39:13Z</updated>
    <published>2011-03-14T15:37:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="mpmath"/>
    <author>
      <name>Fredrik Johansson</name>
      <email>fredrik.johansson@gmail.com</email>
      <uri>http://www.blogger.com/profile/01465400860530971858</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-4754734402679928849</id>
      <author>
        <name>Fredrik Johansson</name>
        <email>fredrik.johansson@gmail.com</email>
        <uri>http://www.blogger.com/profile/01465400860530971858</uri>
      </author>
      <link href="http://fredrik-j.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://fredrik-j.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Fredrik Johansson</title>
      <updated>2011-04-22T00:51:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=621</id>
    <link href="http://fseoane.net/blog/2011/least-squares-with-equality-constrain/" rel="alternate" type="text/html"/>
    <title>Least squares with equality constrain</title>
    <summary>The following algorithm computes the Least squares solution || Ax – b|| subject to the equality constrain Bx = d. It’s a classic algorithm that can be implemented only using a QR decomposition and a least squares solver. This implementation uses numpy and scipy. It makes use of the new linalg.solve_triangular function in scipy 0.9, [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The following algorithm computes the Least squares solution || Ax – b|| subject to the equality constrain Bx = d. It’s a classic algorithm that can be implemented only using a QR decomposition and a least squares solver. </p>
<p>This implementation uses numpy and scipy. It makes use of the new linalg.solve_triangular function in scipy 0.9, although degrades to linalg.solve on older versions.</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style=""><span style="color: #ff7700; font-weight: bold;">import</span> numpy <span style="color: #ff7700; font-weight: bold;">as</span> np<br/>
<br/>
<span style="color: #ff7700; font-weight: bold;">def</span> lse<span style="color: black;">(</span>A, b, B, d, cond=<span style="color: #008000;">None</span><span style="color: black;">)</span>:<br/>
    <span style="color: #483d8b;">"""<br/>
    Equality-contrained least squares.<br/>
<br/>
    The following algorithm minimizes ||Ax - b|| subject to the<br/>
    constrain Bx = d.<br/>
<br/>
    Parameters<br/>
    ----------<br/>
    A : array-like, shape=[m, n]<br/>
<br/>
    b : array-like, shape=[m]<br/>
<br/>
    B : array-like, shape=[p, n]<br/>
<br/>
    d : array-like, shape=[p]<br/>
<br/>
    cond : float, optional<br/>
        Cutoff for 'small' singular values; used to determine effective<br/>
        rank of A. Singular values smaller than<br/>
        ``rcond * largest_singular_value`` are considered zero.<br/>
<br/>
    Reference<br/>
    ---------<br/>
    Matrix Computations, Golub &amp; van Loan, algorithm 12.1.2<br/>
<br/>
    Examples<br/>
    --------<br/>
    &gt;&gt;&gt; A, b = [[0, 2, 3], [1, 3, 4.5]], [1, 1]<br/>
    &gt;&gt;&gt; B, d = [[1, 1, 0]], [1]<br/>
    &gt;&gt;&gt; lse(A, b, B, d)<br/>
    array([-0.5       ,  1.5       , -0.66666667])    <br/>
    """</span><br/>
    <span style="color: #ff7700; font-weight: bold;">from</span> scipy <span style="color: #ff7700; font-weight: bold;">import</span> linalg<br/>
    <span style="color: #ff7700; font-weight: bold;">if</span> <span style="color: #ff7700; font-weight: bold;">not</span> <span style="color: #008000;">hasattr</span><span style="color: black;">(</span>linalg, <span style="color: #483d8b;">'solve_triangular'</span><span style="color: black;">)</span>:<br/>
        <span style="color: #808080; font-style: italic;"># compatibility for old scipy</span><br/>
        <span style="color: #ff7700; font-weight: bold;">def</span> solve_triangular<span style="color: black;">(</span>X, y, <span style="color: #66cc66;">**</span>kwargs<span style="color: black;">)</span>:<br/>
            <span style="color: #ff7700; font-weight: bold;">return</span> linalg.<span style="color: black;">solve</span><span style="color: black;">(</span>X, y<span style="color: black;">)</span><br/>
    <span style="color: #ff7700; font-weight: bold;">else</span>:<br/>
        solve_triangular = linalg.<span style="color: black;">solve_triangular</span><br/>
    A, b, B, d = <span style="color: #008000;">map</span><span style="color: black;">(</span>np.<span style="color: black;">asanyarray</span>, <span style="color: black;">(</span>A, b, B, d<span style="color: black;">)</span><span style="color: black;">)</span><br/>
    p = B.<span style="color: black;">shape</span><span style="color: black;">[</span><span style="color: #ff4500;">0</span><span style="color: black;">]</span><br/>
    Q, R = linalg.<span style="color: black;">qr</span><span style="color: black;">(</span>B.<span style="color: black;">T</span><span style="color: black;">)</span><br/>
    y = solve_triangular<span style="color: black;">(</span>R<span style="color: black;">[</span>:p, :p<span style="color: black;">]</span>, d, trans=<span style="color: #483d8b;">'T'</span>, lower=<span style="color: #008000;">False</span><span style="color: black;">)</span><br/>
    A = np.<span style="color: black;">dot</span><span style="color: black;">(</span>A, Q<span style="color: black;">)</span><br/>
    z = linalg.<span style="color: black;">lstsq</span><span style="color: black;">(</span>A<span style="color: black;">[</span>:, p:<span style="color: black;">]</span>, b - np.<span style="color: black;">dot</span><span style="color: black;">(</span>A<span style="color: black;">[</span>:, :p<span style="color: black;">]</span>, y<span style="color: black;">)</span>, <br/>
                         cond=cond<span style="color: black;">)</span><span style="color: black;">[</span><span style="color: #ff4500;">0</span><span style="color: black;">]</span>.<span style="color: black;">ravel</span><span style="color: black;">(</span><span style="color: black;">)</span><br/>
    <span style="color: #ff7700; font-weight: bold;">return</span> np.<span style="color: black;">dot</span><span style="color: black;">(</span>Q<span style="color: black;">[</span>:, :p<span style="color: black;">]</span>, y<span style="color: black;">)</span> + np.<span style="color: black;">dot</span><span style="color: black;">(</span>Q<span style="color: black;">[</span>:, p:<span style="color: black;">]</span>, z<span style="color: black;">)</span></div></div></div>
    </content>
    <updated>2011-04-14T08:02:10Z</updated>
    <category term="Python"/>
    <category term="Tecnolog&#xED;&#xAD;a"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=531</id>
    <link href="http://fseoane.net/blog/2011/a-profiler-for-python-extensions/" rel="alternate" type="text/html"/>
    <title>A profiler for Python extensions</title>
    <summary>Profiling Python extensions has not been a pleasant experience for me, so I made my own package to do the job. Existing alternatives were either hard to use, forcing you to recompile with custom flags like gprofile or desperately slow like valgrind/callgrind. The package I’ll talk about is called YEP and is designed to be: [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Profiling Python extensions has not been a pleasant experience for me, so I made my own package to do the job. Existing alternatives were either hard to use, forcing you to recompile with custom flags like gprofile or desperately slow like valgrind/callgrind. The package I’ll talk about is called <a href="http://pypi.python.org/pypi/yep">YEP</a> and is designed to be:</p>
<ol>
<li>Unobtrusive: no recompiling, no custom linking. Just lauch &amp; profile.</li>
<li>Fast: waiting sucks.</li>
<li>Easy to use.</li>
</ol>
<h2>Basic usage</h2>
<p>YEP is distributed as a python module and can be <a href="http://pypi.python.org/pypi/yep">downloaded from the pypi</a>. After installation, it is executed by giving the <b>-m yep</b> flags to the interpreter. Without any arguments, it will just print a help message:</p>
<div class="codecolorer-container text default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="text codecolorer" style="">    $ python -m yep<br/>
Usage: python -m yep [options] scriptfile [arg] ...<br/>
 ...</div></div>
<p>Say you want to profile a script called my_script.py, then the way to quickly get a profiler report is to execute:</p>
<div class="codecolorer-container text default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="text codecolorer" style="">    $ python -m yep -v my_script.py</div></div>
<p>For example, running YEP on <a href="http://scikit-learn.sourceforge.net/auto_examples/grid_search_digits.html">this example</a> that makes use of <a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/">libsvm</a>, a C++ library for Support Vector Machines, outputs</p>
<table style="width: auto;">
<tbody><tr>
<td><a href="https://picasaweb.google.com/lh/photo/ltfRg59k-z9Zrk7LBDTUxA?feat=embedwebsite"><img height="238" src="https://lh5.googleusercontent.com/_IOBIGAGXP4o/TZruzeuFJjI/AAAAAAAAAGI/JSmxqbOd0o4/s400/Screenshot-fabian%40localhost%3A%20-home-fabian.png" width="400"/></a></td>
</tr>
<tr>
<td style="font-family: arial,sans-serif; font-size: 11px; text-align: right;">From <a href="https://picasaweb.google.com/fabian.pedregosa.izquierdo/Screenshots?feat=embedwebsite">Screenshots</a></td>
</tr>
</tbody></table>
<p>The last column prints the name of the functions, so just looking at those that start with svm:: gives you an overview of how our libsvm is spending its time.</p>
<h2>Other usages</h2>
<p>Calling YEP without the -v will create a my_script.py.prof file that can be analyzed with pprof (google-pprof on some systems). pprof has a huge range of options, letting you to filter on some funtions, output to ghostview or print a line-by-line profiling, to mention a few. For example, you can generate a call graph with the command:</p>
<div class="codecolorer-container text default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="text codecolorer" style=""> $ pprof --gv /usr/bin/python my_script.py.prof</div></div>
<h2>More control</h2>
<p>If you would like to manually start/stop the profiler rather than profile the whole script, you can use the functions yep.start() and yep.stop() inside a python script. This will write the profile to a given filename, so make sure the directory is writable:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style=""><span style="color: #ff7700; font-weight: bold;">import</span> yep<br/>
yep.<span style="color: black;">start</span><span style="color: black;">(</span><span style="color: #483d8b;">'out.prof'</span><span style="color: black;">)</span> <span style="color: #808080; font-style: italic;"># will create an out.prof file</span><br/>
<span style="color: #808080; font-style: italic;"># do something ...</span><br/>
yep.<span style="color: black;">stop</span><span style="color: black;">(</span><span style="color: black;">)</span></div></div>
<h2>Future work</h2>
<p>The -v option showed at the beginning is just a dirty hack that launches pprof and pipes the output into less. A more robust approach would be to read the resulting profile from python and manipulate it from there, either to std or to <a href="http://docs.python.org/library/profile.html#pstats.Stats">pstats</a> format. This shouldn’t be too difficult as the pprof format is described <a href="http://google-perftools.googlecode.com/svn/trunk/doc/cpuprofile-fileformat.html">here</a></p>
<h2> Acknowledgment</h2>
<p>The original idea to use google-perftools to profile Python extensions was given on this <a href="http://stackoverflow.com/questions/2615153/profiling-python-c-extensions">Stack overflow question</a></p></div>
    </content>
    <updated>2011-04-06T12:02:44Z</updated>
    <category term="General"/>
    <category term="Python"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=547</id>
    <link href="http://fseoane.net/blog/2011/scikit-learn-coding-sprint-in-paris/" rel="alternate" type="text/html"/>
    <title>scikit-learn coding sprint in Paris</title>
    <summary>Yesterday was the scikit-learn coding sprint in Paris. It was great to meet with old developers (Vincent Michel) and new ones: some of whom I was already familiar with from the mailing list while others came just to say hi and get familiar with the code. It was really great to have people from such [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Yesterday was the scikit-learn coding sprint in Paris. It was great to meet with old developers (Vincent Michel) and new ones: some of whom I was already familiar with from the mailing list while others came just to say hi and get familiar with the code. It was really great to have people from such different backgrounds discuss on concrete problems and getting things done.</p>
<p>A lot of work was done, most of it unmerged yet, but if I had to highlight the three most important for me, that would be the the <a href="https://github.com/scikit-learn/scikit-learn/pull/86">merge of the hcluster2 branch</a>, the awesome work of <a href="https://github.com/thouis">thouis</a> in replacing the <a href="https://github.com/scikit-learn/scikit-learn/pull/120">C++ interface to the ball_tree with a Cython one</a> and suppport for Python3 (not bug-free but imports OK).</p>
<p>As for me, I’ve been working mostly in providing efficient cross-validatation for Support Vector Machines. The status of this is: low-level API seems to work fine (scikits.learn.svm.libsvm.cross_validation) but high-level API <a href="https://github.com/scikit-learn/scikit-learn/pull/117">still needs some work</a>.</p>
<p>This is the picture featuring (most) of the people that were at the sprint around 16h in <a href="http://www.logilab.fr/">Logilab’s</a> headquarters.</p>
<p><a href="http://www.flickr.com/photos/fseoane/5578952957/" title="IMG_0012 por Fabian Pedregosa, en Flickr"><img alt="IMG_0012" height="375" src="http://farm6.static.flickr.com/5092/5578952957_27b653d0a4.jpg" width="500"/></a></p></div>
    </content>
    <updated>2011-04-02T10:07:11Z</updated>
    <category term="General"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=536</id>
    <link href="http://fseoane.net/blog/2011/py3k-in-scikit-learn/" rel="alternate" type="text/html"/>
    <title>py3k in scikit-learn</title>
    <summary>One thing I’d really like to see done in this Friday’s scikit-learn sprint is to have full support for Python 3. There’s a branch were the hard word has been done (porting C extensions, automatic 2to3 conversion, etc.), although joblib still has some bugs and no one has attempted to do anything serious with this [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>One thing I’d really like to see done in <a href="http://gael-varoquaux.info/blog/?p=149">this Friday’s scikit-learn sprint</a> is to have full support for Python 3.</p>
<p>There’s <a href="http://github.com/fabianp/scikit-learn/compare/master...py3k">a branch were the hard word has been done</a> (porting C extensions, automatic 2to3 conversion, etc.), although joblib still has some bugs and no one has attempted to do anything serious with this branch yet …</p></div>
    </content>
    <updated>2011-03-28T13:23:46Z</updated>
    <category term="General"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-2520472460430880330.post-5266141065935110948</id>
    <link href="http://sympy.blogspot.com/feeds/5266141065935110948/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=2520472460430880330&amp;postID=5266141065935110948" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/5266141065935110948" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/5266141065935110948" rel="self" type="application/atom+xml"/>
    <link href="http://sympy.blogspot.com/2011/03/sympy-is-google-summer-of-code-2011.html" rel="alternate" type="text/html"/>
    <title>SymPy is a Google Summer of Code 2011 Mentoring Organization</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div>I am proud to announce that SymPy has been accepted as a mentoring organization for Google Summer of Code 2011.  This is great news for the project.  Although we have participated in the past under the umbrella of the Python Software Foundation and Portland State University mentoring organizations, this is the first time that we have been accepted as a mentoring organization.  Out of 417 organizations that applied to Google, 175 were accepted, 50 of which were new.</div><div><br/></div><div>In case you don't know, Google Summer of Code is a program run by Google every year where they pay college students all around the world to write code for open source projects. Each student has a mentor assigned to him/her, who helps the student get started with interacting with open source (most students who are accepted have never participated in open source before).  </div><div><br/></div><div>So now that were are accepted, students are open to applications.  The actual application period opens on March 28, and closes on April 8 (see <a href="http://www.google-melange.com/document/show/gsoc_program/google/gsoc2011/timeline">the program timeline</a>).</div><div><br/></div><div>To students:</div><div><br/></div><div>If you are interested in applying, please write the to mailing list and introduce yourself.  The program is open to anyone worldwide who is 18 years of age or older who is enrolled in a higher education institution (this includes undergraduate and graduate).  If you are interested in applying, here is what you should do (if you have not already):</div><div><br/></div><div>- As I said above, write to the list and introduce yourself.  You might also join our IRC channel, which is #sympy on freenode.</div><div><br/></div><div>- Start thinking about what you want to apply to do.  See our <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Ideas">ideas page</a>.  However, we are open to ideas that are not on that page. Anything that fits in a computer algebra system would fit in SymPy.  If you have an idea not on that page, please discuss it on our mailing list, so we can see if it has not already be implemented, and if it is fitting for SymPy and for a project.  I recommend you apply to do something that you are interested in personally.</div><div><br/></div><div>- We require for any student to be accepted that he/she submit at least one patch to SymPy, which gets reviewed and pushed in.  See <a href="http://code.google.com/p/sympy/issues/list?can=2&amp;q=label%3AEasyToFix">issues labeled EasyToFix in our issue tracker</a> for some easy to fix issues that are a good place to start.  Don't worry if you do not know how to send in a patch or use git.  We will help you (that is the whole point of the program).  Just ask on the mailing list, on the issue page, or on IRC.</div><div><br/></div><div>- You should start thinking about your application.  See our <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Template">application template</a> (it will also be at our page on the Google site).  If you like, you can start a page on our wiki to write your proposal.  If you do this, we will help you edit it (though understand that we will not help you write it).  Remember that we want you to get accepted just as much as you do, so you can help improve SymPy!</div><div><br/></div><div>To SymPy developers:</div><div><br/></div><div>- We need people who are willing to mentor students.  If you are willing to mentor, please add your name to the bottom of the <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-ideas">ideas page</a>. </div><div><br/></div><div>- Please edit the ideas page to improve formatting and add new ideas.</div><div><br/></div><div>Good luck to all students who plan on applying!</div><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/2520472460430880330-5266141065935110948?l=sympy.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-03-19T03:12:59Z</updated>
    <published>2011-03-19T03:12:00Z</published>
    <author>
      <name>Aaron Meurer</name>
      <email>asmeurer@gmail.com</email>
      <uri>http://www.blogger.com/profile/07681610358074038422</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-2520472460430880330</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02845032202161204018</uri>
      </author>
      <link href="http://sympy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://sympy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>Official SymPy blog</subtitle>
      <title>Official SymPy blog</title>
      <updated>2011-04-27T19:48:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=834</id>
    <link href="http://asmeurersympy.wordpress.com/2011/03/18/sympy-is-a-google-summer-of-code-2011-mentoring-organization/" rel="alternate" type="text/html"/>
    <title>SymPy is a Google Summer of Code 2011 Mentoring Organization</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I am proud to announce that SymPy has been accepted as a mentoring organization for Google Summer of Code 2011. This is great news for the project. Although we have participated in the past under the umbrella of the Python Software Foundation and Portland State University mentoring organizations, this is the first time that we [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=834&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I am proud to announce that SymPy has been accepted as a mentoring organization for Google Summer of Code 2011.  This is great news for the project.  Although we have participated in the past under the umbrella of the Python Software Foundation and Portland State University mentoring organizations, this is the first time that we have been accepted as a mentoring organization.  Out of 417 organizations that applied to Google, 175 were accepted, 50 of which were new.</p>
<p>In case you don’t know, Google Summer of Code is a program run by Google every year where they pay college students all around the world to write code for open source projects. Each student has a mentor assigned to him/her, who helps the student get started with interacting with open source (most students who are accepted have never participated in open source before).  </p>
<p>So now that were are accepted, students are open to applications.  The actual application period opens on March 28, and closes on April 8 (see <a href="http://www.google-melange.com/document/show/gsoc_program/google/gsoc2011/timeline">the program timeline</a>).</p>
<p>To students:</p>
<p>If you are interested in applying, please write the to mailing list and introduce yourself.  The program is open to anyone worldwide who is 18 years of age or older who is enrolled in a higher education institution (this includes undergraduate and graduate).  If you are interested in applying, here is what you should do (if you have not already):</p>
<p>- As I said above, write to the list and introduce yourself.  You might also join our IRC channel, which is #sympy on freenode.</p>
<p>- Start thinking about what you want to apply to do.  See our <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Ideas">ideas page</a>.  However, we are open to ideas that are not on that page. Anything that fits in a computer algebra system would fit in SymPy.  If you have an idea not on that page, please discuss it on our mailing list, so we can see if it has not already be implemented, and if it is fitting for SymPy and for a project.  I recommend you apply to do something that you are interested in personally.</p>
<p>- We require for any student to be accepted that he/she submit at least one patch to SymPy, which gets reviewed and pushed in.  See <a href="http://code.google.com/p/sympy/issues/list?can=2&amp;q=label%3AEasyToFix">issues labeled EasyToFix in our issue tracker</a> for some easy to fix issues that are a good place to start.  Don’t worry if you do not know how to send in a patch or use git.  We will help you (that is the whole point of the program).  Just ask on the mailing list, on the issue page, or on IRC.</p>
<p>- You should start thinking about your application.  See our <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Template">application template</a> (it will also be at our page on the Google site).  If you like, you can start a page on our wiki to write your proposal.  If you do this, we will help you edit it (though understand that we will not help you write it).  Remember that we want you to get accepted just as much as you do, so you can help improve SymPy!</p>
<p>To SymPy developers:</p>
<p>- We need people who are willing to mentor students.  If you are willing to mentor, please add your name to the bottom of the <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-ideas">ideas page</a>. </p>
<p>- Please edit the ideas page to improve formatting and add new ideas.</p>
<p>Good luck to all students who plan on applying!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/834/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/834/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/834/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/834/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/834/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/834/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/834/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/834/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/834/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/834/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/834/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/834/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/834/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/834/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=834&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-03-18T22:50:04Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-05-22T03:04:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=828</id>
    <link href="http://asmeurersympy.wordpress.com/2011/03/15/true-is-true-is-false-is-true-is-false/" rel="alternate" type="text/html"/>
    <title>True is True is False is True is False</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Time for another one of my WTF Python blog posts. Yesterday, I randomly typed this in a Python session (it was late at night): &gt;&gt;&gt; True is True is False is True is False False First a little background, in case you don’t know. The is operator in Python does exact object comparison in memory. [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=828&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Time for <a href="http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/">another</a> <a href="http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here/">one</a> of my WTF Python blog posts.  Yesterday, I randomly typed this in a Python session (it was late at night):</p>
<pre class="brush: python;">&gt;&gt;&gt; True is True is False is True is False
False
</pre>
<p>First a little background, in case you don’t know.  The <code>is</code> operator in Python does exact object comparison in memory. Unlike <code>==</code>, which only compares it two objects are equal, <code>is</code> only returns True if both arguments have the same memory address.  So you can have something like:</p>
<pre class="brush: python;">&gt;&gt;&gt; a = 12345
&gt;&gt;&gt; b = 12345
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
</pre>
<p>Now, there are a handful of Python built-ins that are always equal one another with the <code>is</code> operator.  <code>True</code> and <code>False</code> are two such constants:</p>
<pre class="brush: python;">&gt;&gt;&gt; a = True
&gt;&gt;&gt; b = True
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; c = False
&gt;&gt;&gt; d = False
&gt;&gt;&gt; c == d
True
&gt;&gt;&gt; c is d
True
</pre>
<p>Now, going back to the above, we see that each <code>is</code> returns <code>True</code> or <code>False</code>, which is then evaluated with the next one.  Or at least that is what you would think is happening.  But go back and look at it again, and see if you can figure out what it should evaluate to.  You could probably guess that something was amiss from the fact that I was blogging about it.  If you haven’t figured it out already, look at the following:</p>
<pre class="brush: python;">&gt;&gt;&gt; True is True is False is True is False
False
&gt;&gt;&gt; (((True is True) is False) is True) is False
True
&gt;&gt;&gt; True is (True is (False is (True is False)))
True
</pre>
<p>So it seems that <code>is</code> does not associate to the left or to the right.  Let’s see if we can figure out what is going on.  First off, <code>True is True</code>, etc. do behave as you expect them to:</p>
<pre class="brush: python;">&gt;&gt;&gt; True is True
True
&gt;&gt;&gt; False is False
True
&gt;&gt;&gt; True is False
False
&gt;&gt;&gt; False is True
False
</pre>
<p>It is when we start using multiple <code>is</code>s in the same statement that we start seeing problems:</p>
<pre class="brush: python;">&gt;&gt;&gt; False is False is False
True
&gt;&gt;&gt; (False is False) is False
False
</pre>
<p>So what’s going on here?  <code>False is False</code> is True, so maybe it is short-circuiting somehow.  </p>
<pre class="brush: python;">&gt;&gt;&gt; True is False is False
False
&gt;&gt;&gt; False is False is True
False
</pre>
<p>No, that is not it.  Those reduce to <code>False is False</code> and <code>True is True</code> when associating to the left, respectively, and <code>True is True</code> and <code>True is True</code> when associating to the right.  </p>
<p>Finally, at this point, it occurs to me what is really going on.  Have you figured it out too (or maybe you already knew all along)?  Maybe you can guess it from this statement, which uses <code>None</code>, another built-in object that always compares equal to itself with the <code>is</code> operator:</p>
<pre class="brush: python;">&gt;&gt;&gt; None is None is None
True
</pre>
<p>So you see what is happening?  <code>is</code> doesn’t associate at all.  Rather, using multiple <code>is</code>s in one statement does multiple comparisons at once.  Any <code>a is b is … x</code> will return <code>True</code> if <code>a</code>, <code>b</code>, …, and <code>x</code> are all equal by the <code>is</code> operator (they share the same identity or memory address), and <code>False</code> otherwise.  Actually, this isn’t surprising, since <code>==</code> works the same way:</p>
<pre class="brush: python;">&gt;&gt;&gt; False == False == False
True
&gt;&gt;&gt; (False == False) == False
False
</pre>
<p>This syntax can actually be useful to test equality of three or more items at once efficiently (Python will not evaluate the same <code>==</code> or <code>is</code> more than once).  But it can be confusing when comparing with <code>True</code> or <code>False</code>, since <code>a is b</code> and <code>a == b</code> themselves evaluate to one of those values.  So remember that it is NOT associative in any way.  Rather, it acts as an n-way comparison. </p>
<p>Finally, as <a href="http://docs.python.org/reference/expressions.html#summary">this table</a> of operator precedence in Python shows, <code>is</code> and <code>==</code> have the same precedence in Python.  Therefore, it should be possible to combine the two in these same statement.  Indeed, you can:</p>
<pre class="brush: python;">&gt;&gt;&gt; a = 12345
&gt;&gt;&gt; b = 12345
&gt;&gt;&gt; c = b
&gt;&gt;&gt; a == b == c
True
&gt;&gt;&gt; a is b is c
False
&gt;&gt;&gt; # Because this is False
...
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; # But this is True
...
&gt;&gt;&gt; b is c
True
&gt;&gt;&gt; # So we get
...
&gt;&gt;&gt; a == b is c
True
</pre>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/828/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/828/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/828/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/828/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/828/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/828/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/828/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/828/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/828/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/828/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/828/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/828/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/828/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/828/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=828&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-03-15T22:29:15Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-05-22T03:04:11Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-4754734402679928849.post-3253966970864417650</id>
    <link href="http://fredrik-j.blogspot.com/feeds/3253966970864417650/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=4754734402679928849&amp;postID=3253966970864417650" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/3253966970864417650" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/3253966970864417650" rel="self" type="application/atom+xml"/>
    <link href="http://fredrik-j.blogspot.com/2011/03/flint-example-lambert-w-function-power.html" rel="alternate" type="text/html"/>
    <title>A FLINT example: Lambert W function power series</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Two days ago, a new version of the <a href="http://flintlib.org/">Fast Library for Number Theory (FLINT)</a> was released. I contributed a lot of new code to this release, including linear algebra speed improvements and new functionality for fast power series arithmetic and computation of special numbers and polynomials (see the <a href="https://groups.google.com/group/flint-devel/browse_thread/thread/759709de4720633f?hl=en">release announcement</a> and some of my <a href="http://sage.math.washington.edu/home/fredrik/flint/timings.html">benchmarking results</a>).<br/><br/>In this blog post I'll demonstrate how to do power series arithmetic with FLINT, using its <tt>fmpq_poly</tt> module which implements polynomials over the rational numbers Q. Standard operations  (addition, multiplication and division) were available before; the functions I've added include square root, log, exp, sin, tan, atan, etc. (all the usual elementary functions). The same functions are also available for power series over a finite field Z/nZ (with word-size n). Everything is asymptotically fast (the running time is linear in the size of the output, up to logarithmic factors).<br/><br/>Of course, transcendental functions are a bit restricted when considered over Q or Z/nZ, since it's only possible to obtain power series expansions at specific rational points (in most cases just x = 0). So at present, some very interesting numerical applications of fast power series arithmetic are not supported. But some time in the future, we'll probably add support for numerical power series over the reals and complexes as well.<br/><br/>As today's example, let us implement the <a href="http://en.wikipedia.org/wiki/Lambert_W_function">Lambert W function</a> for the power series ring Q[[x]]. The Lambert W function is defined implicitly by the equation x = W(x) exp(W(z)), which can be solved using Newton iteration with the update step w = w - (w exp(w) - x) / ((w+1) exp(w)).<br/><br/>Power series Newton iteration is just like numerical Newton iteration, except that the convergence behavior is much simpler: starting with a correct first-order expansion, each iteration at least doubles the number of correct coefficients.<br/><br/>A simple recursive implementation with asymptotically optimal performance (up to constant factors) looks as follows:<br/><br/><pre><br/>#include &lt;stdio.h&gt;<br/>#include "flint.h"<br/>#include "fmpq_poly.h"<br/><br/>void lambertw(fmpq_poly_t w, fmpq_poly_t x, long n)<br/>{<br/>    if (n == 1)<br/>    {<br/>        fmpq_poly_zero(w);<br/>    }<br/>    else<br/>    {<br/>        fmpq_poly_t t, u, v;<br/><br/>        lambertw(w, x, (n + 1) / 2);<br/><br/>        fmpq_poly_init(t);<br/>        fmpq_poly_init(u);<br/>        fmpq_poly_init(v);<br/><br/>        fmpq_poly_exp_series(t, w, n);<br/>        fmpq_poly_mullow(u, t, w, n);<br/>        fmpq_poly_sub(v, u, x);<br/>        fmpq_poly_add(t, u, t);<br/>        fmpq_poly_div_series(u, v, t, n);<br/>        fmpq_poly_sub(w, w, u);<br/><br/>        fmpq_poly_clear(t);<br/>        fmpq_poly_clear(u);<br/>        fmpq_poly_clear(v);<br/>    }<br/>}<br/></pre><br/><br/>Beyond the base case W(x) = 0 + O(x), the function just computes w to accuracy ceil(n/2), and then extends it to accuracy n using a single Newton step. As we can see, C code directly using the FLINT library interface gets a bit verbose, but this style has the advantage of giving precise control over temporary memory allocation, polynomial lengths, etc. (it is very similar to the interface of GMP/MPIR).<br/><br/>We add a simple test main routine:<br/><pre><br/>int main()<br/>{<br/>   fmpq_poly_t x;<br/>   fmpq_poly_t w;<br/><br/>   fmpq_poly_init(x);<br/>   fmpq_poly_init(w);<br/><br/>   fmpq_poly_set_coeff_ui(x, 1, 1);<br/>   lambertw(w, x, 10);<br/><br/>   fmpq_poly_print_pretty(w, "x");<br/>   printf("\n");<br/><br/>   fmpq_poly_clear(x);<br/>   fmpq_poly_clear(w);<br/>}<br/></pre><br/><br/>The output of the program is:<br/><pre><br/>531441/4480*x^9 - 16384/315*x^8 + 16807/720*x^7 - 54/5*x^6 + 125/24*x^5 - 8/3*x^4 + 3/2*x^3 - 1*x^2 + 1*x<br/></pre><br/><br/>It is well known that the coefficients in this series are given in closed form by (-k)<sup>k-1</sup> / k!, so we can check that the output is correct.<br/><br/>Computing 1000 terms takes just a few seconds. If this sounds like much, remember that the coefficients grow rapidly: together, the computed numerators and denominators have over 2 million digits!<br/><br/>So far this is perhaps not so interesting, as we could compute the coefficients faster using a direct formula. But the nice thing is that arbitrary compositions are allowed, i.e we can compute W(f(x)) for any given power series f, and this will still be just as fast.<br/><br/>Let's consider a nontrivial example: the infinite "power tower" T(z) = z<sup>z<sup>z<sup>z<sup>.<sup>.</sup></sup></sup></sup></sup>. A moment's reflection shows that this is an analytic function with a rational power series expansion around z = 1. In fact, we have explicitly T(z) = W(-log(z))/(-log(z)). We can compute this series expansion (in the shifted variable x = z - 1) as follows:<br/><br/><pre><br/>int main()<br/>{<br/>    fmpq_poly_t x;<br/>    fmpq_poly_t w;<br/><br/>    long n = 10;<br/><br/>    fmpq_poly_init(x);<br/>    fmpq_poly_init(w);<br/><br/>    fmpq_poly_set_coeff_ui(x, 0, 1);<br/>    fmpq_poly_set_coeff_ui(x, 1, 1);<br/>    fmpq_poly_log_series(x, x, n + 1);<br/>    fmpq_poly_neg(x, x);<br/>    lambertw(w, x, n + 1);<br/>    fmpq_poly_shift_right(w, w, 1);<br/>    fmpq_poly_shift_right(x, x, 1);<br/>    fmpq_poly_div_series(w, w, x, n);<br/><br/>    fmpq_poly_print_pretty(w, "x");<br/>    printf("\n");<br/><br/>    fmpq_poly_clear(x);<br/>    fmpq_poly_clear(w);<br/>}<br/></pre><br/><br/>The only complication is that <tt>fmpq_poly_div_series</tt> requires a nonzero leading coefficient in the denominator, so we must shift both series down one power.<br/><br/>The program outputs:<br/><pre><br/>118001/2520*x^9 + 123101/5040*x^8 + 4681/360*x^7 + 283/40*x^6 + 4*x^5 + 7/3*x^4 + 3/2*x^3 + 1*x^2 + 1*x + 1<br/></pre><br/><br/>To make things nicer, we assume that the coefficients have the form a<sub>k</sub> / k! (i.e. that T(z) is the exponential generating function for a<sub>k</sub>) and change the output code to something like the following:<br/><pre><br/>    long k;<br/>    mpq_t t;<br/>    mpz_t u;<br/>    mpq_init(t);<br/>    mpz_init(u);<br/><br/>    for (k = 0; k &lt; n; k++)<br/>    {<br/>        fmpq_poly_get_coeff_mpq(t, w, k);<br/>        mpz_fac_ui(u, k);<br/>        mpz_mul(mpq_numref(t), mpq_numref(t), u);<br/>        mpq_canonicalize(t);<br/>        gmp_printf("%Qd ", t);<br/>    }<br/><br/>    mpq_clear(t);<br/>    mpz_clear(u);<br/></pre><br/><br/>This indeed gives us an integer sequence:<br/><pre><br/>1 1 2 9 56 480 5094 65534 984808 16992144<br/></pre><br/><br/>Now what is the value of the 1000th coefficient (to be precise, a<sub>1000</sub>, the initial one being the 0th!) in this sequence? After a simple modification of the program, 2.9 seconds of computation gives:<br/><br/><pre><br/>11608872341636087705816513947297167830568265588875720061704<br/>01832880235304267566817912141661469362953389062004053809005<br/>65797054717998071778437757582562676432270594729770831984037<br/>17901116787718293231769568392734610884078152929278291961741<br/>58010228897635319982035567487202368704727403137478203768363<br/>54056589570878404139562784693762331122998711070595645913436<br/>44753733499423283972136827590268687580725109528808039530647<br/>10910254098110789162443473433433758060122558659258182027755<br/>69656436509351036076228649393400187670469063215003559774586<br/>49501015173633083100668758800804388616363320813332492596835<br/>40185987183963214465225072970422690115905543500507650640978<br/>08856685726892919091844572545581642428942983342505179168857<br/>61923031601434642410137173087273453449219217659949560840949<br/>29145910407919393564145312029717057693032572341514569188719<br/>42207889248610196901459400077483577940763454422516589494589<br/>38697976290832628091067571489853751119661925805775760182956<br/>07151657547554699411688610841404991952520564137242651305186<br/>19966880917401902668151574186675809680229260294868082194497<br/>63338464294487320831362657576767926588975644587806316363928<br/>21662453081804476234328933125206970873131871382852201414093<br/>31942812710129867491990841736391939490562342870154316209797<br/>95555638177793757660689621198594912024704112203014400855204<br/>04879191040818216462884689447945725483793082854991264186114<br/>00713712447555062853630274495412279277142852027491666742488<br/>18689076794537156576609645279481454870296442864829766014978<br/>76385015229773871193575960430599394232421616401025152808967<br/>97542967829629757402705726445239053261557399630212654678115<br/>91948563122399554735529747742515102962530483866618795187470<br/>92568029262248891738821070847168914030430887617489382116571<br/>31479578425767585519331805968937010542495567221591600504522<br/>70151935685333213987251220404383044513120115761331175072544<br/>91881860724844683157343078083901966247367831930705346651165<br/>57731933519958498663270193078704185994119446629783305199163<br/>25824443621182783667024174595493553934149891052564101562124<br/>66082538519787858297949190033471879555319648142879656530503<br/>22140399695072998272983889906823049155302053273484019653833<br/>08158019685729676988160041114485564188896445502120959889736<br/>26684734069125268167350474483728161637188322446040542612820<br/>83620649731423678182582137133666912162187578149277916758677<br/>65932622140692260754343559763758688544180440952477345437585<br/>88260535486569816885029406514351482276962081562798684604230<br/>27051552771077659399889469617306015354335528530235916712574<br/>33756257973655927835185354982512983428012895270181767297060<br/>61394636504681554763302758450669487653360858511886083023090<br/>56603401440047692698200295529572915618836122163118770906896<br/>63441094011689868848158568518095899683719854486361541380832<br/>18026233272569661209672552513531416295218659379214599386577<br/>71439492527626159018195922050167504883881038997644963556212<br/>95634222871269535245013411241216112695705600000000000000000<br/>0000000000000000000000000 <br/></pre><br/><br/>In fact, if we look up the first 10 coefficients in the On-Line Encyclopedia of Integer Sequences, we find <a href="http://oeis.org/A033917">http://oeis.org/A033917</a>. This OEIS entry lists the representation<br/><br/>a(n) = Sum_{k=0..n} Stirling1(n, k)*(k+1)^(k-1)<br/><br/>Since FLINT supports fast vector computation of Stirling numbers, this formula can be implemented efficiently:<br/><br/><pre><br/>#include "fmpz.h"<br/>#include "fmpz_vec.h"<br/>#include "arith.h"<br/><br/>void coefficient(fmpz_t a, long n)<br/>{<br/>    long k;<br/>    fmpz * s;<br/>    fmpz_t t;<br/><br/>    s = _fmpz_vec_init(n + 1);<br/>    fmpz_stirling1_vec(s, n, n + 1);<br/><br/>    fmpz_init(t);<br/>    fmpz_zero(a);<br/>    for (k = 1; k &lt;= n; k++)<br/>    {<br/>        fmpz_set_ui(t, k + 1);<br/>        fmpz_pow_ui(t, t, k - 1);<br/>        fmpz_addmul(a, s + k, t);<br/>    }<br/><br/>    _fmpz_vec_clear(s, n + 1);<br/>    fmpz_clear(t);<br/>}<br/><br/>int main()<br/>{<br/>    fmpz_t a;<br/>    fmpz_init(a);<br/>    coefficient(a, 1000);<br/>    fmpz_print(a);<br/>    printf("\n");<br/>    fmpz_clear(a);<br/>}<br/></pre><br/><br/>And indeed, the output turns out to be the same!<br/><br/>This program is faster, taking only 0.1 seconds to run. But of course, it only gives us a single coefficient, and would be slower for computing a range of values by making repeated calls.<br/><br/>Similar ideas to those presented here (basically, reducing a problem to fast polynomial multiplication using generating functions, Newton iteration, etc.) are used internally by FLINT for computation of the standard elementary functions themselves as well as various special numbers and polynomials (Bernoulli numbers and polynomials, partitions, Stirling numbers, Bell numbers, etc). The internal code uses a lot of tricks to reduce overhead and handle special cases faster, however. (See the previous blog post <a href="http://fredrik-j.blogspot.com/2010/09/fast-combinatorial-and-number-theoretic.html">Fast combinatorial and number-theoretic functions with FLINT 2</a>, and for more recent information the release announcement and benchmarks page linked at the top of this post.)<br/><br/>In other news, I haven't written a lot of code for mpmath or Sage recently. Of course, my hope is that FLINT (2) will make it into Sage in the not too distant future. The fast polynomial and power series arithmetic support in FLINT will also be very useful for future special functions applications (in mpmath and elsewhere).<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/4754734402679928849-3253966970864417650?l=fredrik-j.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-03-11T15:37:53Z</updated>
    <published>2011-03-11T12:28:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="mpmath"/>
    <author>
      <name>Fredrik Johansson</name>
      <email>fredrik.johansson@gmail.com</email>
      <uri>http://www.blogger.com/profile/01465400860530971858</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-4754734402679928849</id>
      <author>
        <name>Fredrik Johansson</name>
        <email>fredrik.johansson@gmail.com</email>
        <uri>http://www.blogger.com/profile/01465400860530971858</uri>
      </author>
      <link href="http://fredrik-j.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://fredrik-j.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Fredrik Johansson</title>
      <updated>2011-04-22T00:51:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=440</id>
    <link href="http://fseoane.net/blog/2011/computing-the-vector-norm/" rel="alternate" type="text/html"/>
    <title>Computing the vector norm</title>
    <summary>Last week I discussed with Gael how we should compute the euclidean norm of a vector a using SciPy. Two approaches suggest themselves, either calling scipy.linalg.norm(a) or computing sqrt(a.T a), but as I learned later, both suck. Note: I use single-precision arithmetic for simplicity, but similar results hold for double-precision. Overflow and underflow Both approaches [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Last week I discussed with <a href="http://gael-varoquaux.info/blog/">Gael</a> how we should compute the euclidean norm of a vector a using SciPy. Two approaches suggest themselves, either calling scipy.linalg.norm(a) or computing sqrt(a.T a), but as I learned later, both suck.</p>
<p><b>Note:</b> I use single-precision arithmetic for simplicity, but similar results hold for double-precision.</p>
<h3>Overflow and underflow</h3>
<p>Both approaches behave terribly in presence of big or small numbers. Take for example an array with a single entry:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">In <span style="color: black;">[</span><span style="color: #ff4500;">0</span><span style="color: black;">]</span>: a = np.<span style="color: #dc143c;">array</span><span style="color: black;">(</span><span style="color: black;">[</span>1e20<span style="color: black;">]</span>, dtype=np.<span style="color: black;">float32</span><span style="color: black;">)</span><br/>
In <span style="color: black;">[</span><span style="color: #ff4500;">1</span><span style="color: black;">]</span>: a<br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">1</span><span style="color: black;">]</span>: <span style="color: #dc143c;">array</span><span style="color: black;">(</span><span style="color: black;">[</span>  1.00000002e+20<span style="color: black;">]</span>, dtype=float32<span style="color: black;">)</span><br/>
In <span style="color: black;">[</span><span style="color: #ff4500;">2</span><span style="color: black;">]</span>: scipy.<span style="color: black;">linalg</span>.<span style="color: black;">norm</span><span style="color: black;">(</span>a<span style="color: black;">)</span><br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">2</span><span style="color: black;">]</span>: inf<br/>
In <span style="color: black;">[</span><span style="color: #ff4500;">3</span><span style="color: black;">]</span>: np.<span style="color: black;">sqrt</span><span style="color: black;">(</span>np.<span style="color: black;">dot</span><span style="color: black;">(</span>a.<span style="color: black;">T</span>, a<span style="color: black;">)</span><span style="color: black;">)</span><br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">3</span><span style="color: black;">]</span>: inf</div></div>
<p>That is, both methods return Infinity. However, the correct answer is 10^20, which would comfortably fit in a <a href="http://en.wikipedia.org/wiki/Single_precision_floating-point_format">single-precision</a> instruction. Similar examples can be found where numbers underflow.</p>
<h3>Stability</h3>
<p>Again, scipy.linalg.norm has a terrible behavior in what concerns numerical stability. In presence of different magnitudes severe cancellation can occur. Take for example and array with one 10.000 in the first value and 10.000 ones behind:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">a = np.<span style="color: #dc143c;">array</span><span style="color: black;">(</span><span style="color: black;">[</span>1e4<span style="color: black;">]</span> + <span style="color: black;">[</span><span style="color: #ff4500;">1</span><span style="color: black;">]</span><span style="color: #66cc66;">*</span><span style="color: #ff4500;">10000</span>, dtype=np.<span style="color: black;">float32</span><span style="color: black;">)</span></div></div>
<p>In this case, scipy.linalg.norm will discard all the ones, producing</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">In <span style="color: black;">[</span><span style="color: #ff4500;">3</span><span style="color: black;">]</span>: linalg.<span style="color: black;">norm</span><span style="color: black;">(</span>a<span style="color: black;">)</span> - 1e4<br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">3</span><span style="color: black;">]</span>: <span style="color: #ff4500;">0.0</span></div></div>
<p>when the correct answer is 0.5. Here <img alt="\sqrt{a^T a}" class="latex" src="http://s.wordpress.com/latex.php?latex=%5Csqrt%7Ba%5ET%20a%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\sqrt{a^T a}"/> has a much nicer behavior since results of a dot-product in single precision are accumulated using double-precision (but if double-precision is used, results won’t be accumulated using quadruple-precision):</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">In <span style="color: black;">[</span><span style="color: #ff4500;">4</span><span style="color: black;">]</span>: np.<span style="color: black;">sqrt</span><span style="color: black;">(</span>np.<span style="color: black;">dot</span><span style="color: black;">(</span>a.<span style="color: black;">T</span>, a<span style="color: black;">)</span><span style="color: black;">)</span> - 1e4<br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">4</span><span style="color: black;">]</span>: <span style="color: #ff4500;">0.5</span></div></div>
<h3>BLAS BLAS BLAS …</h3>
<p>The BLAS function <a href="http://www.netlib.org/blas/snrm2.f">nrm2</a> does automatic scaling of parameters rendering it more stable and tolerant to overflow. Luckily, scipy provides a mechanism to call some BLAS functions:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">In <span style="color: black;">[</span><span style="color: #ff4500;">5</span><span style="color: black;">]</span>: nrm2, = scipy.<span style="color: black;">linalg</span>.<span style="color: black;">get_blas_funcs</span><span style="color: black;">(</span><span style="color: black;">(</span><span style="color: #483d8b;">'nrm2'</span>,<span style="color: black;">)</span>, <span style="color: black;">(</span>a,<span style="color: black;">)</span><span style="color: black;">)</span></div></div>
<p>Using this function, no overflow occurs (hurray!)</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">In <span style="color: black;">[</span><span style="color: #ff4500;">95</span><span style="color: black;">]</span>: a = np.<span style="color: #dc143c;">array</span><span style="color: black;">(</span><span style="color: black;">[</span>1e20<span style="color: black;">]</span>, dtype=np.<span style="color: black;">float32</span><span style="color: black;">)</span><br/>
In <span style="color: black;">[</span><span style="color: #ff4500;">96</span><span style="color: black;">]</span>: nrm2<span style="color: black;">(</span>a<span style="color: black;">)</span><br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">96</span><span style="color: black;">]</span>: 1.0000000200408773e+20</div></div>
<p>and stability is greatly improved</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">In <span style="color: black;">[</span><span style="color: #ff4500;">99</span><span style="color: black;">]</span>: nrm2<span style="color: black;">(</span>a<span style="color: black;">)</span> - 1e4<br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">99</span><span style="color: black;">]</span>: <span style="color: #ff4500;">0.49998750062513864</span></div></div>
<h3>Timing</h3>
<p>Computing the 2-norm of an array is a very cheap operation, thus computations are usually dominated by external factors, such as latency of memory access or overhead in the Python/C layer. Experimental benchmarks on an array of size 10^7 show that nrm2 is marginally slower than <img alt="\sqrt{a^T a}" class="latex" src="http://s.wordpress.com/latex.php?latex=%5Csqrt%7Ba%5ET%20a%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\sqrt{a^T a}"/>, because scaling has a cost, but is is also more stable and less prone to overflow and underflow. It also shows that scipy.linalg.norm is the slowest (and numerically worst!) of all.</p>
<table border="1">
<tbody><tr>
<td><img alt="\sqrt{a^T a}" class="latex" src="http://s.wordpress.com/latex.php?latex=%5Csqrt%7Ba%5ET%20a%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\sqrt{a^T a}"/></td>
<td>BLAS nrm2(a)</td>
<td>scipy.linalg.norm(a)</td>
</tr>
<tr>
<td>0.02</td>
<td>0.02</td>
<td>0.16</td>
</tr>
</tbody></table></div>
    </content>
    <updated>2011-02-15T08:31:21Z</updated>
    <category term="General"/>
    <category term="scipy"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=417</id>
    <link href="http://fseoane.net/blog/2011/smells-like-hacker-spirit/" rel="alternate" type="text/html"/>
    <title>Smells like hacker spirit</title>
    <summary>I was last weekend in FOSDEM presenting scikits.learn (here are the slides I used at the Data Analytics Devroom). Kudos to Olivier Grisel and all the people who organized such a fun and authentic meeting!</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I was last weekend in <a href="http://fosdem.org/2011/">FOSDEM</a> presenting <a href="http://scikit-learn.sf.net">scikits.learn</a> (<a href="http://fseoane.net/talks/fosdem-skl/">here are the slides</a> I used at the Data Analytics Devroom). Kudos to <a href="http://twitter.com/#!/ogrisel">Olivier Grisel</a> and all the people who organized such a fun and authentic meeting!</p>
<p><a href="http://www.flickr.com/photos/alper/5417861859/"><img height="240" src="http://farm6.static.flickr.com/5136/5417861859_8480c65eed_m.jpg" width="179"/></a></p>
<p><a href="http://www.flickr.com/photos/fseoane/5425114531/" title="scikits.learn at FOSDEM 2011 por Fabian Pedregosa, en Flickr"><img alt="scikits.learn at FOSDEM 2011" height="240" src="http://farm6.static.flickr.com/5294/5425114531_6eec316967_m.jpg" width="194"/></a></p></div>
    </content>
    <updated>2011-02-11T07:50:19Z</updated>
    <category term="General"/>
    <category term="Tecnolog&#xED;&#xAD;a"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=820</id>
    <link href="http://asmeurersympy.wordpress.com/2011/01/09/i-am-now-the-sympy-project-leader/" rel="alternate" type="text/html"/>
    <title>I am now the SymPy project leader</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">You can imagine my surprise when I opened my email last Monday and saw this message from Ondrej: Hi Aaron, would you like to become the main maintainer/project leader for sympy? In the last year, it is clearly you, who does most of the work, and also your blog has quite some visibility now. It’d [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=820&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>You can imagine my surprise when I opened my email last Monday and saw this message from Ondrej:</p>
<blockquote><p>
Hi Aaron,</p>
<p>would you like to become the main maintainer/project leader for sympy?<br/>
In the last year, it is clearly you, who does most of the work, and<br/>
also your blog has quite some visibility now.<br/>
It’d be cool to do some release from time to time. Mateusz is<br/>
finishing is poly’s branch, so probably his code would go into the<br/>
release.
</p></blockquote>
<p>So I guess now I am the project leader for SymPy.  As to what exactly this means, I am not yet entirely sure, but so far it has meant that I get to do a lot more work than before (yay!).</p>
<p>Actually, the work is because I have spent the last week working nonstop to get things ready to do a release.  I should have a release candidate for SymPy 0.7.0 ready some time next week.  I’ll post more here about what’s change, but this is going to be a big release.  The biggest change will be the new polys, which makes things much faster and more powerful.  </p>
<p>Also, I will try to post things here relating to SymPy as a whole, not just my work.  </p>
<p>Ondrej, by the way, isn’t going anywhere. He plans on doing some work on ways to get SymPy out to more people by writing more/better web and mobile interfaces for it.  A big thanks to Ondrej and the SymPy community for making such an awesome piece of software!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/820/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/820/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/820/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/820/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/820/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/820/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/820/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/820/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/820/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/820/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/820/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/820/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/820/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/820/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=820&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-01-09T00:29:53Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-05-22T03:04:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=810</id>
    <link href="http://asmeurersympy.wordpress.com/2011/01/02/2010-in-review/" rel="alternate" type="text/html"/>
    <title>2010 in review</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Here’s some silly thing that WordPress sent me: The stats helper monkeys at WordPress.com mulled over how this blog did in 2010, and here’s a high level summary of its overall blog health: The Blog-Health-o-Meter™ reads This blog is on fire!. Crunchy numbers A Boeing 747-400 passenger jet can hold 416 passengers. This blog was [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=810&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><i>Here’s some silly thing that WordPress sent me:</i></p>
<p>The stats helper monkeys at WordPress.com mulled over how this blog did in 2010, and here’s a high level summary of its overall blog health:</p>
<p align="center"><img alt="Healthy blog!" height="183" src="http://s0.wp.com/i/annual-recap/meter-healthy4.gif" style="border: 1px solid #ddd; background: #f5f5f5; padding: 20px;" width="250"/></p>
<p align="center">The <em>Blog-Health-o-Meter™</em> reads This blog is on fire!.</p>
<h2>Crunchy numbers</h2>
<p>			<a href="http://asmeurersympy.files.wordpress.com/2009/07/code-block-2.png"><img alt="Featured image" src="http://asmeurersympy.files.wordpress.com/2009/07/code-block-2.png?w=288" style="float: right; border: 1px solid #ddd; background: #fff; margin: 0 0 1em 1em; padding: 6px;"/></a></p>
<p>A Boeing 747-400 passenger jet can hold 416 passengers.  This blog was viewed about <strong>6,800</strong> times in 2010.  That’s about 16 full 747s.</p>
<p/>
<p>In 2010, there were <strong>16</strong> new posts, growing the total archive of this blog to 41 posts. There were <strong>7</strong> pictures uploaded, taking up a total of 1mb. </p>
<p>The busiest day of the year was July 4th with <strong>103</strong> views. The most popular post that day was <a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/" style="color: #08c;">The Risch Algorithm: Part 1</a>.</p>
<p/>
<h2>Where did they come from?</h2>
<p>The top referring sites in 2010 were <strong><a href="http://code.google.com">code.google.com</a></strong>, <strong><a href="http://planet.sympy.org">planet.sympy.org</a></strong>, <strong><a href="http://www.facebook.com">facebook.com</a></strong>, <strong><a href="http://www.stackoverflow.com">stackoverflow.com</a></strong>, and <strong><a href="http://socghop.appspot.com">socghop.appspot.com</a></strong>.</p>
<p>Some visitors came searching, mostly for <strong><a href="http://www.google.com/search?q=risch%20algorithm">risch algorithm</a></strong>, <strong><a href="http://www.google.com/search?q=pudb">pudb</a></strong>, <strong><a href="http://www.google.com/search?q=integrate%20exponential">integrate exponential</a></strong>, <strong><a href="http://www.google.com/search?q=equations%20with%20homogeneous%20coefficients">equations with homogeneous coefficients</a></strong>, and <strong><a href="http://www.google.com/search?q=xcode%20trailing%20whitespace">xcode trailing whitespace</a></strong>.</p>
<p><em>I have linked the search terms to their respective Google searches, so you can see how far up my blog posts are in the results list.</em></p>
<div style="clear: both;"/>
<h2>Attractions in 2010</h2>
<p>These are the posts and pages that got the most views in 2010.</p>
<div style="">1</div>
<p>					<a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/" style="margin-right: 10px;">The Risch Algorithm: Part 1</a> <span style="color: #999; font-size: 8pt;">June 2010</span><br/>3 comments											</p>
<div style="">2</div>
<p>					<a href="http://asmeurersympy.wordpress.com/2009/11/13/how-to-get-both-32-bit/" style="margin-right: 10px;">How to get both 32-bit and 64-bit Python in Snow Leopard</a> <span style="color: #999; font-size: 8pt;">November 2009</span><br/>5 comments and 1 Like on WordPress.com,											</p>
<div style="">3</div>
<p>					<a href="http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/" style="margin-right: 10px;">Modifying a list while looping through it in Python</a> <span style="color: #999; font-size: 8pt;">July 2009</span><br/>13 comments											</p>
<div style="">4</div>
<p>					<a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/" style="margin-right: 10px;">Integration of exponential functions</a> <span style="color: #999; font-size: 8pt;">July 2010</span><br/>3 comments											</p>
<div style="">5</div>
<p>					<a href="http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/" style="margin-right: 10px;">First Order Differential Equations with Homogeneous Coefficients</a> <span style="color: #999; font-size: 8pt;">May 2009</span><br/>2 comments											</p>
<p><em>I wonder where things are coming from from Facebook.  I do not have an account there, so I can’t search it to find out.</em></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/810/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/810/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/810/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/810/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/810/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/810/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/810/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/810/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/810/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/810/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/810/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/810/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/810/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/810/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=810&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-01-02T23:07:04Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-05-22T03:04:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=307</id>
    <link href="http://fseoane.net/blog/2010/new-examples-in-scikits-learn-0-6/" rel="alternate" type="text/html"/>
    <link href="http://www.crepus.com/Supercrepus.rar" rel="enclosure"/>
    <title>New examples in scikits.learn 0.6</title>
    <summary>Latest release of scikits.learn comes with an awesome collection of examples. These are some of my favorites: Faces recognition This example by Olivier Grisel, downloads a 58MB faces dataset from Labeled Faces in the Wild, and is able to perform PCA for feature extraction and SVC for classification, yielding a very acceptable 0.85 f1-score. Species [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Latest release of <a href="http://scikit-learn.sf.net">scikits.learn</a> comes with an <a href="http://scikit-learn.sourceforge.net/0.6/auto_examples/index.html">awesome collection of examples</a>. These are some of my favorites:</p>
<h3>Faces recognition</h3>
<p><a href="http://scikit-learn.sourceforge.net/0.6/auto_examples/applications/plot_face_recognition.html">This example</a> by <a href="http://twitter.com/ogrisel/">Olivier Grisel</a>, downloads a 58MB faces dataset from <a href="http://vis-www.cs.umass.edu/lfw/">Labeled Faces in the Wild</a>, and is able to perform PCA for feature extraction and SVC for classification, yielding a very acceptable 0.85 f1-score.</p>
<p><a href="http://scikit-learn.sourceforge.net/0.6/auto_examples/applications/plot_face_recognition.html"><img src="http://scikit-learn.sourceforge.net/0.6/_images/plot_face_recognition.png" width="500px"/></a></p><a href="http://scikit-learn.sourceforge.net/0.6/auto_examples/applications/plot_face_recognition.html">
<h3>Species distribution modeling</h3>
</a><p><a href="http://scikit-learn.sourceforge.net/0.6/auto_examples/applications/plot_face_recognition.html"/><a href="http://scikit-learn.sourceforge.net/0.6/auto_examples/applications/plot_species_distribution_modeling.html">This example</a> by <a href="http://sites.google.com/site/peterprettenhofer/">Peter Prettenhofer</a>, models the geographical distribution of two south american mammals given past observations and 14 environmental variables. </p>
<p><a href="http://scikit-learn.sourceforge.net/0.6/auto_examples/applications/plot_species_distribution_modeling.html"><img src="http://scikit-learn.sourceforge.net/0.6/_images/plot_species_distribution_modeling.png" width="500px"/></a></p>
<h3>Libsvm GUI</h3>
<p><a href="http://scikit-learn.sourceforge.net/0.6/auto_examples/applications/svm_gui.html">This example</a>, again by <a href="http://sites.google.com/site/peterprettenhofer/">Peter Prettenhofer</a> and based on matplotlib and Tk, lets you draw data points in a canvas and it will interactively show the decision function of the SVM classifier. See <a href="http://vimeo.com/18308519">this video</a> for a small showcase (music by <a href="http://www.crepus.com/supercrepus.html">Joe Crepúsculo</a> can be downloaded <a href="http://www.crepus.com/Supercrepus.rar">here</a>)</p>
<p> &lt;iframe frameborder="0" height="300" src="http://player.vimeo.com/video/18308519" width="400"&gt;&lt;/iframe&gt;</p></div>
    </content>
    <updated>2010-12-31T11:55:07Z</updated>
    <category term="General"/>
    <category term="scikit-learn"/>
    <category term="Tecnolog&#xED;&#xAD;a"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=782</id>
    <link href="http://asmeurersympy.wordpress.com/2010/12/27/major-api-change-for-the-risch-algorithm-functions/" rel="alternate" type="text/html"/>
    <title>Major API Change for the Risch Algorithm Functions</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I have been able to get to work again on the Risch Algorithm now that I have a month winter break from classes. So the first thing I did was commit a bunch of bug fixes that had been sitting there since the end of the summer. Then, I set out to make a major [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=782&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have been able to get to work again on the Risch Algorithm now that I have a month winter break from classes.  So the first thing I did was commit a bunch of bug fixes that had been sitting there since the end of the summer.  Then, I set out to make a major internal API change to the entire Risch Algorithm.</p>
<p>Let me give some background.  When I first started programming the Risch Algorithm at the beginning of the summer, I didn’t have a very good idea of how differential extensions worked yet (remember that I programmed the algorithm as I learned it from Bronstein’s book).  Let me use the function <code>derivation()</code> to demonstrate how the API has changed.  <code>derivation()</code> takes the Poly <code>p</code> in <code>t</code> and computes the derivative (<code>t</code> is some transcendental extension, like <img alt="e^x" class="latex" src="http://s0.wp.com/latex.php?latex=e%5Ex&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^x"/>).  Also, the integration variable is <code>x</code>.  The first internal API that I used was</p>
<p><code>derivation(p, D, x, t)</code></p>
<p>where <code>D</code> is a Poly of the derivative of <code>t</code>, and <code>x</code> and <code>t</code> are Symbols (see <a href="https://github.com/asmeurer/sympy/commit/0f6a3d90f724118fadc5fdaf290a0cb3e3963efd">this commit</a>).   The problem here is that <code>p</code> might not be in just one symbol, <code>t</code>, but in many. This would happen whenever the function had more than one transcendental function, or extension, in it.  So, for example, <img alt="e^x\log{x}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5Ex%5Clog%7Bx%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^x\log{x}"/> would have this problem. Surprisingly, according to the git log, it took me until July 4 to figure this out (that above linked commit, which is the first occurrence of this function and when I started the full algorithm, dates from June 7, so it took me almost a month!), after which I had already written a good portion of the Risch Algorithm.  I changed the API to</p>
<p><code>derivation(p, D, x, T)</code></p>
<p>where <code>T</code> is a list of the extension variables and <code>D</code> is a list of the derivations of the respective elements of <code>T</code> with respect to the lower elements and x (see <a href="https://github.com/asmeurer/sympy/commit/20b7a5f8ca8dec579065f85583f11cc0955b96f0">this commit</a>).  Now, the derivation of <code>x</code> is always <code>Poly(1, x)</code>, so I didn’t think it was necessary to include it.  But it turns out that it is easier to just always include this in <code>D</code> rather than try to special case it in the code.  Also, the lowest extension variable, <code>x</code>, isn’t used very often in the code, so it also doesn’t make much sense to keep it separate from the rest of the variables in <code>T</code>.  Now this didn’t take me as long to figure out (July 11).  Therefore, I changed the API to just</p>
<p><code>derivation(p, D, T)</code></p>
<p>where the first element of <code>T</code> is always <code>x</code> and the first element of <code>D</code> is always <code>Poly(1, x)</code> (see <a href="https://github.com/asmeurer/sympy/commit/bca2b19844ae71aa1ef8e27a9f77eabb70b4aa5f">this commit</a>).</p>
<p>Now this API worked quite well for the remainder of the summer.  However, at the very end, I discovered that a function required to handle some special cases in certain parts of the algorithm needed four more lists (the elements of the extension that are logarithms, the elements of the extension that are exponentials, the arguments of those logarithms, and the arguments of those exponentials).  I had previously thought that these lists would only be needed when creating the extension at the beginning of integration, but it turned out that this was not the case and that they could be needed in several rather deep places in the algorithm.  The only way to get them there would be to pass them through to every single function in the algorithm.    </p>
<p>So I was faced with a dilemma.  I didn’t want to pass six arguments through each function just because a few might need them all.  I knew that the answer was to create an object to store all the data for a differential extension and to just pass this object around.  Unfortunately, this happened at the very end of the summer, so I hadn’t been able to do that until now.  </p>
<p>This brings us to now.  Over the past couple of weeks, I created an object called <code>DifferentialExtension</code>, and replaced the API in the Risch Algorithm to use it.  See <a href="https://github.com/asmeurer/sympy/commit/d9d9548625513188aaa663621bfe4e097aebf741">this commit</a> and <a href="https://github.com/asmeurer/sympy/commit/1935b6d6e1fdf8eae4deb5a4f56ea53c5d6989fa">this commit</a> and some of the ones in between to see what I did. More or less, the object is like a C struct—it does little more than hold a lot of information as attributes.  However, at the suggestion of Ronan Lamy on the <a href="http://groups.google.com/group/sympy/browse_thread/thread/a051b5ba1fb5cb4d">mailing list</a>, I have moved all the relevant code for building the extension from the <code>build_extension()</code> function into <code>DifferentialExtension.__init__()</code>.  I have also created some “magic” to handle the recursive nature of the algorithm.  A DifferentialExtension object has an attribute <code>level</code>, which represents the level of the extension that the algorithm is working in.  So you can store all the derivations of the extension in <code>DifferentialExtension.D</code>, but only have <code>DifferentialExtension.d</code> point to the “current” outermost derivation.  This replaces things like</p>
<p><code>D = D[:-1]<br/>
T = T[:-1]<br/>
</code> </p>
<p>from the old API to just</p>
<p><code>DE.decrement_level()<br/>
</code></p>
<p>(and then later on, <code>DE.increment_level()</code>).  The entire API is now just</p>
<p><code>derivation(p, DE)</code></p>
<p>where <code>DE</code> is a <code>DifferentialExtension</code> object.  Changing the API of the entire code base at this point was a bit of work, but I have finally finished it, and I must say, this is much cleaner.  True, you now have to use <code>DE.t</code> everywhere instead of <code>t</code> (with <code>t = T[-1]</code> at the top of the function), which is three characters more space for every use, but I think in the end it is cleaner.  For example, the function that used to be</p>
<p><code>is_log_deriv_k_t_radical(fa, fd, L_K, E_K, L_args, E_args, D, T)</code></p>
<p>is now just</p>
<p><code>is_log_deriv_k_t_radical(fa, fd, DE)</code>.</p>
<p>Also, because it is an object, I can do cool things like override <code>DifferentialExtension.__str__()</code> to print out a tuple of the most important attributes of the object, making debugging much easier (now there is just one print statement instead of five).  </p>
<p>Another thing I had to do was to allow the creation of these objects manually, because what is now <code>DifferentialExtension.__init__()</code> cannot yet handle, for example, tangent extensions, but some of the tests involve those.  So I created an <code>extension</code> flag to <code>__init__()</code> to which you could pass a dictionary, and it would create a skeleton extension from that (see <a href="https://github.com/asmeurer/sympy/commit/7121b06eab3f1e0f8464c287438fb7175f07762b">this commit</a>).  I made it smart enough to create some attributes automatically, so I only have to pass the list <code>D</code> in most tests—it creates attributes like <code>T</code> from that automatically.  Thus, this in some ways made the tests a little simpler, because I didn’t have to worry about <code>T</code> any more.  </p>
<p>We’ll see how things go, but this fourth API change should hopefully be the last.  This should also make it much easier whenever I add trigonometric function support, where I will have to add even more attributes to the object.  I won’t have to change the code in any existing function (unless it specifically needs to be able to know about trig extensions), because, to them, the information in <code>DE</code> will not change.</p>
<p>So the good news behind all of this, as I mentioned at the beginning of this post, is that I can now write some algorithm that requires those <code>L_K</code>, <code>E_K</code>, <code>L_args</code>, <code>E_args</code> variables from arbitrary places within the algorithm.  This should allow me to completely finish the exponential case.  So look forward soon to a <code>risch_integrate()</code> that can handle completely any transcendental function of exponentials (either produce an integral or prove that no elementary integral exists).  </p>
<p>And just to be clear, this doesn’t change anything with <code>risch_integrate()</code>—this is only an internal change. And at the moment, it doesn’t add any features, though that should soon change. So keep on testing it for me!  If you see any errors along the lines of “Variable t not defined,” it probably means that I missed that one when I was switching the API due to poor test coverage in that area of the code.  I would love to know about any errors you find, or, indeed, any testing you do with <code>risch_integrate</code>.  Remember that you can obtain my branch at <a href="https://github.com/asmeurer/sympy/tree/integration3">my GitHub account (branch integration3)</a>.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/782/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/782/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/782/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/782/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/782/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/782/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/782/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/782/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/782/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/782/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/782/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/782/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/782/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/782/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=782&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2010-12-27T07:34:30Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-05-22T03:04:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=237</id>
    <link href="http://fseoane.net/blog/2010/weighted-samples-for-svms/" rel="alternate" type="text/html"/>
    <title>Weighted samples for SVMs</title>
    <summary>Based on the work of libsvm-dense by Ming-Wei Chang, Hsuan-Tien Lin, Ming-Hen Tsai, Chia-Hua Ho and Hsiang-Fu Yu I patched the libsvm distribution shipped with scikits.learn to allow setting weights for individual instances. The motivation behind this is to be able force a classifier to focus its attention in some samples instead of others. This [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Based on the work of <a href="http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/#weights_for_data_instances">libsvm-dense</a> by Ming-Wei Chang, Hsuan-Tien Lin, Ming-Hen Tsai, Chia-Hua Ho and Hsiang-Fu Yu I patched the libsvm distribution shipped with scikits.learn to allow setting weights for individual instances.</p>
<p>The motivation behind this is to be able force a classifier to focus its attention in some samples instead of others. <a href="http://scikit-learn.sourceforge.net/auto_examples/svm/plot_weighted_samples.html">This example</a> shows how different weights modify the decision function:</p>
<p><a href="http://scikit-learn.sourceforge.net/auto_examples/svm/plot_weighted_samples.html"><img height="300" src="http://lh5.ggpht.com/_IOBIGAGXP4o/TPOK1z_KKNI/AAAAAAAAADQ/DNZCKc4Zt3w/s400/weights1.png" width="400"/></a></p>
<p><a href="http://picasaweb.google.com/lh/photo/wDNH13zH70UHfohww2iRyA?feat=directlink"><img height="300" src="http://lh4.ggpht.com/_IOBIGAGXP4o/TPOK2B9kUAI/AAAAAAAAADU/68dOJ6Bm3eY/s400/weights2.png" width="400"/></a></p>
<p><a href="http://picasaweb.google.com/lh/photo/ipW2ZqXmjGQMCQntTVpyUg?feat=directlink"><img height="300" src="http://lh5.ggpht.com/_IOBIGAGXP4o/TPOK2UXIRlI/AAAAAAAAADY/xKjk2HKHLdc/s400/weights3.png" width="400"/></a></p></div>
    </content>
    <updated>2010-11-29T11:20:22Z</updated>
    <category term="scikit-learn"/>
    <category term="Tecnolog&#xED;&#xAD;a"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=223</id>
    <link href="http://fseoane.net/blog/2010/coming-soon/" rel="alternate" type="text/html"/>
    <title>Coming soon …</title>
    <summary>Highlights for this release: * New stochastic gradient descent module by Peter Prettenhofer * Improved svm module: memory efficiency, automatic class weights. * Wrap for liblinear’s Multi-class SVC (option multi_class in LinearSVC) * New features and performance improvements of text feature extraction. * Improved sparse matrix support, both in main classes (GridSearch) as in sparse [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://www.flickr.com/photos/fseoane/5203822436/" title="scikits.learn 0.6 por Fabian Pedregosa, en Flickr"><img alt="scikits.learn 0.6" height="306" src="http://farm5.static.flickr.com/4107/5203822436_41b9c350c2.jpg" width="450"/></a></p>
<p>Highlights for this release:</p>
<p>   * New <a href="http://scikit-learn.sourceforge.net/modules/sgd.html">stochastic gradient descent module</a> by <a href="http://sites.google.com/site/peterprettenhofer/">Peter Prettenhofer</a></p>
<p>   * Improved svm module: memory efficiency, automatic class weights.</p>
<p>   * Wrap for liblinear’s Multi-class SVC  (option multi_class in <a href="http://scikit-learn.sourceforge.net/modules/generated/scikits.learn.svm.LinearSVC.html">LinearSVC</a>)</p>
<p>   * New features and performance improvements of text feature extraction.</p>
<p>   * Improved sparse matrix support, both in main classes (GridSearch) as in sparse modules: scikits.learn.svm.sparse and scikits.learn.glm.sparse.</p>
<p>   * Lots of cool new examples: (<a href="https://github.com/scikit-learn/scikit-learn/blob/master/examples/svm/svm_gui.py">here</a>, <a href="https://github.com/scikit-learn/scikit-learn/blob/master/examples/plot_species_distribution_modeling.py">here</a> and <a href="https://github.com/scikit-learn/scikit-learn/blob/master/examples/plot_face_recognition.py">here</a>)</p>
<p>   * New Gaussian Process module by <a href="https://github.com/dubourg">Vincent Dubourg</a> (still to be merged)</p>
<p>   * Faster implementation of the <a href="http://scikit-learn.sourceforge.net/modules/glm.html#lars-algorithm-and-its-variants">LARS algorithm</a>.</p>
<p>   * Probability estimates for logistic regression.</p>
<p>   * Lots of bug fixes and documentation improvements.</p>
<p>   * Probably other things I am forgetting …</p></div>
    </content>
    <updated>2010-11-24T08:39:52Z</updated>
    <category term="scikit-learn"/>
    <category term="Tecnolog&#xED;&#xAD;a"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=209</id>
    <link href="http://fseoane.net/blog/2010/memory-efficient-bindigs-for-libsvm/" rel="alternate" type="text/html"/>
    <title>memory efficient bindigs for libsvm</title>
    <summary>scikits.learn.svm now uses LibSVM-dense instead of LibSVM for some support vector machine related algorithms when input is a dense matrix. As a result most of the copies associated with argument passing are avoided, giving 50% less memory footprint and several times less than the python bindings that ship with libsvm, which stores data in the [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://scikit-learn.sf.net">scikits.learn.svm</a> now uses <a href="http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/#libsvm_for_dense_data">LibSVM-dense</a> instead of <a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/">LibSVM</a> for some support vector machine related algorithms when input is a dense matrix. </p>
<p>As a result most of the copies associated with argument passing are avoided, giving 50% less memory footprint and several times less than the python bindings that ship with libsvm, which stores data in the very inefficient python list structure. On the performance side I didn’t see any significant difference, although on large datasets less memory footprint can make the difference between swapping or not.</p></div>
    </content>
    <updated>2010-11-19T13:08:05Z</updated>
    <category term="General"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6568744196982634289.post-6825008418537862044</id>
    <link href="http://ondrejcertik.blogspot.com/feeds/6825008418537862044/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=6568744196982634289&amp;postID=6825008418537862044" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/6825008418537862044" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/6825008418537862044" rel="self" type="application/atom+xml"/>
    <link href="http://ondrejcertik.blogspot.com/2010/11/google-code-vs-github-for-hosting.html" rel="alternate" type="text/html"/>
    <title>Google Code vs GitHub for hosting opensource projects</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><a href="http://cython.org/">Cython</a> is now considering options where to move the main (mercurial) repository, and <a href="http://www.math.washington.edu/~robertwb/">Robert Bradshaw</a> (one of the main Cython developers) has asked me about my experience with regards to <a href="http://code.google.com/hosting/">Google Code</a> and <a href="http://github.com/">GitHub</a>, since we use both with <a href="http://sympy.org/">SymPy</a>.<br/><br/>Google Code is older, and it was the first service that provided free (virtually unlimited) number of projects that you could easily and immediately setup. At that time (4 years ago?) that was something unheard of. However, the GitHub guys in the meantime not only made this available too, but also implemented features, that (as far as I know) no one offers at all, in particular hosting your own pages at your own domain (but at GitHub's servers, some examples are <a href="http://sympy.org">sympy.org</a> and <a href="http://docs.sympy.org/">docs.sympy.org</a>), commenting on git branches and pull requests <span style="font-style: italic;">before</span> the code gets merged in (I am 100% convinced that this is the right approach, as opposed to comment on the code <span style="font-style: italic;">after</span> it gets in), allow to easily fork the repository and it has simply more social features, that the Google Code doesn't have.<br/><br/>I believe that managing an opensource project is mainly a social activity, and GitHub's social features really make so many things easier. From this point of view, GitHub is clearly the best choice today.<br/><br/>I think there is only one (but potentially big) problem with GitHub, that its issue tracker is very bad, compared to the Google Code one. For that reason (and also because we already use it), we keep our issues at Google Code with SymPy.<br/><br/>The above are the main things to consider. Now there are some little things to keep in mind, that I will briefly touch below: Google Code doesn't support git and blocks access from Cuba and other countries, when you want to change the front page, you need to be an admin, while at GitHub I simply add push access to all sympy developers, so anyone just pushes a patch to this repository: <a href="https://github.com/sympy/sympy.github.com">https://github.com/sympy/sympy.github.com</a>, and it automatically appears on our front page (<a href="http://sympy.org/">sympy.org</a>), with Google Code we had to write long pages (in our docs) about how to send patches, with GitHub we just say, send us a pull request, and point to: <a href="http://help.github.com/pull-requests/">http://help.github.com/pull-requests/</a>. In other words, GitHub takes care of teaching people how to use git and figure out how to send patches, and we can concentrate on reviewing the patches and pushing them in. <br/><br/>Wikipages at github are maintained in git, and they provide the webfrontend to it as <a href="https://github.com/github/gollum">opensource</a>, so there is no vendor lock-in. Anyone with github account can modify our wiki pages, while the Google Code pages can only be modified by people that I add to the Google Code project, which forced us to install mediawiki on my linode server (hosted at <a href="http://linode.com/">linode.com</a>, which by the way is an excellent VPS hosting service, that I have been using for couple of years already and I can fully recommend it), and I had to manage it all the time, and now we are moving our pages to the github wiki, so that I have one less thing to worry about.<br/><br/>So as you can see, I, as admin, have less things to worry about, as github manages everything for me now, while with Google Code, I had to manage lots of things on my linodes.<br/><br/>One other thing to consider is that GitHub is only for git, but they also provide svn and hg access (both push and pull, they translate the repository automatically between git and svn/hg), I never really used it much, so I don't know how stable this is. As I wrote <a href="http://ondrejcertik.blogspot.com/2010/10/git-has-won.html">before</a>, I think that git is the best tool now for maintaining a project, and I think that github is now the best choice to host it (except the issue tracker, where Google Code is better).<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/6568744196982634289-6825008418537862044?l=ondrejcertik.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-11-19T02:52:55Z</updated>
    <published>2010-11-19T02:10:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="debian"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="scipy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="python"/>
    <author>
      <name>Ondřej Čertík</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/02845032202161204018</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6568744196982634289</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02845032202161204018</uri>
      </author>
      <link href="http://ondrejcertik.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://ondrejcertik.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Ondřej Čertík</title>
      <updated>2011-04-21T23:17:59Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6568744196982634289.post-8933668259195859462</id>
    <link href="http://ondrejcertik.blogspot.com/feeds/8933668259195859462/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=6568744196982634289&amp;postID=8933668259195859462" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/8933668259195859462" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/8933668259195859462" rel="self" type="application/atom+xml"/>
    <link href="http://ondrejcertik.blogspot.com/2010/10/git-has-won.html" rel="alternate" type="text/html"/>
    <title>git has won</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I switched to git from mercurial about two years ago. See here why I <a href="http://ondrejcertik.blogspot.com/2008/08/i-am-switching-from-mercurial-to-git.html">switched</a> and here my experience <a href="http://ondrejcertik.blogspot.com/2008/12/experience-with-git-after-4-months.html">after 4 months</a>. Back then I was unsure, whether git will win, but I thought it has a bigger momentum. Well, I think that now it's quite clear that git has already won. Pretty much everybody that I collaborate with is using git now.<br/><br/>I use github everyday, and now thanks to github <a href="http://help.github.com/pull-requests/">pull requests</a>, I think it's the best collaboration platform out there (compared to Google Code, Sourceforge, Bitbucket or Launchpad).<br/><br/>I think it's partly because the github guys have a clear vision of what has to be done in order to make collaboration more easier and they do it, but more importantly that git branches is the way to go, as well as other git features, that are "right" from the beginning (branches, interactive rebase, and so on), while other VCS like bzr and mercurial simply either don't have them, or are getting them, but it's hard to get used to it (for example mercurial uses the "mercurial queues", and I think that is the totally wrong approach to things).<br/><br/>Anyway, this is just my own personal opinion. I'll be happy to discuss it in the comments, if you disagree.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/6568744196982634289-8933668259195859462?l=ondrejcertik.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-10-31T07:40:59Z</updated>
    <published>2010-10-31T07:26:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="debian"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="scipy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="python"/>
    <author>
      <name>Ondřej Čertík</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/02845032202161204018</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6568744196982634289</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02845032202161204018</uri>
      </author>
      <link href="http://ondrejcertik.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://ondrejcertik.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Ondřej Čertík</title>
      <updated>2011-04-21T23:17:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=192</id>
    <link href="http://fseoane.net/blog/2010/solve_triangular-in-scipy-linalg/" rel="alternate" type="text/html"/>
    <title>solve_triangular in scipy.linalg</title>
    <summary>For some time now I’ve been missing a function in scipy that exploits the triangular structure of a matrix to efficiently solve the associated system, so I decided to implement it by binding the LAPACK method “trtrs”, which also checks for singularities and is capable handling several right-hand sides. Contrary to what I expected, binding [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>For some time now I’ve been missing a function in scipy that exploits the triangular structure of a matrix to efficiently solve the associated system, so I decided to <a href="http://projects.scipy.org/scipy/changeset/6844">implement it</a> by binding the LAPACK method “trtrs”, which also checks for singularities and is capable handling several right-hand sides. </p>
<p>Contrary to what I expected, binding Fortran code with f2py is pretty straightforward, even for someone like me who has never programmed in that language: I took a similar example, modified it’s parameters and it worked! Also, thanks to Pauli Virtanen the review process was really fast and the patch was committed within a few hours.</p>
<p>The high level interface for LAPACK’s trtrs is linalg.solve_triangular, which accepts roughly the same arguments as linalg.solve, but assumes the first argument is a triangular matrix:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">In <span style="color: black;">[</span><span style="color: #ff4500;">1</span><span style="color: black;">]</span>: <span style="color: #ff7700; font-weight: bold;">from</span> scipy <span style="color: #ff7700; font-weight: bold;">import</span> linalg<br/>
<br/>
In <span style="color: black;">[</span><span style="color: #ff4500;">2</span><span style="color: black;">]</span>: linalg.<span style="color: black;">solve_triangular</span><span style="color: black;">(</span><span style="color: black;">[</span><span style="color: black;">[</span><span style="color: #ff4500;">1</span>, <span style="color: #ff4500;">1</span><span style="color: black;">]</span>, <span style="color: black;">[</span><span style="color: #ff4500;">0</span>, <span style="color: #ff4500;">1</span><span style="color: black;">]</span><span style="color: black;">]</span>, <span style="color: black;">[</span><span style="color: #ff4500;">0</span>, <span style="color: #ff4500;">1</span><span style="color: black;">]</span><span style="color: black;">)</span><br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">2</span><span style="color: black;">]</span>: <span style="color: #dc143c;">array</span><span style="color: black;">(</span><span style="color: black;">[</span>-<span style="color: #ff4500;">1</span>.,  <span style="color: #ff4500;">1</span>.<span style="color: black;">]</span><span style="color: black;">)</span></div></div>
<p>Simple <a href="http://gist.github.com/654407">benchmarks</a> lets us clearly appreciate the complexity gap between both methods : solving an (n, n) triangular system is an O(n^2) operation, while solving a full one is at least a O(n^3):</p>
<table style="width: auto;">
<tbody><tr>
<td><a href="http://picasaweb.google.com/lh/photo/8IaZpyMK_An_OLX38r3Xow?feat=embedwebsite"><img height="300" src="http://lh3.ggpht.com/_IOBIGAGXP4o/TMs3PvgFIwI/AAAAAAAAABA/ImOSqSZmljA/s400/works.png" width="400"/></a></td>
</tr>
<tr>
<td style="font-family: arial,sans-serif; font-size: 11px; text-align: right;">From <a href="http://picasaweb.google.com/fabian.pedregosa.izquierdo/Screenshots?feat=embedwebsite">Screenshots</a></td>
</tr>
</tbody></table></div>
    </content>
    <updated>2010-10-29T23:13:22Z</updated>
    <category term="scipy"/>
    <category term="Tecnolog&#xED;&#xAD;a"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/2010/lars-algorithm/</id>
    <link href="http://fseoane.net/blog/2010/lars-algorithm/" rel="alternate" type="text/html"/>
    <title>LARS algorithm</title>
    <summary>I’ve been working lately with Alexandre Gramfort coding the LARS algorithm in scikits.learn. This algorithm computes the solution to several general linear models used in machine learning: LAR, Lasso, Elasticnet and Forward Stagewise. Unlike the implementation by coordinate descent, the LARS algorithm gives the full coefficient path along the regularization parameter, and thus it is [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been working lately with <a href="http://www-sop.inria.fr/members/Alexandre.Gramfort/">Alexandre Gramfort</a> coding the <a href="http://scikit-learn.sf.net/modules/glm.html#lars-algorithm-and-its-variants">LARS algorithm</a> in <a>scikits.learn</a>. This algorithm computes the solution to several general linear models used in machine learning: LAR, Lasso, Elasticnet and Forward Stagewise.</p>
<p>Unlike the implementation by coordinate descent, the LARS algorithm gives the full coefficient path along the regularization parameter, and thus it is specially well suited for performing model selection. </p>
<p><a href="http://scikit-learn.sourceforge.net/auto_examples/glm/plot_lasso_lars.html"><img alt="LassoLARS" src="http://scikit-learn.sourceforge.net/_images/plot_lasso_lars.png" style="height: 400px;"/></a></p>
<p>The algorithm is coded mostly in python, with some tiny parts in C (because I already had the code for cholesky deletes in C) and a cython interface for the blas function dtrsv, which will be proposed to scipy once I stabilize this code. The algorithm is mostly complete, allowing some optimizations, like using a precomputed Gram matrix or specify maximum number of features/iterations, but could still be extended to compute other models, like ElasticNet or Forward Stagewise.</p>
<p>I haven’t done any benchmarks yet, but preliminary ones by Alexandre Gramfort showed that it is roughly equivalent to this <a href="http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=3897">Matlab implementation</a>. Using <a href="http://pymvpa.org">PyMVPA</a>, it shouldn’t be difficult to benchmark it against th R implementation, though.</p></div>
    </content>
    <updated>2010-09-30T14:01:33Z</updated>
    <category term="General"/>
    <category term="scikit-learn"/>
    <category term="Tecnolog&#xED;&#xAD;a"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-4754734402679928849.post-4696399575844014395</id>
    <link href="http://fredrik-j.blogspot.com/feeds/4696399575844014395/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=4754734402679928849&amp;postID=4696399575844014395" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/4696399575844014395" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/4696399575844014395" rel="self" type="application/atom+xml"/>
    <link href="http://fredrik-j.blogspot.com/2010/09/announcing-mpmath-016.html" rel="alternate" type="text/html"/>
    <title>Announcing mpmath 0.16</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I'm happy to announce the release of <a href="http://code.google.com/p/mpmath/">mpmath 0.16</a>, which contains the usual bugfixes as well as a slew of new features!<br/><br/>The main focus has been to improve coverage of special functions. Additions include inhomogeneous Bessel functions, Bessel function zeros, incomplete elliptic integrals, and parabolic cylinder functions. As of 0.16, mpmath implements essentially everything listed in the <a href="http://dlmf.nist.gov/">NIST Digital Library of Mathematical Functions</a> chapters 1-20, as well as 21,24,27 and 33. (For 25 and 26 -- combinatorial and number-theoretic functions, see also my post about <a href="http://fredrik-j.blogspot.com/2010/09/fast-combinatorial-and-number-theoretic.html">FLINT 2</a>.)<br/><br/>Another major change is that mpmath 0.16 running in <a href="http://www.sagemath.org/">Sage</a> will be much faster thanks to new extension code (currently awaiting review for inclusion in Sage). I've clocked speedups between 1.3x and 2x for various nontrivial pieces of code (such as the mpmath test suite and the torture test programs).<br/><br/>Thanks to William Stein, my work on mpmath during the summer was funded using resources from <a href="http://www.nsf.gov/awardsearch/showAward.do?AwardNumber=0757627&amp;version=noscript">NSF grant DMS-0757627</a>. This support is gratefully acknowledged.<br/><br/>Most of the new features are described in previous posts on this blog. For convenience, here is a short summary:<br/><br/><a href="http://fredrik-j.blogspot.com/2010/06/assorted-special-functions-update.html">Assorted special functions update</a><ul><br/><li>The documentation now includes plots to illustrate several of the special functions.</li><br/><li>Airy functions have been rewritten for improved speed and accuracy and to support evaluation of derivatives.</li><br/><li>Functions <tt>airyaizero()</tt>, <tt>airybizero()</tt> for computation of Airy function zeros have been implemented.</li><br/><li>Inhomogeneous Airy (Scorer) functions <tt>scorergi()</tt> and <tt>scorerhi()</tt> have been implemented.</li><br/><li>Four inhomogeneous Bessel functions have been added (<tt>lommels1()</tt>, <tt>lommels2()</tt>, <tt>angerj()</tt>, <tt>webere()</tt>).</li><br/><li>The Lambert W function has been rewritten to fix various bugs and numerical issues</li><br/></ul><br/><a href="http://fredrik-j.blogspot.com/2010/06/incomplete-elliptic-integrals-complete.html">Incomplete elliptic integrals complete</a><ul><br/><li>The Legendre and Carlson incomplete elliptic integrals for real and complex arguments have been implemented (<tt>ellipf()</tt>, <tt>ellipe()</tt>, <tt>ellippi()</tt>, <tt>elliprf()</tt>, <tt>elliprc()</tt>, <tt>elliprj()</tt>, <tt>elliprd()</tt>, <tt>elliprg()</tt>).</li><br/></ul><br/><a href="http://fredrik-j.blogspot.com/2010/07/sage-days-23-and-bessel-function-zeros.html">Sage Days 23, and Bessel function zeros</a><br/><ul><br/><li>Functions <tt>besseljzero()</tt> and <tt>besselyzero()</tt> have been implemented for computing the <i>m</i>-th zero of <i>J<sub>ν</sub></i>(<i>z</i>), <i>J'<sub>ν</sub></i>(<i>z</i>) <i>Y<sub>ν</sub></i>(<i>z</i>), or <i>Y'<sub>ν</sub></i>(<i>z</i>) for any positive integer index <i>m</i> and real order ν ≥ 0.<br/></li><br/></ul><br/><a href="http://fredrik-j.blogspot.com/2010/07/post-sage-days-24-report.html">Post Sage Days 24 report</a><br/><ul><br/><li>The Parabolic cylinder functions <tt>pcfd()</tt>, <tt>pcfu()</tt>, <tt>pcfv()</tt>, <tt>pcfw()</tt> have been implemented.</li><br/></ul><br/><a href="http://fredrik-j.blogspot.com/2010/07/euler-maclaurin-summation-of.html">Euler-Maclaurin summation of hypergeometric series</a><br/><ul><br/><li>Hypergeometric functions <sub><i>p</i></sub><i>F</i><sub><i>p</i>-1</sub>(...; ...; <i>z</i>) now support accurate evaluation close to the singularity at <i>z</i> = 1.</li><br/><li>A function <tt>sumap()</tt> has been added for summation of infinite series using the Abel-Plana formula.</li><br/><li>Functions <tt>diffs_prod()</tt> and <tt>diffs_prod()</tt> have been added for generating high-order derivatives of products or exponentials of functions with known derivatives.</li><br/></ul><br/><a href="http://fredrik-j.blogspot.com/2010/09/again-mpmath-in-sage-is-about-to-get.html">Again, mpmath in Sage is about to get faster</a><br/><ul><br/><li>New Cython extension code has been written for Sage to speed up various operations in mpmath, including elementary functions and hypergeometric series.</li><br/></ul><br/><br/>There are various other changes as well, such as support for matrix slice indexing (contributed by Ioannis Tziakos -- thanks!). As usual, details are available in the <a href="http://mpmath.googlecode.com/svn/trunk/CHANGES">changelog</a> and the <a href="http://code.google.com/p/mpmath/source/list">Changes</a> page on the Google Code project site.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/4754734402679928849-4696399575844014395?l=fredrik-j.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-09-24T16:32:18Z</updated>
    <published>2010-09-24T15:27:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="mpmath"/>
    <author>
      <name>Fredrik Johansson</name>
      <email>fredrik.johansson@gmail.com</email>
      <uri>http://www.blogger.com/profile/01465400860530971858</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-4754734402679928849</id>
      <author>
        <name>Fredrik Johansson</name>
        <email>fredrik.johansson@gmail.com</email>
        <uri>http://www.blogger.com/profile/01465400860530971858</uri>
      </author>
      <link href="http://fredrik-j.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://fredrik-j.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Fredrik Johansson</title>
      <updated>2011-04-22T00:51:59Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-4754734402679928849.post-6858896334629563490</id>
    <link href="http://fredrik-j.blogspot.com/feeds/6858896334629563490/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=4754734402679928849&amp;postID=6858896334629563490" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/6858896334629563490" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/6858896334629563490" rel="self" type="application/atom+xml"/>
    <link href="http://fredrik-j.blogspot.com/2010/09/again-mpmath-in-sage-is-about-to-get.html" rel="alternate" type="text/html"/>
    <title>Again, mpmath in Sage is about to get faster</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">My summer project on special functions in mpmath and Sage, generously supported by William Stein with funds from <a href="http://www.nsf.gov/awardsearch/showAward.do?AwardNumber=0757627&amp;version=noscript">NSF grant DMS-0757627</a>, is nearing completion. I will soon release mpmath-0.16, which contains lots of new special functions and bugfixes. Sage users will also benefit from ~1500 lines of new Cython code (preliminary patch <a href="http://trac.sagemath.org/sage_trac/ticket/9969">here</a>) that speeds up various basic operations. Executing <tt>mpmath.runtests()</tt> in Sage on my laptop now takes 10.47 seconds (8.60 from a warm cache), compared to 14.21 (11.84) seconds with the new extensions disabled -- a global speedup of 30%.<br/><br/>For comparison, pure-Python mpmath with <a href="http://code.google.com/p/gmpy/">gmpy</a> as the backend takes 21.46 (18.72) seconds to execute the unit tests and pure-Python mpmath with the pure-Python backend takes 52.33 (45.92) seconds.<br/><br/>Specifically, the new extension code implements exp for real and complex arguments, cos, sin and ln for real arguments, complex exponentiation in some cases, and summation of hypergeometric series, entirely in Cython.<br/><br/>Timings before (new extensions disabled):<br/><pre><br/>sage: import mpmath<br/>sage: x = mpmath.mpf(0.37)<br/>sage: y = mpmath.mpf(0.49)<br/>sage: %timeit mpmath.exp(x)<br/>625 loops, best of 3: 14.5 µs per loop<br/>sage: %timeit mpmath.ln(x)<br/>625 loops, best of 3: 23.2 µs per loop<br/>sage: %timeit mpmath.cos(x)<br/>625 loops, best of 3: 17.2 µs per loop<br/>sage: %timeit x ^ y<br/>625 loops, best of 3: 39.9 µs per loop<br/>sage: %timeit mpmath.hyp1f1(2r,3r,4r)<br/>625 loops, best of 3: 90.3 µs per loop<br/>sage: %timeit mpmath.hyp1f1(x,y,x)<br/>625 loops, best of 3: 83.6 µs per loop<br/>sage: %timeit mpmath.hyp1f1(x,y,mpmath.mpc(x,y))<br/>625 loops, best of 3: 136 µs per loop<br/></pre><br/><br/>Timings after (new extensions enabled):<br/><pre><br/>sage: import mpmath<br/>sage: x = mpmath.mpf(0.37)<br/>sage: y = mpmath.mpf(0.49)<br/>sage: %timeit mpmath.exp(x)<br/>625 loops, best of 3: 2.72 µs per loop<br/>sage: %timeit mpmath.ln(x)<br/>625 loops, best of 3: 7.25 µs per loop<br/>sage: %timeit mpmath.cos(x)<br/>625 loops, best of 3: 4.13 µs per loop<br/>sage: %timeit x ^ y<br/>625 loops, best of 3: 10.5 µs per loop<br/>sage: %timeit mpmath.hyp1f1(2r,3r,4r)<br/>625 loops, best of 3: 47.1 µs per loop<br/>sage: %timeit mpmath.hyp1f1(x,y,x)<br/>625 loops, best of 3: 59.4 µs per loop<br/>sage: %timeit mpmath.hyp1f1(x,y,mpmath.mpc(x,y))<br/>625 loops, best of 3: 83.1 µs per loop<br/></pre><br/><br/>The new elementary functions use a combination of custom algorithms and straightforward <a href="http://www.mpfr.org/">MPFR</a> wrappers. Why not just wrap MPFR for everything? There are two primary reasons:<br/><br/>Firstly, because MPFR numbers have a limited range, custom code still needs to be used in the overflowing cases, and this is almost as much work as an implementation-from-scratch. (There are also some more minor incompatibilities, like lack of round-away-from-zero in MPFR, that result in a lot of extra work.)<br/><br/>Secondly, MPFR is not always fast (or as fast as it could be), so it pays off to write custom code. In fact, some of the ordinary Python implementations of functions in mpmath are faster than their MPFR counterparts in various cases, although that is rather exceptional (atan is an example). But generally, at low-mid precisions, it is possible to be perhaps 2-4x faster than MPFR with carefully optimized C code (see <a href="http://code.google.com/p/fastfunlib/">fastfunlib</a>). This is a longer-term goal.<br/><br/>Already now, with the new extension code, the mpmath exponential function becomes faster than the Sage RealNumber version (based on MPFR) at low precision:<br/><pre><br/>sage: %timeit mpmath.exp(x)<br/>625 loops, best of 3: 2.75 µs per loop<br/>sage: w = RealField(53)(x)<br/>sage: %timeit w.exp()<br/>625 loops, best of 3: 5.57 µs per loop<br/></pre><br/><br/>As the timings above indicate, hypergeometric series have gotten up to 2x faster. The speedup of the actual summation is much larger, but much of that gain is lost in various Python overheads (more work can be done on this). There should be a noticeable speedup for some hypergeometric function computations, while others will not benefit as much, for the moment.<br/><br/>Another benchmark is the <tt>extratest_zeta.py</tt> script in mpmath, which exercises the mpmath implementation of the <a href="http://en.wikipedia.org/wiki/Riemann%E2%80%93Siegel_formula">Riemann-Siegel formula</a> for evaluation of ζ(<i>s</i>) for complex <i>s</i> with large imaginary part. Such computations largely depend on elementary function performance (cos, sin, exp, log).<br/><br/>Here are the new timings for mpmath in Sage: <pre><br/>fredrik@scv:~/sage$ ./sage /home/fredrik/mp/mpmath/tests/extratest_zeta.py<br/>399999999 156762524.675 ok = True (time = 1.144)<br/>241389216 97490234.2277 ok = True (time = 9.271)<br/>526196239 202950727.691 ok = True (time = 1.671)<br/>542964976 209039046.579 ok = True (time = 1.189)<br/>1048449112 388858885.231 ok = True (time = 1.774)<br/>1048449113 388858885.384 ok = True (time = 1.604)<br/>1048449114 388858886.002 ok = True (time = 2.096)<br/>1048449115 388858886.002 ok = True (time = 2.587)<br/>1048449116 388858886.691 ok = True (time = 1.546)<br/></pre><br/>This is mpmath in Sage with the new extension code disabled: <pre><br/>fredrik@scv:~/sage$ ./sage /home/fredrik/mp/mpmath/tests/extratest_zeta.py<br/>399999999 156762524.675 ok = True (time = 2.352)<br/>241389216 97490234.2277 ok = True (time = 14.088)<br/>526196239 202950727.691 ok = True (time = 3.036)<br/>542964976 209039046.579 ok = True (time = 2.104)<br/>1048449112 388858885.231 ok = True (time = 3.707)<br/>1048449113 388858885.384 ok = True (time = 3.283)<br/>1048449114 388858886.002 ok = True (time = 4.444)<br/>1048449115 388858886.002 ok = True (time = 5.592)<br/>1048449116 388858886.691 ok = True (time = 3.101)<br/></pre><br/>This is mpmath in ordinary Python mode, using gmpy: <pre><br/>fredrik@scv:~/sage$ python /home/fredrik/mp/mpmath/tests/extratest_zeta.py<br/>399999999 156762524.675 ok = True (time = 2.741)<br/>241389216 97490234.2277 ok = True (time = 13.842)<br/>526196239 202950727.691 ok = True (time = 3.124)<br/>542964976 209039046.579 ok = True (time = 2.143)<br/>1048449112 388858885.231 ok = True (time = 3.257)<br/>1048449113 388858885.384 ok = True (time = 2.912)<br/>1048449114 388858886.002 ok = True (time = 3.953)<br/>1048449115 388858886.002 ok = True (time = 4.964)<br/>1048449116 388858886.691 ok = True (time = 2.762)<br/></pre><br/>With the new extension code, it appears that zeta computations are up to about twice as fast. This speedup could be made much larger as there still is a significant amount of Python overhead left to remove -- also a project for the future.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/4754734402679928849-6858896334629563490?l=fredrik-j.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-09-22T14:42:55Z</updated>
    <published>2010-09-22T13:20:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="mpmath"/>
    <author>
      <name>Fredrik Johansson</name>
      <email>fredrik.johansson@gmail.com</email>
      <uri>http://www.blogger.com/profile/01465400860530971858</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-4754734402679928849</id>
      <author>
        <name>Fredrik Johansson</name>
        <email>fredrik.johansson@gmail.com</email>
        <uri>http://www.blogger.com/profile/01465400860530971858</uri>
      </author>
      <link href="http://fredrik-j.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://fredrik-j.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Fredrik Johansson</title>
      <updated>2011-04-22T00:51:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/2010/second-scikitslearn-coding-sprint/</id>
    <link href="http://fseoane.net/blog/2010/second-scikitslearn-coding-sprint/" rel="alternate" type="text/html"/>
    <title>Second scikits.learn coding sprint</title>
    <summary>Las week took place in Paris the second scikits.learn sprint. It was two days of insane activity (115 commits, 6 branches, 33 coffees) in which we did a lot of work, both implementing new algorithms and fixing or improving old ones. This includes: * sparse version of Lasso by coordinate descent. Not (yet) merged into [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Las week took place in Paris the second <a href="http://scikit-learn.sf.net">scikits.learn</a> sprint. It was<br/>
two days of insane activity (115 commits, 6 branches, 33 coffees) in<br/>
which we did a lot of work, both implementing new algorithms and fixing<br/>
or improving old ones. This includes:</p>
<p>  * sparse version of Lasso by coordinate descent. Not (yet) merged into master, but can be looked from <a href="http://github.com/ogrisel/scikit-learn/tree/issue-77-sparse-cd">Olivier’s branch</a>.</p>
<p>  * new API for Pipeline. An example of this can be found in the document <a href="http://scikit-learn.sourceforge.net/auto_examples/svm/plot_svm_anova.html">SVM-Anova: SVM with univariate feature selection</a>.</p>
<p>  * documentation for the <a href="http://scikit-learn.sourceforge.net/modules/glm.html#bayesian-regression">bayesian methods</a> and <a href="http://scikit-learn.sourceforge.net/cross_validation.html">cross validation</a>: Vincent Michel contributed a lot of documentation, mainly taken from chapters of his thesis.</p>
<p>  * <a href="http://github.com/scikit-learn/scikit-learn/blob/master/scikits/learn/covariance/ledoit_wolf.py">Ledoit-Wolf covariance estimation</a>.</p>
<p>  * Pure python <a href="http://github.com/scikit-learn/scikit-learn/blob/master/scikits/learn/fastica.py">Fast ICA</a> implementation.</p>
<p>And the family picture, featuring (from left to right): <a href="http://www-sop.inria.fr/members/Alexandre.Gramfort/index.fr.html">Alexandre Gramfort</a>, <a href="http://parietal.saclay.inria.fr/Members/bertrand-thirion">Bertrand Thirion</a>, <a href="http://parietal.saclay.inria.fr/Members/virgile-fritsch">Virgine Fritsch</a>, <a href="http://gael-varoquaux.info/">Gael Varoquaux</a>, <a href="http://parietal.saclay.inria.fr/Members/vincent-michel">Vincent Michel</a>, <a href="http://github.com/ogrisel">Olivier Grisel</a> and me (taking the picture).<br/>
<a href="http://www.flickr.com/photos/fseoane/4974339970/" title="scikit-learn coding sprint por Fabian Pedregosa, en Flickr"><img alt="scikit-learn coding sprint" height="375" src="http://farm5.static.flickr.com/4135/4974339970_566424185f.jpg" width="500"/></a></p></div>
    </content>
    <updated>2010-09-12T20:31:21Z</updated>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-4754734402679928849.post-5343369310477112221</id>
    <link href="http://fredrik-j.blogspot.com/feeds/5343369310477112221/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=4754734402679928849&amp;postID=5343369310477112221" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/5343369310477112221" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/5343369310477112221" rel="self" type="application/atom+xml"/>
    <link href="http://fredrik-j.blogspot.com/2010/09/fast-combinatorial-and-number-theoretic.html" rel="alternate" type="text/html"/>
    <title>Fast combinatorial and number-theoretic functions with FLINT 2</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Time for a development update! Recently, I've done only a limited amount of work on mpmath (I have a some almost-finished Cython code for <tt>sage.libs.mpmath</tt> and new code for numerical integration in mpmath, both to be committed fairly soon -- within a couple of weeks, hopefully).<br/><br/>The last few weeks, I've mostly been contributing to <a href="http://www.flintlib.org/">FLINT 2</a>. For those unfamiliar with it, FLINT is a fast C library for computational number theory developed by Bill Hart and others (the other active developers right now are Sebastian Pancratz and Andy Novocin). In particular, FLINT implements ridiculously fast multiprecision integer vectors and polynomials. It also provides very fast primality testing and factorization for word-size integers (32 or 64 bits), among other things. FLINT 2 is an in-progress rewrite of FLINT 1.x, a current standard component in Sage.<br/><br/>What does this have to do with numerical evaluation of special functions (the usual theme of this blog)? In short, my goal is to add code to FLINT 2 for <i>exact</i> special function computations -- combinatorial and number-theoretic functions, special polynomials and the like. Such functions benefit tremendously from the fast integer and polynomial arithmetic available in FLINT 2.<br/><br/>All my code can be found in my <a href="http://github.com/fredrik-johansson/flint2/">public GitHub repository</a> (the most recent commits as of this writing are in the 'factor' branch).<br/><br/>Functions I've implemented so far include:<br/><ul><br/><li>Möbius μ and Euler φ (totient) functions for word-size and arbitrary-size integers</li><br/><li>Divisor sum function σ<sub><i>k</i></sub> for arbitrary-size integers</li><br/><li>Ramanujan τ function (Δ-function <i>q</i>-expansion)</li><br/><li>Harmonic numbers 1 + 1/2 + 1/3 + ... + 1/<i>n</i></li><br/><li>Primorials 2 · 3 · 5 · ... · <i>p</i><sub><i>n</i></sub></li><br/><li>Stirling numbers (1st and 2nd kind)</li><br/></ul><br/><br/>The versions in FLINT 2 of these functions should now be faster than all other implementations I've tried (GAP, Pari, Mathematica, the Sage library) for all ranges of arguments, except for those requiring factorization of large integers.<br/><br/>Some of these functions depend fundamentally on the ability to factorize integers efficiently. So far I've only implemented trial division for large integers in FLINT 2, with some clever code to extract large powers of small factors quickly. Sufficiently small cofactors are handled by calling Bill Hart's single-word factoring routines. The resulting code is very fast for "artificial" numbers like factorials, and will eventually be complemented with prime and perfect power detection code, plus fast implementations of Brent's algorithm and other methods. Later on the quadratic sieve from FLINT 1 will probably be ported to FLINT 2, so that FLINT 2 will be able to factor any reasonable number reasonably quickly.<br/><br/>Below, I've posted some benchmark results. A word of caution: all Mathematica timings were done on a different system, which is faster than my own laptop (typically by 30% or so). So in reality, Mathematica performs slightly worse relatively than indicated below. Everything else is timed on my laptop. I have not included test code for the FLINT2 functions (but it's just straightforward C code -- a function call or two between <tt>timeit_start</tt> and <tt>timeit_stop</tt> using FLINT 2's profiler module).<br/><br/>Möbius function (the following is basically a raw exercise of the small-integer factoring code):<br/><pre><br/>Pari:<br/>sage: %time pari('sum(n=1,10^6,moebius(n))');<br/>CPU times: user 1.04 s, sys: 0.00 s, total: 1.04 s<br/>Wall time: 1.04 s<br/><br/>Mathematica:<br/>In[1]:= Timing[Sum[MoebiusMu[n], {n,1,10^6}];]<br/>Out[1]= {0.71, Null}<br/><br/>flint2:<br/>650 ms<br/></pre><br/><br/>Divisor sum:<br/><pre><br/>Sage (uses Cython code):<br/>sage: %time sigma(factorial(1000),1000);<br/>CPU times: user 0.47 s, sys: 0.00 s, total: 0.47 s<br/>Wall time: 0.46 s<br/><br/>Mathematica:<br/>In[1]:= Timing[DivisorSigma[1000,1000!];]<br/>Out[1]= {3.01, Null}<br/><br/>flint2:<br/>350 ms<br/></pre><br/><br/>Ramanujan τ function:<br/><pre><br/>Sage (uses FLINT 1):<br/>sage: %time delta_qexp(100000);<br/>CPU times: user 0.42 s, sys: 0.01 s, total: 0.43 s<br/>Wall time: 0.42 s<br/>sage: %time delta_qexp(1000000);<br/>CPU times: user 6.02 s, sys: 0.37 s, total: 6.39 s<br/>Wall time: 6.40 s<br/><br/>flint2:<br/>100000: 230 ms<br/>1000000: 4500 ms<br/></pre><br/><br/>An isolated value (Mathematica seems to be the only other software that knows how to compute this):<br/><pre><br/>Mathematica:<br/>In[1]:= Timing[RamanujanTau[10000!];]<br/>Out[1]= {8.74, Null}<br/><br/>flint2:<br/>280 ms<br/></pre><br/><br/>Harmonic numbers (again, only Mathematica seems to implement these). See also my old blog post <a href="http://fredrik-j.blogspot.com/2009/02/how-not-to-compute-harmonic-numbers.html">How (not) to compute harmonic numbers</a>. I've included the fastest version from there, harmonic5:<br/><br/><pre><br/>Mathematica:<br/>In[1]:= Timing[HarmonicNumber[100000];]<br/>Out[1]= {0.22, Null}<br/>In[2]:= Timing[HarmonicNumber[1000000];]<br/>Out[2]= {6.25, Null}<br/>In[3]:= Timing[HarmonicNumber[10000000];]<br/>Out[3]= {129.13, Null}<br/><br/>harmonic5: (100000):<br/>100000: 0.471 s<br/>1000000: 8.259 s<br/>10000000: 143.639 s<br/><br/>flint2:<br/>100000: 100 ms<br/>1000000: 2560 ms<br/>10000000: 49400 ms<br/></pre><br/><br/>The FLINT 2 function benefits from an improved algorithm that eliminates terms and reduces the size of the temporary numerators and denominators, as well as low-level optimization (the basecase summation directly uses the MPIR mpn interface).<br/><br/>Isolated Stirling numbers of the first kind:<br/><br/><pre><br/>Mathematica:<br/>In[1]:= Timing[StirlingS1[1000,500];]<br/>Out[1]= {0.24, Null}<br/>In[2]:= Timing[StirlingS1[2000,1000];]<br/>Out[2]= {1.79, Null}<br/>In[3]:= Timing[StirlingS1[3000,1500];]<br/>Out[3]= {5.13, Null}<br/><br/>flint 2:<br/>100,500: 100 ms<br/>2000,1000: 740 ms<br/>3000,1500: 1520 ms<br/></pre><br/><br/>Isolated Stirling numbers of the second kind:<br/><pre><br/>Mathematica:<br/>In[1]:= Timing[StirlingS2[1000,500];]<br/>Out11]= {0.21, Null}<br/>In[2]:= Timing[StirlingS2[2000,1000];]<br/>Out[2]= {1.54, Null}<br/>In[3]:= Timing[StirlingS2[3000,1500];]<br/>Out[3]= {4.55, Null}<br/>In[4]:= Timing[StirlingS2[5000,2500];]<br/>Out[4]= {29.25, Null}<br/><br/>flint2:<br/>1000,500: 2 ms<br/>2000,1000: 17 ms<br/>3000,1500: 50 ms<br/>5000,2500: 240 ms<br/></pre><br/><br/>In addition, fast functions are provided for computing a whole row or matrix of Stirling numbers. For example, computing the triangular matrix of ~1.1 million Stirling numbers of the first kind up to S(1500,1500) takes only 1.3 seconds. In Mathematica (again, on the faster system):<br/><pre><br/>In[1]:= Timing[Table[StirlingS1[n,k], {n,0,1500}, {k,0,n}];]<br/>Out[1]= {2.13, Null}<br/></pre><br/><br/>The benchmarks above mostly demonstrate performance for large inputs. Another nice aspect of the FLINT 2 functions is that there typically is very little overhead for small inputs. The high performance is due to a combination of algorithms, low-level optimization, and (most importantly) the fast underlying arithmetic in FLINT 2. I will perhaps write some more about the algorithms (for e.g. Stirling numbers) in a later post.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/4754734402679928849-5343369310477112221?l=fredrik-j.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-09-05T19:38:55Z</updated>
    <published>2010-09-05T14:50:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="mpmath"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="flint"/>
    <author>
      <name>Fredrik Johansson</name>
      <email>fredrik.johansson@gmail.com</email>
      <uri>http://www.blogger.com/profile/01465400860530971858</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-4754734402679928849</id>
      <author>
        <name>Fredrik Johansson</name>
        <email>fredrik.johansson@gmail.com</email>
        <uri>http://www.blogger.com/profile/01465400860530971858</uri>
      </author>
      <link href="http://fredrik-j.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://fredrik-j.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Fredrik Johansson</title>
      <updated>2011-04-22T00:51:59Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9135222751616024074.post-3829230650064961450</id>
    <link href="http://mattjcurry.blogspot.com/feeds/3829230650064961450/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://mattjcurry.blogspot.com/2010/07/more-improvements-and-nice-printing.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/9135222751616024074/posts/default/3829230650064961450" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/9135222751616024074/posts/default/3829230650064961450" rel="self" type="application/atom+xml"/>
    <link href="http://mattjcurry.blogspot.com/2010/07/more-improvements-and-nice-printing.html" rel="alternate" type="text/html"/>
    <title>More Improvements and Nice Printing</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week was quite spread out in terms of what I coded in quantum.py. I made inner products work with operators and other objects in between them. We made <i>pretty</i> print work with various quantum classes. And finally I made a suite of validating/combining/separating functions for inner and outer products.
<br/>
<br/><b>First of all, let's look at how </b><i><b>pretty</b></i><b> makes quantum objects very readable. Let's create the iconic psi state (ket):</b>
<br/>
<br/>
<br/>In [5]: psi = Ket('psi')
<br/>
<br/>In [6]: psi
<br/>Out[6]: |ψ&gt;
<br/>
<br/><b>Next let's create an operator and dagger it (and leave it unevaluated):</b>
<br/>
<br/>
<br/>In [9]: a = Operator('A')
<br/>
<br/>In [10]: Dagger(a)
<br/>Out[10]:
<br/>†
<br/>A
<br/>
<br/>(the dagger symbol normally appears as a superscript to A, but Blogger is temperamental)
<br/>
<br/><b>Inner products can have objects (mainly operators) between them now. Outer products will not have this functionality because it is not valid for them. When someone creates an inner product, they must instantiate the class because states and operators (and such) cannot automatically combine with their __mul__ method due to a very tricky reason (the subtlety lies deep within sympy's Mul class):</b>
<br/><div><div><div>
<br/></div><div>In [12]: bra = Bra('_a')</div><div>
<br/></div><div>In [13]: b = Operator('B')</div></div></div><div>
<br/></div><div><div>In [15]: ip = InnerProduct(bra, b, a, psi)</div><div>
<br/></div><div>In [16]: ip</div><div>Out[16]: &lt;_a|⋅b⋅a⋅|ψ&gt;</div><div>
<br/></div><div>In [17]: ip.bra</div><div>Out[17]: &lt;_a|</div></div><div>
<br/></div><div><div>In [19]: ip.ket</div><div>Out[19]: (B, A, |ψ&gt;)</div><div>
<br/></div></div><div><b>Now let's take a look at some of the special functions I made:</b>
<br/>
<br/></div><div><div>In [23]: expr = bra*a*b*a*psi*a</div><div>
<br/></div><div>In [24]: expr</div><div>Out[24]: &lt;_a|⋅a⋅b⋅a⋅|ψ&gt;⋅A</div><div>
<br/></div><div>In [25]: srepr(expr)</div><div>Out[25]: </div><div>Mul(Bra(Symbol('_a')), Operator(Symbol('A')), Operator(Symbol('B')), Operator(S</div><div>ymbol('A')), Ket(Symbol('psi')), Operator(Symbol('A')))</div></div><div>
<br/></div><div><div>(let's see if this is a valid mul by using the validate_mul function)</div></div><div>
<br/></div><div><div>In [27]: validate_mul(expr)</div></div><div><div>Exception: Ket*(Operator or OuterProduct) is invalid in quantum mechanics.</div></div><div>
<br/></div><div>=============================================</div><div>
<br/></div><div>(so now let's make a valid expression)</div><div>
<br/></div><div><div>In [28]: expr = bra*a*b*a*psi*bra*a*psi</div></div><div>
<br/></div><div><div>In [29]: inprod = combine_innerproduct(expr)</div></div><div>
<br/></div><div><div>In [30]: inprod</div><div>Out[30]: &lt;_a|⋅a⋅b⋅a⋅|ψ&gt;⋅&lt;_a|⋅a⋅|ψ&gt;</div></div><div>
<br/></div><div>(these functions automatically check to see if the mul is valid with validate_mul)</div><div>
<br/></div><div><div>In [31]: srepr(inprod)</div><div>Out[31]: </div><div>Mul(<span class="Apple-style-span" style="color: #CC33CC;">InnerProduct</span>(Bra(Symbol('_a')), Operator(Symbol('A')), Operator(Symbol('B')</div><div>), Operator(Symbol('A')), Ket(Symbol('psi'))), <span class="Apple-style-span" style="color: #CC33CC;">InnerProduct</span>(Bra(Symbol('_a')), </div><div>Operator(Symbol('A')), Ket(Symbol('psi'))))</div></div><div>
<br/></div><div>=============================================</div><div>
<br/></div><div><div>In [32]: outprod = combine_outerproduct(expr)</div></div><div>
<br/></div><div><div>In [34]: srepr(outprod)</div><div>Out[34]: </div><div>Mul(Bra(Symbol('_a')), Operator(Symbol('A')), Operator(Symbol('B')), Operator(S</div><div>ymbol('A')), <span class="Apple-style-span" style="color: #CC33CC;">OuterProduct</span>(Ket(Symbol('psi')),Bra(Symbol('_a'))), Operator(Symbo</div><div>l('A')), Ket(Symbol('psi')))</div></div><div>
<br/></div><div>=============================================</div><div>
<br/></div><div>(you can also split the products; I'll show you how this works on the inprod expression)</div><div>
<br/></div><div><div>In [36]: split = split_product(inprod)</div></div><div>
<br/></div><div><div>In [37]: srepr(split)</div><div>Out[37]: </div><div>Mul(Bra(Symbol('_a')), Operator(Symbol('A')), Operator(Symbol('B')), Operator(S</div><div>ymbol('A')), Ket(Symbol('psi')), Bra(Symbol('_a')), Operator(Symbol('A')), Ket(</div><div>Symbol('psi')))</div></div><div>
<br/></div><div>(see, no more inner products!)</div><div>
<br/></div><div>=============================================</div><div>
<br/></div><div>So we see that the same expression can be combined into inner products or an outer product depending on which function one uses. And we can also split up the inner or outer products.</div><div>
<br/></div><div>In the last few weeks of my project, we have decided that it would be best if I started working on applications with this code such as an infinite square well and other quantum physics examples. We'll see initially how far I get on this next week!</div><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/9135222751616024074-3829230650064961450?l=mattjcurry.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-09-03T19:12:29Z</updated>
    <published>2010-07-24T21:07:00Z</published>
    <author>
      <name>mcurry</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/10457551070900109390</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9135222751616024074</id>
      <author>
        <name>mcurry</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/10457551070900109390</uri>
      </author>
      <link href="http://mattjcurry.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/9135222751616024074/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://mattjcurry.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Matt's Blog</title>
      <updated>2011-04-21T21:50:24Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/2010/support-for-sparse-matrices-in-scikitslearn/</id>
    <link href="http://fseoane.net/blog/2010/support-for-sparse-matrices-in-scikitslearn/" rel="alternate" type="text/html"/>
    <title>Support for sparse matrices in scikits.learn</title>
    <summary>I recently added support for sparse matrices (as defined in scipy.sparse) in some classifiers of scikits.learn. In those classes, the fit method will perform the algorithm without converting to a dense representation and will also store parameters in an efficient format. Right now, the only classese that implements this is SVC and LinearSVC in scikits.learn.svm.sparse, [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I recently added support for sparse matrices (as defined in<br/>
scipy.sparse) in some classifiers of <a href="http://scikit-learn.sf.net">scikits.learn</a>. </p>
<p>In those classes, the fit method will perform the algorithm without<br/>
converting to a dense representation and will also store parameters in<br/>
an efficient format.</p>
<p>Right now, the only classese that implements this is SVC and LinearSVC<br/>
in scikits.learn.svm.sparse, although the plan is to add more classes in<br/>
the future. These are capable of taking sparse matrices in the fit()<br/>
method and will also store support vectors as sparse matrices.</p>
<p>Here is an example. We first create a toy dataset and import relevant<br/>
modules:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">In <span style="color: black;">[</span><span style="color: #ff4500;">1</span><span style="color: black;">]</span>: <span style="color: #ff7700; font-weight: bold;">import</span> scipy.<span style="color: black;">sparse</span><br/>
<br/>
In <span style="color: black;">[</span><span style="color: #ff4500;">2</span><span style="color: black;">]</span>: <span style="color: #ff7700; font-weight: bold;">from</span> scikits.<span style="color: black;">learn</span>. <span style="color: #ff7700; font-weight: bold;">import</span> svm<br/>
<br/>
In <span style="color: black;">[</span><span style="color: #ff4500;">3</span><span style="color: black;">]</span>: X, Y = scipy.<span style="color: black;">sparse</span>.<span style="color: black;">csr_matrix</span><span style="color: black;">(</span><span style="color: black;">[</span><span style="color: black;">[</span><span style="color: #ff4500;">0</span>, <span style="color: #ff4500;">0</span><span style="color: black;">]</span>, <span style="color: black;">[</span><span style="color: #ff4500;">0</span>, <span style="color: #ff4500;">1</span><span style="color: black;">]</span><span style="color: black;">]</span><span style="color: black;">)</span>, <span style="color: black;">[</span><span style="color: #ff4500;">0</span>, <span style="color: #ff4500;">1</span><span style="color: black;">]</span><br/>
<br/>
In <span style="color: black;">[</span><span style="color: #ff4500;">4</span><span style="color: black;">]</span>: clf = svm.<span style="color: black;">sparse</span>.<span style="color: black;">SVC</span><span style="color: black;">(</span>kernel=<span style="color: #483d8b;">'linear'</span><span style="color: black;">)</span></div></div>
<p>now we will fit the model and query some of its parameters:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style="">In <span style="color: black;">[</span><span style="color: #ff4500;">5</span><span style="color: black;">]</span>: clf.<span style="color: black;">fit</span><span style="color: black;">(</span>X, Y<span style="color: black;">)</span><br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">5</span><span style="color: black;">]</span>: <br/>
SVC<span style="color: black;">(</span>kernel=<span style="color: #483d8b;">'linear'</span>, C=<span style="color: #ff4500;">1.0</span>, probability=<span style="color: #ff4500;">0</span>, shrinking=<span style="color: #ff4500;">1</span>, eps=<span style="color: #ff4500;">0.001</span>,<br/>
  cache_size=<span style="color: #ff4500;">100.0</span>,<br/>
  coef0=<span style="color: #ff4500;">0.0</span>,<br/>
  gamma=<span style="color: #ff4500;">0.0</span><span style="color: black;">)</span><br/>
<br/>
<br/>
In <span style="color: black;">[</span><span style="color: #ff4500;">6</span><span style="color: black;">]</span>: clf.<span style="color: black;">support_</span><br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">6</span><span style="color: black;">]</span>: <br/>
<span style="color: #66cc66;">&lt;</span>2x2 sparse matrix of <span style="color: #008000;">type</span> <span style="color: #483d8b;">'&lt;type '</span>numpy.<span style="color: black;">float64</span><span style="color: #483d8b;">'&gt;'</span><br/>
    <span style="color: #ff7700; font-weight: bold;">with</span> <span style="color: #ff4500;">1</span> stored elements <span style="color: #ff7700; font-weight: bold;">in</span> Compressed Sparse Row format<span style="color: #66cc66;">&gt;</span><br/>
<br/>
In <span style="color: black;">[</span><span style="color: #ff4500;">7</span><span style="color: black;">]</span>: clf.<span style="color: black;">coef_</span><br/>
Out<span style="color: black;">[</span><span style="color: #ff4500;">7</span><span style="color: black;">]</span>: <br/>
<span style="color: #66cc66;">&lt;</span>1x2 sparse matrix of <span style="color: #008000;">type</span> <span style="color: #483d8b;">'&lt;type '</span>numpy.<span style="color: black;">float64</span><span style="color: #483d8b;">'&gt;'</span><br/>
    <span style="color: #ff7700; font-weight: bold;">with</span> <span style="color: #ff4500;">1</span> stored elements <span style="color: #ff7700; font-weight: bold;">in</span> Compressed Sparse Row format<span style="color: #66cc66;">&gt;</span></div></div>
<p>For a more complete example, you can look at <a href="http://scikit-learn.sourceforge.net/auto_examples/mlcomp_sparse_document_classification.html">Classification<br/>
of text documents using sparse features, contributed by Olivier Grisel.</a></p></div>
    </content>
    <updated>2010-08-23T15:47:38Z</updated>
    <category term="General"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/2010/flags-to-debug-python-c-extensions/</id>
    <link href="http://fseoane.net/blog/2010/flags-to-debug-python-c-extensions/" rel="alternate" type="text/html"/>
    <title>Flags to debug python C extensions.</title>
    <summary>I often find myself debugging python C extensions from gdb, but usually some variables are hidden because aggressive optimizations that distutils sets by default. What I did not know, is that you can prevent those optimizations by passing flags -O0 -fno-inline to gcc in keyword extra_compile_args (note: this will only work in GCC). A complete [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I often find myself debugging python C extensions from gdb, but usually some variables are hidden because aggressive optimizations that distutils sets by default. What I did not know, is that you can prevent those optimizations by passing flags &lt;emph&gt;-O0 -fno-inline&lt;/emph&gt; to gcc in keyword extra_compile_args (note: this will only work in GCC). A complete example would look like:</p>
<p>[code lang="python"]<br/>
config.add_extension('foo',<br/>
                         sources=['a.c'],<br/>
                         # add this for gdb debug<br/>
                         extra_compile_args=['-O0 -fno-inline'])<br/>
[/code]</p>
<p>and your extension becomes much easier to debug from gdb.</p></div>
    </content>
    <updated>2010-08-18T11:40:51Z</updated>
    <category term="General"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>Pink elephants and fortran libraries</subtitle>
      <title>F. Pedregosa</title>
      <updated>2011-05-22T03:03:42Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6568744196982634289.post-7325250334673304185</id>
    <link href="http://ondrejcertik.blogspot.com/feeds/7325250334673304185/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=6568744196982634289&amp;postID=7325250334673304185" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/7325250334673304185" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/7325250334673304185" rel="self" type="application/atom+xml"/>
    <link href="http://ondrejcertik.blogspot.com/2010/08/week-aug-9-13.html" rel="alternate" type="text/html"/>
    <title>Week Aug 9 - 13</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">On Monday I learned <a href="http://fwrap.sourceforge.net/">fwrap</a> (excellent piece of software btw), there were a few minor technical issues, that I communicated with Kurt on the fwrap mailinglist and I also send him a simple patch, so that it works fine for my fortran code (functions returning the value itself, instead of a tuple of length 1).<br/><br/>Then I took my old fortran based shooting method solvers that I wrote couple years ago and wrapped them using fwrap and run couple simulations against my FE solver.<br/><br/>On Tuesday we had a lunch with all the advisors and students and the llnl director and a little presentation about what we did.<br/><br/>On Wednesday I run shooting method calculations for 50 states of silver, both for selfconsistent DFT potential and Z/r potential. I then also run the FE solver for the same DFT potential and compared results. There are lots of small technical issues, for example I had to use cubic splines to interpolate the potential, play with the mesh for the shooting method and so on.<br/><br/>However, the shooting method and FE agrees to every single printed digit, after making sure that the mesh is ok for both methods. For all potentials that I tried. That's very cool.<br/><br/>In the process of it, I also wrote a patch to SymPy to calculate exact energies for the Hydrogen atom, both from Schroedinger and Dirac equations. I still need to polish it a bit.<br/><br/>On Thursday I run couple more calculations and setup a poster and had a poster session, it was two hours, and I think around 7 people (not counting other students and people from our group) stopped by and talked with me about it, so I was very happy. Being able to solve radial Schroedinger and especially Dirac equations robustly is something that several people in the lab would really need.<br/><br/>Today I talked little bit (finally) about some Green functions in QM and QFT with a postdoc in the Quantum Simulations group, that I always wanted to, but didn't have time before, then packed my things and went back to Reno.<br/><br/>My plan for the next week(s) is to wrap up what I did and put it into articles. I already have enough material for some articles, so it has to be done. In parallel, I'd like to finish the FE Dirac solver, the coding is done, but now I need to play with adaptivity and also investigate if we are getting the spurious states, that other people are getting when using b-splines.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/6568744196982634289-7325250334673304185?l=ondrejcertik.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-08-14T04:05:47Z</updated>
    <published>2010-08-14T03:46:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Ondřej Čertík</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/02845032202161204018</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6568744196982634289</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02845032202161204018</uri>
      </author>
      <link href="http://ondrejcertik.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://ondrejcertik.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Ondřej Čertík</title>
      <updated>2011-04-21T23:17:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=741</id>
    <link href="http://asmeurersympy.wordpress.com/2010/08/14/the-risch-algorithm-part-3-liouvilles-theorem/" rel="alternate" type="text/html"/>
    <title>The Risch Algorithm: Part 3, Liouville’s Theorem</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So this is the last official week of the Summer of Code program, and my work is mostly consisting of removing NotImplementedErrors (i.e., implementing stuff), and fixing bugs. None of this is particularly interesting, so instead of talking about that, I figured I would produce another one of my Risch Algorithm blog posts. It is [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=741&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So this is the last official week of the Summer of Code program, and my work is mostly consisting of removing <code>NotImplementedError</code>s (i.e., implementing stuff), and fixing bugs. None of this is particularly interesting, so instead of talking about that, I figured I would produce another one of my Risch Algorithm blog posts.  It is recommended that you read parts <a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/">1</a> and <a href="http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/">2</a> first, as well as my post on <a href="http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/">rational function integration</a>, which could be considered part 0.</p>
<p><strong>Liouville’s Theorem</strong><br/>
Anyone who’s taken calculus intuitively knows that integration is hard, while differentiation is easy.  For differentiation, we can produce the derivative of any elementary function, and we can do so easily, using a simple algorithm consisting of the sum and product rules, the chain rule, and the rules for the derivative of all the various elementary functions.  But for integration, we have to try to work backwards.  </p>
<p>There are two things that make integration difficult.  First is the existence of functions that simply do not have any elementary antiderivative.  <img alt="e^{-x^2}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B-x%5E2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^{-x^2}"/> is perhaps the most famous example of such a function, since it arises from the normal distribution in statistics.  But there are many others.  <img alt="\sin{(x^2)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csin%7B%28x%5E2%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\sin{(x^2)}"/>, <img alt="\frac{1}{\log{(x)}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Clog%7B%28x%29%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\frac{1}{\log{(x)}}"/>, and <img alt="x^x" class="latex" src="http://s0.wp.com/latex.php?latex=x%5Ex&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x^x"/> are some other examples of famous non-integrable functions.  </p>
<p>The second problem is that no one single simple rule for working backwards will always be applicable.  We know that u-substitution and integration by parts are the reverse of the chain rule and the product rule, respectively.  But those methods will only work if those rules were the ones that were applied originally, and then only if you chose the right <img alt="u" class="latex" src="http://s0.wp.com/latex.php?latex=u&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="u"/> and <img alt="dv" class="latex" src="http://s0.wp.com/latex.php?latex=dv&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="dv"/>.  </p>
<p>But there is a much simpler example that gets right down to the point with Liouville’s theorem.  The power rule, which is that <img alt="\frac{d}{dx}x^n=nx^{n-1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bd%7D%7Bdx%7Dx%5En%3Dnx%5E%7Bn-1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\frac{d}{dx}x^n=nx^{n-1}"/> is easily reversed for integration.  Given the power rule for differentiation, it’s easy to see that the reverse rule should be <img alt="\int{x^ndx}=\frac{x^{n+1}}{n+1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint%7Bx%5Endx%7D%3D%5Cfrac%7Bx%5E%7Bn%2B1%7D%7D%7Bn%2B1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\int{x^ndx}=\frac{x^{n+1}}{n+1}"/>.  This works fine, except that were are dividing something, <img alt="n+1" class="latex" src="http://s0.wp.com/latex.php?latex=n%2B1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="n+1"/>.  In mathematics, whenever we do that, we have to ensure that whatever we divide by is not 0. In this case, it means that we must assert <img alt="n\neq -1" class="latex" src="http://s0.wp.com/latex.php?latex=n%5Cneq+-1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="n\neq -1"/>.  This excludes <img alt="\int{\frac{1}{x}dx}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint%7B%5Cfrac%7B1%7D%7Bx%7Ddx%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\int{\frac{1}{x}dx}"/>.  We know from calculus that this integral requires us to introduce a special function, the natural logarithm.  </p>
<p>But we see that <img alt="n=-1" class="latex" src="http://s0.wp.com/latex.php?latex=n%3D-1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="n=-1"/> is the only exception to the power rule, so that the integral of any (<a href="http://en.wikipedia.org/wiki/Laurent_polynomial">Laurent</a>) polynomial is again a (Laurent) polynomial, plus a logarithm.  Recall from part 0 (<a href="http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/">Rational Function Integration</a>) that the same thing is true for any rational function: the integral is again a rational function, plus a logarithm (we can combine multiple logarithms into one using the logarithmic identities, so assume for simplicity that there is just one).  The argument is very similar, too.  Assume that we have split the denominator rational function into linear factors in the <a href="http://en.wikipedia.org/wiki/Algebraic_splitting_field">algebraic splitting field</a> (such as the complex numbers).  Then perform a partial fractions decomposition on the rational function.  Each term in the decomposition will be either a polynomial, or of the form <img alt="\frac{a}{(x - b)^n}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba%7D%7B%28x+-+b%29%5En%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\frac{a}{(x - b)^n}"/>. The integration of these terms is the same as with the power rule, making the substitution <img alt="u = x - b" class="latex" src="http://s0.wp.com/latex.php?latex=u+%3D+x+-+b&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="u = x - b"/>. When <img alt="n\geq 2" class="latex" src="http://s0.wp.com/latex.php?latex=n%5Cgeq+2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="n\geq 2"/>, the integral will be <img alt="\frac{-1}{n - 1}\frac{a}{(x - b)^{n - 1}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B-1%7D%7Bn+-+1%7D%5Cfrac%7Ba%7D%7B%28x+-+b%29%5E%7Bn+-+1%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\frac{-1}{n - 1}\frac{a}{(x - b)^{n - 1}}"/>; when <img alt="n = 1" class="latex" src="http://s0.wp.com/latex.php?latex=n+%3D+1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="n = 1"/>, the integral will be <img alt="a\log{(x - b)}" class="latex" src="http://s0.wp.com/latex.php?latex=a%5Clog%7B%28x+-+b%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a\log{(x - b)}"/>.  Now computationally, we don’t want to work with the algebraic splitting field, but it turns out that we don’t need to actually compute it to find the integral.  But theory is what we are dealing with here, so don’t worry about that.  </p>
<p>Now the key observation about differentiation, as I have pointed out in the earlier parts of this blog post series,  is that the derivative of an elementary function can be expressed in terms of itself, in particular, as a polynomial in itself.  To put it another way, functions like <img alt="e^x" class="latex" src="http://s0.wp.com/latex.php?latex=e%5Ex&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^x"/>, <img alt="\tan{(x)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctan%7B%28x%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\tan{(x)}"/>, and <img alt="\log{(x)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%7B%28x%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\log{(x)}"/> all satisfy linear differential equations with rational coefficients (e.g., for these, <img alt="y'=y" class="latex" src="http://s0.wp.com/latex.php?latex=y%27%3Dy&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y'=y"/>, <img alt="y'=1 + y^2" class="latex" src="http://s0.wp.com/latex.php?latex=y%27%3D1+%2B+y%5E2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y'=1 + y^2"/>, and <img alt="y'=\frac{1}{x}" class="latex" src="http://s0.wp.com/latex.php?latex=y%27%3D%5Cfrac%7B1%7D%7Bx%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y'=\frac{1}{x}"/>).  </p>
<p>Now, the theory gets more complicated, but it turns out that, using a careful analysis of this fact, we can prove a similar result to the one about rational functions to any elementary function. In a nutshell, Liouville’s Theorem says this:  if an elementary function has an elementary integral, then that integral is a composed only of functions from the original integrand, plus a finite number of logarithms of functions from the integrand, which can be considered one logarithm, as mentioned above (“functions from” more specifically means a rational function in the terms from our elementary extension).  Here is the formal statement of the theorem.</p>
<p><strong>Theorem (Liouville’s Theorem – Strong version)</strong><br/>
<em>Let <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="K"/> be a differential field, <img alt="C=\mathrm{Const}(K)" class="latex" src="http://s0.wp.com/latex.php?latex=C%3D%5Cmathrm%7BConst%7D%28K%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="C=\mathrm{Const}(K)"/>, and <img alt="f\in K" class="latex" src="http://s0.wp.com/latex.php?latex=f%5Cin+K&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f\in K"/>. If there exist an elementary extension <img alt="E" class="latex" src="http://s0.wp.com/latex.php?latex=E&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="E"/> of <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="K"/> and <img alt="g \in E" class="latex" src="http://s0.wp.com/latex.php?latex=g+%5Cin+E&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g \in E"/> such that <img alt="Dg =f" class="latex" src="http://s0.wp.com/latex.php?latex=Dg+%3Df&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Dg =f"/>, then there are <img alt="v \in K" class="latex" src="http://s0.wp.com/latex.php?latex=v+%5Cin+K&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="v \in K"/>, <img alt="c_1, \dots, c_n\in \bar{C}" class="latex" src="http://s0.wp.com/latex.php?latex=c_1%2C+%5Cdots%2C+c_n%5Cin+%5Cbar%7BC%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c_1, \dots, c_n\in \bar{C}"/>, and <img alt="u_1, \dots,u_n\in K(c_1,\dots,c_n)^*" class="latex" src="http://s0.wp.com/latex.php?latex=u_1%2C+%5Cdots%2Cu_n%5Cin+K%28c_1%2C%5Cdots%2Cc_n%29%5E%2A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="u_1, \dots,u_n\in K(c_1,\dots,c_n)^*"/> such that </em></p><em>
<h1>
<img alt="f = Dv + \sum_{i=1}^n c_i\frac{Du_i}{u_i}" class="latex" src="http://s0.wp.com/latex.php?latex=f+%3D+Dv+%2B+%5Csum_%7Bi%3D1%7D%5En+c_i%5Cfrac%7BDu_i%7D%7Bu_i%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f = Dv + \sum_{i=1}^n c_i\frac{Du_i}{u_i}"/>.<br/>
</h1>
</em><p><em/><br/>
Looking closely at the formal statement of the theorem, we can see that it says the same thing as my “in a nutshell” statement.  <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="K"/> is the differential extension, say of <img alt="\mathbb{Q}(x)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BQ%7D%28x%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{Q}(x)"/>, that contains all of our elementary functions (see <a href="http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/">part 2</a>).  <img alt="E" class="latex" src="http://s0.wp.com/latex.php?latex=E&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="E"/> is an extension of <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="K"/>.  The whole statement of the theorem is that <img alt="E" class="latex" src="http://s0.wp.com/latex.php?latex=E&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="E"/> need not be extended from <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="K"/> by anything more than some logarithms.   <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> is our original function and <img alt="g=\int f" class="latex" src="http://s0.wp.com/latex.php?latex=g%3D%5Cint+f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=\int f"/>.  Recall from <a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/">part 1</a> that <img alt="Dg = \frac{Du}{u}" class="latex" src="http://s0.wp.com/latex.php?latex=Dg+%3D+%5Cfrac%7BDu%7D%7Bu%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Dg = \frac{Du}{u}"/> is just another way of saying that <img alt="g = \log{(u)}" class="latex" src="http://s0.wp.com/latex.php?latex=g+%3D+%5Clog%7B%28u%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g = \log{(u)}"/>.  The rest of the formal statement is some specifics dealing with the constant field, which assure us that we do not need to introduce any new constants in the integration. This fact is actually important to the decidability of the Risch Algorithm, because many problems about constants are either unknown or undecidable (such as the transcendence degree of <img alt="\mathbb{Q}(e, \pi)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BQ%7D%28e%2C+%5Cpi%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{Q}(e, \pi)"/>).  But this ensures us that as long as we start with a constant field that is computable, our constant field for our antiderivative will also be computable, and will in fact be the same field, except for some possible algebraic extensions (the <img alt="c_i" class="latex" src="http://s0.wp.com/latex.php?latex=c_i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c_i"/>).  </p>
<p>At this point, I want to point out that even though my work this summer has been only on the purely transcendental case of the Risch Algorithm, Liouville’s Theorem is true for all elementary functions, which includes algebraic functions.  However, if you review the proof of the theorem, the proof of the algebraic part is completely different from the proof of the transcendental part, which is the first clue that the algebraic part of the algorithm is completely different from the transcendental part (and also a clue that it is harder).</p>
<p>Liouville’s Theorem is what allows us to prove that a given function does not have an elementary antiderivative, by giving us the form that any antiderivative must have.  We first perform the same Hermite Reduction from the <a href="http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/">rational integration case</a>. Then, a generalization of the same Lazard-Rioboo-Trager Algorithm due to Rothstein allows us to find the logarithmic part of any integral (the <img alt="\sum_{i=1}^n c_i\frac{Du_i}{u_i}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5En+c_i%5Cfrac%7BDu_i%7D%7Bu_i%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\sum_{i=1}^n c_i\frac{Du_i}{u_i}"/> from Liouville’s Theorem).  </p>
<p>Now a difference here is that sometimes, the part of the integrand that corresponds to the <img alt="\frac{a}{x - b}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba%7D%7Bx+-+b%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\frac{a}{x - b}"/> for general functions doesn’t always have an elementary integral (these are called <em>simple</em> functions.  I think I will talk about them in more detail in a future post in this series).   An example of this is <img alt="\frac{1}{\log{(x)}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Clog%7B%28x%29%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\frac{1}{\log{(x)}}"/>.  Suffice it to say that any elementary integral of <img alt="\frac{1}{\log{(x)}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Clog%7B%28x%29%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\frac{1}{\log{(x)}}"/> must be part of some log-extension of <img alt="\mathbb{Q}(x, \log{(x)})" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BQ%7D%28x%2C+%5Clog%7B%28x%29%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{Q}(x, \log{(x)})"/>, and that we can prove that no such logarithmic extension exists in the course of trying to compute it with the Lazard-Rioboo-Rothstein-Trager Algorithm.</p>
<p>In the rational function case, after we found the rational part and the logarithmic part, we were practically done, because the only remaining part was a polynomial.  Well, for the general transcendental function case, we are left with an analogue, which are called <em>reduced</em> functions, and we are far from done.  This is the hardest part of the integration algorithm.  This will also be the topic of a future post in this series.  Suffice it to say that this is where most of the proofs of non-integrability come from, including the other integrals than <img alt="\frac{1}{\log{(x)}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Clog%7B%28x%29%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\frac{1}{\log{(x)}}"/> that I gave above.  </p>
<p><strong>Conclusion</strong><br/>
That’s it for now.  Originally, I was also going to include a bit on the structure theorems too, but I think I am going to save that for part 4 instead.  I may or may not have another post ready before the official end of coding date for Google Summer of Code, which is Monday (three days from now).  I want to make a post with some nice graphs comparing the timings of the new <code>risch_integrate()</code> and the old <code>heurisch()</code> (what is currently behind SymPy’s <code>integrate()</code>).  But as I have said before, I plan on continuing coding the integration algorithm beyond the program until I finish it, and even beyond that (there are lots of cool ways that the algorithm can be extended to work with special functions, there’s definite integration with Meijer-G functions, and there’s of course the algebraic part of the algorithm, which is a much larger challenge).  And along with it, I plan to continue keeping you updated with blog posts, including at least all the Risch Algorithm series posts that I have promised (I have counted at least three topics that I have explicitly promised but haven’t done yet).  And of course, there will be the mandatory GSoC wrap-up blog post, detailing my work for the summer.  </p>
<p>Please continue to test my prototype <a href="http://asmeurersympy.wordpress.com/2010/08/05/prototype-risch_integrate-function-ready-for-testing/"><code>risch_integrate()</code></a> function in my <a href="http://github.com/asmeurer/sympy/tree/integration3">integration3</a> branch, and tell me what you think (or if you find a bug).</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/741/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/741/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/741/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/741/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/741/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/741/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/741/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/741/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/741/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/741/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/741/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/741/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/741/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/741/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=741&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2010-08-14T02:55:23Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-05-22T03:04:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://ojensen.wordpress.com/?p=250</id>
    <link href="http://ojensen.wordpress.com/2010/08/10/fast-ufunc-ish-hydrogen-solutions/" rel="alternate" type="text/html"/>
    <title>Fast ufunc-ish Hydrogen solutions</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In my previous post I demonstrated array operations based on the new functionality I have implemented during my GSOC project.  In this post I will discuss another feature that is essential for array calculations in a computer algebra system: The … <a href="http://ojensen.wordpress.com/2010/08/10/fast-ufunc-ish-hydrogen-solutions/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=ojensen.wordpress.com&amp;blog=13891021&amp;post=250&amp;subd=ojensen&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In my previous post I demonstrated array operations based on the new functionality I have implemented during <a href="http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2010/python/t127230762991">my GSOC project</a>.  In this post I will discuss another feature that is essential for array calculations in a computer algebra system: The initialization of numeric arrays <em>based on symbolic math expressions</em>.  After all, it is the symbolic stuff we are really interested in, isn’t it? <img alt=":-)" class="wp-smiley" src="http://s2.wp.com/wp-includes/images/smilies/icon_smile.gif"/>   I will demonstrate how the automatic compilation and wrapping can be used to setup Numpy arrays with fast Hydrogen wave functions.</p>
<p>Again, it will be interesting to see how we compare with the array initialization features of numpy.  One lesson I learned while preparing my previous post is that the timing results depend heavily on the compiler.  To avoid the scaling issues we observed with the matrix-matrix product last time, I will do all examples on a computer with ifort 11.0.  The Numpy installation on that computer is version 1.1.0.  The warning applies again: I report the timing results I get on my computer, but this is not a rigorous benchmark.  Also, I may not be using Numpy in the optimal way.  If you know how I could make it run faster, I’d love hear about it.</p>
<h3>Introductory example: linspace</h3>
<p>First, lets try to create our own compiled linspace function that we can compare with numpy.linspace.  The Numpy function creates an array of evenly spaced numbers, like this:</p>
<pre class="brush: python;">In [1]: import numpy as np
In [2]: np.linspace(0, 1, 5)
Out[2]: array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ])
</pre>
<p>The same functionality can be created by autowrapping a Sympy expression that maps the array index to an interval <img alt="[a, b]" class="latex" src="http://l.wordpress.com/latex.php?latex=%5Ba%2C+b%5D&amp;bg=ffffff&amp;fg=000&amp;s=0" title="[a, b]"/> on the real axis:</p>
<pre class="brush: python;">In [3]: from sympy.utilities.autowrap import autowrap
In [4]: a, b = symbols('a b')
In [5]: i = Idx('i', m)
In [6]: linearmap = a + (i - 1)*(a - b)/(1 - m)
In [7]: x = IndexedBase('x')
In [8]: linspace = autowrap(Eq(x[i], linearmap))
In [9]: linspace(0, 1, 5)
Out[9]: [ 0.    0.25  0.5   0.75  1.  ]
</pre>
<p>So, it worked.  The array has been initialized according to the linear map defined by the Sympy expression at In[6].  In order to map the index to the interval correctly one must remember that the index of a Fortran array starts at 1, while C arrays start at 0.  This must be be taken into account when the initialization expression is defined, so a slightly different expression must be used with the C backend.</p>
<p>Now, you may be wondering how I could know the order of the arguments in the wrapped linspace function, and why it was so conveniently compatible with the interface for numpy.linspace.  The answer, is that unless autowrap gets the optional keyword argument ‘args’, the arguments are sorted according to their string representation.  I carefully chose the symbols in the linear map so that my linspace would automatically get the same argument sequence as Numpy’s.</p>
<pre class="brush: python;">In [14]: %timeit np.linspace(0, 5, 100000)
1000 loops, best of 3: 916 µs per loop
In [15]: %timeit linspace(0, 5, 100000)
1000 loops, best of 3: 381 µs per loop
</pre>
<p>Sweet!  Evenly spaced numbers are of course very useful, but let us also try something a bit more juicy.</p>
<h3>Universal hydrogen functions</h3>
<p>One of the really useful concepts in Numpy is the “universal function” or <a href="http://www.google.no/url?sa=t&amp;source=web&amp;cd=1&amp;ved=0CBYQFjAA&amp;url=http%3A%2F%2Fdocs.scipy.org%2Fdoc%2Fnumpy%2Freference%2Fufuncs.html&amp;rct=j&amp;q=numpy%20ufunc&amp;ei=aEZgTOmQJNCHOKOaiccP&amp;usg=AFQjCNHF0afQWtFHqaaI5KQnz8bcvyzrAg&amp;cad=rja">ufunc</a>. To put it short, ufuncs operate on arrays by applying a scalar function elementwise. It is actually more than that, as numpy ufuncs are required to support type casting, broadcasting and more, but we will ignore that and focus on the following quote from the Numpy docs:</p>
<blockquote><p>That is, a ufunc is a “vectorized” wrapper for a function that takes a fixed number of scalar inputs and produces a fixed number of scalar outputs.</p></blockquote>
<p>Can we make such functions with the autowrap framework? As you can probably guess, the answer is positive, so the question is rather: can we beat Numpy on speed?  Let’s find out.</p>
<p>Very recently, Sympy got functionality to generate radial electronic <a href="http://github.com/jegerjensen/sympy/commit/fd0ed8330fc5025e422468fe9d7519b9b7052a90">wave functions for the Hydrogen atom.</a> That is, quantum mechanical solutions to the attractive Coulomb potential.  These are well known, and long since tabulated functions, that are routinely used in quantum mechanics.  Wouldn’t it be nice to have the Hydrogen wave functions available as super fast ufunc-like binary functions?</p>
<p>The failsafe way to build a fast binary function that works element-wise on an array, is to construct a symbolic Lambda function that contains the initialization expression.  The Lambda instance should then be attached to a regular Sympy Function.  This is done with a call to implemented_function(‘f’, Lambda(…)) as in the following:</p>
<pre class="brush: python;">In [2]: from sympy.utilities.lambdify import implemented_function
In [3]: from sympy.physics.hydrogen import R_nl
In [4]: a, r = symbols('a r')
In [5]: psi_nl = implemented_function('psi_nl', Lambda([a, r], R_nl(1, 0, a, r)))
In [6]: psi_nl(a, r)
Out[6]: psi_nl(a, r)
In [7]: psi_nl._imp_(a, r)
Out[7]:
             -r
       ____  --
      / 1    a
2*   /  -- *e
    /    3
  \/    a
</pre>
<p>As you would guess from Out[6], psi_nl is just a regular Sympy Function, but with an additional attribute, _imp_, that works as displayed in In[7].   The implemented_function trick <a href="http://github.com/jegerjensen/sympy/commit/72d4164b3399bcf2289432e042df8b4006ff3f92">landed in Sympy</a> just a few weeks ago.  It was intended for numeric implementations, but in my <a href="http://github.com/jegerjensen/sympy/tree/autowrap3">autowrap3 branch</a>, I (ab)use it to store a symbolic Lambda instead.</p>
<pre class="brush: python;">In [8]: x = IndexedBase('x')
In [9]: y = IndexedBase('y')
In [10]: i = Idx('i', m)
In [11]: hydrogen = autowrap(Eq(y[i], psi_nl(a, x[i])), tempdir='/tmp/hydro')
</pre>
<p>The argument ‘tempdir’ tells autowrap to compile the code in a specific directory, and leave the files intact when finished.  Checking the Fortran source code reveals that the wave function is calculated like this:</p>
<pre class="brush: plain;">do i = 1, m
   y(i) = 2*sqrt(a**(-3))*exp(-x(i)/a)
end do
</pre>
<p>The implemented function has been printed as an <em>inline</em> expression, avoiding a costly function call in the loop.  (If you wonder why I didn’t just print the expression directly, the explanation is <a href="http://github.com/jegerjensen/sympy/commit/9431840359486e37c5feeedfd1e885b91f60af1c">here</a>.)  Now that we have the functions available, this is how they look:</p>
<div class="wp-caption aligncenter" id="attachment_348" style="width: 460px;"><a href="http://ojensen.files.wordpress.com/2010/08/hydrogen_functions.png"><img alt="Plot of radial hydrogen wavefunctions" class="size-medium wp-image-348 " height="294" src="http://ojensen.files.wordpress.com/2010/08/hydrogen_functions.png?w=450&amp;h=294" title="hydrogen_functions" width="450"/></a><p class="wp-caption-text">Some of the Hydrogen wave functions plotted vs. the radial distance from the nucleus.</p></div>
<p>The parameters <img alt="n" class="latex" src="http://l.wordpress.com/latex.php?latex=n&amp;bg=ffffff&amp;fg=000&amp;s=0" title="n"/> and <img alt="l" class="latex" src="http://l.wordpress.com/latex.php?latex=l&amp;bg=ffffff&amp;fg=000&amp;s=0" title="l"/> are quantum numbers related to the electron’s energy and orbital angular momentum respectively.</p>
<p>The autowrapped Hydrogen functions can also be compared with numpy equivalents, as all waves are expressed in terms of functions that are universal in numpy.  We use Sympy’s ‘lambdify’ to create a Python lambda function that calls the relevant ufuncs from numpy’s namespace:</p>
<pre class="brush: python;">In [31]: from sympy.utilities.lambdify import lambdify
In [32]: psi_lambda = lambdify([a, r], R_nl(1, 0, a, r), 'numpy')
In [33]: grid = np.linspace(0,3,100)
In [34]: np.linalg.norm(psi_lambda(0.5, grid) - hydrogen(0.5, grid))
Out[34]: 2.21416777433e-15
</pre>
<p>But there are many solutions to the Hydrogen atom, so let’s study them a bit more systematically.  The following is the output from a loop over the energy quantum number <img alt="n" class="latex" src="http://l.wordpress.com/latex.php?latex=n&amp;bg=ffffff&amp;fg=000&amp;s=0" title="n"/>.  I used only the s-wave functions <img alt="l=0" class="latex" src="http://l.wordpress.com/latex.php?latex=l%3D0&amp;bg=ffffff&amp;fg=000&amp;s=0" title="l=0"/>, corresponding to an electron that moves straight through the nucleus and out on the other side before turning back again to repeat the cycle.  For each <img alt="n" class="latex" src="http://l.wordpress.com/latex.php?latex=n&amp;bg=ffffff&amp;fg=000&amp;s=0" title="n"/>, I calculated:</p>
<ul>
<li>%timeit for application of lambda function with Numpy ufuncs</li>
<li>%timeit for application of the compiled and wrapped Sympy function</li>
<li>the absolute difference between the solutions: <img alt="sum(abs( \psi_{numpy} - \psi_{sympy}))" class="latex" src="http://l.wordpress.com/latex.php?latex=sum%28abs%28+%5Cpsi_%7Bnumpy%7D+-+%5Cpsi_%7Bsympy%7D%29%29&amp;bg=ffffff&amp;fg=000&amp;s=0" title="sum(abs( \psi_{numpy} - \psi_{sympy}))"/></li>
</ul>
<p>Here is the output:</p>
<pre class="brush: python;">n = 1
Numpy: 100000 loops, best of 3: 16.8 µs per loop
Sympy: 1000000 loops, best of 3: 1.92 µs per loop
difference: 1.07708980623e-14
n = 2
Numpy: 10000 loops, best of 3: 30 µs per loop
Sympy: 1000000 loops, best of 3: 2 µs per loop
difference: 5.13651621237e-15
n = 3
Numpy: 10000 loops, best of 3: 48.1 µs per loop
Sympy: 100000 loops, best of 3: 3.37 µs per loop
difference: 2.28896762655e-15
n = 4
Numpy: 10000 loops, best of 3: 70.9 µs per loop
Sympy: 100000 loops, best of 3: 2.7 µs per loop
difference: 6.18114500556e-15
n = 5
Numpy: 10000 loops, best of 3: 116 µs per loop
Sympy: 100000 loops, best of 3: 4.61 µs per loop
difference: 5.68967616077e-15
n = 6
Numpy: 10000 loops, best of 3: 142 µs per loop
Sympy: 100000 loops, best of 3: 5.02 µs per loop
difference: 1.21523884705e-14
n = 7
Numpy: 10000 loops, best of 3: 183 µs per loop
Sympy: 100000 loops, best of 3: 5.95 µs per loop
difference: 1.04406500806e-14
</pre>
<p>Awesome! For <img alt="n=7" class="latex" src="http://l.wordpress.com/latex.php?latex=n%3D7&amp;bg=ffffff&amp;fg=000&amp;s=0" title="n=7"/> we beat Numpy by a factor of 30. <img alt=":-)" class="wp-smiley" src="http://s2.wp.com/wp-includes/images/smilies/icon_smile.gif"/>   But the really interesting thing here is the <em>scaling</em> with expression complexity.  Look at this:</p>
<p style="text-align: center;">
</p><div class="wp-caption aligncenter" id="attachment_354" style="width: 460px;"><a href="http://ojensen.files.wordpress.com/2010/08/time_numpy_sympy.png"><img alt="Execution time scaling for increasing expression complexity, Numpy and Sympy" class="size-medium wp-image-354 " height="343.5" src="http://ojensen.files.wordpress.com/2010/08/time_numpy_sympy.png?w=450" title="Scaling of execution time for Numpy and Sympy" width="450"/></a><p class="wp-caption-text">Normalized execution time for Numpy and Sympy.  As n increases, the complexity of the  wave function expression increases, leading to the slowdown.  The values of each curve are normalized against the corresponding n=1 calculation.</p></div>
<p>For higher <img alt="n" class="latex" src="http://l.wordpress.com/latex.php?latex=n&amp;bg=ffffff&amp;fg=000&amp;s=0" title="n"/> the wave function expressions increase in complexity, and so does the execution time of both Numpy and Sympy.  However, while the autowrapped Sympy expression needs 3 times longer for <img alt="n = 7" class="latex" src="http://l.wordpress.com/latex.php?latex=n+%3D+7&amp;bg=ffffff&amp;fg=000&amp;s=0" title="n = 7"/> than for <img alt="n = 1" class="latex" src="http://l.wordpress.com/latex.php?latex=n+%3D+1&amp;bg=ffffff&amp;fg=000&amp;s=0" title="n = 1"/>, the execution time for a lambda of native Numpy ufuncs increases tenfold!</p>
<div class="wp-caption aligncenter" id="attachment_346" style="width: 460px;"><a href="http://ojensen.files.wordpress.com/2010/08/numpy_sympy.png"><img alt="Plot of Numpy vs. Sympy execution time" class="size-medium wp-image-346 " height="343.5" src="http://ojensen.files.wordpress.com/2010/08/numpy_sympy.png?w=450" title="numpy_sympy" width="450"/></a><p class="wp-caption-text">Numpy execution time vs. Sympy.  The mostly linear relation means that Numpy and Sympy have similar dependence on the complexity of the expression, although the scaling factors are quite different.</p></div>
<p>This last figure shows the linear relation between execution times of the compiled Sympy expressions and native Numpy lambda function.   The plot supports the idea that the it is the inherent complexity of the mathematical expression that determines the execution time.  By extrapolation, we can expect that for an expression that would take Sympy 9 times longer, Numpy would be hit by a factor of 100.</p>
<p>The main reason for the speedup, is that while Numpy calculates the wave function by applying a series of ufuncs, the Sympy way is to create a new “ufunc” and apply it once.  It would be very cool to try this in an iterative solution scheme. With a super fast ufunc in a single python loop, one could do complex and cpu-intensive calculations with respectable performance from within isympy.  That would be awesome!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/ojensen.wordpress.com/250/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/ojensen.wordpress.com/250/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/ojensen.wordpress.com/250/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/ojensen.wordpress.com/250/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/ojensen.wordpress.com/250/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/ojensen.wordpress.com/250/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/ojensen.wordpress.com/250/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/ojensen.wordpress.com/250/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/ojensen.wordpress.com/250/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/ojensen.wordpress.com/250/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/ojensen.wordpress.com/250/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/ojensen.wordpress.com/250/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/ojensen.wordpress.com/250/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/ojensen.wordpress.com/250/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=ojensen.wordpress.com&amp;blog=13891021&amp;post=250&amp;subd=ojensen&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2010-08-10T10:14:38Z</updated>
    <category term="sympy"/>
    <author>
      <name>jegerjensen</name>
    </author>
    <source>
      <id>http://ojensen.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://ojensen.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://ojensen.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://ojensen.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://ojensen.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Python, SymPy and Quantum Physics</subtitle>
      <title>Jensen's Sympy Blog</title>
      <updated>2011-05-22T03:04:45Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://ojensen.wordpress.com/?p=219</id>
    <link href="http://ojensen.wordpress.com/2010/08/08/good-news-everyone/" rel="alternate" type="text/html"/>
    <title>Good news, everyone!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week has been hectic, but also very fruitful.  I have the functionality I set out for, it works and it is fast! It still needs testing, polish and bug-fixing and is by no means finished, but it is now … <a href="http://ojensen.wordpress.com/2010/08/08/good-news-everyone/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=ojensen.wordpress.com&amp;blog=13891021&amp;post=219&amp;subd=ojensen&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week has been hectic, but also very fruitful.  I have the functionality I set out for, it works and it is fast!  It still needs testing, polish and bug-fixing and is by no means finished, but it is now possible to define indexed math-expressions, translate to code, compile it, wrap it as a python module and import it again for fast numerical calculations.  All of this can be done without leaving the isympy command interpreter.</p>
<p>I’ve been hacking on the automatic wrapping of binary routines, refactored the code printers, implemented handling of indexed powers, enabled scalar broadcasting and <a href="http://docs.scipy.org/doc/numpy/reference/ufuncs.html">ufunc</a>-ish  support for arbitrary compiled functions.   For next week I will focus on physics inspired examples, testing of binary code and improving the documentation.  But first, it is time for a little demonstration.</p>
<p>The latest code is <a href="http://github.com/jegerjensen/sympy/tree/autowrap3">here</a>, if you want to try for yourself.   There are parts that don’t not work properly, for instance the  Cython wrapper cannot handle numpy arrays yet, but as you will see below there are enough working parts that you can do some fancy stuff.</p>
<h3>The trace of a Matrix — faster that numpy!</h3>
<p>In an earlier blog post, I showed you that the C printer is able to print the necessary loops to implement summations over array indices.  The Fortran printer has also this functionality now, so it can be used with f2py.  Let’s start with a simple function to calculate numerically the trace of a matrix while running isympy:</p>
<pre>In [1]: from sympy.utilities.autowrap import autowrap
In [2]: m, n = symbols('m n', integer=True)
In [3]: i = Idx('i', m)
In [4]: j = Idx('j', n)
In [5]: A = IndexedBase('A')
In [6]: trace = autowrap(A[i, i])</pre>
<p>That’s it.  Now lets have a look at the function we created,</p>
<pre>In [7]: trace?
Type:        fortran
String Form:    &lt;fortran object at 0xa93bea8&gt;
Namespace:    Interactive
Docstring:
 autofunc - Function signature:
 autofunc = autofunc(a,[m])
 Required arguments:
 a : input rank-2 array('d') with bounds (m,m)
 Optional arguments:
 m := shape(a,0) input int
 Return objects:
 autofunc : float</pre>
<p>This informative docstring is created by f2py, and only slightly distorted by the blogging software.  It tells us everything we need to know.  Let’s try this function on a numpy array:</p>
<pre>In [8]: import numpy as np
In [9]: I = np.asarray(np.eye(1000), order='F')
In [10]: trace(I)
Out[10]: 1000.0
In [11]: timeit trace(I)
10000 loops, best of 3: 30.3 us per loop
In [12]: np.trace(I)
Out[12]: 1000.0
In [13]: timeit np.trace(I)
1000 loops, best of 3: 230 us per loop</pre>
<p>First of all, please notice the parameter “order=’F'” passed to the numpy array.  This ensures that the array is created with column-major memory order which is the Fortran format.  Without that, the array is created with row-major order, and our Fortran function would run much, much slower.</p>
<p>Now to the fun part: Did you notice the speedup?  The Sympy generated function is almost a factor of 8 faster that numpy!  This is great, and I think I can be really happy about this result.  But it is also time for a little warning: Please don’t take these numbers as some sort of absolute truth.  For all I know I may be comparing apples and oranges.</p>
<p>In fact, the numbers I present are probably more relevant for a comparison of  compilers and optimization flags.  But, whatever the reason for the  speedups, faster python callable functions is no doubt a good thing.   For the record: I am running this on a little Acer Aspire One using numpy 1.3.0 shipped with Ubuntu 10.04.  The autowrapped binaries are compiled with Ubuntu’s gfortran 4.4.3.</p>
<h3>Matrix-Matrix product</h3>
<p>Now lets look at a more expensive array operation.  Whereas the trace of an m*m matrix has a cost of order O(m), the product of two m*m matrices scales like O(m^3).  First we need to express a matrix-matrix product in terms of Indexed Sympy objects and create the binary function.</p>
<pre>In [14]: B = IndexedBase('B')
In [15]: C = IndexedBase('C')
In [16]: o = symbols('o', integer=True)
In [17]: k = Idx('k', o)
In [18]: expr_mat_mat = Eq(C[i, j], A[i, k]*B[k, j]); expr_mat_mat
Out[18]: C[i, j] = A[i, k]⋅B[k, j]</pre>
<p>The matrix-matrix product displayed at Out[18] is defined in terms of an Equality instance.  This is a handy way to provide the code printers with both an expression and the variable it should be assigned to.  For indexed expressions it is important that the indices on left hand side and right hand side are compatible.  (Compatible means usually that the set of non-dummy indices must be identical, but with the exception that the right hand side can be scalar.)  For the binary function, we get:</p>
<pre>In [19]: matmat = autowrap(expr_mat_mat)
In [20]: matmat?
Type:        fortran
String Form:    &lt;fortran object at 0x8f35290&gt;
Namespace:    Interactive
Docstring:
 autofunc - Function signature:
 c = autofunc(a,b,[m,n,o])
 Required arguments:
 a : input rank-2 array('d') with bounds (m,o)
 b : input rank-2 array('d') with bounds (o,n)
 Optional arguments:
 m := shape(a,0) input int
 n := shape(b,1) input int
 o := shape(a,1) input int
 Return objects:
 c : rank-2 array('d') with bounds (m,n)</pre>
<p>Now let’s test it with a QR factorization on some numpy arrays:</p>
<pre>In [21]: M = np.asarray(np.random.rand(100, 100), order='F')
In [22]: Q, R = np.linalg.qr(M)
In [23]: M_np = np.dot(Q, R)
In [24]: M_my = matmat(Q, R)
In [25]: np.linalg.norm(M_my - M_np)
Out[25]: 1.7522660836e-14</pre>
<p>Here is the timing:</p>
<pre>In [26]: %timeit M_np = np.dot(Q, R)
100 loops, best of 3: 10.9 ms per loop
In [27]: %timeit M_my = matmat(Q, R)
100 loops, best of 3: 6.11 ms per loop</pre>
<p>This looks impressive! But, I also found that numpy has a much better scaling than what I get from autowrap on this computer:</p>
<pre>In [53]: M = np.asarray(np.random.rand(400, 400), order='F')
In [54]: Q, R = np.linalg.qr(M)
In [55]: %timeit M_np = np.dot(Q, R)
1 loops, best of 3: 687 ms per loop
In [56]: %timeit M_my = matmat(Q, R)
1 loops, best of 3: 1.65 s per loop</pre>
<p>I believe that this bad scaling must be an issue with gfortran, or rather an issue with how I use it.  The theoretical scaling of O(m^3) correspond to a factor of 64, and while numpy follows theory quite closely, (687/10.9=63.0) the autowrapped function misses by far. (1650/6.11=270) .  On another computer, I tested the same calculations with Intels ifort compiler and got much better results that were consistently better than numpy and had the expected scaling.</p>
<p>I have more things I want to show, but this blog post is becoming rather long, so stay tuned for more exciting new functionality in the coming days.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/ojensen.wordpress.com/219/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/ojensen.wordpress.com/219/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/ojensen.wordpress.com/219/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/ojensen.wordpress.com/219/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/ojensen.wordpress.com/219/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/ojensen.wordpress.com/219/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/ojensen.wordpress.com/219/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/ojensen.wordpress.com/219/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/ojensen.wordpress.com/219/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/ojensen.wordpress.com/219/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/ojensen.wordpress.com/219/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/ojensen.wordpress.com/219/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/ojensen.wordpress.com/219/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/ojensen.wordpress.com/219/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=ojensen.wordpress.com&amp;blog=13891021&amp;post=219&amp;subd=ojensen&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2010-08-08T14:33:30Z</updated>
    <category term="sympy"/>
    <author>
      <name>jegerjensen</name>
    </author>
    <source>
      <id>http://ojensen.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://ojensen.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://ojensen.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://ojensen.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://ojensen.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Python, SymPy and Quantum Physics</subtitle>
      <title>Jensen's Sympy Blog</title>
      <updated>2011-05-22T03:04:45Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-22566012.post-4683860477825075771</id>
    <link href="http://haz-tech.blogspot.com/feeds/4683860477825075771/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=22566012&amp;postID=4683860477825075771" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/22566012/posts/default/4683860477825075771" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/22566012/posts/default/4683860477825075771" rel="self" type="application/atom+xml"/>
    <link href="http://haz-tech.blogspot.com/2010/08/soc-wrap-up.html" rel="alternate" type="text/html"/>
    <title>SoC Wrap-up</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><a href="http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2010/python/t127230762878">Supercharging SymPy's Assumptions</a> -- that was the task for my SoC project this year. So how far has it come? Well there were three substantial pushes I'll outline here:<br/><br/><hr/><br/><div style="text-align: center;"><i>Removal of Old Assumptions</i></div><br/>  By a decent margin, this was the most time consuming task, and likely the one that will see the least contribution to SymPy's code-base. The conversation as to how best strip out SymPy's old assumptions continues, and my foray into the mess can be found in [<a href="http://github.com/haz/sympy/tree/disconnect-assumptions">these</a>] [<a href="http://github.com/haz/sympy/tree/disconnect-assumptions-2">two</a>] branches (the latter being the most recent and promising).<br/><br/>  Despite the possibility of this code not making it into the trunk, this task served as a vital in-depth introduction to the SymPy system as a whole, and gave me a far greater understanding of SymPy in general than I could have hoped by simply browsing the code-base. It also brought some of the issues with the assumption system to the forefront for discussion, which will hopefully continue beyond the bounds of the SoC timeline.<br/><br/><hr/><br/><div style="text-align: center;"><i>SAT Solver</i></div><br/>  Probably the most effective use of my skills, I implemented a new SAT Solver from the ground up for SymPy. It's got an <a href="http://haz-tech.blogspot.com/2010/07/clause-learning-and-heuristics.html">effective heuristic</a>, the <a href="http://haz-tech.blogspot.com/2010/07/clause-learning-flunk.html">ground work</a> for clause learning, and advanced SAT solver <a href="http://haz-tech.blogspot.com/2010/08/whos-watching-watch-literals.html">data structures</a>. I've spent a fair bit talking about this on the blog already, so I won't go into further detail here. But [<a href="http://github.com/haz/sympy/tree/sat-solver">this</a>] is the branch, and here's how it stacks up against the old DPLL solver (note that the y-axis is log scale):<br/><br/><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/_DvrW_QLstcQ/TF3S_KdyDJI/AAAAAAAACLU/9qhiJV4q0CM/s1600/dpll.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="318" src="http://4.bp.blogspot.com/_DvrW_QLstcQ/TF3S_KdyDJI/AAAAAAAACLU/9qhiJV4q0CM/s400/dpll.png" width="400"/></a></div><br/><hr/><br/><div style="text-align: center;"><i>Knowledge Compilation</i></div><br/>  This here is a fuzzy term used to describe pre-computation that helps in online queries. There's a large body of research when considering queries in boolean logic, and I've had some experience dealing with such things. In fact, [<a href="http://github.com/sympy/sympy/blob/master/sympy/assumptions/ask.py#L214">this line</a>] in SymPy could be considered something along the lines of knowledge compilation for the assumption system -- it pre-computes the CNF of the known rules so that queries to the <b>ask</b> function don't need to compile them every time for the logical inference.<br/><br/>  Well we can take this a step further. And that's precisely what [<a href="http://github.com/haz/sympy/tree/atms">this</a>] branch does. One thing it does is [<a href="http://github.com/haz/sympy/blob/atms/sympy/assumptions/ask.py#L253">explicitly store</a>] the CNF so it's not computed at import time. This is accomplished by copying the output of [<a href="http://github.com/haz/sympy/blob/atms/sympy/assumptions/ask.py#L180">this function</a>] to the ask.py file. So now we have a simple CNF ready to go whenever the SAT solver is invoked to answer an <b>ask</b> query.<br/><br/>  Beyond this simple compilation, there is more we can do to completely avoid calling the SAT solver -- if we can answer the query quickly, there's no sense in calling the full DPLL algorithm. This is accomplished by pre-computing all of the implications from single assumptions -- see [<a href="http://github.com/haz/sympy/blob/atms/sympy/assumptions/ask.py#L280">this dictionary</a>]. An entry such as '<span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="n" style="line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">Q</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="o" style="font-weight: bold; line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">.</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="n" style="line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">imaginary</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="p" style="line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">:</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"> </span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="nb" style="color: #0086b3; line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">set</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="p" style="line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">([</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="n" style="line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">Q</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="o" style="font-weight: bold; line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">.</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="n" style="line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">complex</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="p" style="line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">,</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"> </span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="n" style="line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">Q</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="o" style="font-weight: bold; line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">.</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="n" style="line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">imaginary</span></span><span class="Apple-style-span" style="font-family: 'Bitstream Vera Sans Mono', Courier, monospace; font-size: 12px; line-height: 17px; white-space: pre;"><span class="p" style="line-height: 1.4em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;">])</span></span>' should be read as, "If we know it's imaginary, then we know it must be complex and it must be imaginary".<br/><br/>  Simple, I know, but it saves us from calling a sat solver simply to find out that a variable is imaginary if we assume it's imaginary ;). Well maybe that would be captured by [<a href="http://github.com/haz/sympy/blob/atms/sympy/assumptions/ask.py#L101">this line</a>], but successive implications are all compiled down, so this does save you a fair bit. How much? Well running 'bin/test sympy/assumptions' on the trunk calls the SAT Solver 811 times while this branch cuts it down to a mere 258. Granted we now have a faster SAT solver, but why use such a big hammer when the query is simple?<br/><br/>  The method also captures things like ask(x, Q.imaginary, Assume(x, Q.complex, False)) -- if Q.imaginary was true, then Q.complex must be true (because of the lookup we pre-compiled), and since we know this isn't the case, we can conclude that x is not imaginary as well. How are these facts compiled? Well we do the exhaustive checks with the SAT solver ([<a href="http://github.com/haz/sympy/blob/atms/sympy/assumptions/ask.py#L195">this line</a>]), and dump the results just like the pre-computed CNF.<br/><br/><hr/><br/>  So these were the dives into SymPy this summer. As I mentioned earlier, the first may not see the light of day (in the SymPy trunk), but the second two have been merged to a unified branch, [<a href="http://github.com/haz/sympy/tree/soc-final">here</a>]. It's been rebased on top of the current SymPy trunk, and is ready to go for testing / tampering. I'll be sending it around to the sympy-patches list, and putting notes of it up on the relevant issues. Hopefully by the firm pencil down date (August 16th), it'll be in shape for inclusion to the SymPy core. So please play with it, and let me know what you think.<br/><br/><hr/><br/><div style="text-align: center;"><i>???</i></div><br/><ol><li>The concern of caching everything (in the presence of assumptions) came up for the removal of old assumptions. One thought was to disable caching altogether, but it seems vital for the efficiency in some of the more advanced features of SymPy (integral calculation, etc). But would happen if we enable the cache as soon as a SymPy call is made, and disable / flush it when the computation is done? This would allow things to be cached within a single computation, but since assumptions don't change mid-way, we would avoid any bad-cache hits. <br/><br/></li><li>Do [<a href="http://github.com/haz/sympy/blob/atms/sympy/assumptions/ask.py#L280">these rules</a>] all make sense? They look good to me, but like anything pre-compiled they should have some more eyes on them ;). <br/><br/></li><li>Assume(x &gt; 1) is a missing puzzle piece thus far. Since <b>ask</b> can be called with any arbitrary expression (which is subsequently decomposed), this becomes increasingly more difficult to figure out. At a high level we want to be able to compute all of the primitive assumptions (ie. Predicates) for an expression, given a more complex expression. So for ask(x, Q.whatever, Assume(x &gt; 0)), we would ask the Gt class to answer things such as, "is x Q.positive?" which would return True iff "0 is nonnegative". But this is just a specific case, and like I mentioned things get complicated with complex assumptions on more than one variable. How do we get from here to there?  <br/><br/>(<b>Note</b>: <i>This wasn't really part of the SoC plan, but I don't intend on stopping work on the assumptions after next week.</i>) </li></ol><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/22566012-4683860477825075771?l=haz-tech.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-08-07T22:38:49Z</updated>
    <published>2010-08-07T22:38:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Haz</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/13252588709861854104</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-22566012</id>
      <author>
        <name>Haz</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/13252588709861854104</uri>
      </author>
      <link href="http://haz-tech.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/22566012/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://haz-tech.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Projects and thoughts for the more technically driven.</subtitle>
      <title>Tech Talk</title>
      <updated>2011-04-21T23:56:17Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9135222751616024074.post-8172338055248531834</id>
    <link href="http://mattjcurry.blogspot.com/feeds/8172338055248531834/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://mattjcurry.blogspot.com/2010/08/nearing-end.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/9135222751616024074/posts/default/8172338055248531834" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/9135222751616024074/posts/default/8172338055248531834" rel="self" type="application/atom+xml"/>
    <link href="http://mattjcurry.blogspot.com/2010/08/nearing-end.html" rel="alternate" type="text/html"/>
    <title>Nearing the End</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Well there's only a week left in GSoC, and plenty of coding left to do. We're supposed to focus on bug fixing and documentation only next week.<div><br/></div><div>It is definitely true that my project became more and more of a bear conceptually as I continued on. Right now we are subclassing sympy's Mul, Add, and Pow classes in order to circumvent any sort of non-commutative/validation/operator problems. We've definitely found a way to avoid most/all of the design issues that I was faced with a few weeks back. Overall, I think a very respectable version of symbolic quantum mechanics (with a quantum  computing example) will be ready by the end.<br/><div><br/></div><div>This last week, we made a lot of progress on QMul, QAdd and QPow. I mainly observed that as we added more and more degrees of freedom (more code), more bugs and weird errors arose. I helped fix a few of these bugs including one today in which Bra('a')*Operator('b') was returning only Bra('a'). The fix was really simple (changing one line), but finding it was much more difficult. It was a good experience because I used more advance forms of debugging that I had previously not needed before.</div></div><div><br/></div><div>Next week I'll write some tests and debug more. Things will start winding down and my project will be done soon enough :)</div><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/9135222751616024074-8172338055248531834?l=mattjcurry.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-08-07T19:16:42Z</updated>
    <published>2010-08-07T18:52:00Z</published>
    <author>
      <name>mcurry</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/10457551070900109390</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9135222751616024074</id>
      <author>
        <name>mcurry</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/10457551070900109390</uri>
      </author>
      <link href="http://mattjcurry.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/9135222751616024074/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://mattjcurry.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Matt's Blog</title>
      <updated>2011-04-21T21:50:24Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-22566012.post-6375375338891344793</id>
    <link href="http://haz-tech.blogspot.com/feeds/6375375338891344793/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=22566012&amp;postID=6375375338891344793" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/22566012/posts/default/6375375338891344793" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/22566012/posts/default/6375375338891344793" rel="self" type="application/atom+xml"/>
    <link href="http://haz-tech.blogspot.com/2010/08/whos-watching-watch-literals.html" rel="alternate" type="text/html"/>
    <title>Who's Watching the Watch Literals?</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">**Yes, I just made a bad <a href="http://www.imdb.com/title/tt0409459/">Watchmen</a> joke, and no I haven't seen the movie yet ;).**<br/><br/>  So far we have seen how the general <a href="http://haz-tech.blogspot.com/2010/07/davis-putnam-logemann-loveland.html">DPLL procedure</a> works, along with <a href="http://haz-tech.blogspot.com/2010/07/clause-learning-and-heuristics.html">clause learning and a fancy heuristic</a>. If we were to profile the solver, we'd find that most of the time at this point is spent doing unit propagation -- especially when we start adding clauses, unit prop triggers constantly. So that is precisely what <i>watch literals</i> are used to speed up.<br/><br/>  The concept of watch literals was born out of a realization as to when exactly a clause is unit-prop'd -- this happens when every literal but one in a clause is set the wrong way. For a while solvers tried just counting the number of literals left to be set in a clause that isn't satisfied, and whenever this went from 2 to 1, you know it's time for unit propagation. Well since we only really care about that specific point (going from two unset literals to one), we will explicitly keep track of those two -- they are our watch literals.<br/><br/>  Every clause that remains to be satisfied will have two watch literals associated with it. But the clause doesn't store this information, those literals do. So instead of keeping track of which clauses are yet to be satisfied, we keep a list of clauses for each literal such that the literal is one of the two watch literals assigned to that clause. And what happens when we set a variable? Well we only need to look at the clauses that the literal's negation is watching, and pick a new watch literal for that clause. An example:<br/><br/><ul><li>Say we have the clause (x | y | z) and x / y are being watched.</li><li>If z was set (regardless of direction), we don't need to do anything for this clause -- not even consider whether or not we should do anything (since updating clauses is done by enumerating z's watch literals).</li><li>Say on the other hand that we set y = False instead of z. Well this clause has y as a watch literal so we would find a new watch literal to replace y -- namely z. After storing a pointer to this clause in the watch literal list for z, we continue with the search.</li><li>Now assume z was set to False. Again, we would check out this clause since z was a watch literal, but this time find that we can no longer find an alternative -- this triggers unit propagation.</li></ul>  So now the clause is satisfied, but what happens to our watch literals? This is the beautiful part -- nothing. Sure, if x is set False later on, we'll check the clause again, but we only update watch literals when the clause isn't satisfied (quick linear time check to see if a clause is satisfied).<br/><br/>  But what happens when we backtrack past the decisions for y and z? This is the /really/ beautiful part -- nothing again. The clause will go from being satisfied to unsatisfied (but we aren't keeping a flag for this anymore -- remember that satisfiability of a clause is a linear time check), but we still have two watch literals set (x and z). Sure, these are different watch literals than what we started with (namely x and y), but that's perfectly ok, and it's unbelievably fast -- all because backtracking doesn't need to update any of the watch literals.<br/><br/>  So that's basically it. Implementing things to work properly isn't the easiest (I've failed a few times before taking up the SoC project this year), but boy oh boy does it ever pay off (see the latter part of <a href="http://haz-tech.blogspot.com/2010/07/clause-learning-flunk.html">this post</a>). So have watch literals gone in to SymPy yet? <a href="http://github.com/haz/sympy/commit/a4facd8d6d94f54c0fbea48806b7858bc82d99bb">You bet</a>.<br/><br/><hr/><br/>  That wraps up the series of SAT solving tutorials. I haven't covered everything that went into <a href="http://github.com/haz/sympy/tree/sat-solver">this branch</a>, but I did touch on all the important points. I haven't come close to covering everything that goes into modern SAT solvers, but if you're interested, the <a href="http://www.satisfiability.org/">Conference on Satisfiability</a> would be a great place to start ;). Thanks for following along, and stay tuned for some further Assumption tweaks.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/22566012-6375375338891344793?l=haz-tech.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-08-07T04:25:17Z</updated>
    <published>2010-08-07T04:25:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Haz</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/13252588709861854104</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-22566012</id>
      <author>
        <name>Haz</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/13252588709861854104</uri>
      </author>
      <link href="http://haz-tech.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/22566012/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://haz-tech.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Projects and thoughts for the more technically driven.</subtitle>
      <title>Tech Talk</title>
      <updated>2011-04-21T23:56:17Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6568744196982634289.post-2896505029722157566</id>
    <link href="http://ondrejcertik.blogspot.com/feeds/2896505029722157566/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=6568744196982634289&amp;postID=2896505029722157566" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/2896505029722157566" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/2896505029722157566" rel="self" type="application/atom+xml"/>
    <link href="http://ondrejcertik.blogspot.com/2010/08/week-aug-2-6.html" rel="alternate" type="text/html"/>
    <title>Week Aug 2 - 6</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I essentially only worked on my LLNL poster, which I finally finished about two hours ago. I have created a web page for it:<br/><br/><a href="http://certik.github.com/ccms-10-poster/">http://certik.github.com/ccms-10-poster/</a><br/><br/>where you can download pdf, sources, I also put there some relevant info and links.<br/><br/><br/>It turned out to be a lot more work than I expected (well, as usual), but we were very thorough with John and in the process I discovered several bugs in my program, so I am glad we did it. I used to generate all the plots by hand, by manually adjusting all the parameters in the Python script (like atomic number, mesh parameters, element orders, adaptivity parameters, error tolerance and so on). Essentially I had to remember all these parameters for each of the plots (about 10 of them). Then I settled to have a Python dictionary, that holds all the parameters, and then I just pass them to a radial_schroedinger_equation_adapt(params, error_tol=1e-8) function.<br/><br/>Here are example of the parameters:<br/><pre><br/>    params_hydrogen_p_L = dict(l=0, Z=1, a=0, b=100, el_num=4, el_order=1,<br/>            eig_num=3, mesh_uniform=False, mesh_par1=20, adapt_type="p",<br/>            eqn_type="R")<br/>    params_hydrogen_p_U = dict(l=0, Z=1, a=0, b=100, el_num=4, el_order=2,<br/>            eig_num=3, mesh_uniform=True, adapt_type="p", eqn_type="R")<br/>    params_hydrogen_hp_U = dict(l=0, Z=1, a=0, b=100, el_num=4, el_order=2,<br/>            eig_num=3, mesh_uniform=True, adapt_type="hp", eqn_type="R")<br/>    params_hydrogen_h_U = dict(l=0, Z=1, a=0, b=100, el_num=4, el_order=6,<br/>            eig_num=3, mesh_uniform=True, adapt_type="romanowski",<br/>            eqn_type="rR")<br/><br/>    params_silver_p_L = dict(l=0, Z=47, a=0, b=150, el_num=4, el_order=13,<br/>            eig_num=50, mesh_uniform=False, mesh_par1=35, adapt_type="p",<br/>            eqn_type="R")<br/>    params_silver_hp_L = dict(l=0, Z=47, a=0, b=150, el_num=4, el_order=13,<br/>            eig_num=50, mesh_uniform=False, mesh_par1=35, adapt_type="hp",<br/>            eqn_type="R")<br/></pre><br/>I mean, this is kind of obvious if you think about it, but for some reason I didn't do that at all at the beginning, because I thought --- I'll just run this once and I am done with it. But I had to run it like 20x, e.g. regenerating he plots, then creating a table about meshes, then redoing the table after changing the error tolerance, and so on.<br/><br/>Besides that I also got permission to release my code, so I'll go over it in the coming days and generate nice patches against Hermes1D.<br/><br/>Also in the process of creating the poster, I played a lot with p-FEM, uniform-p-FEM, hp-FEM and h-FEM and I will keep playing with that. It's clear to me now, that our current Hermes1D is not optimal. Especially the convergence of hp-FEM and p-FEM (as it is implemented right now) greatly depends on the initial mesh.<br/><br/>Nevertheless, even with the above limitations, hp-FEM seems to be really good if you don't a-priori know anything about the problem/mesh. One should not make any deep conclusions in 1D (it might be a bit different in 2D and 3D, and also I only did couple test problems), but from my experience so far, hp-FEM is a really good choice, if you just want to solve the problem and get a decent convergence (way better than h-FEM, and in general about the same as uniform-p-FEM with optimized mesh).<br/><br/>Another conclusion is that uniform-p-FEM (also called spectral element method), if you optimize the mesh for the problem, is very fast. All you have to do is increase the polynomial order and it goes very straight on the convergence graphs, it's very hard to beat. Also, and that I would like to write in the coming days, the algorithm for optimizing the mesh is really simple: just solve it with high "p", then play with the mesh parameters (for logarithmic mesh, there are only 2 parameters --- number of elements, and a ratio of first vs. last element), so that the eigenvalues (that one is interested in) are converged (with given accuracy) and optimize it wrt DOFs. The algorithm can also "look" at the convergence graphs and make sure it's steep enough. For atomic problems, my experience shows that the logarithmic mesh is good enough (as long as you optimize it). The advantage is that you do this once, and then (for close enough potentials in the Schroedinger equation), you just increase "p", and it's very robust and fast (no need for reference mesh, or trial refinements and so on).<br/><br/>When I get back to Reno, we'll do more research on hp-FEM with Pavel and I think this is not the last word to say. We need to review how we choose the candidates for eigenvectors, especially "p" vs "hp" and make it more robust. We'll see.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/6568744196982634289-2896505029722157566?l=ondrejcertik.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-08-07T01:27:19Z</updated>
    <published>2010-08-07T01:02:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="scipy"/>
    <author>
      <name>Ondřej Čertík</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/02845032202161204018</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6568744196982634289</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02845032202161204018</uri>
      </author>
      <link href="http://ondrejcertik.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://ondrejcertik.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Ondřej Čertík</title>
      <updated>2011-04-21T23:17:59Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-936818886435977143.post-8445992689514487932</id>
    <link href="http://addisoncugini.blogspot.com/feeds/8445992689514487932/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://addisoncugini.blogspot.com/2010/08/qmul-qadd-and-qpow.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/936818886435977143/posts/default/8445992689514487932" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/936818886435977143/posts/default/8445992689514487932" rel="self" type="application/atom+xml"/>
    <link href="http://addisoncugini.blogspot.com/2010/08/qmul-qadd-and-qpow.html" rel="alternate" type="text/html"/>
    <title>QMul, QAdd, and QPow</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">My time this week has been spent working on Matt's project. In my last post, I mentioned how there was difficulty teaching the code to adhere to special quantum rules as the quantum objects get swallowed up inside Mul, Add and Pow objects. In order to remedy this, I needed to create a new set of binary operation classes that adhere to these rules with the same op-priority as other quantum objects.<br/><br/>To do this, I put logic inside the binary-ops' __new__ method which called a set of logic rules. These rules return an instance of the correct object if an object should be created or raise an error if the input expression is nonesense. For this to work, binary-op objects must know to what quantum type they evaluate (e.g. to what Hilbert space they belong as well as whether they act as a Ket, Bra, or Operator when evaluated). Thus, I used __slots__ to contain 'hilbert_space' and 'evaluates' attributes; these attributes are set during initialization in the 'rules' class methods. To make this simpler, all Quantum Objects inherit from a QuantumBasic class which contains the op_priority information, __slots__ for 'hilbert_space' and 'evaluates', as well as the __mul__, __add__, __pow__ methods which call the __new__ method of our new binary operations.<br/><br/>I mostly have this logic working such that it can flatten non-commutatively for QMul and commutatively for QAdd. However, I still need to get the .expand() method up and working. That said, there is still much testing that needs to be done before I can get this integrated with my code, which makes me worried as the GSoC pencil down date fast approaches.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/936818886435977143-8445992689514487932?l=addisoncugini.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-08-06T20:57:09Z</updated>
    <published>2010-08-06T20:04:00Z</published>
    <author>
      <name>AddisonCugini</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/09778793677316682601</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-936818886435977143</id>
      <author>
        <name>AddisonCugini</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/09778793677316682601</uri>
      </author>
      <link href="http://addisoncugini.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/936818886435977143/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://addisoncugini.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Addison's Blog Page</title>
      <updated>2011-04-22T02:54:01Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=710</id>
    <link href="http://asmeurersympy.wordpress.com/2010/08/05/prototype-risch_integrate-function-ready-for-testing/" rel="alternate" type="text/html"/>
    <title>Prototype risch_integrate() function ready for testing!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So today I finally finished up the prototype function I talked about last week. The function is called risch_integrate() and is available at my integration3 branch. Unlike the inner level functions I have showcased in previous blog posts, this function does not require you to do substitution for dummy variables and manually create a list [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=710&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So today I finally finished up the prototype function I talked about <a href="http://asmeurersympy.wordpress.com/2010/07/31/integration-of-primitive-functions/">last week</a>.  The function is called <code>risch_integrate()</code> and is available at my <a href="http://github.com/asmeurer/sympy/tree/integration3">integration3</a> branch.  Unlike the inner level functions I have showcased in <a href="http://asmeurersympy.wordpress.com/2010/07/31/integration-of-primitive-functions/">previous</a> <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">blog posts</a>, this function does not require you to do substitution for dummy variables and manually create a list of derivatives, etc.  All you have to do is pass it a function and the integration variable, and it will return the result, just like normal <code>integrate()</code>. I have spent the past few days working on a monster of a function called <code>build_extension()</code> that does this preparsing work for you.  The reason that the function was so hard to write is that the transcendental Risch Algorithm is very picky.  <em>Every</em> differential extension has to be transcendental over the previous extensions.  This means that if you have a function like <img alt="e^x + e^{\frac{x}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5Ex+%2B+e%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^x + e^{\frac{x}{2}}"/>, you cannot write this as <img alt="t_0 + t_1" class="latex" src="http://s0.wp.com/latex.php?latex=t_0+%2B+t_1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0 + t_1"/> with <img alt="t_0=e^x" class="latex" src="http://s0.wp.com/latex.php?latex=t_0%3De%5Ex&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0=e^x"/> and <img alt="t_1=e^{\frac{x}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=t_1%3De%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_1=e^{\frac{x}{2}}"/> because <img alt="t_0" class="latex" src="http://s0.wp.com/latex.php?latex=t_0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0"/> and <img alt="t_1" class="latex" src="http://s0.wp.com/latex.php?latex=t_1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_1"/> will each be algebraic over the other (<img alt="t_0=t_1^2" class="latex" src="http://s0.wp.com/latex.php?latex=t_0%3Dt_1%5E2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0=t_1^2"/>).  You also cannot let <img alt="t_0=e^{x}" class="latex" src="http://s0.wp.com/latex.php?latex=t_0%3De%5E%7Bx%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0=e^{x}"/> and rewrite the whole integral in terms of <img alt="t_0" class="latex" src="http://s0.wp.com/latex.php?latex=t_0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0"/> because you will get <img alt="t_0 + \sqrt{t_0}" class="latex" src="http://s0.wp.com/latex.php?latex=t_0+%2B+%5Csqrt%7Bt_0%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0 + \sqrt{t_0}"/>, which is an algebraic function.  The only way that you can do it is to let <img alt="t_0=e^{\frac{x}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=t_0%3De%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0=e^{\frac{x}{2}}"/>, and then your function will be <img alt="t_0^2 + t_0" class="latex" src="http://s0.wp.com/latex.php?latex=t_0%5E2+%2B+t_0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0^2 + t_0"/>.  </p>
<p>Now, fortunately, there is an algorithm that provides necessary and sufficient conditions for determining if an extension is algebraic over the previous ones.  It’s called the Risch Structure Theorems.  My first order of business this week was to finish implementing these.  This is actually the reason that I we had to wait until now to get this prototype function.  The Structure Theorems are at the very end of Bronstein’s book, and the integration algorithm is not correct without them (namely, it is not correct if you add an algebraic extension).  I just recently got to them in my reading.  Actually, I skipped some work on tangent integration so I could get to them first.  I hope to talk a little about them in a future “Risch Integration” blog post, though be aware that they require some extremely intense algebraic machinery to prove, so I won’t be giving any proofs.</p>
<p>Even though these algorithms can tell me, for example, that I shouldn’t have added <img alt="t_0=e^x" class="latex" src="http://s0.wp.com/latex.php?latex=t_0%3De%5Ex&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0=e^x"/> above because it makes <img alt="e^{\frac{x}{2}}=\sqrt{t_0}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7D%3D%5Csqrt%7Bt_0%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^{\frac{x}{2}}=\sqrt{t_0}"/>, that means that I have to go back and restart my search for an extension so that I can try to get <img alt="t_0=e^{\frac{x}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=t_0%3De%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0=e^{\frac{x}{2}}"/> instead.  So I wrote a simple function that takes the arguments of the exponentials and determines the lowest common factor.  This heuristic saves a lot of time.  </p>
<p>I also noticed (actually, Chris Smith inadvertently pointed it out to me; super thanks to him), that the Structure Theorem algorithms only tell you if the terms are the same as monomials.  It would tell you that <img alt="e^x = e^{x + 1}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5Ex+%3D+e%5E%7Bx+%2B+1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^x = e^{x + 1}"/> because both satisfy <img alt="Dt=t" class="latex" src="http://s0.wp.com/latex.php?latex=Dt%3Dt&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Dt=t"/>.  Therefore, I had to also modify the structure theorem algorithms to pull out any constant term.  </p>
<p>It can still be necessary to restart building the extension even with the above heuristic.  For example, if you have <img alt="e^x + e^{x^2} + e^{\frac{x}{2} + x^2}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5Ex+%2B+e%5E%7Bx%5E2%7D+%2B+e%5E%7B%5Cfrac%7Bx%7D%7B2%7D+%2B+x%5E2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^x + e^{x^2} + e^{\frac{x}{2} + x^2}"/>, and start with <img alt="t_0=e^x" class="latex" src="http://s0.wp.com/latex.php?latex=t_0%3De%5Ex&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0=e^x"/> and <img alt="t_1=e^{x^2}" class="latex" src="http://s0.wp.com/latex.php?latex=t_1%3De%5E%7Bx%5E2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_1=e^{x^2}"/>, then the structure theorems will tell you that <img alt="e^{x/2 + x^2} = \sqrt{t_0}t_1" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7Bx%2F2+%2B+x%5E2%7D+%3D+%5Csqrt%7Bt_0%7Dt_1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^{x/2 + x^2} = \sqrt{t_0}t_1"/>, which we cannot use because of the radical.  The solution it uses is to split it up as <img alt="e^x + e^{x^2} + e^{\frac{x}{2}}e^{x^2}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5Ex+%2B+e%5E%7Bx%5E2%7D+%2B+e%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7De%5E%7Bx%5E2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^x + e^{x^2} + e^{\frac{x}{2}}e^{x^2}"/> (the structure theorems tell you exactly how to do this so you are splitting in terms of the other exponentials) and then restart the extension building entirely.  This can be an expensive operation, because you have to rebuild <img alt="t_0" class="latex" src="http://s0.wp.com/latex.php?latex=t_0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0"/> and <img alt="t_1" class="latex" src="http://s0.wp.com/latex.php?latex=t_1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_1"/>, but this time, the heuristic function I wrote from above handles the <img alt="e^{\frac{x}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^{\frac{x}{2}}"/> correctly, making <img alt="t_0=e^{\frac{x}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=t_0%3De%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0=e^{\frac{x}{2}}"/>, with the final answer <img alt="t_0^2 + t_1 + t_0t_1" class="latex" src="http://s0.wp.com/latex.php?latex=t_0%5E2+%2B+t_1+%2B+t_0t_1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_0^2 + t_1 + t_0t_1"/>.  I could have probably made it smarter by only going back to before the conflicting extensions, but this was quite a bit more work, and adds more difficulties such as non-trivial relationships, so I just took the lazy way and restarted completely.  It doesn’t take <em>that</em> much time.  </p>
<p>Of course, sometimes, you cannot add a new exponential, no matter how you add the extensions.  The classic example is <img alt="e^{\frac{\log{(x)}}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B%5Cfrac%7B%5Clog%7B%28x%29%7D%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^{\frac{\log{(x)}}{2}}"/>, which you can see is actually equal to <img alt="\sqrt{x}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Csqrt%7Bx%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\sqrt{x}"/>, an algebraic function.  Therefore, I had to implement some tricky logic to keep the <code>build_extension()</code> function from trying again infinitely.  I hope I did it right, so that it never infinite loops, and never fails when it really can be done.  Only time and testing will tell.</p>
<p>It is exactly the same for logarithms, except in that case, when a new logarithm is algebraic in terms of old ones, it can be written as a linear combination of them.  This means that there are never any radicals to worry about, though you do also have to worry about constants.  For example, <img alt="\log{(x)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%7B%28x%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\log{(x)}"/> looks the same as <img alt="\log{(2x)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%7B%282x%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\log{(2x)}"/> because they both satisfy <img alt="Dt=\frac{1}{x}" class="latex" src="http://s0.wp.com/latex.php?latex=Dt%3D%5Cfrac%7B1%7D%7Bx%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Dt=\frac{1}{x}"/>.  An example of a logarithm that is algebraic over old ones is <img alt="\log{(x^2 - 1)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%7B%28x%5E2+-+1%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\log{(x^2 - 1)}"/> over <img alt="\log{(x + 1)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%7B%28x+%2B+1%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\log{(x + 1)}"/> and <img alt="\log{(x - 1)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%7B%28x+-+1%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\log{(x - 1)}"/>, because <img alt="\log{(x^2 - 1)}=\log{((x + 1)(x - 1))}=\log{(x + 1)} + \log{(x - 1)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%7B%28x%5E2+-+1%29%7D%3D%5Clog%7B%28%28x+%2B+1%29%28x+-+1%29%29%7D%3D%5Clog%7B%28x+%2B+1%29%7D+%2B+%5Clog%7B%28x+-+1%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\log{(x^2 - 1)}=\log{((x + 1)(x - 1))}=\log{(x + 1)} + \log{(x - 1)}"/>.  </p>
<p>The parallels between exponentials and logarithms are amazing.  For the structure theorems, the exponential case is exactly the same as the logarithmic case except replacing addition with multiplication and multiplication with exponentiation.  For the exponential case, you need the arguments of the already added logarithms to find the algebraic dependence, and the arguments of the already added exponentials to find the constant term.  For the logarithmic case, you need the arguments of the already added exponentials to find the algebraic dependence, and the arguments of the already added logarithms to find the content term. Everything else is exactly the same, except for the shift in operators.  Of course, I realize why these things are, mathematically, but the symmetry still amazing to me.  I will hopefully explain in more detail in my future Structure Theorems post.  </p>
<p>So onto the <code>risch_integrate()</code> function.  Here is the text that I have basically put in my <a href="http://github.com/asmeurer/sympy/commit/e3cd5f18f86fd6377836f33f726182c8bd4dc1a0">commit message</a>, the <a href="http://code.google.com/p/sympy/issues/detail?q=2010">aptly numbered issue</a> that I have created for it, and the <a href="http://groups.google.com/group/sympy/browse_thread/thread/2464fa764f6f47aa">post to the mailing list</a> (it’s not so much that I am lazy as that I was really excited to get this out there).</p>
<blockquote><p>
I have ready in my integration3 branch a prototype risch_integrate() function that is a user-level function for the full Risch Algorithm I have been implementing this summer.  Pull from h<a href="http://github.com/asmeurer/sympy/tree/integration3">ttp://github.com/asmeurer/sympy/tree/integration3</a>.</p>
<p>This is NOT ready to go in.  It is a prototype function that I am making available so people can try out the new algorithm and hopefully help me to find the bugs in it.  Please pass it your favorite non-elementary integrals and see if it can determine that they are not elementary.  If you try to pass it a very crazy function at random, the chances are pretty high that it will not be elementary.  So a better way to test it is to come up with a crazy function, then differentiate it. Then pass the derivative and see if it can give you your original function back.  Note that it will probably not look exactly the same as your original function, and may differ by a constant.  You should verify by differentiating the result you get and calling cancel() (or simplify(), but usually cancel() is enough) on the difference.</p>
<p>So you can review the code too, if you like, but just know that things are not stable yet, and this isn’t strictly a branch for review.  </p>
<p>So far, this function only supports exponentials and logarithms.<br/>
Support for trigonometric functions is planned.  Algebraic functions are<br/>
not supported. If the function returns an unevaluated Integral, it means<br/>
that it has proven the integral to be non-elementary.  Note that several<br/>
cases are still not implemented, so you may get NotImplementedError<br/>
instead. Eventually, these will all be eliminated, and the only<br/>
NotImplementedError you should see from this function is<br/>
NotImplementedError(“Algebraic extensions are not supported.”)</p>
<p>This function has not been integrated in any way with the already<br/>
existing integrate() yet, and you can use it to compare.</p>
<p>Examples:</p>
<pre class="brush: python;">In [1]: risch_integrate(exp(x**2), x)
Out[1]:
⌠
⎮  ⎛ 2⎞
⎮  ⎝x ⎠
⎮ ℯ     dx
⌡

In [2]: risch_integrate(x**100*exp(x), x).diff(x)
Out[2]:
 100  x
x   ⋅ℯ

In [3]: %timeit risch_integrate(x**100*exp(x), x).diff(x)
1 loops, best of 3: 270 ms per loop

In [4]: integrate(x**100*exp(x), x)
... hangs ...

In [5]: risch_integrate(x/log(x), x)
Out[5]:
⌠
⎮   x
⎮ ────── dx
⎮ log(x)
⌡

In [6]: risch_integrate(log(x)**10, x).diff(x)
Out[6]:
   10
log  (x)

In [7]: integrate(log(x)**10, x).diff(x)
Out[7]:
   10
log  (x)

In [8]: %timeit risch_integrate(log(x)**10, x).diff(x)
10 loops, best of 3: 159 ms per loop

In [9]: %timeit integrate(log(x)**10, x).diff(x)
1 loops, best of 3: 2.35 s per loop
</pre>
<p>Be warned that things are still very buggy and you should always verify<br/>
results by differentiating.  Usually, cancel(diff(result, x) – result)<br/>
should be enough.  This should go to 0.</p>
<p>So please, please, PLEASE, try out this function and report any bugs that you find.  It is not necessary to report NotImplementedError bugs, because I already know about those (I put them in there), and as I mentioned above, they are all planned to disappear.  Also, I am continually updating my branch with fixes, so you should do a “git pull” and try again before you report anything.</p>
<p>Also, I am aware that there are test failures.  This is because I had to hack exp._eval_subs() to only do exact substitution (no algebraic substitution).  It’s just a quick hack workaround, and I should eventually get a real fix.  </p>
<p>Finally, I’m thinking there needs to be a way to differentiate between an unevaluated Integral because the integrator failed and an unevaluated Integral because it has proven the integral to be non-elementary.  Any ideas?
</p></blockquote>
<p>Also, looking at the integral from the previous blog post, you can get the different results by using the <code>handle_log</code> argument to <code>risch_integrate()</code>:</p>
<p>If <code>handle_first == 'log'</code> (the default right now), then it will gather all logarithms first, and then exponentials (insomuch as it can do it in that order).  If <code>handle_first='exp'</code>, it gathers exponentials first.  The difference is that the Risch Algorithm integrates recursively, one extension at a time, starting with the outer-most one. So if you have an expression with both logarithms and exponentials, such that they do not depend on each other, <code>handle_first == 'log'</code> will integrate the exponentials first, because they will be gathered last (be at the top of the tower of extensions), and <code>handle_first == 'exp'</code> will integrate the logarithms first.  Right now, I have defaulted to ‘log’ because the exponential integration algorithm is slightly more complete.  If you get <code>NotImplementedError</code> with one, it is possible (though I don’t know for sure yet) that you might get an answer with the other.  </p>
<p>Also, they can give different looking results, and at different speeds.  For example:</p>
<p><strong>Hover over the code and click on the left-most, “view source” icon (a paper icon with <tt>&lt; &gt;</tt> over it) to view without breaks.  Opens in a new window.</strong></p>
<pre class="brush: python;">In [1]: f = (x*(x + 1)*((x**2*exp(2*x**2) - log(x + 1)**2)**2 +
   ...: 2*x*exp(3*x**2)*(x - (2*x**3 + 2*x**2 + x + 1)*log(x + 1))))/((x +
   ...: 1)*log(x + 1)**2 - (x**3 + x**2)*exp(2*x**2))**2

In [2]: f
Out[2]:
          ⎛                          2                                                   ⎞
          ⎜⎛                       2⎞                                                   2⎟
          ⎜⎜     2           2  2⋅x ⎟        ⎛    ⎛           2      3⎞           ⎞  3⋅x ⎟
x⋅(1 + x)⋅⎝⎝- log (1 + x) + x ⋅ℯ    ⎠  + 2⋅x⋅⎝x - ⎝1 + x + 2⋅x  + 2⋅x ⎠⋅log(1 + x)⎠⋅ℯ    ⎠
──────────────────────────────────────────────────────────────────────────────────────────
                                                                2
                         ⎛                                    2⎞
                         ⎜   2                  ⎛ 2    3⎞  2⋅x ⎟
                         ⎝log (1 + x)⋅(1 + x) - ⎝x  + x ⎠⋅ℯ    ⎠                          

In [3]: risch_integrate(f, x, handle_first='log')
Out[3]:
       ⎛              ⎛ 2⎞⎞                   ⎛                ⎛ 2⎞⎞
       ⎜log(1 + x)    ⎝x ⎠⎟                   ⎜  log(1 + x)    ⎝x ⎠⎟          ⎛ 2⎞
    log⎜────────── + ℯ    ⎟                log⎜- ────────── + ℯ    ⎟       2  ⎝x ⎠
       ⎝    x             ⎠                   ⎝      x             ⎠      x ⋅ℯ    ⋅log(1 + x)
x + ─────────────────────── - log(1 + x) - ───────────────────────── + ──────────────────────────
               2                                       2                                        2
                                                                              2           3  2⋅x
                                                                       - x⋅log (1 + x) + x ⋅ℯ    

In [4]: risch_integrate(f, x, handle_first='exp')
Out[4]:
       ⎛                ⎛ 2⎞⎞                   ⎛                ⎛ 2⎞⎞        ⎛ 2⎞
       ⎜                ⎝x ⎠⎟                   ⎜                ⎝x ⎠⎟        ⎝x ⎠
    log⎝log(1 + x) + x⋅ℯ    ⎠                log⎝log(1 + x) - x⋅ℯ    ⎠     x⋅ℯ    ⋅log(1 + x)
x + ───────────────────────── - log(1 + x) - ───────────────────────── - ──────────────────────
                2                                        2                                    2
                                                                            2           2  2⋅x
                                                                         log (1 + x) - x ⋅ℯ    

In [5]: %timeit risch_integrate(f, x, handle_first='log')
1 loops, best of 3: 1.49 s per loop

In [6]: %timeit risch_integrate(f, x, handle_first='exp')
1 loops, best of 3: 1.21 s per loop

In [7]: cancel(risch_integrate(f, x, handle_first='log').diff(x) - f)
Out[7]: 0

In [8]: cancel(risch_integrate(f, x, handle_first='exp').diff(x) - f)
Out[8]: 0
</pre>
<p>So go now, and pull my <a href="http://github.com/asmeurer/sympy/tree/integration3">branch</a>, and try this function out.  And report any problems that you have back to me, either through the mailing list, IRC, issue 2010, or as a comment to this blog post (I don’t really care how).</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/710/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/710/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/710/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/710/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/710/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/710/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/710/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/710/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/710/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/710/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/710/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/710/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/710/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/710/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=710&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2010-08-05T22:30:00Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-05-22T03:04:11Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-4754734402679928849.post-8421138063566161330</id>
    <link href="http://fredrik-j.blogspot.com/feeds/8421138063566161330/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=4754734402679928849&amp;postID=8421138063566161330" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/8421138063566161330" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/8421138063566161330" rel="self" type="application/atom+xml"/>
    <link href="http://fredrik-j.blogspot.com/2010/07/euler-maclaurin-summation-of.html" rel="alternate" type="text/html"/>
    <title>Euler-Maclaurin summation of hypergeometric series</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I recently fixed another corner case (it's always the corner cases that are hard!) in the hypergeometric function evaluation code in mpmath.<br/><br/>The difficulty in question concerns the functions <sub><i>p</i></sub><i>F</i><sub><i>p</i>-1</sub>(...; ...; <i>z</i>), of which the Gauss hypergeometric function <sub>2</sub><i>F</i><sub>1</sub> is an important special case. These functions can be thought of as generalizations of the geometric series<br/><br/><a href="http://4.bp.blogspot.com/_rh0QblLk0C0/TFCIHTI0lEI/AAAAAAAAAUQ/j-LsprfzhkE/s1600/h3.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5499044803997111362" src="http://4.bp.blogspot.com/_rh0QblLk0C0/TFCIHTI0lEI/AAAAAAAAAUQ/j-LsprfzhkE/s400/h3.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 227px; height: 48px;"/></a><br/><br/>and the natural logarithm<br/><br/><a href="http://1.bp.blogspot.com/_rh0QblLk0C0/TFCHMAB6e3I/AAAAAAAAAUI/pOUKOM2qE_c/s1600/h2.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5499043785255582578" src="http://1.bp.blogspot.com/_rh0QblLk0C0/TFCHMAB6e3I/AAAAAAAAAUI/pOUKOM2qE_c/s400/h2.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 341px; height: 50px;"/></a><br/><br/>and share the property that the hypergeometric (Maclaurin) series has radius of convergence 1, with a singularity (either algebraic or logarithmic, as above) at <i>z</i> = 1.<br/><br/>Numerical evaluation is fairly easy for <i>z</i> in most of the complex plane. The series for <sub><i>p</i></sub><i>F</i><sub><i>p</i>-1</sub>(...; ...; <i>z</i>) converges like the geometric series, so direct summation works well for, say, |<i>z</i>| ≤ <i>r</i> 0.9. Likewise, there is an analytic continuation formula which transforms <i>z</i> to 1/<i>z</i>, allowing evaluation for (say) |<i>z</i>| ≥ 1.1.<br/><br/>The remaining shell around the unit circle 0.9 &lt; |<i>z</i>| &lt; 1.1 is the difficult region. In fact, <sub>2</sub><i>F</i><sub>1</sub> can still (essentially) be computed using exact transformations here, but the higher cases remain difficult. As mentioned in an <a href="http://fredrik-j.blogspot.com/2009/12/analytic-continuation-of-3f2-4f3-and.html">earlier post</a>, mpmath handles this by calling <tt>nsum()</tt> which applies convergence acceleration to the slowly converging series. In particular, <tt>nsum</tt> implements the (generalized) <a href="http://en.wikipedia.org/wiki/Shanks_transformation">Shanks transformation</a> which is extremely efficient for this particular type of series – in fact, it works outside the radius of convergence (Shanks transformation effectively computes a Padé approximant), so it can be used anywhere in the difficult shell.<br/><br/>Still, the Shanks transformation is most efficient when arg(<i>z</i>) = ±π and unfortunately degenerates as arg(<i>z</i>) → 0, i.e. close to <i>z</i> = 1. <tt>nsum</tt> also implements <a href="http://en.wikipedia.org/wiki/Richardson_extrapolation">Richardson extrapolation</a>, which sometimes works at <i>z</i> = 1, but only for special parameter combinations in the hypergeometric series (although those special combinations happen to be quite important – they include the case where the hypergeometric series reduces to a polygamma function or polylogarithm).<br/><br/>Thus, we have the following evaluation strategy for <sub><i>p</i></sub><i>F</i><sub><i>p</i>-1</sub>:<br/><br/>Blue: direct summation (with respect to <i>z</i> or 1/<i>z</i>)<br/>Yellow: Shanks transformation<br/>Red: ???<br/><br/><a href="http://2.bp.blogspot.com/_rh0QblLk0C0/TFImLM1V3pI/AAAAAAAAAUY/al-aaPxHOPw/s1600/circle.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5499500068838170258" src="http://2.bp.blogspot.com/_rh0QblLk0C0/TFImLM1V3pI/AAAAAAAAAUY/al-aaPxHOPw/s400/circle.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 300px; height: 300px;"/></a><br/><br/>A commenter <a href="http://fredrik-j.blogspot.com/2009/12/analytic-continuation-of-3f2-4f3-and.html?showComment=1274751298704#c5051305326286671188">suggested</a> trying some other convergence acceleration techniques (like the Levin transformation). But it seems that they still will fail in some cases.<br/><br/>Thus I've finally implemented the <a href="http://en.wikipedia.org/wiki/Euler%E2%80%93Maclaurin_formula">Euler-Maclaurin summation formula</a> for the remaining case. The E-M formula differs from other convergence acceleration techniques in that it is based on analyticity of the integrand and does not require a particular rate of convergence. It is implemented in mpmath as <tt>sumem()</tt>, but requires a little work to apply efficiently.<br/><br/>To apply the E-M formula to a hypergeometric series Σ <i>T</i>(<i>k</i>), the term <i>T</i>(<i>k</i>) must first of all obviously be extended to an analytic function of <i>k</i>, which is done the straightforward way by considering the rising factorials as quotients of gamma functions <i>a</i>(<i>a</i>+1)...(<i>a</i>+<i>k</i>−1) = Γ(<i>a</i>+<i>k</i>) / Γ(<i>a</i>).<br/><br/>We are left with the difficulty of having to integrate <i>T</i>(<i>k</i>) and also to compute <i>n</i>-th order derivatives of this function for the tail expansion in the E-M formula (neither of which can be done in closed form). Fortunately, numerical integration with <tt>quad()</tt> works very well, but the derivatives remain a problem.<br/><br/>By default, <tt>sumem()</tt> computes the derivatives using finite differences. Although this works, it gets extremely expensive at high precision for hypergeometric series due to the rapidly increasing cost of evaluating the gamma function as the precision increases. But <i>T</i>(<i>k</i>) is a product of functions that <i>individually</i> can be differentiated logarithmically in closed form (in terms of polygamma functions). I therefore implemented the equivalent of symbolic high-order differentiation for products and the exponential function using generators.<br/><br/><tt>diffs_prod</tt> generates the high-order derivatives of a product, given generators for products of individual factors:<br/><pre><br/>&gt;&gt;&gt; f = lambda x: exp(x)*cos(x)*sin(x)<br/>&gt;&gt;&gt; u = diffs(f, 1)<br/>&gt;&gt;&gt; v = diffs_prod([diffs(exp,1), diffs(cos,1), diffs(sin,1)])<br/>&gt;&gt;&gt; next(u); next(v)<br/>1.23586333600241<br/>1.23586333600241<br/>&gt;&gt;&gt; next(u); next(v)<br/>0.104658952245596<br/>0.104658952245596<br/>&gt;&gt;&gt; next(u); next(v)<br/>-5.96999877552086<br/>-5.96999877552086<br/>&gt;&gt;&gt; next(u); next(v)<br/>-12.4632923122697<br/>-12.4632923122697<br/></pre><br/><br/><tt>diffs_exp</tt> generates the high-order derivatives of exp(<i>f</i>(<i>x</i>)), given a generator for the derivatives of <i>f</i>(<i>x</i>):<br/><pre><br/>&gt;&gt;&gt; def diffs_loggamma(x):<br/>...     yield loggamma(x)<br/>...     i = 0<br/>...     while 1:<br/>...         yield psi(i,x)<br/>...         i += 1<br/>...<br/>&gt;&gt;&gt; u = diffs_exp(diffs_loggamma(3))<br/>&gt;&gt;&gt; v = diffs(gamma, 3)<br/>&gt;&gt;&gt; next(u); next(v)<br/>2.0<br/>2.0<br/>&gt;&gt;&gt; next(u); next(v)<br/>1.84556867019693<br/>1.84556867019693<br/>&gt;&gt;&gt; next(u); next(v)<br/>2.49292999190269<br/>2.49292999190269<br/>&gt;&gt;&gt; next(u); next(v)<br/>3.44996501352367<br/>3.44996501352367<br/></pre><br/><br/>Actually only differentiation of the exponential function is necessary, which I didn't realize at first, but the product differentiation is still a nice feature to have.<br/><br/>Exponential differentiation amounts to constructing a polynomial of <i>n</i>+1 variables (the derivatives of <i>f</i>), which has <i>P</i>(<i>n</i>) (partition function) ≈ exp(√<i>n</i>) terms. Despite the rapid growth, it is indeed faster to use this approach to differentiate gamma function products at high precision, since the precision can be kept constant. In fact, this should even work in double precision (<tt>fp</tt> arithmetic) although I think it's broken right now due to some minor bug.<br/><br/>As a result of all this, here are two examples that now work (the results have full accuracy):<br/><br/><pre><br/>&gt;&gt;&gt; mp.dps = 25<br/>&gt;&gt;&gt; hyper(['1/3',1,'3/2',2], ['1/5','11/6','41/8'], 1)<br/>2.219433352235586121250027<br/><br/>&gt;&gt;&gt; hyper(['1/3',1,'3/2',2], ['1/5','11/6','5/4'], 1)<br/>+inf<br/>&gt;&gt;&gt; eps1 = extradps(6)(lambda: 1 - mpf('1e-6'))()<br/>&gt;&gt;&gt; hyper(['1/3',1,'3/2',2], ['1/5','11/6','5/4'], eps1)<br/>2923978034.412973409330956<br/></pre><br/><br/><h4>Application: roots of polynomials</h4><br/><br/>A neat application is to compute the roots of quintic polynomials. Such roots can be expressed in closed form using hypergeometric functions, as outlined in the Wikipedia article <a href="http://en.wikipedia.org/wiki/Bring_radical">Bring radical</a>. This is more interesting in theory than practice, since polynomial roots can be calculated very efficiently using iterative methods.<br/><br/>In particular, the roots of <i>x</i><sup>5</sup> - <i>x</i> + <i>t</i> are given (in some order) by<br/><br/><a href="http://4.bp.blogspot.com/_rh0QblLk0C0/TFlkH0bljiI/AAAAAAAAAUk/X7Tl8d54GH4/s1600/1f2a0c3edbd9e10fdd6a6aa5e1c33fe9.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5501538505305984546" src="http://4.bp.blogspot.com/_rh0QblLk0C0/TFlkH0bljiI/AAAAAAAAAUk/X7Tl8d54GH4/s400/1f2a0c3edbd9e10fdd6a6aa5e1c33fe9.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 400px; height: 107px;"/></a><br/><br/>where<br/><br/><a href="http://1.bp.blogspot.com/_rh0QblLk0C0/TFlkIFqd6yI/AAAAAAAAAUs/UZUhNW2xwdg/s1600/a28bdaf32bfb6fb82ec5e4f98feb7c7e.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5501538509931801378" src="http://1.bp.blogspot.com/_rh0QblLk0C0/TFlkIFqd6yI/AAAAAAAAAUs/UZUhNW2xwdg/s400/a28bdaf32bfb6fb82ec5e4f98feb7c7e.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 400px; height: 96px;"/></a><br/><br/>Just verifying one case:<br/><br/><pre><br/>&gt;&gt;&gt; mp.dps = 25; mp.pretty = True<br/>&gt;&gt;&gt; t = mpf(3)<br/>&gt;&gt;&gt; for r in polyroots([1,0,0,0,-1,t]):<br/>...     print r<br/>... <br/>-1.341293531690699250693537<br/>(0.9790618691253385511579325 - 0.6252190807348055061205923j)<br/>(0.9790618691253385511579325 + 0.6252190807348055061205923j)<br/>(-0.3084151032799889258111639 + 1.249926913731033699905407j)<br/>(-0.3084151032799889258111639 - 1.249926913731033699905407j)<br/>&gt;&gt;&gt; -t*hyper(['1/5','2/5','3/5','4/5'], ['1/2','3/4','5/4'], 3125*t**4/256)<br/>(-0.9790618691253385511579325 + 0.6252190807348055061205923j)<br/></pre><br/><br/>Now, we can choose <i>t</i> such that the hypergeometric argument becomes unity:<br/><br/><pre><br/>&gt;&gt;&gt; t = root(mpf(256)/3125,4)<br/>&gt;&gt;&gt; for r in polyroots([1,0,0,0,-1,t]):<br/>...     print r<br/>... <br/>-1.103842268886161371052433<br/>(0.6687403049764220240032331 + 3.167963942396665205386494e-14j)<br/>(0.6687403049764220240032331 - 3.172324181973539074536523e-14j)<br/>(-0.1168191705333413384770166 + 1.034453571405662514459057j)<br/>(-0.1168191705333413384770166 - 1.034453571405662514459057j)<br/><br/>&gt;&gt;&gt; -t*hyper(['1/5','2/5','3/5','4/5'], ['1/2','3/4','5/4'], 1)<br/>-0.6687403049764220240032331<br/></pre><br/><br/>The last line would previously fail.<br/><br/>Interesting to note is that the value at the singular point <i>z</i> = 1 corresponds to a double root. This also makes <tt>polyroots</tt> return inaccurate values (note the imaginary parts), a known deficiency that should be fixed...<br/><br/><h4>Better methods</h4><br/><br/>In fact, there may be better methods than the Euler-Maclaurin formula. One such approach is to use the <a href="http://mathworld.wolfram.com/Abel-PlanaFormula.html">Abel-Plana formula</a>, which I've also recently implemented as <tt>sumap()</tt>. The Abel-Plana formula gives the exact value for an infinite series (subject to some special growth conditions on the analytically extended summand) as a sum of two integrals.<br/><br/>The Abel-Plana formula is particularly useful when the summand decreases like a power of <i>k</i>; for example when the sum is a pure zeta function:<br/><br/><pre><br/>&gt;&gt;&gt; sumap(lambda k: 1/k**2.5, [1,inf])<br/>1.34148725725091717975677<br/>&gt;&gt;&gt; zeta(2.5)<br/>1.34148725725091717975677<br/><br/>&gt;&gt;&gt; sumap(lambda k: 1/(k+1j)**(2.5+2.5j), [1,inf])<br/>(-3.385361068546473342286084 - 0.7432082105196321803869551j)<br/>&gt;&gt;&gt; zeta(2.5+2.5j, 1+1j)<br/>(-3.385361068546473342286084 - 0.7432082105196321803869551j)<br/></pre><br/><br/>It actually works very well for the generalized hypergeometric series at the <i>z</i> = 1 singularity (which, as mentioned earlier, is a generalized polygamma function, polylogarithm, or zeta function of integer argument), and near the singularity as well. It should even be slightly faster than the Euler-Maclaurin formula since no derivatives are required. Yet another possibility is to integrate a Mellin-Barnes type contour for the hypergeometric function directly.<br/><br/>But at present, I don't want to modify the existing hypergeometric code because it works and would only get more complicated. Rather, I want to improve <tt>nsum</tt> so it can handle all of this more easily without external hacks. The numerical integration code should also be improved first, because there are still certain parameter combinations where the hypergeometric function evaluation fails due to slow convergence in the numerical integration (this is due to an implementation issue and not an inherent limitation of the integration algorithm).<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/4754734402679928849-8421138063566161330?l=fredrik-j.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-08-04T13:27:53Z</updated>
    <published>2010-07-28T19:23:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="mpmath"/>
    <author>
      <name>Fredrik Johansson</name>
      <email>fredrik.johansson@gmail.com</email>
      <uri>http://www.blogger.com/profile/01465400860530971858</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-4754734402679928849</id>
      <author>
        <name>Fredrik Johansson</name>
        <email>fredrik.johansson@gmail.com</email>
        <uri>http://www.blogger.com/profile/01465400860530971858</uri>
      </author>
      <link href="http://fredrik-j.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://fredrik-j.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Fredrik Johansson</title>
      <updated>2011-04-22T00:51:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://ojensen.wordpress.com/?p=197</id>
    <link href="http://ojensen.wordpress.com/2010/08/02/reliable-and-testable-c-code/" rel="alternate" type="text/html"/>
    <title>Reliable and testable C code</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In my previous blog post I wrote about the new layer of testing that became available when the tensor module got functionality to analyze and report the structure of indexed expressions. Since then, I have improved the C printer and … <a href="http://ojensen.wordpress.com/2010/08/02/reliable-and-testable-c-code/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=ojensen.wordpress.com&amp;blog=13891021&amp;post=197&amp;subd=ojensen&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In my previous blog post I wrote about the new layer of testing that became available when the tensor module got functionality to analyze and report the structure of indexed expressions. Since then, I have improved the C printer and the C code generator by removing hacks that used to provide such functionality and replaced it with calls to the more robust methods defined in the tensor module.</p>
<p>I put up these improvements for <a href="http://hosted.smartbear.com/sympy/go?page=ReviewDisplay&amp;reviewid=6">review</a>, and got valuable feedback that I spent the rest of the time implementing.  In addition, I have addressed Ronan’s comments to my last blog post, and this has lead to stylistic improvements:</p>
<ul>
<li>Now an indexed expression is written with [] instead of ().  This is more  pythonic, as [] is used with all the builtin sequences.  This is also consistent with numpy.</li>
<li>Some classes have been renamed: IndexedElement is now Indexed, and the old Indexed class is now called IndexedBase.  The new terminology should be less confusing.</li>
</ul>
<p>The C code generator has become quite versatile and capable of handling complicated array expressions.  Here is a little demonstration of my current codegen_C3 branch:</p>
<pre>In [1]: A, x, y = map(IndexedBase, ['A', 'x', 'y'])

In [2]: i = Idx('i', m)

In [3]: j = Idx('j', n)

In [4]: print ccode(A[i, i], assign_to=z)  #trace of a matrix
z = 0;
for (int i=0; i&lt;m; i++){
 z = z + A[i + i*m];
}

In [5]: print ccode(A[i, j]*x[j] + y[i], assign_to=y[i]) #matrix-vector 1
for (int i=0; i&lt;m; i++){
 for (int j=0; j&lt;n; j++){
 y[i] = x[j]*A[j + i*n] + y[i];
 }
}

In [6]: print ccode(A[i, j]*x[j], assign_to=y[i]) #matrix-vector 2
for (int i=0; i&lt;m; i++){
 y[i] = 0;
}
for (int i=0; i&lt;m; i++){
 for (int j=0; j&lt;n; j++){
 y[i] = x[j]*A[j + i*n] + y[i];
 }
}
</pre>
<p>The code printer takes care of introducing and initialization of accumulator variables if needed, not the codegen module as previaously.  The initialization is skipped if the left hand side variable is also present on the right hand side (as in statement In[5]).</p>
<p>Finally, you may have noticed that this post was a little bit delayed.  This is because I was traveling in the weekend and didn’t get as much time for blogging as I had planned.  I’ll make up for it by blogging twice this week.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/ojensen.wordpress.com/197/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/ojensen.wordpress.com/197/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/ojensen.wordpress.com/197/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/ojensen.wordpress.com/197/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/ojensen.wordpress.com/197/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/ojensen.wordpress.com/197/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/ojensen.wordpress.com/197/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/ojensen.wordpress.com/197/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/ojensen.wordpress.com/197/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/ojensen.wordpress.com/197/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/ojensen.wordpress.com/197/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/ojensen.wordpress.com/197/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/ojensen.wordpress.com/197/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/ojensen.wordpress.com/197/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=ojensen.wordpress.com&amp;blog=13891021&amp;post=197&amp;subd=ojensen&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2010-08-02T10:23:22Z</updated>
    <category term="sympy"/>
    <author>
      <name>jegerjensen</name>
    </author>
    <source>
      <id>http://ojensen.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://ojensen.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://ojensen.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://ojensen.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://ojensen.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Python, SymPy and Quantum Physics</subtitle>
      <title>Jensen's Sympy Blog</title>
      <updated>2011-05-22T03:04:45Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9135222751616024074.post-143425197871935102</id>
    <link href="http://mattjcurry.blogspot.com/feeds/143425197871935102/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://mattjcurry.blogspot.com/2010/07/more-design-issues.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/9135222751616024074/posts/default/143425197871935102" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/9135222751616024074/posts/default/143425197871935102" rel="self" type="application/atom+xml"/>
    <link href="http://mattjcurry.blogspot.com/2010/07/more-design-issues.html" rel="alternate" type="text/html"/>
    <title>More Design Issues</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Unfortunately, it seems with my project that we keep running into more and more design issues. Put simply, the issues arise with Sympy's Mul and Add (and Pow) classes. In order for my quantum objects to be handled properly, we are going to have to subclass these classes. You can find more information about the issues <a href="https://docs.google.com/document/pub?id=1aDhhEam6TzOYdtEBd9Yw_vD3jW7MFHnz6lpsPb87V9w">here</a> (originally posted on the Sympy Google group).<div><br/></div><div>With all that to say, there still is a bit of time for coding left! Next week, we are going to subclass Mul, Add, and Pow (qmul, qadd, qpow). After that happens, I plan on creating a physics example that uses the existing quantum library I've helped build. I think I'm going to do the particle in a box (with infinitely strong walls) and use a position state to do so.</div><div><br/></div><div>More on this next week when we get everything sorted out!</div><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/9135222751616024074-143425197871935102?l=mattjcurry.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-07-31T18:56:00Z</updated>
    <published>2010-07-31T18:14:00Z</published>
    <author>
      <name>mcurry</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/10457551070900109390</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9135222751616024074</id>
      <author>
        <name>mcurry</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/10457551070900109390</uri>
      </author>
      <link href="http://mattjcurry.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/9135222751616024074/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://mattjcurry.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Matt's Blog</title>
      <updated>2011-04-21T21:50:24Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6568744196982634289.post-6122266783960777317</id>
    <link href="http://ondrejcertik.blogspot.com/feeds/6122266783960777317/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=6568744196982634289&amp;postID=6122266783960777317" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/6122266783960777317" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/6122266783960777317" rel="self" type="application/atom+xml"/>
    <link href="http://ondrejcertik.blogspot.com/2010/07/week-july-26-30.html" rel="alternate" type="text/html"/>
    <title>Week July 26 - 30</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I have been wrapping up my work at LLNL and trying to generate some comparisons between different approaches to adapt to multiple eigenvectors at once.<br/><br/>It turns out that most of the issues are in the way we create the new mesh for the next adaptivity iteration, in particular, how do we choose which candidates to refine. I have tried to converge to the lowest eigenvector (as well as to any other eigenvector too), to the sum of the eigenvectors, to each eigenvector individually and taking the union of the meshes and so on. I have also implemented the uniform p-FEM as well as tried p-FEM and hp-FEM using the approaches I mentioned above.<br/><br/>It seems to be crucial to have a good initial mesh, at least for p-FEM. If I use a good mesh and p-adaptivity, I am able to get the best results so far. In principle hp adaptivity should be at least as good, but our current approach doesn't show it yet. Hopefully we'll manage to make it work.<br/><br/>Besides that I have also implemented H1 norms for the Function class (based on Fekete points) by calculating coefficients with regards to a FE basis and some other little things.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/6568744196982634289-6122266783960777317?l=ondrejcertik.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-07-31T07:49:27Z</updated>
    <published>2010-07-31T07:39:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Ondřej Čertík</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/02845032202161204018</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6568744196982634289</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02845032202161204018</uri>
      </author>
      <link href="http://ondrejcertik.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://ondrejcertik.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Ondřej Čertík</title>
      <updated>2011-04-21T23:17:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=683</id>
    <link href="http://asmeurersympy.wordpress.com/2010/07/31/integration-of-primitive-functions/" rel="alternate" type="text/html"/>
    <title>Integration of primitive functions</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Integration of Primitive Functions So this past week, I had another break through in my project. The first break through, as you may recall, was the completion of the integrate_hyperexponential() function, which allowed for the integration in hyperexponential extensions, including proving the nonexistence of elementary integrals. Now I have worked my way up to this [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=683&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><strong>Integration of Primitive Functions</strong></p>
<p>So this past week, I had another break through in my project.  The <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">first break through</a>, as you may recall, was the completion of the <code>integrate_hyperexponential()</code> function, which allowed for the integration in hyperexponential extensions, including proving the nonexistence of elementary integrals.  Now I have worked my way up to this level on the other major half of the integration algorithm (actually, major third; more on that later): integration of primitive elements.  </p>
<p>This time, I can refer you to my <a href="http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/">previous blog post</a> for definitions.  The chief thing here is that there is now a function in my <tt>integration3</tt> branch called <code>integrate_primitive()</code>, and it is used primarily for integrating functions with logarithms.</p>
<p>So, how about some examples?  The first one comes from <a href="http://asmeurersympy.wordpress.com/feed/">Algorithms for computer algebra By Keith O. Geddes, Stephen R. Czapor, George Labahn</a> (example 12.8).  I like it because it contains both exponentials and logarithms, in a way that they do not depend on each other, so it can be integrated with either <code>integrate_primitive()</code> or <code>integrate_hyperexponential()</code>.  In either case, the polynomial part is <img alt="\frac{x}{x + 1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7Bx%7D%7Bx+%2B+1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\frac{x}{x + 1}"/>, so recursively calling the other function is not required.  (for those of you who have been following my <tt>integration3</tt> branch, you may notice that this is blatantly taken from the commit history).</p>
<p><strong>Hover over the code and click on the left-most, “view source” icon (a paper icon with <tt>&lt; &gt;</tt> over it) to view without breaks.  Opens in a new window.</strong></p>
<pre class="brush: python;">In [1]: from sympy.integrals.risch import integrate_primitive,
integrate_hyperexponential

In [2]: f = (x*(x + 1)*((x**2*exp(2*x**2) - log(x + 1)**2)**2 +
2*x*exp(3*x**2)*(x - (2*x**3 + 2*x**2 + x + 1)*log(x + 1))))/((x +
1)*log(x + 1)**2 - (x**3 + x**2)*exp(2*x**2))**2

In [3]: f
Out[3]:
          ⎛                          2                                                   ⎞
          ⎜⎛                       2⎞                                                   2⎟
          ⎜⎜     2           2  2⋅x ⎟        ⎛    ⎛           2      3⎞           ⎞  3⋅x ⎟
x⋅(1 + x)⋅⎝⎝- log (1 + x) + x ⋅ℯ    ⎠  + 2⋅x⋅⎝x - ⎝1 + x + 2⋅x  + 2⋅x ⎠⋅log(1 + x)⎠⋅ℯ    ⎠
──────────────────────────────────────────────────────────────────────────────────────────
                                                                2
                         ⎛                                    2⎞
                         ⎜   2                  ⎛ 2    3⎞  2⋅x ⎟
                         ⎝log (1 + x)⋅(1 + x) - ⎝x  + x ⎠⋅ℯ    ⎠

In [4]: var('t0, t1')
Out[4]: (t₀, t₁)

In [5]: a, d = map(lambda i: Poly(i, t1), f.subs(exp(x**2),
t0).subs(log(x + 1), t1).as_numer_denom())

In [6]: a
Out[6]:
Poly((x + x**2)*t1**4 + (-2*t0**2*x**3 - 2*t0**2*x**4)*t1**2 +
(-2*t0**3*x**2 - 4*t0**3*x**3 - 6*t0**3*x**4 - 8*t0**3*x**5 -
4*t0**3*x**6)*t1 + 2*t0**3*x**3 + 2*t0**3*x**4 + t0* *4*x**5 +
t0**4*x**6, t1, domain='ZZ[x,t0]')

In [7]: d
Out[7]: Poly((1 + 2*x + x**2)*t1**4 + (-2*t0**2*x**2 - 4*t0**2*x**3 -
2*t0**2*x**4)*t1**2 + t0**4*x**4 + 2*t0**4*x**5 + t0**4*x**6, t1,
domain='ZZ[x,t0]')

In [8]: D = [Poly(1, x), Poly(2*x*t0, t0), Poly(1/(x + 1), t1)]

In [9]: r = integrate_primitive(a, d, D, [x, t0, t1], [lambda x: log(x +
1), lambda x: exp(x**2)])

In [10]: r
Out[10]:
⎛   ⎛                ⎛ 2⎞⎞      ⎛                ⎛ 2⎞⎞        ⎛ 2⎞                                ⎞
⎜   ⎜                ⎝x ⎠⎟      ⎜                ⎝x ⎠⎟        ⎝x ⎠                ⌠               ⎟
⎜log⎝log(1 + x) + x⋅ℯ    ⎠   log⎝log(1 + x) - x⋅ℯ    ⎠     x⋅ℯ    ⋅log(1 + x)     ⎮   x           ⎟
⎜───────────────────────── - ───────────────────────── - ────────────────────── + ⎮ ───── dx, True⎟
⎜            2                           2                                    2   ⎮ 1 + x         ⎟
⎜                                                           2           2  2⋅x    ⌡               ⎟
⎝                                                        log (1 + x) - x ⋅ℯ                       ⎠
</pre>
<p>An explanation:  <code>f</code> is the function we are integrating.  Preparsing is not implemented yet, so we have to do it manually in <tt>[5]</tt>.  <tt>[8]</tt> is the list of derivations of the monomials we are working with, <code>[x, t0, t1]</code>, which represent <img alt="x" class="latex" src="http://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/>, <img alt="e^{x^2}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7Bx%5E2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^{x^2}"/>, and <img alt="\log{(x + 1)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Clog%7B%28x+%2B+1%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\log{(x + 1)}"/>, respectively. Because the outermost monomial is a logarithm (primitive), we call <code>integrate_primitive()</code> on it.  The last argument of the function is the back substitution list, in reverse order because that is the order we have to back substitute in.  We can see the result contains an unevaluated Integral.  This is because the recursive calls to integrate over the smaller extensions have not yet been implemented.  In the final version, <code>integrate()</code> will automatically call <code>ratint()</code> in this case on it to give the complete answer.  The second argument of the result, True, indicates that the integral was elementary and that this is the complete integral.</p>
<p>Because the extensions did not depend on each other, we could have also integrated in <img alt="\mathbb{Q}(x, \log{(x + 1)}, e^{x^2})" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BQ%7D%28x%2C+%5Clog%7B%28x+%2B+1%29%7D%2C+e%5E%7Bx%5E2%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{Q}(x, \log{(x + 1)}, e^{x^2})"/> instead of <img alt="\mathbb{Q}(x, e^{x^2}, \log{(x + 1)})" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BQ%7D%28x%2C+e%5E%7Bx%5E2%7D%2C+%5Clog%7B%28x+%2B+1%29%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{Q}(x, e^{x^2}, \log{(x + 1)})"/>:</p>
<pre class="brush: python;">In [11]: a1, d1 = map(lambda i: Poly(i, t0), f.subs(exp(x**2), t0).subs(log(x + 1), t1).as_numer_denom())

In [12]: D1 = [Poly(1, x), Poly(1/(x + 1), t1), Poly(2*x*t0, t0)]

In [13]: r1 = integrate_hyperexponential(a1, d1, D1, [x, t1, t0], [lambda x: exp(x**2), lambda x: log(x + 1)])

In [14]: r1
Out[14]:
⎛   ⎛              ⎛ 2⎞⎞      ⎛                ⎛ 2⎞⎞                                                ⎞
⎜   ⎜log(1 + x)    ⎝x ⎠⎟      ⎜  log(1 + x)    ⎝x ⎠⎟          ⎛ 2⎞                                  ⎟
⎜log⎜────────── + ℯ    ⎟   log⎜- ────────── + ℯ    ⎟       2  ⎝x ⎠                  ⌠               ⎟
⎜   ⎝    x             ⎠      ⎝      x             ⎠      x ⋅ℯ    ⋅log(1 + x)       ⎮   x           ⎟
⎜─────────────────────── - ───────────────────────── + ────────────────────────── + ⎮ ───── dx, True⎟
⎜           2                          2                                        2   ⎮ 1 + x         ⎟
⎜                                                             2           3  2⋅x    ⌡               ⎟
⎝                                                      - x⋅log (1 + x) + x ⋅ℯ                       ⎠
</pre>
<p>We can verify by taking the derivative that the results in each case are antiderivatives of the original function, <code>f</code>, even though they appear different.</p>
<pre class="brush: python;">In [15]: cancel(r[0].diff(x) - f)
Out[15]: 0

In [16]: cancel(r1[0].diff(x) - f)
Out[16]: 0
</pre>
<p>We can see in each case, the remaining unevaluated <code>Integral</code> was in <img alt="\mathbb{Q}(x)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BQ%7D%28x%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{Q}(x)"/> only, meaning that the recursive call to <code>integrate_hyperexponential()</code> or <code>integrate_primitive()</code>, respectively, would not have been necessary. Finally, we can see that choosing the correct extension to integrate over can make a difference, time wise:</p>
<pre class="brush: python;">In [17]: %timeit integrate_primitive(a, d, D, [x, t0, t1], [lambda x: log(x + 1), lambda x: exp(x**2)])
1 loops, best of 3: 1.91 s per loop

In [18]: %timeit integrate_hyperexponential(a1, d1, D1, [x, t1, t0], [lambda x: exp(x**2), lambda x: log(x + 1)])
1 loops, best of 3: 2.63 s per loop
</pre>
<p>Just as with the exponential case, the function can prove the integrals are non-elementary. This is the so-called <a href="http://en.wikipedia.org/wiki/Logarithmic_integral">logarithmic integral</a>:</p>
<pre class="brush: python;">In [19]: f1 = 1/log(x)

In [20]: a, d = map(lambda i: Poly(i, t1), f1.subs(log(x), t1).as_numer_denom())

In [21]: a
Out[21]: Poly(1, t1, domain='ZZ')

In [22]: d
Out[22]: Poly(t1, t1, domain='ZZ')

In [23]: integrate_primitive(a, d, [Poly(1, x), Poly(1/x, t1)], [x, t1], [log])
Out[23]: (0, False)
</pre>
<p>The second argument, <code>False</code>, indicates that the integral was non-elementary.  Namely, the function has proven that the function <img alt="f - D(0) = \frac{1}{\log{(x)}}" class="latex" src="http://s0.wp.com/latex.php?latex=f+-+D%280%29+%3D+%5Cfrac%7B1%7D%7B%5Clog%7B%28x%29%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f - D(0) = \frac{1}{\log{(x)}}"/> does not have an elementary anti-derivative over <img alt="\mathbb{Q}(x, \log{(x)})" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BQ%7D%28x%2C+%5Clog%7B%28x%29%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{Q}(x, \log{(x)})"/> (see the <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">previous post</a> for more information).</p>
<p>Finally, be aware that, just as with <code>integrate_hyperexponential()</code> many integrals will  raise <code>NotImplementedError</code>, because the subroutines necessary to solve them have not yet been finished.</p>
<pre class="brush: python;">In [25]: f = log(log(x))**2

In [26]: f.diff(x)
Out[26]:
2⋅log(log(x))
─────────────
   x⋅log(x)

In [27]: a, d = map(lambda i: Poly(i, t1),
cancel(f.diff(x)).subs(log(x), t0).subs(log(t0), t1).as_numer_denom())

In [28]: a
Out[28]: Poly(2*t1, t1, domain='ZZ')

In [29]: d
Out[29]: Poly(t0*x, t1, domain='ZZ[x,t0]')

In [30]: D = [Poly(1, x), Poly(1/x, t0), Poly(1/(x*t0), t1)]

In [31]: integrate_primitive(a, d, D, [x, t0, t1], [lambda x: log(log(x)), log])
---------------------------------------------------------------------------
NotImplementedError: Remaining cases for Poly RDE not yet implemented.
</pre>
<p>Now one thing that I want to add from the above examples taken from the commit message is that logarithms are not the only function that are primitive.  The Li function (the logarithmic integral, as above), considered as an elementary extension of <img alt="\mathbb{Q}(x, \log{(x)})" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BQ%7D%28x%2C+%5Clog%7B%28x%29%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{Q}(x, \log{(x)})"/> is also primitive.  But even among the commonly defined elementary functions, there is one other, acrtangents.  </p>
<pre class="brush: python;">In [32]: diff(atan(x)**2, x)
Out[32]:
2⋅atan(x)
─────────
       2
  1 + x  

In [33]: integrate_primitive(Poly(2*t, t), Poly(1 + x**2, t), [Poly(1, x), Poly(1/(1 + x**2), t)], [x, t], [atan])

Out[33]:
⎛    2         ⎞
⎝atan (x), True⎠

In [34]: integrate_primitive(Poly(t, t), Poly(x, t), [Poly(1, x), Poly(1/(1 + x**2), t)], [x, t], [atan])

Out[34]:
⎛⌠                  ⎞
⎜⎮ atan(x)          ⎟
⎜⎮ ─────── dx, False⎟
⎜⎮    x             ⎟
⎝⌡                  ⎠
</pre>
<p>Due to a bug in the code right now, the final version returns the non-elementary integral in the final result.  Suffice it to say that it has proven that <img alt="\int {\frac{\arctan{(x)}}{x} dx}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cint+%7B%5Cfrac%7B%5Carctan%7B%28x%29%7D%7D%7Bx%7D+dx%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\int {\frac{\arctan{(x)}}{x} dx}"/> is non-elementary. As far as I know, this isn’t any special function.  Actually, it’s just a random function containing arctan that looked non-elementary to me that I plugged in and found out that I was correct.  It’s very similar in form to the <a href="http://en.wikipedia.org/wiki/Exponential_integral">exponential integral</a> (Ei) or the <a href="http://en.wikipedia.org/wiki/Sine_integral#Sine_integral">Sine/Cosine Integral</a> (Si/Ci), which is how I guessed that it would be non-elementary.  Maybe it should be called ATi().</p>
<p><strong>Status Update</strong></p>
<p>So it has come to my attention that the suggested “pencils down” date is one week from Monday, and the hard “pencils down” date is two weeks from Monday (see the <a href="http://socghop.appspot.com/document/show/gsoc_program/google/gsoc2010/timeline">Google Summer of Code Timeline</a>).  Now, no matter how fast I work, my work cannot be pushed in until Mateusz’s latest polys branch gets pushed in, because my work is based on top of it.  I plan on continuing work on the integration algorithm beyond the summer until I finish the transcendental part of the algorithm, and even after that, I want to look into implementing other integration related things, like definite integration using <a href="http://en.wikipedia.org/wiki/Meijer-G">Meijer G-functions,</a> and the algebraic part of the algorithm.  But for now, these are the things that I need to do for the transcendental part, which is this summer’s work:</p>
<p><em>1. Implement the preparsing algorithms. </em> This part is two-fold.  First, I need to implement algorithms based on the Risch Structure Theorems, which allow me to determine if an extension is algebraic or not (if it is algebraic, we cannot integrate it because only the transcendental part is implemented).  The other part will be the function that actually goes through an expression and tries to build up a differential extension from it so it can be integrated.  This can be a tricky part. For example, if we want to integrate <img alt="f = e^x + e^{\frac{x}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=f+%3D+e%5Ex+%2B+e%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f = e^x + e^{\frac{x}{2}}"/>, we want to first choose <img alt="t_1=e^{\frac{x}{2}}" class="latex" src="http://s0.wp.com/latex.php?latex=t_1%3De%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_1=e^{\frac{x}{2}}"/> so that <img alt="f = t_1^2 + t_1" class="latex" src="http://s0.wp.com/latex.php?latex=f+%3D+t_1%5E2+%2B+t_1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f = t_1^2 + t_1"/>, because if we choose <img alt="t_1=e^x" class="latex" src="http://s0.wp.com/latex.php?latex=t_1%3De%5Ex&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_1=e^x"/>, then <img alt="t_2=e^{\frac{x}{2}}=\sqrt{t_1}" class="latex" src="http://s0.wp.com/latex.php?latex=t_2%3De%5E%7B%5Cfrac%7Bx%7D%7B2%7D%7D%3D%5Csqrt%7Bt_1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t_2=e^{\frac{x}{2}}=\sqrt{t_1}"/> will be algebraic over <img alt="\mathbb{Q}(x, t_1)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BQ%7D%28x%2C+t_1%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{Q}(x, t_1)"/>.  This is one case where we might try adding an algebraic extensions but where it can be avoided.  The solution will have to be to go through and find the common denominators of the exponentials.  I’m also considering that this might happen in more advanced ways, so it could be necessary for the function to backtrack in the extension tree to see if it can do it in an entirely transcendental way.  Fortunately, the Risch Structure Theorems give us a decision procedure for determining if an extension can be written in terms of the previous extensions (is algebraic over it), but this will still be a very hard function to get right.</p>
<p><em>2. Finish the remaining cases for <code>integrate_hyperexponential()</code> and <code>integrate_primitive()</code>.</em> As you could see in this post, as well as in the <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">previous one</a>, there are many integrals that cannot yet be integrated because the special cases for them have not been implemented yet.  Most of these actually rely on implementing the structure theorem algorithms from <strong>1</strong>, and implementing them once that is finished will not take long, because they will just be straight copying of the pseudocode from Bronstein’s book.  But some of them, particularly ones from the primitive case, are not spelt out so well in Bronstein’s book, and will require more thinking (and thus time) on my part.  I should note that the Structure Theorem algorithms are also this way.</p>
<p><em> 3. Implement the hypertangent case. </em> The ability to integrate in tangent extensions is the other <em>third</em> I mentioned above.  Since tangents require more special casing, I plan on doing this only after I have finished <strong>1</strong> and <strong>2</strong>.  This is actually not much work, because most of the algorithms for solving the particular subproblem for tangents (called the <em>Coupled Risch Differential Equation</em>) are exactly the same as those for solving the subproblem for hyperexponentials (the <em>Risch Differential Equation</em>), which are already (mostly) implemented in the hyperexponential part.  There are only a few extra functions that need to be written for it.  Also, you will still be able to integrate functions that contain tangents, such as <img alt="e^{\tan{(x)}}" class="latex" src="http://s0.wp.com/latex.php?latex=e%5E%7B%5Ctan%7B%28x%29%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e^{\tan{(x)}}"/> (recall <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">last time</a> that we showed that <code>integrate_hyperexponential()</code> can prove that this does not have an elementary integral).  It just won’t be able to integrate when the top-most extension is a tangent.</p>
<p>So here is what I plan on doing.  Right now, I am going to focus my work on <strong>1</strong>, since most of <strong>2</strong> can’t be done until it is anyway.  But more importantly, I want to have a prototype user-level function for the Risch Algorithm.  The reason I want this is so that people can try it out, without having to do the preparsing like I did above, but rather they can just call <code>risch_integrate(f, x)</code>, and it will return the integral of <code>f</code>, prove that it is non-elementary and reduce it into the elementary and non-elementary parts, or explain why it cannot do it (either because the function is not transcendental or because something is not implemented yet).  My chief desire for doing this is so that people can try out my code and find the bugs in it for me.  I have already found many critical errors in the code (returns a wrong result), and I want to iron these out before anything goes in.  The best way to do this will be to release a working user-level function and hope that people try it out for me.  </p>
<p>Also, even if <strong>2</strong> and <strong>3</strong> are not finished, if I have <strong>1</strong>, I can integrate it with <code>integrate()</code> (no pun intended) and just have it bail if it raises <code>NotImplementedError</code> I will need to come up with a way to differentiate between this and the case where it returns an unevaluated <code>Integral</code> because it has proven that an elementary antiderivative does not exist.  Any suggestions?</p>
<p>I plan on continuing work after the summer until I finish <strong>1</strong> through <strong>3</strong>, though I won’t pretend that my work won’t slow down considerably when I start classes in August.  I also promise to finish the <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">Risch Algorithm posts</a> that I promised.</p>
<p>And for what it’s worth, I plan on working my ass off this next two weeks.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/683/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/683/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/683/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/683/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/683/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/683/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/683/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/683/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/683/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/683/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/683/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/683/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/683/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/683/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=683&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2010-07-31T06:44:31Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>asmeurer</name>
    </author>
    <source>
      <id>http://asmeurersympy.wordpress.com</id>
      <logo>http://1.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="http://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy, including my Google Summer of Code 2009 and 2010 projects.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2011-05-22T03:04:11Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-936818886435977143.post-5753626938397121846</id>
    <link href="http://addisoncugini.blogspot.com/feeds/5753626938397121846/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://addisoncugini.blogspot.com/2010/07/integration-of-general-quantum.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/936818886435977143/posts/default/5753626938397121846" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/936818886435977143/posts/default/5753626938397121846" rel="self" type="application/atom+xml"/>
    <link href="http://addisoncugini.blogspot.com/2010/07/integration-of-general-quantum.html" rel="alternate" type="text/html"/>
    <title>Integration of General Quantum</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week, I started to integrate Matt Curry's general quantum stuff into my code; this was done both to prevent replication of code in our two modules and to test to see if his code worked in a practical problem.<br/><br/>That said, I spent quite a bit of time this week inside Matt's code.  Dr. Granger and I ported my represent function into Matt's code so that we could represent not just Qbit systems, but also other systems by specifying a BasisSet and how to represent an individual State or Operator in the Basis. Matt and I worked together on developing validate functions that use the new op.priority feature to check to see if Quantum expressions are valid; testing this is still ongoing and has serious limitations because Sympy's AssocOp classes cannot know the special rules that go along with its args. This leads to issues that are hard such as how to call our validate functions automatically when all quantum objects are held within a Sympy binary-operation (e.g. Mul(Operator, |Ket&gt;) + Mul(Operator, |Ket&gt;).<br/><br/>While helping Matt get his code up and working, I was also busy inheriting and porting features from Matt's code. This was a pain as little changes caused large errors throughout my code; I especially had a hard time dealing with the ket attribute inside State since Sympy keeps all attributes inside an args list rather than an ensemble of separate attributes with their own names. This ultimately meant that I had to rewrite how I parsed the args for Qbit, making args[0] be a tuple which contained the real attributes and args[1] be information about it being a ket.<br/><br/>As I continue to play with Matt's code, I get a better idea of the serious design problems he is running into. These issues have apparently been run into before with  Matrices (The issues with Matrices are very similar in that they have special rules for what can be multiplied and need to maintain these rules even when held inside a Mul object). The Matrix class got around this by standing alone, not inheriting from Expr, and rewriting its own __mul__ method; this meant that, since Expr's don't know how to multiply by Matricies, Python would default to the Matrix's __(r)mul__ method. This is quite kludge-y, I should hope we come up with a better solution than this. The addition of op-priority is a good start to the fix, but will only fully work if the Mul object itself knows how to use this feature.<br/><br/>I need to clean up both my and Matt's code in the following weeks as I would like to have a good product by the end of GSoC.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/936818886435977143-5753626938397121846?l=addisoncugini.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-07-30T22:07:12Z</updated>
    <published>2010-07-30T21:23:00Z</published>
    <author>
      <name>AddisonCugini</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/09778793677316682601</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-936818886435977143</id>
      <author>
        <name>AddisonCugini</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/09778793677316682601</uri>
      </author>
      <link href="http://addisoncugini.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/936818886435977143/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://addisoncugini.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Addison's Blog Page</title>
      <updated>2011-04-22T02:54:01Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-22566012.post-6741089899169036082</id>
    <link href="http://haz-tech.blogspot.com/feeds/6741089899169036082/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=22566012&amp;postID=6741089899169036082" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/22566012/posts/default/6741089899169036082" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/22566012/posts/default/6741089899169036082" rel="self" type="application/atom+xml"/>
    <link href="http://haz-tech.blogspot.com/2010/07/clause-learning-flunk.html" rel="alternate" type="text/html"/>
    <title>Clause Learning Flunk</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">A few days back, I was on my way to write up a blog post detailing how impressive the new system is (and it /does/ have some great speedups in there). To be thorough, I wanted to show results for different parameters being disabled, but to my surprise I discovered clause learning was hurting. This flies in the face of everything we know about SAT solving, so the hunt for reasoning commenced.<br/><br/>Well long story short, the hunt continues but a likely reason is the lack of impact that the simple clause learning scheme actually has. Monitoring the clauses that cause unit propagation (a measure of how useful a clause is) reveals that the learned clauses aren't actually ever being used -- big-time bummer. It's because of this, I've disabled the conflict analysis in the <a href="http://github.com/haz/sympy/commit/35c0bdab85b754de91a1fb1a606155e9b4628210">latest version</a>.<br/><br/>But results are still be be had. First off, how much better are we than the original DPLL solver, and how bad does the clause learning actually hurt? Well the answers are (roughly) pretty good, and not much ;). Here's a graph plotting the run-time for the three approaches (-CA means clause learning was disabled):<br/><br/><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/_DvrW_QLstcQ/TE9MirdDSSI/AAAAAAAACLI/VT2jesJMXYc/s1600/dpll.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="315" src="http://3.bp.blogspot.com/_DvrW_QLstcQ/TE9MirdDSSI/AAAAAAAACLI/VT2jesJMXYc/s400/dpll.png" width="400"/></a></div><br/>Note that the y-axis is on a log scale, so the differences are actually more drastic than they appear. Take-away: the new sat-solver is doing great, and the clause learning doesn't hurt that much...just doesn't help like we'd expect.<br/><br/>Next up is the impact of watch literals. I'll have a blog post in a day or two for the final installment of "what goes into a SAT solver", and the focus will be on watch literals. The introduction of this data structure hack heralded in a wave of killer SAT solvers, and they helped out here too. The following is a comparison (with clause learning disabled) between using watch literals and not using them:<br/><br/><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/_DvrW_QLstcQ/TE9Mivz864I/AAAAAAAACLM/Gkn_qTnwkg0/s1600/watch+literal.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="318" src="http://3.bp.blogspot.com/_DvrW_QLstcQ/TE9Mivz864I/AAAAAAAACLM/Gkn_qTnwkg0/s400/watch+literal.png" width="400"/></a></div><br/>Oh, and it should be noted that when points don't exist, it's because the solver just couldn't handle it in a reasonable amount of time.<br/><br/>So in the interest of actually letting SymPy users see these enhancements, I'm going to wrap up this week with that final post, and post-pone the clause learning investigation until more time is available. Next up is investigating how a <a href="http://en.wikipedia.org/wiki/Truth_maintenance_system">truth maintenance system</a> can be used to smartly cache queries to the assumption framework. If we can avoid repeated SAT queries (no matter how beefy the solver is), that's a win.<br/><br/>One final note, there will likely be an incorporation of an industrial SAT-solver interface for those who really want the power. This will be through the <a href="http://4c110.ucc.ie/numberjack/">Numberjack Library</a>, and be optional if you happen to have it installed. The start of it is in <a href="http://github.com/haz/sympy/tree/numberjack">this branch</a>, but we'll need to wait until the next version of Numberjack is released due to limitations it currently has.<br/><br/>That's all for now. Cheers.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/22566012-6741089899169036082?l=haz-tech.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-07-27T21:26:54Z</updated>
    <published>2010-07-27T21:26:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Haz</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/13252588709861854104</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-22566012</id>
      <author>
        <name>Haz</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/13252588709861854104</uri>
      </author>
      <link href="http://haz-tech.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/22566012/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://haz-tech.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Projects and thoughts for the more technically driven.</subtitle>
      <title>Tech Talk</title>
      <updated>2011-04-21T23:56:17Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-4754734402679928849.post-4782331091283891322</id>
    <link href="http://fredrik-j.blogspot.com/feeds/4782331091283891322/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=4754734402679928849&amp;postID=4782331091283891322" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/4782331091283891322" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/4782331091283891322" rel="self" type="application/atom+xml"/>
    <link href="http://fredrik-j.blogspot.com/2010/07/post-sage-days-24-report.html" rel="alternate" type="text/html"/>
    <title>Post Sage Days 24 report</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Now that I've overcome the immediate effects of SDWS (Sage Days Withdrawal Syndrome), I should write a brief report about <a href="http://wiki.sagemath.org/days24">Sage Days 24</a> which took place last week at the <a href="http://www.risc.jku.at/">Research Institute for Symbolic Computation</a> (RISC), located in a small town called Hagenberg just outside Linz in Austria. Many thanks for the organizers for inviting me!<br/><br/>Since I'm starting as a Ph.D. student at RISC in October, it was nice to get an early view of the site and meet some current students and staff. The location is quite beautiful, my only complaint being the extremely high temperature last week (they say the weather is more normal most of the year!).<br/><br/>SD24 was titled "Symbolic Computation in Differential Algebra and Special Functions", which pretty accurately describes the topics covered. Some points of interest:<br/><br/><a href="http://modular.math.washington.edu/">William Stein</a> talked about his vision for Sage (short and long term), including goals for special functions support.<br/><br/><a href="http://algo.inria.fr/chyzak/">Frédéric Chyzak</a> gave a talk about the <a href="http://ddmf.msr-inria.inria.fr/ddmf">Dynamic Dictionary of Mathematical Functions</a>. I really like the approach of starting from a minimal definition of a special function (a differential equation with initial conditions) and generating series expansions, Chebyshev approximations (etc.) algorithmically.<br/><br/><a href="http://homepages.cwi.nl/~nicot/">Nico Temme</a> talked about numerical evaluation of special functions, which was familiar grounds to me, but with much food for thought.<br/><br/>I met <a href="http://www.risc.jku.at/home/mkauers">Manuel Kauers</a>, my future supervisor, who gave a neat <a href="http://www.risc.uni-linz.ac.at/people/mkauers/publications/kauers10d.pdf">presentation</a> of some recent research.<br/><br/>There were many other interesting <a href="http://wiki.sagemath.org/days24/schedule">talks</a> and discussions as well, and I gave a talk about special function evaluation in mpmath (based on my SD23 talk). And of course, I met various other Sage developers and got some coding done as well.<br/><br/>I had hoped to get generalized hypergeometric functions into Sage during SD24. There is now a <a href="http://trac.sagemath.org/sage_trac/ticket/2516">patch</a>, but it still needs some more work.<br/><br/>I also implemented <a href="http://dlmf.nist.gov/12">parabolic cylinder functions</a> (PCFs) in mpmath, the last remaining chapter of hypergeometric functions listed in the <a href="http://dlmf.nist.gov/">DLMF</a> (mpmath now covers chapters 1-20, 22, 24-25, partially 26-27, and 33). <a href="http://code.google.com/p/mpmath/source/detail?r=1178">Code commit here.</a><br/><br/>Technically, parabolic cylinder functions are just scaled (linear combinations of) confluent hypergeometric functions or Whittaker functions, but they are a bit tricky to compute due to cancellation and branch cuts.<br/><br/>An example from Nico Temme's talk was to evaluate <i>D</i><sub>ν</sub>(<i>z</i>) with ν = -300.14 and <i>z</i> = 300.15 (Maple 13 takes 5 seconds to give an answer that has the wrong sign and is off by 692 orders of magnitude). The new <tt>pcfd</tt> function in mpmath instantaneously (in about a millisecond) gives the correct result:<br/><pre><br/>&gt;&gt;&gt; pcfd(-300.14, 300.15)<br/>6.83322814925713e-10526<br/>&gt;&gt;&gt; mp.dps = 30<br/>&gt;&gt;&gt; pcfd('-300.14', '300.15')<br/>6.83322814923312844480669009487e-10526<br/></pre><br/><br/>All the curve plots from <a href="http://dlmf.nist.gov/12.3">DLMF 12.3</a> can be reproduced as follows:<br/><pre><br/>f1 = lambda x: pcfu(0.5,x)<br/>f2 = lambda x: pcfu(2,x)<br/>f3 = lambda x: pcfu(3.5,x)<br/>f4 = lambda x: pcfu(5,x)<br/>f5 = lambda x: pcfu(8,x)<br/>plot([f1,f2,f3,f4,f5], [-3,3], [0,3])<br/></pre><br/><a href="http://1.bp.blogspot.com/_rh0QblLk0C0/TE8rBfwSyWI/AAAAAAAAAT4/yXcCJbIwnBY/s1600/12.3.1.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5498660974746585442" src="http://1.bp.blogspot.com/_rh0QblLk0C0/TE8rBfwSyWI/AAAAAAAAAT4/yXcCJbIwnBY/s320/12.3.1.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 320px; height: 241px;"/></a><br/><pre><br/>f1 = lambda x: pcfv(0.5,x)<br/>f2 = lambda x: pcfv(2,x)<br/>f3 = lambda x: pcfv(3.5,x)<br/>f4 = lambda x: pcfv(5,x)<br/>f5 = lambda x: pcfv(8,x)<br/>plot([f1,f2,f3,f4,f5], [-3,3], [-3,3])<br/></pre><br/><a href="http://4.bp.blogspot.com/_rh0QblLk0C0/TE8q-HO2hkI/AAAAAAAAATw/WXCAP26FD4k/s1600/12.3.2.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5498660916624262722" src="http://4.bp.blogspot.com/_rh0QblLk0C0/TE8q-HO2hkI/AAAAAAAAATw/WXCAP26FD4k/s320/12.3.2.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 320px; height: 241px;"/></a><br/><pre><br/>f1 = lambda x: pcfu(-0.5,x)<br/>f2 = lambda x: pcfu(-2,x)<br/>f3 = lambda x: pcfu(-3.5,x)<br/>f4 = lambda x: pcfu(-5,x)<br/>plot([f1,f2,f3,f4], [-8,8], [-6,6])<br/></pre><br/><a href="http://2.bp.blogspot.com/_rh0QblLk0C0/TE8q9LYwyzI/AAAAAAAAATo/0vcabZzyZAY/s1600/12.3.3.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5498660900559702834" src="http://2.bp.blogspot.com/_rh0QblLk0C0/TE8q9LYwyzI/AAAAAAAAATo/0vcabZzyZAY/s320/12.3.3.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 320px; height: 241px;"/></a><br/><pre><br/>f1 = lambda x: pcfv(-0.5,x)<br/>f2 = lambda x: pcfv(-2,x)<br/>f3 = lambda x: pcfv(-3.5,x)<br/>f4 = lambda x: pcfv(-5,x)<br/>plot([f1,f2,f3,f4], [-8,8], [-6,6])<br/></pre><br/><a href="http://2.bp.blogspot.com/_rh0QblLk0C0/TE8q8_dxhVI/AAAAAAAAATg/yDsmRuu6U08/s1600/12.3.4.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5498660897359496530" src="http://2.bp.blogspot.com/_rh0QblLk0C0/TE8q8_dxhVI/AAAAAAAAATg/yDsmRuu6U08/s320/12.3.4.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 320px; height: 241px;"/></a><br/><pre><br/>f1 = lambda x: pcfu(-8,x)<br/>f2 = lambda x: pcfv(-8,x)*gamma(0.5-(-8))<br/>f3 = lambda x: hypot(f1(x), f2(x))<br/>plot([f1,f2,f3], [-6,6], [-120,120])<br/></pre><br/><a href="http://1.bp.blogspot.com/_rh0QblLk0C0/TE8q8md5fTI/AAAAAAAAATY/a3iHULych3w/s1600/12.3.5.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5498660890649132338" src="http://1.bp.blogspot.com/_rh0QblLk0C0/TE8q8md5fTI/AAAAAAAAATY/a3iHULych3w/s320/12.3.5.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 320px; height: 241px;"/></a><br/><pre><br/>f1 = lambda x: diff(pcfu,(-8,x),(0,1))<br/>f2 = lambda x: diff(pcfv,(-8,x),(0,1))*gamma(0.5-(-8))<br/>f3 = lambda x: hypot(f1(x), f2(x))<br/>plot([f1,f2,f3], [-6,6], [-220,220])<br/></pre><br/><a href="http://1.bp.blogspot.com/_rh0QblLk0C0/TE8q8fCSxkI/AAAAAAAAATQ/S8ziTJv4nf4/s1600/12.3.6.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5498660888654300738" src="http://1.bp.blogspot.com/_rh0QblLk0C0/TE8q8fCSxkI/AAAAAAAAATQ/S8ziTJv4nf4/s320/12.3.6.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 320px; height: 241px;"/></a><br/><br/>A little more information can be found in the <a href="http://mpmath.googlecode.com/svn/trunk/doc/build/functions/bessel.html#parabolic-cylinder-functions">mpmath documentation section for PCFs</a>.<br/><br/>Thanks again to the <a href="http://www.nsf.gov/awardsearch/showAward.do?AwardNumber=0757627&amp;version=noscript">NSF grant</a> enabling this work.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/4754734402679928849-4782331091283891322?l=fredrik-j.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-07-27T19:19:06Z</updated>
    <published>2010-07-27T16:32:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="mpmath"/>
    <author>
      <name>Fredrik Johansson</name>
      <email>fredrik.johansson@gmail.com</email>
      <uri>http://www.blogger.com/profile/01465400860530971858</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-4754734402679928849</id>
      <author>
        <name>Fredrik Johansson</name>
        <email>fredrik.johansson@gmail.com</email>
        <uri>http://www.blogger.com/profile/01465400860530971858</uri>
      </author>
      <link href="http://fredrik-j.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://fredrik-j.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/4754734402679928849/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Fredrik Johansson</title>
      <updated>2011-04-22T00:51:59Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6568744196982634289.post-274396393864768585</id>
    <link href="http://ondrejcertik.blogspot.com/feeds/274396393864768585/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=6568744196982634289&amp;postID=274396393864768585" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/274396393864768585" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/274396393864768585" rel="self" type="application/atom+xml"/>
    <link href="http://ondrejcertik.blogspot.com/2010/07/week-july-19-23.html" rel="alternate" type="text/html"/>
    <title>Week July 19 - 23</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I have learned how projections work in detail and wrote it up here:<br/><br/><a href="http://theoretical-physics.net/dev/src/math/la.html">http://theoretical-physics.net/dev/src/math/la.html<br/></a><br/>including all proofs (that orthogonal projection finds the closest vector and so on). At the end of the notes I have calculated some examples in 1D, so that one can see that indeed it doesn't depend on the basis and that the basis doesn't even have to be orthogonal. Then one has to use this approach to calculate the coefficients:<br/><br/><a href="http://theoretical-physics.net/dev/src/math/la.html#nonorthogonal-basis">http://theoretical-physics.net/dev/src/math/la.html#nonorthogonal-basis<br/></a><br/><br/>I have then implemented it in h1d. Due to the lack of time, I am now developing everything in my private branch. I'll obtain the permission in about 2 or 3 weeks, so then I'll push it into the master.<br/><br/>Besides that I have implemented Chebyshev points for orders greater than 48, for which I don't have exact Fekete points anymore (it'd be just a matter of running my sympy script longer, but I was hitting some accuracy issues when solving those large polynomials numerically -- one needs to obtain all roots, so Chebyshev points are ok for now). So I can now represent arbitrary polynomials in 1D. <br/><br/>I have implemented powering of the discrete function, it automatically determines which polynomial order it has to use and creates a new discrete function (the power) on the new mesh. I wrote lots of tests for that, and I hit an interesting bug, that my naive comparison code:<br/><pre><br/>assert abs(x-y) &lt; eps<br/></pre><br/>was not good enough anymore for larger numbers and I had to read some documentation, and implement the following function:<br/><pre><br/>@vectorize(0, 1)<br/>def feq(a, b, max_relative_error=1e-12, max_absolute_error=1e-12):<br/>    a = float(a)<br/>    b = float(b)<br/>    # if the numbers are close enough (absolutely), then they are equal<br/>    if abs(a-b) &lt; max_absolute_error:<br/>        return True<br/>    # if not, they can still be equal if their relative error is small<br/>    if abs(b) &gt; abs(a):<br/>        relative_error = abs((a-b)/b)<br/>    else:<br/>        relative_error = abs((a-b)/a)<br/>    return relative_error &lt;= max_relative_error<br/></pre><br/>Then I implemented the global H1 and L2 projections, so far the projected function is hardwired, I still need to allow the user to specify any discrete function to be projected. I need to precalculate it and so on.<br/><br/>I wrote bunch of tests for the projections and powers and I always discovered some bugs by writing more tests, so the progress is slow, but at least I can trust the code that is tested.<br/><br/>I also helped Pavel to fix couple segfaults, as well as some other things.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/6568744196982634289-274396393864768585?l=ondrejcertik.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-07-24T02:27:53Z</updated>
    <published>2010-07-24T02:06:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Ondřej Čertík</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/02845032202161204018</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6568744196982634289</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02845032202161204018</uri>
      </author>
      <link href="http://ondrejcertik.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://ondrejcertik.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Ondřej Čertík</title>
      <updated>2011-04-21T23:17:59Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-936818886435977143.post-2894031447728849147</id>
    <link href="http://addisoncugini.blogspot.com/feeds/2894031447728849147/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://addisoncugini.blogspot.com/2010/07/qalu-and-measurement-gates.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/936818886435977143/posts/default/2894031447728849147" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/936818886435977143/posts/default/2894031447728849147" rel="self" type="application/atom+xml"/>
    <link href="http://addisoncugini.blogspot.com/2010/07/qalu-and-measurement-gates.html" rel="alternate" type="text/html"/>
    <title>QALU and Measurement Gates</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As I said in the last blog post, measurement has been implemented as a one-shot irreversible function in my code; I made it a function because measurement should not distribute to each orthogonal state inside the quantum state of the system. This could not easily be implemented in Sympy as every object (including my gates) is assumed to be distributive. This leads to some generality problems as one cannot construct a general circuit object with a mix of measurement gates and Unitary Gates. I did a one-shot measurement rather than an ensemble measurement as the one-shot measurement was needed immediately for my implementation of Shor's algorithm.<br/><br/>This week, I fixed these problems. In order to ensure measurement did not distribute, I had to subclass Gate into a NonDistributiveGate class which would be given special logic inside my apply method. This required me to carefully review apply and make sure that the .expand() method was used judiciously so that integer factors combined correctly while ensuring that gates did not distribute to the individual orthogonal states. This took much longer than I thought it would. I have also begun to implement a notion of ensemble measurement which will return a tuple of measurement outcomes.<br/><br/>Another thing I have been putting off is the creation of a set of quantum logic which implements common arithmetic quantum mechanically; this logic would be key in doing a legitimate and realistic simulation of all processes needed to do Shor's or Grover's algorithms. Making this logic required a look through the literature on reversible logic and a review of my old notes from my assembly language class. Reversible logic requires some junk bits which store extra information; since I am simulating a quantum computer and not a purely classical reversible machine, I can cheat a little and use measurement to irreversibly destroy information which bring down the number of necessary junk bits and the logic needed to manage them. Thus, I was able to implement a quantum mechanical Add, Bitshift and Multiply. I still need to create logic which can take powers and preform the mod function. Also, I might want to consider optimizing the number of gates and junk bits needed for these operations as they require quite a few.<br/><br/>The addition of tests to my code has been going smoothly as well. If I want to merge this code by the end of GSoC, I will need to begin to base my code off Matt Curry's code and document-test my code like crazy. These will likely be my primary concern for the next few weeks.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/936818886435977143-2894031447728849147?l=addisoncugini.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-07-23T19:55:10Z</updated>
    <published>2010-07-23T19:14:00Z</published>
    <author>
      <name>AddisonCugini</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/09778793677316682601</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-936818886435977143</id>
      <author>
        <name>AddisonCugini</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/09778793677316682601</uri>
      </author>
      <link href="http://addisoncugini.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/936818886435977143/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://addisoncugini.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Addison's Blog Page</title>
      <updated>2011-04-22T02:54:01Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-22566012.post-7163828547914825642</id>
    <link href="http://haz-tech.blogspot.com/feeds/7163828547914825642/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=22566012&amp;postID=7163828547914825642" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/22566012/posts/default/7163828547914825642" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/22566012/posts/default/7163828547914825642" rel="self" type="application/atom+xml"/>
    <link href="http://haz-tech.blogspot.com/2010/07/clause-learning-and-heuristics.html" rel="alternate" type="text/html"/>
    <title>Clause Learning and Heuristics</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><hr/><div style="text-align: center;"><i>Clause Learning</i></div><br/>  Everyone should learn from their mistakes, right? Of course ;). Well SAT solvers are no different. If the solver discovers that the problem has no solution when a subset of the variables are set a certain way, then that is useful knowledge -- this knowledge is captured in the form of new clauses that are added to the theory.<br/><br/>  Now you may think that since we're doing a systematic search, we won't ever need that information again: for example if x=True / y=True / z=False led to an inconsistency and we backtracked to try other values of z, y and x, will we ever use the fact that (!x | !y | z) must hold? When using a static variable ordering, the answer is no. This is because if we backtrack, we will never see the same setting of variables again that led to the inconsistency. However static variable orderings are brutal :p.<br/><br/>  Let's expand on our example to see clause learning in a little more detail. Imagine the SAT solver went as follows:<br/><br/><ul><li>Set x = True</li><li>From unit propagation set v1 = True and v2 = False</li><li>Set y = True</li><li>From unit propagation set v3 = False, v4 = True, v5 = False</li><li>Set z = False</li><li>From unit propagation we get the empty clause !!conflict!!</li></ul>  So what do we know? Well right off the bat x = v1 = y = v4 = True and v2 = v3 = v5 = z = False is enough to make the theory unsatisfiable (so solution exists with those settings). But remember that unit propagation is a sound procedure -- the variables v1 - v5 are all implied by setting x and y to True [0]. So really just the settings to x, y, and z are enough to cause the problem. How could we have avoided it? Well what if we had the clause (!x | !y | z)? Note that this is just say at least one of the variables was set different. If we had that clause to begin with, our search would have looked like this:<br/><br/><ul><li>Set x = True</li><li>From unit propagation set v1 = True and v2 = False</li><li>Set y = True</li><li>From unit propagation set v3 = False, v4 = True, v5 = False, <b>z = True</b></li><li>...</li></ul><br/>  So what we do is add the clause, (!x | !y | z), to our database of clauses and continue the search. Since we're backtracking, we'll set z=True anyways (the clause wasn't really needed), but in the future (say if we backtrack higher and go down another branch, we may face the same decisions. This is when the clause really becomes useful.<br/><br/>  Now the method I just described uses a very simple technique to figure out the clause it should create / add -- it picks the negation of all the decisions you've made so far. However there are far more complex schemes that are ongoing research. I may incorporate these into SymPy some day, but for now the default <a href="http://github.com/haz/sympy/commit/e85c6a8d7ac736bcbe1d60c3cb96d4f932421db4">works great</a> ;).<br/><br/>  Another common concern (which I'll avoid dealing with for now) is how to detect useless clauses -- eventually learned clauses are no longer triggering and just taking up precious cycles in the solving process (and memory too). Elaborate cache flushing schemes have been proposed (and still are being actively researched), but SymPy likely won't be getting to the point where that would be necessary.<br/><br/>  So that's all for clause learning. It's extremely helpful in the context of SAT solving, and is finally in our SymPy solver.<br/><br/>[0]: I won't go into detail here, but you get the same result if you set a number of variables and then do unit prop as if you interleaved unit prop with each variable setting.<br/><br/><hr/><div style="text-align: center;"><i>VSIDS Heuristic</i></div><br/>  So behind any reasonable SAT solver is a great heuristic. Variable State Independent Decaying Sum (VSIDS) is one such heuristic. What does a heuristic do? Well at each node in the search tree, it should tell you what variable to set, and what to set it to.<br/><br/>  VSIDS works by three main steps:<br/><br/><ol><li>First it assigns a score to every literal (or variable setting if you will) matching the number of clauses that the literal appears in. So if a literal is in a large number of clauses, it will be picked before one that isn't.</li><li>Every time a clause is added, the literals in that clause get their score bumped up (by 1). Every time a clause is deleted, the scores get reduced (by 1).</li><li>At regular intervals, /every/ literal has their score reduced by a constant factor (divide by two is typical).</li></ol>  So what does this accomplish? Well at a high level it prefers variable settings that will satisfy the majority of clauses, and over time (through steps 2 and 3) it will prefer literals that will satisfy a large number of learned clauses. This has the effect of avoiding bad parts of the search space where a solution is unlikely to exist.<br/><br/>  The SymPy solver <a href="http://github.com/haz/sympy/commit/4690882e075e0ef1bbfdd3f8155e365fcdac17eb">now has VSIDS</a> driving the search, with the one step of #3 missing (coming soon ;)). The beauty of VSIDS is how nicely it plays with the clause-learning of the SAT solver to make things exceptionally fast.<br/><br/><hr/><br/>  That's all for now. I'll have another post soon showing some recent results, and one more within the following week to describe the data structures that make all this possible.<br/><br/><hr/><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/22566012-7163828547914825642?l=haz-tech.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-07-23T18:34:35Z</updated>
    <published>2010-07-23T18:34:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Haz</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/13252588709861854104</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-22566012</id>
      <author>
        <name>Haz</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/13252588709861854104</uri>
      </author>
      <link href="http://haz-tech.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/22566012/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://haz-tech.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Projects and thoughts for the more technically driven.</subtitle>
      <title>Tech Talk</title>
      <updated>2011-04-21T23:56:17Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://ojensen.wordpress.com/?p=163</id>
    <link href="http://ojensen.wordpress.com/2010/07/22/making-things-testable/" rel="alternate" type="text/html"/>
    <title>Making things testable</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As I mentioned in my previous post, I did not want to implement array arguments for the C code generator by simply taking the same route as I did with the Fortran generator. In hindsight it was clear that I … <a href="http://ojensen.wordpress.com/2010/07/22/making-things-testable/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=ojensen.wordpress.com&amp;blog=13891021&amp;post=163&amp;subd=ojensen&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As I mentioned in my previous post, I did not want to implement array arguments for the C code generator by simply taking the same route as I did with the Fortran generator.  In hindsight it was clear that I could do a much better implementation, and I’ve spent the week figuring out exactly how it should be done, and putting together a working implementation.  By the way it’s been beneficial to do the C and Fortran implementations in parallel, as it provides a good opportunity to test out alternative implementations.</p>
<p>The principal weakness of the  Fortran code generator is that the support of array arguments has only limited testability.  It is currently testable only on two levels:</p>
<p style="padding-left: 30px;">1) The properties and behavior of IndexedElement instances,</p>
<p style="padding-left: 30px;">2) The output from the Fortran code generator.</p>
<p>The missing piece in there, is the testability of complex expressions composed of IndexedElement instances.  It is important to be able to test the consistency of indices in an expression, as it is very easy to create ambigous or even meaningless expessions of IndexedElement objects.  For instance, the innocent looking expression:  (which is considered undefined in my development branch)</p>
<pre>x(i) + x(j)</pre>
<p>would be ambigous at best. It could be (1) a scalar being the sum of components i and j of array x or (2) a symmetric rank 2 object a(i, j) where every component is made by adding components i and j of x.  To avoid this kind of ambiguities, it is necessary to implement checks of index consistency.  And it is preferable to implement it in the indexed module so that these checks are available whenever the module is in use.  This gives the bonus of another level of testability:</p>
<p style="padding-left: 30px;">3) The contraction structure of indexed expressions and the algorithms used to analyze the expressions.</p>
<p>With this in place, the reliability of array based code from the C code generator depends directly on how robust the analysis of indexed expressions is.   The third level of testability is extremely important to make Sympy generated code a viable option for scientific applications.</p>
<p>In my branch <a href="http://github.com/jegerjensen/sympy/tree/codegen_C">codegen_C</a> on github, these thoughts have materialized in a  new file sympy/tensor/indexed_methods.py, as well as in modifications of the C code  printer.   I have implemented testable high-level interfaces that can analyze expressions and provide information  about the index structure. The code printers should  now be able to generate loops over arrays in a much more reliable fashion.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/ojensen.wordpress.com/163/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/ojensen.wordpress.com/163/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/ojensen.wordpress.com/163/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/ojensen.wordpress.com/163/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/ojensen.wordpress.com/163/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/ojensen.wordpress.com/163/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/ojensen.wordpress.com/163/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/ojensen.wordpress.com/163/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/ojensen.wordpress.com/163/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/ojensen.wordpress.com/163/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/ojensen.wordpress.com/163/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/ojensen.wordpress.com/163/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/ojensen.wordpress.com/163/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/ojensen.wordpress.com/163/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=ojensen.wordpress.com&amp;blog=13891021&amp;post=163&amp;subd=ojensen&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2010-07-22T13:27:55Z</updated>
    <category term="sympy"/>
    <author>
      <name>jegerjensen</name>
    </author>
    <source>
      <id>http://ojensen.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://ojensen.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://ojensen.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://ojensen.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://ojensen.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Python, SymPy and Quantum Physics</subtitle>
      <title>Jensen's Sympy Blog</title>
      <updated>2011-05-22T03:04:45Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6568744196982634289.post-1161744002548885483</id>
    <link href="http://ondrejcertik.blogspot.com/feeds/1161744002548885483/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=6568744196982634289&amp;postID=1161744002548885483" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/1161744002548885483" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/1161744002548885483" rel="self" type="application/atom+xml"/>
    <link href="http://ondrejcertik.blogspot.com/2010/07/theoretical-physics-reference-book.html" rel="alternate" type="text/html"/>
    <title>Theoretical Physics Reference Book</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Today I fulfilled my old dream --- I just created my first book! Here is how it looks like:<br/><a href="http://2.bp.blogspot.com/_Cb7_IVMD3C4/TEU-J9prDNI/AAAAAAAAFA0/swgnbniTbok/s1600/Jul_19_2010_3169.jpg"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5495867261164653778" src="http://2.bp.blogspot.com/_Cb7_IVMD3C4/TEU-J9prDNI/AAAAAAAAFA0/swgnbniTbok/s400/Jul_19_2010_3169.jpg" style="cursor: pointer; cursor: hand; width: 300px; height: 400px;"/></a><img alt="" border="0" id="BLOGGER_PHOTO_ID_5495867250591418786" src="http://1.bp.blogspot.com/_Cb7_IVMD3C4/TEU-JWQ0SaI/AAAAAAAAFAs/mBDPcIzx0ZY/s400/Jul_19_2010_914.jpg" style="cursor: pointer; cursor: hand; width: 400px; height: 300px;"/><br/>More images<br/><a href="http://picasaweb.google.com/ondrej.certik/TheoreticalPhysicsReference">here</a>.<br/><br/>Here is the source code of the book: <a href="http://github.com/certik/theoretical-physics">http://github.com/certik/theoretical-physics</a>, the repository contains a branch 'master' with the code and 'gh-pages' with the generated html pages, that are hosted at github, at the url <a href="http://theoretical-physics.net">theoretical-physics.net</a>.<br/><br/>Then I published the book at Lulu: <a href="http://www.lulu.com/product/hardcover/theoretical-physics-reference/11612144">http://www.lulu.com/product/hardcover/theoretical-physics-reference/11612144</a>, I wanted a hardcover book, so I setup a project at Lulu, used some Lulu templates for the cover and that was it. Lulu's price for the book is $19.20 (166 black &amp; white pages, hardcover), then I can set my own price and the rest of the money probably goes to me. I set the price to $20, because Lulu has free shipping for orders $20 or more. You can also download the pdf (for free) at the above link (or just use my git repository). So far this didn't cost me anything.<br/><br/>I have then ordered the book myself (just like anybody else would, at the above address) and it arrived today. It's a regular hardcover book. Beautiful, you can browse the pictures above. It smells deliciously (that you have to believe me). And all that it cost me was $19.20.<br/><br/>As for the contents itself, you can browse it online at <a href="http://theoretical-physics.net">theoretical-physics.net</a>, essentially it's most of my physics notes, that I collected over the years. I'd like to treat books like software --- release early release often. This is my first release and I would call it beta. The main purpose of it was to see if everything goes through, how long it takes (the date inside the book is July 4, 2010, I created and ordered it on July 5, got the physical book on July 19) and what the quality is (excellent). I also wanted to see how the pages correspond to the pdf (you can see for yourself on the photos, click on the picasa link above).<br/><br/>Now I need to improve the first pages a bit, as well as the last pages, improve the index, write some foreword and so on. I also need to think how to better organize the contents itself and generally improve it. I also need to figure out some versioning scheme, so far this is version 0.1. I think I'll do edition 1, edition 2, edition 3, and so on. And whenever I feel that I have added enough new content, I'll just publish it as a new edition. So if you want to buy it, I suggest to wait for my 1.0 version, that will have the mentioned improvements.<br/><br/>It'd be also cool to have all the editions online somehow and create nice webpages for it (currently theoretical-physics.net points directly to the book html itself).<br/><br/>So far the book is just text. I still need to figure out how to handle pictures and also whether or not to use program examples (in Python, using sympy, scipy, etc.). So far I am inclining not to put there any program codes, as then I don't need to maintain them.<br/><br/>Overall I am very pleased with the quality, up to some minor issues that I mentioned above, everything else end up just fine. I think we have come a long way from the discovery of the <a href="http://en.wikipedia.org/wiki/Printing_press">printing press</a>. Anybody can now create a book for free, and if you want to hold the hardcopy in your hands, it costs around $20. You don't need to order certain amounts of books, nor partner with some publisher etc. I think that's just awesome.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/6568744196982634289-1161744002548885483?l=ondrejcertik.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2010-07-20T07:00:39Z</updated>
    <published>2010-07-20T05:57:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="debian"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="python"/>
    <author>
      <name>Ondřej Čertík</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/02845032202161204018</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6568744196982634289</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02845032202161204018</uri>
      </author>
      <link href="http://ondrejcertik.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://ondrejcertik.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Ondřej Čertík</title>
      <updated>2011-04-21T23:17:59Z</updated>
    </source>
  </entry>
</feed>
