<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet SymPy</title>
  <updated>2012-08-29T08:40:31Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Ondrej Certik</name>
    <email>ondrej@certik.cz</email>
  </author>
  <id>http://planet.sympy.org/atom.xml</id>
  <link href="http://planet.sympy.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://planet.sympy.org/" rel="alternate"/>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1122</id>
    <link href="https://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/" rel="alternate" type="text/html"/>
    <title>SymPy Live Sphinx Extension</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I didn’t blog about SymPy all summer, so I thought I would write a post about my favorite feature of the upcoming SymPy 0.7.2 release.  In fact, this feature has got me more excited than any other feature from any version of SymPy.  Yeah, it’s that good. The feature is the SymPy Live Sphinx extension. [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1122&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I didn’t blog about SymPy all summer, so I thought I would write a post about my favorite feature of the upcoming SymPy 0.7.2 release.  In fact, this feature has got me more excited than any other feature from any version of SymPy.  Yeah, it’s that good.</p>
<p>The feature is the SymPy Live Sphinx extension.  To start, if you don’t know about it, check out <a href="http://live.sympy.org/" target="_blank">SymPy Live</a>.  This is a console that runs on the <a href="https://developers.google.com/appengine/">App Engine</a>.  We’ve actually had this for quite some time, but this winter, it got a huge upgrade thanks to the contribution of some <a href="http://www.google-melange.com/gci/homepage/google/gci2011">GCI</a> students.  Basically, SymPy Live lets you try out SymPy in your browser completely for free, because it runs all the code on the App Engine.  Actually, the console is a full Python console, so you can actually run any valid Python command on it.  This past winter, GCI students upgraded the look of the site, added a mobile version (visit live.sympy.org on your phone), and added other neat features like search history and autocompletion.</p>
<p>Now, <a href="http://sphinx.pocoo.org/">Sphinx</a> is the documentation system that we use to generate <a href="http://docs.sympy.org/">SymPy’s html documentation</a>. Last year, when I was at the <a href="http://asmeurersympy.wordpress.com/2011/07/17/the-scipy-2011-conference/">SciPy Conference</a>, Mateusz had an idea at the sprints to create an extension linking SymPy Live and Sphinx, so that the examples in Sphinx could be easily run in SymPy Live.  He didn’t finish the extension, but I’m happy to report that thanks to David Li, who was also one of the aforementioned GCI students, the extension is now complete, and is running live on our <a href="http://docs.sympy.org/dev/">development docs</a>.  When SymPy 0.7.2 is released (soon I promise), it will be part of the oficial documentation.</p>
<p>The best way to see how awesome this is is to visit the website and check it out.  You will need a modern browser (the latest version of Firefox, Safari, or Chrome will work, IE might work too).  Go to a page in the development docs with documentation examples, for example, <a href="http://docs.sympy.org/dev/tutorial.html#algebra">http://docs.sympy.org/dev/tutorial.html#algebra</a>, and click on one of the examples (or click on one of the green “Run code block in SymPy Live” buttons). You should see a console pop up from the bottom-right of the screen, and run your code.  For example:</p>
<div class="wp-caption alignnone" id="attachment_1149" style="width: 460px;"><a href="http://asmeurersympy.files.wordpress.com/2012/08/sympy-live-sphinx.png"><img alt="" class="size-full wp-image-1149" height="317" src="http://asmeurersympy.files.wordpress.com/2012/08/sympy-live-sphinx.png?w=450&amp;h=317" title="SymPy-Live-Sphinx" width="450"/></a><p class="wp-caption-text">Example of the SymPy Live Sphinx extension at <a href="http://docs.sympy.org/dev/tutorial.html#algebra">http://docs.sympy.org/dev/tutorial.html#algebra</a>. Click for larger image.</p></div>
<p> </p>
<p>You can access or hide the console at any time by clicking on the green box at the bottom-right of the page.  If you click on “Settings”, you will see that you can change all the same settings as the regular SymPy Live console, such as the printer type, and the keys for execution and autocompletion.  Additionally, there is a new setting, “Evaluation Mode”, which changes how the Sphinx examples are evaluated.  The default is “Evaluate”.  In this mode, if you click on an example, it is executed immediately.  The other option is “Copy”.  In this mode, if you click an example, it is copied to the console, but not executed right away. This way, you can edit the code to try something different.  Remember, this is a full fledged Python console running SymPy, so you can try literally anything</p>
<p>So play with this and <a href="http://groups.google.com/group/sympy">let us know</a> what you think.  We would love to hear ways that we can improve the experience even further.  In particular, I think we should think about ways to make the “Copy” mode more user-friendly.  Suggestions welcome!  Also, please <a href="http://code.google.com/p/sympy/issues">report any bugs</a>.</p>
<p>And one word of warning:  even though these are the development docs, SymPy Live is still running SymPy 0.7.1.  So some examples may not work until 0.7.2 is released, at which point we will update SymPy Live.</p>
<p>I believe that this extension represents the future of interactive documentation. I hope you enjoy.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1122/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1122/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1122&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-21T05:09:13Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>https://asmeurersympy.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2012-08-29T08:40:10Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=512</id>
    <link href="http://amakelov.wordpress.com/2012/08/20/google-summer-of-code-2012-week-13/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 13</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of my 13th (and last) week of GSoC. I continued my work on centralizers, improving normal closure, derived in lower central series, etc. My most recent pull request containing these additions just got merged and can be found here. This week I spent a lot of time on writing <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/08/20/google-summer-of-code-2012-week-13/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=512&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all, here’s a brief summary of my 13th (and last) week of GSoC.</p>
<ul>
<li>I continued my work on centralizers, improving normal closure, derived in lower central series, etc. My most recent pull request containing these additions just got merged and can be found <a href="https://github.com/sympy/sympy/pull/1495" target="_blank">here</a>. This week I spent a lot of time on writing better tests and developing some new test practices. The group-theoretical algorithms in the combinatorics module are getting more and more complicated, so better, cleverer and more thorough tests are needed. I came up with the following model for verification:<br/>
- since the results of the tests are very hard to compute by hand, some helper functions are needed that find the wanted object in a brute-force manner using only definitions. For example, we often look for a subgroup with certain properties. The most naive and robust approach to this is to:<br/>
- list all group elements, go over the list and check each element for the given property.<br/>
- Then, make a list of all the “good” elements and compare it (as a set) with the list of all elements of the group the function being tested returns.<br/>
Hence, a new file was created, sympy/combinatorics/testutil.py, that will host such functions. (Needless to say, they are exponential in complexity, and for example going over all the elements of SymmetricGroup(n) becomes infeasible for n larger than 10.)<br/>
- The presence of functions being used to test other functions gets us in a bit of a <a href="http://en.wikipedia.org/wiki/Quis_custodiet_ipsos_custodes%3F" target="_blank"><strong><em>Quis custodiet ipsos custodes?</em></strong></a> situation, but this is not fatal: the functions in testutil.py are extremely straightforward compared to the functions in perm_groups.py that they test, and it’s really obvious what they’re doing, so it’ll take less tests to verify <em>them. </em><br/>
- In the tests for the new functions from perm_groups.py, I introduced some comments to indicate what (and why) I’m testing. Another practice that seems to be good is to verify the algorithms for small groups (degrees 1, 2, 3) since there are a lot of corner cases there that seem to break them.</li>
<li>I started work on improving the disjoint cycle notation, namely excluding singleton cycles from the cyclic form; however, there are other changes to handling permutations that are waiting to be merged in the combinatorics module <a href="https://github.com/sympy/sympy/pull/1498" target="_blank">here</a>, so I guess I’ll first discuss my changes with <a href="https://github.com/smichr" target="_blank">Christopher</a>. Currently, I see the following two possibilities for handling the singleton cycles:<br/>
- add a <code>_size</code> attribute to the Permutation class, and then, when faced with something like <code>Permutation([[2, 3], [4, 5, 6], [8]])</code>, find the maximum index appearing in the permutation (here it’s 8) and assign the size of the permutation to that + 1. Then it remains to adjust some of the other methods in the class (after I adjusted <strong>mul</strong> so that it treats permutations of different sizes as if they leave all points outside their domain fixed, all the tests passed) so that they make sense with that new approach to cyclic forms.<br/>
- more ambitious: make a new class, <code>ExtendedArrayForm</code> or something, with a field <code>_array_form</code> that holds the usual array form of a permutation. Then we overload the <code>__getitem__</code> method so that if the index is outside the bounds of <code>self._array_form</code> we return the index unchanged. Of course, we’ll have to overload other things, like the <code>__len__</code> and <code>__str__</code> to make it behave like a list. Then instead of using a list to initialize the array form of a permutation, we use the corresponding <code>ExtendedArrayForm</code>. This will make all permutations behave as if they are acting on a practically infinite domain, and if we do it that way, we won’t have to make any changes to the methods in <code>Permutation</code> – everything is going to work as expected, no casework like <code>if len(a) &gt; len(b),...</code> will be needed. So this sounds like a rather elegant approach. On the other hand, I’m not entirely sure if it is possible to make it completely like a list, and also it doesn’t seem like a very performance-efficient decision since <code>ExtendedArrayForm</code> instances will be created all the time. (<strong>see the discussion <a href="https://github.com/sympy/sympy/pull/1498" target="_blank">here</a>).</strong></li>
<li>Still nothing on a database of groups. I looked around the web for a while but didn’t find any resources… the search continues. Perhaps I should ask someone more knowledgeable.</li>
</ul>
<p>That’s it for now, and that’s the end of my series of blog posts for the GSoC, but I don’t really feel that something has ended since it seems that my contributions to the combinatorics module will continue (albeit not that regularly : ) ). After all, it’s a lot of fun, and there are a lot more things to be implemented/fixed there! So, a big “Thank you” to everyone who helped me get through (and to) GSoC, it’s been a pleasure and I learned a lot. Goodbye!</p>
<p> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/512/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/512/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=512&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-20T14:38:23Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-20T14:40:54Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://blog.catchmrbharath.in/programming/2012/08/19/gsoc-last-week</id>
    <link href="http://blog.catchmrbharath.in/programming/2012/08/19/gsoc-last-week" rel="alternate" type="text/html"/>
    <title>GSoC last week</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This happens to be the last week of GSoC. The major things that I accomplished this week are</p>

<ul>
<li>Got pylab to work interactively.</li>

<li>Made more changes to the documentation of plotting module.</li>
</ul>

<p>I have a pull request for the restructured plotting module at <a href="https://github.com/sympy/sympy/pull/1468">here</a>. There has been lots of discussions on how the new plot API should look like in the pull request. The API as of now has 5 functions:</p>

<ul>
<li><code>plot_line</code> which plots 2D line plots, which I think I will change to <code>plot</code>.</li>

<li><code>plot_parametric</code> which plots 2D parametric plots.</li>

<li><code>plot3D</code> which plots 3D plots.</li>

<li><code>plot3D_parametric</code> which plots 3D parametric line plots. I think I will have to change it into <code>plot_parametric3D</code>.</li>

<li><code>plot3D_surface</code> which plots 3D parametric surfaces.</li>
</ul>

<p>The names are slightly confusing, but the alternative to these names are big. If you have any good names for 3D plots, please leave it in the comments.</p>

<p>I will have another post describing the things I learnt over this GSoC period.</p></div>
    </summary>
    <updated>2012-08-19T07:00:00Z</updated>
    <published>2012-08-19T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-29T08:40:30Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=484</id>
    <link href="http://amakelov.wordpress.com/2012/08/13/google-summer-of-code-2012-week-12/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 12</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of the 12th week of my GSoC: Centralizers got some more attention since there were several bugs in the implementation from last week; this also exposed a bug in .subgroup_search() as it is on sympy/master right now. Fortunately, I located it and fixed it earlier today, so the fix <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/08/13/google-summer-of-code-2012-week-12/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=484&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all, here’s a brief summary of the 12th week of my GSoC:</p>
<ul>
<li>Centralizers got some more attention since there were several bugs in the implementation from last week; this also exposed a bug in .subgroup_search() as it is on sympy/master right now. Fortunately, I located it and fixed it earlier today, so the fix for .subgroup_search() will be contained in my next pull request. In fact, it is just three more lines that should be added. Namely,<pre class="brush: python; wrap-lines: false;"># line 29: set the next element from the current branch and update
# accorndingly
c[l] += 1
element = ~(computed_words[l - 1])
</pre>
<p>should be replaced with</p>
<p/><pre class="brush: python; wrap-lines: false;"># line 29: set the next element from the current branch and update
# accorndingly
c[l] += 1
if l == 0:
    element = identity
else:
    element = ~(computed_words[l - 1])
</pre><p/>
<p>since we might be at the bottom level with <img alt="l=0" class="latex" src="http://s0.wp.com/latex.php?latex=l%3D0&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="l=0"/>. In this case, python doesn’t yell at you for looking up computed_words[-1] since negative indices wrap around the list in python. Yet another silly mistake that’s incredibly hard to track down! I hope that it will work properly from now on, and I’ll have to include some more tests to it.</p></li>
<li>The description of the algorithm for finding the center in polynomial time given in [1] didn’t really make sense to me, so instead a straightforward one,<br/>
<pre class="brush: python;">def center(self):
    return self.centralizer(self)
</pre><p/>
<p>was used. This can be updated later when I (or someone else) figures out the polynomial-time algorithm.</p></li>
<li>A new, faster algorithm for finding normal closures: this one uses the incremental version of Schreier-Sims, and some randomization. It’s described in [1].</li>
<li>Some applications of normal closure: the derived series, lower cenral series, the commutator of two subgroups of a group, nilpotency testing. Now we have things like this:<br/>
<pre class="brush: python; wrap-lines: false;">In [68]: from sympy.combinatorics.named_groups import *
In [69]: S = SymmetricGroup(4)
In [70]: ds = S.derived_series()
In [71]: len(ds)
Out[71]: 4
In [72]: ds[1] == AlternatingGroup(4)
Out[72]: True
In [73]: ds[2] == DihedralGroup(2)
Out[73]: True
In [74]: ds[3] == PermutationGroup([Permutation([0, 1, 2, 3])])
Out[74]: True
</pre><p/>
<p>demonstrating the well-known normal series of groups <img alt="e &lt; K_4 &lt; A_4 &lt; S_4" class="latex" src="http://s0.wp.com/latex.php?latex=e+%3C+K_4+%3C+A_4+%3C+S_4&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="e &lt; K_4 &lt; A_4 &lt; S_4"/> that solves the symmetric group on 4 letters. Note that the normal closure algorithm was already there thanks to the work of <a href="https://github.com/pernici" target="_blank">Mario</a>, I just improved it a bit and added some applications.</p></li>
<li>Moved DirectProduct() to a new file, group_constructs.py, that is planned to hold functions that treat several groups equally (for one other example, the commutator of two groups in the full symmetric group) rather than treating them in some sort of subgroup-supergroup relationship (such as .centralizer()).</li>
</ul>
<p>I wrote docstrings for the new stuff, and my current work can be found on <a href="https://github.com/amakelov/sympy/tree/week10" target="_blank">my week10 branch</a>. There will be some comprehensive test following the new additions (and I’ll need GAP to verify the results of some of them, probably). It seems that Todd-Coxeter won’t happen during GSoC since there’s just one more week; instead, I plan to focus on improving disjoint cycle notation and group databases.</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/484/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/484/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=484&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-13T15:00:09Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-20T14:40:53Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=251</id>
    <link href="http://rhoforsympy.wordpress.com/2012/08/13/week-12-starting-work-on-shors-algorithm/" rel="alternate" type="text/html"/>
    <title>Week 12 :  Starting work on Shor’s algorithm</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This has been a great 12 week run filled with learning and valuable experience! I believe I have accomplished most of what I had set out to do.  The only other thing pending as far as proposed tasks goes is to relocate the Tr module. This would be based on decisions that needs to be [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=251&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This has been a great 12 week run filled with learning and valuable experience! I believe I have accomplished most of what I had set out to do.  The only other thing pending as far as proposed tasks goes is to relocate the Tr module. This would be based on decisions that needs to be taken by more experienced folks here! Once, the decision is made, I don’t think this would take too much of my time. (I am estimating this based on the current approaches that have been proposed).  Therefore, I am committed to getting this done even if this goes beyond GSoC pencils down deadline which is this week!</p>
<p>So, that was all about the wrap up! So, what I am doing now?</p>
<p>~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.</p>
<p>Looking forward, I have taken up another interesting task I am excited to work on.  Past week I started working on implementing/completing Shor’s algorithm. The 2 major activities that consumed my time this week were</p>
<p>a) Understand Shor’s algorithm in more detail to help me understand what is available in the current implementation.</p>
<p>b) Review the current implementation and plan on next steps.</p>
<p>After reviewing the current implementation, I have decided to approach this task with the following smaller tasks:</p>
<p>a) Review and complete the implementation of <strong><em>QFT gate</em></strong> ( include tests, documentation), so that it can work independent of Shor’s algorithm.</p>
<p>b) Review and complete the implementation of <strong><em>CMOD gate</em></strong>. Right now, the implementation is not complete, and needs more tests too. This is the set of gates that would do the  |a mod N&gt; * |state&gt; over 2^j times for j = { 0, 1, ….2^(n-1)}</p>
<p>c) Put this all together and re-factor the current implementation (especially break down current <strong><em>period_find</em>()</strong> ) to help more detail testing.</p>
<p>d) Also, I plan to provide a argument to shor() method, to work as a <em>flag</em> to turn on detail logging as the circuit progresses.</p>
<p>All the code I am currenly reviewing and planning to work on are available on the master branch even though it is not complete.</p>
<p>Happy coding!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/251/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/251/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=251&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-13T06:00:17Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-08-29T08:40:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=384</id>
    <link href="http://scolobb.wordpress.com/2012/08/12/the-revolution-the-preview/" rel="alternate" type="text/html"/>
    <title>The Revolution (The Preview)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I continued the work on diagram embeddings and, unfortunately, I have discovered that Diagram did not actually work properly. I have written a status report E-mail to Tom, in which I briefly outine the progess. This E-mail (with some omissions) will serve as this week’s blog post, because writing a proper blog post [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=384&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I continued the work on diagram embeddings and, unfortunately, I have discovered that <tt>Diagram</tt> did not actually work properly.  I have written a status report E-mail to Tom, in which I briefly outine the progess.  This E-mail (with some omissions) will serve as this week’s blog post, because writing a proper blog post would take me at least three hours, and I would rather code right now, given the limited timeframe.</p>
<blockquote><p>
Unfortunately, I’ve got some, well, ambiguous news.</p>
<p>Remember I told you about hash-randomisation failures in computing<br/>
diagram embeddings?  Well, it turned out that diagram embeddings was<br/>
quite OK, and the problem went as far back as the Diagram class.<br/>
Essentially, I have done a really bad job implementing it at the<br/>
beginning of the summer: I wanted it to directly store all possible<br/>
morphism compositions.  However, in that implementation, I didn’t<br/>
really store all compositions, but just a part of them; which part I<br/>
stored depended on the order in which the morphisms were supplied<br/>
(severe facepalm <img alt=":-(" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif"/>  )</p>
<p>I tried thinking of some good fixes, but, as you can easily imagine,<br/>
the whole idea of storing all composites has suffered an epic<br/>
disintegration in the face of diagrams with cycles.  I am really<br/>
_really_ astonished at how this has managed to slip by me for such a<br/>
long time! <img alt=":-(" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif"/> </p>
<p>I have spent the first one third of Friday on trying to save the<br/>
existing design somehow, by carefully processing all possible edge<br/>
cases, but this has very quickly started to be abominable, and, of<br/>
course, it didn’t work.  So, I have spent the greater part of Friday<br/>
on thinking out a new Diagram.  I have spent all of yesterday, (all of<br/>
Saturday, that is), on implementing this new concept.  Basically, the<br/>
new Diagram only stores the relevant generator morphisms, but it is<br/>
still able to correctly determine and enumerate the morphisms that<br/>
belong to it.  It is also capable of determining whether it is finite<br/>
or not (i.e., whether there are cycles in the underlying directed<br/>
multigraph).  When asked for all morphisms, the new Diagram yields a<br/>
generator which acts correctly both in the finite and infinite cases.<br/>
In the finite case it produces all the morphisms of the Diagram.  This<br/>
is clearly impossible in the infinite case, but Diagram is<br/>
sufficiently clever in this case to produce the morphisms in a<br/>
BFS-like manner.  Intuitively, it will first yield all length one<br/>
morphisms, then all morphisms of length two, etc.</p>
<p>I have made some changes to the interface of the Diagram to better<br/>
reflect the new internals.  Nevertheless, the behaviour in the finite<br/>
case is the same as that of the old Diagram (modulo some property<br/>
names and minor changes, of course).</p>
<p>One bit of good news that deserves standing out in a separate<br/>
paragraph is that I only had to change _one_ line of code in<br/>
diagram_drawing.py to get it to work with the new Diagram.  (Well, I<br/>
did drop three other lines, because they were redundant), so this<br/>
radical swerve with the Diagram has left the larger part of my GSoC<br/>
work unaffected.</p>
<p>Now, I have started cherry-picking the diagram embeddings code, and I<br/>
have arrived at a conclusion that Diagram has to be further extended.<br/>
(“Extending” means adding something new, not rewriting it again.)<br/>
Namely, it is insufficient to know whether the whole Diagram is finite<br/>
or not; I really need to know whether a certain hom-set is finite or<br/>
not.  It’s not that hard to implement, and I’ve got a cool book on<br/>
graphs; however, it’s going to require some extra time.</p>
<p>Here comes the most important part of my message: I’m working at the<br/>
fullest possible cruising speed (not sprinting yet; that I’m saving<br/>
for the last 100m).  I won’t obviously have everything done tomorrow,<br/>
on Monday; however, I strongly believe that I only need another couple<br/>
days to finish the bulk of inferencing.  Provided that on Monday we<br/>
have what is referred to as _soft_ pencils-down date, I hope that I’m<br/>
still OK with the GSoC timeframe.  Further, I think I have already<br/>
mentioned a couple times that I’m going to have another couple free<br/>
weeks after GSoC, during which I will be easily able to finalise<br/>
whatever will be unfinished.  Do note, however, that I definitely<br/>
expect to have inferencing done _within_ the GSoC timeframe.</p>
<p>Conclusion: despite the rather radical direction things have taken in<br/>
the last two days, I’m _still_ more or less fine with the timing.</p>
<p>At the moment, you will not be able to see the code I’m working on on<br/>
GitHub.  The reason is that I’m juggling branches rather ninja-ily<br/>
right now, so I don’t really have the most relevant one to push<br/>
online, and they are all relatively short-lived.  I do expect to get<br/>
back to working sequentially today, and once I’ve got there, I’ll push<br/>
to ct3-commutativity to reflect the updates.</p>
<p>I’m documenting everything I do in as minute detail as possible.  I<br/>
think the Diagram class and the embeddings functionality has more<br/>
comments than actual code.  I expect this to make reviewing and later<br/>
maintenance considerably more agreeable.  Further, my commits are<br/>
almost all rather short, with acceptably long commit messages.  There<br/>
is one commit that breaks the rule, however: the commit which adds the<br/>
new Diagram.  It is one relatively large chunk of code, which replaces<br/>
the old Diagram with the new one and shows that the old tests still<br/>
pass modulo minor changes.  I have nevertheless reformatted the<br/>
history a bit to make this commit easier to review and, of course, the<br/>
code itself is just literally stuffed with comments.  All other<br/>
commits are much more like my usual ones.
</p></blockquote>
<p>Whenever I’m done with the core parts of inferencing, I will write a proper blogpost.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/384/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/384/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=384&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-12T19:16:45Z</updated>
    <category term="SymPy"/>
    <category term="category theory"/>
    <category term="commutative diagram"/>
    <category term="cycles in digraphs"/>
    <category term="deciding commutativity"/>
    <category term="diagram"/>
    <category term="diagram drawing"/>
    <category term="diagram embedding"/>
    <category term="subgraph isomorphism problem"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-08-29T08:40:27Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/?p=420</id>
    <link href="http://angadhsympy.wordpress.com/2012/08/12/penultimate-wee/" rel="alternate" type="text/html"/>
    <title>GSoC blog post</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Penultimate week of the GSoC period and it has been busy busy busy. In my last post I had spoken about opening a PR for LagrangesMethod and about cleaning up the PR on energy functions. (links to both are in last week’s post and I won’t repeat them here.) Much of this week was spent [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=420&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Penultimate week of the GSoC period and it has been busy busy busy.</p>
<p>In my last post I had spoken about opening a PR for LagrangesMethod and about cleaning up the PR on energy functions. (links to both are in last week’s post and I won’t repeat them here.) Much of this week was spent cleaning up both those PRs and quite extensive testing on LagrangesMethod. The testing has been mostly successful. I shall explaing why ‘mostly’ in the a bit. The PR for the renergy functions has been merged and I’m just waiting for approval from ‘the boss’ so that LagrangesMethod can be merged too.</p>
<p>I would like to direct the reader to my <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud%3A-sympy.physics.mechanics">proposal</a>. In it I had said that I would write this class only for unconstrained systems. The idea was to modify this to be a ‘complete’ class post the GSoC period. But as we got into the week to begin working on this class, Gilbert and I decided that we would make it a full fledged Lagrange class; that could handle any kind of constraint on mechanical systems. Constraints on mechanical systems are basically  of 2 types – configuration constraints (or holonomic constraints) and velocity constraints (or non-holonomic constraints). Depending on the methods used (Newton-Euler or Lagrange or Kane’s method and so on) these constraint equations are accounted for differently In the case of Lagrange’s method, there are additional terms due to these constraints that result in the introduction of the Lagrange multipliers. So, basically, repeating myself for the sake of clairty, one can now obtain the equations of motion in sympy.physics.mechanics using LagrangesMethod for any kind of system. I would even like to go out on a limb (quite literally under my current circumstances <img alt=":P" class="wp-smiley" src="http://s2.wp.com/wp-includes/images/smilies/icon_razz.gif"/> ) and claim that it could be made use of for more generic applications involving ‘The Method of Lagrange Multipliers’ provided the user has the Lagrangian and constraint equations. (The documentation will however be limited to the domain of mechanical systems but shouldn’t be too hard to translate into something more generic for a user). The class also handles nonconservative forces thus making it a complete class.</p>
<p>In terms of testing each of these functionalities, I feel the tests are pretty thorough. I have tested the nonconservative force handling of the class on a simple spring-mass-damper system. I have tested the handling of the constraint equations using the famous ‘disc on an inclined plane’ test problem. Tests on more complex 3d systems have been performed like the rolling disc (more on this later). And then tests on a multibody system have been verified for a double pendulum. All of these work correctly; results have been compared to solutions by ahnd.</p>
<p>So with all of this down, why did I say it was “mostly successful”? Well, as it turns out, the tests work perfectly well when limited to problems involving planar motion. The results match up to those obtained by hand. But the results from the class get extremely nasty when dealing with more complex systems; I have implemented the rolling disc in two separate cases. In one test, I use the minimal set of generalized coordinates and the correct eoms are generated. But in another case I tried to use the non-minimal set of GCs and the equations generated are near impossible to comprehend (or I haven’t found the best way to deal with them yet). A big contribution of this messiness is due to the way in which Lagranges approach requires the definition of generalized speeds. In his approach, it is erquired for the generlized speeds to be ‘simple’ i.e. the gen. speeds are just derivatives of the gen coords. This is different in Kane’s approach where the generalized speeds can but needn’t necessarily be ‘simple’. From my experience, Kane’s generalized speeds are defined in a manner which make physical sense. This definitely validates why most dynamicists today (or so I have heard) prefer to choose Kane’s method on complex multi-body systems. The only way I can think of circumventing this situation in teh ‘LagrangesMethod’ class right now is using the minimal set of GCs for well known systems like the rolling disc and hope for the best.</p>
<p>Having all the additional functionality in this class and also playing with the rolling disc in particular has definitely led to a lot of insight but also taken a good chunk of time away from a period I wanted to dedicate to the ‘code output section’ which I have been unable to get started on. It looks like I will be unable to meet that one goal by the ‘hard’ pencils down date as I complete and fine tune the documentation (pending final approval of the Lagrange PR, of course). But I do feel that the time spent on Lagrange has been for the good. The code, I personally feel, is easy to read and appears to be easy to use. With people’s comments I was able to weed out all the unnecessary stuff. It is also ‘complete’ like I previously highlighted. I will continue to work on ‘code output’ post the GSoC period though as it’s usefulness is undeniable and also because of a development of a general sense of interest in coding (surprise surprise!).</p>
<p>Anyhow, apart from this, the other stuff I got done this week- I wrote up minor functions to compute a Lagrangian, changed how the potential energy function behaves. That’s it for this week. See you next week, one last time.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/420/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/420/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=420&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-12T01:01:57Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-08-29T08:40:28Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=555</id>
    <link href="http://krastanov.wordpress.com/2012/08/08/graph-of-the-relations-between-objects-in-the-diffgeom-module/" rel="alternate" type="text/html"/>
    <title>Graph of the Relations between Objects in the diffgeom Module</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This graph, besides showing naively in a rather simplistic way the structure of the theory of differential geometry (and most of what I have implemented in the diffgeom module), brings attention to the one non-trivial part of the module on which I have spent most of my time lately. Namely, implementing covariant derivatives. All directional [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=555&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://krastanov.files.wordpress.com/2012/08/painful_christoffel_symbols.png"><img alt="" class="aligncenter size-full wp-image-556" height="450" src="http://krastanov.files.wordpress.com/2012/08/painful_christoffel_symbols.png?w=600&amp;h=450" title="painful_christoffel_symbols" width="600"/></a></p>
<p>This graph, besides showing naively in a rather simplistic way the structure of the theory of differential geometry (and most of what I have implemented in the diffgeom module), brings attention to the one non-trivial part of the module on which I have spent most of my time lately. Namely, implementing covariant derivatives.</p>
<p>All directional derivatives are defined as a limiting procedure on a transport operator. Besides the Lie derivatives which use a certain transport operator that is easy to express in a coordinate free way, all other derivatives, called covariant derivatives have to be expressed using something called Christoffel symbols. And these are the ugly coordinate-dependent sources of pain, as the module structure becomes very cumbersome when such dependence must be accounted for. Thankfully, I think I have found a nice way to implement them in a new CovariantDerivativeOperator class on its own, that will contain all the logic in the same way in which the Base*Field classes do it. This will also require rewrite of the LieDerivative into a LieDerivativeOperator class.</p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=555&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-08T11:21:46Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="covariant derivative"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-08-08T11:41:03Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=445</id>
    <link href="http://amakelov.wordpress.com/2012/08/06/google-summer-of-code-2012-week-11/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 11</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of the 11th week of my GSoC. Yay! Subgroup searching now works with the use of .stabilizer(), as I discussed in my previous blog post. Surprisingly, the running time is similar to that of the flawed version using .baseswap() (whenever the one using .baseswap() works), you can play around <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/08/06/google-summer-of-code-2012-week-11/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=445&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all, here’s a brief summary of the 11th week of my GSoC.</p>
<ul>
<li>Yay! Subgroup searching now works with the use of .stabilizer(), as I discussed in <a href="http://amakelov.wordpress.com/2012/07/30/google-summer-of-code-2012-week-10/" target="_blank">my previous blog post</a>. Surprisingly, the running time is similar to that of the flawed version using .baseswap() (whenever the one using .baseswap() works), you can play around with the two versions on my <a href="https://github.com/amakelov/sympy/tree/week6" target="_blank">week6</a> (has a bug, using .baseswap()) and <a href="https://github.com/amakelov/sympy/tree/week9" target="_blank">week9</a> (seems to work, using .stabilizer()) branches.</li>
<li>Consequently, I made a <a href="https://github.com/sympy/sympy/pull/1454" target="_blank">new pull request</a> containing the incremental version of Schreier-Sims, the remove_gens utility for getting rid of redundant generators in a strong generating set, and the new (working) subgroup_search algorithm. You’re most welcome to help with the review!</li>
</ul>
<ul>
<li>I worked on several applications of subgroup_search() and the incremental Schreier-Sims algorithm. Namely, the pointwise stabilizer of a set of points (via the incremental Schreier-Sims algorithm):</li>
</ul>
<p/><pre class="brush: python; wrap-lines: false;">In [4]: from sympy.combinatorics.named_groups import *
In [5]: A = AlternatingGroup(9)
In [6]: G = A.pointwise_stabilizer([2, 3, 5])
In [7]: G == A.stabilizer(2).stabilizer(3).stabilizer(5)
Out[7]: True
</pre><p/>
<p>(this is much faster than the naive implementation using .stabilizer() repeatedly), and the centralizer of a group <img alt="H" class="latex" src="http://s0.wp.com/latex.php?latex=H&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="H"/> inside a group <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/>:</p>
<p/><pre class="brush: python; wrap-lines: false;">In [11]: from sympy.combinatorics.named_groups import *
In [12]: S = SymmetricGroup(6)
In [13]: A = AlternatingGroup(6)
In [14]: C = CyclicGroup(6)
In [15]: S_els = list(S.generate())
In [16]: G = S.centralizer(A)
In [17]: G.order()
Out[17]: 1
In [18]: temp = [[el*gen for gen in A.generators] == [gen*el for gen in A.generators] for el in S_els]
In [19]: temp.count(False)
Out[19]: 719
In [20]: temp.count(True)
Out[20]: 1
In [21]: G = S.centralizer(C)
In [22]: G == C
Out[22]: True
In [23]: temp = [[el*gen for gen in C.generators] == [gen*el for gen in C.generators] for el in S_els]
In [24]: temp.count(True)
Out[24]: 6
</pre><p/>
<p>(it takes some effort to see that these calculations indeed prove that .centralizer() returned the needed centralizer). The centralizer algorithm uses a pruning criterion described in [1], and even though it’s exponential in complexity, it’s fast for practical purposes. Both of the above functions are available (albeit not documented yet) on <a href="https://github.com/amakelov/sympy/tree/week10" target="_blank">my week10 branch</a>.</p>
<ul>
<li>The next steps are an algorithm for the centre in polynomial time, and an algorithm to find the intersection of two subgroups! And after that, I hope to be able to implement the Todd-Coxeter algorithm…</li>
</ul>
<p>That’s it for now!</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/445/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/445/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=445&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-06T14:26:08Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-20T14:40:54Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=357</id>
    <link href="http://scolobb.wordpress.com/2012/08/05/the-embedding/" rel="alternate" type="text/html"/>
    <title>The Embedding</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I have started some actual code of the derivation of commutativity of diagrams and implications. The first half of the week has gone to splitting Diagram into Diagram and Implication, as outlined in the previous post. Nothing really unexpected happened during that part, so there isn’t much to say about it, save for [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=357&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I have started some actual code of the derivation of commutativity of diagrams and implications.  The first half of the week has gone to splitting <tt>Diagram</tt> into <tt>Diagram</tt> and <tt>Implication</tt>, as outlined in the <a href="http://scolobb.wordpress.com/2012/07/29/the-reflection-about-inference/">previous post</a>.  Nothing really unexpected happened during that part, so there isn’t much to say about it, save for the thing that the code has become clearer and better organised.  Furthermore, I have gained a better understanding of some corner cases, as well as implemented more robust handling for those corner cases.</p>
<p>The second half of the week was considerably more exciting and thought intensive: it was related to finding diagram embeddings.  As it should be clear from the <a href="http://scolobb.wordpress.com/2012/07/29/the-reflection-about-inference/">last post</a>, this functionality lies at the foundation of deciding the commutativity of diagrams and implications.  In what follows, I will refer to the diagram which we need to embed as to the <em>pattern</em>, and  to the diagram into which we need to embed as to the <em>model</em>.  This seems to be an almost universally accepted terminology and comes from the fact that finding subgraph isomorphisms often lies at the base of various pattern matching implementations.</p>
<p>I have started by selecting and analysing the excellent paper by J. R. Ullman, [Ullm1976], which describes a very clear way of enumerating all possible graph embeddings.  This solution, however, was not exactly what I needed.  First of all, the algorithm described in details in [Ullm1976] is actually meant for <em>undirected</em> graphs, whereas one can clearly see arrows in diagrams.  Furthermore (a thought that has occurred to me quite late), diagrams, are actually multigraphs, in the sense that there can be more than one morphism between two objects.  Yet further, a diagram embedding must preserve morphism properties, in the sense that the embedding must map a morphism in the pattern to a morphism in the model, which has exactly the same properties as the morphism in the pattern.</p>
<p>I attempted to find whether someone has addressed the directed multigraph embedding problem before; however, I haven’t managed to find any references on the Internet, so I started thinking on adapting Ullman’s solution to my case.  The first thing I figured out was that I could reduce the directed multigraph embedding problem to a directed graph embedding problem.  Indeed, take a diagram and flatten down all multiple morphisms <em>going in the same direction</em> between the same to objects to one <em>directed</em> edge between these two objects.  Then construct directed graph embeddings and, for each such embeddings, for each directed edge <img alt="e" class="latex" src="http://s0.wp.com/latex.php?latex=e&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="e"/> of the flattened pattern, construct injective, property-preserving,  mappings from the set of morphisms of the pattern, which were flattened to <img alt="e" class="latex" src="http://s0.wp.com/latex.php?latex=e&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="e"/>, into the set of morphisms associated with the edge in the flattened model, to which <img alt="e" class="latex" src="http://s0.wp.com/latex.php?latex=e&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="e"/> is mapped by the subgraph isomorphism.  (These mappings are actually property-preserving embeddings in their own right, but I won’t call them so, since I’m good and I understand that the blog post has just become a bit unclear, so to say <img alt=":-D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/>  )</p>
<p>Let’s see an example.  Consider the diagram comprising two different morphisms: <img alt="f:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f:A\rightarrow B"/> and <img alt="g:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=g%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g:A\rightarrow B"/>, where <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f"/> has the property <tt>golden</tt>; this diagram is going to be out pattern.  Now, consider the model: a diagram comprising three morphisms <img alt="\alpha:C\rightarrow D" class="latex" src="http://s0.wp.com/latex.php?latex=%5Calpha%3AC%5Crightarrow+D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\alpha:C\rightarrow D"/>, <img alt="\beta:C\rightarrow D" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta%3AC%5Crightarrow+D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\beta:C\rightarrow D"/>, and <img alt="\gamma:C\rightarrow D" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cgamma%3AC%5Crightarrow+D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\gamma:C\rightarrow D"/>, in which <img alt="\beta" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\beta"/> has the property <tt>golden</tt>.  Quite obviously, all of our <em>property-preserving</em> embeddings should map <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f"/> to <img alt="\beta" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\beta"/>, while $\latex g$ can be mapped to either <img alt="\alpha" class="latex" src="http://s0.wp.com/latex.php?latex=%5Calpha&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\alpha"/> or <img alt="\beta" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\beta"/>.  Also note that the flattened pattern in this case is the graph consisting of a single edge <img alt="(A,B)" class="latex" src="http://s0.wp.com/latex.php?latex=%28A%2CB%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(A,B)"/>, while the flattened model is another one-edge graph, <img alt="(C,D)" class="latex" src="http://s0.wp.com/latex.php?latex=%28C%2CD%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(C,D)"/>.  More complex diagrams are treated in a similar fashion: flatten the pattern and the model to directed graphs, find directed graph embeddings, and then find the property-preserving morphism mappings.</p>
<p>There was another slight surprise underway, however.  Ullman does describe some of the modifications which will make the original algorithm capable of constructing directed graph embeddings, however, he has apparently forgot to describe one of them.  I will give some definitions before going into more detail.  Ullman uses <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> to refer to the adjacency matrix of the pattern, <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> to refer to the adjacency matrix of the model, and <img alt="M" class="latex" src="http://s0.wp.com/latex.php?latex=M&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M"/> to refer to the matrix representing a mapping of the vertices of the pattern into the vertices of the model; <img alt="M_{ij} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=M_%7Bij%7D+%3D+1&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M_{ij} = 1"/> means that vertex <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="i"/> in the pattern is mapped to vertex <img alt="j" class="latex" src="http://s0.wp.com/latex.php?latex=j&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="j"/> in the model.</p>
<p>Now, for given <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/>, <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/>, and <img alt="M" class="latex" src="http://s0.wp.com/latex.php?latex=M&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M"/>, compute <img alt="C = M (M B)^T" class="latex" src="http://s0.wp.com/latex.php?latex=C+%3D+M+%28M+B%29%5ET&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C = M (M B)^T"/>.  Condition (1) in [Ullm1976] states that, if <img alt="a_{ij} = 1\Rightarrow c_{ij} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=a_%7Bij%7D+%3D+1%5CRightarrow+c_%7Bij%7D+%3D+1&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="a_{ij} = 1\Rightarrow c_{ij} = 1"/>, for any vertices <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="i"/> and <img alt="j" class="latex" src="http://s0.wp.com/latex.php?latex=j&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="j"/> of the patern, then <img alt="M" class="latex" src="http://s0.wp.com/latex.php?latex=M&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M"/> represents an embedding.  (As usual, <img alt="a_{ij}" class="latex" src="http://s0.wp.com/latex.php?latex=a_%7Bij%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="a_{ij}"/> are elements of <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> and <img alt="c_{ij}" class="latex" src="http://s0.wp.com/latex.php?latex=c_%7Bij%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="c_{ij}"/> are elements of <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C"/>).  When I tried to actually use this criterion for a directed graph, I found that, apparently, <img alt="C^T" class="latex" src="http://s0.wp.com/latex.php?latex=C%5ET&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C^T"/> should be used, instead of <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C"/>.  The formal explanation follows.  By abuse of terminology, I will use “pattern” and “model” to refer to the flattened pattern and flattened model as well.</p>
<p>Let <img alt="D = M B" class="latex" src="http://s0.wp.com/latex.php?latex=D+%3D+M+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="D = M B"/>.  <img alt="d_{ij} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=d_%7Bij%7D+%3D+1&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="d_{ij} = 1"/> means that <img alt="\exists! k . (m_{ik} = 1 \mbox{ and } b_{kj} = 1)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cexists%21+k+.+%28m_%7Bik%7D+%3D+1+%5Cmbox%7B+and+%7D+b_%7Bkj%7D+%3D+1%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\exists! k . (m_{ik} = 1 \mbox{ and } b_{kj} = 1)"/>, where <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/> is a vertex of the model.  In other words, this means that the vertex <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="i"/> of the pattern is mapped to a unique vertex <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/> of the model, such that in the model there exists the (directed) edge <img alt="(k, j)" class="latex" src="http://s0.wp.com/latex.php?latex=%28k%2C+j%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(k, j)"/>.  Obviously, if <img alt="d^T_{ij}" class="latex" src="http://s0.wp.com/latex.php?latex=d%5ET_%7Bij%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="d^T_{ij}"/> is an element of <img alt="D^T" class="latex" src="http://s0.wp.com/latex.php?latex=D%5ET&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="D^T"/>, the role of the indices is reversed, that is: the vertex <img alt="j" class="latex" src="http://s0.wp.com/latex.php?latex=j&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="j"/> of the pattern is mapped to a unique vertex <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/> of the model, such that in the model there exists the (directed) edge <img alt="(k, i)" class="latex" src="http://s0.wp.com/latex.php?latex=%28k%2C+i%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(k, i)"/>.</p>
<p>Now, <img alt="c_{ij} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=c_%7Bij%7D+%3D+1&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="c_{ij} = 1"/> means that <img alt="\exists! t . (m_{it} = 1 \mbox{ and } d^T_{tj} = 1)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cexists%21+t+.+%28m_%7Bit%7D+%3D+1+%5Cmbox%7B+and+%7D+d%5ET_%7Btj%7D+%3D+1%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\exists! t . (m_{it} = 1 \mbox{ and } d^T_{tj} = 1)"/>.  Deciphering the meanings of the values of the elements of these matrices, this means that the vertex <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="i"/> of the pattern is mapped to a vertex <img alt="t" class="latex" src="http://s0.wp.com/latex.php?latex=t&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="t"/> of the model, vertex <img alt="j" class="latex" src="http://s0.wp.com/latex.php?latex=j&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="j"/> of the pattern is mapped to a vertex <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/> of the model, such that in the model there is the edge <img alt="(k, t)" class="latex" src="http://s0.wp.com/latex.php?latex=%28k%2C+t%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(k, t)"/>.  Now, suppose there is an edge <img alt="(i, j)" class="latex" src="http://s0.wp.com/latex.php?latex=%28i%2C+j%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(i, j)"/> in the pattern.  <img alt="c_{ij} = 1" class="latex" src="http://s0.wp.com/latex.php?latex=c_%7Bij%7D+%3D+1&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="c_{ij} = 1"/> means <img alt="M" class="latex" src="http://s0.wp.com/latex.php?latex=M&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M"/> maps <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="i"/> to <img alt="t" class="latex" src="http://s0.wp.com/latex.php?latex=t&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="t"/> and <img alt="j" class="latex" src="http://s0.wp.com/latex.php?latex=j&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="j"/> to <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/>, such that the model contains the edge <img alt="(k, t)" class="latex" src="http://s0.wp.com/latex.php?latex=%28k%2C+t%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="(k, t)"/>.  That is, the condition (1) as stated in [Ullm1976] and applied to directed graphs checks that <img alt="M" class="latex" src="http://s0.wp.com/latex.php?latex=M&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="M"/> actually <em>reverses</em> the direction of edges!  Therefore, one must actually use <img alt="C^T" class="latex" src="http://s0.wp.com/latex.php?latex=C%5ET&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C^T"/> to check for embeddings.</p>
<p>Now, since the original algorithm in [Ullm1976] was designed for <em>undirected</em> graphs, this extra transposition did not matter, and I think this is the reason why Ullman does not mention it.</p>
<p>I have implemented all the things I have described so far, so diagram embeddings kinda work <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  I have played with python generators a bit, so the code only produces embeddings on the as-needed basis.  I did that because I thought of the situation when any diagram embedding will suffice, but also because using generators has resulted in what I believe to be more elegant code.  The code abounds in comments, so I think it shouldn’t be a problem to comprehend for someone different from myself.  I don’t have a formal proof for this statement, however, so, I guess, Tom is going to be the test subject for this supposition ^_^</p>
<p>There are still a couple things to do, though.  First of all Ullman shows a nice optimisation to his algorithm; it looks pretty simple, so I’ll add it.  I will then write a couple more tests, including some crash tests involving complete graphs.  I will also have to rename the function which does all this magic from <tt>subdiagram_embeddings</tt> to <tt>diagram_embeddings</tt>, for obvious (I hope <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  ) reasons.</p>
<h3>References</h3>
<p>[Ullm1976] J. R. Ullman, An Algorithm for Subgraph Isomorphism, J. Association of Computing Machinery, March, 1976, 16, 31–42.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/357/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/357/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=357&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-05T11:29:33Z</updated>
    <category term="SymPy"/>
    <category term="category theory"/>
    <category term="diagram embedding"/>
    <category term="graph embedding"/>
    <category term="subgraph isomorphism problem"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-08-29T08:40:27Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/08/05/gsoc-week-11</id>
    <link href="http://catchmrbharath.github.com/programming/2012/08/05/gsoc-week-11" rel="alternate" type="text/html"/>
    <title>GSOC week 11</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I got my adaptive sampling branch merged last week. Now the plots are sampled adaptively and is more accurate. I also added a lot of tests to the implicit plotting branch and the coverage now is greater than 90%.</p>

<p>One of the major things decided in the previous week was to restructure the plot function. Presently <code>plot</code> is a single function, which depending on its input, renders an 2d or an 3d plot. Though it plots the right kind of plot, the <code>plot</code> function is quite complex and it was decided to split the plot function into smaller functions that plots a particular type of plot. I tried an approach where all 2D plots are plotted by a <code>plot2d</code> function, the 3D plots by <code>plot3D</code> and the existing <code>plot_implicit</code> plots to plot regions and implicit equations. Aaron mentioned that the API is still very complex as I was using tuples and lists to differentiate between a parametric plot and a 2d line plot and he was right. It is a bit complex and it was decided to have a functions for each kind of plot.</p>

<p>I think i can have the new plot functions as an PR by next week and I would like to try getting a Mayavi backend ready by the end of my GSoC period.</p>

<p>I forgot to mention why I deviated from my what I said I would do in my GSoC application. I tried getting a svgfig backend ready for almost one and a half week, and it was quite difficult. svgfig is not being updated and I had a hard time getting the axis ticks labelling to work most of the time. I wrote to the project maintainer many times and he helped me with a lot of things, but the library was not polished enough to use it with Sympy Live. So plotting for SymPy Live should be attempted with a javascript plotting library rather than a python backend. If we get matplotlib support on GAE, then it would be awesome.</p></div>
    </summary>
    <updated>2012-08-05T07:00:00Z</updated>
    <published>2012-08-05T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-19T07:40:29Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://blog.catchmrbharath.in/programming/2012/08/05/gsoc-week-11</id>
    <link href="http://blog.catchmrbharath.in/programming/2012/08/05/gsoc-week-11" rel="alternate" type="text/html"/>
    <title>GSOC week 11</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I got my adaptive sampling branch merged last week. Now the plots are sampled adaptively and is more accurate. I also added a lot of tests to the implicit plotting branch and the coverage now is greater than 90%.</p>

<p>One of the major things decided in the previous week was to restructure the plot function. Presently <code>plot</code> is a single function, which depending on its input, renders an 2d or an 3d plot. Though it plots the right kind of plot, the <code>plot</code> function is quite complex and it was decided to split the plot function into smaller functions that plots a particular type of plot. I tried an approach where all 2D plots are plotted by a <code>plot2d</code> function, the 3D plots by <code>plot3D</code> and the existing <code>plot_implicit</code> plots to plot regions and implicit equations. Aaron mentioned that the API is still very complex as I was using tuples and lists to differentiate between a parametric plot and a 2d line plot and he was right. It is a bit complex and it was decided to have a functions for each kind of plot.</p>

<p>I think i can have the new plot functions as an PR by next week and I would like to try getting a Mayavi backend ready by the end of my GSoC period.</p>

<p>I forgot to mention why I deviated from my what I said I would do in my GSoC application. I tried getting a svgfig backend ready for almost one and a half week, and it was quite difficult. svgfig is not being updated and I had a hard time getting the axis ticks labelling to work most of the time. I wrote to the project maintainer many times and he helped me with a lot of things, but the library was not polished enough to use it with Sympy Live. So plotting for SymPy Live should be attempted with a javascript plotting library rather than a python backend. If we get matplotlib support on GAE, then it would be awesome.</p></div>
    </summary>
    <updated>2012-08-05T07:00:00Z</updated>
    <published>2012-08-05T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-29T08:40:30Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/2012/08/04/gsoc-blog-post-58/</id>
    <link href="http://angadhsympy.wordpress.com/2012/08/04/gsoc-blog-post-58/" rel="alternate" type="text/html"/>
    <title>GSoC Blog Post</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So, in last week’s post I had said that the Lagrange class had neared completion. By mid-week I had it functional, so I opened a discussion on the mailing list asking for suggestions to improve the class. Several people in the group suggested that it’d be better to supply all the parameters on initialization. At first I was [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=419&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So, in last week’s post I had said that the Lagrange class had neared completion. By mid-week I had it functional, so I opened a discussion on the <a href="https://groups.google.com/forum/?fromgroups#!topic/sympy/LgSJPLgWmik">mailing list</a> asking for suggestions to improve the class. Several people in the group suggested that it’d be better to supply all the parameters on initialization. At first I was loath to make this change. This was for the following few reasons-</p>
<ol>
<li>My primary concern was that I felt it was taking away from the clarity in generating the equations of motion. I have spoken about that in some detail in the conversation on the group page about how I feel dynamicists would probably prefer typing an extra couple lines as long as the procedure to obtain the equations of motion feel similar to the work done by hand. I’m a a fan of the (possibly false) sense of security that comes from bookkeeping even whilst on a computer. Of course, I had to accede that it made no sense to have so many methods when everything could be passed at initialization. The argument that users would essentially have to memorize a sequence or procedure was a good one.</li>
<li>The other thing was that I felt was that this was making the structure of the ‘Lagrange’ class tremendously different from the ‘Kane’ class. But after discussions with Luke, Jason and Gilbert it became pretty apparent that even they felt that it might not have been the best way to implement that class. At one point I too felt like it was little weird that I was creating so many little methods which could’ve been merged into the initialization of the class itself. But I was just concentrating on staying true to the current structure of things in the mechanics package.</li>
<li>And the final reason for my apprehension was that I would have to revamp the whole method after having spent quite some time on it.</li>
</ol>
<p>But it was very clear after a point that things had to change. So, I spent a good chunk of time making the required changes.</p>
<p>Also, we decided on, what I feel is, a more appropriate name for the class changing it from ‘Lagrange’ to ‘LagrangesMethod’. Most of the equation derivation techniques in dynamics have the ‘Method’ attached to the founder’s name. It made even more sense for this class because Lagrange’s contributions are numerous so just calling a class ‘Lagrange’ could lead to some ambiguity.</p>
<p>Rewriting the class also helped me hone my Python skills some more. I had come across the keyword arguments construct several times in my preparation for the summer of code but I was a little reluctant to use it. It was probably because it was something that felt so alien to me as I have never seen something like that in my fledgling programming career. But with great explanations on the groups message (linked above), things were made clearer as to how it should be done.</p>
<p>So having rewritten the class, I added the docstrings for it. I’m not too pleased with that part right now, but I’m confident it will get better with more input on the <a href="https://github.com/sympy/sympy/pull/1460#issuecomment-7499946">PR</a> discussion.</p>
<p>So having opened that PR, I thought I would get back to working on the documentation as I had planned. But I ended up going off on a tangent with the discussion that was sparked on <a href="https://github.com/sympy/sympy/pull/1407/files#r1307146">PR 1407</a> which is the stuff that I have added on the energy functions. I spent a good chunk of time going through that and almost completely changing the way the ‘kinetic_energy’ function works.</p>
<p>On that same PR, there was a discussion about how a more readable error should be generated if a user calls the ‘potential_energy’ property for either a Particle or RigidBody without having first set the potential energy using the ‘set_potential_energy’ method. What at the time seemed an innocuous thing to repair became a little interesting challenge for me. Without going into too many more details, I was pleased to have found a relatively simple fix with the ‘callable’ function in Python with the help of the online forum ‘Stack Overflow’.</p>
<p>Having handled most of the recommendations on PR1407, I decided to skip on the documentation for the time being and returned to “complete” what would be the most important part relatied to the “LagrangesMethod” class- the test! While writing the class, I had written a little dummytest to check for the little tihngs but I hadn’t subjected a real dynamical system to the ultimate test (pun intended). I decided to test the well known ‘disc rolling down an inclined plane’ problem. Not to generate any suspense, but I would like to point out that in my proposal I had said that I would only concentrate on unconstrained systems. But Gilbert and I spent a little more time to make the ‘LagrangesMethod’ class more useful and complete. The class should now be able to handle any system i.e. constrained or unconstrained. A lot of the credit goes to Gilbert for helping me through the numerous confusions I had with the implementation of the constrained systems. But back to the test. I picked that system because it has a configuration constraint and we handle configuration constraints a little unconventionally in this class. I was a little anxious about how the results for this would turn out but ti worked like a charm. With the one test that I have written, which I think is a pretty good system to test, it appears that the ‘LagrangesMethod’ class works like a charm.</p>
<p>Anyhow, it’s now time to get some shuteye and more importantly rest the leg as I have been a little cavalier with it in the last couple of days. Until next week.</p>
<p> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/419/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/419/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=419&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-04T15:24:03Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-08-29T08:40:28Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=235</id>
    <link href="http://rhoforsympy.wordpress.com/2012/08/03/week-11-fidelity-of-quantum-states/" rel="alternate" type="text/html"/>
    <title>Week 11:  Fidelity of quantum states</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As discussed in my previous weeks report, this week I started addressing some of the issues in the pending PR’s and all the pending PRs were merged! In addition to getting the pending PRs accepted, I have stated working on 2 other tasks. One of them, that was completed is the feature to compute Fidelity [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=235&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As discussed in my previous weeks report, this week I started addressing some of the issues in the pending PR’s and all the pending PRs were merged!</p>
<p>In addition to getting the pending PRs accepted, I have stated working on 2 other tasks. One of them, that was completed is the feature to compute Fidelity (<a href="https://github.com/sympy/sympy/pull/1459">PR 1459</a>) of quantum states.  Some screen-shots follow (taken from notebook examples available with code base). Information regarding fidelity can be found at these 2 wikis: <a href="http://en.wikipedia.org/wiki/Fidelity_of_quantum_states">1</a>, <a href="http://www.quantiki.org/wiki/Fidelity">2</a></p>
<p>For the next week, my plan is to finish up work on the implementation of Shor’s algorithm available <a href="https://github.com/addisonc/sympy/blob/addison-main/sympy/physics/quantum/shor.py">here</a>.</p>
<p>Here are some examples of using the fidelity function:</p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/08/fidelity_ket.png"><img alt="" class="alignleft size-full wp-image-238" height="382" src="http://rhoforsympy.files.wordpress.com/2012/08/fidelity_ket.png?w=500&amp;h=382" title="fidelity_ket" width="500"/></a></p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/08/fidelity-qubit2.png"><img alt="" class="alignleft size-full wp-image-243" height="369" src="http://rhoforsympy.files.wordpress.com/2012/08/fidelity-qubit2.png?w=500&amp;h=369" title="fidelity-qubit" width="500"/></a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/235/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/235/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=235&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-03T21:19:25Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-08-29T08:40:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=551</id>
    <link href="http://krastanov.wordpress.com/2012/08/02/the-diffgeom-module-status-report/" rel="alternate" type="text/html"/>
    <title>The diffgeom Module – Status Report</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I have written already a few posts about the theory behind the module, the structure of the module, etc. However, besides some rare examples, I have not described in much details how the work progresses. So here is a short summary (check the git log for more details): The basics about coordinate systems and fields [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=551&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have written already a few posts about the theory behind the module, the structure of the module, etc. However, besides some rare examples, I have not described in much details how the work progresses. So here is a short summary (check the git log for more details):</p>
<ul>
<li>The basics about coordinate systems and fields are already in. There are numerous issues with all the simplify-like algorithms inside SymPy, however they are slowly ironed out.</li>
<li>Some simplistic methods for work with integral curves are implemented.</li>
<li>The basics of tensor/wedge products are in. Many simplification routines can be added. Contraction between tensor products and vectors is possible (special case of “lowering of an index”).</li>
<li>Over-a-map, pushforwards and pullbacks are not implemented yet.</li>
<li>Instead of them I have focused my work on derivatives and curvature tensors. For the moment work on these can be done in a limited coordinate-dependent way. A longer post explaining the theory is coming and with it an implementation slightly less dependent on coordinates (working with Christoffel symbols is a pain).</li>
<li>Hodge star operator – still not implemented.</li>
</ul>
<p>An example that I want to implement is a theorem that in irrotational cosmology isotropy implies homogeneity. Doing this will be the first non-trivial example in this module.</p>
<p>A serendipitous detour from the project was my work on the differential equations solver. Aaron had implemented a very thorough solver for single equations. I had tried to extend it in a few simple ways in order to work with systems of ODEs and initial conditions. However this led me to Jordan forms of matrices, generalized eigenvectors and a bunch of interesting details on which I work in my free time (especially this week).</p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=551&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-08-01T22:59:47Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-08-08T11:41:03Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=429</id>
    <link href="http://amakelov.wordpress.com/2012/07/30/google-summer-of-code-2012-week-10/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 10</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of what I’ve been doing during the 10th week of my GSoC. Though I fixed a bug in the SUBGROUPSEARCH function during the week, I ran some more comprehensive tests as I had planned to, and some of them broke the function. If you’re particularly interested, something like that <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/07/30/google-summer-of-code-2012-week-10/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=429&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all,</p>
<p>here’s a brief summary of what I’ve been doing during the 10th week of my GSoC.</p>
<ul>
<li>Though I fixed a bug in the SUBGROUPSEARCH function during the week, I ran some more comprehensive tests as I had planned to, and some of them broke the function. If you’re particularly interested, something like that will work:<br/>
<pre class="brush: python; wrap-lines: false;">In [87]: S = SymmetricGroup(5)
In [88]: prop_fix_3 = lambda x: x(3) == 3
In [89]: %autoreload
In [90]: S.subgroup_search(prop_fix_3)
---------------------------------------------------------------------------
StopIteration                             Traceback (most recent call last)
&lt;ipython-input-90-6b85aa1285b8&gt; in &lt;module&gt;()
----&gt; 1 S.subgroup_search(prop_fix_3)

/home/alexander/workspace/sympy/sympy/combinatorics/perm_groups.py in subgroup_search(self, prop, base, strong_gens, tests, init_subgroup)
2660
2661                 # this function maintains a partial BSGS structure up to position l
-&gt; 2662                 _insert_point_in_base(res, res_base, res_strong_gens, l, new_point, distr_gens=res_distr_gens, basic_orbits=res_basic_orbits, transversals=res_transversals)
2663                 # find the l+1-th basic stabilizer
2664                 new_stab = PermutationGroup(res_distr_gens[l + 1])

/home/alexander/workspace/sympy/sympy/combinatorics/util.py in _insert_point_in_base(group, base, strong_gens, pos, point, distr_gens, basic_orbits, transversals)
423     # baseswap with the partial BSGS structures. Notice that we need only
424     # the orbit and transversal of the new point under the last stabilizer
--&gt; 425     new_base, new_strong_gens = group.baseswap(partial_base, strong_gens, pos, randomized=False, transversals=partial_transversals, basic_orbits=partial_basic_orbits, distr_gens=partial_distr_gens)
426     # amend the basic orbits and transversals
427     stab_pos = PermutationGroup(distr_gens[pos])

/home/alexander/workspace/sympy/sympy/combinatorics/perm_groups.py in baseswap(self, base, strong_gens, pos, randomized, transversals, basic_orbits, distr_gens)
2472             # ruling out member of the basic orbit of base[pos] along the way
2473             while len(current_group.orbit(base[pos])) != size:
-&gt; 2474                 gamma = iter(Gamma).next()
2475                 x = transversals[pos][gamma]
2476                 x_inverse = ~x

StopIteration:

</pre><p/>
<p>The reason is certainly the change of base performed on line 11 in the pseudocode (this is also indicated in my code on my local week6 branch <a href="https://github.com/amakelov/sympy/tree/week6" target="_blank">here</a> ). The use of the function BASESWAP there is what gets us into trouble. It is meant to be applied to  base and a strong generating set relative to it, switch two consecutive base points and change the generating set accordinly.  However, in subgroup_search the goal is to change a base <img alt="(b_1, b_2, \ldots, b_l, \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%2C+%5Cldots%2C+b_k%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, b_2, \ldots, b_l, \ldots, b_k)"/> to <img alt="(b_1, b_2, \ldots, b_l', \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%27%2C+%5Cldots%2C+b_k%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, b_2, \ldots, b_l', \ldots, b_k)"/> where <img alt="b_l'" class="latex" src="http://s0.wp.com/latex.php?latex=b_l%27&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="b_l'"/> is a new point. The book ([1]) mentions that this is done by using BASESWAP but doesn’t provide any details. My strategy is the following: I cut the base so that it becomes <img alt="(b_1, b_2,\ldots, b_l)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_l%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, b_2,\ldots, b_l)"/> and cut the correponding data structures – the strong generators <strong>strong_gens</strong>, the <strong>basic_orbits, </strong> the <strong>transversals</strong>, and the strong generators distributed according to membership in basic stabilizers <strong>distr_gens </strong>(I know, I still have to rename this to strong_gens_distr). Then I append the point <img alt="b_l'" class="latex" src="http://s0.wp.com/latex.php?latex=b_l%27&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="b_l'"/> so that the base is <img alt="(b_1, b_2, \ldots, b_l, b_l')" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%2C+b_l%27%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, b_2, \ldots, b_l, b_l')"/> and calculate an orbit and transversal for $b_l’$ under the stabilzier of <img alt="b_1, b_2, \ldots, b_l" class="latex" src="http://s0.wp.com/latex.php?latex=b_1%2C+b_2%2C+%5Cldots%2C+b_l&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="b_1, b_2, \ldots, b_l"/>. Finally I apply BASESWAP to this new base in order to switch the two rightmost points. Then I go back to <img alt="(b_1, b_2, \ldots, b_l', \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%27%2C+%5Cldots%2C+b_k%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, b_2, \ldots, b_l', \ldots, b_k)"/> by appending what I had cut in the start and calculating a transversal/orbit for <img alt="b_{l+1}" class="latex" src="http://s0.wp.com/latex.php?latex=b_%7Bl%2B1%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="b_{l+1}"/> under the stabilizer just found, that of <img alt="b_1, \ldots, b_l'" class="latex" src="http://s0.wp.com/latex.php?latex=b_1%2C+%5Cldots%2C+b_l%27&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="b_1, \ldots, b_l'"/>. Obviously, the resulting BSGS structures are valid only up to position <img alt="l" class="latex" src="http://s0.wp.com/latex.php?latex=l&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="l"/>, and that’s all the information we can acquire without another application of baseswap or finding another stabilizer ( and in general, finding a stabilizer is a computationally hard task relative to calculating orbits/transversals). The entire purpose of this use of BASESWAP in SUBGROUPSEARCH is to obtain generators for the stabilizer of <img alt="b_1, b_2, \ldots, b_l'" class="latex" src="http://s0.wp.com/latex.php?latex=b_1%2C+b_2%2C+%5Cldots%2C+b_l%27&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="b_1, b_2, \ldots, b_l'"/> and maintain a base/strong generating set that are valid up to a certain position. There are many such base changes performed on the same base throughout the course of the function and something goes wrong along the way. I still have to figure out why and where.</p></li>
<li><strong>The good news</strong>: There is a straightforward alternative to using BASESWAP: maintain a list of generators for each of the basic stabilizers in <img alt="(b_1, b_2, \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_k%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, b_2, \ldots, b_k)"/> and change it accordingly as the base is changed, using the function stabilizer() in sympy/combinatorics/perm_groups.py. For each base change we have to calculate one more stabilizer, so that’s not terrible. It is also sort of suggested in <a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CFIQFjAA&amp;url=http%3A%2F%2Fwww.math.colostate.edu%2F~hulpke%2FCGT%2Fcgtnotes.pdf&amp;ei=u48WUN24M4jf4QS2q4GgBg&amp;usg=AFQjCNHasgOmBkx2AetpE0_-92TFjSyU3A" target="_blank">“Notes on Computational Group Theory”</a> by Alexander Hulpke (page 34). The problem with this approach is that stabilizer() tends to return a group with many generators, and repeated applications keep increasing this number. However, using this <strong>removed the bug from SUBGROUPSEARCH. </strong>As before, more comprehensive tests are on the way : )</li>
<li><strong>Yet another alternative : </strong>we can use the incremental Schreier-Sims algorithm with the new base <img alt="(b_1, \ldots, b_l', \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+%5Cldots%2C+b_l%27%2C+%5Cldots%2C+b_k%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, \ldots, b_l', \ldots, b_k)"/> and the strong generating set for <img alt="(b_1, \ldots, b_l, \ldots, b_k)" class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+%5Cldots%2C+b_l%2C+%5Cldots%2C+b_k%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, \ldots, b_l, \ldots, b_k)"/>. There will likely be redundant generators after that, and it will probably involve more computation than finding a single stabilizer. However, in the long run (since there are many base changes performed) this might perform faster (due to the increasing number of generators that stabilizer() tends to create). I have not tried that approach yet.</li>
<li>Other than that, I had <a href="https://github.com/sympy/sympy/pull/1406" target="_blank">my latest major pull request</a> merged! Thanks a lot to <a href="https://github.com/Krastanov" target="_blank">Stefan</a> and my mentor <a href="https://github.com/wdjoyner" target="_blank">David</a> for the review! That was the largest one so far…</li>
<li>I started reading about some of the applications of subgroup search; subgroup intersection seems to be the easiest to implement, so I’ll probably go for it first.</li>
</ul>
<p>That’s it for now : )</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/429/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/429/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=429&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-30T13:46:30Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-20T14:40:54Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=222</id>
    <link href="http://rhoforsympy.wordpress.com/2012/07/30/week-10-finishing-up-density-matrices/" rel="alternate" type="text/html"/>
    <title>Week 10: Finishing up density matrices!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I largely wrapped up most of the items I had listed in the proposal. The current pending PR addresses and completes most of the major features I had proposed to implement. Some minor issues that are still pending should be addressed during the next week. 1. Adjust qapply() to complete some density based [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=222&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I largely wrapped up most of the items I had listed in the proposal. The current pending PR addresses and completes most of the major features I had proposed to implement. Some minor issues that are still pending should be addressed during the next week.</p>
<p>1. Adjust qapply() to complete some density based operations more gracefully.</p>
<p>2. Relocate the trace.py modules from core to another suggested folder. There have been some discussions on this on the mailing thread, which I plan to re-initiate and get a closure on this week.</p>
<p>Apart from these 2 items, based on some IRC discussions I had with Brian during past week, I have started looking at following 2 items. My plan is to work on the following 2 items during this month.</p>
<p>1. Finish up implementation of Shor’s algorithm currently available here: <a href="https://github.com/addisonc/sympy/blob/addison-main/sympy/physics/quantum/shor.py">git</a></p>
<p>2.  Implement the fidelity and trace distances for density matrices: <a href="http://en.wikipedia.org/wiki/Fidelity_of_quantum_states">Ref</a></p>
<div>Happy Coding!</div>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/222/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/222/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=222&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-30T04:03:39Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-08-29T08:40:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=308</id>
    <link href="http://scolobb.wordpress.com/2012/07/29/the-reflection-about-inference/" rel="alternate" type="text/html"/>
    <title>The Reflection about Inference</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I have been working both on fixing some existing code (including diagram layout) and on better understanding the code that I am going to write next. As far as the fixes are concerned, I have further polished the diagram layout code, including the addition of some pretty printing for DiagramGrid. I didn’t initially [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=308&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I have been working both on fixing some existing code (including <a href="https://github.com/sympy/sympy/pull/1429">diagram layout</a>) and on better understanding the code that I am going to write next.  As far as the fixes are concerned, I have further polished the diagram layout code, including the addition of some pretty printing for <tt>DiagramGrid</tt>.  I didn’t initially expect pretty printing to be useful for this class; however, it turned out that being able to quickly glance at the grid itself was very helpful in certain situations.</p>
<p>Something which makes me very content is that I have finally submitted a fix for the sort key problem for unordered collections.  The essence of the problem is as follows.  With hash randomisation enabled, the order of <tt>Basic.args</tt> changes on every run.  On the other hand, <tt>Basic.sort_key</tt> traverses the arguments in the order in which they are stored; therefore, sort keys are dependent on the actual order of the arguments.  This has given me trouble when working on laying out diagrams, specifically, in handling groups.  The thing is that the group handling code relies on <tt>FiniteSet</tt> (this maybe isn’t the best idea, but that’s a different story, really <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> ): groups are eventually converted to <tt>FiniteSet</tt>‘s of <tt>FiniteSet</tt>‘s.  To assure stable output, the collection of <tt>FiniteSet</tt>‘s is <em>sorted</em>.  However, due to the influence of hash randomisation on sort keys, this sorting would <em>not</em> actually produce the desired consequences.  There was a similar problem in the same block of functionality which had to do with sorting <tt>Diagram</tt>‘s; the issue there was that a <tt>Diagram</tt> stores <tt>Dict</tt>‘s which, being unordered collections, were subject to the same sort key trouble.  Pull request <a href="https://github.com/sympy/sympy/pull/1446">#1446</a> fixes all of these issues and, finally, the diagram drawing code almost always passes all of its tests.</p>
<p>It is worth mentioning that while the fix for the sort key problem was not included in the <a href="https://github.com/sympy/sympy/pull/1429">#1429</a>, I was inclined to classify all problems as related to <tt>FiniteSet.sort_key</tt>.  With the fix in the branch, it turned out that there were some other subtle sorting issues, which I am still fixing.</p>
<p>I have also sent pull request <a href="https://github.com/sympy/sympy/pull/1440">#1440</a> which fixes the pretty printing of morphisms and diagrams, introduced by myself in <a href="https://github.com/sympy/sympy/pull/1338">#1338</a>.  Initially, I would use short Unicode arrows for pretty printing morphisms, but Tom and I have arrived at the conclusion that these arrows look too condensed.  I have then chosen to use long Unicode arrows; it turned out however that Unicode characters which span more than one symbol are not rendered consistently across different machines.  On my computer, the longer arrow would overlap with the next character in line; on Tom’s, it would not.  Aaron has suggested building up arrows out of em dashes and black right-pointing triangles, and this seems to work better, although it still looks ugly with some fonts (e.g., the default font in <em>rxvt-unicode</em>, as reported by Tom).</p>
<p>I have also promised to implement variable-length horizontal arrows.  I have decided to postpone this for now, however, in order to better focus on my GSoC project.  I will keep that task in mind, however, and will most probably return to it in a couple of days.</p>
<p>As for deciding the commutativity of diagrams, I have run into an unexpected conceptual problem, arising from the fundamental difference between diagrams with conclusions and without conclusions.  Before explaining the problem, I will remind the description of these two types of constructions.  A commutative diagram is a collection of morphisms (which usually form a connected directed graph) with the property that composing all morphisms along any two paths between any two objects produces the same composite morphism.  While being quite general, in category theory it is customary to produce statements like “if there are such morphisms, there exist such morphisms, and the diagram is commutative”.  This statement is clearly an implication.  The class <tt>Diagram</tt> is a representation of the second type of statement and contains sets of premise morphisms and conclusion morphisms.  <tt>Diagram</tt> is also conventionally capable of representing simple commutativity if no conclusions are specified.</p>
<p>While I was initially quite comfortable with using <tt>Diagram</tt> for both types of statements, I am really inclined to considering the creation of two separate classes now.  Thus I plan to rename <tt>Diagram</tt> to <tt>Implication</tt> and add a different  <tt>Diagram</tt> which will represent what I used to call “commutative diagram without conclusions”.  That is, <tt>Diagram</tt> will hold only one collection of morphisms.</p>
<p>With this separation, it is immediately clear that, in the context of my model, the question “Is this diagram commutative?” actually incorporates two totally different questions:</p>
<ol>
<li>Is this <tt>Diagram</tt> commutative?</li>
<li>Is this <tt>Implication</tt> true and commutative?</li>
</ol>
<p>Fortunately for me ( <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  ), this newly-discovered separation does not remove the possibility of answering both questions with almost the same algorithm.  I will start with question (1) to further stress the difference between the semantics of diagrams and implications.</p>
<p>Consider a collection of <tt>Diagram</tt>‘s and <tt>Implication</tt>‘s known to be commutative.  (By saying “an <tt>Implication</tt> is commutative” I will abuse the terminology and mean “an <tt>Implication</tt> is true and commutative.”)  We need to decide whether the target <tt>Diagram</tt> is commutative.  The algorithm I will describe is based on <a href="http://en.wikipedia.org/wiki/Backward_chaining">backward chaining</a> and is therefore recursive.  A recursive step consists of two stages: the <em>commutativity</em> stage and the <em>inference</em> stage.  The goal of the commutativity stage is to decide whether the current version of the target <tt>Diagram</tt> is commutative; the goal of the inference stage is to see whether applying one of the <tt>Implication</tt>‘s will make the target <tt>Diagram</tt> commutative.</p>
<p>The commutativity stage starts with taking every morphism of the target <tt>Diagram</tt> and putting each of them into its own commutative subdiagram.  Now, for each commutative subdiagram, the algorithm will pick a subset of morphisms and will then put the subsets together to form another subdiagram.  This subdiagram will then be compared with each of the <tt>Diagram</tt>‘s known to be commutative.  If a match is found, the subdiagram is added to the set of commutative subdiagrams.  Then, all possible “absorptions” among the diagrams are performed (i.e., if subdiagram <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> is a subdiagram of <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/>, the subdiagram <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> is removed from the collection of subdiagrams (for obvious reasons)) and the iteration returns to its start, where it picks subsets of the new subdiagrams.  Since the number of morphisms in the diagram is finite, this process is finite.  If, in the end, the collection of commutative subdiagrams contains only the target diagram, it is deemed commutative.</p>
<p>Note that this alrogithm is very similar to one of the methods of finding all prime implicants of a boolean function (we called that Blake-Poretski algorithm at the university, but I cannot find any references on my Internet).  I have considered the possibilities of directly converting the commutativity stage to a boolean function minimisation problem, but I haven’t found a sufficiently elegant way yet.</p>
<p>The inference stage exactly follows the idea of backward chaining.  For each <tt>Implication</tt> an attempt is made to find the embedding of the premises into the target <tt>Diagram</tt>.  If such an embedding is found, the corresponding conclusions are added to a copy of the target <tt>Diagram</tt> and a recursive examination of the modified <tt>Diagram</tt> is made.  The found embedding of one of the <tt>Implication</tt>‘s plus the added conclusions are propagated down the recursion tree as commutative subdiagrams.  The commutative stages of the following recursive calls will take their commutativity for granted.</p>
<p>If one of these recursive calls returns a positive result, this positive result is propagated up the call stack.  If neither of the recursive calls returned a positive result, or if no embedding of an <tt>Implication</tt> has been found in a certain recursive call, a negative result is returned from this recursive call.</p>
<p>Note that it actually was the inference stage that I described in my original GSoC <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">proposal</a>.</p>
<p>Before showing how to answer question (2), I would like to analyse the algorithm idea I have just presented a little bit.  One can see that the commutativity and inference stages are <em>very</em> different; so different, in fact, that they are almost independent.  Therefore, these two bits of functionality will live in separate pieces of code, and will be later combined to function together.  I will start by defining two internal classes, <tt>_CommutativityStage</tt> and <tt>_InferenceStage</tt> which will host the corresponding functions.  The code that will actually combine the two will either be a global function or a class; this will be clearer later and is not important at the moment.</p>
<p>Question (2) now: “Is the given <tt>Implication</tt> true (and commutative)?”.  In this case, one should start from the premises of the given <tt>Implication</tt> and apply the same strategy as in answering question (1).  Here, however, the terminal criterion is that the target <tt>Diagram</tt> (obtained from the premises of the original <tt>Implication</tt>) is commutative <em>and</em> contains the conclusions of the original <tt>Implication</tt>.</p>
<p>A remark about comparing diagrams is due here: this is nothing but the <a href="http://en.wikipedia.org/wiki/Subgraph_isomorphism_problem">subgraph isomorphism problem</a>.  I have already found <a href="http://scolobb.wordpress.com/feed/software.nju.edu.cn/lingzong/papers/SGI.pdf">this paper</a> (haven’t read it yet), but I’m open to other paper suggestions in this regard <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>EDIT: I have decided to not follow this article and instead focus on a more basic solution.  Should the need occur, I will implement this (apparently) more efficient version.</p>
<p>It is necessary to keep in mind that, besides finding the subgraph isomporphism proper, the code will have to pay attention to morphism properties as well.</p>
<p>Now, the most attentive readers might have already remarked that semantically splitting the class <tt>Diagram</tt> into two will impact diagram drawing.  Yet, the impact will be rather modest, since the drawing code already knows how to deal with something similar to <tt>Implication</tt>; adding explicit support for new <tt>Diagram</tt> is going to require minimal effort.</p>
<p>In this blog post, I recognize that my initial class model was flawed in yet another place.  I try to see this is as a sign of personal progress, though <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/308/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/308/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=308&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-29T19:20:53Z</updated>
    <category term="SymPy"/>
    <category term="backward chaining"/>
    <category term="deciding commutativity"/>
    <category term="diagram layout"/>
    <category term="pretty printing"/>
    <category term="sort key"/>
    <category term="string representation"/>
    <category term="subgraph isomorphism problem"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-08-29T08:40:26Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/?p=305</id>
    <link href="http://angadhsympy.wordpress.com/2012/07/28/gsoc-blog-post/" rel="alternate" type="text/html"/>
    <title>GSoC Blog post</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In the week accompanying and the weeks following the evaluation, I have been working on the implementation of Lagrange’s method to the ‘mechanics’ armory. A lot can be written on the method but  I will spare the details here for now. In terms of progress on the coding itself, I feel like I have made significant [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=305&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the week accompanying and the weeks following the evaluation, I have been working on the implementation of <a href="http://en.wikipedia.org/wiki/Lagrangian_mechanics">Lagrange’s method</a> to the ‘mechanics’ armory. A lot can be written on the method but  I will spare the details here for now. In terms of progress on the coding itself, I feel like I have made significant strides in completing it. I expect to open a pull request in the middle of the upcoming week on Lagrange’s method, once I have some more of the ‘kinks’ ironed out.</p>
<p>I’m simultaneously working on the documentation aspect mentioned on my proposal. Currently, I’m working on adding to the theoretical or ‘text-book’ documentation that mechanics has on sympy docs. Specifically, I’m working on the theoretical material of the helper functions that I have added. Ideally, I will be opening a PR for this at the same time as the PR for Lagrange but that may not happen.</p>
<p>I would also like to apologise for missing out on the blog post last week. There were certain extenuating circumstances with respect to my physical health that I had to deal with coupled with a failure of my internet connection (which my ISP finally resolved on Wednesday). With regards to my health- I have had a troublesome knee problem which needed surgery. I had put off the surgery until the end of August but unfortunately the situation took a turn for the worse in the week following the evaluation. Anyhow it ended with me requiring an ACL reconstruction and meniscus removal. Unexpected but I have tried hard to not let it hamper productivity as best as possible. Nonetheless I apologise for my tardiness.</p>
<p>In terms of the bigger picture with respect to my GSoC goals, it may look like I’m a little behind schedule but since I’m  simultaneously working on two of my goals right now which will get knocked off, in the worst case scenario, in the next two weeks. I will still have a couple more weeks to work on my final goal which is the addition and improvement of the code output functionality of mechanics. At this time, it looks like I will meet my goals and in the worst case scenario, I will be mid way through my last goal.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/305/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/305/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=305&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-28T10:54:09Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-08-29T08:40:28Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/07/23/gsoc-week-9</id>
    <link href="http://catchmrbharath.github.com/programming/2012/07/23/gsoc-week-9" rel="alternate" type="text/html"/>
    <title>Gsoc week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This has been a really unproductive week. I was sick with fever for almost three days and could not spend my time on anything. I spent the next days getting the basic svgfig backend for 2d line plots. There are lots of issues with svgfig, and hence I am of the opinion svgfig should be used only for displaying images on the google app engine ie sympy live. First on the list is no support for 3-D graphs. I think this is ok, because there are not many libraries even in javascript which can do 3D plotting. Also, I am having problems with implementing contour plots and surface plots in svgfig. I am experimenting with a way, which would involve using marching squares algorithm to plot contour plots.</p>

<p>I think I am a little behind my gsoc schedule, and I should speed up things a little in the next few weeks.</p>

<p>So these are the things that I have to address</p>

<ul>
<li>Integration of svgfig with sympy live</li>

<li>Fix the multiple spawning of windows in matplotlib issue.</li>

<li>Fix the plot tests. As of now, the tests do nothing, as the process_series is not called if show is set to False.</li>

<li>I have been toying around with ipython to get isympy notebook and qtconsole working. The problem I am facing is, there are 2 instances of qtconsole created, instead of one, when I run it. I will have to figure out the problem.</li>

<li>Address the issues regarding the adaptive sampling of 2d plots.</li>

<li>Clean up my branch of implicit plotting (This is almost done).</li>

<li>Split the plot function into plot, plot3d, implicit_plot functions.</li>
</ul>

<p>I don’t think I will be able to do all of these by the end of gsoc period. But my priority will be getting the implicit plotting and svgfig backend working and getting my pull requests merged.</p></div>
    </summary>
    <updated>2012-07-23T07:00:00Z</updated>
    <published>2012-07-23T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-19T07:40:29Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://blog.catchmrbharath.in/programming/2012/07/23/gsoc-week-9</id>
    <link href="http://blog.catchmrbharath.in/programming/2012/07/23/gsoc-week-9" rel="alternate" type="text/html"/>
    <title>Gsoc week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This has been a really unproductive week. I was sick with fever for almost three days and could not spend my time on anything. I spent the next days getting the basic svgfig backend for 2d line plots. There are lots of issues with svgfig, and hence I am of the opinion svgfig should be used only for displaying images on the google app engine ie sympy live. First on the list is no support for 3-D graphs. I think this is ok, because there are not many libraries even in javascript which can do 3D plotting. Also, I am having problems with implementing contour plots and surface plots in svgfig. I am experimenting with a way, which would involve using marching squares algorithm to plot contour plots.</p>

<p>I think I am a little behind my gsoc schedule, and I should speed up things a little in the next few weeks.</p>

<p>So these are the things that I have to address</p>

<ul>
<li>Integration of svgfig with sympy live</li>

<li>Fix the multiple spawning of windows in matplotlib issue.</li>

<li>Fix the plot tests. As of now, the tests do nothing, as the process_series is not called if show is set to False.</li>

<li>I have been toying around with ipython to get isympy notebook and qtconsole working. The problem I am facing is, there are 2 instances of qtconsole created, instead of one, when I run it. I will have to figure out the problem.</li>

<li>Address the issues regarding the adaptive sampling of 2d plots.</li>

<li>Clean up my branch of implicit plotting (This is almost done).</li>

<li>Split the plot function into plot, plot3d, implicit_plot functions.</li>
</ul>

<p>I don’t think I will be able to do all of these by the end of gsoc period. But my priority will be getting the implicit plotting and svgfig backend working and getting my pull requests merged.</p></div>
    </summary>
    <updated>2012-07-23T07:00:00Z</updated>
    <published>2012-07-23T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-29T08:40:29Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=391</id>
    <link href="http://amakelov.wordpress.com/2012/07/23/google-summer-of-code-2012-week-9/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of what I’ve been doing for the 9th week of my GSoC. This week saw (and still has to see) some exciting new additions: I. The incremental Schreier-Sims algorithm. This is a version of the Schreier-Sims algorithm that takes a sequence of points and a generating set for a <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/07/23/google-summer-of-code-2012-week-9/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=391&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all, here’s a brief summary of what I’ve been doing for the 9th week of my GSoC.</p>
<p>This week saw (and still has to see) some exciting new additions:</p>
<p><strong><span style="font-size: large;">I. The incremental Schreier-Sims algorithm.</span></strong></p>
<p>This is a version of the Schreier-Sims algorithm that takes a sequence of points <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="B"/> and a generating set <img alt="S" class="latex" src="http://s0.wp.com/latex.php?latex=S&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="S"/> for a group <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/> as input, and extends <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="B"/> to a base and <img alt="S" class="latex" src="http://s0.wp.com/latex.php?latex=S&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="S"/> to a strong generating set relative to it. It is described in [1], pp.87-93. The default value of <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="B"/> is <img alt="[]" class="latex" src="http://s0.wp.com/latex.php?latex=%5B%5D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="[]"/>, and that of <img alt="S" class="latex" src="http://s0.wp.com/latex.php?latex=S&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="S"/> is <img alt="\text{G.generators}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctext%7BG.generators%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\text{G.generators}"/>. Here’s an example:</p>
<p/><pre class="brush: python;">In [41]: S = SymmetricGroup(5)
In [42]: base = [3, 4]
In [43]: gens = S.generators
In [44]: x = S.schreier_sims_incremental(base, gens)
In [45]: x
Out[45]:
([3, 4, 0, 1],
[Permutation([1, 2, 3, 4, 0]),
Permutation([1, 0, 2, 3, 4]),
Permutation([4, 0, 1, 3, 2]),
Permutation([0, 2, 1, 3, 4])])
In [46]: from sympy.combinatorics.util import _verify_bsgs
In [47]: _verify_bsgs(S, x[0], x[1])
Out[47]: True
</pre><p/>
<p>The current implementation stores the transversals for the basic orbits explicitly (the alternative is to use Schreier vectors to describe the orbits – this saves a lot of space, but requires more time in order to compute transversal elements whenever they are needed. This feature is still to be implemented, and this probably won’t happen in this GSoC). The current implementation of the Schreier-Sims algorithm on the master branch uses Jerrum’s filter (for more details and comparisons of the incremental version and the one using Jerrum’s filter, go <a href="http://www.m8j.net/data/List/Files-118/Documentation.pdf" target="_blank">here</a>) as an optimization, and also stores the transversals explicitly. The incremental version seems to be asymptotically faster though. Here’s several comparisons of the current version on the master branch and the incremental one which can be found on a local branch of mine which is somewhat inadequately called <a href="https://github.com/amakelov/sympy/tree/week6" target="_blank">week6</a>):</p>
<p>For symmetric groups:</p>
<p/><pre class="brush: python;">In [50]: groups = []
In [51]: for i in range(20, 30):
....:     groups.append(SymmetricGroup(i))
....:
In [52]: for group in groups:
....:     %timeit -r1 -n1 group.schreier_sims()
....:
1 loops, best of 1: 590 ms per loop
1 loops, best of 1: 719 ms per loop
1 loops, best of 1: 981 ms per loop
1 loops, best of 1: 1.35 s per loop
1 loops, best of 1: 1.66 s per loop
1 loops, best of 1: 2.19 s per loop
1 loops, best of 1: 2.74 s per loop
1 loops, best of 1: 3.37 s per loop
1 loops, best of 1: 4.28 s per loop
1 loops, best of 1: 5.37 s per loop
In [53]: for group in groups:
....:     %timeit -r1 -n1 group.schreier_sims_incremental()
....:
1 loops, best of 1: 612 ms per loop
1 loops, best of 1: 737 ms per loop
1 loops, best of 1: 927 ms per loop
1 loops, best of 1: 1.15 s per loop
1 loops, best of 1: 1.41 s per loop
1 loops, best of 1: 1.72 s per loop
1 loops, best of 1: 2.1 s per loop
1 loops, best of 1: 2.52 s per loop
1 loops, best of 1: 3.02 s per loop
1 loops, best of 1: 3.58 s per loop
</pre><p/>
<p>For alternating groups:</p>
<p/><pre class="brush: python;">In [54]: groups = []
In [55]: for i in range(20, 40, 2):
....:     groups.append(AlternatingGroup(i))
....:
In [56]: for group in groups:
%timeit -r1 -n1 group.schreier_sims()
....:
1 loops, best of 1: 613 ms per loop
1 loops, best of 1: 1.03 s per loop
1 loops, best of 1: 1.77 s per loop
1 loops, best of 1: 2.65 s per loop
1 loops, best of 1: 3.51 s per loop
1 loops, best of 1: 5.31 s per loop
1 loops, best of 1: 7.71 s per loop
1 loops, best of 1: 11.1 s per loop
1 loops, best of 1: 15.3 s per loop
1 loops, best of 1: 19.1 s per loop
In [57]: for group in groups:
%timeit -r1 -n1 group.schreier_sims_incremental()
....:
1 loops, best of 1: 504 ms per loop
1 loops, best of 1: 787 ms per loop
1 loops, best of 1: 1.23 s per loop
1 loops, best of 1: 1.9 s per loop
1 loops, best of 1: 2.8 s per loop
1 loops, best of 1: 3.99 s per loop
1 loops, best of 1: 5.48 s per loop
1 loops, best of 1: 7.45 s per loop
1 loops, best of 1: 10 s per loop
1 loops, best of 1: 13.2 s per loop
</pre><p/>
<p>And for some dihedral groups of large degree (to illustrate the case of small-base groups of large degrees):</p>
<p/><pre class="brush: python;">In [58]: groups = []
In [59]: for i in range(100, 2000, 200):
....:     groups.append(DihedralGroup(i))
....:
In [60]: for group in groups:
%timeit -r1 -n1 group.schreier_sims()
....:
1 loops, best of 1: 29.6 ms per loop
1 loops, best of 1: 108 ms per loop
1 loops, best of 1: 278 ms per loop
1 loops, best of 1: 527 ms per loop
1 loops, best of 1: 861 ms per loop
1 loops, best of 1: 1.29 s per loop
1 loops, best of 1: 1.83 s per loop
1 loops, best of 1: 2.39 s per loop
1 loops, best of 1: 3.06 s per loop
1 loops, best of 1: 3.83 s per loop
In [61]: for group in groups:
%timeit -r1 -n1 group.schreier_sims_incremental()
....:
1 loops, best of 1: 20.8 ms per loop
1 loops, best of 1: 52.8 ms per loop
1 loops, best of 1: 121 ms per loop
1 loops, best of 1: 223 ms per loop
1 loops, best of 1: 365 ms per loop
1 loops, best of 1: 548 ms per loop
1 loops, best of 1: 766 ms per loop
1 loops, best of 1: 1 s per loop
1 loops, best of 1: 1.25 s per loop
1 loops, best of 1: 1.51 s per loop
</pre><p/>
<p>In addition to this algorithm I implemented a related function _remove_gens in sympy.combinatorics.util which removes redundant generators from a strong generating set (since there tend to be some redundant ones after schreier_sims_incremental() is run):</p>
<p/><pre class="brush: python;">In [68]: from sympy.combinatorics.util import _remove_gens
In [69]: S = SymmetricGroup(6)
In [70]: base, strong_gens = S.schreier_sims_incremental()
In [71]: strong_gens
Out[71]:
[Permutation([1, 2, 3, 4, 5, 0]),
Permutation([1, 0, 2, 3, 4, 5]),
Permutation([0, 5, 1, 2, 3, 4]),
Permutation([0, 1, 2, 3, 5, 4]),
Permutation([0, 1, 2, 4, 3, 5]),
Permutation([0, 1, 3, 2, 4, 5]),
Permutation([0, 1, 2, 5, 4, 3]),
Permutation([0, 1, 5, 3, 4, 2])]
In [72]: new_gens = _remove_gens(base, strong_gens)
In [73]: new_gens
Out[73]:
[Permutation([1, 0, 2, 3, 4, 5]),
Permutation([0, 5, 1, 2, 3, 4]),
Permutation([0, 1, 2, 4, 3, 5]),
Permutation([0, 1, 2, 5, 4, 3]),
Permutation([0, 1, 5, 3, 4, 2])]
In [74]: _verify_bsgs(S, base, new_gens)
Out[74]: True
</pre><p/>
<p><strong><span style="font-size: large;">II. Subgroup search.</span></strong><br/>
This is an algorithm used to find the subgroup <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="K"/> of a given group <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/> of all elements of <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/> satisfying a given property <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="P"/>. It is described in [1], pp.114-118 and is <strong>quite sophisticated </strong>(the book is right when it says “The function SUBGROUPSEARCH is rather complicated and will require careful study by the reader.”). On the other hand, it is one of the most interesting additions to the groups module to date since it can do so much. The idea is to do a depth-first search over all group elements and prune large parts of the search tree based on several different criteria. It’s currently about 150 lines of code and works in many cases but still <strong>needs debugging</strong>. It can currently do some wonderful stuff like this:<br/>
</p><pre class="brush: python;">In [77]: S = SymmetricGroup(6)
In [78]: prop = lambda g: g.is_even
In [79]: G = S.subgroup_search(prop)
In [80]: G == AlternatingGroup(6)
Out[80]: True

</pre><p/>
<p>to find the alternating group as a subgroup of the full symmetric group by the defining property that all its elements are the even permutations, or this:</p>
<p/><pre class="brush: python;">In [81]: D = DihedralGroup(10)
In [82]: prop_true = lambda g: True
In [83]: G = D.subgroup_search(prop_true)
In [84]: G == D
Out[84]: True
</pre><p/>
<p>to find the dihedral group <img alt="D_{10}" class="latex" src="http://s0.wp.com/latex.php?latex=D_%7B10%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="D_{10}"/> as a subgroup of itself using the trivial property that always returns <img alt="\text{True}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctext%7BTrue%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\text{True}"/>; or this:</p>
<p/><pre class="brush: python;">In [106]: A = AlternatingGroup(4)
In [107]: G = A.subgroup_search(prop_fix_23)
In [108]: G == A.stabilizer(2).stabilizer(3)
Out[108]: True
</pre><p/>
<p>to find the pointwise stabilizer of <img alt="\{2,3\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5C%7B2%2C3%5C%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\{2,3\}"/>. And so on and so on. What is more wonderful is that you can specify the base used for <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/> in advance, and the generating set returned for <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="K"/> will be a strong generating set with respect to that base!</p>
<p/><pre class="brush: python;">In [119]: A = AlternatingGroup(5)
In [120]: base, strong_gens = A.schreier_sims_incremental()
In [121]: G = A.subgroup_search(prop_fix_1, base=base, strong_gens=strong_gens)
In [122]: G == A.stabilizer(1)
Out[122]: True
In [123]: _verify_bsgs(G, base, G.generators)
Out[123]: True
</pre><p/>
<p>The bad news is that the function breaks somewhere. For example:</p>
<p/><pre class="brush: python;">In [125]: S = SymmetricGroup(7)
In [126]: prop_true = lambda g: True
In [127]: G = S.subgroup_search(prop_true)
In [128]: G == S
Out[128]: False
</pre><p/>
<p>This needs some really careful debugging, but overall it looks promising since it works in so many cases – so the bug is hopefully small : ).</p>
<p>So, that’s it for now!</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/391/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/391/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=391&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-23T00:21:19Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-20T14:40:54Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=464</id>
    <link href="http://krastanov.wordpress.com/2012/07/22/form-fields-and-vector-fields-do-not-form-a-vector-space/" rel="alternate" type="text/html"/>
    <title>Form Fields and Vector Fields do not form a Vector Space</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Form fields or vector fields over a manifold (as opposed to forms and vectors) do not form a vector space. They form a module. The difference is that the scalars of a vector space form an algebraic field while the scalars of a module form a ring. For us humans (as opposed to “those higher [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=464&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://en.wikipedia.org/wiki/Tautological_one-form" target="_blank">Form fields</a> or <a href="http://en.wikipedia.org/wiki/Tangent_bundle#Canonical_vector_field_on_tangent_bundle" target="_blank">vector fields</a> over a <a href="http://en.wikipedia.org/wiki/Manifold" target="_blank">manifold</a> (as opposed to forms and vectors) do not form a <a href="http://en.wikipedia.org/wiki/Vector_space" target="_blank">vector space</a>. They form a <a href="http://en.wikipedia.org/wiki/Module_%28mathematics%29" target="_blank">module</a>.</p>
<p>The difference is that the scalars of a vector space form an algebraic <a href="http://en.wikipedia.org/wiki/Field_%28mathematics%29" target="_blank">field</a> while the scalars of a module form a <a href="http://en.wikipedia.org/wiki/Ring_%28mathematics%29" target="_blank">ring</a>. For us humans (as opposed to “those higher beings that I do not understand (a.k.a. mathematicians)”) this means that the scalars in the vector field can divide each other while the scalars in the spaces spanned by fields (i.e. a module) can not.</p>
<p>And just so we all can become even more confused: This has nothing to do with the fact that the “components” of each form field or vector field in certain basis are functions, i.e. themselves elements of a vector space with infinite number of dimensions.</p>
<p>The first way to see this module-not-a-vector-space characteristic is by showing directly that the scalars that form the “coordinate components” of a vector field can not always be divided, even if they are <strong>not</strong> identically zero. Take, for instance the, manifold <img alt="\mathbb{R}^2" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D%5E2&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\mathbb{R}^2"/> with the polar coordinate system and look at the vector <img alt="\begin{bmatrix} r \\ r\cos(\theta) \end{bmatrix}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbegin%7Bbmatrix%7D+r+%5C%5C+r%5Ccos%28%5Ctheta%29+%5Cend%7Bbmatrix%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\begin{bmatrix} r \\ r\cos(\theta) \end{bmatrix}"/>. The “scalars” are <img alt="r" class="latex" src="http://s0.wp.com/latex.php?latex=r&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="r"/> and <img alt="r\cos(\theta)" class="latex" src="http://s0.wp.com/latex.php?latex=r%5Ccos%28%5Ctheta%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="r\cos(\theta)"/>. Obviously we can not divide the former by the latter because it will be undefined at <img alt="\theta=\frac{\pi}{2}+n\pi" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctheta%3D%5Cfrac%7B%5Cpi%7D%7B2%7D%2Bn%5Cpi&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\theta=\frac{\pi}{2}+n\pi"/>.</p>
<p>Another, more amusing way to show that the space spanned by these fields is not a vector space is to explicitly show that a property expected from vector spaces is not fulfilled. Namely, that in <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="n"/> dimensions an <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="n"/>-uple of linearly independent elements forms a basis. However, in the case of fields over a manifold we can easily have a number of fields that are linearly independent over the manifold as a whole, and are at the same time linearly dependent (or simply equal to zero) on a subdomain. Hence, we have an <img alt="n" class="latex" src="http://s0.wp.com/latex.php?latex=n&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="n"/>-uple of linearly independent fields that can not be linearly combined to represent another arbitrary field.</p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=464&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-22T15:11:31Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-08-08T11:41:03Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=475</id>
    <link href="http://krastanov.wordpress.com/2012/07/22/objects-implemented-in-the-diffgeom-module/" rel="alternate" type="text/html"/>
    <title>Objects Implemented in the diffgeom Module</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This post provides a summary of all mathematical types of expression implemented in the diffgeom module. I have chosen not to mention any python classes or other implementation details at all. This table shows how an object expected by the user to be of certain mathematical type operates on another object. If the expectations of [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=475&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This post provides a summary of all mathematical types of expression implemented in the diffgeom module. I have chosen not to mention any python classes or other implementation details at all. This table shows how an object expected by the user to be of certain mathematical type operates on another object. If the expectations of a user familiar with differential geometry do not meet the actual implementation, this is a bug in the implementation.</p>
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody>
<tr>
<th colspan="2" rowspan="2"/>
<th colspan="5">The Argument</th>
</tr>
<tr>
<td>point</td>
<td>scalar field</td>
<td>vector field</td>
<td>1-form field</td>
<td>higher form field</td>
</tr>
<tr>
<th rowspan="10">The Operator</th>
<td>scalar field</td>
<td>scalar</td>
<td>NA</td>
<td>NA</td>
<td>NA</td>
<td>NA</td>
</tr>
<tr>
<td>vector field</td>
<td>NA</td>
<td>scalar field</td>
<td>NA</td>
<td>NA</td>
<td>NA</td>
</tr>
<tr>
<td>1-form field (linear combination of differentials of scalar fields)</td>
<td>NA</td>
<td>NA</td>
<td>scalar field</td>
<td>NA</td>
<td>NA</td>
</tr>
<tr>
<td>higher form field (linear combination of tensor products of lower form fields)</td>
<td>NA</td>
<td>NA</td>
<td>it takes a tuple of vector fields and returns a scalar field</td>
<td>NA</td>
<td>NA</td>
</tr>
<tr>
<td>commutator of vector fields</td>
<td colspan="5">Behaves as a regular vector field.</td>
</tr>
<tr>
<td>Lie derivative (the argument is “called” on construction time)</td>
<td>NA</td>
<td colspan="4">You specify the object to be derived on creation. The Lie derivative of any object is an object of the same type.</td>
</tr>
</tbody>
</table>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=475&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-22T15:05:08Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-08-08T11:41:03Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=524</id>
    <link href="http://krastanov.wordpress.com/2012/07/22/the-schwarzschild-solution/" rel="alternate" type="text/html"/>
    <title>The Schwarzschild Solution</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">An “easy” solution to the Einstein equation (in free space) is the spherically symmetric Schwarzschild solution. The pdf bellow shows how one can use the diffgeom module in order to get the equations describing this solution. One starts with the most general spherically symmetrical metric and by using Einstein equation deduces the equations that must [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=524&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>An “easy” solution to the Einstein equation (in free space) is the spherically symmetric Schwarzschild solution. The pdf bellow shows how one can use the diffgeom module in order to get the equations describing this solution.</p>
<p>One starts with the most general spherically symmetrical metric and by using Einstein equation <img alt="R_{\mu \nu}=0" class="latex" src="http://s0.wp.com/latex.php?latex=R_%7B%5Cmu+%5Cnu%7D%3D0&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="R_{\mu \nu}=0"/> deduces the equations that must be fulfilled by the components of the metric (in the chosen basis).</p>
<p><a href="http://krastanov.files.wordpress.com/2012/07/schwarzschild.pdf">schwarzschild.pdf</a></p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=524&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-22T13:36:44Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="general relativity"/>
    <category term="gsoc"/>
    <category term="Schwarzschild"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-08-08T11:41:03Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=285</id>
    <link href="http://scolobb.wordpress.com/2012/07/22/the-polish-and-further-planning/" rel="alternate" type="text/html"/>
    <title>The Polish and Further Planning</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I am currently working on getting my two pull requests into master. Right now, the efforts have been concentrated on the first pull request, concerned with diagram layout. Among the minor fixes, there came a number of more important changes, which I am going to shortly describe in this post, before I get to my [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=285&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I am currently working on getting my two pull requests into <tt>master</tt>.  Right now, the efforts have been concentrated on the first pull request, concerned with diagram layout.  Among the minor fixes, there came a number of more important changes, which I am going to shortly describe in this post, before I get to my further plans.</p>
<p>Among the changes worth mentioning are some updates to the choice of internal data structures of <tt>DiagramGrid</tt>.  Previously, <tt>FiniteSet</tt> was used to store any sets.  Following my mentor’s suggestion, though, I have refactored the code to only use <tt>FiniteSet</tt> when something needs to be stored in <tt>Basic.args</tt>.  On all other occasions, the built-ins <tt>set</tt> and <tt>frozenset</tt> are used, depending on whether a mutable set or an immutable hashable container is needed.</p>
<p>The other change bearing no fundamental importance but still worth mentioning is the transition to storing undirected edges as two-element <tt>frozenset</tt>‘s.  Previously, edges were stored as two-element tuples which caused a bit of hassle in what concerned recognizing the equality of <tt>(A, B)</tt> and <tt>(B, A)</tt>.  The choice of <tt>frozenset</tt> has brought in more elegant code.  In terms of performance, I do not think that this transition has had a really important impact, since I didn’t really keep performance in mind when writing other parts of the code anyway.  (I am mainly referring to the construction of the skeleton of the diagram and splitting it into triangles.)will l</p>
<p>Among more significant improvements, I will list the support for disconnected diagrams, one-object diagrams, and, the pinnacle, graceful handling of the situations when growing a pseudopod fails.  Before you start thinking abut who the hell would need disconnected or one-object diagrams, I will remind/introduce the process and the necessity of pseudopods in diagram layout (Hey, that did sound like rubbish, did it <img alt=":-D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/>  )</p>
<p>The layout algorithm essentially considers the slightly augmented underlying undirected graph of the diagram and splits it into as many triangles as it can.  Then it tries to sort those triangles according to some rather heuristic (i.e., arbitrary) priority metric, picks them one by one, in this order, and tries to place them on the plane, edge to edge.  The strategy being pure greedy, at some point in time it may happen that there are still triangles, but there are no free edges on the plane to which they could be attached.  In this situation, the algorithm attempts to attach one of the remaining triangles by a vertex, that is, it tries to find such a vertex already in the plane, which also belongs to one of the remaining triangles.  Finally, the algorithm adds an edge of the found triangle to the plane and restarts the process of picking triangles and attaching them by edges.  This new added edge is referred to as <em>pseudopod</em>.</p>
<p>Now, what happens when a pseudopod cannot be grown?  Initially, I was under the impression that it is rather hard to construct such a diagram.  However, it turned out to be rather easy.  Consider the set of objects <img alt="\{A\}\cup\{A_i\mid 1\leq i\leq 10\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5C%7BA%5C%7D%5Ccup%5C%7BA_i%5Cmid+1%5Cleq+i%5Cleq+10%5C%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\{A\}\cup\{A_i\mid 1\leq i\leq 10\}"/> and the set of morphisms <img alt="\{f_i:A\rightarrow A_i\mid 1\leq i\leq 10\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5C%7Bf_i%3AA%5Crightarrow+A_i%5Cmid+1%5Cleq+i%5Cleq+10%5C%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\{f_i:A\rightarrow A_i\mid 1\leq i\leq 10\}"/>.  <tt>DiagramGrid</tt> will lay out the first 8 of the <img alt="A_i" class="latex" src="http://s0.wp.com/latex.php?latex=A_i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A_i"/> quite all right: as one would expect, <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> gets to be the center of a 3×3 square, whose borders consist of the 8 <img alt="A_i" class="latex" src="http://s0.wp.com/latex.php?latex=A_i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A_i"/>‘s.  However, the last two <img alt="A_i" class="latex" src="http://s0.wp.com/latex.php?latex=A_i&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A_i"/>‘s condition the situation when there are triangles left, but no pseudopods can be grown.</p>
<p>In an attempt to address this problem, I have considered various possible strategies, and have chosen the following one.  When no pseudopod can be grown, take the set of all objects that have not yet been placed and construct from them a subdiagram of the diagram to plot.  Lay that diagram out recursively and then attach the resulting grid to the initial diagram.</p>
<p>One important remark is due here.  This strategy is a “oh, gosh, things have gone very bad” strategy, in that is is applied only when all other approaches have failed and in that it does not really guarantee the nice look of the final diagram.  However, it does provide a graceful handling of the specific situations and I do believe that the output is still going to look acceptable.</p>
<p>While the idea itself is rather simple, it is necessary to pay attention to what subtleties it actually brings around.  First of all, the subdiagram constructed from the remaining objects is <em>not</em> necessarily connected.  That’s easy to see even in the example I have shown in the previous paragraphs.  Furthermore, the constructed diagrams do not necessarily have non-loop morphisms!  (By abuse of graph theoretic terminology, I call a morphism with the same domain and codomain a <em>loop</em> morphism).  That is, addressing pseudopod extension failures brings about the necessity to handle disconnected diagrams and one-object diagrams.</p>
<p>There is not much to say about the support of disconnected diagrams and one-object diagrams, but that I have implemented support for these two cases as well.  The latter case is handled trivially, while the former case employs standard depth-first search of the underlying undirected graph and separate layout of the connected components.  The components are currently dumbly positioned side by side, in a line, and a comment in the source code evokes the possibility of using groups to get a different layout.  I’m open to suggestions of further improvements in this area, though.</p>
<p>It’s time to speak about my plans.  I have spent more than initially expected on handling pseudopod growth failures.  This means that there are still some suggestions by my mentor waiting to get fixed (I haven’t read them yet; hopefully, nothing fundamental there <img alt=":-D" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif"/>  ). Further, I absolutely must fix the problem with the sort key of <tt>FiniteSet</tt>.  I have been talking about fixing it for about two weeks already, and it doesn’t seem to require that much effort.  It is essential that this fix be done, though, since, without it, tests in the <tt>categories</tt> module fail half of the time.  Finally, I will fix how morphisms are currently pretty printed by removing the use of wide Unicode symbols.  These activities will not hopefully take me more than 2 days, at the very most.</p>
<p>Next comes the other exciting part of my project, deciding the commutativity of diagrams.  I have provided the general idea of the algorithm in my <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">proposal</a>.  Given that I am currently about two weeks behind the schedule in my proposal, and that I will still need to spend time on getting the code in the pull requests up to snuff, I’m really feeling very wary about planning my own time.  However, since deciding the algorithm for deciding the commutativity of diagrams I describe in the proposals <em>seems</em> to be rather straightforward, I think I will have at least a basic working version of it two weeks from now, that is, by August 5.  Allowing another week as buffer time and yet another week for merging the corresponding pull request, I do expect to be in time for the firm pencils-down date.</p>
<p>One last remark to make is that after the official end of the GSoC timeframe, I will still have at least one week of rather spare time (I actually expect to have about 2.5 to 3 weeks of time), which means that I will bring the code to a sufficiently polished state despite any possible lags.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/285/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/285/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=285&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-21T23:21:49Z</updated>
    <category term="SymPy"/>
    <category term="automatic plotting"/>
    <category term="category theory"/>
    <category term="deciding commutativity"/>
    <category term="diagram layout"/>
    <category term="grid layout"/>
    <category term="internal data structures"/>
    <category term="layout algorithm"/>
    <category term="timeline"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-08-29T08:40:26Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=208</id>
    <link href="http://rhoforsympy.wordpress.com/2012/07/18/some-examples-for-latest-pull-request/" rel="alternate" type="text/html"/>
    <title>Some examples for latest pull request</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In the latest PR  2 features have been implemented and relevant examples were added to notebook.   Some examples for the first feature, can be found at this post.  Some updates and test cases were added after I had discussed it there. The second is a minor change to qapply() as seen in  the following 2 [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=208&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the latest <a href="https://github.com/sympy/sympy/pull/1428" target="_blank" title="PR 1428">PR</a>  2 features have been implemented and relevant examples were added to notebook.   Some examples for the first feature, can be found at this <a href="http://rhoforsympy.wordpress.com/2012/07/09/week-7-tr-operations-on-qubits/">post</a>.  Some updates and test cases were added after I had discussed it there.</p>
<p>The second is a minor change to qapply() as seen in  the following 2 examples:</p>
<p> </p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/07/qapply1.jpg"><img alt="" class="alignleft size-full wp-image-209" height="285" src="http://rhoforsympy.files.wordpress.com/2012/07/qapply1.jpg?w=500&amp;h=285" title="qapply1" width="500"/></a></p>
<p> </p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/07/qapply2.jpg"><img alt="" class="alignleft size-full wp-image-210" height="222" src="http://rhoforsympy.files.wordpress.com/2012/07/qapply2.jpg?w=500&amp;h=222" title="qapply2" width="500"/></a></p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>Happy Coding!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/208/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/208/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=208&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-18T16:25:51Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-08-29T08:40:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=259</id>
    <link href="http://scolobb.wordpress.com/2012/07/17/the-almost-there-chapter-1/" rel="alternate" type="text/html"/>
    <title>The Almost There (Chapter 1)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I have come ridiculously close to finalising the second major part of my GSoC work: diagram plotting. Before submitting the two pull requests, I only have to add proper docstrings to a couple classes and to integrate the plotting with sympy.printing.preview for easier use. (Well, there also is a FiniteSet-related issue, but I [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=259&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I have come ridiculously close to finalising the second major part of my GSoC work: diagram plotting.  Before submitting the two pull requests, I only have to add proper docstrings to a couple classes and to integrate the plotting with <tt>sympy.printing.preview</tt> for easier use.  (Well, there also is a <tt>FiniteSet</tt>-related issue, but I hope to be able to fix it more or less swiftly.)  The main functionality is ready, however, and that gives me hopes <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>In terms of material progress, this week has been rather unimpressive: I haven’t written that many lines of code and that which I have written has introduced seemingly inessential changes to the aspect of the diagrams.  Nevertheless, I think this week can be marked as one of the most thought-intensive.</p>
<p>In the beginning of this week I have extended the drawing of curved morphisms to take into account the situations when there are multiple morphisms between the same two pair of objects.  This allows to automatically typeset diagrams such as Diagram 1.<br/>
</p><div class="wp-caption alignright" id="attachment_260" style="width: 210px;"><a href="http://scolobb.files.wordpress.com/2012/07/multiple-curved.png"><img alt="A diagram with multiple curved morphisms." class="size-medium wp-image-260" height="292" src="http://scolobb.files.wordpress.com/2012/07/multiple-curved.png?w=300&amp;h=292" title="Diagram 1" width="300"/></a><p class="wp-caption-text">Diagram 1. Multiple curved morphisms.</p></div><p/>
<p>The next two days I have been smashing my head against the simplest approach to the problem of positioning morphisms labels such that they don’t get intersected by morphisms.  The upsetting part is that, despite the amount of thinking I have done and the amount of code and comments I have written, the actual output hasn’t really got much better.  (It may be considered to be a success, though, that it hasn’t got much worse either <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  ).  Consider Diagram 2.  No special care about the position of the labels is taken.<br/>
</p><div class="wp-caption alignright" id="attachment_264" style="width: 168px;"><a href="http://scolobb.files.wordpress.com/2012/07/triangle-simple.png"><img alt="Diagram 2.  Arbitrary placement of morphism labels." class="size-full wp-image-264" src="http://scolobb.files.wordpress.com/2012/07/triangle-simple.png?w=549" title="Diagram 2"/></a><p class="wp-caption-text">Diagram 2.  Arbitrary placement of morphism labels.</p></div><p/>
<p>Now consider Diagram 3; notice that the labels are now on the outer sides of the diagram.  The trick basically (very basically) consists in detecting those morphisms which form the outer edges of the diagram and then placing their labels on the proper side.  While for vertical and horizontal morphisms the procedure is pretty straightforward, for diagonal morphisms I resolved to apply some basic ideas from analytic geometry and yes, I even do floating-point computations (although I of course try to do them as little as possible).  Nevertheless, the approach I have implemented feels very far from perfect.  I hope though that I have managed to achieve some balance between code that works sufficiently fast and well and code that is intelligible.  Note that the positioning of the labels of the morphsisms which are in the bowels of the visual structure of the diagram remains pretty arbitrary, which may sometimes get ugly.<br/>
</p><div class="wp-caption alignright" id="attachment_267" style="width: 154px;"><a href="http://scolobb.files.wordpress.com/2012/07/triangle-positioned.png"><img alt="Diagram 3.  Explicit positioning of labels of outer morphisms." class="size-full wp-image-267" src="http://scolobb.files.wordpress.com/2012/07/triangle-positioned.png?w=549" title="Diagram 3"/></a><p class="wp-caption-text">Diagram 3.  Explicit positioning of labels of outer morphisms.</p></div><p/>
<p>The next feature I have added is the possibility to draw “loop” morphisms, i.e., morphisms which have the same domains and codomains.  While proper layout of such morphisms is not guaranteed for very crowded diagrams, this functionality is of some use, as can be seen in Diagram 4.<br/>
</p><div class="wp-caption alignright" id="attachment_272" style="width: 230px;"><a href="http://scolobb.files.wordpress.com/2012/07/many-loops.png"><img alt="Diagram 4. Typesetting of loop morphisms." class="size-medium wp-image-272" height="255" src="http://scolobb.files.wordpress.com/2012/07/many-loops.png?w=300&amp;h=255" title="Diagram 4" width="300"/></a><p class="wp-caption-text">Diagram 4. Typesetting of loop morphisms.</p></div><p/>
<p>Finally, I have implemented the support for custom arrow formatters.  Arrow formatters are associated to morphisms properties.  Whenever a morphism with some properties is typeset, after the necessary thinking has been carried out, the resulting data is passed to the formatter.  The formatter is free to modify anything it wants in order to influence the appearance of the arrow.  A common usage is shown in Diagram 5.  This effect was achieved with a two-line formatter.<br/>
</p><div class="wp-caption alignright" id="attachment_275" style="width: 210px;"><a href="http://scolobb.files.wordpress.com/2012/07/formatter.png"><img alt="Diagram 5. Use of formatters" class="size-full wp-image-275" src="http://scolobb.files.wordpress.com/2012/07/formatter.png?w=549" title="Diagram 5"/></a><p class="wp-caption-text">Diagram 5. Use of formatters</p></div><p/>
<p>I must confess that dealing with hash randomisation-related issues takes up much more time that I always expect.  I have been constantly getting back to certain bits of my code and adding new and new invocations of <tt>sorted</tt> to assure stable output.  Working on this, as well as on some obscure tuning of small details of the diagram is actually what has consumed the bulk of my time this week.  The visual input of such modifications is usually minimal; yet, I do believe they bear a rather important role.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/259/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/259/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=259&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-16T21:32:25Z</updated>
    <category term="SymPy"/>
    <category term="automatic plotting"/>
    <category term="category theory"/>
    <category term="curved arrows"/>
    <category term="diagram drawing"/>
    <category term="label positioning"/>
    <category term="xy-pic"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-08-29T08:40:26Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=197</id>
    <link href="http://rhoforsympy.wordpress.com/2012/07/16/week-8-trace-implementation-contd-and-more-density-ops/" rel="alternate" type="text/html"/>
    <title>Week 8: Trace implementation contd. and more Density ops</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week was primarily spent on 2 tasks.  Getting some of the issues addressed in the currently pending PR 1396. Apart from work on this I have spent some testing some changes I had to make to implement the operations needed when Unitary operations are applied to Density operators. Some use cases I am currently [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=197&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week was primarily spent on 2 tasks.  Getting some of the issues addressed in the currently pending <a href="https://github.com/sympy/sympy/pull/1396/">PR 1396</a>. Apart from work on this I have spent some testing some changes I had to make to implement the operations needed when Unitary operations are applied to Density operators.</p>
<p>Some use cases I am currently working on for this are as follows:</p>
<p>1. Using basic kets/bras and generic UnitaryOperator</p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/07/basiclandr.jpg"><img alt="" class="alignleft size-full wp-image-200" height="162" src="http://rhoforsympy.files.wordpress.com/2012/07/basiclandr.jpg?w=500&amp;h=162" title="basiclandr" width="500"/></a></p>
<p>2. Apply Gates of Density operators with states as Qubits.</p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/07/qapplylandr2.jpg"><img alt="" class="alignleft size-full wp-image-199" height="216" src="http://rhoforsympy.files.wordpress.com/2012/07/qapplylandr2.jpg?w=500&amp;h=216" title="qapplylandr2" width="500"/></a></p>
<p>Currently, qapply() works on  UnitaryOpearator*Ket correctly. But, as seen in the second print statement Bra*Dagger(UnitaryOperator) does not expand out fully. I am currently working on fixing this so that the second part of the expression expands out smoothly.</p>
<p>Therefore, my goal this week is to complete the implementation of UnitaryOperators applied to Density operators, plus address tasks for current PR and another PR ( related to partial trace on qubits)  I plan to submit this week.</p>
<p>Happy Coding!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/197/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/197/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=197&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-16T04:14:07Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-08-29T08:40:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=302</id>
    <link href="http://amakelov.wordpress.com/2012/07/15/google-summer-of-code-2012-week-8/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 8</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi everyone, here’s a brief summary of what I’ve been doing for the 8th week of my GSoC: The issue with the BASESWAP function on page 103 of [1] that I discussed here is now resolved: one of the authors, Professor Derek Holt at Warwick, replied to me that this is indeed a typo and <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/07/15/google-summer-of-code-2012-week-8/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=302&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi everyone, here’s a brief summary of what I’ve been doing for the 8th week of my GSoC:</p>
<ul>
<li>The issue with the BASESWAP function on page 103 of [1] that I discussed <a href="http://amakelov.wordpress.com/2012/07/01/google-summer-of-code-2012-week-6/" target="_blank">here</a> is now resolved: one of the authors, Professor Derek Holt at Warwick, replied to me that this is indeed a typo and added it to the errata page <a href="http://homepages.warwick.ac.uk/~mareg/CGTHandbookErrors" target="_blank">here</a>.</li>
</ul>
<ul>
<li>I studied the SUBGROUPSEARCH algorithm described in [1] in more depth. It takes as input a group <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/> with a BSGS, a subgroup <img alt="K &lt; G" class="latex" src="http://s0.wp.com/latex.php?latex=K+%3C+G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="K &lt; G"/> with a BSGS having the same base as that of <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/>, a property <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="P"/> such that <img alt="P(g)" class="latex" src="http://s0.wp.com/latex.php?latex=P%28g%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="P(g)"/> for <img alt="g \in G" class="latex" src="http://s0.wp.com/latex.php?latex=g+%5Cin+G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="g \in G"/> is either true or false, <img alt="P(g)" class="latex" src="http://s0.wp.com/latex.php?latex=P%28g%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="P(g)"/> is always true for $g \in K$, and the elements of <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/> satisfying <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="P"/> form a subgroup <img alt="H" class="latex" src="http://s0.wp.com/latex.php?latex=H&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="H"/>, and tests <img alt="\text{TEST}(g, l)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctext%7BTEST%7D%28g%2C+l%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\text{TEST}(g, l)"/> used to rule out group elements (i.e., make sure they don’t satisfy <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="P"/>) based on the image of the first <img alt="l" class="latex" src="http://s0.wp.com/latex.php?latex=l&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="l"/> base points of <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/>, the so-called partial base image. It modifies <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="K"/> by adding generators until <img alt="K = H" class="latex" src="http://s0.wp.com/latex.php?latex=K+%3D+H&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="K = H"/>, and returns a strong generating set for <img alt="H" class="latex" src="http://s0.wp.com/latex.php?latex=H&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="H"/>. It performs a depth-first search over all possible base images (which by the definition of a base determine uniquely every element of <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/>), but uses several conditions to prune the search tree and is said to be fast in practice. This algorithm is the basis for finding normalizers and centralizers and intersections of subgroups, so it’s pretty fundamental. One of its features is the frequent change of base for <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="K"/>: at level <img alt="l" class="latex" src="http://s0.wp.com/latex.php?latex=l&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="l"/> in the search tree we want to make sure that the base for <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="K"/> starts with the current partial base image (i.e., the image of the first <img alt="l" class="latex" src="http://s0.wp.com/latex.php?latex=l&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="l"/> points in the base). In [1] it is said that this requires only one application of BASESWAP (which swaps two neighbouring base points). <strong>This was confusing me for a while.</strong> However, since we want to only change the <img alt="l" class="latex" src="http://s0.wp.com/latex.php?latex=l&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="l"/>-th base point at any base change, and the base after the <img alt="l" class="latex" src="http://s0.wp.com/latex.php?latex=l&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="l"/>-th point doesn’t matter at level <img alt="l" class="latex" src="http://s0.wp.com/latex.php?latex=l&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="l"/>, it seems that we can do the following. Treat the partial base image, denote it by <img alt="c_1 c_2 \ldots c_l" class="latex" src="http://s0.wp.com/latex.php?latex=c_1+c_2+%5Cldots+c_l&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="c_1 c_2 \ldots c_l"/>, as a base, and then run BASESWAP on <img alt="c_1 c_2 \ldots c_l c" class="latex" src="http://s0.wp.com/latex.php?latex=c_1+c_2+%5Cldots+c_l+c&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="c_1 c_2 \ldots c_l c"/>, interchanging the last two elements, where <img alt="c" class="latex" src="http://s0.wp.com/latex.php?latex=c&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="c"/> is the new <img alt="l" class="latex" src="http://s0.wp.com/latex.php?latex=l&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="l"/>-th point in the base. Now I’m more confident that I can implement SUBGROUP search (the other parts of the procedure are easily approachable). But there is one other problem with it:</li>
<li>We want <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="K"/>, the group we initialize <img alt="H" class="latex" src="http://s0.wp.com/latex.php?latex=H&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="H"/> with, to have the same base as <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/>. The current deterministic implementation of the Schreier-Sims algorithm (using Jerrum’s filther) always produces a BSGS from scratch, and therefore we can’t tell it to make a BSGS for <img alt="K" class="latex" src="http://s0.wp.com/latex.php?latex=K&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="K"/> with respect to some particular base. Hence we need an implementation of the so-called “incremental” Schreier-Sims algorithm, which takes a sequence of points and a generating set and extends them to a BSGS. This is also described in [1], together with some optimizations, and it won’t be very hard to go through the pseudocode and implement it – so that’ going to be the next step. It would also be a useful addition to the entire group-theoretical module since often in algorithms we want a BSGS with respect to some convenient base.</li>
</ul>
<p>More or less, that’s it for now. In the next few days I’ll try to write some actual code implementing the above two bullets and get some more reviewing for my <a href="https://github.com/sympy/sympy/pull/1406" target="_blank">most recent pull request</a>.</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<p> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/302/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/302/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=302&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-15T23:28:05Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-20T14:40:53Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/07/09/gsoc-week-7</id>
    <link href="http://catchmrbharath.github.com/programming/2012/07/09/gsoc-week-7" rel="alternate" type="text/html"/>
    <title>GSoC week 7</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week has been quite eventful. The implicit plotting module is almost done. I added the functionality of combining expressions using the <code>And</code> and <code>Or</code> statements. Now you can do</p>

<p><code>
plot_implicit(And(Eq(y, exp(x)), y - x &gt; 2)
</code> and get a plot as below. So now you can combine any number of equations / inequalities and plot it. I think its possible to do a lot of cool stuff combining equations / inequalities. <img height="400" src="http://catchmrbharath.github.com/images/09072012/fig1.png" width="600"/></p>

<p>Plotting through interval math is awesome but is also very limited. You cannot add support to <code>re()</code>, to functions that you cannot characterize as monotonic in certain regions. But we always encounter such functions. So there should be some fall back algorithm to plot such plots. I implemented the fall back algorithm last week. The idea is borrowed from sage implicit plots. We convert an equation / inequality into a function which returns 1 if it satisfies and -1 if it doesn’t satisfy. So if you are plotting an equality then you plot using the <code>contour</code> command of matplotlib, and instruct it to plot only the zero contour. If its an inequality then plotting the region with two colors gives the plot required.</p>

<p>These are examples from the fallback algorithm.</p>

<p>Plot of $y^{2}=x^{3}-x$ <img height="400" src="http://catchmrbharath.github.com/images/09072012/fig2.png" width="600"/></p>

<p>The plot with interval arithmetic is more precise. <img height="400" src="http://catchmrbharath.github.com/images/09072012/fig3.png" width="600"/></p>

<p>I haven’t finished with the tests. Once I finish the tests I can send a pull request. The pull request will be pretty big, but most of the things have been reviewed in my previous pull request. This is just an extension of the previous pull request.</p>

<p>There are certain problems with the module though. The line width problem which I mentioned in my previous blog post, cannot be fixed. So you will have to change to the fall back method if the line width becomes large. Also the fall back algorithm cannot plot boolean combinations of equations / inequalities. So the two methods complement each other largely. So the next question would be whether we can choose one of the two intelligently. I guess the answer is No. That decision must be taken by the user. But most of the times the interval math approach works very nicely.</p></div>
    </summary>
    <updated>2012-07-09T07:00:00Z</updated>
    <published>2012-07-09T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-19T07:40:29Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://blog.catchmrbharath.in/programming/2012/07/09/gsoc-week-7</id>
    <link href="http://blog.catchmrbharath.in/programming/2012/07/09/gsoc-week-7" rel="alternate" type="text/html"/>
    <title>GSoC week 7</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week has been quite eventful. The implicit plotting module is almost done. I added the functionality of combining expressions using the <code>And</code> and <code>Or</code> statements. Now you can do</p>

<p><code>
plot_implicit(And(Eq(y, exp(x)), y - x &gt; 2)
</code> and get a plot as below. So now you can combine any number of equations / inequalities and plot it. I think its possible to do a lot of cool stuff combining equations / inequalities. <img height="400" src="http://blog.catchmrbharath.in/images/09072012/fig1.png" width="600"/></p>

<p>Plotting through interval math is awesome but is also very limited. You cannot add support to <code>re()</code>, to functions that you cannot characterize as monotonic in certain regions. But we always encounter such functions. So there should be some fall back algorithm to plot such plots. I implemented the fall back algorithm last week. The idea is borrowed from sage implicit plots. We convert an equation / inequality into a function which returns 1 if it satisfies and -1 if it doesn’t satisfy. So if you are plotting an equality then you plot using the <code>contour</code> command of matplotlib, and instruct it to plot only the zero contour. If its an inequality then plotting the region with two colors gives the plot required.</p>

<p>These are examples from the fallback algorithm.</p>

<p>Plot of $y^{2}=x^{3}-x$ <img height="400" src="http://blog.catchmrbharath.in/images/09072012/fig2.png" width="600"/></p>

<p>The plot with interval arithmetic is more precise. <img height="400" src="http://blog.catchmrbharath.in/images/09072012/fig3.png" width="600"/></p>

<p>I haven’t finished with the tests. Once I finish the tests I can send a pull request. The pull request will be pretty big, but most of the things have been reviewed in my previous pull request. This is just an extension of the previous pull request.</p>

<p>There are certain problems with the module though. The line width problem which I mentioned in my previous blog post, cannot be fixed. So you will have to change to the fall back method if the line width becomes large. Also the fall back algorithm cannot plot boolean combinations of equations / inequalities. So the two methods complement each other largely. So the next question would be whether we can choose one of the two intelligently. I guess the answer is No. That decision must be taken by the user. But most of the times the interval math approach works very nicely.</p></div>
    </summary>
    <updated>2012-07-09T07:00:00Z</updated>
    <published>2012-07-09T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-29T08:40:29Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1112</id>
    <link href="https://asmeurersympy.wordpress.com/2012/07/09/emacs-7-months-later/" rel="alternate" type="text/html"/>
    <title>Emacs: 7 months later</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In my final post about my switching to Emacs, a commenter, Scott, asked me, “It has been a while since you started using Emacs. I’m just curious. How is your experience so far now that you have more experience and a more complete configuration?” My reply was getting quite long, so I figured it would [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1112&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In my <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/">final post</a> about my switching to Emacs, a <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/#comment-544">commenter</a>, Scott, asked me, “It has been a while since you started using Emacs. I’m just curious. How is your experience so far now that you have more experience and a more complete configuration?”  My reply was getting quite long, so I figured it would be best suited as a new post.</p>
<p>The short answer is, mostly the same since I wrote that <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3">Vim vs. Emacs (part 3)</a>. Once you use something a lot, you notice all kinds of things that could use improvements. Some of them are just minor annoyances. For example, many interactive commands in Emacs (but not all!) require you to type out “yes” instead of just “y” as a confirmation. Others are more serious, like the need for a real replacement of SuperTab from vim.</p>
<p>I actually didn’t have much free time to work on configuring Emacs during the school year, and once the summer started, my computer died, and I’ve been working of an old laptop running Linux until I can get a new one. Fortunately, I had the foresight to put all my Emacs configuration <a href="https://github.com/asmeurer/dotfiles">online on GitHub</a>, so it was easy to get my configuration again. I’ve noticed that in Linux, the Alt key (i.e., Meta) is used for other things, so it doesn’t work so well in Emacs (e.g., pressing Alt without any other keys sometimes activates a menu that removes the keyboard focus, and also C-M shortcuts don’t seem to work at all).</p>
<p>I’ve memorized very few keyboard shortcuts, even ones that might be useful to me (e.g., I don’t remember the shortcut to jump to a matching parenthesis). Usually, if I am using some mode or something and I want to know how to do something, I just Google it, and generally find the answer within a few seconds.</p>
<p>There are several major configuration issues that I’ve yet to address, either due to lack of time or because I couldn’t find a suitable solution. A SuperTab replacement is one.  This is actually a big one, because scrolling through a file just to see what’s there is getting older and older, as is searching just to jump to a function definition.  If anyone knows of a good way to do this, please let me know.  I mainly need it for Python files, but having it other modes as well would be nice.  Basically, I just want something that shows me all the class and function definitions in the file, in order, that I can easily select one and jump to it.</p>
<p>Related to searching, searching in Emacs sucks. I’m using isearch+, which is an improvement, but it still bugs me that search does not wrap around by default. Also, for some reason, pressing delete doesn’t delete the last character you typed, but the last character that it matched. That may sound minor, but I use it a lot, so it’s really gotten on my nerves.</p>
<p>Regular expression searching in Emacs is useless.  I can never get it to work (usually because of differences between () and \(\)).  What I really want is an interactive, user friendly, regular expression search/search and replace tool.  There’s regexp-builder, but that’s useless because once you build the regular expression, you have to manually copy it and paste it into the real regular expression search function to actually use it.  And it doesn’t work with search and replace.</p>
<p>This last semester I had a semester long project in C.  For that, flymake-mode was a godsend.  It requires a bit of manual configuration (you have to add something to your Makefile, and you have to add some stuff to .emacs as always to enable it by default), but once you do that, it just works.  If you don’t know what this is, basically, it highlights the compiler errors in your source in real time, as you type it.  So instead of doing something stupid twenty times, and then compiling and finding them all, you do something stupid once, see the error, and don’t do make the mistake any more.  It’s also nice to close your editor and know that your code will compile.</p>
<p>The Python mode I am mixed about.  On the one hand, it’s really awesome how smart it is about indentation.  On the other hand, the syntax highlighting is just shy of what I want (granted, it’s pretty good, but I want better than that).  For example, I want to be able to color docstrings, single quoted strings, and double quoted strings differently.  It would also be awesome to get some coloring in docstrings itself.  I’m thinking markdown mode for any text that’s in a docstring, except for doctests, which are colored in Python mode (or some variant).</p>
<p>Some things I’ve not really cared much about yet because I haven’t used that type of file yet.  For example, I’m currently writing this post in Emacs, and just now noticing the deficiencies in html-mode (e.g., I want an easy way to select text and turn it into a link, just like in the WordPress editor).</p>
<p>Finally, I’ve been trying to write my own theme.  That process has been slow and slightly painful.  Emacs is currently in the process of moving to themes, though, so this is to be expected.  When Emacs 24 is actually released I think it will be fair to judge how well this feature works.</p>
<p>That’s my wishlist (or most of it anyway).  But there are positive things too. auto-complete-mode, which I mentioned at the top of my previous blog post, is absolutely awesome.  I think this extension alone has made me more productive.</p>
<p>Some things I take for granted, like automatic spell checking of strings and comments in Python (not enabled by default, but not hard to configure either).  Thanks to someone on an Emacs mailing list, I have the perfect automatic clearing of trailing whitespace, that automatically leaves your whitespace before the cursor in the buffer, but still writes the clear to the file (see my .emacs file from my dotfiles repo linked to above for details).</p>
<p>I’ve been hoping to learn Emacs lisp, so that I could remedy many of these problems on my own, but so far I haven’t really had the free time.  Lisp is a very confusing language, so it’s not easy to jump into (compared to the language vim uses, which I found easy enough to hack on without knowing at all).</p>
<p>Ultimately, I’m quite pleased with how user friendly Emacs is, and with how easy it is to find out how to do almost anything I want just by Googling it. Configuration is an uphill battle.  Emacs has a ton of great packages, many of which are included, but almost none are enabled by default.  Just today I discovered Ido mode, thanks to <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/#comment-543"> David Li</a>.  I feel that in the long term, as I learn Emacs Lisp, I can make it do whatever I want.  It provides a good baseline editing experience, and a good framework for configuring it to do whatever you want, and also enough people use it that 99% of the things you want are already done by somebody.</p>
<p/>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1112/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1112/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1112&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-09T05:24:05Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>https://asmeurersympy.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2012-08-29T08:40:10Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=181</id>
    <link href="http://rhoforsympy.wordpress.com/2012/07/09/week-7-tr-operations-on-qubits/" rel="alternate" type="text/html"/>
    <title>Week 7: Tr operations on Qubits</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week has been lot less coding and more of understanding some pieces of codes for next set of changes. As far as the implementation goes, the Tr operations ( including partial trace/reduce density operations) for qubits was implemented. Some examples of the Tr operations on qubits can be seen here. An example of an [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=181&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week has been lot less coding and more of understanding some pieces of codes for next set of changes. As far as the implementation goes, the Tr operations ( including partial trace/reduce density operations) for qubits was implemented.</p>
<p>Some examples of the Tr operations on qubits can be seen here.</p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/07/tr_qubit_1.jpg"><img alt="" class="alignleft size-full wp-image-182" src="http://rhoforsympy.files.wordpress.com/2012/07/tr_qubit_1.jpg?w=500" title="tr_qubit_1"/></a></p>
<p>An example of an reduced density operation on a mixed-state is shown below</p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/07/tr_qubit_2.jpg"><img alt="" class="alignleft size-full wp-image-183" height="199" src="http://rhoforsympy.files.wordpress.com/2012/07/tr_qubit_2.jpg?w=500&amp;h=199" title="tr_qubit_2" width="500"/></a></p>
<p>The changes shown above are currently available in my git branch over <a href="https://github.com/gdevanla/sympy/tree/trace_qubit">here</a>. I plan to submit a PR of this branch as soon as the my current <a href="https://github.com/sympy/sympy/pull/1396/">PR 1396</a> is merged.</p>
<p>Another task I have been working on this week is figuring changes needed to qapply() to perform the L and R operations of density matrix. I plan to work on this tasks during next week.</p>
<p>In summary, plan for next week:</p>
<p>1. Address comments on current <a href="https://github.com/sympy/sympy/pull/1396/">PR 1396</a>.</p>
<p>2. Submit PR for trace_qubit branch and address any reviews on that.</p>
<p>3. Work on the L and R operations.</p>
<p>With these activities, the next major task that would remain is to set up trace operations for Time Dependent states.  I will start researching on the current implementation of this code to understand where my changes would have to go.</p>
<p>On a side note, we are breaking record <a href="http://www.chicagotribune.com/news/chi-120707chicago-heat-weather,0,3439069.story">temperatures</a> in Chicago this week, and it was tough to keep myself cool without an air-conditioner!  Hope other Chicagoan Sympy members are doing just fine by the beach!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/181/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/181/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=181&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-09T01:13:49Z</updated>
    <category term="GSoc"/>
    <category term="density"/>
    <category term="GSoc 2012"/>
    <category term="quantum"/>
    <category term="sympy"/>
    <category term="trace"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-08-29T08:40:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=238</id>
    <link href="http://scolobb.wordpress.com/2012/07/09/the-first-tangible/" rel="alternate" type="text/html"/>
    <title>The First Tangible</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I have the preliminary pleasure to announce the first more or less tangible fruits of my work: some real diagram plots. I will adjourn this part of the show-off until the end of the post, however, so that more people read the whole thing The work I have done this week belongs to two essentially [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=238&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have the preliminary pleasure to announce the first more or less tangible fruits of my work: some real diagram plots.  I will adjourn this part of the show-off until the end of the post, however, so that more people read the whole thing <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>The work I have done this week belongs to two essentially different classes.  In the first half of the week I was still adding new features to the layout functionality; this is mainly about logical groups, which are a way for the user to exercise some control over how the objects are laid out.  The idea behind offering the user some control over the layout is that <tt>DiagramGrid</tt> cannot always guess which placement of objects would be the best for the user, additional input would be very welcome on such occasions.  It was important though to require this input in such a way as to demand as little effort as possible on the part of the user.</p>
<p>Take a look at <a href="http://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/Categorical_pullback_%28expanded%29.svg/225px-Categorical_pullback_%28expanded%29.svg.png">the definition of a pullback</a>.  In this diagram, one can easily see that the objects <img alt="P" class="latex" src="http://s0.wp.com/latex.php?latex=P&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="P"/>, <img alt="X" class="latex" src="http://s0.wp.com/latex.php?latex=X&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="X"/>, <img alt="Y" class="latex" src="http://s0.wp.com/latex.php?latex=Y&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="Y"/>, <img alt="Z" class="latex" src="http://s0.wp.com/latex.php?latex=Z&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="Z"/> are distinctly separated from the object <img alt="Q" class="latex" src="http://s0.wp.com/latex.php?latex=Q&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="Q"/>.  It is easy to note further that many of <a href="http://en.wikipedia.org/wiki/Universal_property">universal properties</a> also rely on such semantic grouping of objects.  Further yet, in a lot of diagrams, logical groups are easily seen, as it happens in the case of the <a href="http://en.wikipedia.org/wiki/Five_lemma">five lemma</a>.  These observations have made me think that allowing logical groups would be a perfect addition to the existing automatic layout functionality.</p>
<p>In the current implementation, the user specifies the logical groups by supplying a set of sets of objects.  Thus, in the case of the five lemma, the user can supply the set <img alt="\{\{A, B, C, D, E\}, \{A', B', C', D', E'\}\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5C%7B%5C%7BA%2C+B%2C+C%2C+D%2C+E%5C%7D%2C+%5C%7BA%27%2C+B%27%2C+C%27%2C+D%27%2C+E%27%5C%7D%5C%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\{\{A, B, C, D, E\}, \{A', B', C', D', E'\}\}"/> as the description of the groups that can be seen in the diagram.  In the case of the pullback, the following set would be a valid specification: <img alt="\{Q, \{P, X, Y, Z\}\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5C%7BQ%2C+%5C%7BP%2C+X%2C+Y%2C+Z%5C%7D%5C%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="\{Q, \{P, X, Y, Z\}\}"/>.  Note how it is not necessary to include separate objects in singleton sets.</p>
<p>One more detail on how the groups are handled, about which I am not yet very sure, both in the meaning of utility and test completeness, is that groups can be nested to arbitrary depth.  This is because the current procedure of handling groups is as follows: all supplied elements of the supplied set of groups, which are sets, are considered as diagrams in their own right and are laid out.  The algorithm does not really look into the structure of such a group before going into recursion.  After having laid out each of groups, the current implementation constructs a dummy diagram, starting from the original one in the following way.  The new diagram has as objects all objects and groups included in the groups set.  If between the objects of any two groups there exists a morphism, it is added to the new diagram.  Duplicate morphisms of this kind are essentially omitted for efficiency reasons.  This new dummy diagram is laid out.  Then, in the resulting grid, the cells (and the respective rows and columns) which correspond to groups are expanded to hold the grids into which the groups have been laid out.</p>
<p>The procedure I describe is rather simple, which makes me believe that it is also robust.  Nevertheless, I cannot say I am fully satisfied with how much I have tested it; somewhat pessimistically, I do expect quite a number of bugs.</p>
<p>While logical groups seems to a be rather powerful feature already, it does not help get the layout of the five lemma just like it is usually laid out.  Moreover, I noticed that the current algorithm would never lay out a line diagram in a line.  To avoid this I have added a hint to the layout functionality which would instruct the usage of a different layout algorithm, and which would result in a more line-like shapes.  This algorithm essentially does a depth-first traversal of the underlying undirected graph of the diagram and places the objects according to their distance from the root.  Now, since I wanted to see such a layout applied to some logical groups as well (cf. the five lemma), I have implemented the possibility to supply separate layout hints for each group.  With these instruments at hand, as well as with the simple hint <tt>transpose</tt> which instructs the layout engine to eventually flip the grid about its main diagonal, it is possible to give <tt>DiagramGrid</tt> sufficient information to have the five lemma laid out properly.</p>
<p>While I think that this result is pretty satisfactory, it would of course be way cooler to have <tt>DiagramGrid</tt> guess such stuff automatically.  It is a rather nontrivial task, however.  Take the five lemma, again.  It can be laid out in a line, and look not that bad.  It seems very hard to decide automatic criteria to answer such questions.  Yet, I expect that nice results can be achieved by diversifying the controls offered to the user in what concerns the layout.</p>
<p>I am also considering the possibility of a partially manual layout (and, eventually, a fully manual one), by specifying the exact initial positions of some of the objects.  I believe this would be very useful in the long run, because it would offer a great deal of control, and wouldn’t still require much unnecessary effort on the user side.  The implementation of such a thing is however still a matter of the future.</p>
<p>I have finished the first half of the week by documenting the layout algorithm in the source itself, as well writing proper docstrings for <tt>DiagramGrid</tt> and its methods.</p>
<p>The second half of the week I have spent working on producing actual <a href="http://www.tug.org/applications/Xy-pic/">Xy-pic</a> code.  As expected, the most difficult part lied in drawing bent arrows.  I have implemented some basic routine to solve this question.  The pinnacle of the currently available functionality is shown in the figure.</p>
<div class="wp-caption alignright" id="attachment_247" style="width: 279px;"><a href="http://scolobb.files.wordpress.com/2012/07/cube1.png"><img alt="" class="size-medium wp-image-247" height="300" src="http://scolobb.files.wordpress.com/2012/07/cube1.png?w=269&amp;h=300" title="The automatic plot of a moderately complex diagram" width="269"/></a><p class="wp-caption-text">The automatic plot of a moderately complex diagram</p></div>
<p>There is a bit of work left, however.  First of all, notice how the arrow curving from <img alt="A_7" class="latex" src="http://s0.wp.com/latex.php?latex=A_7&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A_7"/> to <img alt="A_8" class="latex" src="http://s0.wp.com/latex.php?latex=A_8&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A_8"/> is too close to the objects it passes by.  I plan to solve this by increasing the default amount of curving.  Further, nothing will currently be done if another morphism between these two objects is added, which results in ugly overlaps.  Yet another important problem is positioning of the labels of the morphisms: some of them are too loose in space and it is hard to understand which arrow they belong to.  The label <img alt="f_{10}" class="latex" src="http://s0.wp.com/latex.php?latex=f_%7B10%7D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f_{10}"/> is even crossed by the arrow <img alt="f_7" class="latex" src="http://s0.wp.com/latex.php?latex=f_7&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f_7"/>.  Unfortunately, I don’t expect to solve all of these problems with positioning of morphisms labels, because, in many cases, it would be necessary to know the actual graphical information, which is impossible at the current level of abstraction.</p>
<p>Thus my immediate plans are to fix the problems I have enumerated to as a complete extent as possible, and to then submit the layout functionality and the actual drawing functionality as two pull requests, to facilitate review.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/238/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/238/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=238&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-08T23:03:30Z</updated>
    <category term="SymPy"/>
    <category term="automatic plotting"/>
    <category term="diagram"/>
    <category term="diagram drawing"/>
    <category term="grid layout"/>
    <category term="groups"/>
    <category term="line layout"/>
    <category term="xy-pic"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-08-29T08:40:27Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=447</id>
    <link href="http://krastanov.wordpress.com/2012/07/09/tensor-vs-tensor-field-basis-vs-coordinate-system/" rel="alternate" type="text/html"/>
    <title>Tensor vs Tensor Field, Basis vs Coordinate System</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In most of my posts that discuss the SymPy diffgeom module I do not try to make a distinction between a tensor and a tensor field, as it is usually obvious from the context. However, it would be nice to spell it out at least once. I have two favorite ways to define a tensor/tensor [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=447&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In most of my posts that discuss the SymPy diffgeom module I do not try to make a distinction between a tensor and a tensor field, as it is usually obvious from the context. However, it would be nice to spell it out at least once.</p>
<p>I have two favorite ways to define a tensor/tensor field: either as an object with a representation (in the form of a multidimensional array) that transforms in a precise way when one switches from one basis to another, or instead as (sum of) tensor products of some vectors and 1-forms (i.e. an element of some tensor product of the vector space and its dual).</p>
<h3>In Terms of Transformation Rules</h3>
<p>With regard to the first definition, Wikipedia has this to say:</p>
<blockquote><p>A tensor of type (n, m−n) is an assignment of a multidimensional array <img alt="T^{i_1\dots i_n}_{i_{n+1}\dots i_m}[\mathbf{f}] " class="latex" src="http://s0.wp.com/latex.php?latex=T%5E%7Bi_1%5Cdots+i_n%7D_%7Bi_%7Bn%2B1%7D%5Cdots+i_m%7D%5B%5Cmathbf%7Bf%7D%5D+&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="T^{i_1\dots i_n}_{i_{n+1}\dots i_m}[\mathbf{f}] "/> to each basis <img alt="f = (e_1,...,e_N) " class="latex" src="http://s0.wp.com/latex.php?latex=f+%3D+%28e_1%2C...%2Ce_N%29+&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="f = (e_1,...,e_N) "/> such that, if we apply the change of basis <img alt="\mathbf{f}\mapsto \mathbf{f}\cdot R = \left( R_1^i \mathbf{e}_i, \dots, R_N^i\mathbf{e}_i\right) " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbf%7Bf%7D%5Cmapsto+%5Cmathbf%7Bf%7D%5Ccdot+R+%3D+%5Cleft%28+R_1%5Ei+%5Cmathbf%7Be%7D_i%2C+%5Cdots%2C+R_N%5Ei%5Cmathbf%7Be%7D_i%5Cright%29+&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\mathbf{f}\mapsto \mathbf{f}\cdot R = \left( R_1^i \mathbf{e}_i, \dots, R_N^i\mathbf{e}_i\right) "/> then the multidimensional array obeys the transformation law <img alt="T^{i_1\dots i_n}_{i_{n+1}\dots i_m}[\mathbf{f}\cdot R] = (R^{-1})^{i_1}_{j_1}\cdots(R^{-1})^{i_n}_{j_n} R^{j_{n+1}}_{i_{n+1}}\cdots R^{j_{m}}_{i_{m}}T^{j_1,\ldots,j_n}_{j_{n+1},\ldots,j_m}[\mathbf{f}] " class="latex" src="http://s0.wp.com/latex.php?latex=T%5E%7Bi_1%5Cdots+i_n%7D_%7Bi_%7Bn%2B1%7D%5Cdots+i_m%7D%5B%5Cmathbf%7Bf%7D%5Ccdot+R%5D+%3D+%28R%5E%7B-1%7D%29%5E%7Bi_1%7D_%7Bj_1%7D%5Ccdots%28R%5E%7B-1%7D%29%5E%7Bi_n%7D_%7Bj_n%7D+R%5E%7Bj_%7Bn%2B1%7D%7D_%7Bi_%7Bn%2B1%7D%7D%5Ccdots+R%5E%7Bj_%7Bm%7D%7D_%7Bi_%7Bm%7D%7DT%5E%7Bj_1%2C%5Cldots%2Cj_n%7D_%7Bj_%7Bn%2B1%7D%2C%5Cldots%2Cj_m%7D%5B%5Cmathbf%7Bf%7D%5D+&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="T^{i_1\dots i_n}_{i_{n+1}\dots i_m}[\mathbf{f}\cdot R] = (R^{-1})^{i_1}_{j_1}\cdots(R^{-1})^{i_n}_{j_n} R^{j_{n+1}}_{i_{n+1}}\cdots R^{j_{m}}_{i_{m}}T^{j_1,\ldots,j_n}_{j_{n+1},\ldots,j_m}[\mathbf{f}] "/>.</p></blockquote>
<p>A tensor field then is a way to map a tensor to each point of a manifold (the tensor is wrt the tangent space at that point).</p>
<p>When we switch from tensors to tensor fields a new object becomes important: the coordinate system. Before proceeding, one must know what a manifold and a tangent space mean. Then we can illuminate the relation between what one calls a “basis” when speaking about tensors and the “coordinate system” in the context of tensor fields. Firstly, a coordinate system gives a way to continuously map a tuple of numbers to a point on the manifold. This continuous map is what physicist love to work with (Cartesian or polar coordinates for instance). The nice thing is that each coordinate system brings with itself a canonical basis for each point of the manifold.</p>
<p>What can be confusing, is that the basis can change from point to point. For example, one can take the <img alt="R^2" class="latex" src="http://s0.wp.com/latex.php?latex=R%5E2&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="R^2"/> manifold that has <img alt="R^2" class="latex" src="http://s0.wp.com/latex.php?latex=R%5E2&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="R^2"/> as its tangent space. Take for instance two points <img alt="(x=1, y=0)" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%3D1%2C+y%3D0%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="(x=1, y=0)"/> and <img alt="(x=0, y=1)" class="latex" src="http://s0.wp.com/latex.php?latex=%28x%3D0%2C+y%3D1%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="(x=0, y=1)"/>. The basis vectors in the Cartesian coordinate system are the same for both points: <img alt="(e_x, e_y)" class="latex" src="http://s0.wp.com/latex.php?latex=%28e_x%2C+e_y%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="(e_x, e_y)"/>. However in the polar coordinate system the basis vectors for the first point are <img alt="(e_x, e_y)" class="latex" src="http://s0.wp.com/latex.php?latex=%28e_x%2C+e_y%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="(e_x, e_y)"/> and <img alt="(e_y, -e_x)" class="latex" src="http://s0.wp.com/latex.php?latex=%28e_y%2C+-e_x%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="(e_y, -e_x)"/> for the second point.</p>
<p>Anyway, the only thing that changes in the definition, is that the change-of-basis matrix mentioned above now depends on the coordinate systems.</p>
<blockquote><p><img alt="\hat{T}^{i_1\dots i_n}_{i_{n+1}\dots i_m}(\bar{x}_1,\ldots,\bar{x}_k) =  \frac{\partial \bar{x}^{i_1}}{\partial x^{j_1}}  \cdots  \frac{\partial \bar{x}^{i_n}}{\partial x^{j_n}}  \frac{\partial x^{j_{n+1}}}{\partial \bar{x}^{i_{n+1}}}  \cdots  \frac{\partial x^{j_m}}{\partial \bar{x}^{i_m}}  T^{j_1\dots j_n}_{j_{n+1}\dots j_m}(x_1,\ldots,x_k) " class="latex" src="http://s0.wp.com/latex.php?latex=%5Chat%7BT%7D%5E%7Bi_1%5Cdots+i_n%7D_%7Bi_%7Bn%2B1%7D%5Cdots+i_m%7D%28%5Cbar%7Bx%7D_1%2C%5Cldots%2C%5Cbar%7Bx%7D_k%29+%3D++%5Cfrac%7B%5Cpartial+%5Cbar%7Bx%7D%5E%7Bi_1%7D%7D%7B%5Cpartial+x%5E%7Bj_1%7D%7D++%5Ccdots++%5Cfrac%7B%5Cpartial+%5Cbar%7Bx%7D%5E%7Bi_n%7D%7D%7B%5Cpartial+x%5E%7Bj_n%7D%7D++%5Cfrac%7B%5Cpartial+x%5E%7Bj_%7Bn%2B1%7D%7D%7D%7B%5Cpartial+%5Cbar%7Bx%7D%5E%7Bi_%7Bn%2B1%7D%7D%7D++%5Ccdots++%5Cfrac%7B%5Cpartial+x%5E%7Bj_m%7D%7D%7B%5Cpartial+%5Cbar%7Bx%7D%5E%7Bi_m%7D%7D++T%5E%7Bj_1%5Cdots+j_n%7D_%7Bj_%7Bn%2B1%7D%5Cdots+j_m%7D%28x_1%2C%5Cldots%2Cx_k%29+&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\hat{T}^{i_1\dots i_n}_{i_{n+1}\dots i_m}(\bar{x}_1,\ldots,\bar{x}_k) =  \frac{\partial \bar{x}^{i_1}}{\partial x^{j_1}}  \cdots  \frac{\partial \bar{x}^{i_n}}{\partial x^{j_n}}  \frac{\partial x^{j_{n+1}}}{\partial \bar{x}^{i_{n+1}}}  \cdots  \frac{\partial x^{j_m}}{\partial \bar{x}^{i_m}}  T^{j_1\dots j_n}_{j_{n+1}\dots j_m}(x_1,\ldots,x_k) "/></p></blockquote>
<h3>In Terms of Tensor Products</h3>
<p>I prefer this definition, as it relies on the geometrical meaning of vectors and forms. According to Wikipedia, one can express it as:</p>
<blockquote><p>A type (n, m) tensor T is defined as a map <img alt="T: \underbrace{ V^* \times\dots\times V^*}_{n \text{ copies}} \times \underbrace{ V \times\dots\times V}_{m \text{ copies}} \rightarrow \mathbf{R} " class="latex" src="http://s0.wp.com/latex.php?latex=T%3A+%5Cunderbrace%7B+V%5E%2A+%5Ctimes%5Cdots%5Ctimes+V%5E%2A%7D_%7Bn+%5Ctext%7B+copies%7D%7D+%5Ctimes+%5Cunderbrace%7B+V+%5Ctimes%5Cdots%5Ctimes+V%7D_%7Bm+%5Ctext%7B+copies%7D%7D+%5Crightarrow+%5Cmathbf%7BR%7D+&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="T: \underbrace{ V^* \times\dots\times V^*}_{n \text{ copies}} \times \underbrace{ V \times\dots\times V}_{m \text{ copies}} \rightarrow \mathbf{R} "/>, where V is a vector space and V* is the corresponding dual space of covectors, which is linear in each of its arguments.</p></blockquote>
<p>One can again try to translate this to the case of tensor fields. The straightforward way is just to say that this map is parametrized, thus it depends on which point on the manifold it is evaluated.</p>
<p>However, a more “geometrical” approach would be to keep the part about “a tensor field is the sum of tensor products of vector fields and 1-form fields” but define vector fields and 1-form fields “geometrically”. Vector fields become differential operators over the manifold instead of maps to elements of the tangent space and 1-forms are defined in terms of differentials instead of duals of vectors.</p>
<h3>The Magic</h3>
<p>The magic is that this parametrization in terms of tuples of real numbers (a coordinate system) brings automatically a canonical basis and and the transformation matrix for change of basis. Hence defining a coordinate system provides a basis for free. Otherwise the generalization of the first definition would have been clumsier.</p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=447&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-08T22:50:51Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="Mathematics"/>
    <category term="differential geometry"/>
    <category term="&#x43C;&#x430;&#x442;&#x435;&#x43C;&#x430;&#x442;&#x438;&#x43A;&#x430;"/>
    <category term="gsoc"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-08-08T11:41:04Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=266</id>
    <link href="http://amakelov.wordpress.com/2012/07/08/google-summer-of-code-2012-week-7/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 7</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of what I’ve been doing during the 7th week of my GSoC, as well as a general overview of what’s going on and where things are going with computational group theory in sympy. Things I did during the week. This week I focused on: improving the existing code for <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/07/08/google-summer-of-code-2012-week-7/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=266&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all,</p>
<p>here’s a brief summary of what I’ve been doing during the 7th week of my GSoC, as well as a general overview of what’s going on and where things are going with computational group theory in sympy.</p>
<p><strong>Things I did during the week.</strong></p>
<p>This week I focused on:</p>
<ul>
<li>improving the existing code for the functions I recently added – the randomized Schreier-Sims algorithm, the function BASESWAP that changes two points in a base, and the PRINTELEMENTS function (I talk about these <a href="http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/" target="_blank">here</a> and <a href="http://amakelov.wordpress.com/2012/06/18/google-summer-of-code-2012-week-4/" target="_blank">here</a>). I included some comments in the bodies of the functions since these tend to be quite long. Also, I adopted some new naming conventions for handling all the structures related to a base and a strong generating set. It’d be nice if this naming convention is used throughout the combinatorics module (which for now depends mostly on me, as it seems <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  ), and it’d be nice if people provide some feedback on the names I chose. So here we go:</li>
<li>making possible the interaction with the deterministic Schreier-Sims algorithm. After some insights from <a href="https://github.com/pernici" target="_blank">Mario</a> on the values returned by his implementation, I extracted from it the data necessary to make the algorihtms described in [1] that use a base and strong generating set possible.</li>
<li>splitting the code further, with the sympy.combinatorics.util file which now holds the internal functions used to handle permutaion groups (this can be later expanded with other internal functions across the combinatorics module).</li>
<li>Finally, adding docstrings, tests and making a pull request which is available <a href="https://github.com/sympy/sympy/pull/1406#issuecomment-6812223" target="_blank">here </a>. It’s about 1300 lines of code, which is sort of bad, but I can remove some of the stuff and keep it for a future pull request.</li>
</ul>
<p>So here are the <em><strong>naming conventions for working with a BSGS:</strong></em></p>
<p><strong>degree</strong> – the degree of the permutation group.</p>
<p><strong>base</strong> – This is sort of obvious. A base for a permutation group <img alt="G" class="latex" src="http://s0.wp.com/latex.php?latex=G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G"/> is an ordered tuple of points <img alt="(b_1, b_2,\ldots, b_k) " class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_k%29+&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, b_2,\ldots, b_k) "/> such that no group element <img alt="g \in G" class="latex" src="http://s0.wp.com/latex.php?latex=g+%5Cin+G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="g \in G"/> fixes all the points <img alt="b_1, b_2, \ldots, b_k" class="latex" src="http://s0.wp.com/latex.php?latex=b_1%2C+b_2%2C+%5Cldots%2C+b_k&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="b_1, b_2, \ldots, b_k"/> (the significance of the ordering will become apparent later). This is implemented as a list.</p>
<p><strong>base_len</strong> – the number of elements in a base.</p>
<p><strong>strong_gens</strong> – the strong generating set (relative to some base). This is implemented as a list of Perm objects.</p>
<p><strong>basic_stabilizers</strong> – For a base <img alt="(b_1, b_2,\ldots, b_k) " class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_k%29+&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, b_2,\ldots, b_k) "/>, the basic stabilizers are defined as <img alt="G^{(i)} = G_{b_1, \ldots, b_{i-1}} := \{ g \in G | g(b_1) = b_1, \ldots, g(b_{i-1}) = b_{i-1}\}" class="latex" src="http://s0.wp.com/latex.php?latex=G%5E%7B%28i%29%7D+%3D+G_%7Bb_1%2C+%5Cldots%2C+b_%7Bi-1%7D%7D+%3A%3D+%5C%7B+g+%5Cin+G+%7C+g%28b_1%29+%3D+b_1%2C+%5Cldots%2C+g%28b_%7Bi-1%7D%29+%3D+b_%7Bi-1%7D%5C%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G^{(i)} = G_{b_1, \ldots, b_{i-1}} := \{ g \in G | g(b_1) = b_1, \ldots, g(b_{i-1}) = b_{i-1}\}"/> for <img alt="i \in \{1, 2, \ldots, k\}" class="latex" src="http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+2%2C+%5Cldots%2C+k%5C%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="i \in \{1, 2, \ldots, k\}"/> so that we have <img alt="G^{(1)} = G" class="latex" src="http://s0.wp.com/latex.php?latex=G%5E%7B%281%29%7D+%3D+G&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G^{(1)} = G"/>. This is implemented as a list of permutation groups.</p>
<p><strong>distr_gens</strong> – the strong generators distributed according to the basic stabilizers. This means: for a base <img alt="(b_1, b_2,\ldots, b_k) " class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_k%29+&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, b_2,\ldots, b_k) "/> and a strong generating set <img alt="S= \{ g_1, g_2, \ldots, g_t\}" class="latex" src="http://s0.wp.com/latex.php?latex=S%3D+%5C%7B+g_1%2C+g_2%2C+%5Cldots%2C+g_t%5C%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="S= \{ g_1, g_2, \ldots, g_t\}"/>, distribute the <img alt="g_i" class="latex" src="http://s0.wp.com/latex.php?latex=g_i&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="g_i"/> in sets <img alt="S^{(i)} = G^{(i)} \cap S" class="latex" src="http://s0.wp.com/latex.php?latex=S%5E%7B%28i%29%7D+%3D+G%5E%7B%28i%29%7D+%5Ccap+S&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="S^{(i)} = G^{(i)} \cap S"/> for <img alt="i \in \{1, 2,\ldots, k\}" class="latex" src="http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+2%2C%5Cldots%2C+k%5C%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="i \in \{1, 2,\ldots, k\}"/> where the <img alt="G^{(i)}" class="latex" src="http://s0.wp.com/latex.php?latex=G%5E%7B%28i%29%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G^{(i)}"/> are defined as above. This is implemented as a list of lists holding the elements of the <img alt="S^{(i)}" class="latex" src="http://s0.wp.com/latex.php?latex=S%5E%7B%28i%29%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="S^{(i)}"/></p>
<p><strong>basic_orbits</strong> – these are the orbits of <img alt="b_i" class="latex" src="http://s0.wp.com/latex.php?latex=b_i&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="b_i"/> under <img alt="G^{(i)}" class="latex" src="http://s0.wp.com/latex.php?latex=G%5E%7B%28i%29%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G^{(i)}"/>. These are implemented as a list of lists, being the list of lists of keys for the basic transversals, see below.</p>
<p><strong>basic_transversals</strong> – these are transversals for the basic orbits. Notice that the choice for these may not (and in most cases won’t be) unique. For one thing, it depends on the set of strong generators present (which is also not uniquely determined for a given base). They are implemented as a list of dictionaries indexed according to the base <img alt="(b_1, b_2,\ldots, b_k) " class="latex" src="http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_k%29+&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(b_1, b_2,\ldots, b_k) "/>, with keys – the elements of the basic orbits, and values – transversal elements sending the current <img alt="b_i" class="latex" src="http://s0.wp.com/latex.php?latex=b_i&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="b_i"/> to the key.</p>
<p>I wrote functions extracting <strong>basic_orbits, basic_transversals, basic_stabilizers, distr_gens</strong> from only a base and strong generating set, as well as functions for extracting all of them from a base, strong generating set, and a part of them, so that if any of them is available, it can be supplied in order to avoid recalculations.</p>
<p>Also, there is a straightforward test _verify_bsgs in sympy.combinatorics.util that tests a sequence of points and group elements for being a base and strong generating set. It simply verifies the definition of a base and strong generating set relative to it. There will likely be other ways to do that in the future – more effective, but surely more complicated and thus error-prone. This will serve as a robust testing tool</p>
<p><strong>Where we are.</strong></p>
<p>So, here’s a checklist of what I’ve promised in my <a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/amakelov/1" target="_blank">proposal</a> on the melange website, and which parts of it have already been implemented. This is reading the optimistic timeline. This all pertains to permutation groups, unless specified:</p>
<ul>
<li>handling different representations – NO</li>
<li>excluding singleton cycles from the cycle decomposition – NO</li>
<li>powers and orders of elements – YES. This was actually already there for permutations.</li>
<li>orbits – YES.</li>
<li>stabilizers – YES.</li>
<li>schreier vectors – YES.</li>
<li>randomized Schreier-Sims algorithm – YES</li>
<li>handling bases and strong generating sets – YES</li>
<li>membership testing – YES (the function _strip in sympy.combinatorics.util)</li>
<li>rewriting algorithm – NO.</li>
<li>actions on cosets – NO.</li>
<li>quotient groups – NO.</li>
<li>order of a group – YES. This was already there.</li>
<li>subgroup testing – NO.</li>
<li>coset enumeration by the Todd-Coxeter algorithm &amp; consequences – NO.</li>
<li>primitivity testing – YES.</li>
<li>finding (minimal) block systems – YES.</li>
<li>general backtrack search for a certain property – No, however easy to do by modifying PRINTELEMENTS.</li>
<li>outputting all group elements – YES. This was already there, however PRINTELEMENTS does it in lexicographical order according to a base.</li>
<li>Sylow subgroups – NO.</li>
<li>calculating the center – NO.</li>
<li>pointwise stabilizers (of more than one point, see above) – NO.</li>
<li>change of base – YES.</li>
<li>product groups – YES.</li>
<li>more on finitely presented groups (…) – NO.</li>
<li>the p-core – NO.</li>
<li>the solvable radical – NO.</li>
<li>database of known groups – NO.</li>
</ul>
<p><strong>Things yet to be done.</strong></p>
<p>Apart from the things that got a “NO” on the list above, the following currently come to mind (I’ll update this list periodically):</p>
<ul>
<li>Work on removing redundant generators from a strong/any generating set, as described in [1].</li>
<li>Precompute more properties for the groups in the named groups module (transitivity degrees, bases and strong generating sets, etc.)</li>
<li>Add more groups to the named groups module.</li>
<li>Fix the issues pointed out in the review of <a href="https://github.com/sympy/sympy/pull/1377" target="_blank">my second pull request</a>.</li>
<li>Finally do something for handling representations of finite groups over vector spaces, like working with character tables. It’d be cool to have a function that computes the conjugacy classes for a given group, but I don’t know right now how possible that is.</li>
<li>Finally implement the group intersection algorithm… I’m currently starting to work my way through the SUBGROUPSEARCH function which is fundamental for implementing backtracking algorithms for group intersection, centralizers, etc.</li>
<li>Upgrade the randomized version of Schreier-Sims to Las Vegas type in the case when the order of the group is known.</li>
<li>Currently, transversal elements for the basic orbits for a stabilizer chain are stored explicitly. This requires too much memory for large groups. An alternative solution (which slows down execution) is to use Schreier vectors to describe the orbits. This means supplying some more arguments and adding code to many of the functions already present, and is a significant challenge by itself. The good news is that it can be carried out without modifying what is already there.</li>
<li>Come up with a more concise functionality to relate the different structures used to describe a base and strong generating set: the generators for basic stabilizers, the basic orbits, the basic transversals… There are many situations in which some of these are given and we need some of the other ones; sometimes it’s more convenient to get the orbits as sets, and sometimes as lists, and so on… the current approach is to write a new utility function whenever the present ones don’t suffice.</li>
<li>Handle the case when the identity element is provided as a generator for a permutation group – this can make some algorithms less efficient.</li>
<li>Optimize the behavior of BASESWAP so that only the <img alt="i" class="latex" src="http://s0.wp.com/latex.php?latex=i&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="i"/>-th and <img alt="i+1" class="latex" src="http://s0.wp.com/latex.php?latex=i%2B1&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="i+1"/>-th transversals are calculated.</li>
<li>Reduce side effects as much as possible (let’s be pythonic!)</li>
<li>Improve the docstring quality: it might be reasonable to lay out the theory/notation/definitions behind the Schreier-Sims algorithm in one place in some of the files and then simply refer to it as necessary. Otherwise the descriptions get unnecessarily long.<br/>
.</li>
</ul>
<p>Well, that’s it for now it seems. If anything else pops up soon, I’ll add it here!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/266/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/266/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=266&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-08T15:29:12Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-20T14:40:54Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/2012/07/07/another-week-ha-18/</id>
    <link href="http://angadhsympy.wordpress.com/2012/07/07/another-week-ha-18/" rel="alternate" type="text/html"/>
    <title>Another week ha…</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Another week has gone by and another PR has been opened. Added the kinetic energy and potential energy methods to the Particle and RigidBody classes. Also added functions to determine the same for a system of bodies. Implementing the kinetic energy method was fairly straightforward. A slightly different approach was used when it came to potential [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=303&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Another week has gone by and another <a href="https://github.com/sympy/sympy/pull/1407#issuecomment-6821926">PR</a> has been opened. Added the kinetic energy and potential energy methods to the Particle and RigidBody classes. Also added functions to determine the same for a system of bodies. Implementing the kinetic energy method was fairly straightforward. A slightly different approach was used when it came to potential energies. It was decided that the best thing to do would be to let the user specify the potential energy scalar. So there is a set_potential_energy method and a read-only property called potential_energy.</p>
<p>On a brighter note, the two PRs that I had opened for the momenta functions and partial velocity functions have been merged. Chuffed about that. </p>
<p>As things stand now, we are set up beautifully to being the implementation of Lagrange’s method. The next week is primarily going to revolve around reading as much literature on the topic as possible because an attempt is going to be made to deal with non-holonomic systems too, unlike what was stated in my proposal i.e. only holonomic systems. I have personally never used Lagrange’s method on non-holonomic systems; instructors in the past have said it’s a messy affair and have stressed on the superiority of Kane’s method especially for this class of systems. I don’t doubt the superiority of Kane’s method but unfortunately, it’s not something that every dynamicist is aware of. So, it is definitely going to be a useful addition; a natural progression in the learning of dynamical methods starts at Newton’s method and is typically followed by Lagrange’s method and then to Kane’s method.</p>
<p>With the partial velocities helper functions and energy methods and functions, we are in a very good place in terms of implementing this method. Until next week then! (It’s 7am and I haven’t gotten any sleep last night. Over caffeinated. This post may not have made for pretty reading consequently)</p>
<p> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/303/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/303/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=303&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-07T14:00:31Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-08-29T08:40:28Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=220</id>
    <link href="http://scolobb.wordpress.com/2012/07/02/the-layout/" rel="alternate" type="text/html"/>
    <title>The Layout</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I haven’t posted in quite some time, because I have been totally absorbed by implementing the functionality to lay out diagrams. I am painfully close to having finished it; however, I’ve been that close to it for a couple days already, and that’s something which drives me crazy OK, it’s time to take a general [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=220&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I haven’t posted in quite some time, because I have been totally absorbed by implementing the functionality to lay out diagrams.  I am painfully close to having finished it; however, I’ve been that close to it for a couple days already, and that’s something which drives me crazy <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>OK, it’s time to take a general look over what has been done.  In the end, I will describe my short-term further plans a bit.</p>
<p>First of all, the goal.  When you want to lay out a (commutative) diagram, you should really aim at grid layout.  This is how people normally typeset diagrams in articles, and this is the thing the semblance of which I would be happy to achieve.  The resulting grid layout is one of the traits of diagrams which make the task of automatically drawing them different from the task of automatically drawing a graph.  The other specific feature is that, when you get a diagram, you can (and you should) actually throw away those morphisms which are not really interesting.  In the following sections, I will try to describe the philosophy behind the functionality I have implemented, for each bit in part.</p>
<p>The first stage of the algorithm is to remove the <b>uninteresting morphisms</b>.  At this stage, those composite morphisms which have no properties are discarded; identity morphisms without properties are discarded as well.  In fact, this corresponds pretty well to how people draw diagrams.  This first stage ends by merging the premises and the conclusions of the diagram into a single container.  This is because, at drawing, the distinction between premises and conclusions is not important at all, since all interesting morphisms should make their way into the final picture.</p>
<p>At the second stage, the algorithm abstracts morphisms away, in favour of unoriented edges between objects.  The code builds the so-called <b>skeleton</b> of the diagram (that’s an ad-hoc name).  The skeleton is a graph which has all objects of the diagram as vertices.  Between two vertices of the skeleton there is an <em>undirected</em> edge, if these objects are connected by an (interesting) morphism.  Notice how we discard the direction of the connection.  After all edges corresponding to morphisms have been added, the skeleton is further completed in the following way.  An edge is added between any two objects <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> and <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C"/> for which there exists and object <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> such that <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> and <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> are connected with an interesting morphism and <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> and <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C"/> are connected with an interesting morphism.  This is <em>not</em> the transitive closure of the graph, it is only the first step of it.  The new edges are dummy edges, in the sense that they may not correspond to interesting morphisms.</p>
<p>The next stage is the first key stage of the algorithm.  The skeleton is tesselated into triangles, which will eventually be used to get as many right angles in the layout as possible.  Here is when the dummy edges come into play.  Their presence assures that the diagram can be completely split into triangles.  For those who have read my <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">proposal</a>, I will remark that all the stages of diagram analysis I described <em>after</em> laying out the triangles are actually unnecessary, namely because of these dummy edges, which guarantee that we have sufficiently many triangles.  Yet, dummy edges are indeed dummy, in the sense that most of them will not appear in the final diagram.  This makes the triangles we find in the skeleton unevenly interesting to us.  Triangles which have more than one dummy edge are totally extra, because they would distract the attention of the code from  triangles with more meaningful edges and would mess things up, generally.  Therefore, such triangles are immediately dropped.</p>
<p>Once the “triangulating” stage is complete, the core of the algorithm comes into play.  Basically, the idea is to pick one of the triangles, pick one of its edges and put it on a grid, horizontally, remembering that it is in the fringe.  Then, iteratively, “<b>weld</b>” interesting triangles to the fringe, eventually placing all objects of the diagram on the grid.  This part is the trickiest part of the whole algorithm, so prepare to hear a talk about a lot of magic <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  </p>
<p>Any triangle is placed on the grid as a right-angled triangle, with the perpendicular edges being horizontal and vertical.  This assures that we keep “quite” close to the desired grid layout.  Whenever a triangle is placed on the grid, the objects which form its vertices are recorded as already placed.  Then, those triangles which only contain objects which have already been placed (uninteresting triangles) are dropped.  That is, once the places of some objects are decided, those objects are never considered again.  This may constitute a point of future improvement, of course, because objects are often drawn in several copies to make the diagram look clearer.</p>
<p>When placing the triangle on the grid, the code attempts to assure that as many interesting (not dummy) edges as possible will be drawn horizontally or vertically.  There is some dark magic in the code which detects such situations, but I hope that after following the trail of comments and just reading the code itself, the whole thing should become rather clear.</p>
<p>Now, since the algorithm is essentially greedy, there can be situations when all edges to which the remaining triangles could have been welded, have already been positioned inside the structure and it is now impossible to find the welding edge.  In this case, the algorithm attempts to attach a triangle to the existing structure by a vertex only.  If such a possibility is found, an edge (the <b>pseudopod</b>) of the triangle is placed as vertically (or horizontally) as possible and then the welding process can be continued, since there already is a welding edge.</p>
<p>Let’s now focus on what happens to the fringe.  When a new triangle is welded, the two new edges are added to the fringe.  No edges are deleted however, because the welding edge might still have some free space to its other part.  Edges are deleted from the fringe only when they are detected as possible welding edges, but when the algorithm finds that there is no space around them actually.  I have considered several possibilities of correcting the fringe on different occasions; my conclusions so far have been that it’s not generally worth it, performance-wise.  This question however should be better investigated, including doing some complexity analysis.</p>
<p>You might have noticed that I do not in any way treat the situation when a pseudopod cannot be grown.  I have not encountered such situations during the testing yet, so I decided not to attempt to handle them before I have actually seen an example.  Taking into consideration that I am going to work with diagrams rather intensively later, if such situations are possible, I will indeed run into them.  I must confess that I haven’t considered the problem theoretically yet, though <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>The description of the essential parts of the algorithm is complete here, so I’m passing over to the overview of the remaining problems and further short-term plans.</p>
<p>Tom Bachmann, my mentor, has suggested that I describe the steps of the algorithm in the docs which come with the source code.  I will do this shortly.  I believe it is essential to write such documentation as soon as possible, despite the abundant (hopefully) comments in the code.</p>
<p>My immediately next task is, however, producing the actual <a href="http://www.tug.org/applications/Xy-pic/">Xy-pic</a> code.  I expect that getting this done at a basic level shouldn’t be hard.  However, drawing longer morphisms and avoiding intersections for as much as possible may prove a rather hard task to achieve.</p>
<p>Oh, and the almost forgotten conclusion: I now essentially have the core of the automatic diagram plotting functionality, since laying out objects is the most difficult part of the affair.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/220/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/220/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=220&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-02T20:42:12Z</updated>
    <category term="SymPy"/>
    <category term="automatic plotting"/>
    <category term="category theory"/>
    <category term="diagrams"/>
    <category term="gotcha"/>
    <category term="grid layout"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-08-29T08:40:27Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/07/02/gsoc-week-6</id>
    <link href="http://catchmrbharath.github.com/programming/2012/07/02/gsoc-week-6" rel="alternate" type="text/html"/>
    <title>GSoC Week 6</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have been trying to improve the implicit plotting module during this week. But I have hit a road block. I almost ran out of ideas to solve the problem.</p>

<p>Description:</p>

<p>The implicit plotting algorithm I implemented works something like below:</p>

<p>1) Get x and y interval. If it satisfies the expression throughout the interval, then plot it.</p>

<p>2) If it does not satisfy, throw away the intervals.</p>

<p>3) If it partially satisfies, then recursively subdivide into four intervals, and try again.</p>

<p>For cases of equality, the first point never holds true due to floating point errors. So we go on eliminating regions, and after a certain depth, plot the remaining region. These are the regions where there is at least one solution. This is the reason why the plots are rasterized. But there is an inherent bigger problem here. In the cases of expressions like $x^{3}$ even if the x interval is small, the resulting interval after computation will be large. Sometimes, due to these large intervals, there might be lots of y and x intervals which satisfy because of these errors. Even if we make x interval really small, the corresponding y interval will be large, ie the line widths become large. The explanation is more of a guess rather than the right explanation.</p>

<p>Examples:</p>

<p>Plot of $x^{y}=y^{x}$ <img height="400" src="http://catchmrbharath.github.com/images/02072012/fig1.png" width="600"/> Even if I increase my depth of recursion to higher values, the thickness becomes less, but doesn’t vanish. The plot actually should have been two separate curves.</p>
<img height="400" src="http://catchmrbharath.github.com/images/02072012/fig3.png" width="600"/>
<p>The Mac OSX’s Grapher uses a similar algorithm(A guess because they have similar rasterization) but takes care of the line widths.</p>

<p>If you feel you know where the problem is, please comment or email me. :)</p></div>
    </summary>
    <updated>2012-07-02T07:00:00Z</updated>
    <published>2012-07-02T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-19T07:40:29Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://blog.catchmrbharath.in/programming/2012/07/02/gsoc-week-6</id>
    <link href="http://blog.catchmrbharath.in/programming/2012/07/02/gsoc-week-6" rel="alternate" type="text/html"/>
    <title>GSoC Week 6</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have been trying to improve the implicit plotting module during this week. But I have hit a road block. I almost ran out of ideas to solve the problem.</p>

<p>Description:</p>

<p>The implicit plotting algorithm I implemented works something like below:</p>

<p>1) Get x and y interval. If it satisfies the expression throughout the interval, then plot it.</p>

<p>2) If it does not satisfy, throw away the intervals.</p>

<p>3) If it partially satisfies, then recursively subdivide into four intervals, and try again.</p>

<p>For cases of equality, the first point never holds true due to floating point errors. So we go on eliminating regions, and after a certain depth, plot the remaining region. These are the regions where there is at least one solution. This is the reason why the plots are rasterized. But there is an inherent bigger problem here. In the cases of expressions like $x^{3}$ even if the x interval is small, the resulting interval after computation will be large. Sometimes, due to these large intervals, there might be lots of y and x intervals which satisfy because of these errors. Even if we make x interval really small, the corresponding y interval will be large, ie the line widths become large. The explanation is more of a guess rather than the right explanation.</p>

<p>Examples:</p>

<p>Plot of $x^{y}=y^{x}$ <img height="400" src="http://blog.catchmrbharath.in/images/02072012/fig1.png" width="600"/> Even if I increase my depth of recursion to higher values, the thickness becomes less, but doesn’t vanish. The plot actually should have been two separate curves.</p>
<img height="400" src="http://blog.catchmrbharath.in/images/02072012/fig3.png" width="600"/>
<p>The Mac OSX’s Grapher uses a similar algorithm(A guess because they have similar rasterization) but takes care of the line widths.</p>

<p>If you feel you know where the problem is, please comment or email me. :)</p></div>
    </summary>
    <updated>2012-07-02T07:00:00Z</updated>
    <published>2012-07-02T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-29T08:40:29Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=169</id>
    <link href="http://rhoforsympy.wordpress.com/2012/07/01/week-6-tr-implementation-contd/" rel="alternate" type="text/html"/>
    <title>Week 6 : Tr implementation contd…</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I continued to work on the Tr operator and the related code needed for partial trace operations.  Following up with the list of tasks I had listed out for this week, I got the following items accomplished this week. 1. PR 1333 merged 2. Submitted PR 1396  for review : This PR has the [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=169&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I continued to work on the Tr operator and the related code needed for partial trace operations.  Following up with the list of tasks I had listed out for this week, I got the following items accomplished this week.</p>
<p>1. PR 1333 merged</p>
<p>2. Submitted <a href="https://github.com/sympy/sympy/pull/1396">PR 1396</a>  for review :</p>
<p>This PR has the following changes:</p>
<p>1. Printing ( default, latex and pretty).  The current output does not display the indices.  I would like some input on this from the reviewers on how to incorporate the information on indices into the output.</p>
<p>2. Handles indices in the constructor of Density class and related methods.</p>
<p>3. Handle partial trace operations especially wrt to Density operators.</p>
<p>4. Notebook example, some of which are listed below:</p>
<p><a href="http://rhoforsympy.files.wordpress.com/2012/07/tr_examp1.jpg"><img alt="" class="alignleft size-full wp-image-174" height="396" src="http://rhoforsympy.files.wordpress.com/2012/07/tr_examp1.jpg?w=500&amp;h=396" title="tr_examp" width="500"/></a></p>
<p>The activities I have in mind for next week are as follows.</p>
<p>1.  Address review comments on latest PR.</p>
<p>2.  Complete the test cases for existing partial trace implementation for Qubits. My plan is to get this changes merged with the current PR. This should happen by Tuesday.</p>
<p>With these 2 activities, I believe most of what is needed for Tr and density matrices could be considered complete. Again, I expect  <a href="https://github.com/ellisonbg">@ellisonbg</a> and <a href="https://github.com/flacjacket">@flacjacket</a> to provide some input on this.   Assuming, this is true, then I plan to start looking at</p>
<p>3. qapply() method to incorporate density op L and R operations.</p>
<p><span style="text-decoration: underline;">Aside:</span></p>
<p>BTW, for Emacs lovers and who love IPython Notebook, there is <a href="http://tkf.github.com/emacs-ipython-notebook/">IPython notebook for Emacs</a> now. I have not tried this yet,  but I plan to try this out this week and post my experience.</p>
<p>Happy coding!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/169/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/169/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=169&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-01T23:39:33Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-08-29T08:40:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=245</id>
    <link href="http://amakelov.wordpress.com/2012/07/01/google-summer-of-code-2012-week-6/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 6</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, here’s a brief summary of what I’ve been doing for the sixth week of my GSoC: Submitting, fixing and finally getting merged my second pull request. Thanks a lot to Stefan and my mentor David for reviewing it! now we have a lot more functionality for handling permutation groups. Some more debugging on <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/07/01/google-summer-of-code-2012-week-6/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=245&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all,</p>
<p>here’s a brief summary of what I’ve been doing for the sixth week of my GSoC:</p>
<ul>
<li>Submitting, fixing and finally getting merged my <a href="https://github.com/sympy/sympy/pull/1377" target="_blank">second pull request</a>. Thanks a lot to <a href="https://github.com/Krastanov" target="_blank">Stefan</a> and my mentor <a href="https://github.com/wdjoyner" target="_blank">David</a> for reviewing it! now we have a lot more functionality for handling permutation groups.</li>
<li>Some more debugging on PRINTELEMENTS (I was talking about it in the third bullet of <a href="http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/" target="_blank">my post from last week</a>). It turned out that it was still doing something slightly wrong but now it’s the way it should be. Apart from that, its speed was optimized by a different means of storing computed subwords of the group element being computed as a word in elements from the basic transversals (this assumes some knowledge of the theory of bases and strong generating sets; for a discussion, see [1],  pp.87-88,  pp.108-110)</li>
<li>In the <a href="http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/#comments" target="_blank">comments</a> on <a href="http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/" target="_blank">my post from last week</a>, I got a clarification from <a href="https://github.com/pernici" target="_blank">Mario</a> on the struggles with _coset_repr that I discussed in the third bullet of last week’s post. Now I’ll be able to use the current deterministic implementation of the Schreier-Sims algorithm whenever a BSGS is needed (after some minor modifications to the attributes of a PermutationGroup that are assigned after running Schreier-Sims).</li>
<li>Finally, the implementation of the algorithm BASESWAP ([1],  pp.102-103). This function is necessary for SUBGROUPSEARCH ([1], p.117) which in turn is necessary for the group intersection algorithm. <strong>This deserves some special attention – I have strong reasons to believe that the pseudocode &amp; its discussion in [1], pp. 102-103 contain the same mistake repeated several times.</strong> Namely, I think that line 3 of the pseudocode for BASESWAP should read <img alt="|\beta_i^{\left\langle T\right\rangle}|\neq s" class="latex" src="http://s0.wp.com/latex.php?latex=%7C%5Cbeta_i%5E%7B%5Cleft%5Clangle+T%5Cright%5Crangle%7D%7C%5Cneq+s&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="|\beta_i^{\left\langle T\right\rangle}|\neq s"/> instead of <img alt="|\beta_{i+1}^{\left\langle T\right\rangle}|\neq s" class="latex" src="http://s0.wp.com/latex.php?latex=%7C%5Cbeta_%7Bi%2B1%7D%5E%7B%5Cleft%5Clangle+T%5Cright%5Crangle%7D%7C%5Cneq+s&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="|\beta_{i+1}^{\left\langle T\right\rangle}|\neq s"/>. At first I implemented the algorithm the way it was given is pseudocode, and lost many hours (it wasn’t working) until I discovered that this little detail might be wrong. Now, I shall assume the notation used in [1] in order to follow their argument as closely as possible. My reasoning is as follows: as we change the set <img alt="T" class="latex" src="http://s0.wp.com/latex.php?latex=T&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="T"/> during the run of BASESWAP, we finally want to have <img alt="\left\langle T\right\rangle = H := G^{(i)}_{\beta_{i+1}}=G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cleft%5Clangle+T%5Cright%5Crangle+%3D+H+%3A%3D+G%5E%7B%28i%29%7D_%7B%5Cbeta_%7Bi%2B1%7D%7D%3DG_%7B%5Cbeta_1%2C+%5Cbeta_2%2C+%5Cldots%2C+%5Cbeta_%7Bi-1%7D%2C+%5Cbeta_%7Bi%2B1%7D%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\left\langle T\right\rangle = H := G^{(i)}_{\beta_{i+1}}=G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}"/>. The last line <img alt="|G^{(i)}| = |\Delta^{(i)}||\Delta^{(i+1)}||G^{(i+2)}| = |\beta_{i+1}^{G^{(i)}}||H|" class="latex" src="http://s0.wp.com/latex.php?latex=%7CG%5E%7B%28i%29%7D%7C+%3D+%7C%5CDelta%5E%7B%28i%29%7D%7C%7C%5CDelta%5E%7B%28i%2B1%29%7D%7C%7CG%5E%7B%28i%2B2%29%7D%7C+%3D+%7C%5Cbeta_%7Bi%2B1%7D%5E%7BG%5E%7B%28i%29%7D%7D%7C%7CH%7C&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="|G^{(i)}| = |\Delta^{(i)}||\Delta^{(i+1)}||G^{(i+2)}| = |\beta_{i+1}^{G^{(i)}}||H|"/> on page 102 of [1] is indeed correct by a straightforward application of the orbit-stabilizer theorem; so if we put <img alt="s = \frac{|\Delta^{(i)}||\Delta^{(i+1)}|}{ |\beta_{i+1}^{G^{(i)}}|}" class="latex" src="http://s0.wp.com/latex.php?latex=s+%3D+%5Cfrac%7B%7C%5CDelta%5E%7B%28i%29%7D%7C%7C%5CDelta%5E%7B%28i%2B1%29%7D%7C%7D%7B+%7C%5Cbeta_%7Bi%2B1%7D%5E%7BG%5E%7B%28i%29%7D%7D%7C%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="s = \frac{|\Delta^{(i)}||\Delta^{(i+1)}|}{ |\beta_{i+1}^{G^{(i)}}|}"/> we indeed have <img alt="|H| = s|G^{(i+2)}|" class="latex" src="http://s0.wp.com/latex.php?latex=%7CH%7C+%3D+s%7CG%5E%7B%28i%2B2%29%7D%7C&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="|H| = s|G^{(i+2)}|"/>. Up to this point, I believe the book. However, after that <strong>they say</strong> that the last equation implies that <img alt="s = |\beta_{i+1}^H|" class="latex" src="http://s0.wp.com/latex.php?latex=s+%3D+%7C%5Cbeta_%7Bi%2B1%7D%5EH%7C&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="s = |\beta_{i+1}^H|"/>. Looking more closely, by definitions we recall that <img alt="H = G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}, G^{(i+2)} = G_{\beta_1, \beta_2,\ldots, \beta_{i+1}}" class="latex" src="http://s0.wp.com/latex.php?latex=H+%3D+G_%7B%5Cbeta_1%2C+%5Cbeta_2%2C+%5Cldots%2C+%5Cbeta_%7Bi-1%7D%2C+%5Cbeta_%7Bi%2B1%7D%7D%2C+G%5E%7B%28i%2B2%29%7D+%3D+G_%7B%5Cbeta_1%2C+%5Cbeta_2%2C%5Cldots%2C+%5Cbeta_%7Bi%2B1%7D%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="H = G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}, G^{(i+2)} = G_{\beta_1, \beta_2,\ldots, \beta_{i+1}}"/>. Hence, <img alt="G^{(i+2)}" class="latex" src="http://s0.wp.com/latex.php?latex=G%5E%7B%28i%2B2%29%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G^{(i+2)}"/> is the stabilizer of <img alt="\beta_i" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta_i&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\beta_i"/> in <img alt="H" class="latex" src="http://s0.wp.com/latex.php?latex=H&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="H"/>, thus by the orbit-stabilizer theorem we have <img alt="|H| = |\beta_i^H||G^{(i+2)}|" class="latex" src="http://s0.wp.com/latex.php?latex=%7CH%7C+%3D+%7C%5Cbeta_i%5EH%7C%7CG%5E%7B%28i%2B2%29%7D%7C&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="|H| = |\beta_i^H||G^{(i+2)}|"/>, hence we must have <img alt="|\beta_i^H| = s" class="latex" src="http://s0.wp.com/latex.php?latex=%7C%5Cbeta_i%5EH%7C+%3D+s&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="|\beta_i^H| = s"/>, not <img alt="|\beta_{i+1}^H|=s" class="latex" src="http://s0.wp.com/latex.php?latex=%7C%5Cbeta_%7Bi%2B1%7D%5EH%7C%3Ds&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="|\beta_{i+1}^H|=s"/>. This same mistake (<img alt="\beta_{i+1}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta_%7Bi%2B1%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\beta_{i+1}"/> instead of <img alt="\beta_i" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta_i&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\beta_i"/>) appears several other times (in fact, all the times) in the discussion of BASESWAP and once in the pseudocode. Now that I changed it to <img alt="\beta_i" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cbeta_i&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\beta_i"/>, the implementation doesn’t break and behaves as expected. I also implemented the randomized version described in [1], p.103 and [2], p.98, and it also behaves as expected. I’d be extremely happy if anyone else is willing to go over this and check whether what I’m saying is true; I’m pretty sure it is, but I didn’t expect to find such a serious mistake in that book. I’m willing to provide their argument in its entirety or clarify the notation, just shoot me a comment below.</li>
</ul>
<p>So, that’s it for now. I’m in the process of furnishing my code for the next pull request (which will hopefully be submitted tomorrow), and then I’ll resume my work on subgroup intersections.</p>
<p>Edit: My pull request has not been submitted yet since writing the docstrings and tests took me longer than expected. The current state of it is available <a href="https://github.com/amakelov/sympy/tree/week4" target="_blank">here</a>, if anyone wants to take a look at how things are going. I still have to write some more tests, and hopefully will push it today for review.</p>
<p>Edit#2: <a href="https://github.com/sympy/sympy/pull/1406" target="_blank">The pull request</a> is finally out. It is some 1300 lines of code, so if people object I can remove some of the stuff and save them for a future pull request.</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<p>[2] Permutation Group Algorithms, Ákos Seress, Cambridge University Press</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/245/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/245/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=245&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-07-01T22:45:03Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-20T14:40:54Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/2012/06/30/gsoc-2012-post-7-22/</id>
    <link href="http://angadhsympy.wordpress.com/2012/06/30/gsoc-2012-post-7-22/" rel="alternate" type="text/html"/>
    <title>GSoC 2012 Post 7</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Another week and more things learned. A new functionality was added this week to mechanics- the partial velocities function. This function basically spits out a list of lists of partial velocities. A little background on the use of partial velocities in determining equations of motion- Partial velocities are used in Kane’s method to determine, what [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=263&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Another week and more things learned. A new functionality was added this week to mechanics- the partial velocities function. This function basically spits out a list of lists of partial velocities.</p>
<p>A little background on the use of partial velocities in determining equations of motion- Partial velocities are used in Kane’s method to determine, what Kane calls, generalized active force and generalized inertia force. A partial velocity is defined as the partial derivative of a velocity (or angular velocity) vector with respect to an independent generalized speed, which is a scalar. The outcome of these partial velocities is thus a vector. As many of these can be computed as may be relevant to the system. Then these partial velocities of the points are dotted with the appropriate active and inertial forces at those points.</p>
<p>As easy and straightforward as that may sound in terms of implementation, I found it a bit of a tedious task to decide what was the best way for implementing it. It’s one thing to write code that is for stand alone purposes and where you have creative reign but it is another when it comes to writing code that must replace chunks of existing code.</p>
<p>At first, when I wrote out this function, it was just spitting out a list of partial velocities. That wasn’t too hard. But then Jason in the comment on last week’s post suggested that changes be made into the Kane class so that the partial velocities function be incorporated into it. So as it stood, my function was useless for anything else but looking at partial velocities. So back to the drawing board!</p>
<p>In the mechanics package, the scalar equations that are computed are stored in a matrix. So, I thought what would be ideal is to get a matrix of partial velocities that would mimic the partial velocities table that we get when we try to derive equations of motion by hand. So I went about doing that. Finally when I tested my code, I was getting an error message I couldn’t figure out. Now it was time to debug the code but with an error message that I couldn’t really grasp. I guess I went about trying to decipher the error in an unconventional way, where I went and rewrote each line of my code into the test file. But this was good because I finally figured out the issue with the function- The Matrix package in sympy doesn’t accept objects which are of the Vector class type that we typically use to represent vectors in mechanics.</p>
<p>Speaking about this with Gilbert finally led to the conclusion that nested lists would be best in this case. So after having written the same function several times, I was finally able to rewrite the function successfully and a pertinent <a href="https://github.com/sympy/sympy/pull/1391">PR</a> opened. (I should add that in all this hoopla of writing and rewriting this function, I completely forgot about python list indexing beginning at 0. In hindsight it was hilarious to see myslef struggle with debugging my function one last time when I forgot one of Python’s quirks. I was up until the wee hours of the morning trying to figure that one out and then it hit me! Hah!). Currently I have been looking at the Kane.py module to see how to incorporate this function into it. In theory it shouldn’t be hard because the math that needs to be done fits right in, but it could be a bit more tedious than I recognize. But I’m confident that the function itself will not have to be tweaked to be used which is a good sign.</p>
<p>So this upcoming week, I will find a way to use this functionality in the Kane class. I will also be meeting with Gilbert and we will determine a plan in terms of how to implement a Lagrange class which is one of the major goals for this summer.</p>
<div/>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/263/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/263/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=263&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-30T09:17:23Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-08-29T08:40:28Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=409</id>
    <link href="http://krastanov.wordpress.com/2012/06/30/part-1-what-is-a-tensor-and-how-is-it-implemented-in-the-diffgeom-sympy-module/" rel="alternate" type="text/html"/>
    <title>Part 1: What is a Tensor and How is it Implemented in the diffgeom SymPy module?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The Math The notion of “a tensor” is commonly defined in two different ways. The first definition goes roughly like this (“roughly” means “do not tell this to your math teacher”): A tensor is a geometrical object that can be represented in some coordinate system as an n-dimensional array (it is not the array itself). [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=409&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h2>The Math</h2>
<p>The notion of “a tensor” is commonly defined in two different ways. The first definition goes roughly like this (“roughly” means “do not tell this to your math teacher”):</p>
<blockquote><p>A tensor is a geometrical object that can be represented in some coordinate system as an n-dimensional array (it is not the array itself). The quantities in that array depend on the coordinate system in which the representation is done, however there is a precise rule on how these quantities change if we switch to another coordinate system. It is this rule that defines what a tensor (and in particular a vector or a 1-form) is.</p></blockquote>
<p>The other definition, less used by physicists and more used by mathematicians is (again roughly) the following:</p>
<blockquote><p>A tensor is the sum of tensor products of forms and vectors. Forms and vectors are themselves given nice geometrical definitions.</p></blockquote>
<p>It is this second definition that is used in the diffgeom SymPy module. Naturally, we need to define “tensor product”, “vector” and “form” in order to use this definition. Indeed, the structure of the module follows closely these mathematical definitions.</p>
<p>Disclaimer: I have used and will use the words tensor and tensor field interchangeably. In order for this post to make any sense to you, ensure that you understand the difference and are able to find out the exact meaning from the context. The same goes also for vector / vector field and form / form field.</p>
<h2>The Implementation</h2>
<p>To create the mathematical structure of differential geometry or its implementation in a CAS like SymPy we need to build up the ladder of object definitions. Each new and more interesting notion will depend on the definition of the previous. Hence we start with the boilerplate object “Manifold” and on it we define a “Patch” (the diffgeom module implements all this boilerplate for commonly used manifold, however in order to explain how it works, we will redo everything from scratch):</p>
<p/><pre class="brush: python;">m = Manifold('my_manifold', 2) # A 2D manifold called 'my_manifold'
p = Patch('my_patch', m) # A patch called 'my_patch'
 </pre><p/>
<p>The first object that does something marginally interesting is the “Coordinate System”. Its role is to permit the parametrization of points on the patch by a tuple of numbers:</p>
<p/><pre class="brush: python;">cs_r = CoordSystem('R', p) # A coordinate system called 'R' (for rectangular)
point = cs_r.point([1,1]) # A point with coordinates (1, 1)
</pre><p/>
<p>If you have two or more coordinate systems you can tell the computer how to transform a tuple of numbers from one system to another:</p>
<p/><pre class="brush: python;">cs_p = CoordSystem('P', p)
cs_r.connect_to(cs_p, [x, y], [sqrt(x**2+y**2), atan2(y,x)])
cs_p.connect_to(cs_r, [r, t], [r*cos(t), r*sin(t)], inverse=False)
# Now the point instances know how to transform their coordinate tuples:
point.coords(cs_p)
# output:
#⎡  ___⎤
#⎢╲╱ 2 ⎥
#⎢     ⎥
#⎢  π  ⎥
#⎢  ─  ⎥
#⎣  4  ⎦
</pre><p/>
<p>However, differential geometry is not about calculating coordinates of points in different systems. It is about working with fields. Thus, we will focus on a single coordinate system from now on, and to be explicit about its complete independence of whether we want rectangular or other coordinates, we will just call it ‘c’ and leave it unconnected to other coordinate systems.</p>
<p/><pre class="brush: python;">c = CoordSystem('c', p)
</pre><p/>
<h3>Scalar Field</h3>
<p>We continue to build up our ladder of definitions in order to obtain a more interesting and useful theory/implementation. The next step is the “scalar field”. A scalar field is a mapping from the manifold (the set of points) to the real numbers (yes, just reals (maybe complex), the rest brings unnecessary complexity). Each coordinate system brings with itself the basic scalar fields (i.e. coordinate functions), that correspond to the mappings from a point to an element of its coordinate tuple. These basic scalar fields are implemented internally as BaseScalarField instances (this is however invisible to the user).</p>
<p/><pre class="brush: python;"> c.coord_functions()
# output: [c₀, c₁]
point = c.point([a, b])
c.coord_function(0)(point)
# output: a
</pre><p/>
<p>You can build more complicated fields by using the base scalar fields. This does not produce an instance of some new ScalarField class. The BaseScalarField instances just become a part of the expression tree of an ordinary Expr instance (the base for building expressions in SymPy).</p>
<p/><pre class="brush: python;">c0, c1 = c.coord_functions()
field = f(c0, 3*c1)/sin(c0)*c1**2
f
# output:
#               -1       2
#f(c₀, 3⋅c₁)⋅sin  (c₀)⋅c₁
field(point)
# output:
# 2
#b ⋅f(a, 3⋅b)
#────────────
#   sin(a)
</pre><p/>
<h3>Vector Field</h3>
<p>Then comes the vector field which is defined as an element of the set of differential operators over the scalar fields. All elements of this set can be build up as linear combinations of base vector fields. The base vector fields correspond to the partial derivatives with respect to the base scalar fields. They are implemented in the BaseVectorField class, which also is invisible to the user.</p>
<p/><pre class="brush: python;">c.base_vectors()
# output: [∂_c_0, ∂_c_1]
e_c0, e_c1 = c.base_vectors()
e_c0(c0)
# output: 1
e_c0(c1)
# output: 0
</pre><p/>
<p>One can also use more complicated fields (again, no need for new VectorField class, just being part of the expression tree of Expr):</p>
<p/><pre class="brush: python;">v_field = c1*e_c0 + f(c0)*e_c1
v_field
# output: f(c₀)⋅∂_c_1 + c₁⋅∂_c_0
s_field = g(c0, c1)
v_field(s_field)
# output:
#      ⎛ d            ⎞│           ⎛ d            ⎞│
#f(c₀)⋅⎜───(g(c₀, ξ₂))⎟│      + c₁⋅⎜───(g(ξ₁, c₁))⎟│
#      ⎝dξ₂           ⎠│ξ₂=c₁      ⎝dξ₁           ⎠│ξ₁=c₀
v_field(s_field)(point)
# output:
#  ⎛ d           ⎞│            ⎛ d           ⎞│
#b⋅⎜───(g(ξ₁, b))⎟│     + f(a)⋅⎜───(g(a, ξ₂))⎟│
#  ⎝dξ₁          ⎠│ξ₁=a        ⎝dξ₂          ⎠│ξ₂=b
</pre><p/>
<h3>1-Form Field and Differential</h3>
<p>The final ingredient needed for the basis of differential geometry is the 1-form field. A 1-form field is a linear mapping from the set of vector fields to the set of reals. The interesting thing is that all 1-forms can be build-up from linear combinations of the differentials of the base scalar fields.</p>
<p>There is the need to define what a differential is. The differential <img alt="df" class="latex" src="http://s0.wp.com/latex.php?latex=df&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="df"/> of the scalar field <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="f"/> is the 1-form field which has the following property: for every vector field <img alt="v" class="latex" src="http://s0.wp.com/latex.php?latex=v&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="v"/> one has <img alt="df(v) = v(f)" class="latex" src="http://s0.wp.com/latex.php?latex=df%28v%29+%3D+v%28f%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="df(v) = v(f)"/>.</p>
<p>In the diffgeom module the differential is implemented as the Differential class. The differentials of the base scalar fields are accessible with the base_oneforms() method, however one can construct the differential of whatever scalar field they wish. There is, as always, no dedicated OneFormField class. Everything is build up with Expr instances.</p>
<p/><pre class="brush: python;">c.base_oneforms()
# output: [ⅆ c₀, ⅆ c₁]
dc0, dc1 = c.base_oneforms()
dc0(e_c0), dc1(e_c0)
# output: (1, 0)
</pre><p/>
<p>And building up more complicated expressions:</p>
<p/><pre class="brush: python;">f_field = g(c0)*dc1 + 2*dc0
f_field(v_field)
# output: g(c₀)⋅f(c₀) + 2⋅c₁
</pre><p/>
<h3>The Rest</h3>
<p>Now that we have the basic building blocks in order to construct higher order tensors we use tensor and wedge products. More about them in part 2.</p>
<h2>What if I Need to Work with a Number of Different Coordinate Systems</h2>
<p>The only difference is that the chain rule of differentiation will be necessary. One can express the same statement in a more implementation independent way as “The rule for transformation of coordinates will need to be applied”. Anyhow, it works:</p>
<p>Examples from the already implemented <img alt="R^2" class="latex" src="http://s0.wp.com/latex.php?latex=R%5E2&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="R^2"/> module.</p>
<h3>Points Defined in one Coordinate System and Evaluated in Another</h3>
<p/><pre class="brush: python;">point_r = R2_r.point([x0, y0])
point_p = R2_p.point([r0, theta0])
R2.x(point_r)
# output: x₀
R2.x(point_p)
# output: r₀⋅cos(θ₀)
trigsimp((R2.x**2 + R2.y**2 + g(R2.theta))(point_p))
# output:
#  2
#r₀  + g(θ₀)
</pre><p/>
<h3>Vector Fields Operating on Scalar Fields</h3>
<p/><pre class="brush: python;">R2.e_x(R2.theta)
# output:
#            -1
#   ⎛ 2    2⎞
#-y⋅⎝x  + y ⎠
R2.e_theta(R2.y)
# output: cos(θ)⋅r
</pre><p/>
<h3>1-Form Fields Operating on Vector Fields</h3>
<p/><pre class="brush: python;">R2.dr(R2.e_x)
# output:
#         -1/2
#⎛ 2    2⎞
#⎝x  + y ⎠    ⋅x
</pre><p/>
<h2>What if I Need an Unspecified Arbitrary Coordinate System</h2>
<p>If it is just one coordinate system, nothing; all the examples in the first part were for a completely arbitrary system. If you want two systems with an arbitrary transformation rules between them, just use an arbitrary function when you connect them:</p>
<p/><pre class="brush: python;">m = Manifold('my_manifold', 2)
p = Patch('my_patch', m)
cs_a = CoordSystem('a', p)
cs_b = CoordSystem('b', p)
cs_a.connect_to(cs_b, [x, y], [f(x,y), g(x,y)], inverse=False)
cs_a.base_vector(1)(cs_b.coord_function(0))
# output:
#⎛ d            ⎞│
#⎜───(f(a₀, ξ₁))⎟│
#⎝dξ₁           ⎠│ξ₁=a₁
</pre><p/>
<h2>How Does This Relate to the Scheme Code by <a href="http://groups.csail.mit.edu/mac/users/gjs/" target="_blank">Gerald Jay Sussman</a> and <a href="http://groups.csail.mit.edu/mac/users/wisdom/" target="_blank">Jack Wisdom</a></h2>
<p>The diffgeom module is based in its entirety on the work of <a href="http://groups.csail.mit.edu/mac/users/gjs/" target="_blank">Gerald Jay Sussman</a> and <a href="http://groups.csail.mit.edu/mac/users/wisdom/" target="_blank">Jack Wisdom</a> on <a href="http://dspace.mit.edu/handle/1721.1/30520" target="_blank">“Functional Differential Geometry”</a>. The only substantial difference (in what is already implemented) is how the diffgeom module treats operations on fields. Both the diffgeom module and the original Scheme code behave like this:</p>
<p/><pre class="brush: plain;">scalar_field(point) ---&gt; an expression representing a real number
</pre><p/>
<p>However, the original scheme implementation and the SymPy module behave differently in these cases:</p>
<p/><pre class="brush: plain;"> vector_field(scalar_field)
form_field(vector_field)
 </pre><p/>
<p>As far as I know, the original Scheme code produces an opaque object. It indeed represents a scalar field, however <img alt="\partial_x(x)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cpartial_x%28x%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\partial_x(x)"/> will not produce directly <img alt="1" class="latex" src="http://s0.wp.com/latex.php?latex=1&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="1"/>. Instead it produces an object that returns 1 when evaluated at a point. The diffgeom module does this evaluation at the time at which one calls <img alt="\partial_x(x)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cpartial_x%28x%29&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\partial_x(x)"/> without the need to evaluate at a point, thus the result is explicit and not encapsulated in an opaque object.</p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=409&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-29T22:36:38Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-08-08T11:41:03Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=165</id>
    <link href="http://amakelov.wordpress.com/2012/06/27/illuminatus/" rel="alternate" type="text/html"/>
    <title>Illuminatus!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">“[it's] like having your brains smashed out by a slice of lemon, wrapped ’round a large gold brick.” Douglas Adams on …? A SLICE OF LEMON?! Why not apple. A large gold brick? Why not a large golden… apple. OK, I admit it, he was apparently talking about the Pan-Galactic Gargle Blaster. But he could <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/06/27/illuminatus/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=165&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: right;"><em>“[it's] like having your brains smashed out by a slice of lemon, wrapped ’round a large gold brick.”</em></p>
<p style="text-align: right;"><em>Douglas Adams on …?</em></p>
<p style="text-align: left;">A SLICE OF LEMON?! Why not apple. A large gold brick? Why not a large golden… apple. OK, I admit it, he was apparently talking about the <a href="http://en.wikipedia.org/wiki/Zaphod_Beeblebrox#Pan-Galactic_Gargle_Blaster" target="_blank">Pan-Galactic Gargle Blaster</a>. But he could have as easily been talking about (can you hear the drums?)</p>
<p style="text-align: center;"><a href="http://en.wikipedia.org/wiki/Illuminatus!"><img alt="" class=" wp-image-166 aligncenter" height="381" src="http://amakelov.files.wordpress.com/2012/06/illuminatus.gif?w=474&amp;h=381" title="Illuminatus!" width="474"/></a></p>
<p style="text-align: left;">Hell yeah. That’s right. <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/Illuminatus" target="_blank">The <em>Illuminatus!</em> trilogy</a>. This book is totally <a href="http://amakelov.files.wordpress.com/2012/06/a-strangelove_0.jpg" target="_blank">crazy</a>, <a href="http://www.youtube.com/watch?v=KThlYHfIVa8" target="_blank">crazy</a>, <a href="http://www.youtube.com/watch?v=NMNgbISmF4I" target="_blank">crazy</a>, <a href="http://www.youtube.com/watch?v=5ZaeLFPxo-c" target="_blank">crazy</a>, <a href="http://amakelov.files.wordpress.com/2012/06/harvey.jpg" target="_blank">crazy</a> in so many ways and on so many levels (and probably <a href="http://www.goodreads.com/quotes/show/26884" target="_blank">even more than that</a>, actually). It contains <a href="http://uncyclopedia.wikia.com/wiki/AAAAAAAAA!" target="_blank">a</a> <a href="http://www.scottaaronson.com/writings/bignumbers.html" target="_blank">shamelessly huge number</a> <a href="http://amakelov.files.wordpress.com/2012/06/what_did_you_expect.jpg" target="_blank">of</a> <a href="http://www.youtube.com/watch?v=6pmWojisM_E" target="_blank">references </a>to <a href="http://www.youtube.com/watch?v=a502RejLz8s" target="_blank">art</a>/<a href="http://en.wikipedia.org/wiki/Assassination_of_John_F._Kennedy" target="_blank">history</a>/<a href="http://amakelov.files.wordpress.com/2012/06/what_did_you_expect_2.jpg" target="_blank">whatnot</a>, and the funniest uses of <a href="http://amakelov.wordpress.com/2012/06/27/illuminatus/">self-reference</a> I’ve ever encountered. It holds a very special place in my library, and also it’s a lot of fun, that’s why I chose it as the first (and hopefully not last) book to be discussed in my blog.</p>
<p style="text-align: left;"><strong>This book is an easy read:</strong> right from its first line, “It was the year when they finally immanentized the Eschaton.”, it will push you forward (and maybe <a href="http://en.wikipedia.org/wiki/Pullback_%28differential_geometry%29" target="_blank">pull you back</a> when you finish it? Another inside joke from Math55…) through its dynamic plot, and you’ll be flying over the words, the sometimes absurdly long and complex sentences, the sudden shifts in time and place (and mindset), the infinite loads of irony, the puns, the Goddess(es), the talking porpoises, the playful mood, the underwater… whatever, laughing all the way. And – yay! It’s another sunny and exciting day of your life. You look up at the clear blue sky (no matter if it is clear and blue), infinitely more curious and infinitely more confused than you were when you started reading it. And that is always good. ‘What the hell was that?’, you might be asking yourself. What is left is this subtle feeling of a joke, resting somewhere under the worries of your mind – a small joke? a huge joke? maybe the world is a joke? maybe it was on you? – and it makes you smile mysteriously at everything and everyone you see that day. It makes you feel – or, more accurately, makes you <em>remember that you are</em> – liberated. And indeed, having your brains smashed out by a slice of the <a href="http://en.wikipedia.org/wiki/Apple_of_Discord" target="_blank">Apple of Discord</a> never felt so good.</p>
<p style="text-align: right;"><em>“Is”, “is.” “is” — the idiocy of the word haunts me. If it were abolished, human thought might begin to make sense. I don’t know what anything “is”; I only know how it seems to me at this moment” </em><br/>
<em> ― Robert Anton Wilson</em></p>
<p style="text-align: left;"><strong>This book is a hard read:</strong> you won’t know where you ARE, who the fnord characters ARE, whether what the two paranoid authors ARE scribbling about IS happening for real or not (<a href="http://amakelov.files.wordpress.com/2012/06/in_your_head.jpg" target="_blank">whatever that means</a>), what exactly <a href="http://www.goodreads.com/quotes/show/79199" target="_blank">IS</a> happening, and all this IS <a href="http://www.youtube.com/watch?v=bfhkuXuQ9eA" target="_blank">making you mad</a>, IS this some kind of crazy joke, why AM I even reading this?! Why all the weird conspiracy crap?! And fnord what IS the whole point of the story?!! It doesn’t make any sense whatsoever. I shouldn’t have bought fnord that! I’d better leave it back on the shelf…</p>
<p style="text-align: left;">You see what might <a href="http://en.wikipedia.org/wiki/Robert_Anton_Wilson#The_Cosmic_Trigger_series_and_other_books" target="_blank">trigger</a> the bad trip. So, simply put: just <a href="http://www.youtube.com/watch?v=l1m-FAaX7JA" target="_blank">keep an open mind</a>, and let the book come in.</p>
<p style="text-align: right;"><em>“The problem with quotes on the Internet is that you can’t always be sure of their authenticity.” </em></p>
<p style="text-align: right;"><em>Abraham Lincoln </em></p>
<div class="wp-caption aligncenter" id="attachment_195" style="width: 466px;"><a href="http://www.principiadiscordia.com/"><img alt="" class=" wp-image-195   alignright" height="342" src="http://amakelov.files.wordpress.com/2012/06/eris.jpg?w=456&amp;h=342" title="eris" width="456"/></a><p class="wp-caption-text">All Hail Eris! Or not. Whatever you like.</p></div>
<p>And as coincidence is a major theme of <em>‘Illuminatus!’</em>, there was a curious coincidence involved in me ordering the book. I had known about it for several years, however I had some money to spend on books, so I ordered this together with one other book that had caught my eye more recenly: <a href="http://en.wikipedia.org/wiki/Godel_escher_bach" target="_blank"><em>Gödel, Escher, Bach: An Eternal Golden Braid</em></a>. That’s a weird combination, I thought. Several months later, I found this about <em>‘Illuminatus!’</em>:</p>
<blockquote><p>In more recent years, it was complimented in the bibliography to the <em><a href="http://en.wikipedia.org/wiki/New_Hackers_Dictionary#1990_and_beyond" title="New Hackers Dictionary">New Hackers Dictionary</a></em> as a book that can help readers “understand the <a href="http://en.wikipedia.org/wiki/Hacker_culture" title="Hacker culture">hacker</a> mindset.” The Dictionary described it as:</p>
<div>An incredible berserko-surrealist rollercoaster of world-girdling conspiracies, intelligent dolphins, the fall of Atlantis, who really killed JFK, sex, drugs, rock’n'roll, and the Cosmic Giggle Factor. [...] The perfect <a href="http://en.wikipedia.org/wiki/Lateralization_of_brain_function" title="Lateralization of brain function">right-brain</a> companion to <a href="http://en.wikipedia.org/wiki/Douglas_Hofstadter" title="Douglas Hofstadter">Hofstadter</a>‘s <em><a href="http://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach" title="G&#xF6;del, Escher, Bach">Gödel, Escher, Bach</a></em>.</div>
</blockquote>
<p style="text-align: left;"><a href="http://en.wikipedia.org/wiki/The_Illuminatus!_Trilogy#Reviews_and_reputation" target="_blank">here</a>, and this about ‘<em>Gödel, Escher, Bach</em>‘:</p>
<blockquote>
<p style="text-align: left;">This book reads like an intellectual Grand Tour of hacker preoccupations. Music, mathematical logic, programming, speculations on the nature of intelligence, biology, and Zen are woven into a brilliant tapestry themed on the concept of encoded self-reference. The perfect left-brain companion to “Illuminatus”.</p>
</blockquote>
<p style="text-align: left;"><a href="http://www.iblist.com/book4778.htm" target="_blank">here</a>. Well, I was just stupefied at how well the <a href="http://www.forteantimes.com/features/commentary/396/the_23_phenomenon.html" target="_blank">Cosmic Coincidence Control Center</a> are doing their job, what can I say.</p>
<p style="text-align: right;"><em>Dr John Lilly refers to “the crew that never rests” as Cosmic Coincidence Control Center and warns that they pay special attention to those who pay attention to them.</em></p>
<p style="text-align: left;">About possible <strong>criticism</strong>: Yes, I’m aware of all the <strong>conspiracy theories</strong> mentioned (and developed) in <em>‘Illuminatus!’ </em>and the <em>‘Cosmic Trigger’</em> series. To put it firmly: <strong>I don’t care if any of them are true or not.</strong> When I read a book, I just read a book and that’s it. I agree that in some parts of <em>‘Cosmic Trigger’, </em>Wilson might appear a little assertive of such stuff, and I always hate it when someone’s like, ‘OK, see? That’s how it is, that’s the conspiracy, they’re not giving you the truth – but I am!’, but his overall approach is <a href="http://en.wikipedia.org/wiki/Agnosticism" target="_blank">agnostic</a> in nature. And in <em>‘Illuminatus!’ </em>I didn’t feel any signs of someone being assertive about anything. As I said, it left me even more confused and curious. So if you fell that the book is bad because it’s trying to convince you in some weird New World Order thing, <a href="http://en.wikipedia.org/wiki/The_Outer_Limits_%281963_TV_series%29#Introduction" target="_blank">the problem might actually be in your television set</a>.</p>
<p style="text-align: left;">As to the <strong>point</strong> of the book (I’ve been successfully procrastinating bringing this scary word up), as far as there is one, well, I can’t tell you what it is. It’s simply because I don’t know. I haven’t seen it. I wasn’t able (for good or for bad) to just finish the last page and say, “Hey, I finally see what all this was about. So cool.” And as author Robert A. Wilson used to read Joyce’s <a href="http://en.wikipedia.org/wiki/Ulysses_%28novel%29" target="_blank"><em>Ulysses</em></a> each year and find something new in it, I might do the same with <em>‘Illuminatus!’</em> (and maybe blog about it? haha!). So, nice job, Mr. Wilson! You should be glad, wherever you are. However, what I <em>feel</em> the point is, right now in this day and in this state of mind, recollecting about the experience I had while reading it a year or so ago, can be roughly summarized as:</p>
<p style="text-align: left;"><a href="http://amakelov.files.wordpress.com/2012/06/what_did_you_expect_2.jpg" target="_blank"><br/>
</a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/165/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/165/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/165/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/165/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/165/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/165/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/165/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/165/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/165/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/165/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/165/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/165/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/165/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/165/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=165&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-27T12:16:50Z</updated>
    <category term="Inspiration"/>
    <category term="Literature"/>
    <category term="Fiction"/>
    <category term="Humor"/>
    <category term="Illuminatus! Trilogy"/>
    <category term="Robert Anton Wilson"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging</title>
      <updated>2012-06-27T14:40:24Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=162</id>
    <link href="http://rhoforsympy.wordpress.com/2012/06/25/week-5-tr-class-implementation/" rel="alternate" type="text/html"/>
    <title>Week 5 : Tr class implementation</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I had not blogged during last week since I was away at the summer school where I had an opportunity to listen to and talk to both physicists and cs theorists working on the next quantum computer! There were  great presentations and the videos should be available shortly. So, now back to Sympy! Tasks accomplished this [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=162&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I had not blogged during last week since I was away at the <a href="http://cssqi2012.iqc.uwaterloo.ca/?page_id=21">summer school</a> where I had an opportunity to listen to and talk to both physicists and cs theorists working on the next quantum computer! There were  great presentations and the <a href="http://www.youtube.com/user/quantumiqc">videos</a> should be available shortly. So, now back to Sympy!</p>
<p><strong><span style="text-decoration: underline;">Tasks accomplished this week</span></strong></p>
<p>My main tasks for this week was to address all comments on pending PR 1333. In addition I had planned to complete printing operations on Tr operator and get started with qubit related Tr operations.  I accomplished the task on addressing comments on PR 1333 and also completed basic printing operations along with having the notebook examples done.  The changes outside of PR 1333 are available in my githhub branch(<a href="https://github.com/gdevanla/sympy/tree/trace_permute_equals">trace_permute_equal</a>) and I plan to submit a PR for these changes as soon as PR 1333 is merged.</p>
<p>In addition I worked on providing a permute() function and also had to play around with implementation of overriding _hashable_contents() method.  I had spend some time in figuring out the details of such an implementation and there was some discussion on this on the <a href="https://groups.google.com/d/msg/sympy/FVqM801IFzA/_9eOt7_ckEcJ">mailing list.</a>  For now, I have these 2 functions implemented ( but commented out) in branch <a href="https://github.com/gdevanla/sympy/tree/trace_permute_equals">trace_permute_equal</a>.</p>
<p>Therefore, one task that remained but which I could not get to this week was qubit implementation related to Tr.  Also, currently I am in the process of writing up how Tr operations should work on TensorProducts. I should have a write up very soon.</p>
<p>The tasks for next week, therefore would be  (roughly in this order)</p>
<p>1. Share a write up on TensorProduct wrt to Tr operations.</p>
<p>2. Push qubit related changes to my git repo</p>
<p>3. Get started on TensorProduct/Tr and have the first cut ready for review.</p>
<p>4 Get <a href="https://github.com/sympy/sympy/pull/1333">PR 1333</a> merged.</p>
<p>5. Get branch <a href="https://github.com/gdevanla/sympy/tree/trace_permute_equals">trace_permute_equal</a> merged. This branch has minor changes and I hope to get this merged as well this week.</p>
<p>Happy coding!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/162/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/162/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=162&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-25T00:16:41Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-08-29T08:40:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=382</id>
    <link href="http://krastanov.wordpress.com/2012/06/25/printing-in-sympy-for-the-differential-geometry-module/" rel="alternate" type="text/html"/>
    <title>Printing in SymPy (for the Differential Geometry Module)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I was doing some interesting refactoring, that brings quite a bit of new possibilities, however I will write about this in the coming days. For now… printing. Most importantly, any suggestions for improvements are very welcomed. Printing in SymPy is done really easily. You just add a _print_Whatever() method to the printer and [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=382&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I was doing some interesting refactoring, that brings quite a bit of new possibilities, however I will write about this in the coming days. For now… printing. Most importantly, any suggestions for improvements are very welcomed.</p>
<p>Printing in SymPy is done really easily. You just add a _print_Whatever() method to the printer and your new class is printed in whatever manner you wish.</p>
<p>For the moment I am printing scalar fields just as the name of the coordinate in bold non-italic, vector fields as <img alt="\partial" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cpartial&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\partial"/> with the name as a subscript and differentials as a fancy <img alt="d" class="latex" src="http://s0.wp.com/latex.php?latex=d&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="d"/> followed by the name.</p>
<p>First of all the unicode printer:</p>
<p><a href="http://krastanov.files.wordpress.com/2012/06/pprint.png"><img alt="" class="aligncenter size-full wp-image-383" src="http://krastanov.files.wordpress.com/2012/06/pprint.png?w=600" title="pprint"/></a></p>
<p>There are some obvious problems, like the fact that in unicode there is no subscript for <img alt="\theta" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctheta&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\theta"/> or <img alt="y" class="latex" src="http://s0.wp.com/latex.php?latex=y&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="y"/>.</p>
<p>And then the <img alt="\LaTeX" class="latex" src="http://s0.wp.com/latex.php?latex=%5CLaTeX&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\LaTeX"/> printer:</p>
<p><a href="http://krastanov.files.wordpress.com/2012/06/latex.png"><img alt="" class="aligncenter size-full wp-image-384" src="http://krastanov.files.wordpress.com/2012/06/latex.png?w=600" title="latex"/></a></p>
<p>Now I must find a nice way to print a Point() instance.</p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=382&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-24T22:24:19Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="printing"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-08-08T11:41:03Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=147</id>
    <link href="http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 5</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi everyone, here’s a brief summary of what I’ve been doing for the fifth week of my GSoC. Firstly, I finally had my first pull request merged; it’s all my fault I didn’t complain about it on the mailing list earlier : ) I had to fix a bunch of things on it (stuff like <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=147&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi everyone,</p>
<p>here’s a brief summary of what I’ve been doing for the fifth week of my GSoC.</p>
<ul>
<li>Firstly, I finally had <a href="https://github.com/sympy/sympy/pull/1319" target="_blank">my first pull request</a> merged; it’s all my fault I didn’t complain about it on the mailing list earlier : ) I had to fix a bunch of things on it (stuff like documentation using sphinx and some improvements in code quality, mainly docstrings), and now I’m really happy to have my first major contribution to sympy merged with the master branch. Thanks to everyone who helped in reviewing it – <a href="https://github.com/Krastanov" target="_blank">Stefan</a>, <a href="https://github.com/pernici" target="_blank">Mario</a>, <a href="https://github.com/ness01" target="_blank">Tom</a>, <a href="https://github.com/mrocklin" target="_blank">Matthew</a>, and of course my mentor <a href="https://github.com/wdjoyner" target="_blank">David</a>.</li>
<li>Secondly, my next pull request, mainly containing work from weeks 2 and 5. After some moderate rebasing over the fixes from my first pull request, it is available <a href="https://github.com/sympy/sympy/pull/1377" target="_blank">here</a>. Apart from implementations of <a href="http://amakelov.wordpress.com/2012/06/02/google-summer-of-code-2012-week-2/" target="_blank">what I did in week 2</a>, it addresses the issue of testing randomized algorithms ( which is still being discussed <a href="https://groups.google.com/forum/?fromgroups#!topic/sympy/2el1T0ZY-Z4" target="_blank">here</a> ), and splits the generators for the named groups (symmetric, dihedral,…) in a separate file (which is probably going to contain more and more constructors for some well-known groups as time goes by). The PR looks longer than it is ( : ) read: any help in the review process will be appreciated), mainly because some 250 lines were copied to a new file in order to accommodate the named groups module. I hope that this time I did a better job at splitting the different parts of the PR into several commits.</li>
<li>Finally, I started work on algorithms for backtrack searches in groups. These include stuff like printing all group elements (sort of boring, but you have to start somewhere), searching for subgroups of elements satisfying a given property, finding normalizers and centralizers,  intersection of subgroups,… In general, backtrack searches tend to be slow since all the elements in the group have to be visited, but there are ways of skipping large numbers of them. Also, for some problems in computational group theory, backtrack searches are the best we have today. They are described in [1], 4.6., and I’m currently following the exposition offered there. After two days of debugging, I finally got the function PRINTELEMENTS described in 4.6.1 of [1] to work; it turned out that the current implementation of the Schreier-Sims algorithm sets the field _coset_repr of an object of class PermutationGroup in sympy.combinatorics.perm_groups.py in a way that was unexpected to me. This little digression might help anyone else trying to understand the perm_groups file better. So for example consider the following:</li>
</ul>
<p/><pre class="brush: python;">In [297]: S = SymmetricGroup(4)

In [298]: S.schreier_sims()

In [299]: S._coset_repr
Out[299]:
[[[0, 1, 2, 3], [1, 2, 3, 0], [2, 3, 0, 1], [3, 0, 1, 2]],
[[0, 1, 2, 3], [0, 2, 1, 3], [0, 3, 1, 2]],
[[0, 1, 2, 3], [0, 1, 3, 2]]]
 
 In [300]: S._base
Out[300]: [0, 1, 2]

</pre><p/>
<p>From this and similar examples I concluded that the i-th component of _coset_repr is a transversal of the i-th basic orbit of the group S and tried to use this in PRINTELEMENTS. However, consired the following example:</p>
<p/><pre class="brush: python;">In [302]: G = PermutationGroup([Permutation([[0, 1, 2, 3], [4], [5]]), Permutation([[1, 3], [0], [2], [4], [5]]), Permutation([[0], [1], [2], [3], [4, 5]])])

In [303]: G.schreier_sims()

In [304]: G._base
 Out[304]: [0, 1, 4]

In [305]: G._coset_repr
 Out[305]:
 [[[0, 1, 2, 3, 4, 5],
 [1, 2, 3, 0, 4, 5],
 [2, 3, 0, 1, 4, 5],
 [3, 0, 1, 2, 4, 5]],
 [[0, 1, 2, 3, 4, 5], [0, 3, 2, 1, 4, 5]],
 [[0, 1, 2, 3, 4, 5]],
 [[0, 1, 2, 3, 4, 5]],
 [[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 5, 4]]]

</pre><p/>
<p>Here, the first two components of _coset_repr are as I expected, but the 3rd and 4th are something I didn’t expect to be there (I expected to get the 5th component instead of the 3rd, and no more components). Hence at present the behaviour of _coset_repr is not too clear to me. The current solution is to use the randomized version of the Schreier-Sims algorithm to get a base and a strong generating set. Another option would be to use the generators from the attribute _stabilizers_gens, but I haven’t tried that yet. Anyway, PRINTELEMENTS works now (edit: there are many other algorithms present for printing all the elements of a group, but this one is significant for the implementation of backtrack searches), and the order in which the elements of the group are visited (lexicographically with respect to the image of the base, in an ordering of <img alt="\Omega = \{0, 1,\ldots, n-1\}" class="latex" src="http://s0.wp.com/latex.php?latex=%5COmega+%3D+%5C%7B0%2C+1%2C%5Cldots%2C+n-1%5C%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\Omega = \{0, 1,\ldots, n-1\}"/> in which base points come first) is used in most of the following backtrack searches, so a large part of this algorithm will be reused in subsequent algorithms ( I hope : ) ). My description of the situation assumed some knowledge of the theory behind the Schreier-Sims algorithm, so if something is not quite clear feel free to ask in the comments!</p>
<p>That’s it for now. Next week, I’ll continue with backtrack searches, and hopefully will implement the subgroup intersection routine (it seems formidable right now)… and put some more effort into getting the second pull request merged – I’ve got a lot to catch up with in terms of getting my code in sympy : ) .</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/147/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/147/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=147&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-24T21:19:23Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-20T14:40:54Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/06/24/gsoc-week-5</id>
    <link href="http://catchmrbharath.github.com/programming/2012/06/24/gsoc-week-5" rel="alternate" type="text/html"/>
    <title>Gsoc week 5</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week has been mostly bug fixing and working on migrating the sympy ipython profile to sympy. I also wanted to add the functionality of <code>ipython -c qtconsole</code>. So it has been mostly hanging in the ipython irc, asking them lots of questions on how ipython works. I am really thankful to minrk who patiently taught me how to do most of the stuff. There are a few problems that I am facing, but I think I will have the qtconsole ready in a day.</p>

<p>I also submitted a pull request #1370 for my initial work on implicit plotting. Except for the bug of changing line thickness, it works pretty nicely. Please feel free to play with it and comment on the pull request if you encounter any bugs.</p></div>
    </summary>
    <updated>2012-06-24T07:00:00Z</updated>
    <published>2012-06-24T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-19T07:40:29Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://blog.catchmrbharath.in/programming/2012/06/24/gsoc-week-5</id>
    <link href="http://blog.catchmrbharath.in/programming/2012/06/24/gsoc-week-5" rel="alternate" type="text/html"/>
    <title>Gsoc week 5</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week has been mostly bug fixing and working on migrating the sympy ipython profile to sympy. I also wanted to add the functionality of <code>ipython -c qtconsole</code>. So it has been mostly hanging in the ipython irc, asking them lots of questions on how ipython works. I am really thankful to minrk who patiently taught me how to do most of the stuff. There are a few problems that I am facing, but I think I will have the qtconsole ready in a day.</p>

<p>I also submitted a pull request #1370 for my initial work on implicit plotting. Except for the bug of changing line thickness, it works pretty nicely. Please feel free to play with it and comment on the pull request if you encounter any bugs.</p></div>
    </summary>
    <updated>2012-06-24T07:00:00Z</updated>
    <published>2012-06-24T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-08-29T08:40:29Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/?p=217</id>
    <link href="http://angadhsympy.wordpress.com/2012/06/23/gsoc-2012-post-6-26/" rel="alternate" type="text/html"/>
    <title>GSoC 2012 Post 6</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This has been a good week in terms of progress and clarity. In terms of completed code, I now have the entire suite of momenta functions working perfectly. The pull request that I linked to last week now has a series of commits. Several helpful comments were made in the PR; most of it had [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=217&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This has been a good week in terms of progress and clarity. In terms of completed code, I now have the entire suite of momenta functions working perfectly. The pull request that I linked to last week now has a series of commits. Several helpful comments were made in the PR; most of it had to with improving the readability of the docstrings and I’m extremely thankful for the time taken by everyone to review my work.</p>
<p>Onto the details of the commits now- I implemented methods to determine linear and angular momenta of both individual particles and rigidbodies. These are working well. As I said last week, I was having trouble figuring out how to deal with a system of bodies. Consequently, I was thrown off track for a bit where I tried to figure out how I would go about doing this without having to restructure the existing code. Sadly (when I think of the time I lost doing this but simultaneously glad that I figured it out eventually), the answer had been staring me in the face. Whenever anyone uses ‘mechanics’ to compute the equations of motion, they are required to set up a body list so all I had to do was tap into that. I ultimately wrote up a little procedure that computes both the momenta for a system of rigid bodies and/or particles. I then polished up the previous tests I had written and wrote some additional tests for the newer functionality. Overall, it was very satisfying to see the body of work that has been contributed, It will be a pretty useful tool when the time comes to implement the Newton-Euler method to determine the equations of motion, though I may not be the one to do it (at least not probably within this summer) as I plan to attack Lagrange’s method for equation derivation.</p>
<p>To that end, I spent some time this week trying to see how I would go about including Lagrange’s method. In my proposal, I have stated that the intention is to have Lagrange’s method for holonomic systems, but this is the more trivial case and is pretty well known to most dynamicists. I’m hoping that I can push the boundaries a little further and not be limited to just holonomic systems. The problem with the Lagrange approach is that it requires the determination of Lagrange multipliers whilst dealing with nonholonomic systems and this is not a method that is well documented in the classical textbooks. Finding material on this is a little tedious and I’m still uncertain about implementing this portion but I’m hopeful that it can be done.</p>
<p>So apart from the completion of code and a literature review on Lagrange, I have begun on a function to determine partial velocities and another for kinetic energies of particles and rigidbodies. These aren’t particularly hard but I’m constantly thinking of how I would go about using these functions when it comes to Lagrange’s equations of motion. (Another issue here is that there a couple ways to determine the equations of motion of holonomic systems even in Lagrange’s approach. One involves determining a Lagrangian and performing some operations on the Lagrangian and another approach involves determining just kinetic energies and generalized forces.) The coming week will lead to some clarity on that, it appears. I ill also be talking to my grad school advisor about this matter as I’m confident he will have more insight on this.</p>
<p>One thing that I have failed to talk about in my previous posts is the difficulty (read as ‘frustrations’) with using git. For someone with a pretty poor background in programming, the amount of jargon in python alone is hard to deal with. I remember when I was accustoming myself to git via the progit online book, it all seemed so easy. In the last few weeks, I have realized how much more harder it is to do the right things in the right order when you’re working on a real project and not on an example. Somwhow theory is always easier than practice. The frustrations that I had had lesser to with git and more to do with the fact that it was taking so long to master. But I took some solace after conversations with the other people in my lab who have worked on it when they said that it took them a while to get to grips with it. But nonetheless, I can see why it such an important tool. Over the last couple of weeks, I have gotten very familiar with not only the trivial aspects of making new branches and rebasing but also with the more powerful things like branching off of the right branches correctly and just in general better planning of projects. It was also also useful to learn that I could pull work from other people and collaborate on their work too.</p>
<p>One of the lessons that I have learned this week though is that I shouldn’t be worried about being a bit of a slow coder as everyone takes a while to get fast at things. What’s more important is to have ‘usable’ code. BUT I will be picking up the pace from here on, I believe. Python has definitely got me interested in programming like never before. All in all. a pretty good week, personally.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/217/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/217/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=217&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-23T09:17:51Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-08-29T08:40:28Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=130</id>
    <link href="http://amakelov.wordpress.com/2012/06/18/google-summer-of-code-2012-week-4/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 4</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi everyone, Here’s a brief summary of what I’ve been doing for the 4-th week of my GSoC. This week, like the previous one, was not intense in terms of coding. Here’s what I have up and running, basically what I was talking about last week: A working implementation of the randomized Schreier-Sims algorithm. This <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/06/18/google-summer-of-code-2012-week-4/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=130&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi everyone,</p>
<p>Here’s a brief summary of what I’ve been doing for the 4-th week of my GSoC.</p>
<p>This week, like the previous one, was not intense in terms of coding. Here’s what I have up and running, basically what I was talking about last week:</p>
<ul>
<li>A working implementation of the randomized Schreier-Sims algorithm. This still needs to be integrated with the deterministic version of the algorithm, using the fields  _base, _coset_repr, _coset_repr_n, stabilizers_gens so that a result from the randomized algorithm can be verified deterministically. Also, it’s been <a href="http://amakelov.wordpress.com/2012/06/10/google-summer-of-code-2012-week-3/#comments" target="_blank">suggested </a>that we have a function that determines the base and transversal elements for the basic orbits by a given generating set that is known to be strong. This won’t be hard to implement, and will be helpful for the Butler-Portugal algorithm for tensor canonicalization – see <a href="https://github.com/sympy/sympy/pull/1326#issuecomment-6236332" target="_blank">this</a> pull request for more information if you are interested! For more on bases and strong generating sets, see [1], pp.101-119</li>
<li>A function <img alt="\text{DirectProduct(*groups)}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctext%7BDirectProduct%28%2Agroups%29%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\text{DirectProduct(*groups)}"/> that constructs the direct product of several groups. For more than two groups, <img alt="\text{DirectProduct}(G_1,\ldots, G_n)" class="latex" src="http://s0.wp.com/latex.php?latex=%5Ctext%7BDirectProduct%7D%28G_1%2C%5Cldots%2C+G_n%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\text{DirectProduct}(G_1,\ldots, G_n)"/> is several times faster than calling <img alt="G_1*\ldots * G_n" class="latex" src="http://s0.wp.com/latex.php?latex=G_1%2A%5Cldots+%2A+G_n&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="G_1*\ldots * G_n"/> (benchmarked it), thus it makes sense to have such a function. This is later used in constructing an arbitrary abelian group by its cycle decomposition.</li>
<li>A function for calculating the degree of transitivity of a permutation group. The idea is very brute-force: we look at the orbit of a <img alt="k+1" class="latex" src="http://s0.wp.com/latex.php?latex=k%2B1&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="k+1"/>-tuple <img alt="(0, 1, \ldots, k)" class="latex" src="http://s0.wp.com/latex.php?latex=%280%2C+1%2C+%5Cldots%2C+k%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="(0, 1, \ldots, k)"/> for <img alt="k = 0, 1, \ldots, n-1" class="latex" src="http://s0.wp.com/latex.php?latex=k+%3D+0%2C+1%2C+%5Cldots%2C+n-1&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="k = 0, 1, \ldots, n-1"/> and check if it spans all possible <img alt="k+1" class="latex" src="http://s0.wp.com/latex.php?latex=k%2B1&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="k+1"/>-tuples. This is really bad since the number of tuples is growing like <img alt="n^{k+1}" class="latex" src="http://s0.wp.com/latex.php?latex=n%5E%7Bk%2B1%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n^{k+1}"/>, hence the complexity is <img alt="O(n^{k+1}r)" class="latex" src="http://s0.wp.com/latex.php?latex=O%28n%5E%7Bk%2B1%7Dr%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="O(n^{k+1}r)"/> where <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="k"/> is the degree of transitivity, <img alt="r" class="latex" src="http://s0.wp.com/latex.php?latex=r&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="r"/> is the number of generators. It seems that some sort of randomization that checks only several randomly chosen tuples for membership in the orbit will decrease the complexity, but to make sure we still need to do all the checks if the random tuples pass, which is again <img alt="O(n^{k+1}r)" class="latex" src="http://s0.wp.com/latex.php?latex=O%28n%5E%7Bk%2B1%7Dr%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="O(n^{k+1}r)"/>. Some bound on the probability will be good to know here.</li>
</ul>
<p>The main focus this week was on several discussions about future changes in the permutation groups module, and on making some more effort to get my code so far merged <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  :</p>
<ul>
<li>In <a href="https://groups.google.com/forum/?fromgroups#!topic/sympy/dpeN1Z9pf9c" target="_blank">this</a> post to the mailing list, it was suggested to implement an algorithm for intersecting subgroups of a given group so that it can be used in the tensor canonicalization algorithm (again, see <a href="https://github.com/sympy/sympy/pull/1326#issuecomment-6236332" target="_blank">here</a>). This is done in [1] but seems fairly complicated and opens the subject of backtrack searches in permutation groups; I’ll try to figure it out and implement it this coming week.</li>
<li>In <a href="https://groups.google.com/forum/?fromgroups#!topic/sympy/2el1T0ZY-Z4" target="_blank">this</a> post to the mailing list, we discussed ways of testing randomized algorithms (and there are a lot of them involved in computational group theory), and an agreement was reached that some sort of manual setting of the randomized output (via an additional argument) is a sensible approach.</li>
<li>In <a href="https://groups.google.com/forum/?fromgroups#!topic/sympy/xRXpKZuvpzg" target="_blank">this</a> post to the mailing list, we discussed some changes in interface in the permutations module. Even though not everybody agrees with what I last suggested, I’ll carry these changes out and see how things unfold (i.e., whether people are happy)</li>
<li>Finally, my work from week 1 is, I hope, ready to be merged, now that I’ve made the changes suggested in the discussion of the <a href="https://github.com/sympy/sympy/pull/1319" target="_blank">pull request</a> . I (finally) got familiar with the sphinx system and building the docs for sympy, and with all the conventions for writing docstrings (and convinced myself that I’ve been writing them the wrong way, I’ll fix all the docstrings in the module in the future). By the way, I installed the sphinx system in a virtualenv at the suggestion of S. Krastanov, and found the following <a href="http://iamzed.com/2009/05/07/a-primer-on-virtualenv/" target="_blank">guide </a>really helpful in the process. When the week1 branch gets merged, a pull request with the week2 code will follow shortly, and then with the rest of the code so far…</li>
<li>And in <a href="https://groups.google.com/forum/?fromgroups#!topic/sympy/bc2viXVsVmU" target="_blank">this </a>discussion, there were some more changes suggested, for example David proposed isolating the named groups (Symmetric, Dihedral, …) in a separate module, which I’m going to do in one of the next pull requests.</li>
</ul>
<p>So, that’s it for now. Next week I’ll focus on getting some more of my code merged and backtrack searches.</p>
<p>[1] Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/130/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/130/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=130&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-18T00:30:18Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-20T14:40:53Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=336</id>
    <link href="http://krastanov.wordpress.com/2012/06/17/integral-curves-of-vector-fields-in-sympy/" rel="alternate" type="text/html"/>
    <title>Integral Curves of Vector Fields in SymPy</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">A week or two ago I implemented some basic functionality for work with integral curves of vector fields. However, I needed to make additional changes in other parts of SymPy in order for the ODE solver to work with systems of equations and with initial conditions. I also wanted to get my plotting module merged [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=336&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>A week or two ago I implemented some basic functionality for work with integral curves of vector fields. However, I needed to make additional changes in other parts of SymPy in order for the ODE solver to work with systems of equations and with initial conditions. I also wanted to get my plotting module merged so I can show some visualizations if necessary.</p>
<p>Now that all this is ready (even though not everything is merged in SymPy master) I can show you some of the most basic capabilities implemented in the differential geometry module. First, we start with the boilerplate:</p>
<h3>A Simple Field</h3>
<p/><pre class="brush: python;">from sympy.diffgeom import *
from sympy.diffgeom.Rn import * # This gives me:
                                    #   - R2_p - the polar coord system
                                    #   - R2_r - the rectangular coord system
                                    #   - x,y,r,theta - the base scalar fields
                                    #   - e_x, ... - the base vector fields
# Define some fields to play with
# (these are the same fields, defined in two different ways):
vector_field_circular_p = R2_p.e_theta
vector_field_circular_r = -R2.y*R2.e_x + R2.x*R2.e_y
# Define the same point in two different ways
point_p = R2_p.point([1,pi/2])
point_r = R2_r.point([0,1])
</pre><p/>
<p>The r index is for rectangular coordinate systems and the p index is for polar.</p>
<p>Now using <code>intcurve_diffequ</code> we can generate the differential equations for the integral curve. This function also generates the required initial conditions:</p>
<p/><pre class="brush: python;">#        vector field      free parameter for    starting point
#                  |        the curve     |     /          coord system
#                  v                      v    v      v-- for the equation
intcurve_diffequ(vector_field_circular_p, t, point_p, R2_p)
# output:
#   d            d
#([ ──(f₀(t)),   ──(f₁(t)) - 1  ],
#   dt           dt
#
#                        π
# [f₀(0) - 1,    f₁(0) - ─      ])
#                        2

intcurve_diffequ(vector_field_circular_p, t, point_p, R2_r)
# output:
#           d                     d
#([ f₁(t) + ──(f₀(t)),   -f₀(t) + ──(f₁(t))  ],
#           dt                    dt
#
# [ f₀(0),               f₁(0) - 1           ])
</pre><p/>
<p>Here we have equations for the functions <img alt="f_0" class="latex" src="http://s0.wp.com/latex.php?latex=f_0&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="f_0"/> and <img alt="f_1" class="latex" src="http://s0.wp.com/latex.php?latex=f_1&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="f_1"/> which are by convention the names that <code>intcurve_diffequ</code> gives for the first and second coordinate.</p>
<p>The cool thing is that we can mix the coordinate systems in any way we wish. The code will automatically make the needed coordinate transformation and return the equations in the demanded coordinate system independently of the coordinate systems in which the input objects were defined (at worst you will need to call some simplification routines):</p>
<p/><pre class="brush: python;">a = intcurve_diffequ(vector_field_circular_p, t, point_p, R2_r)
a == intcurve_diffequ(vector_field_circular_p, t, point_r, R2_r)
# True
a == intcurve_diffequ(vector_field_circular_r, t, point_r, R2_r)
# True
a == intcurve_diffequ(vector_field_circular_r, t, point_p, R2_r)
# True
</pre><p/>
<p>Solving the equations actually gives (this solver is not yet in SymPy master as of the time of writing):</p>
<p/><pre class="brush: python;">equ_r, init_r = intcurve_diffequ(vector_field_circular_r, t, point_r, R2_r)
sol_r = dsolve(equ_r+init_r, [Function('f_0')(t), Function('f_1')(t)])
[simplify(s.rewrite(sin)) for s in sol_r] # some simplification
#[f₀(t) = -sin(t), f₁(t) = cos(t)]            # is necessary because
                                              # dsolve returned complex
                                              # exponentials
</pre><p/>
<p>Even simpler:</p>
<p/><pre class="brush: python;">equ_p, init_p = intcurve_diffequ(vector_field_circular_p, t, point_p, R2_p)
dsolve(equ_p+init_p, [Function('f_0')(t), Function('f_1')(t)])
# output:
#[f₀(t) = 1,
#             π
# f₁(t) = t + ─
#             2]
</pre><p/>
<p>This is obviously just a circle (did I mentioned that the vector field that I defined is circular). There is no need to plot it as it is fairly simple. However a slight change will render the field a bit more interesting:</p>
<h3>Radial Component</h3>
<p/><pre class="brush: python;"># A circular field that also pushes in radial direction
# towards an equilibrium radius.
v_field = R2.e_theta + (r0 - R2.r)*R2.e_r
# An initial position slightly away from the
# equilibrium one.
start_point = R2_p.point([r0+delta, 0])
equ, init = intcurve_diffequ(v_field, t, start_point)
equ
#                d            d
#[ -r₀ + f₀(t) + ──(f₀(t)),   ──(f₁(t)) - 1 ]
#                dt           dt

init
#[-δ - r₀ + f₀(0), f₁(0)]

dsolve(equ+init, [Function('f_0')(t), Function('f_1')(t)])
#            -t
#[f₀(t) = δ⋅ℯ   + r₀, f₁(t) = t]
</pre><p/>
<p>This gives a spiral tending towards the equilibrium radius <img alt="r_0" class="latex" src="http://s0.wp.com/latex.php?latex=r_0&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="r_0"/>. Let us extract the coordinates from these equations and plot the resulting curve:</p>
<p/><pre class="brush: python;">intcurve_coords = [eq.rhs for eq in dsolve(equ+init, [Function('f_0')(t), Function('f_1')(t)])]
intcurve_coords
#    -t
#[δ⋅ℯ   + r₀, t]

# We need this in Cartesian coordinates for the plot routine.
# We could have solved for Cartesian coordinates since the
# beginning, however our current approach permits us to see
# how to use the `CoordSys` classes to change coordinate systems:
coords_in_cartesian = R2_p.point(intcurve_coords).coords(R2_r)
coords_in_cartesian
#⎡⎛   -t     ⎞       ⎤
#⎢⎝δ⋅ℯ   + r₀⎠⋅cos(t)⎥
#⎢                   ⎥
#⎢⎛   -t     ⎞       ⎥
#⎣⎝δ⋅ℯ   + r₀⎠⋅sin(t)⎦

# Substitute numerical values for the plots:
x,y = coords_in_cartesian.subs({delta:0.5, r0:1})
plot(x,y, (t,0,4*pi))
#Plot object containing:
#[0]: parametric cartesian line:
#      ((1 + 0.5*exp(-t))*cos(t), (1 + 0.5*exp(-t))*sin(t))
#      for t over (0.0, 12.566370614359172)
</pre><p/>
<p><a href="https://krastanov.files.wordpress.com/2012/06/integral_curve.png"><img alt="simple integral curve" class="aligncenter size-medium wp-image-354" height="225" src="https://krastanov.files.wordpress.com/2012/06/integral_curve.png?w=300&amp;h=225" title="integral_curve" width="300"/></a></p>
<p>This is all great, but what happens if one has to work with more complicated fields. For instance the following simple field will not permit analytical solution:</p>
<h3>No Analytical Solution</h3>
<p/><pre class="brush: python;">v_field = R2.e_theta + r0*sin(1 - R2.r/r0)*R2.e_r
equ, init = intcurve_diffequ(v_field, t, start_point)
equ
#[
#        ⎛    f₀(t)⎞   d
#- r₀⋅sin⎜1 - ─────⎟ + ──(f₀(t))
#        ⎝      r₀ ⎠   dt       ,
#
#d
#──(f₁(t)) - 1
#dt           ]
</pre><p/>
<p>For cases like this one the user can take advantage of one of the numerical ODE solvers from scipy. Or sticking to symbolic work he can use the <code>intcurve_series</code> function that gives the series expansion for the curve:</p>
<p/><pre class="brush: python;">intcurve_series(v_field, t, start_point, n=1)
#⎡δ + r₀⎤
#⎢      ⎥
#⎣  0   ⎦

intcurve_series(v_field, t, start_point, n=2)
#⎡            ⎛    δ + r₀⎞     ⎤
#⎢δ + r₀⋅t⋅sin⎜1 - ──────⎟ + r₀⎥
#⎢            ⎝      r₀  ⎠     ⎥
#⎢                             ⎥
#⎣              t              ⎦

intcurve_series(v_field, t, start_point, n=4, coeffs=True)
#[
#⎡δ + r₀⎤
#⎢      ⎥
#⎣  0   ⎦,
#
#⎡        ⎛    δ + r₀⎞⎤
#⎢r₀⋅t⋅sin⎜1 - ──────⎟⎥
#⎢        ⎝      r₀  ⎠⎥
#⎢                    ⎥
#⎣         t          ⎦,
#
#⎡     2    ⎛    δ + r₀⎞    ⎛    δ + r₀⎞⎤
#⎢-r₀⋅t ⋅sin⎜1 - ──────⎟⋅cos⎜1 - ──────⎟⎥
#⎢          ⎝      r₀  ⎠    ⎝      r₀  ⎠⎥
#⎢──────────────────────────────────────⎥
#⎢                  2                   ⎥
#⎢                                      ⎥
#⎣                  0                   ⎦,
#
#⎡      ⎛     2                  2            ⎞                ⎤
#⎢    3 ⎜      ⎛    δ + r₀⎞       ⎛    δ + r₀⎞⎟    ⎛    δ + r₀⎞⎥
#⎢r₀⋅t ⋅⎜- sin ⎜1 - ──────⎟ + cos ⎜1 - ──────⎟⎟⋅sin⎜1 - ──────⎟⎥
#⎢      ⎝      ⎝      r₀  ⎠       ⎝      r₀  ⎠⎠    ⎝      r₀  ⎠⎥
#⎢─────────────────────────────────────────────────────────────⎥
#⎢                              6                              ⎥
#⎢                                                             ⎥
#⎣                              0                              ⎦]
</pre><p/>
<p>However these series do not always converge to the solution, so care should be taken.</p>
<p>There are other amusing possibilities already implemented, however I will write about them another time.</p>
<p>If you want to suggest more interesting examples, please do so in the comments.</p>
<br/>  <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=336&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-17T20:40:16Z</updated>
    <category term="GSoC - diffgeom"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="integral curve"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <category term="vector analysis"/>
    <category term="vector field"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-08-08T11:41:03Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=200</id>
    <link href="http://scolobb.wordpress.com/2012/06/17/the-matrix/" rel="alternate" type="text/html"/>
    <title>The Matrix</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Since my implementation of the base classes of category theory has received an “almost good to go” status, I am now fully transitioning into the second stage of my project: drawing diagrams. I expect this stage to be considerably more thrilling since during it I am going to write some actual functionality, i.e., code that [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=200&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Since <a href="https://github.com/sympy/sympy/pull/1338">my implementation</a> of the base classes of category theory has received an “almost good to go” status, I am now fully transitioning into the second stage of <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">my project</a>: drawing diagrams.  I expect this stage to be considerably more thrilling since during it I am going to write some actual functionality, i.e., code that does something useful™.</p>
<p>Well, I guess I don’t really have to expect anything any more, since I am already thrilled: a couple days ago I found an awesome LaTeX package, <a href="http://www.tug.org/applications/Xy-pic/">Xy-pic</a>, which allows typesetting precisely what I need: diagrams with grid-like layout.  This Wikipedia <a href="http://en.wikipedia.org/wiki/File:First_isomorphism_theorem_(plain).svg">page</a> shows how easy it is do produce a commutative diagram with this package.  My initial plan was to go with <a href="http://www.texample.net/tikz/">TikZ</a>, which is also awesome, but it is much better for more general drawing tasks.  With TikZ, it would have been necessary to manually arrange objects in the diagram in a grid, place text over arrows, and decide as to how the arrows should curve.  This is not the most difficult part of the diagram drawing business, but it is always nice to use some stuff which someone else has already done (better).</p>
<p>In this post I will try to outline how I see the implementation of the diagram drawing functionality now, after I have went through the review process of my first large chunk of code in SymPy.</p>
<p>According to the <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">proposal</a>, the process of drawing a diagram includes two stages.  After the first stage, the matrix which will serve as the outline of the visual representation of the diagram should be constructed.  I plan to have the whole first stage done in the <tt>DiagramGrid</tt> class, which will be constructed from a <tt>Diagram</tt> and will act a lot like a matrix in that it will be possible to see its dimensions and what lies at a position given by rectangular coordinates.  It will also be possible to find out which morphisms connect a certain node in the matrix to other nodes, and whether it is likely that it overlaps with other morphisms or not.  Here the job of <tt>DiagramGrid</tt> ends.  A minor remark is nevertheless due before proceeding to the actual drawing.  In the proposal I stated that certain objects which don’t fit easily in the existing matrix will be arranged in a circle around the existing structure.  I have abolished this, because it will break the idea of typesetting the diagram in a matrix, which makes the whole thing considerably harder to handle.  Instead, these “unfitting” objects will be placed along one of the four edges of the frame of the diagram, while the morphisms going into these objects will be marked with the flag which shows that they may overlap with other morphisms.</p>
<p>The second stage of the diagram drawing process is actually typesetting the diagram matrix using Xy-pic.  This part should be pretty straightforward, since it is basically about putting the matrix that has resulted from the first stage into an Xy-pic matrix.  I plan to have the second stage of drawing implemented in the class <tt>DiagramGridDrawer</tt>.  This class will contain the method <tt>draw_outline</tt>, which will return an Xy-pic representation of a <tt>DiagramGrid</tt>.  The drawer class will have a dictionary of morphism name formatters, which will associate a property to a function of one string argument.  For example, the property “exists” may be associated to a function which prepends its argument with the mathematical symbol “exists”.  The drawer class will also have a dictionary of morphism styles, which will map string properties to arrow styles.  I have also considered taking advantage of the fact that morphism properties are not enforced to be strings, and putting some additional formatting information into those properties.  I am not yet sure that it is necessary, though, so I don’t include this into the plan.</p>
<p>Now, there are some changes to the timeline in the proposal, which are caused in part by the fact that I have spent so much time on bringing my first pull request up to scratch, and in part by the fact that I now have a slightly different vision on how to implement the drawing.  Thus I plan to spend the coming week, June 18 – June 24, on implementing <tt>DiagramGrid</tt>.  Then, in the next week, June 25 – July 1, I plan to implement <tt>DiagramGridDrawer</tt> and extensively test both classes.  The week July 2 – July 8 I reserve for getting my changes merged.  Not that I expect to spend a whole week on this; but I’d rather allocate slightly more time, with some reserve, than make promises which I may fail to fulfill.</p>
<p>I would like to explicitly remark the fact that the changes to the timeline do not delay the moment when I plan to have the drawing functionality ready.  Therefore I’m still not too far astray from my planned timing <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/200/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/200/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=200&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-16T22:34:34Z</updated>
    <category term="SymPy"/>
    <category term="automatic plotting"/>
    <category term="category theory"/>
    <category term="commutative diagram"/>
    <category term="diagram drawing"/>
    <category term="xy-pic"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-08-29T08:40:26Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/2012/06/16/gsoc-2012-post-5-35/</id>
    <link href="http://angadhsympy.wordpress.com/2012/06/16/gsoc-2012-post-5-35/" rel="alternate" type="text/html"/>
    <title>GSoC 2012 post 5</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This has been a very interesting week for me. I have learned a lot more about the intricacies of Python and how sympy.physics.mechanics has been written. I should admit that as an engineer, my programming background isn’t as strong as that of others so maybe I’m not asking the right questions. But I’m also with several [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=167&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This has been a very interesting week for me. I have learned a lot more about the intricacies of Python and how sympy.physics.mechanics has been written. I should admit that as an engineer, my programming background isn’t as strong as that of others so maybe I’m not asking the right questions. But I’m also with several questions after writing my first ‘formal’ code.</p>
<p>I have opened a <a href="https://github.com/sympy/sympy/pull/1346/files#r982392">pull request</a> with my functions for angular momenta for both particles and rigid body. I don’t intend to go into the details of the mechanics of it but one thing that I have asked myself upon writing my first set of code is whether it is useful in and of itself. I’m not convinced about it being the best implementation. The code definitely spits out the (linear or angular) momentum of any individual component of a system but I haven’t found a suitable way to determine the momentum of an entire system that may compromise a multi-body system i.e. one that has more than one kind of object, in this case ‘Particles’ and ‘RigidBodies’. I believe it is fairly trivial to deal with just one of these object types when they comprise a system but it’s a lot more intriguing to think about how to incorporate a system with multiple objects. The way I’m thinking of it right now is that ‘Particles’ and ‘RigidBodies’ must be derived classes of a more general class, somethig like ‘class System(object):’ with the rest of the code following that. But I also feel, at the same time, that I’m not approaching this problem the right way. I gave myself a couple days to figure this out and I was really hoping that I could figure this out on my own but I guess I will need more guidance on this issue. This has also made me question the simple code that I have to determine the energies, kinetic and potential, of either system. It is useful as it stands for individual components of multibody systems as it is trivial to have a method to determine either energy of a particle or a rigid body but adding this functionality keeping in mind that it has to be used to determine the Lagrangian of a more complex multibody system is also proving to be a bit of barrier. I’m uncertain but I feel that the answer to this also lies in what I have spoken about prior- the issues with angualr momentum of a system.</p>
<p>This has been primarily what has dominated my time since I have worked on my momenta functions.</p>
<p>In terms of tangibles, I have the momenta code up and running. I have also tested the better checking methods for vectors and dyadics as per <a href="https://github.com/sympy/sympy/pull/1269#issuecomment-6346970">PR 1269</a>. (Note- That particular pull request has proven to be extremely crucial to my work. When angular momentum vector of a rigid body is to be found about the mass center, the generic formula for angular momentum that I implemented in ‘mechanics’ falls apart because in the math that follows, a cross product between a zero vector and a non zero vector needs to be performed. It turns out that the methods currently available in ‘mechanics’  aren’t up to task to cope with this (even though cross products between a vector and a zero vector are performed correctly.)) After having spent almost 2 days trying to examine why this generic formula wasn’t working, I ended up writing some patchy code with some conditional statements for the angular momentum to work with the current setup. After this I went through Gilbert’s updated code (PR 1269) and saw that it handles the math being performed in my angular momentum function perfectly. I hope that both that PR and mine get merged in that order. And as I am also waiting on that merge, I have been furhter examining the pydy.org website. I have jotted down several recommendations that I have to make for that page. This will prove to be important because that is the page that students in UC Davis use to learn sympy.physics,mechanics. As this has already turned into a bit of a prosaic blog post, I shall end this here. But, yes this has been a long week and a lot has been learned and I’m pretty satisfied with what I’ve learned and am even more invigorated for all that is in store in the coming weeks.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/167/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/167/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=167&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-16T12:34:48Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-08-29T08:40:28Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=186</id>
    <link href="http://scolobb.wordpress.com/2012/06/16/the-re-setting/" rel="alternate" type="text/html"/>
    <title>The Re-Setting</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I have just finished complying with what I hope to be among the closing waves of remarks on the pull request I opened last week. That pull request adds the classes which model some of the fundamental notions in category theory: Object, Morphism, Diagram, Category. I described these classes in detail in the previous post. [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=186&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have just finished complying with what I hope to be among the closing waves of remarks on the <a href="https://github.com/sympy/sympy/pull/1338">pull request</a> I opened last week.  That pull request adds the classes which model some of the fundamental notions in category theory: <tt>Object</tt>, <tt>Morphism</tt>, <tt>Diagram</tt>, <tt>Category</tt>.  I described these classes in detail in the <a href="http://scolobb.wordpress.com/2012/06/11/the-setting/">previous post</a>.  This week has been revolutionary for those classes, since all all of them have suffered great changes, and the first two of them, <tt>Object</tt> and <tt>Morphism</tt>, have changed to be something radically different.</p>
<p>The most important change concerns morphisms.  In my initial version, I had one class to represent any morphism.  When fitting it into the architecture of SymPy, it turned out that distinguishing between an identity morphism and a non-identity morphism wasn’t quite that easy, because it is impossible to store a Python Boolean value in <tt>Basic.args</tt>.  The suggested solution was to splinter identity morphisms into a separate class.  Later, my mentor Tom Bachmann noticed that an even finer granularity was necessary.  Indeed, according to the code defined at that moment, if a morphism was a composite, <em>and</em> had a name, then that name wouldn’t matter at all at comparisons or at printing.  Therefore, composite morphisms don’t really seem to be the same kind of beast as named morphisms.  And yet again, identity morphisms belong to a separate class of things.</p>
<p>According to this idea, I completely threw away the old <tt>Morphism</tt> and <tt>IdentityMorphism</tt>, and replaced them with <tt>NamedMorphism</tt>, <tt>IdentityMorphism</tt>, <tt>CompositeMorphism</tt>, and a different <tt>Morphism</tt> to serve as the base class.  I have also removed the possibility to create anonymous morphisms.  This has resulted in shorter, easier to use, more flexible, and less error-prone code.  The experience was absolutely great <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>Besides this change, I’ve done numerous corrections and enhancements, which have hopefully brought my code up to scratch.  I have received the relieving “almost good to go” comment from my mentor; sounds almost unbelievable <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>The downside of this is that I have spent on grooming my code <em>considerably</em> more time than I initially expected.  This means that I have to hurry up with the next sections of my timeline.</p>
<p>This week I have also found something which will hopefully make implementing the diagram drawing functionality more piece-of-cakely: <a href="http://www.tug.org/applications/Xy-pic/">Xy-pic</a>.  My next bit of effort will therefore be directed towards mastering this package and adapting my initial plan to this (rather radical) change of strategy.  This will be reflected in the next blog post, which is due to come soon.  Very soon <img alt=";-)" class="wp-smiley" src="http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif"/> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/186/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/186/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=186&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-15T22:55:50Z</updated>
    <category term="SymPy"/>
    <category term="morphism"/>
    <category term="tests"/>
    <category term="timeline"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-08-29T08:40:27Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://asmeurersympy.wordpress.com/?p=1109</id>
    <link href="https://asmeurersympy.wordpress.com/2012/06/14/how-to-install-the-development-version-of-ipython-qtconsole-and-notebook-in-ubuntu/" rel="alternate" type="text/html"/>
    <title>How to install the development version of IPython Qtconsole and Notebook in Ubuntu</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Both the awesome IPython notebook and Qtconsole are in the Ubuntu repositories, so if you just want to use the stable released versions, you can just do and be on your way. But the git development version has a lot of cool new features, and you may not want to wait for 0.13 to be [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1109&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Both the awesome <a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html">IPython notebook</a> and <a href="http://ipython.org/ipython-doc/stable/interactive/qtconsole.html">Qtconsole</a> are in the Ubuntu repositories, so if you just want to use the stable released versions, you can just do</p>
<p/><pre class="brush: bash;">sudo apt-get install ipython-notebook ipython-qtconsole
</pre><p/>
<p>and be on your way.  But the git development version has a lot of cool new features, and you may not want to wait for 0.13 to be released and make its way to the Ubuntu repos.  But you may be thinking that to use those you will have to figure out all the dependencies yourself.  Actually, it’s pretty easy:</p>
<p/><pre class="brush: bash;"># First install git, if you don't already have it
sudo apt-get install git
# Then, clone the IPython repo, if you haven't already.
git clone git://github.com/ipython/ipython.git
cd ipython
# Now just install IPython with apt, then uninstall it.  The dependencies will remain
sudo apt-get install ipython-notebook ipython-qtconsole
sudo apt-get remove ipython-notebook ipython -qtconsole ipython
# Now install the IPython git version in such a way that will keep up to date when you pull
sudo python setup.py develop
</pre><p/>
<p>To update, just cd into that ipython directory and type <code>git pull</code>.  That’s it.  Now type <code>ipython notebook</code> or <code>ipython qtconsole</code> to get the magic.</p>
<p>EDIT: After you do this, <code>apt-get</code> will start bugging you every time that you use it that a bunch of packages are no longer needed.  These are the ones that you do need for the qtconsole and the notebook, so you should not autoremove them as it says.  Rather, set them as manually installed by copying the list of packages that it tells you about and <code>sudo apt-get install</code>ing them.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1109/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1109/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1109&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-14T05:49:08Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>https://asmeurersympy.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2012-08-29T08:40:09Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=115</id>
    <link href="http://amakelov.wordpress.com/2012/06/10/google-summer-of-code-2012-week-3/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 3</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, there wasn’t much coding done on my project this week; I’ve been going over the different versions of the Schreier-Sims algorithm as described in [1]; there is currently an implementation with using Jerrum’s filter as an optimization (see this), and I’ve almost implemented the faster randomized version described in [1]. It remains to <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/06/10/google-summer-of-code-2012-week-3/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=115&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all,</p>
<p>there wasn’t much coding done on my project this week; I’ve been going over the different versions of the Schreier-Sims algorithm as described in [1]; there is currently an implementation with using Jerrum’s filter as an optimization (see <a href="http://www.m8j.net/%28All%29Schreier%20Sims%20Algorithm" target="_blank">this</a>), and I’ve almost implemented the faster randomized version described in [1]. It remains to see how to integrate both so that the output of the randomized version can be verified, and how to use the deterministic implementation in order to do variations of the Schreier-Sims algorithm, for example when the order of the group is known in advance, or when a base is known. Also, it might be appropriate to switch between storing transversals explicitly (requires a lot of memory, but increases speed) and using schreier vectors insted (much less memory, slower access to transversal elements) depending on the degree of the permutation group.</p>
<p>Apart from that, there’s been work on:</p>
<ul>
<li>Finding the degree of transitivity for a permutation group: using the function orbit as acting on tuples of points, but the algorithm is sort of brute-force and becomes large for groups of large degree or large degree of transitivity.</li>
<li>Constructing abelian groups as permutation groups, by their decomposition as a direct sum of cyclic groups of given orders (per the <a href="http://en.wikipedia.org/wiki/Abelian_group#Finite_abelian_groups" target="_blank">classification</a> of finite abelian groups), i.e. <img alt="A = \text{AbelianGroup}([3,4,5])" class="latex" src="http://s0.wp.com/latex.php?latex=A+%3D+%5Ctext%7BAbelianGroup%7D%28%5B3%2C4%2C5%5D%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="A = \text{AbelianGroup}([3,4,5])"/> is the group isomorphic to <img alt="C_3 \oplus C_4 \oplus C_5" class="latex" src="http://s0.wp.com/latex.php?latex=C_3+%5Coplus+C_4+%5Coplus+C_5&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="C_3 \oplus C_4 \oplus C_5"/></li>
</ul>
<p>My code from the first two weeks is not yet merged, so next week I’ll focus on getting my pull requests reviewed, and will probably do a combined pull request next week including the code from this week. The <a href="https://groups.google.com/group/sympy/browse_thread/thread/c515e9299bafa738" target="_blank">discussion</a> I started on the mailing list received some attention and it is now a bit clearer what changes to the interface are going to be desirable. Also, it seems that a wider array of available groups to work with will be helpful for testing purposes (i.e., groups of large degree with a small base and other interesting types of groups).</p>
<p>[1] Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/115/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/115/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=115&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-10T22:37:15Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/category/google-summer-of-code-2012/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging » Google Summer of Code 2012</title>
      <updated>2012-08-16T23:00:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=119</id>
    <link href="http://scolobb.wordpress.com/2012/06/11/the-setting/" rel="alternate" type="text/html"/>
    <title>The Setting</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week has been my first week fully-dedicated to GSoC and my (absolutely beloved) category-theory-related project. First off, I have finished working on the first phase of the project, entitled “Base Classes”.  In the course of this phase I have implemented the base classes (oh yeah ) of the category theory module, which includes Object, Morphism, [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=119&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week has been my first week fully-dedicated to GSoC and my (absolutely beloved) category-theory-related <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">project</a>.</p>
<p>First off, I have finished working on the first phase of the project, entitled “Base Classes”.  In the course of this phase I have implemented the base classes (oh yeah <img alt=";-)" class="wp-smiley" src="http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif"/>  ) of the category theory module, which includes <tt>Object</tt>, <tt>Morphism</tt>, <tt>Category</tt>, and <tt>Diagram</tt>.</p>
<p>The names of the classes were meant to be self-documenting, but there are a couple gotchas which are determined by the pre-incipient state of the module. In the following paragraphs I will try to briefly overview the classes and point out the things which may be unexpected.</p>
<p>The first two classes in the enumeration are pretty straightforward. The class <tt>Object</tt> represents an object in an abstract category. Since we’re talking about abstract categories, an object is little more than its name. The class <tt>Morphism</tt> represents a morphism in an abstract category, which is little more than just an arrow from an object to another object. Correspondingly, a <tt>Morphism</tt>, has a string name, an <tt>Object</tt> which is the <em>domain</em> (the object where the arrow begins) and <em>codomain</em> (the object where the arrow ends). Now, morphisms can be <em>composed</em>. Thus if you have a morphism <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f"/> from <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> to <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> (which are objects in some (asbtract) category), and a morphism <img alt="g" class="latex" src="http://s0.wp.com/latex.php?latex=g&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g"/> from <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> to <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C"/>, then you can take their composition, which is a morphism from <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> to <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C"/>. This composite is often denoted <img alt="g\circ f" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ f"/> (mind the order). The morphisms themselves are often written as <img alt="f:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f:A\rightarrow B"/> and <img alt="g:B\rightarrow C" class="latex" src="http://s0.wp.com/latex.php?latex=g%3AB%5Crightarrow+C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g:B\rightarrow C"/>. These two morphisms are called <em>composable</em> in this order.</p>
<p>While in some concrete settings like set mappings, group homomorphisms, etc. the composite function/homomorphism acts in a well-defined way, there’s no way to define the action of an abstract category theoretic morphism. In correspondence with this, compositions of <tt>Moprhism</tt>‘s yield other morphisms, which store the components they were obtained from inside themselves. Composing morphisms which were already composed is all right, since a <tt>Morphism</tt> always stores the flattened-down version of the list of components. Thus a <tt>Morphism</tt> representing <img alt="h\circ (g\circ f)" class="latex" src="http://s0.wp.com/latex.php?latex=h%5Ccirc+%28g%5Ccirc+f%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="h\circ (g\circ f)"/>, the composite of <img alt="h:C\rightarrow D" class="latex" src="http://s0.wp.com/latex.php?latex=h%3AC%5Crightarrow+D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="h:C\rightarrow D"/> and <img alt="g\circ f:A\rightarrow C" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+f%3AA%5Crightarrow+C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ f:A\rightarrow C"/>, will store the list of three morphisms representing <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f"/>, <img alt="g" class="latex" src="http://s0.wp.com/latex.php?latex=g&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g"/>, <img alt="h" class="latex" src="http://s0.wp.com/latex.php?latex=h&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="h"/> (again, mind the order).</p>
<p>A morphism of the form <img alt="id_A:A\rightarrow A" class="latex" src="http://s0.wp.com/latex.php?latex=id_A%3AA%5Crightarrow+A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="id_A:A\rightarrow A"/> is called an <em>identity</em> if for any two other morphisms <img alt="f:X\rightarrow A" class="latex" src="http://s0.wp.com/latex.php?latex=f%3AX%5Crightarrow+A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f:X\rightarrow A"/> and <img alt="g:A\rightarrow Y" class="latex" src="http://s0.wp.com/latex.php?latex=g%3AA%5Crightarrow+Y&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g:A\rightarrow Y"/> one has <img alt="id_A\circ f = f" class="latex" src="http://s0.wp.com/latex.php?latex=id_A%5Ccirc+f+%3D+f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="id_A\circ f = f"/> and <img alt="g\circ id_A = g" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+id_A+%3D+g&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ id_A = g"/>, that is, identity morphisms are identities with respect to morphism composition. Instances of <tt>Morphism</tt> which have the flag <tt>identity</tt> set, behave exactly as one would expect them, i.e., if you try to compose with them, nothing happens (of course, I’m talking of the situation when you take a <em>composable</em> morphism).</p>
<p>So far so good. Here come the gotchas of <tt>Morphism</tt>, however. Morphisms are compared by domain, codomain, and name. Thus for the representations <tt>f1</tt> and <tt>f2</tt> of <img alt="f_1:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f_1%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f_1:A\rightarrow B"/> and <img alt="f_2:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f_2%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f_2:A\rightarrow B"/>, <tt>f1 == f1</tt> is <tt>True</tt> and <tt>f1 == f2</tt> is <tt>False</tt>, even if <tt>f1</tt> and <tt>f2</tt> are actually the same morphisms with different names. Now, that’s quite understandable, since a <tt>Morphism</tt> cannot really know what you <em>actually</em> want <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  However, with the implemented apparatus, you <em>can</em> state that <tt>f1</tt> and <tt>f2</tt> are actually the same thing. Read to the end to find out how <img alt=";-)" class="wp-smiley" src="http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif"/> </p>
<p>On a side note, <tt>Morphism</tt> is sufficiently clever to know that all identity morphisms of the same object are equal, no matter the name.</p>
<p>Next comes <tt>Category</tt>. Unfortunately, at the moment this class isn’t capable of doing much useful stuff. One of the reasons is that the notion of a category is based on the notion of a set-theoretical <a href="http://en.wikipedia.org/wiki/Class_(set_theory)">class</a>, which is not implemented in SymPy yet. More importantly, though, for the purposes of this GSoC project, an essentially primitive <tt>Category</tt> is perfectly enough. A <tt>Category</tt> has a string name and a set of <tt>Diagram</tt>‘s which are asserted to be commutative in this category.</p>
<div class="wp-caption alignright" id="attachment_157" style="width: 210px;"><a href="http://scolobb.files.wordpress.com/2012/06/200px-commutative_square-svg.png"><img alt="A simple square diagram with four objects and four morphisms." class="size-full wp-image-157" src="http://scolobb.files.wordpress.com/2012/06/200px-commutative_square-svg.png?w=549" title="A simple diagram."/></a><p class="wp-caption-text">A simple diagram.</p></div>
<p>The last and the most interesting class in the context of this project is <tt>Diagram</tt>. A diagram is a very cool way to write a lot of stuff in category theory and in algebra in general. A diagram is basically a bunch of objects from a category and some of the morphisms between these objects.  Diagrams are usually drawn, objects being represented as letters and morphisms as arrows between the letters.  A diagram is said to be <em>commutative</em>, if all paths between any two objects <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> and <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> in the diagram yield the same morphism.  For example, if the diagram in the figure is commutative, then <img alt="k\circ g = h\circ f" class="latex" src="http://s0.wp.com/latex.php?latex=k%5Ccirc+g+%3D+h%5Ccirc+f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k\circ g = h\circ f"/>.</p>
<p>The class <tt>Diagram</tt> is meant to represent such diagrammatic structures.  It cannot be plotted as yet; what it can do is storing a bunch of morphisms.  A <tt>Diagram</tt> does not know whether it is commutative or not; however, one can assert that certain <tt>Diagram</tt>‘s are commutative in a ceratain <tt>Category</tt>.</p>
<p><tt>Diagram</tt> is actually meant to store something slightly more general than what is shown in the picture.  Suppose that the author of the picture has wanted to say that, if <img alt="h" class="latex" src="http://s0.wp.com/latex.php?latex=h&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="h"/> is an isomorpism, then there exists a unique moprhism <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/> such that the diagram commutes.  Authors often want to say such things, therefore <tt>Diagram</tt> contains <em>two</em> sets of morphisms: the <tt>premises</tt> and <tt>conclusions</tt>.  Well, actually, those are not sets, but rather dictionaries, mapping morphisms to their properties (which are really just strings).  Thus an instance of <tt>Diagram</tt> is read as follows: “If there exist such morphisms as in <tt>premises</tt> with corresponding properties, than there exist such morphisms as in <tt>conclusions</tt> with corresponding properties and the diagram is commutative”.  You can also state simpler statements which don’t look like logical implications by not using the conclusions part of the diagram.</p>
<p>Now, <tt>Diagram</tt> is awesome enough to also include all composite morphisms in premises (and in conclusions, when necessary).  If you specify that <img alt="f:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f:A\rightarrow B"/> and <img alt="g:B\rightarrow C" class="latex" src="http://s0.wp.com/latex.php?latex=g%3AB%5Crightarrow+C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g:B\rightarrow C"/> are in the <tt>Diagram</tt>, then you don’t have to say that <img alt="g\circ f:A\rightarrow C" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+f%3AA%5Crightarrow+C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ f:A\rightarrow C"/> is in the <tt>Diagram</tt> as well.  There’s a small thing to keep in mind here: you sometimes add morphisms <em>with properties</em> to a <tt>Diagram</tt>.  When <tt>Diagram</tt> adds the composite <img alt="g\circ f" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ f"/> to itself, the properties of the composite will be the <em>intersection</em> of the properties of <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f"/> and <img alt="g" class="latex" src="http://s0.wp.com/latex.php?latex=g&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g"/>.  You can always override this by explicitly adding the composite with a different set of properties.</p>
<p>And finally, as I promised, I’ll tell how to state that <img alt="f_1:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f_1%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f_1:A\rightarrow B"/> and <img alt="f_2:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f_2%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f_2:A\rightarrow B"/> are equal, despite different names.  Well, just create a diagram with these two morphisms and assert it as commutative <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>And yet even more finally, I’d like to tell about a bit of programming experience I have found exhilarating this week.   I’ve learnt a very cool lesson: write your tests before the implementation whenever possible!  There’s no better formal way to write a specification than to write tests.  I was totally amazed at how this practice streamlined my workflow!</p>
<p>Image source: <a href="http://en.wikipedia.org/wiki/File:Commutative_square.svg">http://en.wikipedia.org/wiki/File:Commutative_square.svg</a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/119/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/119/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=119&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-10T21:09:58Z</updated>
    <category term="SymPy"/>
    <category term="base classes"/>
    <category term="diagram"/>
    <category term="gotcha"/>
    <category term="morphism"/>
    <category term="object"/>
    <category term="testing"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-08-29T08:40:27Z</updated>
    </source>
  </entry>
</feed>
