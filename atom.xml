<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet SymPy</title>
  <updated>2012-06-15T04:00:24Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Ondrej Certik</name>
    <email>ondrej@certik.cz</email>
  </author>
  <id>http://planet.sympy.org/atom.xml</id>
  <link href="http://planet.sympy.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://planet.sympy.org/" rel="alternate"/>

  <entry xml:lang="en">
    <id>https://asmeurersympy.wordpress.com/?p=1109</id>
    <link href="https://asmeurersympy.wordpress.com/2012/06/14/how-to-install-the-development-version-of-ipython-qtconsole-and-notebook-in-ubuntu/" rel="alternate" type="text/html"/>
    <title>How to install the development version of IPython Qtconsole and Notebook in Ubuntu</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Both the awesome IPython notebook and Qtconsole are in the Ubuntu repositories, so if you just want to use the stable released versions, you can just do and be on your way. But the git development version has a lot of cool new features, and you may not want to wait for 0.13 to be [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1109&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Both the awesome <a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html">IPython notebook</a> and <a href="http://ipython.org/ipython-doc/stable/interactive/qtconsole.html">Qtconsole</a> are in the Ubuntu repositories, so if you just want to use the stable released versions, you can just do</p>
<p/><pre class="brush: bash;">sudo apt-get install ipython-notebook ipython-qtconsole
</pre><p/>
<p>and be on your way.  But the git development version has a lot of cool new features, and you may not want to wait for 0.13 to be released and make its way to the Ubuntu repos.  But you may be thinking that to use those you will have to figure out all the dependencies yourself.  Actually, it’s pretty easy:</p>
<p/><pre class="brush: bash;"># First install git, if you don't already have it
sudo apt-get install git
# Then, clone the IPython repo, if you haven't already.
git clone git://github.com/ipython/ipython.git
cd ipython
# Now just install IPython with apt, then uninstall it.  The dependencies will remain
sudo apt-get install ipython-notebook ipython-qtconsole
sudo apt-get remove ipython-notebook ipython -qtconsole ipython
# Now install the IPython git version in such a way that will keep up to date when you pull
sudo python setup.py develop
</pre><p/>
<p>To update, just cd into that ipython directory and type <code>git pull</code>.  That’s it.  Now type <code>ipython notebook</code> or <code>ipython qtconsole</code> to get the magic.</p>
<p>EDIT: After you do this, <code>apt-get</code> will start bugging you every time that you use it that a bunch of packages are no longer needed.  These are the ones that you do need for the qtconsole and the notebook, so you should not autoremove them as it says.  Rather, set them as manually installed by copying the list of packages that it tells you about and <code>sudo apt-get install</code>ing them.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1109/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1109/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1109/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1109/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1109/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1109/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1109/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1109/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1109/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1109/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1109/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1109/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1109/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1109/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1109&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-14T05:49:08Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>https://asmeurersympy.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2012-06-15T04:00:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=115</id>
    <link href="http://amakelov.wordpress.com/2012/06/10/google-summer-of-code-2012-week-3/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 3</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi all, there wasn’t much coding done on my project this week; I’ve been going over the different versions of the Schreier-Sims algorithm as described in [1]; there is currently an implementation with using Jerrum’s filter as an optimization (see this), and I’ve almost implemented the faster randomized version described in [1]. It remains to <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/06/10/google-summer-of-code-2012-week-3/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=115&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all,</p>
<p>there wasn’t much coding done on my project this week; I’ve been going over the different versions of the Schreier-Sims algorithm as described in [1]; there is currently an implementation with using Jerrum’s filter as an optimization (see <a href="http://www.m8j.net/%28All%29Schreier%20Sims%20Algorithm" target="_blank">this</a>), and I’ve almost implemented the faster randomized version described in [1]. It remains to see how to integrate both so that the output of the randomized version can be verified, and how to use the deterministic implementation in order to do variations of the Schreier-Sims algorithm, for example when the order of the group is known in advance, or when a base is known. Also, it might be appropriate to switch between storing transversals explicitly (requires a lot of memory, but increases speed) and using schreier vectors insted (much less memory, slower access to transversal elements) depending on the degree of the permutation group.</p>
<p>Apart from that, there’s been work on:</p>
<ul>
<li>Finding the degree of transitivity for a permutation group: using the function orbit as acting on tuples of points, but the algorithm is sort of brute-force and becomes large for groups of large degree or large degree of transitivity.</li>
<li>Constructing abelian groups as permutation groups, by their decomposition as a direct sum of cyclic groups of given orders (per the <a href="http://en.wikipedia.org/wiki/Abelian_group#Finite_abelian_groups" target="_blank">classification</a> of finite abelian group), i.e. <img alt="A = \text{AlternatingGroup}([3,4,5])" class="latex" src="http://s0.wp.com/latex.php?latex=A+%3D+%5Ctext%7BAlternatingGroup%7D%28%5B3%2C4%2C5%5D%29&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="A = \text{AlternatingGroup}([3,4,5])"/> is the group isomorphic to <img alt="C_3 \oplus C_4 \oplus C_5" class="latex" src="http://s0.wp.com/latex.php?latex=C_3+%5Coplus+C_4+%5Coplus+C_5&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="C_3 \oplus C_4 \oplus C_5"/></li>
</ul>
<p>My code from the first two weeks is not yet merged, so next week I’ll focus on getting my pull requests reviewed, and will probably do a combined pull request next week including the code from this week. The <a href="https://groups.google.com/group/sympy/browse_thread/thread/c515e9299bafa738" target="_blank">discussion</a> I started on the mailing list received some attention and it is now a bit clearer what changes to the interface are going to be desirable. Also, it seems that a wider array of available groups to work with will be helpful for testing purposes (i.e., groups of large degree with a small base and other interesting types of groups).</p>
<p>[1] Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/115/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/115/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/115/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/115/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/115/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/115/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/115/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/115/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/115/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/115/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/115/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/115/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/115/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/115/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=115&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-10T22:37:15Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=119</id>
    <link href="http://scolobb.wordpress.com/2012/06/11/the-setting/" rel="alternate" type="text/html"/>
    <title>The Setting</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week has been my first week fully-dedicated to GSoC and my (absolutely beloved) category-theory-related project. First off, I have finished working on the first phase of the project, entitled “Base Classes”.  In the course of this phase I have implemented the base classes (oh yeah ) of the category theory module, which includes Object, Morphism, [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=119&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week has been my first week fully-dedicated to GSoC and my (absolutely beloved) category-theory-related <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">project</a>.</p>
<p>First off, I have finished working on the first phase of the project, entitled “Base Classes”.  In the course of this phase I have implemented the base classes (oh yeah <img alt=";-)" class="wp-smiley" src="http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif"/>  ) of the category theory module, which includes <tt>Object</tt>, <tt>Morphism</tt>, <tt>Category</tt>, and <tt>Diagram</tt>.</p>
<p>The names of the classes were meant to be self-documenting, but there are a couple gotchas which are determined by the pre-incipient state of the module. In the following paragraphs I will try to briefly overview the classes and point out the things which may be unexpected.</p>
<p>The first two classes in the enumeration are pretty straightforward. The class <tt>Object</tt> represents an object in an abstract category. Since we’re talking about abstract categories, an object is little more than its name. The class <tt>Morphism</tt> represents a morphism in an abstract category, which is little more than just an arrow from an object to another object. Correspondingly, a <tt>Morphism</tt>, has a string name, an <tt>Object</tt> which is the <em>domain</em> (the object where the arrow begins) and <em>codomain</em> (the object where the arrow ends). Now, morphisms can be <em>composed</em>. Thus if you have a morphism <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f"/> from <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> to <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> (which are objects in some (asbtract) category), and a morphism <img alt="g" class="latex" src="http://s0.wp.com/latex.php?latex=g&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g"/> from <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> to <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C"/>, then you can take their composition, which is a morphism from <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> to <img alt="C" class="latex" src="http://s0.wp.com/latex.php?latex=C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="C"/>. This composite is often denoted <img alt="g\circ f" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ f"/> (mind the order). The morphisms themselves are often written as <img alt="f:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f:A\rightarrow B"/> and <img alt="g:B\rightarrow C" class="latex" src="http://s0.wp.com/latex.php?latex=g%3AB%5Crightarrow+C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g:B\rightarrow C"/>. These two morphisms are called <em>composable</em> in this order.</p>
<p>While in some concrete settings like set mappings, group homomorphisms, etc. the composite function/homomorphism acts in a well-defined way, there’s no way to define the action of an abstract category theoretic morphism. In correspondence with this, compositions of <tt>Moprhism</tt>‘s yield other morphisms, which store the components they were obtained from inside themselves. Composing morphisms which were already composed is all right, since a <tt>Morphism</tt> always stores the flattened-down version of the list of components. Thus a <tt>Morphism</tt> representing <img alt="h\circ (g\circ f)" class="latex" src="http://s0.wp.com/latex.php?latex=h%5Ccirc+%28g%5Ccirc+f%29&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="h\circ (g\circ f)"/>, the composite of <img alt="h:C\rightarrow D" class="latex" src="http://s0.wp.com/latex.php?latex=h%3AC%5Crightarrow+D&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="h:C\rightarrow D"/> and <img alt="g\circ f:A\rightarrow C" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+f%3AA%5Crightarrow+C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ f:A\rightarrow C"/>, will store the list of three morphisms representing <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f"/>, <img alt="g" class="latex" src="http://s0.wp.com/latex.php?latex=g&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g"/>, <img alt="h" class="latex" src="http://s0.wp.com/latex.php?latex=h&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="h"/> (again, mind the order).</p>
<p>A morphism of the form <img alt="id_A:A\rightarrow A" class="latex" src="http://s0.wp.com/latex.php?latex=id_A%3AA%5Crightarrow+A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="id_A:A\rightarrow A"/> is called an <em>identity</em> if for any two other morphisms <img alt="f:X\rightarrow A" class="latex" src="http://s0.wp.com/latex.php?latex=f%3AX%5Crightarrow+A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f:X\rightarrow A"/> and <img alt="g:A\rightarrow Y" class="latex" src="http://s0.wp.com/latex.php?latex=g%3AA%5Crightarrow+Y&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g:A\rightarrow Y"/> one has <img alt="id_A\circ f = f" class="latex" src="http://s0.wp.com/latex.php?latex=id_A%5Ccirc+f+%3D+f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="id_A\circ f = f"/> and <img alt="g\circ id_A = g" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+id_A+%3D+g&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ id_A = g"/>, that is, identity morphisms are identities with respect to morphism composition. Instances of <tt>Morphism</tt> which have the flag <tt>identity</tt> set, behave exactly as one would expect them, i.e., if you try to compose with them, nothing happens (of course, I’m talking of the situation when you take a <em>composable</em> morphism).</p>
<p>So far so good. Here come the gotchas of <tt>Morphism</tt>, however. Morphisms are compared by domain, codomain, and name. Thus for the representations <tt>f1</tt> and <tt>f2</tt> of <img alt="f_1:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f_1%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f_1:A\rightarrow B"/> and <img alt="f_2:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f_2%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f_2:A\rightarrow B"/>, <tt>f1 == f1</tt> is <tt>True</tt> and <tt>f1 == f2</tt> is <tt>False</tt>, even if <tt>f1</tt> and <tt>f2</tt> are actually the same morphisms with different names. Now, that’s quite understandable, since a <tt>Morphism</tt> cannot really know what you <em>actually</em> want <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  However, with the implemented apparatus, you <em>can</em> state that <tt>f1</tt> and <tt>f2</tt> are actually the same thing. Read to the end to find out how <img alt=";-)" class="wp-smiley" src="http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif"/> </p>
<p>On a side note, <tt>Morphism</tt> is sufficiently clever to know that all identity morphisms of the same object are equal, no matter the name.</p>
<p>Next comes <tt>Category</tt>. Unfortunately, at the moment this class isn’t capable of doing much useful stuff. One of the reasons is that the notion of a category is based on the notion of a set-theoretical <a href="http://en.wikipedia.org/wiki/Class_(set_theory)">class</a>, which is not implemented in SymPy yet. More importantly, though, for the purposes of this GSoC project, an essentially primitive <tt>Category</tt> is perfectly enough. A <tt>Category</tt> has a string name and a set of <tt>Diagram</tt>‘s which are asserted to be commutative in this category.</p>
<div class="wp-caption alignright" id="attachment_157" style="width: 210px;"><a href="http://scolobb.files.wordpress.com/2012/06/200px-commutative_square-svg.png"><img alt="A simple square diagram with four objects and four morphisms." class="size-full wp-image-157" src="http://scolobb.files.wordpress.com/2012/06/200px-commutative_square-svg.png?w=549" title="A simple diagram."/></a><p class="wp-caption-text">A simple diagram.</p></div>
<p>The last and the most interesting class in the context of this project is <tt>Diagram</tt>. A diagram is a very cool way to write a lot of stuff in category theory and in algebra in general. A diagram is basically a bunch of objects from a category and some of the morphisms between these objects.  Diagrams are usually drawn, objects being represented as letters and morphisms as arrows between the letters.  A diagram is said to be <em>commutative</em>, if all paths between any two objects <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="A"/> and <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> in the diagram yield the same morphism.  For example, if the diagram in the figure is commutative, then <img alt="k\circ g = h\circ f" class="latex" src="http://s0.wp.com/latex.php?latex=k%5Ccirc+g+%3D+h%5Ccirc+f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k\circ g = h\circ f"/>.</p>
<p>The class <tt>Diagram</tt> is meant to represent such diagrammatic structures.  It cannot be plotted as yet; what it can do is storing a bunch of morphisms.  A <tt>Diagram</tt> does not know whether it is commutative or not; however, one can assert that certain <tt>Diagram</tt>‘s are commutative in a ceratain <tt>Category</tt>.</p>
<p><tt>Diagram</tt> is actually meant to store something slightly more general than what is shown in the picture.  Suppose that the author of the picture has wanted to say that, if <img alt="h" class="latex" src="http://s0.wp.com/latex.php?latex=h&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="h"/> is an isomorpism, then there exists a unique moprhism <img alt="k" class="latex" src="http://s0.wp.com/latex.php?latex=k&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="k"/> such that the diagram commutes.  Authors often want to say such things, therefore <tt>Diagram</tt> contains <em>two</em> sets of morphisms: the <tt>premises</tt> and <tt>conclusions</tt>.  Well, actually, those are not sets, but rather dictionaries, mapping morphisms to their properties (which are really just strings).  Thus an instance of <tt>Diagram</tt> is read as follows: “If there exist such morphisms as in <tt>premises</tt> with corresponding properties, than there exist such morphisms as in <tt>conclusions</tt> with corresponding properties and the diagram is commutative”.  You can also state simpler statements which don’t look like logical implications by not using the conclusions part of the diagram.</p>
<p>Now, <tt>Diagram</tt> is awesome enough to also include all composite morphisms in premises (and in conclusions, when necessary).  If you specify that <img alt="f:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f:A\rightarrow B"/> and <img alt="g:B\rightarrow C" class="latex" src="http://s0.wp.com/latex.php?latex=g%3AB%5Crightarrow+C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g:B\rightarrow C"/> are in the <tt>Diagram</tt>, then you don’t have to say that <img alt="g\circ f:A\rightarrow C" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+f%3AA%5Crightarrow+C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ f:A\rightarrow C"/> is in the <tt>Diagram</tt> as well.  There’s a small thing to keep in mind here: you sometimes add morphisms <em>with properties</em> to a <tt>Diagram</tt>.  When <tt>Diagram</tt> adds the composite <img alt="g\circ f" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ f"/> to itself, the properties of the composite will be the <em>intersection</em> of the properties of <img alt="f" class="latex" src="http://s0.wp.com/latex.php?latex=f&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f"/> and <img alt="g" class="latex" src="http://s0.wp.com/latex.php?latex=g&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g"/>.  You can always override this by explicitly adding the composite with a different set of properties.</p>
<p>And finally, as I promised, I’ll tell how to state that <img alt="f_1:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f_1%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f_1:A\rightarrow B"/> and <img alt="f_2:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f_2%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f_2:A\rightarrow B"/> are equal, despite different names.  Well, just create a diagram with these two morphisms and assert it as commutative <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>And yet even more finally, I’d like to tell about a bit of programming experience I have found exhilarating this week.   I’ve learnt a very cool lesson: write your tests before the implementation whenever possible!  There’s no better formal way to write a specification than to write tests.  I was totally amazed at how this practice streamlined my workflow!</p>
<p>Image source: <a href="http://en.wikipedia.org/wiki/File:Commutative_square.svg">http://en.wikipedia.org/wiki/File:Commutative_square.svg</a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/119/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/119/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/119/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/119/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/119/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/119/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/119/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/119/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/119/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/119/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/119/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/119/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/119/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/119/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=119&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-10T21:09:58Z</updated>
    <category term="SymPy"/>
    <category term="base classes"/>
    <category term="diagram"/>
    <category term="gotcha"/>
    <category term="morphism"/>
    <category term="object"/>
    <category term="testing"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-06-15T04:00:21Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=151</id>
    <link href="http://rhoforsympy.wordpress.com/2012/06/10/week-3-activity-summary/" rel="alternate" type="text/html"/>
    <title>Week 3: Activity Summary</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">My week started with some design discussion with my mentors @ellisonbg and @flacjacket.  We had a preliminary discussion on how we should go about implementing the Tr (trace) operator. Based on the preliminary discussion, I submitted a PR 1333 purely for review and got some useful comments. I went back to work and addressed almost all [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=151&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>My week started with some design discussion with my mentors <a href="https://github.com/ellisonbg">@ellisonbg</a> and <a href="https://github.com/flacjacket">@flacjacket</a>.  We had a preliminary discussion on how we should go about implementing the Tr (trace) operator.</p>
<p>Based on the preliminary discussion, I submitted a <a href="https://github.com/sympy/sympy/pull/1333">PR 1333</a> purely for review and got some useful comments. I went back to work and addressed almost all the comments/suggested provided and I have updated the PR with my new changes.</p>
<p>As it stands now, the current <a href="https://github.com/sympy/sympy/pull/1333">PR 1333</a> has the basic functionality needed for Tr operation. This version still does not handle reduced trace operations and also does not use any options passed through **kwargs.  Even, printing will have to be fixed. But, barring any major issues after few more iterations the coming week I am confident this PR can be merged.</p>
<p>So, assuming I will not be adding any more features to the PR, my plan for next week is make sure this PR gets accepted.  Since, I am at the summer school next week, I may not be doing any other new coding activity. So, my minimal goal is to make sure this PR is merged by end of next week.</p>
<p>I plan to branch out of this PR, to work on the following activities during next 2 weeks(mostly week after):</p>
<p>1. Fix printing for Tr operator. Currently, the printing is pretty crude. I will also add examples for Notebook along with this task.</p>
<p>2. Fix the is_number operation ( based on what suggestions I get). I am still to understand what “is_number” means to sympy and what scenarios Tr needs to handle.  I need to work on this property, since this property is called from the base classes for when 2 Tr objects are added through Add(*[Tr(args,indices)]) operation.</p>
<p>3. Integrate currently existing Qubit logic for partial trace operation.</p>
<p>The above 3 tasks should go into the next PR.</p>
<p>4. Meanwhile, I would like to chat with my mentors and about all use cases (general/special) that we will have to address to TensorProducts wrt to density operators and eventually partial trace operations.</p>
<p>Edit 1: Update (1) to include Notebook.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/151/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/151/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/151/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/151/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/151/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/151/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/151/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/151/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/151/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/151/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/151/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/151/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/151/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/151/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=151&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-10T04:30:31Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/06/09/gsoc-week-3</id>
    <link href="http://catchmrbharath.github.com/programming/2012/06/09/gsoc-week-3" rel="alternate" type="text/html"/>
    <title>GSoC Week 3</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have almost finished with the basic framework of implicit plotting based on interval arithmetic. The module implements both continuity tracking and domain tracking. Hence it does not plot points which are not there in the domain of the function. The functionalities are best illustrated by plots. There are also a couple of limitations that I encountered, which I think is difficult to avoid. I will illustrate both the functionality and the problems through plots.</p>
<img height="400" src="http://catchmrbharath.github.com/images/09062012/img1.png" width="600"/>
<p>The above image illustrates a plot which does domain tracking and continuity tracking. It is not possible for interval arithmetic without tracking, to decide whether to draw the plots near zero. But with continuity tracking we get an accurate plot.</p>
<img height="400" src="http://catchmrbharath.github.com/images/09062012/img2.png" width="600"/>
<p>The above plot is that of $y = \frac{1}{\tan{\left (x \right )}}$ . It is possible to see the small discontinuity near multiples of $\pi / 2$ as $\pi / 2$ is not there in the domain of the expression.</p>
<img height="400" src="http://catchmrbharath.github.com/images/09062012/img3.png" width="600"/>
<p>The above plot illustrates how sqrt does not plot anything outside its domain. Even though it appears not that significant, it becomes significant when the huge expression is provided as the argument to the function.</p>

<p><strong>Illustrations of more plots</strong></p>

<p>Plot of $y^{2}=x^{3}-x$ <img height="400" src="http://catchmrbharath.github.com/images/09062012/img4.png" width="600"/></p>
<img height="400" src="http://catchmrbharath.github.com/images/09062012/img5.png" width="600"/>
<p>The above plot took 19.26 seconds to render.</p>

<h2 id="problems">Problems</h2>

<p>The problem with plots using interval arithmetic is that the errors increases with the length of the expression as the it takes the lowest and the uppermost bounds. It is possible to see the effect of errors in the following plot. It is possible to see the line thickens when the expression reaches a maximum or an minimum. This is due to the error creeping in. The interval becomes wide even at the smallest of the x interval.</p>
<img height="400" src="http://catchmrbharath.github.com/images/09062012/img6.png" width="600"/>
<p>It is better illustrated in the plot below. It is possible to see the width of the line increasing and then decreasing. <img height="400" src="http://catchmrbharath.github.com/images/09062012/img7.png" width="600"/></p>

<p>Then next problem is that of rasterization. In order to avoid rasterization I tried using the Matplotlib’s <code>contourf</code> function which implements the marching squares algorithm. Though it smoothens the curves, still there is fair bit of rasterization. The plot below is a zoomed version of $y=sin(x)$ <img height="400" src="http://catchmrbharath.github.com/images/09062012/img8.png" width="600"/></p>

<p>Presently the plotting function supports plotting of expressions containing <code>cos</code>, <code>sin</code>, <code>tan</code>, <code>exp</code>, <code>log</code>, <code>sqrt</code>, <code>atan</code>. Implementing more functions is fairly easy. I should be able to finish most of the expressions that can be implemented in the next week. I will look into implementing plotting implicit equations for expressions which cannot be implemented using interval arithmetic.</p></div>
    </summary>
    <updated>2012-06-09T07:00:00Z</updated>
    <published>2012-06-09T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-06-15T04:00:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/?p=94</id>
    <link href="http://angadhsympy.wordpress.com/2012/06/08/gsoc-2012-post-4-15/" rel="alternate" type="text/html"/>
    <title>GSoC 2012 Post 4</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I officially got started on my GSoC work. With some last minute confusions I was a day later than expected but I found that just a little over a week away from Python, and my memory was already a little rusty. It was back to the Python Tutorial for me to brush up [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=94&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I officially got started on my GSoC work. With some last minute confusions I was a day later than expected but I found that just a little over a week away from Python, and my memory was already a little rusty. It was back to the Python Tutorial for me to brush up for a short while.<br/>Having a less rigorous exposure to programming and only ever having dwelled in the functional programming world, dealing with the concept of ‘Classes’ has been overwhelming. I think with respect to training myself in Python through the tutorial, it is probably the topic I have spent the most time on and every time that I go through it, I seem to come across a little nugget of information that I missed or had misunderstood. With all that going on, it took me longer than I expected but I was able to get my first helper function working- the linear momentum function. It took me a lot longer than expected to get it working but it appears that I was having some issues importing the module that contained that function. It’s not completely apparent what I was doing incorrectly because I didn’t change anything in my code. Ultimately, by earlier today morning, I had the function working for both particles and rigid bodies and I have pushed the functions to my fork. I haven’t opened a pull request yet. I will do so once I have all the documentation in place. So currently, I’m just working on the documentation, just brushing up on the ‘standards’ for editing the docstring, making my tests and examples more explicit. Apart from that, I’m looking at<a href="https://github.com/sympy/sympy/pull/1269#issuecomment-5417513"> PR 1269</a>  and the documentation on <a href="http://pydy.org/index.php?title=Main_Page">pydy.org</a>. I constantly had to explore that webpage during the winter quarter of 2012 when I was taking a multibody dynamics class which required us to learn sympy.physics.mechanics. Though the documentation is very good, it is a commonly held belief that things can be made more accessible than it is at present. So, I’m jsut exploring that to see what could be plausible ways of improving things as they currently stand. On the coding front, I will be getting on to the angular momentum helper function and also, I’m thinking of determining a way to represent a system of rigid bodies and/or particles so that composite momenta (and probably inertia too) can be computed as these are useful information to be have at one’s disposal.<br/>Until next week, then.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/94/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/94/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/94/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/94/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/94/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/94/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/94/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/94/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/94/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/94/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/94/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/94/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/94/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/94/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=94&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-08T22:43:37Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-06-15T04:00:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=67</id>
    <link href="http://amakelov.wordpress.com/2012/06/07/think-small-2/" rel="alternate" type="text/html"/>
    <title>Think small</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Time is an illusion. Lunchtime doubly so. Douglas Adams, By the way, the movie isn’t as bad as I thought when I saw it the first time. I guess I was too narrow-minded back then. To paraphrase Douglas Adams, everyone has problems, and mathematicians doubly so. Problems are what makes math so cool and challenging, <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/06/07/think-small-2/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=67&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: right;"><em><a href="http://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy" target="_blank">Time is an illusion. Lunchtime doubly so.</a></em></p>
<p style="text-align: right;"><em><a href="http://en.wikipedia.org/wiki/Douglas_Adams" target="_blank">Douglas Adams, </a></em></p>
<p>By the way, the <a href="http://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy_%28film%29" target="_blank">movie</a> isn’t as bad as I thought when I saw it the first time. I guess I was too narrow-minded back then.</p>
<p>To paraphrase Douglas Adams, everyone has problems, and mathematicians doubly so. <strong>Problems</strong> are what makes math so cool and challenging, and coming up with a nice, beautiful solution is what makes mathematicians go “WOOHOO! HAHAHAHA! OOOOH YEAH!” That’s why I want to start my discussion of mathematics with a (in my view, very interesting) problem. There is no clear way to state it rigorously, but it’s more or less intuitively clear what’s going on. So here we go: you can pick the more formalized or less formalized version; the way I first heard it (thanks to V. Valov, MIT, ’15) was in the latter version.</p>
<p style="text-align: left;"><strong>Not so formal:</strong> There are several lions and one goat (note that lions enjoy eating goats). If a lion eats a goat he turns into a goat, and each lion knows that. What is going to happen?</p>
<p style="text-align: left;"><strong>More formal:</strong> There are <img alt="n\in\mathbb{N}" class="latex" src="http://s0.wp.com/latex.php?latex=n%5Cin%5Cmathbb%7BN%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n\in\mathbb{N}"/> lions and <img alt="1" class="latex" src="http://s0.wp.com/latex.php?latex=1&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="1"/> goat. Each lion obeys the following set of priorities:</p>
<ol>
<li>Stay alive.</li>
<li>Eat a goat.</li>
</ol>
<p>in this order, meaning that he’s going to eat a goat if and only if he’ll stay alive after that. If a lion eats a goat, he’s going to turn into a goat, and each lion knows that. Also, somewhat surprisingly, lions can predict the outcome of any possible situation in the lion-goat configuration. If several lions want to eat one goat, assume that the only result of this is one of them eating the goat.</p>
<p style="text-align: left;">What is going to happen?</p>
<p style="text-align: center;">***</p>
<p style="text-align: left;">If you want to get any real fun out of this blog post, you should now try to solve it for yourself.</p>
<p style="text-align: center;">***</p>
<p style="text-align: left;"><strong>Solution.</strong> I’ve already showed this problem (in the more formal version) to several people from different math backgrounds. Common first reactions were nevertheless similar: “Nothing is going to happen (implicit: each lion will avoid becoming a goat and thus being eaten)!”; or, “There is going to be one goat in the end (implicit: lions just want to eat goats. That’s it.)!” My initial reaction was similar. There is often confusion as to why the number <img alt="n\in\mathbb{N}" class="latex" src="http://s0.wp.com/latex.php?latex=n%5Cin%5Cmathbb%7BN%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n\in\mathbb{N}"/> should even matter.</p>
<p style="text-align: left;">Then you can just get stuck, as it often happens in math (it wouldn’t be that interesting otherwise, would it?).</p>
<p style="text-align: left;">One thing I learned from the <a href="http://www.imo-official.org/" target="_blank">olympiad</a> training (good old times) was that whenever you have ” for <img alt="n \in\mathbb{N} " class="latex" src="http://s0.wp.com/latex.php?latex=n+%5Cin%5Cmathbb%7BN%7D+&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n \in\mathbb{N} "/>…”, and no real ideas what to do, you should just start with looking at <img alt="n=1, n=2, n=3,\ldots " class="latex" src="http://s0.wp.com/latex.php?latex=n%3D1%2C+n%3D2%2C+n%3D3%2C%5Cldots+&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n=1, n=2, n=3,\ldots "/> and try to find a pattern. It’s that simple, and yet often overlooked by contestants.</p>
<p style="text-align: left;"><img alt="n=1" class="latex" src="http://s0.wp.com/latex.php?latex=n%3D1&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n=1"/>. Well, he’s either going to eat the goat or not. But there’s no one else to eat him if he does, so the list of priorities tells us that he’s gonna have a meal. Yay! So for <img alt="n=1" class="latex" src="http://s0.wp.com/latex.php?latex=n%3D1&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n=1"/> the outcome is that the lion eats the goat.</p>
<p style="text-align: left;"><img alt="n=2" class="latex" src="http://s0.wp.com/latex.php?latex=n%3D2&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n=2"/>. It doesn’t take a lot of effort to see that if one of the lions eats the goat, the other lion is going to eat <em>him</em>, so in this case the lions are going to stick to priority number 1 and do nothing.</p>
<p style="text-align: left;"><img alt="n=3" class="latex" src="http://s0.wp.com/latex.php?latex=n%3D3&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n=3"/>. Hmm. Well, for what we may call the first move, the goat is either going to be eaten or not.</p>
<p style="text-align: left;">If it is, we’re left with two lions and a goat… <strong>sounds sort of familiar.</strong> Nothing happens.</p>
<p style="text-align: left;">Since nothing happens (the lion who eats the goat stays alive, though a bit more goatish), it <em>must </em>be the case that the a lion eats the goat (recall the priorities).</p>
<p style="text-align: left;">Now we’re going somewhere (aren’t we?). In <img alt="n=4" class="latex" src="http://s0.wp.com/latex.php?latex=n%3D4&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n=4"/>, we again consider the same two cases and see that if a lion eats the goat, he is going to be eaten by another lion afterwards, because that other lion knows he’s not going to be eaten, because… blah blah… because… blah blah.. because if there’s one lion and a goat, he’s going to eat the goat. It’s sort of long to phrase. These lions probably get a really bad headache while thinking of the outcome of a given situation…</p>
<p style="text-align: left;">Well, not really. Math is about patterns, and quite often, about being concise. Even something that doesn’t seem too important, like notation, can bring great insights when introduced in the right way. In our case, it is the <strong>hypothesis </strong>- i.e., what we think the answer is – that will help us actually <strong>prove</strong> that it is the answer. <strong>Mathematicians like to know <a href="http://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe.2C_and_Everything_.2842.29" target="_blank">the answer</a> before they actually start solving the problem</strong> (and this doesn’t only apply to problems with numbers <img alt=":)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  ).</p>
<p>So, what is the hypothesis going to be? We saw that for <img alt="n = 1,3" class="latex" src="http://s0.wp.com/latex.php?latex=n+%3D+1%2C3&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n = 1,3"/> one lion eats the goat and that’s it, whereas for <img alt="n = 2,4" class="latex" src="http://s0.wp.com/latex.php?latex=n+%3D+2%2C4&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n = 2,4"/>, nothing happens. Proceeding in the same way with <img alt="n = 5, 6,\ldots" class="latex" src="http://s0.wp.com/latex.php?latex=n+%3D+5%2C+6%2C%5Cldots&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n = 5, 6,\ldots"/> we find that for <img alt="5,7,9,\ldots" class="latex" src="http://s0.wp.com/latex.php?latex=5%2C7%2C9%2C%5Cldots&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="5,7,9,\ldots"/> a lion eats the goat and for <img alt="n = 6,8,10,\ldots" class="latex" src="http://s0.wp.com/latex.php?latex=n+%3D+6%2C8%2C10%2C%5Cldots&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n = 6,8,10,\ldots"/> nothing happens. We are now pretty convinced that this is one of the simplest possible patterns: even and odd.</p>
<p>Now that we’ve made that leap of faith, a straightforward <a href="http://en.wikipedia.org/wiki/Mathematical_induction" target="_blank">induction</a> can be used to prove that it is actually correct. Induction is basically what we did in order to deduce the <img alt="n = 4" class="latex" src="http://s0.wp.com/latex.php?latex=n+%3D+4&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n = 4"/> case from the <img alt="n = 3" class="latex" src="http://s0.wp.com/latex.php?latex=n+%3D+3&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="n = 3"/> case, but you just keep doing it on and on. The idea is that any natural number is finite, so we’re going to reach it at some point. Thinking small helped us think big.</p>
<p>It is worth noting how important the principle of induction is. If you want to be rigorous (and mathematicians certainly do that, for a simple reason – they don’t want to fall into the trap of intuition), it doesn’t even make sense to talk about <strong>proving </strong>the principle of induction. This has got to do with what the <img alt="\mathbb{N}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BN%7D&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\mathbb{N}"/> actually <a href="http://en.wikipedia.org/wiki/Peano_axioms" target="_blank">is</a> in the formal sense – the principle of induction is actually a part of the definition of the natural numbers that is accepted today, and indeed the most powerful axiom among Peano’s axioms.</p>
<p>And so we enter the realm of rigorous mathematical logic where <a href="http://en.wikipedia.org/wiki/Georg_Cantor" target="_blank">one</a> can go <a href="http://www.youtube.com/watch?v=NMNgbISmF4I&amp;ob=av2e" target="_blank">crazy</a> and proving <img alt="\forall y\in\mathbb{N}:\forall z\in\mathbb{N}: \forall x \in\mathbb{N}: y\neq z \implies yx\neq zx" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cforall+y%5Cin%5Cmathbb%7BN%7D%3A%5Cforall+z%5Cin%5Cmathbb%7BN%7D%3A+%5Cforall+x+%5Cin%5Cmathbb%7BN%7D%3A+y%5Cneq+z+%5Cimplies+yx%5Cneq+zx&amp;bg=fafad3&amp;fg=6f5e4e&amp;s=0" title="\forall y\in\mathbb{N}:\forall z\in\mathbb{N}: \forall x \in\mathbb{N}: y\neq z \implies yx\neq zx"/> takes about 6 pages. If you want to hang around, you might find <a href="http://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach" target="_blank">this </a>interesting.</p>
<p>And finally, the above approach is not always guaranteed to be a good idea. There are a lot of crazy examples (and counterexamples, if you like the negative connotation better) for all kinds of things in math, and thinking small is no exception. I’m so sorry to bring this to your attention, but see <a href="http://en.wikipedia.org/wiki/Borwein_integral" target="_blank">this</a> and <a href="http://www.math.hmc.edu/funfacts/ffiles/20009.5.shtml" target="_blank">this</a>. You know, you <a href="http://spikedmath.com/499.html" target="_blank">can’t</a> have everything.</p>
<p>Anyway, I’m not really blogging and this might be my last post. Farewell!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/67/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/67/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/67/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/67/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/67/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/67/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/67/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/67/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/67/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/67/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/67/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/67/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/67/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/67/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=67&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-07T22:44:48Z</updated>
    <category term="Mathematics"/>
    <category term="Inspiration"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=34</id>
    <link href="http://amakelov.wordpress.com/2012/06/07/gsoc-setting-up-the-environment/" rel="alternate" type="text/html"/>
    <title>GSoC: Setting up the environment</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">A guide from a newbie So you’re gonna be coding? Well, coding and Linux go really well together… they say. But if you like how everything in Windows seems to work without you thinking too much about it, don’t despair! Because there are these amazing things called virtual machines that allow you to run two <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/06/07/gsoc-setting-up-the-environment/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=34&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><em><strong>A guide from a newbie</strong></em></p>
<p>So you’re gonna be coding? Well, coding and Linux go really well together… they say.</p>
<p>But if you like how everything in Windows seems to work without you thinking too much about it, don’t despair!</p>
<p>Because there are these amazing things called <a href="http://en.wikipedia.org/wiki/Virtual_machine" target="_blank">virtual machines</a> that allow you to run two operating systems simultaneously on the same computer…</p>
<p>wait what?!… Yes, this is possible. Actually, the idea turns out to be quite <a href="http://www.extremetech.com/computing/72186-virtual-machines-vmware-part-i/2" target="_blank">old</a>, and, it seems, backed up by some fairly sophisticated <a href="http://developers.slashdot.org/story/02/06/25/1223234/virtual-machine-design-and-implementation-in-cc" target="_blank">theory</a> (so it’s not surprising that virtual machines feel like <a href="http://www.quotationspage.com/quote/776.html" target="_blank">magic</a>).</p>
<p>I personally use the <a href="http://en.wikipedia.org/wiki/Hypervisor" target="_blank">hypervisor </a><a href="https://www.virtualbox.org/" target="_blank">Virtual Box</a> and the <a href="http://en.wikipedia.org/wiki/Ubuntu_%28operating_system%29" target="_blank">Ubuntu</a> operating system as a guest OS. The following simple <a href="http://www.psychocats.net/ubuntu/virtualbox" target="_blank">guide</a> got Ubuntu installed and running inside the VM in about half an hour. It is important to decide how you’re going to split your machine’s resources between the host OS and the guest OS, mainly the CPU and RAM, but you can always revert the changes if you find something is not quite balanced. I have the following on my machine:</p>
<p>CPU: Intel Core i3 M 350 @ 2.27 GHz</p>
<p>RAM: 4.00 GB</p>
<p>ATI Mobility Radeon HD 5145 512 MB</p>
<p style="text-align: right;">running under Windows 7.</p>
<p>I assigned as much as I could to my VM, this being 1.75GB of RAM, 2 CPUs and 128MB of video memory. It has been running pretty smoothly for all my programming/web browsing purposes so far (unless when I try to compute something ridiculously huge, but that’s sort of expected); the host OS is also performing smoothly for web browsing, and that’s quite enough for me at the moment.</p>
<p>Next, you <em>want </em>to get the <a href="http://www.virtualbox.org/manual/ch04.html" target="_blank">guest additions installed</a> because they make the VM seem even more magical (and, what is probably more important from a practical perspective, more user-friendly).</p>
<p>Setting up <strong>shared folders</strong> is also really convenient – and changing the contents of the folder in one OS can immediately be seen in the other (see? <a href="http://www.youtube.com/watch?v=YWf5BLUOhNM&amp;ob=av2n" target="_blank">magic!</a>). It took me some time to figure out the cryptic command</p>
<p><code>mount -t vboxsf [-o OPTIONS] sharename mountpoint</code></p>
<p>found in the Shared Folders menu of VirtualBox, but, in short, what you have to do is open a terminal in your Ubuntu guest OS and use</p>
<p><code>sudo mount -t vboxsf sharename path</code></p>
<p>where sharename is only <strong>the name</strong> of your shared folder as you created <strong>in your host OS</strong> (for me, it is in the C:\Users\Username\.VirtualBox folder, so for example if you want to share C:\Users\Username\.VirtualBox\shared you should use shared for sharename), and path is the full path, relative to your home directory, to the folder as which you want the shared folder to appear <strong>in your guest OS</strong>. Be careful, since mounting the shared folder will <strong>erase</strong> whatever there is in the folder pointed to by path (this happened to me once, but restarting the guest OS undid the changes). Also, the folder pointed to by path must exist by the time of mounting.</p>
<p>Next, the <strong>coding tools</strong>. For editing code, I shamelessly use gedit that comes with Ubuntu (probably a very bad idea in general, but we’ll see where this goes). Since I’m writing code for a large enough project to care about trailing whitespace and stuff, I found the following <a href="https://gitorious.org/gedit-trailing-spaces" target="_blank">two</a> <a href="https://github.com/jonleighton/gedit-trailsave" target="_blank">plugins</a> really helpful for automatically getting rid of these brats – you can download them directly from the git repository and copy the relevant files in the relevant folders, as per <a href="https://live.gnome.org/Gedit/Plugins" target="_blank">this</a>).</p>
<p>Which leads us to version control, and <a href="http://en.wikipedia.org/wiki/Git_%28software%29" target="_blank"><strong>git</strong></a>. I don’t really know git, but I’m getting used to it, and the following <a href="http://gitref.org/" target="_blank">reference</a> has been helpful so far (though it doesn’t provide information about some of the more advanced commands). Beyond that, you should basically scream for help, google stuff if you’re not sure, and, most importantly, get your hands on it (this approach seems to work for a surprising number of things in life).</p>
<p>And finally, <a href="http://www.youtube.com/watch?v=anwy2MPT5RE" target="_blank"><strong>python</strong></a>. I recently started using the <a href="https://github.com/ipython/ipython" target="_blank">ipython</a> interpreter (you can download the development version from github, or a stable release from their <a href="http://ipython.org/" target="_blank">website</a>). It has some really nice features, for example</p>
<p><code>%load_ext autoreload</code></p>
<p><code>%autoreload</code></p>
<p>reloads the modules currently imported so that any changes made after the interpreter was started are taken into account. Or<br/>
<code><br/>
%timeit(my_function())</code></p>
<p>which runs some function my_function() several times to record the time of computation more precisely.</p>
<p>Well, that’s it for now. If I find any other useful additions to my environment, or anything nontrivial that I had to do in order to make my life as a programmer easier, I’ll try to put it up here, for my own reference and for anyone who may be struggling with the same problems.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/34/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/34/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/34/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/34/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/34/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/34/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/34/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/34/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/34/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/34/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/34/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/34/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/34/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/34/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=34&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-07T18:54:41Z</updated>
    <category term="Programming"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=333</id>
    <link href="http://krastanov.wordpress.com/2012/06/04/consistent-output-from-the-sympy-solvers-and-some-ideas-about-the-ode-solver/" rel="alternate" type="text/html"/>
    <title>Consistent output from the SymPy solvers (and some ideas about the ODE solver)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The work on the differential geometry module has not progressed much this week. I have fixed some minor issues, docstrings and naming conventions, however I have not done much with respect to the implementation of form fields as there are still some questions about the design to be ironed out. Instead I focused on studying [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=333&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The work on the differential geometry module has not progressed much this week. I have fixed some minor issues, docstrings and naming conventions, however I have not done much with respect to the implementation of form fields as there are still some questions about the design to be ironed out.</p>
<p>Instead I focused on studying two of the features that SymPy presents and that I will use heavily. The first is the simplification routine that I will discuss another time. The second one is the different solvers implement in SymPy.</p>
<p>First of all, I have a very hard time getting used to the various output that the solvers provide. The algebraic equations solver, for example, can return either an empty list or a None instance if there is no solution. If there are solutions it can return a list of tuples of solutions, or a list of dictionaries of solutions, or a list of solutions if there is only one variable to solve for, or the solution itself if the solution is unique… Thankfully, a remedy for this was implemented by Christopher Smith. In <a href="https://github.com/sympy/sympy/pull/1324" target="_blank">pull request 1324</a> he provided some flags that force the solver to return the solutions in a canonical form. I am very grateful for his work and I hope that in the not too distant future what he has done will become the default behavior. I also hope that the solver will get refactored, because internally it is still a mess of different possible outputs that are canonicalized only at the very end. It is possible that I will work on this later.</p>
<p>Then there is the ODE module. I already need this solver in order to work with the integral curves that my code produces[1]. It is a very advanced solver written a few years ago by Aaron Meurer as part of his GSoC project. However, it still does not support systems of ODEs or solving for initial conditions. With Aaron’s help I have started those. The main difficulty is that I am covering only the simplest cases, however the new API must be futureproof. Moreover, here I again have a problem with the various outputs that can be produced by the ODE solver. Solutions are always returned as Equation instances (which is necessary, as some solutions can be in implicit form), however if there are multiple solutions they are returned in a list, while single solutions are returned themselves (not in a list). Anyway, the structure of the ODE module is straightforward so this should not be too hard to work around.</p>
<p>This week I will probably finish my work with the ODE solver and proceed to the form fields.</p>
<p>[1] The code on the differential geometry side is ready, however before showing it I will first extend the ODE solver in order to have more interesting examples.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/333/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/333/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/333/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/333/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/333/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/333/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/333/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/333/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/333/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/333/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/333/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/333/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/333/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/333/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=333&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-03T22:14:40Z</updated>
    <category term="SymPy"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="ode"/>
    <category term="solver"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-06-03T22:20:17Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/06/03/gsoc-week-2</id>
    <link href="http://catchmrbharath.github.com/programming/2012/06/03/gsoc-week-2" rel="alternate" type="text/html"/>
    <title>GSoC Week 2</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I worked on interval aithmetic using numpy this week. I have almost got the module ready. I have to integrate it with Stefan’s branch and a basic version of implicit plotting will be ready to go. I will update this blog post with plots and performance results once I integrate it with Stefan’s branch.</p></div>
    </summary>
    <updated>2012-06-03T07:00:00Z</updated>
    <published>2012-06-03T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-06-15T04:00:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=25</id>
    <link href="http://amakelov.wordpress.com/2012/06/02/google-summer-of-code-2012-week-2/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 2</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi everyone, Here is a brief summary of what I’ve been doing for the second week of my GSoC. The first main direction was randomization: an implementation of the product replacement algorithm using an optimization suggested by Leedham-Green, as described in [1]. After an initialization that takes ~ 50 group operations (a number suggested by <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/06/02/google-summer-of-code-2012-week-2/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=25&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi everyone,</p>
<p>Here is a brief summary of what I’ve been doing for the second week of my GSoC.</p>
<p>The first main direction was randomization: an implementation of the <strong><a href="http://en.wikipedia.org/wiki/Nielsen_transformation#Product_replacement_algorithm" target="_blank">product replacement algorithm</a> using an optimization suggested by Leedham-Green, as described in [1]</strong>. After an initialization that takes ~ 50 group operations (a number suggested by [1] to be large enough for practical purposes), group elements the properties of which are satisfyingly random for most CGT algorithms can be produced at the cost of one group operation (in the context of permutation groups, by a ‘group operation’ we mean the multiplication of two permutations of size the degree of the permutation group). Thus the time complexity here is O(n).</p>
<p>The product replacement algorithm allowed the implementation of a simple (yet backed up by some nontrivial results in number theory and group theory) and fast <a href="http://en.wikipedia.org/wiki/Monte_Carlo_algorithm" target="_blank">Monte Carlo algorithm</a> for <strong>testing whether a given permutation group is the symmetric or the alternating group</strong> (once we know this, it is straightforward to decide which one it is by checking the parity of all the generators). This is suggested in [1] as a first step in analyzing a large permutation group. It should be noted that the algorithm is actually one-sided Monte Carlo (as defined in [2]): a wrong answer is guaranteed to be wrong, whereas a right answer may be wrong with some predefined probability. The complexity here is O(n log(n)).</p>
<p>The second direction was <strong>computing minimal blocks by Atkinson’s algorithm</strong>. A function taking several points S from {0, 1, …, n-1} for a transitive permutation group G of degree n, and returning the maximal block system of G (meaning the one with the smallest block size) such that the points in S are contained in the same block, was implemented. The time complexity is just above O(|S|n) ([1]). Atkinson’s algorithm itself makes use of the <a href="http://www.algorithmist.com/index.php/Union_Find" target="_blank">union-find</a> algorithm (of course, with path compression and union by rank) to manage an equivalence relation on the set {0, 1, …, n-1}.</p>
<p>As a consequence of this, <strong>primitivity testing</strong> in O(n^2) time is possible (we just check for blocks containing {0, 1}, {0, 2},…, {0, n-1}). There are three optimizations to this suggested in [1] that were implemented:</p>
<ul>
<li>Compute the stabilizer Stab of 0 and look at {0, rep} for orbit representatives of the action of Stab on {0, …,  n-1}</li>
<li>Stop the merging process once an equivalence class becomes larger than n/p where p is the smallest prime dividing n (as block sizes must divide n)</li>
<li>Instead of computing the stabilizer deterministically, take a subgroup generated by several random elements from Stab, by a slight modification of product replacement for G.</li>
</ul>
<p>Still, the algorithm runs for O(n^2) time and will perform badly if Stab is small. There are primitivity testing algorithms that run in almost linear time (one is suggested in [2]), but it is claimed in [1] that the use of Atkinson’s algorithm performs well for permutation groups with degrees in the millions (which is good for our purposes) — so the question of performance here needs some further investigation.</p>
<p>There were some other minor changes made:</p>
<ul>
<li>The group constructors for Sym and Alt now don’t calculate the order of the group right away, but only when the order is called for ( factorial(1000000) used to take almost all the time for initializing SymmetricGroup(1000000)).</li>
<li>The function orbit() can now compute the union of the orbits for several points, or the orbit of an ordered tuple of elements of {0, 1,…, n-1}. It would be desirable to be able to do this for unordered tuples as well – but the effectiveness of this might become very low since sets are not hashable in python. Perhaps there is some way to get around this.</li>
</ul>
<p>Several changes in design were proposed in the <a href="https://github.com/sympy/sympy/pull/1319#issuecomment-6005413" target="_blank">pull request for week1</a> that deserve consideration (and discussion).</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<p>[2] Permutation Group Algorithms, Ákos Seress, Cambridge University Press</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/25/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/25/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/25/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/25/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/25/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/25/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/25/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/25/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/25/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/25/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/25/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/25/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/25/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/25/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=25&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-02T16:35:29Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=116</id>
    <link href="http://rhoforsympy.wordpress.com/2012/06/02/week-2-activity-summary/" rel="alternate" type="text/html"/>
    <title>Week 2: Activity Summary</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week there was fewer lines of code than last week. But, with this week I have almost(except partial trace) merged all changes from @ellisonbg’s densityop branch and ready to extend the implementation to incorporate other features.  Most of the time I spent this week is to review and structure my work for the coming [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=116&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week there was fewer lines of code than last week. But, with this week I have almost(except partial trace) merged all changes from @ellisonbg’s densityop branch and ready to extend the implementation to incorporate other features.  Most of the time I spent this week is to review and structure my work for the coming weeks and address comments on previous PR . I have provided a detailed plan below.</p>
<h2><span style="text-decoration: underline;">Tasks performed this week</span></h2>
<p>1.  Responded to and completed all comments on last weeks pull <a href="https://github.com/sympy/sympy/pull/1312" title="PR 1312">PR1312.</a><br/>
2.  Pushed a minor code change branch to my git account. This change handles <strong>entropy for general density operators</strong>.  (<em>I am still waiting for the previous pull request to get merged, since this pull request was branched off that.)<br/>
</em>3.  Review and understand the partial trace operations and qubit related implementation.  Further notes will be prepared for the discussion.<br/>
4. Understand current implementation of tensor products to plan work for coming weeks.</p>
<h2><span style="text-decoration: underline;">My plan for weeks 3,4,5,6 ( based on design discussion we have had regarding partial trace )</span></h2>
<p><em>(Note, the detailed plan here still meets the timeline outlined in the proposal. The only change is I will be working fewer hours during Week 4(June 10-16), since I am at the summer school. Hopefully, I can contain the work to not flow into later weeks). </em></p>
<h3>Week 3/4</h3>
<p>Implement/test partial trace methods [ <strong>_eval_partial_trace</strong> ] and other required methods for following classes:</p>
<p>QubitDensity (<span style="color: #800000;"><em>name suggestion needed!</em>)</span> : for this I will use the current bit-twiddling algorithm but add detailed test cases.<br/>
TensorProduct : Code to handle density operators ( both qubit based, and generic) during expand, mul operations.<br/>
TensorProduct : _eval_partial_trace method will split the sub-system to trace. and then based on states inside Tr(|i&gt;&lt;k|).  [ <em>This needs more discussions during the next few days and during IRC session.</em>]<br/>
Sub-classes of ‘State’ : Need to decide which subclasses need and how it should be done.</p>
<h3>Week 5</h3>
<p>Symbolic Trace operations and Partial Trace operations.</p>
<h3>Week 6</h3>
<p>Changes to qapply for L and R operations and any operations that would be needed based on changes so far. (will also fix the bug identified in PR 1312)</p>
<h2><span style="text-decoration: underline;">Other related learning activities this week.</span></h2>
<p>I tried <a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html">IPython Notebook</a> and I absolutely love it. Now, I am using that as my command line interface for running sympy commands and understanding current implementation.  The best thing Notebook has done to my workflow is help me save my scratch work and go back whenever I need it. Thanks<a href="https://github.com/ellisonbg" title="Brian's github"> @ellisonbg</a>.</p>
<p>I did have to jump some hoops to set up Notebook on Ubuntu 11.04, since I had to build a lot of dependencies myself. I plan to blog about it as part of another post.  A minor pain point with it is, I need to drag/drop files I want to work on. Wish it gave me an option to type in the URL to a saved notebook rather than forcing me to open a FileManager window to find file to drag and drop.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/116/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/116/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/116/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/116/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/116/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/116/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/116/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/116/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/116/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/116/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/116/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/116/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/116/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/116/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=116&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-02T13:30:41Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/2012/06/02/gsoc-2012-post-3-4/</id>
    <link href="http://angadhsympy.wordpress.com/2012/06/02/gsoc-2012-post-3-4/" rel="alternate" type="text/html"/>
    <title>GSoC 2012 Post 3</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">It’s the last week of school so things are a little crazy. I haven’t had time to look into much for the summer of code this week as a result. I will have my responsibilities for the quarter wrapped by noon on the 5th (Tuesday) so it appears that I will be on schedule as [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=65&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>It’s the last week of school so things are a little crazy. I haven’t had time to look into much for the summer of code this week as a result. I will have my responsibilities for the quarter wrapped by noon on the 5th (Tuesday) so it appears that I will be on schedule as predicted.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/65/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/65/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/65/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=65&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-02T00:34:15Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-06-15T04:00:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/2012/06/02/the-prologue-37/</id>
    <link href="http://scolobb.wordpress.com/2012/06/02/the-prologue-37/" rel="alternate" type="text/html"/>
    <title>The Prologue</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">And yeah, the last exam in this semester is a matter of the past In my opinion, this is so important a thing, that it deserves standing in a separate paragraph Since I’ve only had a couple hours of work today, because of the exam, there’s not much that I can say about my progress [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=106&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>And yeah, the last exam in this semester is a matter of the past <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  In my opinion, this is so important a thing, that it deserves standing in a separate paragraph <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>Since I’ve only had a couple hours of work today, because of the exam, there’s not much that I can say about my progress this week.  I’d like to explicitly note, though, that this delay was allowed for in the <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov%3A-Category-Theory-Module/">proposal</a>, so I’m still good with my timing.</p>
<p>Nevertheless, I have started setting up the basic infrastructure (view <a href="https://github.com/scolobb/sympy/tree/ct0-base-classes">branch</a> on GitHub).  While I did contribute bits of code to SymPy before, I’ve never lived through the experience of adding a new module, and this has immediately posed a number of important questions which I think I have succeeded find an answer for by looking at other parts of SymPy, but also by asking the Knowledgeable.  In the next paragraphs I will summarise the most important of the problems I have run into and the solutions I have subsequently adopted.</p>
<p>My first problem was about docstrings.  While it is clear that a docstring should briefly describe the class, I wasn’t sure as to how much information about the mathematical concept itself to introduce.  The central thing to realise here is that category theoretical notions aren’t among the best known; moreover, they tend to bear names which may be quite misleading for people familiar with notions with similar names, introduced in other domains.  Therefore, I decided to also briefly describe the concept itself in the docstring of the class which is meant to represent this concept.</p>
<p>My other point of uncertainty was about producing string representations of morphisms.  My being unsure arose from the fact that my knowledge about string representations and pretty printing in SymPy had been rather vague.  Now, however, it has been <a href="https://groups.google.com/d/topic/sympy/6zBUN2OzmpA/discussion">decided</a> that the string representation of a morphism <img alt="f:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f:A\rightarrow B"/> should be</p>
<pre>Morphism(Object("A"), Object("B"), "f")</pre>
<p>while in its pretty-printed version it should be something like</p>
<pre>f:A-&gt;B</pre>
<p>With morphism composition things should be done similarly.  For example, given two morphisms <img alt="f:A\rightarrow B" class="latex" src="http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="f:A\rightarrow B"/> and <img alt="g:B\rightarrow C" class="latex" src="http://s0.wp.com/latex.php?latex=g%3AB%5Crightarrow+C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g:B\rightarrow C"/>, the morphism <img alt="g\circ f:A\rightarrow C" class="latex" src="http://s0.wp.com/latex.php?latex=g%5Ccirc+f%3AA%5Crightarrow+C&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="g\circ f:A\rightarrow C"/> should look like</p>
<pre>Morphism(Object("B"), Object("C"), "g") * 
  Morphism(Object("A"), Object("B"), "f")</pre>
<p>in string representation, and like</p>
<pre>g∘f:A-&gt;C</pre>
<p>in pretty-printed version.  Note that the object <img alt="B" class="latex" src="http://s0.wp.com/latex.php?latex=B&amp;bg=000000&amp;fg=b8babb&amp;s=0" title="B"/> is not shown in this representation.  I think this better fits the notion of composition of morphisms, but I am totally open to suggestions in this regard.  I will also take care that the composition symbol is rendered properly and is substituted with an asterisk on non-unicode terminals.</p>
<p>And the latest problem I am currently at is writing tests <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/>  I have once read in good book on Smalltalk (no link, since I don’t remember its name <img alt=":-(" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif"/>  ) that writing tests <em>before</em> the actual functionality is a Good Thing™.  I’ll try to apply this approach right now, especially since I’ve heard some of the SymPy developers confirm the goodness of the Thing. Thus, the methods I now have in <em>Morphism</em> only have docstrings mostly and do nothing.  I plan to write some tests which should feature the desired behaviour and then to actually implement this behaviour.  Afterwards, I’ll extend the tests to cover the corner cases.  I guess it’s going to take a while to actually do all this, but I think it’s going to be worthwhile.  Also, I’d like to suppose that I will get faster at it with time <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p>On the overall, I feel that I haven’t yet fully adapted to my current “job”, but I expect to free myself from this feeling over the next couple of days <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<p><strong>UPDATED </strong>To mention a better pretty-printed version of a morphism (see first comment).</p>
<p><strong>UPDATED</strong> To included a more correct way to represent morphism composition as string (see first reply to first comment).</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/106/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/106/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/106/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/106/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/106/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/106/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/106/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/106/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/106/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/106/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/106/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/106/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/106/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/106/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=106&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-06-01T21:41:39Z</updated>
    <category term="SymPy"/>
    <category term="category theory"/>
    <category term="gsoc"/>
    <category term="morphism"/>
    <category term="string representation"/>
    <category term="test"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-06-15T04:00:21Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=307</id>
    <link href="http://krastanov.wordpress.com/2012/05/27/scalar-and-vector-fields-in-sympy-first-steps/" rel="alternate" type="text/html"/>
    <title>Scalar and Vector Fields in SymPy – First Steps</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The Differential Geometry module for SymPy already supports some interesting basic operations. However, it would be appropriate to describe its structure before giving any examples. First of all, there are the Manifold and Patch classes which are just placeholders. They contain all the coordinate charts that are defined on the patch and do not provide, [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=307&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The Differential Geometry module for SymPy already supports some interesting basic operations. However, it would be appropriate to describe its structure before giving any examples.</p>
<p>First of all, there are the <code>Manifold</code> and <code>Patch</code> classes which are just placeholders. They contain all the coordinate charts that are defined on the patch and do not provide, for instance, any topological information. This leads us to the <code>CoordSystem</code> class which contains all the coordinate transformation logic. For example, if I want to define the <img alt="\mathbb{R}^2 " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D%5E2+&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\mathbb{R}^2 "/> euclidean manifold together with the polar and Cartesian coordinate systems I would do:</p>
<p/><pre class="brush: python;">R2 = Manifold('R^2', 2)
# Patch and coordinate systems.
R2_origin = Patch('R^2_o', R2)
R2_r = CoordSystem('R^2_r', R2_origin)
R2_p = CoordSystem('R^2_p', R2_origin)

# Connecting the coordinate charts.
x, y, r, theta = [Dummy(s) for s in ['x', 'y', 'r', 'theta']]
R2_r.connect_to(R2_p, [x, y],
                      [sqrt(x**2 + y**2), atan2(y, x)],
                inverse=False, fill_in_gaps=False)
R2_p.connect_to(R2_r, [r, theta],
                      [r*cos(theta), r*sin(theta)],
                inverse=False, fill_in_gaps=False)
</pre><p/>
<p>All following examples will be about the <img alt="\mathbb{R}^2 " class="latex" src="http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D%5E2+&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\mathbb{R}^2 "/> manifold which is already implemented in the code for the module. Also, notice the use of the <code>inverse</code> and <code>fill_in_gaps</code> flags. When they are set to <code>True</code> the <code>CoordSystem</code> classes try to automatically deduce the inverse transformations using SymPy’s <code>solve</code> function.</p>
<p>Now that we have a manifold we would like to create some fields on it and define some points that belong to the manifold. The points are implemented in the <code>Point</code> class. You need to specify some coordinates when you define the point, however after that the object is completely coordinate-system-idependent.</p>
<p/><pre class="brush: python;"># You need to specify coordinates in some coordinate system
p = Point(R2_p, [r0, theta0])
</pre><p/>
<p>Then one can define fields. <code>ScalarField</code> takes points to real numbers and <code>VectorField</code> is an operator on <code>ScalarField</code> taking a scalar field to another scalar field by applying a directional derivative. For example, here <code>x</code> and <code>y</code> are the scalar fields taking a point and returning it’s coordinate and <code>d_dx</code> and <code>d_dy</code> are the vector fields <img alt="\frac{\partial}{\partial x}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial+x%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\frac{\partial}{\partial x}"/> and <img alt="\frac{\partial}{\partial y}" class="latex" src="http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial+y%7D&amp;bg=f3f3f3&amp;fg=888888&amp;s=0" title="\frac{\partial}{\partial y}"/>. <code>R2_r</code> is the Cartesian coordinate system and <code>R2_p</code> is the polar one.</p>
<p/><pre class="brush: python;">R2_r.x(p) == r0*cos(theta0)
# R2_r.d_dx(R2_r.x) is a also scalar field
R2_r.d_dx(R2_r.x)(p) == 1
</pre><p/>
<p>Looking at how can these fields be defined:</p>
<p/><pre class="brush: python;"># For a ScalarField you provide the transformation in some coordinate system
R2_r.x = ScalarField(R2_r, [x0, y0], x0)
#                     /      |        ^-------- the result
#     the coord system     the coordinates

# For a VectorField you provide the components in some coordinate system
R2_r.d_dx = VectorField(R2_r, [x0, y0], [1, 0])
#                        /      |         ^-------- the components
#         the coord system     the coordinates
</pre><p/>
<p>Obviously one can define much more interesting fields. For instance the potential due to a point charge at the origin is:</p>
<p/><pre class="brush: python;">potential = ScalarField(R2_p, [r0, thata0], -1/r0)
# And to reiterate, the definition does not limit you
# to use it only in this coordinate system. For instance:
potential(R2_r.point([x0, y0])) == 1/sqrt(x0**2 + y0**2)
</pre><p/>
<p>However there is another more intuitive way to do it:</p>
<p/><pre class="brush: python;"># R2_p.r is the scalar field that takes a point and returns the r coordinate
potential2 = 1/R2_p.r
potential2(R2_r.point([x0, y0])) == 1/sqrt(x0**2 + y0**2))
</pre><p/>
<p>And this new object <code>potential2</code> is not an instance of <code>ScalarField</code>. It is actually a normal SymPy expression tree that contains a <code>ScalarField</code> somewhere in its leafs (namely in this case it is <code>Pow(R2_p.r, -1)</code>). However, due to the change to one of the base classes of SymPy that I did in this <a href="https://github.com/sympy/sympy/pull/1299" target="_blank" title="Make Expr recursively callable">pull request</a> it is now possible for such tree to be a python callable, by recursively applying the argument to each callable leaf in the tree. This change is still debated and it may be reverted.</p>
<p>Vector fields can also be build in this manner. However, they pose a problem. What happens when you multiply a vector field and a scalar field? This operation should give another vector field. And here is a possible problem with the approach of recursively callable expressions trees:</p>
<p/><pre class="brush: python;"># Naively this operation will call a scalar field on
# another scalar field which is nonsense:
(R2_r.x * R2_r.d_dx)(R2_r.x) == R2_r.x(R2_r.x) * R2_r.d_dx(R2_r.x)
#                         nonsense----^
</pre><p/>
<p>The current solution is for <code>scalar_field(not_point)</code> to return the callable itself. Thus we have:</p>
<p/><pre class="brush: python;">(R2_r.x * R2_r.d_dx)(R2_r.x) == R2_r.x * R2_r.d_dx(R2_r.x)
#\________________/ \______/    \_______________________/
#   vector field        ^---scalar fields---^
</pre><p/>
<p>This way there is no need for complicated logic in <code>__mul__ nor is there need for addition subclasses of </code><code>Expr</code> in order to accommodate this behavior.</p>
<p>There is not much more to be said about the structure of the module. There are some other nice things already implemented like integral curves, however I will discuss these in a later post.</p>
<p>Among the things that should be done at some point:</p>
<ul>
<li>Should vector fields be callable on points? If yes, what the result should be? An abstract vector, a tuple of coordinates in a certain coordinate system, something else?</li>
<li>There are many expressions generated by this code that are not simple enough. I should work on the simplification routines and on the differential geometry module itself in order to get more canonical expressions.</li>
<li>The last point is also valid about the solvers: some coordinate transformations are too complicated for the solvers to find the inverse transformation.</li>
<li><code>Manifold</code> and <code>Patch</code> have <code>name</code> attributes. Are these necessary? What is the role of <code>name</code> attributes in SymPy besides printing?</li>
<li>Start using <code>Lambda</code> where applicable.</li>
<li>Follow better the class structure of SymPy.</li>
</ul>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/307/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/307/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/307/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/307/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/307/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/307/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/307/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/307/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/307/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/307/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/307/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/307/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/307/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/307/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=307&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-05-27T13:04:42Z</updated>
    <category term="SymPy"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="integral curve"/>
    <category term="scalar field"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <category term="vector field"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-06-03T22:20:17Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=9</id>
    <link href="http://amakelov.wordpress.com/2012/05/26/google-summer-of-code-2012-week-1/" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012: Week 1</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi everyone, Here is a brief summary of what I’ve been doing for the first six days of my GSoC. Since there was already some work done on computational group theory in the module sympy.combinatorics, mainly in the files perm_groups.py and permutations.py, I got to know what the code is doing and made some minor <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/05/26/google-summer-of-code-2012-week-1/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=9&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi everyone,</p>
<p>Here is a brief summary of what I’ve been doing for the first six days of my GSoC.</p>
<p>Since there was already some work done on computational group theory in the module sympy.combinatorics, mainly in the files perm_groups.py and permutations.py, I got to know what the code is doing and made some minor improvements (improved docstrings, removed some duplicate functionality.) In particular, the implementation of the Schreier-Sims algorithm took most of my time, and I still have to analyze its complexity (it seems a bit slow). Anyway, I found the following <a href="http://www.m8j.net/%28All%29Schreier%20Sims%20Algorithm" target="_blank">files</a> particularly useful in making my way through the code.</p>
<p>Since there were already a lot of things implemented, this interfered with the <a href="http://google-melange.appspot.com/gsoc/proposal/review/google/gsoc2012/amakelov/1" target="_blank">schedule</a> I had set for myself on my GSoC application. So after a quick change of plans, I decided to:</p>
<ul>
<li>implement constructors for four of the basic types of groups (symmetric, cyclic, dihedral, alternating) in order to be able to use groups of fairly large size for testing and comparing the complexity of the different algorithms for computation with groups</li>
<li>Evaluate the more basic functionality already implemented (read: all but Schreier-Sims), in particular at orbits and stabilizers. It turned out that the implementations currently in sympy are slower than the ones suggested in [1], so I rewrote these and added implementations for the Schreier vector and some other orbit-related computations.</li>
</ul>
<p>In the near future (today and tomorrow), I’ll implement a procedure for taking direct products of several groups (so that I can have even more examples of groups for testing and playing around) and Monte Carlo testing if a given permutation group is large (the symmetric or the alternating group). You’re welcome to take a look at my branch labeled <a href="https://github.com/amakelov/sympy/tree/week1" target="_blank">week1</a>, and I’ll do a pull request in the next couple of days.</p>
<p>In the more distant future, I’ll dive into Schreier-Sims and take a look at the implementation offered in [1] (and maybe [2]?) in order to try to compare it with the existing one. Also, the randomized version of Schreier-Sims (the output of which can then be quickly tested with the deterministic version, [1] says) is promised to be significantly faster so it is a must-have. And I feel that there is some more optimization that can be done in permutations.py and perm_groups.py.</p>
<p>And about the changes in the interface I wanted to implement – my main pain right now is that singleton cycles have to be included in the cyclic form of a permutation. But the cyclic form itself is not heavily used in the rest of the functionality, so it is not such a pressing issue. Also, I feel that possible changes in the interface need some more careful thinking on my part… Do we want our group action to be on the left or on the right (GAP and MAGMA do it on the right, as I gather from [1])? Do we want to label the underlying set for a permutation by 0,1,…, n-1 or 1,2,…,n?…</p>
<p>Anyway, I’m really enthusiastic about my project and hope that we’ll have some nice and reasonably fast algorithms in CGT by the end of the summer!</p>
<p>[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3</p>
<p>[2] Permutation Group Algorithms, Ákos Seress, Cambridge University Press</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/9/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/9/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/9/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/9/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/9/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/9/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/9/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/9/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/9/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/9/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/9/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/9/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/9/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/9/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=9&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-05-26T13:10:22Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/05/26/adaptive-sampling-for-2d-plots</id>
    <link href="http://catchmrbharath.github.com/programming/2012/05/26/adaptive-sampling-for-2d-plots" rel="alternate" type="text/html"/>
    <title>Adaptive sampling for 2D plots</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This was my first week of GSoC and I spent time on experimenting with adaptive sampling. The major idea explored were what constitutes a condition for which we need not sample more to obtain an accurate plot. I started with the idea of the area of the triangle formed by the three consecutive points to be less than a tolerance value. This worked nicely but did oversampling unnecessarily. The problem with it was the area of the triangle was dependent on the distance between the points which made the condition dependent on the lengths and hence oversampled even though the line formed by the three points was almost collinear. So the obvious next idea was to check the angle formed by the three points and see whether it forms an angle near to 180 degree. There were three versions of the above algorithm implemented, out of which one was the iterative version of a recursive solution. The iterative version is <a href="https://github.com/Krastanov/sympy/pull/5">here</a>. Considering Stefan Krastanov’s suggestion, I implemented a recursive solution which samples 5 additional points between two points instead of a single point. The idea was to use numpy’s quick evaluations of an array and also arrive at the straight line condition faster. Also, this reuses most of the code written before. The code for the following can be found <a href="https://github.com/catchmrbharath/sympy/tree/adaptnew">here</a>. The snippet of the code is as follows:</p>
<div class="highlight"><pre><code class="python">    <span class="k">def</span> <span class="nf">get_adapt_segments</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">vectorized_lambdify</span><span class="p">([</span><span class="bp">self</span><span class="o">.</span><span class="n">var</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">expr</span><span class="p">)</span>
        <span class="n">list_segments</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="k">def</span> <span class="nf">sample</span><span class="p">(</span><span class="n">segment</span><span class="p">,</span> <span class="n">depth</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="n">list_segments</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">segment</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">new_sampling</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">*</span><span class="n">segment</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>
                <span class="n">new_segments</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_segments</span><span class="p">((</span><span class="n">new_sampling</span><span class="p">,</span> <span class="n">f</span><span class="p">(</span><span class="n">new_sampling</span><span class="p">)))</span>
                <span class="k">for</span> <span class="n">segmentA</span><span class="p">,</span> <span class="n">segmentB</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">new_segments</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">new_segments</span><span class="p">[</span><span class="mi">1</span><span class="p">:]):</span>
                    <span class="k">if</span> <span class="ow">not</span> <span class="n">flat</span><span class="p">(</span><span class="n">segmentA</span><span class="p">,</span> <span class="n">segmentB</span><span class="p">):</span>
                        <span class="n">sample</span><span class="p">(</span><span class="n">segmentA</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">list_segments</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">segmentA</span><span class="p">)</span>
                <span class="c">#sample the last segment</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">flat</span><span class="p">(</span><span class="n">new_segments</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="n">new_segments</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span>
                    <span class="n">sample</span><span class="p">(</span><span class="n">new_segments</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">list_segments</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">new_segments</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>

        <span class="n">points</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">start</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">end</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
        <span class="n">yvalues</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
        <span class="n">segments</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_segments</span><span class="p">((</span><span class="n">points</span><span class="p">,</span> <span class="n">yvalues</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">segment</span> <span class="ow">in</span> <span class="n">segments</span><span class="p">:</span>
            <span class="n">sample</span><span class="p">(</span><span class="n">segment</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">list_segments</span>


<span class="k">def</span> <span class="nf">flat</span><span class="p">(</span><span class="n">segmentA</span><span class="p">,</span> <span class="n">segmentB</span><span class="p">):</span>
    <span class="n">vectorA</span> <span class="o">=</span> <span class="n">segmentA</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">segmentA</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">vectorB</span> <span class="o">=</span> <span class="n">segmentB</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">segmentB</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">costheta</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">vectorA</span><span class="p">,</span> <span class="n">vectorB</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">vectorA</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">vectorB</span><span class="p">))</span>
    <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">costheta</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">0.0005</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre>
</div>
<p>The major problem with the above approach is the way that the rightmost point / segment is handled. The rightmost segment does not have another right segment to decide whether it forms a 180 degree angle or not. Hence it is assumed straight if the previous segment and the present segment forms a straight line. Most of the time this fails to sample further for the end segment thought it should have sampled. The problem can be seen in an plot of <span> $y = sin(x^{2})$ </span></p>
<img height="400" src="http://catchmrbharath.github.com/images/26052012/plot.png" width="600"/>
<p>The last method used is symmetric and gives better results, but it is quite ugly. The branch is <a href="https://github.com/catchmrbharath/sympy/tree/complexplot">here</a>.(EDIT: changed the link). It uses some amount of random sampling to avoid aliased results. The plot of <span> $y = sin(x^{2})$ </span> renders very accurately. Feel free to experiment with it and if there is a better method, you can comment below :).</p>
<img height="400" src="http://catchmrbharath.github.com/images/26052012/betterplot.png" width="600"/>
<p>I think I will get an non - ugly code ready by the tomorrow and wait for Stefan’s branch to get merged before submitting this method as pull request. This week has been lots of experimentation. I think I will spend the next week getting a basic version of Interval Arithmetic ready using numpy.</p></div>
    </summary>
    <updated>2012-05-26T07:00:00Z</updated>
    <published>2012-05-26T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-06-15T04:00:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/2012/05/26/gsoc-2012-post-2-18/</id>
    <link href="http://angadhsympy.wordpress.com/2012/05/26/gsoc-2012-post-2-18/" rel="alternate" type="text/html"/>
    <title>GSoC 2012 Post 2</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As I’m nearing the end of my quarter, I haven’t been able to afford myself the time to make any tangible contributions yet. I had expected this to happen as mentioned in my proposal. Nonetheless, I have spent more time delving into the ‘mechanics’ of sympy.physics.mechanics and improve my understanding of python in the little [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=55&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As I’m nearing the end of my quarter, I haven’t been able to afford myself the time to make any tangible contributions yet. I had expected this to happen as mentioned in my proposal. Nonetheless, I have spent more time delving into the ‘mechanics’ of sympy.physics.mechanics and improve my understanding of python in the little free time that I do get.</p>
<p>That is not to say that not much has been thought up as to what must be addressed first and how it should be addressed. After conversations with Gilbert, Luke, and Jason, I have a clearer idea about how to go about implementing the first helper function. This is going to be the momentum function. We debated whether there should be separate functions for linear and angular momenta. More importantly, we addressed an issue for the end user; should these momenta functions be implemented as stand alone functions or as methods. It was concluded that the easiest and ‘cleanest’ implementation with regards to an end user would be a method. With that, the user wouldn’t have to concern himself with entering the arguments. At the same time, it would also not compromise readability for a dynamicist. I will be posting a message in the groups sometime before the end of the long weekend about this as I can definitely use more input. I think this writing this function will be great because I feel like I get the theory of classes pretty well but this will be the real test of that. I’m very excited by this prospect.</p>
<p>I think that is all for now. I’m working a little overtime with school to get my duties as a TA finished so that I can dedicate begin working on the Summer of Code by my proposed start date of June 5th. See you next week!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/55/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/55/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/55/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/55/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/55/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/55/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/55/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/55/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/55/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/55/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/55/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/55/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/55/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/55/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=55&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-05-26T04:44:11Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-06-15T04:00:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=76</id>
    <link href="http://rhoforsympy.wordpress.com/2012/05/25/week-1-report-initial-set-of-routines-for-density-operators/" rel="alternate" type="text/html"/>
    <title>Week 1 Report : Initial set of routines for Density Operators</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Today I submitted a pull request What went into this weeks pull request The framework and routines were inherited from Brian’s github branch. The  _eval_args function was added.  I went back-and-forth on deciding if we needed strong checks to make sure the states used to build density objects should be strictly KetBase and Qubits. But, [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=76&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today I submitted a <a href="https://github.com/sympy/sympy/pull/1312" target="_blank">pull</a> request</p>
<p><span style="text-decoration: underline;">What went into this weeks pull request</span></p>
<p>The framework and routines were inherited from Brian’s github branch.</p>
<ul>
<li>The  _eval_args function was added.  I went back-and-forth on deciding if we needed strong checks to make sure the states used to build density objects should be strictly <strong>KetBase</strong> and <strong>Qubits</strong>. But, there were scenarios where just symbols could be used for states, or even QExpr could be used. So, discarded that check.   But, this would mean Density objects could have arbitrary objects for states.  <em>Flip side to this is,  represent() on density objects which do not have a KetBase object does not work very well. </em>For example, having ‘mul’ expressions for ‘state’ creates problems in represent functions. But, my assumption is represent function need not handle such scenarios.                                                                                                                                    Similarly, I went back and forth regarding checking for valid values for probabilities. Then, I dropped those validations as well.</li>
<li>Added test routines for all public facing methods in density.py. Some methods from original DensityOp branch are not in this pull request. I will add them back in future requests.</li>
<li>I also created a minor <a href="https://github.com/sympy/sympy/pull/1311" target="_blank">pull</a> request for minor printing changes that were in the original densityOp branch. This takes care of changes to the latex() in operator.py. I will add checks for density operator after this pull request is accepted.</li>
<li>Added test routines for changes related to density in qapply.py. These checks will have to be extended after I make density operators work well with Qubits.</li>
<li>Added doc strings.</li>
</ul>
<p><span style="text-decoration: underline;">Where I spent a my time while trying to accomplish this weeks tasks:</span></p>
<ul>
<li>Understanding the process-function call flow of _eval_args,   _print methods.</li>
<li>Getting familiarized with operator.py , represent(), and qapply().</li>
</ul>
<p>(The following point is also a question for my next task)</p>
<ul>
<li>The way  <em>_qsympify_sequence(seq)</em> method is implemented, it treats any Qubit() passed as state to Density as a sequence object. Therefore, the Qubit object is lost and a tuple is replaced instead of the Qubit object. This needs to a fixed or a work around decided so that Qubits can be provided as states to Density objects.</li>
</ul>
<p><span style="text-decoration: underline;">My next steps ( plan for next week’s pull request):</span></p>
<ul>
<li>Discuss with the mentor team and see how to approach the problem with Qubits being converted to sequence. ( in next 2 days )</li>
<li>Add remaining functionality into density.py ( entropy, reduced trace operations ) ( should be completed by middle of next week )</li>
<li>Blog about the implementation details of changes to tensorproduct.py with respect to what we would need for density operators.  I hope to also have this part implemented by end of next week.</li>
<li>Address issues with the current pull request. I plan to have this as the top priority task and work on this every time it comes back to me.</li>
</ul>
<p><span style="text-decoration: underline;">Misc:</span></p>
<p>I gave a lightening talk at Google Chicago office this week regarding my GSoC 2012 project and there was lot of interest in Sympy. Particularly, folks were very excited to know about  <a href="http://live.sympy.org" target="_blank">Sympy Live</a> website which I spoke about in the presentation.</p>
<p>Also, met one of our Sympy contributors <a href="https://github.com/mrocklin">Matthew Rocklin</a>  at the meeting. Nice to meet someone you know only as an email-id, in person!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/76/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/76/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/76/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=76&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-05-25T19:06:15Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=26</id>
    <link href="http://scolobb.wordpress.com/2012/05/24/smelling-the-gsoc-adventure/" rel="alternate" type="text/html"/>
    <title>Smelling the GSoC Adventure</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I seem to be finally able to afford more time to work for SymPy every day, so I am hastily working through a simulacrum of a community bonding period.  The official coding period has already begun, but I have afforded for a week of delay with my own start in the proposal.  I am currently [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=26&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I seem to be finally able to afford more time to work for SymPy every day, so I am hastily working through a simulacrum of a community bonding period.  The official coding period has already begun, but I have afforded for a week of delay with my own start in the <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">proposal</a>.  I am currently working on fixing a couple important issues with <em>re, im</em>, and their interaction with <em>as_real_imag()</em> functions (Pull Request <a href="https://github.com/sympy/sympy/pull/1304">1304</a>).</p>
<p>The good news pertaining to my own project is that we seem to have settled on a name for the module which I am going to add: c<em>ategories</em>.  I am very enthusiastic about starting my work on it; this event is going to happen within a day or two, and that’s very cool <img alt=":-)" class="wp-smiley" src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif"/> </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/26/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/26/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/26/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=26&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-05-24T20:24:47Z</updated>
    <category term="SymPy"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-06-15T04:00:21Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=16</id>
    <link href="http://rhoforsympy.wordpress.com/2012/05/15/plan-for-first-4-weeks-post-1/" rel="alternate" type="text/html"/>
    <title>Plan for first 4 weeks : Post 1</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As part of first set of steps (first 4 weeks) in the project plan, my initial proposal was to achieve the following specific goals: (These goals are listed also with respect using the current implementation of density operators at this branch: densityOp branch at ellisongb@github Start with density.py Make it work with different bases by [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=16&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As part of first set of steps (first 4 weeks) in the project plan, my initial proposal was to achieve the following specific goals:<br/>
(These goals are listed also with respect using the current implementation of density operators at this branch: <a href="https://github.com/ellisonbg/sympy/commit/d43f10bd899b5e4dcd75876a1b6a9e82333e0f57" target="_blank" title="densityop">densityOp branch at ellisongb@github</a></p>
<ul>
<li>Start with density.py<br/>
Make it work with different bases by aligning the current implementation with representation logic.</li>
<li>Come up with an proposal/implementation for density matrices specific to qubits. ( Do we need a specific version for qubits? )</li>
<li>Update TensorProduct.py for multi-qubit states.</li>
</ul>
<p>The above tasks currently has been planned for the first 4 weeks of the project. For each of the above tasks, I will provide 2 sections in this blog and subsequent blog posts. In the first section, I describe my understanding of current implementation and in the second section I list out what is needed (kind of list out requirements, and then propose the implementation idea).</p>
<h3>What is currently available in Density.py? ( from the above git branch)</h3>
<ul>
<li>Currently, density.py has the basic function prototypes. <br/>
The current density object accepts any kind of input. That is, there is no restriction on objects to be strictly of type ‘State’ or ‘Ket’.</li>
<li>Also, when we use Qubit’s as argument to the density object, what gets printed is not accurate. For example,
</li><li>
<img alt="Example of output for Density" src="https://rhoforsympy.files.wordpress.com/2012/05/screenshot-2.png?w=500"/><p/>
</li><li>The doit() method and represent() method do not execute successfully.</li>
</ul>
<h3>Next steps for density.py</h3>
<ul>
<li> Add eval() function <br/>
     Validate the arguments passed to the constructor. Only instances of type ‘State’ will be accepted.<br/> If any QExpr is passed as argument, then QExpr will have to be simplified and checked if final QExpr object is an instance of type ‘State’. Alternatively, we could just check if passed states are of type ‘Ket’. This step takes care of creation of density matrices.</li>
<li> Update doit() : The current implementation currently errors out. We will work on this to fix it.</li>
<li> Update _represent() : The current implementation errors out. Also, the current implementation expands the density operator (thus producing the matrix) before the original represent() method is invoked. The approach, we plan to take is call the represent method for each of the states in the density op.<br/>
Say, Density([ ket1,p1 ] , [ket2, p2], [ket3,p3] ), then would way do change of basis using represent would be to do the following:<br/>
(the following code, is just pseudo-code) <p/>
<p/><pre class="brush: python;">_represent(self, **options)
  states = []
  for each state in density matrix
   states.append(represent(state, **options)
  return Density(states, probabilities )
</pre><p/>
<p><i>(My understanding is the probabilities of each state should not get affected during change of basis. Is this correct?)</i></p>
</li>
<li> Add test cases. Of course, this step will be step 0.</li>
</ul>
<p>
My next blog post will have similar structure of discussion for the next 2  topics. My hope is by end of this week, these details are spec’d out enough so that I can exactly say what I will deliver at end of each of the first 4 weeks.</p>
<p>
P.S: I plan to provide detailed plan for remaining tasks as we approach the specific week for corresponding task.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/16/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/16/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/16/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/16/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/16/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/16/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/16/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/16/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/16/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/16/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/16/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/16/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/16/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/16/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=16&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-05-15T23:42:39Z</updated>
    <category term="GSoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/05/14/region-plots-with-interval-arithmetic</id>
    <link href="http://catchmrbharath.github.com/programming/2012/05/14/region-plots-with-interval-arithmetic" rel="alternate" type="text/html"/>
    <title>Region Plots with Interval Arithmetic</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>My GSoC project is to provide support for implicit plotting using interval arithmetic. As mpmath already has a very good interval arithmetic library, I wanted to try out how efficient the algorithm is going to be using the mpmath interval arithmetic library. I wanted to get an idea on the time required for plotting and also wanted to decide whether to write my own interval arithmetic library or use the existing mpmath library and add additional things to it. I have a basic implementation which supports only the mpmath interval arithmetic functions. The results look promising and I am guessing a separate implementation for plotting will be faster and I will be able to add features more easily.I have an image of <span> $y &gt; 1/x$ </span> with the interval edges below. The image below was plotted so with a resolution of 1024x1024. It is possible to see how the intervals are subdivided more and more when it reaches the edge of a region.</p>
<img height="400" src="http://catchmrbharath.github.com/images/14052012/figwithedge.png" width="600"/>
<p>It took 1.57 seconds to render this image which is decently fast. I observed that if the independent regions are less and large, then the time take for the plot to be rendered is high. I tried <span> $cos(y) &gt; sin(x)$ </span> which took about 5.3 seconds to render.</p>
<img height="400" src="http://catchmrbharath.github.com/images/14052012/cosysinx.png" width="600"/>
<p>I wanted to try what the maximum time it takes to render something. So I tried plotting <span> $sin^{2}x+cos^{2}x$ </span>less than 1. As the arithmetic is done on intervals, it is not possible for the algorithm to decide that the expression is not true throughout the interval. So it goes on subdividing more and more, until it reaches a dimension of 1 pixel. For a resolution of 512X512, it took 120 seconds to render. If there are a lot of evaluations in the expression, then it might increase, but we should be expecting times around 120 seconds.</p>

<p>Another problem that I have to address is rasterization. I am really not getting any ideas on how to avoid rasterization. One way is to handle the zoom event in matplotlib and change the data to match the zoom. But for complicated graphs, revaluating might take a lot of time, which is bad.</p>
<img height="400" src="http://catchmrbharath.github.com/images/14052012/figraster.png" width="600"/>
<p>We can see that if there is a way of interpolating over the rectangular edges, then we will have a plot without rasterization. I haven’t got any foolproof idea to implement this interpolation as there will be many independent regions. So if you have any idea, then please comment or mail me :). The code for plotting can be found <a href="https://gist.github.com/2695079">here</a>.</p></div>
    </summary>
    <updated>2012-05-14T07:00:00Z</updated>
    <published>2012-05-14T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-06-15T04:00:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://krastanov.wordpress.com/?p=298</id>
    <link href="http://krastanov.wordpress.com/2012/05/14/differential-geometry-in-sympy-my-gsoc-project/" rel="alternate" type="text/html"/>
    <title>Differential Geometry in SymPy – my GSoC project</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The next few moths will be interesting. I got accepted in the Google Summer of Code program and I am already starting to worry (irrationally) about the project and the schedule. I will be working on a differential geometry module for SymPy (and time permitting, some more advanced tensor algebra). Basically, I want to create [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=298&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The next few moths will be interesting. I got accepted in the Google Summer of Code program and I am already starting to worry (irrationally) about the project and the schedule. I will be working on a differential geometry module for SymPy (and time permitting, some more advanced tensor algebra).</p>
<p>Basically, I want to create the boilerplate that will permit defining some scalar/vector/form/tensor field in an arbitrary coordinate system, then doing some coordinate-system-independent operations on the field (with hopefully coordinate-system-independent simplifications) and, finally, getting the equations describing the final result in another arbitrary coordinate system.</p>
<p>With this in mind, the details about the project can be seen on <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Stefan-Krastanov%3A-Vector-Analysis" target="_blank">the proposal page</a>. Most of it (all except the tensor algebra that I may work on at the end) is based on the work of <a href="http://groups.csail.mit.edu/mac/users/gjs/" target="_blank">Gerald Jay Sussman</a> and <a href="http://groups.csail.mit.edu/mac/users/wisdom/" target="_blank">Jack Wisdom</a> on <a href="http://dspace.mit.edu/handle/1721.1/30520" target="_blank">“Functional Differential Geometry”</a>. I suppose that this project started as a part of their superb book <a href="http://mitpress.mit.edu/sicm/" target="_blank">“Structure and Interpretation of Classical Mechanics”</a> (I really have to read this book if I am to call myself a physicist) and the accompanying <a href="http://groups.csail.mit.edu/mac/users/gjs/6946/linux-install.htm" target="_blank">“Scheme Mechanics”</a> software. By the way, reading the Scheme code is a wonderful experience. This language is beautiful! The authors are also actively updating their code and a newer, more detailed paper on the project can be found <a href="http://krastanov.wordpress.com/category/sympy-2/feed/groups.csail.mit.edu/mac/users/gjs/6946/calculus-indexed.pdf" target="_blank">here</a>.</p>
<p>Most of my work will be reading the Scheme code and tracing corner cases in SymPy. My workflow will probably consist of implementing some notion from “Functional Differential Geometry” in SymPy and only when I get to semi-working state comparing with the original Scheme code for ideas, then repeating the process on the next part of the system. This way I will be less susceptible to implementing Scheme idioms in Python.</p>
<p>Writing the final version of each function/class of my module will probably take very little time. Most of the time will be dedicated to removing/studying corner cases and assumptions in SymPy’s codebase (more about these later) and experimenting with different approaches for the module structure (and of course reading/deciphering the work of Wisdom and Sussman).</p>
<p>Finally, I will speak a bit about the aforementioned corner cases and assumptions in the SymPy’s codebase. There are the obvious things like having to derive from Expr if you want to be able to have your class as a part of a symbolic expression. Then there is the fact that Basic (and its subclasses like Expr) do some magic with the arguments for the constructor (saved in <code>expr._args</code>) in order to automagically have:</p>
<ul>
<li>rebuildable expression with <code>eval(srepr(expr))==expr</code></li>
<li>rebuildable expression with <code>type(expr)(*expr._args)</code></li>
<li>some magic with the <code>_hashable_content()</code> method in order to (presumably) have efficient cashing</li>
</ul>
<p>These details make it a bit unclear how to implement things like <code>CoordinateSystem</code> objects which learn during their existence how to transform to other coordinate systems (thus their implementation in code is a mutable object) but at the same time they are the same mathematical object. Anyway, from what I have seen just having a persistent hash and a correct <code>srepr</code> should be enough. I wonder how tabu it is to change your <code>_args</code> after the creation of the class. Why I need to worry about caching (thus the hash) and rebuilding (thus the <code>srepr</code>) is still unclear to me, but I will dedicate whole posts to them later on when I have the explanation. The caching is presumably for performance. It is the need for all that fancy magic that does not permit duck typing in SymPy. If you do not subclass Basic, you can not be part of SymPy, no matter the interfaces that you support.</p>
<p>Then there is the question of using the container subclasses of <code>Expr</code>. Things like <code>Add</code> and <code>Mul</code>, which I would have expected to be just containers. However, they are not. They also do some partial canonicalization, but at the moment their exact role (and more importantly, what they <strong>don’t</strong> do) is very unclear to me. There was much discussion about AST trees and canonicalization on the mailing list, if you are interested, and how exactly to separate the different duties that <code>Add</code> and <code>Mul</code> have, but as this is enough work for another GSoC I decided to just stop thinking about that and use them in the simples way possible: just as containers.</p>
<p>There is one drawback to this approach. The sum of two vector fields for example is still a vector field and the object that represents the sum should have all the methods of the object representing one of the fields, however <code>Add</code> does not have the same methods as <code>VectorField</code>. The solution that was already used in the matrix module was to create classes like <code>MatrixAdd</code>, and the same was done in the quantum physics module. However, I fear such proliferation of classes for it becomes unsustainable as the number of different modules grows. What happens when I want to combine two objects from the disjoint modules? This is why I simply use <code>Add</code> and <code>Mul</code> and implement helper functions that are not part of the class. These helper functions will ideally be merged in some future canonicalizer that comes about from separating the container and canonicalization parts of <code>Add</code> and <code>Mul</code>.</p>
<p>One last remark is that I will probably have to work on sympify and the sympification of matrices, as I will use coordinate tuples (column vectors) quite often. Then there is the distinction between Application and Function and all the magic with metaclasses that seems very hard to justify. But probably I will write entire posts in which I try to understand why the metaclasses in the core are necessary.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/298/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/298/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/298/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/298/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/298/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/298/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/298/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/298/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/298/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/298/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/298/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/298/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/298/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/298/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;blog=15251174&amp;post=298&amp;subd=krastanov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-05-13T23:15:15Z</updated>
    <category term="SymPy"/>
    <category term="differential geometry"/>
    <category term="gsoc"/>
    <category term="symbolic algebra"/>
    <category term="sympy"/>
    <category term="vector analysis"/>
    <author>
      <name>Stefan Krastanov</name>
    </author>
    <source>
      <id>http://krastanov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://krastanov.wordpress.com/category/sympy-2/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://krastanov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://krastanov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://krastanov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>Stefan's Blog » SymPy</title>
      <updated>2012-06-03T22:20:17Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://angadhsympy.wordpress.com/?p=7</id>
    <link href="http://angadhsympy.wordpress.com/2012/05/12/gsoc-2012-post-1/" rel="alternate" type="text/html"/>
    <title>GSoC 2012 Post 1</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud%3A-sympy.physics.mechanics" title="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud%3A-sympy.physics.mechanics">https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud%3A-sympy.physics.mechanics</a></p><p>A first (and cursory) blog post.</p><p>Having been given the opportunity to code for SymPy this year is extremely flattering so I would like to thank everyone associated with SymPy for the same.</p><p>The last month and a half has been extremely hectic yet, it has been perversely gratifying. School and GSoC preparations have really helped me maximize my productivity by giving me multiple things to focus on. Every day is proving to be enlightening and challenging so far. I should be sufficiently armed by my intended start date. Also, here is a link to my proposal. Special mention to the folks (you know who you are) for guiding me through everything.</p><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=7&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>A first (and cursory) blog post.</p>
<p>Having been given the opportunity to code for SymPy this year is extremely flattering so I would like to thank everyone associated with SymPy for the same.</p>
<p>The last month and a half has been extremely hectic yet, it has been perversely gratifying. School and GSoC preparations have really helped me maximize my productivity by giving me multiple things to focus on. Every day is proving to be enlightening and challenging so far. I should be sufficiently armed by my intended start date. Also, here is a <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud%3A-sympy.physics.mechanics">link</a> to my proposal. Special mention to the folks (you know who you are) for guiding me through everything.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/7/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/7/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/7/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/7/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/7/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/7/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/7/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/7/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/7/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/7/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/7/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/7/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/7/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/7/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;blog=35620584&amp;post=7&amp;subd=angadhsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-05-12T07:16:06Z</updated>
    <category term="Uncategorized"/>
    <category term="GSoC 2012"/>
    <category term="SymPy"/>
    <author>
      <name>angadhn</name>
    </author>
    <source>
      <id>http://angadhsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://angadhsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://angadhsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://angadhsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://angadhsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>4 out of 5 dentists recommend this WordPress.com site</subtitle>
      <title>GSoC 2012 blog</title>
      <updated>2012-06-15T04:00:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=4</id>
    <link href="http://amakelov.wordpress.com/2012/05/11/gsoc-2012-computational-group-theory/" rel="alternate" type="text/html"/>
    <title>GSoC 2012: Computational Group Theory</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">And so it happened that by some weird accident I was accepted into GSoC 2012 to implement CGT – and Group Theory is a part of mathematics that I particularly enjoy. Until a few days ago I was pretty busy working for my exams, but in the next few weeks I should be able to <a class="excerpt-more-link" href="http://amakelov.wordpress.com/2012/05/11/gsoc-2012-computational-group-theory/">[…]</a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=4&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>And so it happened that by some weird accident I was accepted into GSoC 2012 to implement CGT – and Group Theory is a part of mathematics that I particularly enjoy. Until a few days ago I was pretty busy working for my exams, but in the next few weeks I should be able to start preparing for my project.</p>
<p>I hope that the timeline I’ve set to myself is not too impossible to do, and that I’ll be able to implement everything I promised in it.</p>
<p>Finally, I’d like to thank all the people that make sympy possible, and all the people that liked my application, and especially my mentor – David Joyner, and my co-mentor – Aaron Meurer, for their enthusiasm!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/4/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/4/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/4/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/4/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/4/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/4/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/4/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/4/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/4/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/4/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/4/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/4/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/4/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/4/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=4&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-05-11T00:52:19Z</updated>
    <category term="Google Summer of Code 2012"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A. Makelov</subtitle>
      <title>Not really blogging</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://amakelov.wordpress.com/?p=1</id>
    <link href="http://amakelov.wordpress.com/2012/05/11/hello-world/" rel="alternate" type="text/html"/>
    <title>Hello world!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Welcome to WordPress.com! This is your very first post. Click the Edit link to modify or delete it, or start a new post. If you like, use this post to tell readers why you started this blog and what you … <a href="http://amakelov.wordpress.com/2012/05/11/hello-world/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=1&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Welcome to <a href="https://wordpress.com/">WordPress.com</a>! This is your very first post. Click the Edit link to modify or delete it, or <a href="http://amakelov.wordpress.com/wp-admin/post-new.php" title="Direct link to Add New in the Admin Dashboard">start a new post</a>. If you like, use this post to tell readers why you started this blog and what you plan to do with it.</p>
<p>Happy blogging!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/1/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;blog=35896871&amp;post=1&amp;subd=amakelov&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-05-11T00:12:55Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>amakelov</name>
    </author>
    <source>
      <id>http://amakelov.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://amakelov.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://amakelov.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://amakelov.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://amakelov.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Smile! You’re at the best WordPress.com site ever</subtitle>
      <title>Aleksandar Makelov</title>
      <updated>2012-05-27T22:40:20Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://catchmrbharath.github.com/programming/2012/05/08/gsoc-2012-sympy</id>
    <link href="http://catchmrbharath.github.com/programming/2012/05/08/gsoc-2012-sympy" rel="alternate" type="text/html"/>
    <title>GSoC 2012 Sympy</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I was selected by <a href="http://sympy.org">SymPy</a> to work on their plotting module as part of GSoC2012. So I will be spending the next three months working on a plotting module to plot implicit functions. Implicit functions are difficult to plot by simple meshing. Though we might get a good result with simple meshing for most of the functions, it can be quite erroneous for some of the functions. So I will be using interval arithmetic to provide a way to plot implicit functions. My GSoC application can be found <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Bharath-M-R%3A-Plotting-Module">here</a>. I will be atlast making a lasting contribution to an open - source software.</p>

<p>There are a lot of posts on how contributing to a open source software is the best way to sharpen your programming skills. But lot of people are too afraid to approach an organization and start contributing. There is an impending fear that people working on these projects are very stud(intelligent) people and they might get annoyed at your ignorance. Well, let me tell you this, people in an open source project are really nice. They don’t get annoyed very easily and they are ready to help you with everything. They correct all your mistakes with lots of patience and help you with improving your code. I think getting your code reviewed is the best way to improve your programming skills after you have reached a certain stage.</p>

<p>I was pretty much amazed with SymPy’s code base. Its so neat and clean that any newcomer can just look at the docstrings and can deduce the functionality of every function. Though my experience is limited, I haven’t seen a better codebase than SymPy’s. I am still looking at their codebase and the amount of modularity continues to amaze me. So if anybody is interested in contributing to a python open source project, then consider contributing to <a href="http://sympy.org">SymPy</a>, for you will learn a lot on how a python project has to be structured.</p>

<p>I will be using this blog to update about my GSoC project and hopefully I will learn a lot during this period.</p></div>
    </summary>
    <updated>2012-05-08T07:00:00Z</updated>
    <published>2012-05-08T07:00:00Z</published>
    <source>
      <author>
        <name>Bharath M R</name>
      </author>
      <link href="" rel="alternate" type="text/html"/>
      <link href="http://catchmrbharath.github.com/programming.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Posts categorized as 'programming'</subtitle>
      <title>- Programming</title>
      <updated>2012-06-15T04:00:22Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-2520472460430880330.post-1283583601392089559</id>
    <link href="http://sympy.blogspot.com/feeds/1283583601392089559/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=2520472460430880330&amp;postID=1283583601392089559" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/1283583601392089559" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/1283583601392089559" rel="self" type="application/atom+xml"/>
    <link href="http://sympy.blogspot.com/2012/04/google-has-announced-theresults-for.html" rel="alternate" type="text/html"/>
    <title>GSoC 2012 Results Announced</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Google has announced the results for Google Summer of Code.  I am proud to announce that we got six slots from Google.  The following projects have been accepted: <br/><br/>(Project, Student, Mentor)<br/>- <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module">Category Theory Module</a>, Sergiu Ivanov, Tom Bachmann<br/>- <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Guru-Devanla:-Density-Operators-for-Quantum-Module">Density Operators for Quantum Module in sympy.physics.quantum</a>, Guru Devanla, Brian Granger (co-mentor Sean Vig)<br/>- <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud:-sympy.physics.mechanics">Enhancements to sympy.physics.mechanics</a>, Angadh Nanjangud, Gilbert Gede<br/>- <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Aleksandar-Makelov:-Group-theory">Group Theory</a>, Aleksandar Makelov, David Joyner (co-mentor Aaron Meurer)<br/>- <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Bharath-M-R:-Plotting-Module">Implicit Plotting Module</a>, Bharath M R, Aaron Meurer<br/>- <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Stefan-Krastanov:-Vector-Analysis">Vector Analysis</a>, Stefan Krastanov, Matthew Rocklin<br/><br/><br/>Join me in congratulating these students on their acceptance. <br/><br/>In case you don't know, Google Summer of Code is a program where Google pays students to write code for open source projects.  SymPy was accepted as a mentoring organization this year.  The goal of the program is to help the students learn new skills, in particular in our case: <br/><br/>* contributing to opensource * working with the community * learn git, pull requests, reviews * teach them how to review other's people patches * do useful work for SymPy * have fun, and encourage the students to stay around <br/><br/>To all the students who are accepted, you should be receiving an email from your mentor soon to discuss how you will be communicating over the summer about your project.  You should meet with your mentor about once a week during the summer to go over your progress.  You should either meet on a public channel (like IRC), or else post minutes of your meeting in some public channel, so that the whole community can see your progress too. <br/><br/>Some of you may also be assigned a backup mentor or co-mentor.  These people will also help out in mentoring your project.  If you have two mentors and one is not available for something, or does not know the answer, you can ask your co-mentor. <br/><br/>I would like all of us to strongly encourage students this summer to submit pull requests early and often.  This will go a long ways towards making sure that you don't end the summer with a ton of code written that never gets merged.  Students should help review pull requests by other students, so that we don't get bogged down reviewing so much code. <br/><br/>We also require that all students keep a weekly blog of their work over the summer.  If you don't already have a blog, you should start one.  I recommend using either Wordpress or Blogger (I personally use and prefer Wordpress because it has a cleaner interface and lets you do $latex math$, but I recommend you test out both).  You can also use some other service too if you like.  The only requirement is that it has an RSS feed, so we can put it on planet.sympy.org.  Once you have set up your blog, send me the url so I can add it there. <br/><br/>Starting on the week of May 21 (when the GSoC period officially begins), We will expect you to have at least one blog post a week, describing your progress for that week, or something interesting about your project.  If you don't have a post by the beginning of the day on Saturday, your mentor or I will email you to remind you about it. <br/><br/>I invite other mentors who have blogs to blog as well.  And I encourage all community members to follow the student blogs, so you can see their progress. <br/><br/>I would like to thank all the students who applied this year and everyone who submitted a patch.  We received way more feedback this year than we ever have before.  I would also like to thank all the mentors for helping review patches and proposals. <br/><br/>This summer is looking to be another very productive one for SymPy, and I look forward to it!<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/2520472460430880330-1283583601392089559?l=sympy.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2012-04-27T21:52:26Z</updated>
    <published>2012-04-27T21:52:00Z</published>
    <author>
      <name>Aaron Meurer</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/07681610358074038422</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-2520472460430880330</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>https://profiles.google.com/104039945248245758823</uri>
      </author>
      <link href="http://sympy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://sympy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>The Official SymPy Blog</subtitle>
      <title>The Official SymPy Blog</title>
      <updated>2012-06-05T00:51:38Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/2012/04/27/gsoc-2012-with-sympy-in-the-nearest-future-9/</id>
    <link href="http://scolobb.wordpress.com/2012/04/27/gsoc-2012-with-sympy-in-the-nearest-future-9/" rel="alternate" type="text/html"/>
    <title>GSoC 2012 with SymPy in the Nearest Future</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So, I have been accepted as a Google Summer of Code student to SymPy.  The coolest part is that I have been accepted with a very experimental project concerned with category theory (the proposal is here), for which I am very thankfull to all mentors of SymPy and, in particular, to the project leader Aaron Meurer. [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=21&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So, I have been accepted as a <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2012" target="_blank">Google Summer of Code</a> student to <a href="http://sympy.org/en/index.html" target="_blank">SymPy</a>.  The coolest part is that I have been accepted with a very experimental project concerned with category theory (the proposal is <a href="https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module" target="_blank">here</a>), for which I am very thankfull to all mentors of SymPy and, in particular, to the project leader <a href="http://asmeurersympy.wordpress.com/" target="_blank">Aaron Meurer</a>.</p>
<p>I am still busy with my university affairs now, so I’ll only be doing minor fixes while my the semester hasn’t finished at the end of May.  However, I plan to become more active in about a week, when a lot of deadlines which I have now will have expired.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/21/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/21/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/21/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/21/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/21/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/21/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/21/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/21/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/21/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/21/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/21/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/21/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/21/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/21/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=21&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-04-27T18:30:08Z</updated>
    <category term="SymPy"/>
    <category term="category theory"/>
    <category term="gsoc"/>
    <category term="sympy"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-06-15T04:00:21Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://scolobb.wordpress.com/?p=1</id>
    <link href="http://scolobb.wordpress.com/2012/04/27/hello-world/" rel="alternate" type="text/html"/>
    <title>Hello world!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Welcome to WordPress.com! This is your very first post. Click the Edit link to modify or delete it, or start a new post. If you like, use this post to tell readers why you started this blog and what you plan to do with it. Happy blogging!<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=1&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Welcome to <a href="https://wordpress.com/">WordPress.com</a>! This is your very first post. Click the Edit link to modify or delete it, or <a href="http://scolobb.wordpress.com/wp-admin/post-new.php" title="Direct link to Add New in the Admin Dashboard">start a new post</a>. If you like, use this post to tell readers why you started this blog and what you plan to do with it.</p>
<p>Happy blogging!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/1/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;blog=35433045&amp;post=1&amp;subd=scolobb&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-04-27T17:47:24Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>scolobb</name>
    </author>
    <source>
      <id>http://scolobb.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://scolobb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://scolobb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://scolobb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://scolobb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Reports of quests for adventures and coadventures</subtitle>
      <title>Coaquarium</title>
      <updated>2012-06-15T04:00:21Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/2012/04/24/selected-for-gsoc-2012/</id>
    <link href="http://rhoforsympy.wordpress.com/2012/04/24/selected-for-gsoc-2012/" rel="alternate" type="text/html"/>
    <title>Selected for GSOC 2012</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">It feels great to be one of the participants chosen to participate in this year’s GSOC.  This blog will continue to have updates regarding my progress through the summer.<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=14&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>It feels great to be one of the participants chosen to participate in this year’s GSOC.  This blog will continue to have updates regarding my progress through the summer.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/14/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/14/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/14/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/14/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/14/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/14/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/14/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/14/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/14/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/14/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/14/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/14/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/14/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/14/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=14&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-04-24T22:18:14Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=1164</id>
    <link href="http://fseoane.net/blog/2012/line-by-line-report-of-memory-usage/" rel="alternate" type="text/html"/>
    <title>line-by-line memory usage of a Python program</title>
    <summary>My newest project is a Python library for monitoring memory consumption of arbitrary process, and one of its most useful features is the line-by-line analysis of memory usage for Python code. I wrote a basic prototype six months ago after being surprised by the lack of related tools. I wanted to plot memory consumption of [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>My newest project is a Python library for monitoring memory consumption of arbitrary process, and one of its most useful features is the line-by-line analysis of memory usage for Python code.</p>
<p>I wrote a basic prototype six months ago after being surprised by the lack of related tools. I wanted to  <a href="http://fseoane.net/blog/2011/qr_multiply-function-in-scipy-linalg/">plot memory consumption</a> of a couple of Python functions but did not find a python module to do the job. I came to the conclusion that there is no standard way to get the memory usage of the Python interpreter from within Python, so I resorted to reading for from <code>/proc/$PID/statm</code>. From there on I realized that one the fetching of memory is done, making a line-by-line report wouldn’t be hard. </p>
<p>Back to today. I’ve been using the line-by-line memory monitoring to diagnose poor memory management (hidden temporaries, unused allocation, etc.) for some time. It seems to work on two different computers, so full of confidence as I am, I’ll write a blog post about it …</p>
<h2>How to use it?</h2>
<p>The easiest way to get it is to install from the Python Package Index:</p>
<div class="codecolorer-container bash default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="bash codecolorer" style="">    $ easy_install <span style="color: #660033;">-U</span> memory_profiler <span style="color: #666666; font-style: italic;"># pip install -U memory_profiler</span></div></div>
<p>but other options include fetching the latests from <a href="https://github.com/fabianp/memory_profiler">github</a> or dropping it on your current working directory or somewhere else on your PYTHONPATH since it consist of a single file.</p>
<p>Then next step is to write some python code to profile. It can be just about any function, but for the purpose of this blog post I’ll create a function my_func() with mostly memory allocations and save it to a file named example.py:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style=""><span style="color: #ff7700; font-weight: bold;">import</span> numpy <span style="color: #ff7700; font-weight: bold;">as</span> np<br/>
<br/>
@<span style="color: #dc143c;">profile</span><br/>
<span style="color: #ff7700; font-weight: bold;">def</span> my_func<span style="color: black;">(</span><span style="color: black;">)</span>:<br/>
    a = np.<span style="color: black;">zeros</span><span style="color: black;">(</span><span style="color: black;">(</span><span style="color: #ff4500;">100</span>, <span style="color: #ff4500;">100</span><span style="color: black;">)</span><span style="color: black;">)</span><br/>
    b = np.<span style="color: black;">zeros</span><span style="color: black;">(</span><span style="color: black;">(</span><span style="color: #ff4500;">1000</span>, <span style="color: #ff4500;">1000</span><span style="color: black;">)</span><span style="color: black;">)</span><br/>
    c = np.<span style="color: black;">zeros</span><span style="color: black;">(</span><span style="color: black;">(</span><span style="color: #ff4500;">10000</span>, <span style="color: #ff4500;">1000</span><span style="color: black;">)</span><span style="color: black;">)</span><br/>
    <span style="color: #ff7700; font-weight: bold;">return</span> a, b, c<br/>
<br/>
<span style="color: #ff7700; font-weight: bold;">if</span> __name__ == <span style="color: #483d8b;">'__main__'</span>:<br/>
    my_func<span style="color: black;">(</span><span style="color: black;">)</span></div></div>
<p>Note that I’ve decorated the function with @profile. This tells the profiler to look into function my_func and gather the memory consumption for each line.</p>
<h2>Wake up the cookie monster</h2>
<p>To start profiling and output the result to stdout, run the script as usual and append the options “-m memory_profiler -l -v” to the python interpreter.</p>
<div class="codecolorer-container bash default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="bash codecolorer" style="">$ python <span style="color: #660033;">-m</span> memory_profiler <span style="color: #660033;">-l</span> <span style="color: #660033;">-v</span> example.py<br/>
Line <span style="color: #666666; font-style: italic;">#    Mem usage   Line Contents</span><br/>
===================================<br/>
     <span style="color: #000000;">3</span>                <span style="color: #000000; font-weight: bold;">@</span>profile<br/>
     <span style="color: #000000;">4</span>     <span style="color: #000000;">13.68</span> MB   def my_func<span style="color: #7a0874; font-weight: bold;">(</span><span style="color: #7a0874; font-weight: bold;">)</span>:<br/>
     <span style="color: #000000;">5</span>     <span style="color: #000000;">13.77</span> MB       a = np.zeros<span style="color: #7a0874; font-weight: bold;">(</span><span style="color: #7a0874; font-weight: bold;">(</span><span style="color: #000000;">100</span>, <span style="color: #000000;">100</span><span style="color: #7a0874; font-weight: bold;">)</span><span style="color: #7a0874; font-weight: bold;">)</span><br/>
     <span style="color: #000000;">6</span>     <span style="color: #000000;">21.40</span> MB       b = np.zeros<span style="color: #7a0874; font-weight: bold;">(</span><span style="color: #7a0874; font-weight: bold;">(</span><span style="color: #000000;">1000</span>, <span style="color: #000000;">1000</span><span style="color: #7a0874; font-weight: bold;">)</span><span style="color: #7a0874; font-weight: bold;">)</span><br/>
     <span style="color: #000000;">7</span>     <span style="color: #000000;">97.70</span> MB       c = np.zeros<span style="color: #7a0874; font-weight: bold;">(</span><span style="color: #7a0874; font-weight: bold;">(</span><span style="color: #000000;">10000</span>, <span style="color: #000000;">1000</span><span style="color: #7a0874; font-weight: bold;">)</span><span style="color: #7a0874; font-weight: bold;">)</span><br/>
     <span style="color: #000000;">8</span>     <span style="color: #000000;">97.70</span> MB       <span style="color: #7a0874; font-weight: bold;">return</span> a, b, c</div></div>
<p>voilá! Each line is prefixed by the memory usage in MB of the Python interpreter after that line has been executed.</p></div>
    </content>
    <updated>2012-04-24T05:04:46Z</updated>
    <category term="Python"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2012-05-14T23:00:09Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://wdjoyner.wordpress.com/?p=369</id>
    <link href="http://wdjoyner.wordpress.com/2012/04/23/sympy-and-the-gsoc/" rel="alternate" type="text/html"/>
    <title>SymPy and the GSoC</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Google has announced the results for Google Summer of Code. The following projects have been accepted for SymPy: (Project, Student, Mentor, Link to proposal on the wiki) - Category Theory Module, Sergiu Ivanov, Tom Bachmann - Density Operators for Quantum Module in sympy.physics.quantum, Guru Devanla, Brian Granger (co-mentor Sean Vig) - Enhancements to sympy.physics.mechanics, Angadh [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=wdjoyner.wordpress.com&amp;blog=3527098&amp;post=369&amp;subd=wdjoyner&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Google has announced the results for Google Summer of Code.  The following projects have been accepted for <a href="http://sympy.org/" target="_blank">SymPy</a>:</p>
<p>(Project, Student, Mentor, Link to proposal on the wiki)<br/>
- Category Theory Module, Sergiu Ivanov, Tom Bachmann<br/>
- Density Operators for Quantum Module in sympy.physics.quantum, Guru<br/>
Devanla, Brian Granger (co-mentor Sean Vig)<br/>
- Enhancements to sympy.physics.mechanics, Angadh Nanjangud, Gilbert Gede<br/>
- Group Theory, Aleksandar Makelov, David Joyner (Aaron Meurer co-mentor)<br/>
- Implicit Plotting Module, Bharath M R, Aaron Meurer<br/>
- Vector Analysis, Stefan Krastanov, Matthew Rocklin</p>
<p>I will help mentor Aleksandar Makelov’s work on group theory. He is a freshman at Harvard.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/wdjoyner.wordpress.com/369/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/wdjoyner.wordpress.com/369/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/wdjoyner.wordpress.com/369/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/wdjoyner.wordpress.com/369/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/wdjoyner.wordpress.com/369/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/wdjoyner.wordpress.com/369/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/wdjoyner.wordpress.com/369/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/wdjoyner.wordpress.com/369/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/wdjoyner.wordpress.com/369/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/wdjoyner.wordpress.com/369/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/wdjoyner.wordpress.com/369/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/wdjoyner.wordpress.com/369/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/wdjoyner.wordpress.com/369/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/wdjoyner.wordpress.com/369/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=wdjoyner.wordpress.com&amp;blog=3527098&amp;post=369&amp;subd=wdjoyner&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-04-23T22:04:07Z</updated>
    <category term="gsoc"/>
    <category term="math"/>
    <category term="software"/>
    <category term="sympy"/>
    <author>
      <name>wdjoyner</name>
    </author>
    <source>
      <id>http://wdjoyner.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://wdjoyner.wordpress.com/category/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://wdjoyner.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://wdjoyner.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://wdjoyner.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>Yet Another Mathblog » sympy</title>
      <updated>2012-06-11T19:40:22Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rhoforsympy.wordpress.com/?p=1</id>
    <link href="http://rhoforsympy.wordpress.com/2012/04/05/gsocintro/" rel="alternate" type="text/html"/>
    <title>Hello GSOC Reviewers!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hello there!  I plan to use this blog to communicate with the Sympy community regarding the progress I make on the project. I plan to update this blog atleast on a weekly basis, and sometime more frequently if I find something interesting and important to share!<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=1&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello there!  I plan to use this blog to communicate with the Sympy community regarding the progress I make on the project. I plan to update this blog atleast on a weekly basis, and sometime more frequently if I find something interesting and important to share!</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/1/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/1/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/1/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;blog=34650270&amp;post=1&amp;subd=rhoforsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-04-05T19:28:27Z</updated>
    <category term="GSoc"/>
    <category term="gsoc"/>
    <author>
      <name>grdvnl</name>
    </author>
    <source>
      <id>http://rhoforsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://rhoforsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://rhoforsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://rhoforsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://rhoforsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>..where we discuss density operators wrt SymPy</subtitle>
      <title>rhoforsympy</title>
      <updated>2012-06-15T04:00:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sympystats.wordpress.com/?p=257</id>
    <link href="http://sympystats.wordpress.com/2012/03/30/simplifying-sets/" rel="alternate" type="text/html"/>
    <title>Simplifying Sets</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">SymPy’s sets module is a pleasure to work on. The math is approachable well structured. There are basic sets (Intervals, FiniteSets) compound sets (Unions, Intersections, Cartesian Products) and operations (contains, complement, measure, subset). Because the problem is easy to understand … <a href="http://sympystats.wordpress.com/2012/03/30/simplifying-sets/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=257&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>SymPy’s sets module is a pleasure to work on. The math is approachable well structured. There are basic sets (Intervals, FiniteSets) compound sets (Unions, Intersections, Cartesian Products) and operations (contains, complement, measure, subset). Because the problem is easy to understand and intrinsically simple, sets is a great project to practice coding. Can we write code that is as simple as the problem we’re solving?</p>
<p>Historically I have been bad at this. I am guilty of writing needlessly complex code. A friend recently sent me <a href="http://www.infoq.com/presentations/Simple-Made-Easy">a talk by Rich Hickey</a>, the creator of <a href="http://en.wikipedia.org/wiki/Clojure">Clojure</a>, about simplicity versus ease. I decided to try to make the SymPy.Sets code simpler as an educational project. </p>
<p>The current issue with sets is that many classes contain code to interact with every other type of class. I.e. we have code that looks like this:</p>
<pre>def operation(self, other):
    if other.is_FiniteSet:
        ...
    if other.is_Interval:
        ...
    if other.is_ProductSet:
        ...
</pre>
<p>This is because the rules to, say join the FiniteSet <code>{1,2,3,4}</code> with the Interval <code>[2, 3)</code> can be complex. The sets module handles this all marvelously well and produces <code>[2, 3] U {1, 4}</code>, a nice answer. The code to do it however is atrocious and filled with nests of rules and special cases. Much of this code is in the Union and RealUnion classes but some of it is in FiniteSet, some of it is in Interval as well. Everything works, it’s just complex. </p>
<p>This is similar to the situation in <code>Mul.flatten</code> and friends. </p>
<p>So what is the solution for Sets? How do we simplify Union and Intersection? </p>
<p>First, lets acknowledge that Union/Intersection serve two purposes</p>
<ol>
<li> They serve as a container of sets
</li><li> They simplify these sets using known rules
</li></ol>
<p>We separate these two aspects and solve them independently. </p>
<p>We separate these two in the same way Mul and Add handle it. We create a reduce/flatten method and, while we call it by default, it is now separate from the construction logic. There has been talk about separating these two parts of our container classes even further by having container classes that only contain and simplifyers/canonicalizers that only simplify/canonicalize. </p>
<p>We need a simple way to manage all of the special rules we know for simplifying collections of sets. The issue is that there are a lot of special cases; FiniteSets can do some things, Intervals others, and how do we anticipate not-yet-defined sets? Our solution is as follows. </p>
<p>Every set class has methods <code>_union(self, other)</code> and <code>_intersect(self, other)</code>. These methods contain local simplification rules. I.e. if <code>self</code> knows how to interact with <code>other</code> it returns a new, simplified set, otherwise it returns <code>None</code> for “I don’t know what to do in this situation”. For example <code>Intervals</code> know how to intersect themselves with other <code>Intervals</code> but they don’t know how to interact with <code>FiniteSets</code>, luckily <code>FiniteSets</code> know how to do this. Together they know how to handle any situation between them. </p>
<p>Here are the local interaction methods for <code>EmptySet</code>. </p>
<pre>def _union(self, other):
    return other
def _intersect(self, other):
    return S.EmptySet
</pre>
<p>These are particularly simple, are known only by EmptySet, and yet produce proper behavior in any interaction. When we add EmptySet to the family of Sets we don’t need to add code to Union or Intersection. Everything is nicely contained. </p>
<p>When they simplify, the Union and Intersection classes do two things. </p>
<ol>
<li> They walk over the collection of sets and use local rules to perform simplifications
</li><li> They also contain a few “global rules” that can accelerate the process by looking at the entire collection of sets at once.
</li></ol>
<p>In this way it is very easy to extend the Sets module with new classes without breaking Union and Intersection. Additionally, the old nest of code has been cleanly separated and placed into the relevant classes. Unions and Intersections no longer need to know every possible interaction between every possible Set. Instead they manage interactions and let Sets simplify themselves. </p>
<p>A final note. I like this idea of managing many small simplification rules. I stole this idea from <a href="http://deeplearning.net/software/theano/">Theano</a>, a symbolic/numeric python library. They go one step further though and separate the rule from the container class. I.e. rather than telling Intervals how to interact with Intervals they make a separate rule and include it in some separate simplifying manager. If this idea interests you I suggest you look at their <a href="http://deeplearning.net/software/theano/optimizations.html#optimizations">documentation on optimizations</a>.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/257/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/257/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/257/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/257/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/257/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/257/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/257/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/257/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/257/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/257/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/257/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/257/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/257/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/257/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=257&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-03-30T20:14:16Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>mrocklin</name>
    </author>
    <source>
      <id>http://sympystats.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sympystats.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sympystats.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sympystats.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sympystats.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>sympy-stats</title>
      <updated>2012-06-15T04:00:20Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-2520472460430880330.post-798629723236480051</id>
    <link href="http://sympy.blogspot.com/feeds/798629723236480051/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=2520472460430880330&amp;postID=798629723236480051" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/798629723236480051" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/798629723236480051" rel="self" type="application/atom+xml"/>
    <link href="http://sympy.blogspot.com/2012/03/google-summer-of-code-2012.html" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2012</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">SymPy was accepted by Google once again to participate in Google Summer of Code for 2012.  Please go to <a href="http://www.google-melange.com/gsoc/org/google/gsoc2012/sympy">http://www.google-melange.com/gsoc/org/google/gsoc2012/sympy</a> for more information about how to apply and get started.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/2520472460430880330-798629723236480051?l=sympy.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2012-03-16T20:55:25Z</updated>
    <published>2012-03-16T20:54:00Z</published>
    <author>
      <name>Aaron Meurer</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/07681610358074038422</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-2520472460430880330</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>https://profiles.google.com/104039945248245758823</uri>
      </author>
      <link href="http://sympy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://sympy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>The Official SymPy Blog</subtitle>
      <title>The Official SymPy Blog</title>
      <updated>2012-06-05T00:51:38Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8814696591561172392.post-4829631852742579231</id>
    <link href="http://vperic.blogspot.com/feeds/4829631852742579231/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://vperic.blogspot.com/2012/02/thoughts-on-google-code-in-2011.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/4829631852742579231" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/4829631852742579231" rel="self" type="application/atom+xml"/>
    <link href="http://vperic.blogspot.com/2012/02/thoughts-on-google-code-in-2011.html" rel="alternate" type="text/html"/>
    <title>Thoughts on Google Code-in 2011</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Google Code-in is the high-school equivalent of the Google Summer of Code. The program ran from Nov 21st to Jan 16th, though we've only now gotten around to sending <a href="https://groups.google.com/group/sympy/browse_thread/thread/fde434aa771fd5eb/c3220755357b032a">a "summary" mail to the list about it</a>. As Aaron noted, we've had some translation work, some work on SymPy Live and a bevy of documentation and code improvements. With 176 tasks completed, I'd say the whole project was a success for SymPy. I was involved as a mentor, so here are some general thoughts and observations about the process. <br/> <br/><b>E-mail spam.</b> In SymPy we didn't have a clean separation of mentor duties (eg. KDE only allowed tasks for which someone volunteered to mentor), so the initial idea was to add all (most) mentors to all tasks. This meant a lot of mails, an effect worsened by the fact that each commenter to the issue starts another "conversation" when viewed from Gmail (which I even <a href="https://code.google.com/p/soc/issues/detail?id=1388">reported to Melange</a> as a feature request/bug). At the height of activity, I could get upwards of 30-40 mails ("conversations") daily, which by far dwarfed my other mail traffic. Then, because each comment is basically a separate mail, I wasted a lot of time looking at issue that someone already addressed (again, most mentors could handle most tasks). For the second round of tasks I didn't add myself to each task, otherwise I'm sure I'd have gotten even more spam. The bug I reported in Melange was fixed, so hopefully this will be less of an issue next year. <br/> <br/><b>Being a mentor takes a lot of time.</b> Partly a consequence of above, partly due to all the work being done, but being a mentor took a lot of time. Many students were unfamiliar with git (and didn't want to read the instructions on development workflow on our excellently-written (in my opinion) <a href="https://github.com/sympy/sympy/wiki/GCI-2011-Landing">GCI Landing Page</a>) and solving issues with them was a constant topic on IRC. Students also lacked follow-through with comments (or, occasionally, expected the work handed down to them) which didn't help. Finally, many students were very anxious, and didn't appreciate that we are all volunteers and cannot be around 24/7. All of this resulted in a process that was frustrating at times and stressful for mentors.  <br/> <br/>Regardless of all of the above, <b>a lot of work was done</b> for SymPy. While I didn't look at the stats, my feeling is that the biggest improvement could be seen in our SymPy Live interface (and our webpage) and our documentation. Yes, we also saw some code improvements, but they were probably a smaller part of the overall contribution (though by no means less important). Interestingly, I think this exposes the two types of tasks the GCI contest is well-suited to: tasks where there is no "in-house" expertise (anything web related in our case) and uninteresting tasks/chores (writing documentation, in our case and probably for most projects). In the first case, we managed to attract experienced developers who could improve our webpage much faster and better than any of the core developers. Writing documentation is also an important task, but one that is shunned by most developers. Still, it is mostly simple work and (more importantly) doesn't usually require in-depth understanding of the code. This made it ideally suited for new contributors. The financial award (100$ for every 3 completed tasks, up to 500$) was enough of a motivation for students. The all-around improvements to our documentation are probably the single biggest advantage of our participation in GCI. <br/> <br/><b>Translations.</b> In GCI, tasks were divided into categories and we needed to have at least 5 tasks in every category. While we managed to "fill-up" most categories, Translation was probably the biggest problem. As a, basically, command-line library, it does not make a lot of sense for SymPy to be translated in other languages. In the end, we created tasks for translating our webpage and tutorial to the languages covered by the development team and some of these were done, but I consider this a waste of time. Though this issue is "near and dear" to me (I'm not a native speaker of English), I'm of the opinion that it would be impossible for someone without at least a basic knowledge of English to program with SymPy. Simply, however much effort we put into translating, the class and method names will remain in English and there's no helping that. I very much doubt the newly translated documents will be even used and they're bound to fall behind as the original document changes. We also had to start using gettext to manage the translations, which is a non-trivial amount of work (and there are still some issues). In my opinion, it adds another layer of complexity (however small) for very little gain. <br/> <br/>In <b>conclusion</b>: did we get stuff done? Yes, without a doubt. Would we have gotten more if the mentors used their mentoring time for coding? Perhaps, but not necessarily. Are some of the students going to keep contributing? Most likely not. Still, I would consider the whole program, and our participation in it, a <b>success</b>. Ideas for next year could be focusing more on stuff none of the core developers can do (eg. the website work), but we can't really say how far along will SymPy development progress during this year or which tasks might be available to students. Hopefully, more people will volunteer to mentor next year, which would help with most issues I raised here. It is interesting, though, that even with our normally very fast development process we couldn't handle the influx of student work. It'd be interesting to see how other organizations coped. <br/> <br/>Here's to another GCI this year!<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8814696591561172392-4829631852742579231?l=vperic.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2012-02-10T16:27:46Z</updated>
    <published>2012-02-10T16:27:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="SymPy"/>
    <author>
      <name>Vladimir Perić</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8814696591561172392</id>
      <category term="SymPy"/>
      <category term="Tox"/>
      <author>
        <name>Vladimir Perić</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://vperic.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/-/SymPy" rel="self" type="application/atom+xml"/>
      <link href="http://vperic.blogspot.com/search/label/SymPy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Vlada's SymPy Blog</title>
      <updated>2012-05-16T23:31:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://sympystats.wordpress.com/?p=241</id>
    <link href="http://sympystats.wordpress.com/2012/02/06/sympy-stats-is-in/" rel="alternate" type="text/html"/>
    <title>sympy.stats is in</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Development It seems there was a flurry of development over the winter holidays. Tom’s Meijer-G integration code was merged into master giving SymPy an incredibly powerful definite integration engine. This encouraged me to finish up the pull request for random … <a href="http://sympystats.wordpress.com/2012/02/06/sympy-stats-is-in/">Continue reading <span class="meta-nav">→</span></a><img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=241&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h3>Development</h3>
<p>It seems there was a flurry of development over the winter holidays.</p>
<p>Tom’s Meijer-G integration code was merged into master giving SymPy an incredibly powerful definite integration engine. This encouraged me to finish up the pull request for random variables.</p>
<p>Earlier this morning we finally merged it in and sympy.stats is now in master. If you’re interested please play with it and generate feedback. At the very least it should be able to solve many of your introductory stats homework problems :)</p>
<p>Actually, I tried using it for a non-trivial example last month and generated an integral which killed the integration engine (mostly this was due to a combination of trigonometric and delta functions). However, I still really wanted the result. The standard solution to analytically intractable statistics problems is to sample. This pushed me to build a monte carlo engine into sympy stats.</p>
<h3>Sampling</h3>
<p>The family of stats functions P, E, Var, Density, Given, now have a new member, Sample. You can generate a random sample of any random expression as follows</p>
<p/><pre class="brush: python;">&gt;&gt;&gt; from sympy.stats import *
&gt;&gt;&gt; X, Y = Die(6), Die(6)
&gt;&gt;&gt; roll = X+Y
&gt;&gt;&gt; Sample(roll)
10
&gt;&gt;&gt; Sample(roll)
5
&gt;&gt;&gt; Sample(X, roll&gt;10) # Sample X given that X+Y&gt;10
6
</pre><p/>
<p>Sampling is of course more fail-proof than solving integrals and so expressions can be made arbitrarily complex without issue. This sampling mechanism is also built into the probability and expectation functions using the keyword “numsamples”</p>
<p/><pre class="brush: python;">&gt;&gt;&gt; from sympy.stats import *
&gt;&gt;&gt; X, Y = Normal(0, 1), Normal(0, 1)
&gt;&gt;&gt; P(X&gt;Y)
1/2
&gt;&gt;&gt; P(X&gt;Y, numsamples = 1000)
499 
────
1000
&gt;&gt;&gt; E(X+Y)
0
&gt;&gt;&gt; E(X+Y, numsamples = 1000)
-0.0334982435603208
</pre><p/>
<h3>Future</h3>
<p>GSoC 2012 was announced a couple days ago. I’m excited to see what projects are proposed. </p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/241/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/241/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/241/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/241/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/241/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/241/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/241/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/241/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/241/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/241/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/241/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/241/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/241/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/241/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;blog=22550280&amp;post=241&amp;subd=sympystats&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-02-07T04:03:22Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>mrocklin</name>
    </author>
    <source>
      <id>http://sympystats.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://sympystats.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://sympystats.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://sympystats.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://sympystats.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Just another WordPress.com site</subtitle>
      <title>sympy-stats</title>
      <updated>2012-06-15T04:00:20Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6568744196982634289.post-7881611169286097799</id>
    <link href="http://ondrejcertik.blogspot.com/feeds/7881611169286097799/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=6568744196982634289&amp;postID=7881611169286097799" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/7881611169286097799" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/7881611169286097799" rel="self" type="application/atom+xml"/>
    <link href="http://ondrejcertik.blogspot.com/2012/01/when-double-precision-is-not-enough.html" rel="alternate" type="text/html"/>
    <title>When double precision is not enough</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I was doing some finite element (FE) calculation and I needed the sum of the lowest 7 eigenvalues of a symmetric matrix (that comes from the FE assembly) to converge to at least 1e-8 accuracy (so that I can check calculation done by some other solver of mine, that calculates the same but doesn't use FE). In reality I wanted the rounded value to 8 decimal digits to be correct, so I really needed 1e-9 accuracy (but it's ok if it is let's say 2e-9, but not ok if it is 9e-9). With my FE solver, I couldn't get it to converge more than to roughly 5e-7 no matter how hard I tried. Now what?<br/><br/>When doing the convergence, I take a good mesh and keep increasing "p" (the polynomial order) until it converges. For my particular problem, it is fully converged for about p=25 (the solver supports the order up to 64). Increasing "p" further will not increase the accuracy anymore, and the accuracy stays at the level 5e-7 for the sum of the lowest 7 eigenvalues. For optimal meshes, it converges at p=25, for not optimal meshes, it converges for higher "p", but in all cases, it doesn't get below 5e-7.<br/><br/>I know from experience, that for simpler problems, the FE solver can easily converge to 1e-10 or more using double precision. So I know it is doable, now the question is what the problem is: there<br/>are a few possible reasons:<br/><br/><ul><li>The FE quadrature is not accurate enough</li><li>The condition number of the matrix is high, thus LAPACK doesn't return very accurate eigenvalues</li><li>Bug in the assembly/solver (like single/double corruption in Fortran, or some other subtle bug)</li></ul>When using the same solver for simpler potential, it converged nicely to 1e-10. So this suggests there is no bug in the assembly or solver itself. It is possible that the quadrature is not accurate enough, but again, if it converges for simple problem, it's probably not it. So it seems it is the ill conditioned matrix, that causes this. So I printed the residuals (that I simply calculated in Fortran using the matrix and the eigenvectors returned by LAPACK), and it only showed 1e-9. For simpler problems, it can go to 1e-14 easily. So that must be it. How do we fix it?<br/><br/>Obviously by making the matrix less ill conditioned, which is caused by the mesh for the problem (the ratio of the longest/shortest elements is 1e9) but for my problem I really needed such a mesh. So the other option is to increase the real number accuracy.<br/><br/>In Fortran all real variables are defined as real(dp), where dp is an integer defined at a single place in the project. There are several ways to define it, but it's value is 8 for gfortran and it means double precision. So I increased it to 16 (quadruple precision), recompiled. Now the whole program calculates in quadruple precision (more than 30 significant digits). I had to recompile LAPACK using the "-fdefault-real-8" gfortran option, that promotes all double precision numbers to quadruple precision, and I used the "d" versions (double precision, now promoted to quadruple) of LAPACK routines. <br/><br/>I rerun the calculation ---- and suddenly LAPACK residuals are around 1e-13, and the solver converges to 1e-10 easily (for the sum of the lowest 7 eigenvalues). Problem solved. <br/><br/>Turning my Fortran program to quadruple precision is as easy as changing one variable and recompiling. Turning LAPACK to quadruple precision is easy with a single gfortran flag (LAPACK uses the old f77 syntax for double precision, if it used real(dp), then I would simply change it as for my program). The whole calculation got at least 10x slower with quadruple. The reason is that gfortran runtime uses the libquadmath library, that simulates quadruple precision (as current CPUs only support double precision natively). <br/><br/>I actually discovered a few bugs in my program (typically some constants in older code didn't use the "dp" syntax, but had the double precision hardwired). Fortran warns about all such cases, when the real variables have incompatible precision. <br/><br/>It is amazing how easy it is to work with different precision in Fortran (literally just one change and recompile). How could this be done with C++? This wikipedia <a href="http://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format">page</a> suggests, that "long double" is only 80bit in most cases (quadruple is 128bit), but gcc offers __float128, so it seems I would have to manually change all "double" to "__float128" in the whole C++ program (this could be done with a single "sed" command).<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/6568744196982634289-7881611169286097799?l=ondrejcertik.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2012-01-26T18:51:28Z</updated>
    <published>2012-01-26T18:49:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sage"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="debian"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="scipy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="python"/>
    <author>
      <name>Ondřej Čertík</name>
      <email>noreply@blogger.com</email>
      <uri>https://profiles.google.com/104039945248245758823</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6568744196982634289</id>
      <category term="debian"/>
      <category term="sympy"/>
      <category term="sage"/>
      <category term="python"/>
      <category term="scipy"/>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>https://profiles.google.com/104039945248245758823</uri>
      </author>
      <link href="http://ondrejcertik.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://ondrejcertik.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6568744196982634289/posts/default/-/sympy/-/sympy?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Ondřej Čertík</title>
      <updated>2012-06-11T16:16:45Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8510171342300140296.post-5238790680519906319</id>
    <link href="http://seanvig.blogspot.com/feeds/5238790680519906319/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2012/01/finishing-what-i-started.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/5238790680519906319" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/5238790680519906319" rel="self" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2012/01/finishing-what-i-started.html" rel="alternate" type="text/html"/>
    <title>Finishing what I started</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As of today, I'm happy to report that my last pull request for angular momentum coupling was merged into master (see <a href="http://here/">here</a>). The master branch now has the capability to do arbitrary angular momentum coupling and uncoupling. I ended up writing a summary of the algorithm I used to write this, which I briefly described (or more accurately, brushed over) in the previous blog post, the write up for which is currently hosted on github <a href="https://github.com/flacjacket/coupling_algorithm">here</a>. This should be all of the big changes for the angular momentum algebra I can foresee in the near future.<br/><br/>At this point, school is starting back up again and especially since I have joined a research group I won't be doing anything big in the near future. That said, I do have a couple things I've started in on that I will try to finish up if I can get some time. First, I started working on some changes to the quantum printing framework. I have a pull request open for some new tests to the quantum printing framework, so if that can get finished up I'll try to work on getting those changes in. This was an issue that had been brought up before (around the time I started the GSoC project) and even the work I've done so far, I've dug up a couple issues with the printing framework. The current pull for the tests are <a href="https://github.com/sympy/sympy/pull/908">here</a> and the changes to the printing framework which are to follow are <a href="https://github.com/flacjacket/sympy/tree/quantum_printing">here</a>.<br/><br/>In addition, over winter break, I dug into some related issues with Piecewise, particularly with the treatment of the otherwise parameter. Just today I opened a pull request for collecting feedback on the changes I made <a href="https://github.com/sympy/sympy/pull/1009">here</a>.<br/><br/>Now that the spin stuff is finished, I've been thinking about going back and looking at the stuff I did at the beginning of the GSoC project, particularly some of the stuff with CG coefficients and simplification of these terms. From what I remember, there should be some quick changes to make some stuff run much better, so if I get time, I'll take a look back at that.<br/><br/>Last, while I am quite happy with how the current angular momentum coupling and uncoupling methods treat numerical cases, there's nothing really there for treating symbolic cases and any symbolic arguments cause the methods to return a very general summation. I put some thought into modifying the current algorithm to allow for some forms of symbolic coupling and uncoupling, but I wasn't able to come up with any. If I can sit down and find something that could do symbolic coupling and uncoupling, that would be the icing on the cake of the current algorithm.<br/><br/>With the merging of this pull request, everything that I set out to do for my GSoC project last summer has been completed in some form. There may be some things to refine or work on, but for the most part, I have accomplished everything I set out to do. Unless I make some big changes to the coupling algorithm, like working out something with symbolic cases, or make some other big change to the angular momentum algebra, this will likely be my last post here, at least until something else comes up that I'd like to document.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8510171342300140296-5238790680519906319?l=seanvig.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2012-01-22T06:57:37Z</updated>
    <published>2012-01-22T06:57:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Sean Vig</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8510171342300140296</id>
      <category term="sympy"/>
      <category term="GSoC"/>
      <author>
        <name>Sean Vig</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://seanvig.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://seanvig.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Developing Wigner-3nj Symbols in SymPy</subtitle>
      <title>Sean Vig's 2011 GSoC Project</title>
      <updated>2012-05-19T05:58:44Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1077</id>
    <link href="https://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/" rel="alternate" type="text/html"/>
    <title>Vim vs. Emacs (Part 3)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">See parts 1 and 2. Some more comments after using emacs for a while: I finally found the perfect tab completion solution. It took way too much searching for how awesome it is. It’s called auto-complete-mode. The best way to get an idea of what this is is to watch this screencast. Basically, it shows [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1077&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>See parts <a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/">1</a> and <a href="http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/">2</a>.</p>
<p>Some more comments after using emacs for a while:</p>
<li>I finally found the perfect tab completion solution. It took way too much searching for how awesome it is.  It’s called <a href="http://cx4a.org/software/auto-complete/manual.html">auto-complete-mode</a>.  The best way to get an idea of what this is is to watch <a href="http://www.youtube.com/watch?v=rGVVnDxwJYE">this screencast</a>.  Basically, it shows you a completion list automatically.  It uses the <em>TAB</em> key to do completion (to me, this is a no brainer, but for some reason, no other completion extension that I found did this, requiring you to do all kinds of nonsense in your .emacs file).  It’s got cool features like simple fuzzy matching and intelligent matching (so the first completion is what you tend to use, instead of just the first one that matches).  To quote the author, “a goal of auto-complete-mode is to provide a system that does what users want without any command.” I couldn’t agree with that goal more. If you install it, I recommend adding <code>(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)</code> to your .emacs, so that you can use M-TAB to force the completion menu to come up.  This generally happens automatically, but I think this is the only way to get fuzzy matching, for example. Actually, you can also just use <code>(ac-set-trigger-key "TAB")</code>, which intelligently sets TAB to complete or indent, based on which one you more likely want.  This seems to work pretty well to me.</li>
<li>Speaking of indenting, emacs has a pretty nice indentation feature for Python.  You just press <code>TAB</code> repeatedly, and it cycles through all the syntactically legal indentations.  I find this to be more useful than the usual <code>TAB</code> indents behavior of most editors. Note that by default, it won’t automatically indent, even with trivial indentations (i.e., keeping the previous indentation).  This is easy to fix, though.  Just add <code>(define-key global-map (kbd "RET") 'newline-and-indent)</code> to your .emacs file.  This will make <code>RET</code> do the same thing as <code>C-j</code>, i.e., basically the equivalent of <code>RET TAB</code>.</li>
<li>emacs comes with an extension that lets you work with version control systems, called VC.  I don’t use it.  I don’t like stuff messing with my git stuff behind my back (sounds like a good way to lose data to me), and I’m good enough with git commands straight that I don’t need the help.
<p>But unlike all the other hundreds of emacs features that I don’t use, this one was seriously slowing down my workflow.  It adds three or four seconds to the startup time of emacs when loading from within a git repository.  So I did some Googling and added this to my .emacs file:</p>
<p/><pre class="brush: plain;">;; Disable all the version control stuff         
;; Makes emacs load much faster inside git repos 

(setq vc-handled-backends nil)
</pre><p/>
<p>(<em>unrelated: Why doesn’t WordPress support lisp as a language for syntax highlighting?</em>)</p>
<p>This disables the version control stuff, making emacs load fast again (virtually as fast as vim, actually).
</p></li>
<li>Speaking of making emacs go faster, make sure you compile all your extensions into byte code.  For whatever reason, emacs doesn’t do this automatically, even though compiled files run much faster, and it doesn’t take very long.  The easiest way is to use <code>M-x byte-compile-file</code> from within emacs.  Just make sure that if you modify the .el file that you recompile the byte code, or it will continue to use the old version.</li>
<li>I finally figured out how to enable mouse support.  For whatever reason, Googling got me nowhere with this, so I ended up asking on the <a href="https://lists.gnu.org/mailman/listinfo/help-gnu-emacs">help-gnu-emacs</a> list, which was very helpful.  The solution is to put
<p/><pre class="brush: plain;">;; ===== Enable mouse support ====
                                      
(require 'xt-mouse)                   
(xterm-mouse-mode)
</pre><p/>
<p>in your .emacs file.  And then it just works.  It needs some tweaking (e.g., it doesn’t play so well with momentum scrolling), but at least it works. I thought I was going to hang myself without mouse support. Because frankly, as good as the movement commands are, moving with the mouse is so much easier sometimes (the same is true for vim too, btw).</p></li>
<li>I compiled the git version of emacs (it’s not very hard btw).  I did this to see if the mouse suport “bug” was fixed there, but I’ve gone ahead and kept using it, as it’s nicer.  But I didn’t figure out how to configure it to not load in an X window. So for now, I’ve aliased <code>emacs</code> to <code>emacs -nw</code>. I’m sure I just need to add some flag to <code>configure</code>, but I haven’t gotten around to looking it up yet.</li>
<li>I found out how to allow editing in the Isearch mode (again, thanks to the help-gnu-emacs list).  You need to install the <a href="https://github.com/asmeurer/dotfiles/blob/master/.emacs.d/lisp/isearch%2B.el">isearch+</a> extension, add the following to your .emacs,
<p/><pre class="brush: plain;">;; ===== isearch+ =====         

(require 'isearch+)
</pre><p/>
<p>and most importantly, you need to edit the file and uncomment all the commmands you want to allow.  If you follow my link above, it goes to my personal dotfiles repo, where I’ve already done that.</p></li>
<li>On a related note, this is the first of several emacs extensions I’ve installed that I’ve edited the extension file itself for.  The rest, I just had to add some code to .emacs.  In most cases, there was already a variable or suggested code snippet to add to .emacs to get what I wanted.
<p>On the other hand, with vim, I had to edit virtually every extension I installed to make it do what I want.  I’m not sure what this means, though.  It could be a statement about one of many things: how the emacs community provides nicer defaults, how the vim language is easier to use, and hence more inviting for me to edit the files, or how I haven’t gotten around to messing with certain things yet.</p></li>
<li>If you do a lot of work with LaTeX, check out <a href="http://www.gnu.org/software/auctex/">AUCTeX</a>. I haven’t used it enough yet to say much about it, but from what I’ve played around with, it’s pretty awesome.  And if you use a windowed version of emacs, it’s got a really awesome preview mode.</li>
<li>If you’re bored, check out the <a href="http://www.dr-qubit.org/predictive/predictive-user-manual/html/index.php">predictive</a> extension.  It’s actually not as helpful as you’d think (unlike the very similar auto-complete-mode module mentioned above).  But it’s kind of cool to turn on and play around with when you’re typing something.  Maybe you’ll learn new words or something.</li>
<li>I could go on and on.  I haven’t mentioned the most basic customizations (like how to setup four-space tabs).  If you are starting to use emacs, I recommend going through <code>M-x customize</code>, and reading my <a href="https://github.com/asmeurer/dotfiles/blob/master/.emacs"><code>.emacs</code></a> file.  And my best advice: if you want emacs to do something, first do <code>M-x customize</code> and search for what you want (EDIT: apparently searching customize requires emacs 24, i.e., the development version).  If you don’t find what you want there (and you will surprisingly often), search Google.  There are so many emacs users, that the chances of someone else wanting what you want are very likely. I’ve found the results from the <a href="http://www.emacswiki.org/">emacs wiki</a> to be particularly helpful. And one more thing: if you find an extension you like, double check first to see if it’s not already included in emacs. Emacs seems to like including good extensions in future releases, so an older extension has a good chance of already being included.</li>
<p>Some emacs questions:</p>
<li>I tried <code>(define-abbrev global-abbrev-table "Ondrej" "Ondřej")</code>, so that when I type Ondrej it give me Ondřej.  But it doesn’t work.  Is this a bug or what? If I do <code>(define-abbrev global-abbrev-table "foo" "bar")</code> and type “foo”, it turns into “bar”, but the above leaves Ondrej alone. <em>EDIT: I guess this was an emacs bug.  It doesn’t seem to be there any more (perhaps it was fixed with the git version or something).</em></li>
<li>Is there a way to reload .emacs without closing emacs? I’m doing that a lot these days. <em>EDIT: I found it. Do <code>M-x load-file RET ~/.emacs</code></em></li>
<li>Is there a good emacs equivalent of the vim <a href="http://www.vim.org/scripts/script.php?script_id=273">tag list plugin</a>  (thanks for commenter Scott for pointing me to that in the first place)?  I just want something that lists all the class and function definitions in a Python file in order, so I can easily jump to the one I want, or just get an overview of the file.  </li>
<p>This Tuesday will mark the point where I will have spend as long using emacs as I did using vim. But already, I feel more competent with emacs.  I won’t repeat what I said in my last post, but I just want to say that the ability to edit and write at the same time makes me way more productive.  The fact that it uses keyboard shortcuts that I’m already used to probably helps a lot too.  Even so, I’ve not used any kind of cheat sheet for emacs (since I never really found any that were any good), and yet I feel like I’ve memorized more key commands now than I ever did with vim, for which I did use a <a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">cheat sheet</a>.  </p>
<p>So I really don’t see myself going back to vim at this point.</p>
<p>I’m actually surprised.  Virtually everyone I know who uses a command line editor uses vim.  It’s definitely the more popular of the two.  But having tried both, I can only speculate as to why.  Vim has a much higher learning curve than emacs.  Everybody grows up learning how to write text in editors like Microsoft Word, TextEdit, Notepad, etc., that all work fundamentally like emacs: if you type text, it enters the text.  If you want to do advanced editing with the keyboard, you hold down some meta keys and type chorded keyboard shortcuts.  The vim modal editing methodology is so different from this, that it surprises me that so many people go to the trouble of learning it (I mean, to the point that they are more efficient with it).  I can see the benefit over GUI editors, which have nothing on either vim or emacs with regards to customization, or just the plain editing power that is really necessary for coding. My guesses why people use vim:</p>
<li>They are shown vim first, so just use it.
</li>
<li>They are turned off by the massiveness of emacs (it seems contradictory to me, since the whole point of using a command line editor is to get more power, but I could see it).
</li>
<li>They are turned off by emacs lisp.
</li>
<li>Some combination of those.</li>
<p>Maybe the vim users out there could comment why they use vim.  Am I missing something?  Or are your heads just wired differently from mine? And if you use emacs (or anything else), I’d love to hear from you too?</p>
<p>At any rate, I recommend that anyone who wants to give command line editors a chance do what I did: learn both vim and emacs.  My blog posts should be enough to give you some good advice.  I went cold-turkey, and I recommend that you do too, but only do it if you won’t have any important editing to do for a few weeks, as your editing rate will slow down a lot as you are learning for both editors.  And even though I think I am going to stick with emacs, learning vim was still valuable.  Unlike emacs, vi is part of the POSIX standard, so it’s included in pretty much every UNIX distribution.  I’ll be glad when I find myself on a minimal command line and know how to use a decent text editor.  And anyway, you can’t really know which one will be your way until you try them both.  I really thought I would end up using vim, as it was so popular among all the people I know who use command line editors. But I guess there is only <a href="http://www.dina.dk/~abraham/religion/">One True Editor</a>.</p>
<p><strong>EDIT:</strong> I found out how to make emacs really fast.  The key is to run one process of emacs in daemon mode, and have the rest connect to that.  Then you only have to wait for the startup once (per computer session).  To do it, just set your <code>EDITOR</code> to <code>'emacsclient -a "" -nw'</code> (and you might also want to alias <code>emacs</code> to that as well).  What this does is connect to the emacs daemon.  The <code>-a ""</code> starts one if it isn’t already started (you can also do this yourself with <code>emacs --daemon</code>.  If you only want to use the daemon version if you’ve specifically started it, replace <code>""</code> with <code>emacs</code>.  This will connect to the daemon if it’s running, and otherwise just start a new emacs process.  </p>
<p>The <code>-nw</code> keeps it from running in window mode.  Remove this if you use the GUI version of emacs.  This is necessary to make it work correctly with multiple tabs.  This is so fast that you should never really even need to use <code>C-z</code> to quickly exit emacs.  <code>C-x C-c</code> is just fine, because reopening will be instantaneous.  I like this because I was starting to accumulate background emacs processes that I forgot about.</p>
<p>This probably requires a fairly new version of emacs, possibly even the development version.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1077/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1077/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1077/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1077/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1077/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1077/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1077/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1077/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1077/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1077/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1077/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1077/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1077/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1077/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1077&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-01-13T23:01:39Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>https://asmeurersympy.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2012-06-15T04:00:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1070</id>
    <link href="https://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/" rel="alternate" type="text/html"/>
    <title>Vim vs. Emacs (Part 2)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As I noted in part 1, I have decided to switch to a command line text editor. I decided that, to be fair, I would try both vim and emacs. And to force myself to learn them, I decided to use them cold-turkey. Since I’m going cold-turkey, I am doing this over my break from [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1070&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As I noted in <a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/">part 1</a>, I have decided to switch to a command line text editor.  I decided that, to be fair, I would try both vim and emacs.  And to force myself to learn them, I decided to use them cold-turkey.  </p>
<p>Since I’m going cold-turkey, I am doing this over my break from classes, so that I can weed out any difficulties during a period when I can live with slow text editing if necessary.  This is a one month break.  I have reached (roughly) the half way point.  For the first half, I used nothing but vim to edit text.  Now, I will use nothing but emacs.</p>
<p>Now that I’ve stopped using vim (for now anyway), my view of it isn’t much different from what I wrote in the first part.  A lot of things there were addressed by commenters (or rather commenter).  I still feel that it’s not an a method of text editing that fits my head.  My entire life, I’ve used text editors where typing inserts text, and various control characters do things like move around faster.  </p>
<p>Enter emacs. It does exactly this.  Also a ton more.</p>
<p>I’ve only been using emacs for two days, but here are my impressions so far:</p>
<li><strong>The tutorial is better.</strong>  When you start emacs, it tells you how to start the tutorial.  Just type <code>C-h t</code> (if you don’t already know, in emacs <code>C-</code> means <code>CTRL-</code> and <code>M-</code> means <code>ALT-</code>).  Like I said last time, the very first thing you learn is how to scroll by more than one line at a time.  That turns out to be a very useful thing to do.  Also, the emacs tutorial did a better job of explaining how to use multiple files at once in emacs, which is something that I still don’t really know how to do very well in vim.
<p>I have to give the vim tutorial some credit for one thing, though.  It has better interactive examples.  For example, in the vim tutorial, you have stuff like </p>
<p/><pre class="brush: plain;">  1. Move the cursor to the second line in the phrase below.
  2. Type  dd  to delete the line.
  3. Now move to the fourth line.
  4. Type   2dd   to delete two lines.

---&gt;  1)  Roses are red,
---&gt;  2)  Mud is fun,
---&gt;  3)  Violets are blue,
---&gt;  4)  I have a car,
---&gt;  5)  Clocks tell time,
---&gt;  6)  Sugar is sweet
---&gt;  7)  And so are you.
</pre><p/>
<p>whereas in the emacs tutorial, you just have</p>
<p/><pre class="brush: plain;">&gt;&gt; Kill a line, move around, kill another line.
   Then do C-y to get back the second killed line.
   Then do M-y and it will be replaced by the first killed line.
   Do more M-y's and see what you get.  Keep doing them until
   the second kill line comes back, and then a few more.
   If you like, you can try giving M-y positive and negative
   arguments.
</pre><p/>
<p>which is a little more vague.  So I have to give vim credit for that.  </p></li>
<li><strong>Everything’s a buffer.</strong> This line from the emacs tutorial really stuck with me: “ANY text you see in an Emacs window is always part of some buffer.”  Emacs has really a awesome editing model, even simple things like <code>M-f</code> and <code>M-b</code> to move around words at a time, or <code>M-DEL</code> to delete whole words make things <strong>way</strong> faster.  Vim of course has all of these too, albiet in a different way, but they aren’t everywhere.  In emacs, everything is a buffer, which just means that everything supports all the standard emacs commands.  So if you type <code>M-x</code> (roughly the equivalent of vim’s <code>:</code>) and start typing a command, you can move around and edit your command with emacs commands.  One of the things that bothered me about vim was that when I was typing something with <code>:</code>, I couldn’t use vim’s text moving/modifying commands to manipulate the text.  Typing ESC just canceled the command.
<p>Exceptions: There are at least two exceptions I’ve found to this rule.  First, if you do a search with <code>C-s</code> or <code>C-r</code>, no control commands work.  If you type a search string, and then type <code>M-DEL</code> to try to delete the last word in your search string, you will instead delete the word where the cursor is!  The solution I think is to use something like <code>M-x re-builder</code> instead.  This was a little slow in my tests.</p>
<p>Second, the emacs manual is presented in the <code>info</code> program, which uses completely different key commands from every other program.  This irked me quite a bit, because as soon as I finished the emacs tutorial, it pointed me to the manual, which was in <code>info</code>.  Then, the first thing in <code>info</code> is a tutorial on how to use <code>info</code>!  I opted to skip this.  If I need any information on emacs, I’ll just do a Google search anyway, so I found this to be a waste of time.</p></li>
<li><strong>It’s a little slower.</strong> I do notice a speed difference between emacs and vim.  vim is much more lightweight, and it shows.  Starting up emacs takes a second or two.  Also, since a lot of the features are more interactive, they suffer from a speed delay.  It’s not nearly slow enough to be a serious issue, though, and it’s still way faster than the GUI program I was using before (start up time).
<p>The emacs tutorial suggests using <code>C-z</code> whenever you want to only temporarily close emacs.  This seems like a good idea, and has worked pretty well for me so far (though I still usually close the whole thing with <code>C-x C-c</code> out of habit).</p>
<p>On a related note, I noticed that doing type-ahead while waiting for emacs to start up didn’t always work, whereas it always worked in vim (I do this, e.g., when waiting for the editor to start up when writing commit messages).</p></li>
<li><strong>It’s way more user-friendly.</strong> Note that this is of course a relative term.  I mean more user-friendly than vim, and pretty user-friendly for a command line program.  Obviously, the most user-friendly text editors are the GUI ones used by the majority of the population (for that very reason).  Actually, both vim and emacs are user-unfriendly in that if you accidentally open them and don’t know what they are or how to use them, you have no idea how to close them.  But even <code>less</code> (i.e., <code>man</code>) is technically like this.
<p>I’m not even referring to the different editing “modes” of the two editors, though you could easily argue that emacs style editing is more user-friendly than vim style editing. What I mean here is that emacs interaction is nice. When you type <code>:</code> in vim, start typing a command, and type <code>TAB</code>, it enters the first completion, regardless if it’s unique.  Pressing <code>TAB</code> multiple times give the rest.  In emacs, if you type <code>M-x</code> and start typing a command and type <code>TAB</code>, it pops up a temporary window with the list of all completions.  It even colors the next character, so you can easily see what to type next to get what you want.  As soon as you enter the command, the window disappears. (yes, I know about <code>CTRL-D</code> in vim, but to me tab completion should <em>always</em> work like it does in bash: complete characters if and only if they are unique in the list of completions)</p>
<p>By the way, when I said everything’s a buffer, I mean everything.  If you want, you can exit the <code>M-x</code> entry (type <code>C-g</code>), type <code>C-x C-b</code> to show the list of buffers, <code>C-x o</code> to switch to it, scroll down to “Completions”, press Enter, and actually get in the completion list, as a buffer (there’s probably a less complicated way to get to it, by the way).  You can then do whatever your heart fancies with it (save it to a file, copy it, whatever).</p></li>
<li><strong>Customization is harder.</strong> This was expected, since I already knew that emacs used lisp.  vim uses a language that is really easy to understand.  I was able to modify all the vim plugins I installed very easily.  If you want to change a setting globally in vim, just Google it and add one line to your .vimrc.   In emacs, everything is in Emacs Lisp.  I suppose prior experience with Lisp would probably help here.
<p>In the vim tutorial, near the end, it told how to create a .vimrc file, and even gave a very useful sample one as a starter.  In emacs, it took me a while to figure out how to do the equivalent (it took me a few Google searches just to figure out that the name of the configuration file in emacs is .emacs).  </p>
<p>Actually, the emacs equivalent is way better than in vim, but it isn’t really mentioned anywhere. It took me probably a dozen Google searches before I learned about it (granted, I was looking for things in the same way I did for vim, lines to add to .emacs). What you have to do is type <code>M-x configure</code>.  This opens what is basically a huge preferences dialog for emacs.  You can then go through and set just about every settable emacs setting from there.  The interface is very nice, as it’s interactive and tells you all about each setting.  And you never have to touch Lisp.  I’m still going through it, so I can’t comment more on it yet.  But I recommend doing <code>M-x configure</code> as soon as you have finished the tutorial and have gotten used to editing with emacs, as you are invariably going to want to change some things (though I should note that emacs generally has nicer defaults than vim).</p></li>
<li><strong>Better text editing methodology?</strong> Like I’ve already mentioned a bunch of times, the emacs editing model seems to fit my head better than the vim model.  In emacs, you type text, and it inserts the text.  If you want to do some advanced modification or move around, you type a control sequence.  In vim, you type characters, and it does modifications or moves around.  If you want to type text, you type <code>i</code> (or one of a few other characters) and type it.  Then, if you want to move around or modify the text, you have to press <code>ESC</code>.  This so-called “modular editing” doesn’t seem to work for me.  For one thing, I like to rapidly switch back and forth between these two “modes” (editing and inserting) when I write things.  I type too fast and write something wrong, and have to delete some stuff. The <code>M-DEL</code> emacs command is probably my most used (this also works in Mac OS X text dialogs, so I’m used to it already).  In vim, there is <code>CTRL-w</code> and a few others, but if I want to do something more advanced, like rearranging a sentence, then half of my key presses would be <code>ESC</code> or <code>i</code>, i.e., just moving between the modes.  In emacs, I can always have my pinky by Control and Alt (especially as soon as I remap CAPS-LOCK to Control).
<p>Also, it really irks me how in vim, if you are at the end of a line and press <code>l</code> (or right-arrow), instead of moving to the beginning of the next line, it beeps!  In emacs, if you are at the end of a the line and type <code>C-f</code>, it moves to the beginning of the next line (actually, it technically moves just beyond the line, in case you want to append, which is another annoying thing about vim: you have to use <code>A</code>, not <code>i</code>,  to add text to the end of a line). </p></li>
<p>Well, that’s it for now.  I will hold off on the questions until after I go through all the customizations, as it seems that, unlike vim, emacs has many things already built-in (but we already knew that, didn’t we :).  So I have just one question for readers: does anyone know of a really good emacs cheatsheet?  The <a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">one I used for vim</a> was really awesome, but I haven’t found anything equal for emacs.  I find myself searching the tutorial whenever I forget something, which is not very efficient, so I would appreciate something better. Otherwise, I’ll just find something decent and print it out, as it would be better than nothing.</p>
<p>And if anyone cares, you can see what I’ve got for my .emacs file so far at <a href="https://github.com/asmeurer/dotfiles/blob/master/.emacs">https://github.com/asmeurer/dotfiles/blob/master/.emacs</a>.</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1070/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1070/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1070/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1070/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1070/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1070/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1070/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1070/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1070/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1070/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1070/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1070/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1070/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1070/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1070&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-01-03T07:30:37Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>https://asmeurersympy.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2012-06-15T04:00:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1068</id>
    <link href="https://asmeurersympy.wordpress.com/2012/01/01/2011-in-review/" rel="alternate" type="text/html"/>
    <title>2011 in review</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The WordPress.com stats helper monkeys prepared a 2011 annual report for this blog. Here’s an excerpt: The concert hall at the Syndey Opera House holds 2,700 people. This blog was viewed about 11,000 times in 2011. If it were a concert at Sydney Opera House, it would take about 4 sold-out performances for that many [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1068&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The WordPress.com stats helper monkeys prepared a 2011 annual report for this blog.</p>
<div style="height: 300px;"/>
<p>Here’s an excerpt:</p>
<blockquote><p>The concert hall at the Syndey Opera House holds 2,700 people.  This blog was viewed about <strong>11,000</strong> times in 2011.  If it were a concert at Sydney Opera House, it would take about 4 sold-out performances for that many people to see it.</p></blockquote>
<p><a href="http://asmeurersympy.wordpress.com/2011/annual-report/">Click here to see the complete report.</a></p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1068/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1068/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1068/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1068/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1068/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1068/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1068/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1068/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1068/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1068/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1068/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1068/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1068/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1068/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1068&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2012-01-01T00:00:49Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>https://asmeurersympy.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2012-06-15T04:00:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurersympy.wordpress.com/?p=1059</id>
    <link href="https://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/" rel="alternate" type="text/html"/>
    <title>Vim vs. Emacs (Part 1)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So about a month or so ago, I decided that I needed to start learning a command line text editor. XCode, the editor I had been using for Python files, didn’t work very well with the new version (in particular, the essential plugin that I’d been using to clear trailing whitespace on save doesn’t yet [...]<img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1059&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So about a month or so ago, I decided that I needed to start learning a command line text editor.  XCode, the editor I had been using for Python files, didn’t work very well with the new version (in particular, the <a href="http://asmeurersympy.wordpress.com/2009/12/29/automatically-remove-trailing-whitespace-in-xcode/">essential plugin</a> that I’d been using to clear trailing whitespace on save doesn’t yet work in XCode 4).  I’d been using TextWrangler for other things, and started to switch to it for Python editing too.  As far as free GUI text editors on the Mac go, TextWrangler is the best.  </p>
<p>But I’d seen some of the nice features that vim has, like automatically keeping all lines under 80 characters, on a friend’s computer, and I decided that I should try it.</p>
<p>Now, I had had a little prior experience with both vim and emacs, but all that I remembered was for vim that <code>i</code> inserts and <code>ZZ</code> quits (for when I accidentally open it) and for emacs, that <code>M-X doctor</code> starts the psychiatrist. </p>
<p>So I’ve decided to try them out, doing it cold turkey.  To make sure that I choose the better one, I’ve decided to try both.  So, starting about a week ago, I’ve been using nothing but vim for all my text editing.  Starting in January, I will try using emacs, and after two weeks, I will see what I like better.</p>
<p>My opinions so far on vim:</p>
<li>The tutorials suck.  The best tutorial is <code>vimtutor</code> (type that in the command line), which I think comes with vim.  It’s not bad, but it leaves out a few things that I would consider to be essential to a tutorial, for example, how to scroll (answer: use CTRL-D and CTRL-U).  I started the emacs tutorial a while back, and while I never finished it, from what I remember, it was much better (and I also remember that the first thing it talked about was how to scroll by more than one line at a time). It also left out the <code>.</code> command, which I think is rather useful.  I did print out <a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">this cheatsheet</a> and have it sitting next to me on my desk.  That has helped a lot.  I hope I can find something similar for emacs when I get to it.</li>
<li>vim is too line oriented.  vi started out as an extension to ed, the line editor, so this is not surprising.  But I still can’t understand why pressing <code>l</code> at the end of a line can’t bring me to the beginning of the next line.  Maybe I’m just still doing it wrong (supposedly, you should rarely use <code>h</code> and <code>l</code> over more efficient moving commands).  </li>
<li>Somewhat related to the last point, vim really likes to ring the terminal bell a lot. To quote <a href="http://en.wikipedia.org/wiki/Editor_war">Wikipedia</a>, “vi has two modes – ‘beep repeatedly’ and ‘break everything’”</li>
<li>I managed to customize it to the point of usability (there are still several things I need to go in and figure out how to fix).  See https://github.com/asmeurer/dotfiles for my .vimrc and .vim/ files.  I found a decent Python syntax file, but it’s actually not that great.  I modified it to color single quoted strings different from double quoted strings (a feature I missed from Xcode). I still need to make a better color scheme (preferably the same as Xcode’s midnight), but this is enough work that I’ve put it off.</li>
<li>Pressing ESC all the time is really annoying.  Sometimes, I just arrow over, even though I know you’re not “supposed to”, just because my fingers don’t want to reach over and press ESC.  I’m also really used to using control sequences to move around while typing, which of course doesn’t work in vim.  In fact, so far, I’m suspecting that I’ll like emacs better.  But I’ve vowed to give both a fair chance.  But so far, my impression is that vim is a great for text <em>editing</em>, but not so hot for text <em>writing</em> (unless you always write text perfectly, so that you never need to leave insert mode until you are done typing).  Just the simple act of deleting a mistyped word (yes, word, that happens a lot when you are decently fast touch typist) takes several keystrokes, when it should in my opinion only take one (two if you count the meta-key).</li>
<li>The customizability is really nice.  So far, everything that I’ve thought of to change has been changeable.  Also, language is easy enough to understand that I was able to modify the Python syntax file without any difficulty.  </li>
<li>I like how it syntax highlights virtually everything I throw at it. </li>
<p>If there are any vim experts out there reading this, I have some questions:</p>
<li>Is there an easy way to get a list of and jump to a function/class definition in a Python file?  In Xcode and TextWrangler, there was a nice popup at the top of the window that I could access these from.  In vim, so far the best I’ve found is searching for it, which isn’t very efficient.</li>
<li>I got TAB to indent 4 spaces in Python, but for some reason, when I create a new line after a <code>:</code>, it puts 8 extra spaces. I wouldn’t be surprised if this is the result of some mismatch/error in <a href="https://github.com/asmeurer/dotfiles">my .vimrc or .vim/ files</a>, but I don’t know how to fix it</li>
<li>Any useful tricks to share?  Especially for editing Python files.</li>
<li>How long did it take you to become reasonably efficient with vim?</li>
<p><strong>EDIT: I thought of some more questions:</strong></p>
<li>Is there a way to make vim consider camelCase to be word boundaries?</li>
<p>Finally, if anyone else is thinking of starting vim, I have some useful things I’ve already found in my .vimrc. So you might take a look at that, and add the ones that you like to your .vimrc.  Finally, if you are on Mac OS X, you should use <a href="http://www.iterm2.com/#/section/home">iTerm2</a>.  Actually, you should use this regardless of what text editor you use.  It’s a very good Terminal.app replacement that has virtually all the features (with a couple of exceptions) as Terminal.app, and a ton of extra ones.  The one I want to mention here is mouse reporting support, so you can use your mouse to do things in vim.  This is very useful, as sometimes, e.g., when selecting text, using the mouse is just more efficient.  Also, if you get frustrated trying to remember the commands that will move around you faster than <code>h</code>, <code>j</code>, <code>k</code>, and <code>l</code>, you can just click on where you want to go.</p>
<p>:wq</p>
<br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1059/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1059/"/></a> <a href="http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1059/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1059/"/></a> <a href="http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1059/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1059/"/></a> <a href="http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1059/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1059/"/></a> <a href="http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1059/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1059/"/></a> <a href="http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1059/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1059/"/></a> <a href="http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1059/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1059/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;blog=7467151&amp;post=1059&amp;subd=asmeurersympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2011-12-20T08:17:43Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>https://asmeurersympy.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&amp;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://asmeurersympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://asmeurersympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://asmeurersympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://asmeurersympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My blog on my work on SymPy and other fun stuff.</subtitle>
      <title>Aaron Meurer's SymPy Blog</title>
      <updated>2012-06-15T04:00:12Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-2520472460430880330.post-84564291301844126</id>
    <link href="http://sympy.blogspot.com/feeds/84564291301844126/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=2520472460430880330&amp;postID=84564291301844126" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/84564291301844126" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default/84564291301844126" rel="self" type="application/atom+xml"/>
    <link href="http://sympy.blogspot.com/2011/12/google-summer-of-code-2011-wrap-up.html" rel="alternate" type="text/html"/>
    <title>Google Summer of Code 2011 Wrap-Up</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><span style="font-style: italic;">(Cross-posted on the <a href="http://google-opensource.blogspot.com/2011/12/students-add-to-sympy.html">Google Open Source Blog</a>)</span><br/><br/><a href="http://sympy.org/">SymPy</a> is a computer algebra system (CAS) written in pure Python. The core allows basic manipulation of expressions (like differentiation or expansion) and it contains many modules for common tasks (limits, integrals, differential equations, series, matrices, quantum physics, geometry, plotting, and code generation).<br/><br/>SymPy has participated in the <span style="font-style: italic;"><a href="http://code.google.com/soc/">Google Summer of Code</a></span> program in previous years under the umbrellas of <a href="http://www.python.org/psf/">Python Software Foundation</a>, Portland State University, and the <a href="http://www.stsci.edu/portal/">Space Telescope Science Institute</a>, where we were very successful. In fact, several of our core developers, including four of the mentors from this year, started working with SymPy as Google Summer of Code students. This was our first year participating as a standalone organization, and we would like to share our experience.<br/><br/>As part of the application process we required each student to submit a patch (as a GitHub pull request) that had to be reviewed and accepted. This allowed us to see that each applicant knew how to use git as well as communicate effectively during the review process.This also encouraged only serious applicants to apply. We had over 10 mentors available and we ended up with 9 students, all of whom were successful at final evaluations.<br/><br/><a href="http://nessgrh.wordpress.com/">Tom Bachmann</a> - <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Tom-Bachmann%3A-Definite-Integration">Definite Integration using Meijer G-functions</a>, mentored by Aaron Meurer<br/> Tom implemented an algorithm for computing symbolic definite integrals that uses so-called <a href="http://en.wikipedia.org/wiki/Meijer_g-function">Meijer G-functions</a>. This is the state-of-the-art algorithm for computing definite integrals, and indeed the results of his project are very impressive. This project has pushed SymPy forward a long way to becoming the strongest open source computer algebra system with respect to symbolic definite integration.<br/><br/><a href="http://vperic.blogspot.com/">Vladimir Peric</a> - <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application%3A-Vladimir-Peri%C4%87%3A-Porting-to-Python-3">Porting to Python 3</a>, mentored by Ronan Lamy<br/> Vladimir ported SymPy to work on Python 3 and ported all testing infrastructure so that SymPy gets regularly tested in Python 2.x, 3.2 and PyPy. Thanks to Vladimir’s work, the next version of SymPy, 0.7.2, which will hopefully be released later this year, will work in both Python 2 and Python 3, and it may support PyPy as well.<br/><br/><a href="http://gilbertgede.wordpress.com/">Gilbert Gede</a> - <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Gilbert-Gede%3A-PyDy">PyDy</a>, mentored by Luke Peterson<br/> Gilbert implemented a physics module to assist in generating symbolic equations of motion for complex multibody systems using Kane's Method. He expanded on the code written by his mentor, Luke, in 2009, and the module can now generate equations of motion for a bicycle. Gilbert also wrote very thorough documentation both for the Kane’s Method and the module in SymPy.<br/><br/><a href="http://lazovichsympy.wordpress.com/">Tomo Lazovich</a> - <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Tomo-Lazovich%3A-Position-and-Momentum-Bases-for-QM">Position and Momentum Bases for Quantum Mechanics</a>, mentored by Brian Granger<br/> Tomo has greatly improved the quantum mechanics module by implementing position/momentum representations for operators and eigenstates in various coordinate systems (including cartesian, cylindrical, and spherical) that allows you to easily represent many of the "textbook" quantum mechanics systems, including particle in a box, simple harmonic oscillator, hydrogen atom, etc.<br/><br/><a href="http://saptman.wordpress.com/">Saptarshi Mandal</a> - <a href="https://github.com/sympy/sympy/wiki/Gsoc-2011-report-saptarshi-mandal%3A-combinatorics-package-for-sympy">Combinatorics package for Sympy</a>, mentored by Christian Muise<br/> Saptarshi’s project was to mimic the various capabilities of Combinatorica, a Mathematica package for combinatorics. Most of the functionality involving elementary combinatorial objects such as Permutations, Partitions, Subsets, Gray codes and Prufer codes are complete.<br/><br/><a href="http://sherjilozair.wordpress.com/">Sherjil Ozair</a> - <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sherjil-Ozair%3A-Symbolic-Linear-Algebra">Symbolic Linear Algebra</a>, mentored by Vinzent Steinberg<br/> Sherjil improved the speed of the linear algebra module by using efficient coefficient types for values of entries of matrices. Previously, SymPy used generic expressions in this place, which slowed down computations considerably and caused trouble with solving of the zero equivalence problem. He also implemented sparse matrix representation and unified the API with dense matrices. In addition, Sherjil also added a few linear algebra related algorithms (e.g. Cholesky decomposition).<br/><br/><a href="http://sympystats.wordpress.com/">Matthew Rocklin</a> - <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Matthew-Rocklin%3A-Random-Variables">SymPy Stats: Random Variables</a>, mentored by Andy Terrel<br/> Matthew improved the statistics module to use symbolics and introduced a Random Variable type, with support for finite, continuous, and multivariable normal random variables. With these you can symbolically compute things like probabilities of a given condition, conditional spaces, and expectation values. As a side consequence of this project, he also improved some of our Sets classes and implemented a MatrixExpr class, which allows you to compute with matrices symbolically, including computing with block matrices.<br/><br/><a href="http://seanvig.blogspot.com/">Sean Vig </a>- <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig-Symbolic-Clebsch-Gordon-coefficients%3AWigner-symbols-and-Implementing-Addition-of-Spin-Angular-Momenta">Symbolic Clebsch-Gordon coefficients/Wigner symbols and Implementing Addition of Spin Angular Momenta</a>, mentored by Ondřej Čertík<br/> Sean was working on the quantum mechanics module and has implemented symbolic Clebsch-Gordan coefficients, Wigner D function, and related mathematical concepts that are used very often in quantum physics when dealing with angular momentum and then the necessary classes to support coupled spin algebra.<br/><br/><a href="https://f1728.wordpress.com/">Jeremias Yehdegho</a> - <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Jeremias-Yehdegho%3A-Implementing-F5">Implementing F5</a>, mentored by Mateusz Paprocki<br/> Jeremias worked on implementing algorithms related to <a href="http://en.wikipedia.org/wiki/Groebner_bases">Groebner bases</a>. Groebner bases are a useful tool in many areas of computer algebra. He implemented the F5B algorithm, which is an improved version of the classical Buchberger’s algorithm that was previously implemented in SymPy, and an algorithm for converting Groebner bases between different orders of monomials and worked on applications of Groebner bases. This allowed for handling problems of much larger size in SymPy.<br/><br/>The full report can be found <a href="https://github.com/sympy/sympy/wiki/Gsoc-2011-report">here</a>, where each student wrote a wiki page about their experience during the summer and you can also find their blogs and links to applications. Each student was required to blog about their progress each week and all blogs were synchronized at <a href="http://planet.sympy.org/">planet.sympy.org</a>.<br/><br/>In previous years, there was usually one student from each summer who became a regular contributor and also a mentor for the next year. It has been a rewarding experience for the whole SymPy community.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/2520472460430880330-84564291301844126?l=sympy.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-12-13T00:10:28Z</updated>
    <published>2011-12-13T00:03:00Z</published>
    <author>
      <name>Aaron Meurer</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/07681610358074038422</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-2520472460430880330</id>
      <author>
        <name>Ondřej Čertík</name>
        <email>noreply@blogger.com</email>
        <uri>https://profiles.google.com/104039945248245758823</uri>
      </author>
      <link href="http://sympy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://sympy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/2520472460430880330/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>The Official SymPy Blog</subtitle>
      <title>The Official SymPy Blog</title>
      <updated>2012-06-05T00:51:38Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=193</id>
    <link href="http://dlpeterson.com/blog/?p=193" rel="alternate" type="text/html"/>
    <title>Mode shapes and modal decomposition</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I recently did a lecture in a mechanical vibrations course on mode shapes and modal decomposition. I made a handout for the material to summarize the main ideas.</p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I recently did a lecture in a mechanical vibrations course on mode shapes and modal decomposition.  I made a <a href="http://dlpeterson.com/blog/wp-content/uploads/2011/12/handout.pdf">handout</a> for the material to summarize the main ideas.</p></div>
    </content>
    <updated>2011-12-07T08:55:40Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-12-07T09:00:13Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8510171342300140296.post-7586073962705778071</id>
    <link href="http://seanvig.blogspot.com/feeds/7586073962705778071/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/11/finalizing-arbitrary-spin-coupling.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/7586073962705778071" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/7586073962705778071" rel="self" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/11/finalizing-arbitrary-spin-coupling.html" rel="alternate" type="text/html"/>
    <title>Finalizing arbitrary spin coupling</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">As expected, my work with Sympy slowed drastically once school started, but nevertheless, I have found enough time to polish off the coupling of arbitrary number of spin spaces that I started over the summer. I'll probably wait until after school is done (and the initial Google Code-In traffic dies down) before opening a pull request, but it has neared the state of conclusion, but I will outline the work done on the branch <a href="https://github.com/flacjacket/sympy/tree/multi_coupled">here</a>.<br/><br/>A notable change from the summer is the coupling and uncoupling code is now <i>much</i> cleaner. The old methods used messy <span style="font-family: 'Courier New', Courier, monospace;">while True:</span> loops  which would increment some parameters and check if some end condition was reached, which I found very unsatisfactory and open to some weird use case throwing it into complete disarray. The new methods utilize the notion that any coupling or uncoupling will occur such that there is a well defined change in either the j (in the case of coupling) or m (in the case of uncoupling) values from their maximal values, and this change can be applied over the (un)couplings in the same way you can distribute n balls in m boxes, then it is just matching an integer to a given state and check that the given state is physically feasible.<br/><br/>In addition, I have added all necessary documentation for the new functionality and fixed a few other minor issues with other parts of the new code. I may yet change some of the handling of the j_coupling parameter, but I will reevaluate that when I have more time to look at the code after I finish the semester.<br/><br/>The passing of quantum numbers to define the couplings and un-couplings is still quite verbose, but I see no better way of passing the parameters, hopefully in review someone will see a better way of defining states and couplings.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8510171342300140296-7586073962705778071?l=seanvig.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-11-28T05:58:52Z</updated>
    <published>2011-11-28T05:21:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Sean Vig</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8510171342300140296</id>
      <category term="sympy"/>
      <category term="GSoC"/>
      <author>
        <name>Sean Vig</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://seanvig.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://seanvig.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Developing Wigner-3nj Symbols in SymPy</subtitle>
      <title>Sean Vig's 2011 GSoC Project</title>
      <updated>2012-05-19T05:58:44Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=190</id>
    <link href="http://dlpeterson.com/blog/?p=190" rel="alternate" type="text/html"/>
    <title>Sad</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://dlpeterson.com/blog/wp-content/uploads/2011/11/Screenshot-11252011-082207-PM.png"><img alt="" class="aligncenter size-full wp-image-191" height="359" src="http://dlpeterson.com/blog/wp-content/uploads/2011/11/Screenshot-11252011-082207-PM.png" width="221"/></a></p></div>
    </content>
    <updated>2011-11-26T04:28:29Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-12-07T09:00:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=187</id>
    <link href="http://dlpeterson.com/blog/?p=187" rel="alternate" type="text/html"/>
    <title>Success in court</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I pleaded not guilty to a bicycle stop sign violation in Yolo county today. The judge found there to be reasonable doubt, and I was found not guilty.</p> <p>I was cited for failure to stop at the stop sign while headed eastbound at the intersection of East 8th street and J street, Davis, CA. <span style="color: #777;"> . . . → Read More: <a href="http://dlpeterson.com/blog/?p=187">Success in court</a></span></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I pleaded not guilty to a bicycle stop sign violation in Yolo county today.  The judge found there to be reasonable doubt, and I was found not guilty.</p>
<p>I was cited for failure to stop at the stop sign while headed eastbound at the intersection of East 8th street and J street, Davis, CA.  The citation occurred at 9:05am on a weekday.  The officer stated the indisputable facts of the case, and the key to my argument was that he was on the west side of J street, about 100 feet north of E 8th street, facing south.  I was coming to the intersection from the officers right, but I was in the bike lane next to the cars, so his view of me would be obstructed by automobile traffic had there been any.  I asked him if he recalled there being traffic at the intersection at the time of the incident.  He responded that he didn’t recall there being any.  I asked him also whether he would be able to see through the cars to see whether I stopped.  He responded that he couldn’t testify whether or not he could.  I then presented my case, which is as follows.</p>
<p>I commute by bicycle and pass through this intersection 2-4 times per day.  I know the stop signs are there and I know that I stop for them.  In the particular day in question, I recall there being traffic and being adjacent to cars (on the south side of eastbound traffic) as I approached the intersection.  I recall stopping, as I always do at that intersection.  I disputed the officer’s testimony that he could see me approach the intersection without slowing down and that I went through the intersection without stopping.  I argued that he couldn’t have seen me not stop because there were cars in between him and I.  I also reemphasized that I frequent this intersection a lot and that I always stop.  The officer responded by repeating his original statements but didn’t really add anything new to what he originally testified.  I responded by emphasizing that I know for a fact that there was traffic since it was 9:05am, and that there was no way he could have seen whether or not I stopped from his position, and that I pass through that intersection frequently and always stop.</p>
<p>The judge stated that he found there to be reasonable doubt of my guilt and that since there was no further evidence, I was found not guilty.</p>
<p>So, it was worth making 2 trips to the Yolo courthouse because I saved myself $200 and also avoided points being added to my DMV record.</p></div>
    </content>
    <updated>2011-11-23T22:08:16Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-12-07T09:00:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=177</id>
    <link href="http://dlpeterson.com/blog/?p=177" rel="alternate" type="text/html"/>
    <title>Feynman Lectures Exercise Challenge</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I noticed that the editors/publshers of the revised Feynman Lectures on Physics posted a challenge problem, so I decided to work out a solution. In doing so, I took the time to learn TikZ. The result was a pretty nice (I think) drawing of the pendulum system described in that problem. My solution is <span style="color: #777;"> . . . → Read More: <a href="http://dlpeterson.com/blog/?p=177">Feynman Lectures Exercise Challenge</a></span></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I noticed that the editors/publshers of the revised Feynman Lectures on Physics posted a <a href="http://feynmanlectures.info/forum/index.php?topic=47.0" target="_blank" title="Feynman Lectures Exercise Challenge">challenge problem</a>, so  I decided to work out a solution.  In doing so, I took the time to learn <a href="http://www.texample.net/tikz/" target="_blank" title="TikZ">TikZ</a>.  The result was a pretty nice (I think) drawing of the pendulum system described in that problem.  My solution is available <a href="http://dlpeterson.com/FLP_Exercise_Challenge/solution.pdf" target="_blank" title="Solution to Feynman Lectures Exercise Challenge">here</a>.</p></div>
    </content>
    <updated>2011-11-14T10:17:06Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-12-07T09:00:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=1128</id>
    <link href="http://fseoane.net/blog/2011/low-rank-approximation/" rel="alternate" type="text/html"/>
    <title>Low rank approximation</title>
    <summary>A little experiment to see what low rank approximation looks like. These are the best rank-k approximations (in the Frobenius norm) to the a natural image for increasing values of k and an original image of rank 512. Python code can be found here. GIF animation made using ImageMagic’s convert script.</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>A little experiment to see what low rank approximation looks like. These are the best rank-k approximations (in the Frobenius norm) to the a natural image for increasing values of k and an original image of rank 512.</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/11/animation1.gif"><img alt="" class="aligncenter size-full wp-image-1156" height="400" src="http://fseoane.net/blog/wp-content/uploads/2011/11/animation1.gif" title="Low-rank approximation for the Lena Image" width="600"/></a></p>
<p>Python code can be found <a href="https://gist.github.com/1342033">here</a>. GIF animation made using ImageMagic’s convert script.</p></div>
    </content>
    <updated>2011-11-06T10:05:09Z</updated>
    <category term="General"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2012-05-14T23:00:10Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8814696591561172392.post-7396657487035470347</id>
    <link href="http://vperic.blogspot.com/feeds/7396657487035470347/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://vperic.blogspot.com/2011/11/gsoc-final-report.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/7396657487035470347" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/7396657487035470347" rel="self" type="application/atom+xml"/>
    <link href="http://vperic.blogspot.com/2011/11/gsoc-final-report.html" rel="alternate" type="text/html"/>
    <title>GSoC: Final Report</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><span style="font-size: large;"><b>Introduction</b></span><br/><br/>My project, officially named just "Porting to Python 3", is actually divided into two separate (albeit mutually complimentary) parts: my first goal was to set up a testing framework, to ensure continuous testing of SymPy across different versions of Python. SymPy used to have a server that ran buildbot, but it stopped working some time ago. This was to provide a solid base for working on my main project, making the code Python 3 compatible. As this was to be done with a single code-base, I estimated (correctly) that these could lead to subtle incompatibilities between various Python versions. Time permitting, I also intended to leverage this framework and my knowledge to get SymPy compatible with PyPy, too. The original application can be seen at the SymPy Wiki, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application%3A-Vladimir-Peri%C4%87%3A-Porting-to-Python-3">here</a>. More details about my progress can also be found in <a href="http://vperic.blogspot.com/">my blog</a>.<br/><br/><span style="font-size: large;"><b>Testing framework</b></span><br/><br/>As mentioned above, SymPy used to use buildbot, so this was my first choice. I also read about Tox, a tool that is written for the sole purpose of testing Python programs under various conditions (different interpreters, presence or lack of certain dependencies), which also provides good integration with Jenkins, a well known server for continuous integration. My initial thoughts on this are in <a href="http://vperic.blogspot.com/2011/05/continuous-integration-and-sympy.html">one of my first blog posts</a>, where I had decided to use Tox and then later try to integrate it with Jenkins, to form a fully functioning CI server. While Tox was immediately useful (here's <a href="http://vperic.blogspot.com/2011/06/setting-up-and-using-tox-in-sympy.html">a post on setting up and using it</a>), the integration with Jenkins proved to be more arduous than my initial tests showed. In retrospect, perhaps I should have given buildbot a more thorough look later, rather than eliminate it so early. Furthermore, while I saw Tox as a great tool, the uptake among other developers has been.. less than stellar (other than Aaron, I'm not aware of anyone using it regularly).<br/><br/>Fortunately, parallel to me setting up Tox/Jenkins, work was progressing on <a href="https://github.com/sympy/sympy-bot">sympy-bot</a>. The main need for continuous integration came from a desire to review all pull requests and test them for errors - while bigger companies and projects might need real CI, all of SymPy's code gets in through the GitHub pull request system, so theoretically it should be enough to just thoroughly test every pull request; sympy-bot was developed with this purpose in mind. Designed to be ran manually, it still has the basic functionality which I couldn't manage to replicate in Jenkins: run the test suite and post the results back. Work on it has also quickened somewhat in the last couple of months, and <i>I now consider further development of sympy-bot a better idea than working more with Jenkins.</i><br/><br/><span style="font-size: large;"><b>Python 3 porting</b></span><br/><br/>Even with the relative failure of setting up a robust testing framework, my main project was also progressing. Due to the nature of the issue, progress was somewhat sporadic and didn't proceed at a steady pace. This was particularly apparent during the start - I was simply stumped by some of the errors I was getting and couldn't get around them; once I made a key breakthrough, I was quickly able to get SymPy importable under Python 3, though this only happened <a href="http://vperic.blogspot.com/2011/06/gsoc-week-5-sympy-now-runs-in-python-3.html">by week five</a>. The rest of my summer was spent hunting down the remaining errors, which was interesting at first but got very tiresome by the end. In fact, at the end Mateusz had to step in and fix the remaining few failures as I simply couldn't bring myself to look at them <i>yet again</i>. Thanks Mateusz! [Mateusz also did a lot of work on improving PyPy support, something for which I simply didn't find the time, so double thanks to Mateusz!]<br/><br/>One issue that arose early during the porting process was the (un)bundling of libraries with SymPy. SymPy bundled Pyglet and mpmath. Bundling the first was probably a bad idea at the start, and it was finally removed by Stefan Krastanov sometime early in the summer to unanimous approval. Unbundling mpmath was a more contentious issue, it sparked <a href="https://code.google.com/p/sympy/issues/detail?id=2482">a very lively discussion on the issue tracker</a>. I won't rephrase it here, but in the end it was decided <b>not</b> to unbudle it. This meant that I had to write a custom tool to handle calling 2to3: we needed to avoid calling it on the mpmath/ directories, because mpmath is already py3k compatible (and running 2to3 on such code produces bad code).<br/><br/>It was ultimately decided that this tool will live in bin/use2to3 and work by creating a Python 3-compatible version of the source code in a py3k-sympy/ subdirectory (originally sympy-py3k/ but that interfered too much with tab-completion!), from which SymPy could then be ran normally under Python 3. While I initially had misgivings about the script, I now think it's quite powerful. It's not the most ideal solution, but it does work and was the last missing link in seamless Python 3 support (eg. it also corrects shebangs and fixes some whitespace issues caused by 2to3).<br/><br/><b><span style="font-size: large;">Conclusion</span></b><br/><br/>Officially, my project was a success, but I really couldn't have done it without the help of other developers working on SymPy, in particular Ronan, Aaron and Mateusz. Beyond the GSoC period, I've got every intention to continue working with SymPy, as I think I've already shown with the few pull requests I've submitted since; I have also decided to take a more active role in helping with the <a href="https://github.com/sympy/sympy/wiki/GCI-2011-Organization-Application">Google Code-In project</a> (assuming SymPy is accepted). As for my project, I intend to focus more on the infrastructure needed to support SymPy, rather than the math issues. Still, as my knowledge of math and SymPy internals increases, I'm sure I'll find other places to contribute as well.<br/><br/>To future GSoC students, I suggest maintaining good communication links and trying to be involved with the project as much as possible. Good communication with the core developers and general awareness of the current state of SymPy helped me a lot. While this was arguably more important for my project than others, at least <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig-Symbolic-Clebsch-Gordon-coefficients%3AWigner-symbols-and-Implementing-Addition-of-Spin-Angular-Momenta">Sean Vig</a> has also expressed regret at not being more involved. The second most important bit of advice is to try and split your work into multiple pull requests and try to get them merged as fast as possible. SymPy has a very rapid pace of development, and as such it is <i>always</i> better to integrate sooner rather than later. This ties in to making good, atomic commits, but means more than that: your work should be clearly separated into small, logical chunks (&lt;= 20 commits is my suggestion). A lot of the work done this summer has still to be integrated, or there were many troubles getting it finally in (eg. the physics.mechanics module). Finally, try to budget a lot of extra time in your project application - most of us are not experienced developers and cannot estimate the amount of work needed for something correctly. Plus, when some additional problems arise (and they <i>will</i>), it's always better to have time set aside to deal with them.<br/> </div><div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8814696591561172392-7396657487035470347?l=vperic.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-10-31T23:02:24Z</updated>
    <published>2011-10-31T23:02:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="SymPy"/>
    <author>
      <name>Vladimir Perić</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8814696591561172392</id>
      <category term="SymPy"/>
      <category term="Tox"/>
      <author>
        <name>Vladimir Perić</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://vperic.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8814696591561172392/posts/default/-/SymPy" rel="self" type="application/atom+xml"/>
      <link href="http://vperic.blogspot.com/search/label/SymPy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Vlada's SymPy Blog</title>
      <updated>2012-05-16T23:31:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=175</id>
    <link href="http://dlpeterson.com/blog/?p=175" rel="alternate" type="text/html"/>
    <title>The price of a single stitch</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>About 2 months ago on a Saturday evening, I was working on my bike and cut the middle joint of my index finger. The cut was deep enough, and the hacksaw was dirty enough, that I knew that I needed get it looked by a doctor. I looked up my health benefits on my <span style="color: #777;"> . . . → Read More: <a href="http://dlpeterson.com/blog/?p=175">The price of a single stitch</a></span></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>About 2 months ago on a Saturday evening, I was working on my bike and cut the middle joint of my index finger.  The cut was deep enough, and the hacksaw was dirty enough, that I knew that I needed get it looked by a doctor.  I looked up my health benefits on my insurance card and tried to find a clinic that was open at 9pm on a Saturday night.  Nothing was open anywhere.  So, my options were to wait until Monday, or go to the ER.  I choose to go to the ER.  They weren’t busy and I was in and out in less than 45 minutes.  They cleaned the wound and put a single stitch in it, then put a bit of neosporin on it and put a band aid on it.</p>
<p>The total cost?  $1060.71.  Seriously?  Luckily I am insured, and I am only responsible for $100 of that.  I don’t know what the cost would have been if I had gone to a clinic during normal business hours (8am-5pm on a weekday).  </p>
<p>If I didn’t have insurance, would I have gone?  I don’t think so.  With national unemployment at 9.1% it is a safe bet that at least 1 in 10, probably 1 in 5, either don’t have health insurance or have insurance that wouldn’t cover enough for them to be able to afford such a trip to the hospital to get a relatively minor finger injury taken care of properly.  So 1 in 5 wouldn’t get such a serious injury taken care of.  Imagine if it were a more serious injury.  This system is broken.</p></div>
    </content>
    <updated>2011-10-30T18:26:18Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-12-07T09:00:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=1062</id>
    <link href="http://fseoane.net/blog/2011/qr_multiply-function-in-scipy-linalg/" rel="alternate" type="text/html"/>
    <title>qr_multiply function in scipy.linalg</title>
    <summary>In scipy’s development version there’s a new function closely related to the QR-decomposition of a matrix and to the least-squares solution of a linear system. What this function does is to compute the QR-decomposition of a matrix and then multiply the resulting orthogonal factor by another arbitrary matrix. In pseudocode: def qr_multiply(X, Y):     [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In scipy’s development version there’s a new function closely related to the <a href="http://en.wikipedia.org/wiki/QR_decomposition">QR-decomposition</a> of a matrix and to the least-squares solution of a linear system.</p>
<p>What this function does is to compute the QR-decomposition of a matrix and then multiply the resulting orthogonal factor by another arbitrary matrix. In pseudocode:</p>
<div class="codecolorer-container python default" style="overflow: auto; white-space: nowrap; width: 435px;"><div class="python codecolorer" style=""><span style="color: #ff7700; font-weight: bold;">def</span> qr_multiply<span style="color: black;">(</span>X, Y<span style="color: black;">)</span>:<br/>
    Q, R = qr<span style="color: black;">(</span>X<span style="color: black;">)</span><br/>
    <span style="color: #ff7700; font-weight: bold;">return</span> dot<span style="color: black;">(</span>Q.<span style="color: black;">T</span>, Y<span style="color: black;">)</span></div></div>
<p>but unlike this naive implementation, <code>qr_multiply</code> is able to do all this <b>without</b> explicitly computing the orthogonal Q matrix, resulting both in memory and time saving. In the following picture I measured the memory consumption as a function of time of running this computation on a 1.000 x 1.000 matrix X and a vector Y (full code can be found <a href="https://gist.github.com/1287168">here</a>):</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/10/qr_multiply1.png"><img alt="" class="aligncenter size-medium wp-image-1076" height="225" src="http://fseoane.net/blog/wp-content/uploads/2011/10/qr_multiply1-300x225.png" title="Memory usage for a QR multiplication" width="300"/></a></p>
<p>It can be seen that not only <code>qr_multiply</code> is almost twice as fast as the naive approach, but also that the memory consumption is significantly reduced, since the orthogonal factor is never explicitly computed.</p>
<p>Credit for implementing the qr_multiply function goes to <a href="https://github.com/tecki">Martin Teichmann</a>. </p></div>
    </content>
    <updated>2011-10-14T14:44:10Z</updated>
    <category term="Python"/>
    <category term="scipy"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2012-05-14T23:00:10Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://dlpeterson.com/blog/?p=172</id>
    <link href="http://dlpeterson.com/blog/?p=172" rel="alternate" type="text/html"/>
    <title>Matlab function syntax is abysmal</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today I was helping some undergraduates in a mechanical vibrations course to use ode45. The way you specify the right hand side of the ode’s must fit Matlab’s particular form (using an @ before the function name, which must be contained in a file of the same name, with a ‘.m’ extension). Looking at <span style="color: #777;"> . . . → Read More: <a href="http://dlpeterson.com/blog/?p=172">Matlab function syntax is abysmal</a></span></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today I was helping some undergraduates in a mechanical vibrations course to use ode45.  The way you specify the right hand side of the ode’s must fit Matlab’s particular form (using an @ before the function name, which must be contained in a file of the same name, with a ‘.m’ extension).  Looking at the documentation, I found this gem that really made me want to suck start a shotgun:<br/>
<code><br/>
One way to provide additional parameters to a functional argument of a function function is to write a file that:<br/>
  -- Accepts the additional parameters as inputs<br/>
  -- Invokes the function function<br/>
  -- Contains the function called by the function function as a nested function<br/>
</code><br/>
That last one is a real doozy.  Try saying that 5 times real fast, then explain what the hell it means to an undergrad.  I’d rather explain what a pointer to pointer to char is, personally.</p></div>
    </content>
    <updated>2011-10-12T00:40:14Z</updated>
    <category term="Uncategorized"/>
    <author>
      <name>luke</name>
    </author>
    <source>
      <id>http://dlpeterson.com/blog</id>
      <link href="http://dlpeterson.com/blog/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="http://dlpeterson.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Mechanical Engineering PhD. candidate, UC Davis</subtitle>
      <title>Dale Peterson</title>
      <updated>2011-12-07T09:00:13Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=1048</id>
    <link href="http://fseoane.net/blog/2011/scikit-learn-0-9/" rel="alternate" type="text/html"/>
    <title>scikit-learn 0.9</title>
    <summary>Last week we released a new version of scikit-learn. The Changelog is particularly impressive, yet personally this release is important for other reasons. This will probably be my last release as a paid engineer. I’m starting a PhD next month, and although I plan to continue contributing to the project and make a few more [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Last week we released a new version of scikit-learn. The <a href="http://scikit-learn.sourceforge.net/stable/whats_new.html">Changelog is particularly impressive</a>, yet personally this release is important for other reasons. </p>
<p>This will probably be my last release as a paid engineer. I’m starting a PhD next month, and although I plan to continue contributing to the project and make a few more releases, I will certainly have less time to devote to it. Luckily, I received a lot of help from the community while preparing the release, from Changelog writing to build of Windows binaries, thus I expect the transition to go smoothly.</p>
<p>Almost two years have elapsed since the first 0.1 release. During this time, we did a lot of refactoring and broke the API several times. However, I’ve seen some concerns about API stability both at the EuroScipy conference and in the mailing list where I’ve realized we need to provide an API that does not break in every release, and do this in a way that the project remains fun for developers.</p>
<p> That’s why I’m extremely glad to see that although this release is big in changes, these have been made in a more organized manner. Yes, we’ve broken the API once again, but now there’s a compatibility layer that ensures that code written for 0.8 will continue working with the new release. </p></div>
    </content>
    <updated>2011-10-02T09:19:57Z</updated>
    <category term="General"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2012-05-14T23:00:09Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=1017</id>
    <link href="http://fseoane.net/blog/2011/reworked-example-gallery-for-scikit-learn/" rel="alternate" type="text/html"/>
    <title>Reworked example gallery for scikit-learn</title>
    <summary>I’ve been working lately in improving the scikit-learn example gallery to show also a small thumbnail of the plotted result. Here is what the gallery looks like now And the real thing should be already displayed in the development documentation. The next thing is to add a static image to those that don’t generate any [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been working lately in improving the scikit-learn example gallery to show also a small thumbnail of the plotted result. Here is what the gallery looks like now</p>
<p><a href="http://scikit-learn.sourceforge.net/dev/auto_examples/index.html"><img alt="" src="http://fseoane.net/blog/wp-content/uploads/2011/09/Screenshot-Examples-&#x2014;-scikit-learn-v0.9-git-documentation-Google-Chrome.png" title="Screenshot-Examples" width="600"/></a></p>
<p><br/></p>
<p>And the real thing should be already displayed in the <a href="http://scikit-learn.sourceforge.net/dev/auto_examples/index.html">development documentation</a>. The next thing is to add a static image to those that don’t generate any result, examples such as the <a href="http://scikit-learn.sourceforge.net/dev/auto_examples/applications/svm_gui.html">SVM GUI</a> should have an image to display.</p></div>
    </content>
    <updated>2011-09-04T18:09:02Z</updated>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2012-05-14T23:00:10Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=999</id>
    <link href="http://fseoane.net/blog/2011/scikit-learn%e2%80%99s-euroscipy-2011-coding-sprint-day-two/" rel="alternate" type="text/html"/>
    <title>scikit-learn’s EuroScipy 2011 coding sprint — day two</title>
    <summary>Today’s coding sprint was a bit more crowded, with some notable scipy hackers such as Ralph Gommers, Stefan van der Walt, David Cournapeau or Fernando Perez from Ipython joining in. On what got done: – We merged Jake‘s new BallTree code. This is a pure Cython implementation of a nearest-neighbor search similar to the KDTree [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/all.jpg"><img alt="" class="aligncenter size-medium wp-image-1001" height="225" src="http://fseoane.net/blog/wp-content/uploads/2011/08/all-300x225.jpg" title="scikit-learn coding sprint" width="300"/></a></p>
<p>Today’s coding sprint was a bit more crowded, with some notable scipy hackers such as Ralph Gommers, <a href="http://mentat.za.net/">Stefan van der Walt</a>, <a href="http://cournape.wordpress.com/">David Cournapeau</a> or <a href="http://blog.fperez.org/">Fernando Perez</a> from Ipython joining in. On what got done:</p>
<p>  – We merged <a href="http://www.astro.washington.edu/users/vanderplas/">Jake</a>‘s new BallTree code. This is a pure Cython implementation of a nearest-neighbor search similar to the KDTree class in scipy.spatial, but much faster. The code looks awesome and it’s a big speedup compared to the older code.</p>
<p>  – Vlad is ready to merge his<a href="https://github.com/scikit-learn/scikit-learn/pull/221"> dictionary learning code</a>, something that should happen in the upcoming days.</p>
<p>  – Initial support for Python 3. scikit-learn should now at least build and import cleanly under Python 3.</p>
<p>  – some bugfixes in the Pipeline object and in docstrings.</p>
<p>So this was the end of the scikit-learn sprint, but EuroScipy has just begun. See you tomorrow at the conference (follow the signs)!</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0093.jpg"><img alt="" class="alignleft size-medium wp-image-1003" height="300" src="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0093-202x300.jpg" title="IMG_0093" width="202"/></a></p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0092.jpg"><img alt="" class="alignleft size-medium wp-image-1004" height="300" src="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0092-189x300.jpg" title="yannick" width="189"/></a></p>
<div style="clear: both;">
–
</div></div>
    </content>
    <updated>2011-08-24T22:33:10Z</updated>
    <category term="General"/>
    <category term="Python"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2012-05-14T23:00:09Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://fseoane.net/blog/?p=974</id>
    <link href="http://fseoane.net/blog/2011/scikit-learns-euroscipy-2011-coding-sprint-day-one/" rel="alternate" type="text/html"/>
    <title>scikit-learn’s EuroScipy 2011 coding sprint  — day one</title>
    <summary>As a warm-up for the upcoming EuroScipy conference, some of the scikit-learn developers decided to gather and work together for a couple of days. Today was the first day and there was only a handfull of us, as the real kickoff is expected tomorrow. Some interesting coding happened, although most of us where still preparing [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As a warm-up for the upcoming <a href="http://www.euroscipy.org/conference/euroscipy2011">EuroScipy conference</a>, some of the <a href="http://scikit-learn.sf.net">scikit-learn</a> developers decided to gather and work together for a couple of days.</p>
<p>Today was the first day and there was only a handfull of us, as the real kickoff is expected tomorrow. Some interesting coding happened, although most of us where still preparing material for the EuroScipy tutorials …</p>
<p>    – API changes: remove of keyword parameters to <i>fit</i> method, added method <i>set_params</i>  (<a href="https://github.com/scikit-learn/scikit-learn/pull/306">pull request</a>).</p>
<p>    – Some bugfixing in NuSVR (<a href="https://github.com/scikit-learn/scikit-learn/pull/315">pull request</a>)</p>
<p>    – Review of <a href="http://vene.ro">Vlad</a>‘s code, developed during his Summer of Code program.</p>
<p>    – A lot of discussion about algorithm, code, APIs and buildbot dance !</p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0076.jpg"><img alt="" class="alignleft size-thumbnail wp-image-977" height="150" src="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0076-150x150.jpg" title="varokoo" width="150"/></a></p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-3.png"><img alt="" class="alignleft size-thumbnail wp-image-979" height="150" src="http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-3-150x150.png" title="Olivier Grisel" width="150"/></a></p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0074.jpg"><img alt="" class="alignleft size-thumbnail wp-image-982" height="150" src="http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0074-150x150.jpg" title="Vlad" width="150"/></a></p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-5.png"><img alt="" class="alignleft size-thumbnail wp-image-986" height="150" src="http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-5-150x150.png" title="Me and Jean" width="150"/></a></p>
<p><a href="http://fseoane.net/blog/wp-content/uploads/2011/08/emanuelle.jpg"><img alt="" class="alignleft size-thumbnail wp-image-990" height="150" src="http://fseoane.net/blog/wp-content/uploads/2011/08/emanuelle-150x150.jpg" title="emanuelle" width="150"/></a></p>
<div style="clear: both;">
–
</div></div>
    </content>
    <updated>2011-08-23T19:38:09Z</updated>
    <category term="General"/>
    <category term="scikit-learn"/>
    <author>
      <name>fabian</name>
    </author>
    <source>
      <id>http://fseoane.net/blog</id>
      <link href="http://fseoane.net/blog/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://fseoane.net/blog" rel="alternate" type="text/html"/>
      <subtitle>mostly about programming, machine learning and such</subtitle>
      <title>I say things</title>
      <updated>2012-05-14T23:00:09Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8510171342300140296.post-4221049810717497721</id>
    <link href="http://seanvig.blogspot.com/feeds/4221049810717497721/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/08/finishing-gsoc.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/4221049810717497721" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/4221049810717497721" rel="self" type="application/atom+xml"/>
    <link href="http://seanvig.blogspot.com/2011/08/finishing-gsoc.html" rel="alternate" type="text/html"/>
    <title>Finishing GSoC</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So this is the last week of the GSoC program. I'll be writing up a full report on what I've done over the summer <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig">here</a> and it will be updated over this next week. This blog post will be recapping this last week of progress and looking forward past the GSoC.<br/><br/>The main thing to report with this last week was the finishing the work on the spin coupling work that was laid out last week and the writing of the code for Coupled spin states, the last pull request I'll get in during the GSoC project is currently open and should only need a last bit of code review to get pulled.<br/><br/>The main thing now is moving beyond the work that will be done during the GSoC project. While I'll be starting classes this next week and I have my qual the next week, so work will definitely slow down. However, this last week, I worked on the multi_coupling branch, which takes the coupling work that is in the current pull and expands it to allow for an arbitrary number of spin bases. The first thing to implement with this was a means of representing the coupling between the spin bases, since the order in which spaces are coupled matters. To do this, I added a jcoupling option to the functions that deal with coupled states. It currently seems pretty messy, but I'm not sure of a better way to do it, as coupling multiple spaces will just pick up a bunch of additional quantum numbers that need to be represented somehow. Basically, this parameter is passed as a list of lists, where each element of the outermost list represents a coupling between two spin spaces. These inner lists have 3 elements, 2 giving the number of the space that is being coupled and the third being the j value of these spaces coupled together. For example, if we wanted to represent a state |j,m,j1,j2,(j12),j3&gt;, the jcoupling would be ( (1,2,j12), ). If this option is not set, then the methods default to coupling the spaces in numerical order, i.e. 1 and 2, then 1,2 and 3, etc. Using this, I have been able to rewrite the uncouple code. The results do not yet have tests, and I'll definitely need to do some calculations by hand to make sure this is working properly, but looking at it, I am pretty confident in the results, tho the code could use some cleaning up.<br/><br/>Moving forward from this would be to get the couple method working with arbitrary spin spaces and run through all of the functions that deal with spin coupling and make sure nothing is still hard coded to use two spin bases. Other than that, the project that I'd set out to work on has been basically completed. I'll continue to work with and develop sympy when I have some spare and hopefully continue to add features and functionality to the quantum module.<div class="blogger-post-footer"><img alt="" height="1" src="https://blogger.googleusercontent.com/tracker/8510171342300140296-4221049810717497721?l=seanvig.blogspot.com" width="1"/></div></div>
    </content>
    <updated>2011-08-20T04:37:48Z</updated>
    <published>2011-08-20T04:37:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="GSoC"/>
    <author>
      <name>Sean Vig</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8510171342300140296</id>
      <category term="sympy"/>
      <category term="GSoC"/>
      <author>
        <name>Sean Vig</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://seanvig.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8510171342300140296/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://seanvig.blogspot.com/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>Developing Wigner-3nj Symbols in SymPy</subtitle>
      <title>Sean Vig's 2011 GSoC Project</title>
      <updated>2012-05-19T05:58:44Z</updated>
    </source>
  </entry>
</feed>
