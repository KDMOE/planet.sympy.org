<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://planet.sympy.org/">
	<title>Planet SymPy</title>
	<link>http://planet.sympy.org/</link>
	<description>Planet SymPy - http://planet.sympy.org/</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=220" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/07/02/gsoc-week-6" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=169" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=245" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/2012/06/30/gsoc-2012-post-7-22/" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=409" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=165" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=162" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=382" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=147" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/06/24/gsoc-week-5" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/?p=217" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=130" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=336" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=200" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/2012/06/16/gsoc-2012-post-5-35/" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=186" />
			<rdf:li rdf:resource="https://asmeurersympy.wordpress.com/?p=1109" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=115" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=119" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=151" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/06/09/gsoc-week-3" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/?p=94" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=67" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=34" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=333" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/06/03/gsoc-week-2" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=25" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=116" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/2012/06/02/gsoc-2012-post-3-4/" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/2012/06/02/the-prologue-37/" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=307" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=9" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/05/26/adaptive-sampling-for-2d-plots" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/2012/05/26/gsoc-2012-post-2-18/" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=76" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=26" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=16" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/05/14/region-plots-with-interval-arithmetic" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=298" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/?p=7" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=4" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=1" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/05/08/gsoc-2012-sympy" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-2520472460430880330.post-1283583601392089559" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/2012/04/27/gsoc-2012-with-sympy-in-the-nearest-future-9/" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=1" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/2012/04/24/selected-for-gsoc-2012/" />
			<rdf:li rdf:resource="http://fseoane.net/blog/?p=1164" />
			<rdf:li rdf:resource="http://wdjoyner.wordpress.com/?p=369" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=1" />
			<rdf:li rdf:resource="http://sympystats.wordpress.com/?p=257" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-2520472460430880330.post-798629723236480051" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8814696591561172392.post-4829631852742579231" />
			<rdf:li rdf:resource="http://sympystats.wordpress.com/?p=241" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-6568744196982634289.post-7881611169286097799" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8510171342300140296.post-5238790680519906319" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1077" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1070" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1068" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="http://scolobb.wordpress.com/?p=220">
	<title>Sergiu Ivanov: The Layout</title>
	<link>http://scolobb.wordpress.com/2012/07/02/the-layout/</link>
	<content:encoded>&lt;p&gt;I haven’t posted in quite some time, because I have been totally absorbed by implementing the functionality to lay out diagrams.  I am painfully close to having finished it; however, I’ve been that close to it for a couple days already, and that’s something which drives me crazy &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;OK, it’s time to take a general look over what has been done.  In the end, I will describe my short-term further plans a bit.&lt;/p&gt;
&lt;p&gt;First of all, the goal.  When you want to lay out a (commutative) diagram, you should really aim at grid layout.  This is how people normally typeset diagrams in articles, and this is the thing the semblance of which I would be happy to achieve.  The resulting grid layout is one of the traits of diagrams which make the task of automatically drawing them different from the task of automatically drawing a graph.  The other specific feature is that, when you get a diagram, you can (and you should) actually throw away those morphisms which are not really interesting.  In the following sections, I will try to describe the philosophy behind the functionality I have implemented, for each bit in part.&lt;/p&gt;
&lt;p&gt;The first stage of the algorithm is to remove the &lt;b&gt;uninteresting morphisms&lt;/b&gt;.  At this stage, those composite morphisms which have no properties are discarded; identity morphisms without properties are discarded as well.  In fact, this corresponds pretty well to how people draw diagrams.  This first stage ends by merging the premises and the conclusions of the diagram into a single container.  This is because, at drawing, the distinction between premises and conclusions is not important at all, since all interesting morphisms should make their way into the final picture.&lt;/p&gt;
&lt;p&gt;At the second stage, the algorithm abstracts morphisms away, in favour of unoriented edges between objects.  The code builds the so-called &lt;b&gt;skeleton&lt;/b&gt; of the diagram (that’s an ad-hoc name).  The skeleton is a graph which has all objects of the diagram as vertices.  Between two vertices of the skeleton there is an &lt;em&gt;undirected&lt;/em&gt; edge, if these objects are connected by an (interesting) morphism.  Notice how we discard the direction of the connection.  After all edges corresponding to morphisms have been added, the skeleton is further completed in the following way.  An edge is added between any two objects &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C&quot; class=&quot;latex&quot; title=&quot;C&quot; /&gt; for which there exists and object &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; are connected with an interesting morphism and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C&quot; class=&quot;latex&quot; title=&quot;C&quot; /&gt; are connected with an interesting morphism.  This is &lt;em&gt;not&lt;/em&gt; the transitive closure of the graph, it is only the first step of it.  The new edges are dummy edges, in the sense that they may not correspond to interesting morphisms.&lt;/p&gt;
&lt;p&gt;The next stage is the first key stage of the algorithm.  The skeleton is tesselated into triangles, which will eventually be used to get as many right angles in the layout as possible.  Here is when the dummy edges come into play.  Their presence assures that the diagram can be completely split into triangles.  For those who have read my &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;proposal&lt;/a&gt;, I will remark that all the stages of diagram analysis I described &lt;em&gt;after&lt;/em&gt; laying out the triangles are actually unnecessary, namely because of these dummy edges, which guarantee that we have sufficiently many triangles.  Yet, dummy edges are indeed dummy, in the sense that most of them will not appear in the final diagram.  This makes the triangles we find in the skeleton unevenly interesting to us.  Triangles which have more than one dummy edge are totally extra, because they would distract the attention of the code from  triangles with more meaningful edges and would mess things up, generally.  Therefore, such triangles are immediately dropped.&lt;/p&gt;
&lt;p&gt;Once the “triangulating” stage is complete, the core of the algorithm comes into play.  Basically, the idea is to pick one of the triangles, pick one of its edges and put it on a grid, horizontally, remembering that it is in the fringe.  Then, iteratively, “&lt;b&gt;weld&lt;/b&gt;” interesting triangles to the fringe, eventually placing all objects of the diagram on the grid.  This part is the trickiest part of the whole algorithm, so prepare to hear a talk about a lot of magic &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  &lt;/p&gt;
&lt;p&gt;Any triangle is placed on the grid as a right-angled triangle, with the perpendicular edges being horizontal and vertical.  This assures that we keep “quite” close to the desired grid layout.  Whenever a triangle is placed on the grid, the objects which form its vertices are recorded as already placed.  Then, those triangles which only contain objects which have already been placed (uninteresting triangles) are dropped.  That is, once the places of some objects are decided, those objects are never considered again.  This may constitute a point of future improvement, of course, because objects are often drawn in several copies to make the diagram look clearer.&lt;/p&gt;
&lt;p&gt;When placing the triangle on the grid, the code attempts to assure that as many interesting (not dummy) edges as possible will be drawn horizontally or vertically.  There is some dark magic in the code which detects such situations, but I hope that after following the trail of comments and just reading the code itself, the whole thing should become rather clear.&lt;/p&gt;
&lt;p&gt;Now, since the algorithm is essentially greedy, there can be situations when all edges to which the remaining triangles could have been welded, have already been positioned inside the structure and it is now impossible to find the welding edge.  In this case, the algorithm attempts to attach a triangle to the existing structure by a vertex only.  If such a possibility is found, an edge (the &lt;b&gt;pseudopod&lt;/b&gt;) of the triangle is placed as vertically (or horizontally) as possible and then the welding process can be continued, since there already is a welding edge.&lt;/p&gt;
&lt;p&gt;Let’s now focus on what happens to the fringe.  When a new triangle is welded, the two new edges are added to the fringe.  No edges are deleted however, because the welding edge might still have some free space to its other part.  Edges are deleted from the fringe only when they are detected as possible welding edges, but when the algorithm finds that there is no space around them actually.  I have considered several possibilities of correcting the fringe on different occasions; my conclusions so far have been that it’s not generally worth it, performance-wise.  This question however should be better investigated, including doing some complexity analysis.&lt;/p&gt;
&lt;p&gt;You might have noticed that I do not in any way treat the situation when a pseudopod cannot be grown.  I have not encountered such situations during the testing yet, so I decided not to attempt to handle them before I have actually seen an example.  Taking into consideration that I am going to work with diagrams rather intensively later, if such situations are possible, I will indeed run into them.  I must confess that I haven’t considered the problem theoretically yet, though &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;The description of the essential parts of the algorithm is complete here, so I’m passing over to the overview of the remaining problems and further short-term plans.&lt;/p&gt;
&lt;p&gt;Tom Bachmann, my mentor, has suggested that I describe the steps of the algorithm in the docs which come with the source code.  I will do this shortly.  I believe it is essential to write such documentation as soon as possible, despite the abundant (hopefully) comments in the code.&lt;/p&gt;
&lt;p&gt;My immediately next task is, however, producing the actual &lt;a href=&quot;http://www.tug.org/applications/Xy-pic/&quot;&gt;Xy-pic&lt;/a&gt; code.  I expect that getting this done at a basic level shouldn’t be hard.  However, drawing longer morphisms and avoiding intersections for as much as possible may prove a rather hard task to achieve.&lt;/p&gt;
&lt;p&gt;Oh, and the almost forgotten conclusion: I now essentially have the core of the automatic diagram plotting functionality, since laying out objects is the most difficult part of the affair.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/220/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/220/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/220/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/220/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/220/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/220/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/220/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/220/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/220/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/220/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/220/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/220/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/220/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/220/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=220&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-02T20:42:12+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/07/02/gsoc-week-6">
	<title>Bharath M R: GSoC Week 6</title>
	<link>http://catchmrbharath.github.com/programming/2012/07/02/gsoc-week-6</link>
	<content:encoded>&lt;p&gt;I have been trying to improve the implicit plotting module during this week. But I have hit a road block. I almost ran out of ideas to solve the problem.&lt;/p&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;p&gt;The implicit plotting algorithm I implemented works something like below:&lt;/p&gt;

&lt;p&gt;1) Get x and y interval. If it satisfies the expression throughout the interval, then plot it.&lt;/p&gt;

&lt;p&gt;2) If it does not satisfy, throw away the intervals.&lt;/p&gt;

&lt;p&gt;3) If it partially satisfies, then recursively subdivide into four intervals, and try again.&lt;/p&gt;

&lt;p&gt;For cases of equality, the first point never holds true due to floating point errors. So we go on eliminating regions, and after a certain depth, plot the remaining region. These are the regions where there is at least one solution. This is the reason why the plots are rasterized. But there is an inherent bigger problem here. In the cases of expressions like $x^{3}$ even if the x interval is small, the resulting interval after computation will be large. Sometimes, due to these large intervals, there might be lots of y and x intervals which satisfy because of these errors. Even if we make x interval really small, the corresponding y interval will be large, ie the line widths become large. The explanation is more of a guess rather than the right explanation.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;Plot of $x^{y}=y^{x}$ &lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/02072012/fig1.png&quot; height=&quot;400&quot; /&gt; Even if I increase my depth of recursion to higher values, the thickness becomes less, but doesn’t vanish. The plot actually should have been two separate curves.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/02072012/fig3.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;The Mac OSX’s Grapher uses a similar algorithm(A guess because they have similar rasterization) but takes care of the line widths.&lt;/p&gt;

&lt;p&gt;If you feel you know where the problem is, please comment or email me. :)&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-02T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=169">
	<title>Guru Devanla: Week 6 : Tr implementation contd…</title>
	<link>http://rhoforsympy.wordpress.com/2012/07/01/week-6-tr-implementation-contd/</link>
	<content:encoded>&lt;p&gt;This week I continued to work on the Tr operator and the related code needed for partial trace operations.  Following up with the list of tasks I had listed out for this week, I got the following items accomplished this week.&lt;/p&gt;
&lt;p&gt;1. PR 1333 merged&lt;/p&gt;
&lt;p&gt;2. Submitted &lt;a href=&quot;https://github.com/sympy/sympy/pull/1396&quot;&gt;PR 1396&lt;/a&gt;  for review :&lt;/p&gt;
&lt;p&gt;This PR has the following changes:&lt;/p&gt;
&lt;p&gt;1. Printing ( default, latex and pretty).  The current output does not display the indices.  I would like some input on this from the reviewers on how to incorporate the information on indices into the output.&lt;/p&gt;
&lt;p&gt;2. Handles indices in the constructor of Density class and related methods.&lt;/p&gt;
&lt;p&gt;3. Handle partial trace operations especially wrt to Density operators.&lt;/p&gt;
&lt;p&gt;4. Notebook example, some of which are listed below:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rhoforsympy.files.wordpress.com/2012/07/tr_examp1.jpg&quot;&gt;&lt;img src=&quot;http://rhoforsympy.files.wordpress.com/2012/07/tr_examp1.jpg?w=500&amp;amp;h=396&quot; title=&quot;tr_examp&quot; height=&quot;396&quot; width=&quot;500&quot; alt=&quot;&quot; class=&quot;alignleft size-full wp-image-174&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The activities I have in mind for next week are as follows.&lt;/p&gt;
&lt;p&gt;1.  Address review comments on latest PR.&lt;/p&gt;
&lt;p&gt;2.  Complete the test cases for existing partial trace implementation for Qubits. My plan is to get this changes merged with the current PR. This should happen by Tuesday.&lt;/p&gt;
&lt;p&gt;With these 2 activities, I believe most of what is needed for Tr and density matrices could be considered complete. Again, I expect  &lt;a href=&quot;https://github.com/ellisonbg&quot;&gt;@ellisonbg&lt;/a&gt; and &lt;a href=&quot;https://github.com/flacjacket&quot;&gt;@flacjacket&lt;/a&gt; to provide some input on this.   Assuming, this is true, then I plan to start looking at&lt;/p&gt;
&lt;p&gt;3. qapply() method to incorporate density op L and R operations.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Aside:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;BTW, for Emacs lovers and who love IPython Notebook, there is &lt;a href=&quot;http://tkf.github.com/emacs-ipython-notebook/&quot;&gt;IPython notebook for Emacs&lt;/a&gt; now. I have not tried this yet,  but I plan to try this out this week and post my experience.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/169/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/169/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/169/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/169/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/169/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/169/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/169/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/169/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/169/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/169/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/169/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/169/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/169/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/169/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=169&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-01T23:39:33+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=245">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 6</title>
	<link>http://amakelov.wordpress.com/2012/07/01/google-summer-of-code-2012-week-6/</link>
	<content:encoded>&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;here’s a brief summary of what I’ve been doing for the sixth week of my GSoC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Submitting, fixing and finally getting merged my &lt;a href=&quot;https://github.com/sympy/sympy/pull/1377&quot; target=&quot;_blank&quot;&gt;second pull request&lt;/a&gt;. Thanks a lot to &lt;a href=&quot;https://github.com/Krastanov&quot; target=&quot;_blank&quot;&gt;Stefan&lt;/a&gt; and my mentor &lt;a href=&quot;https://github.com/wdjoyner&quot; target=&quot;_blank&quot;&gt;David&lt;/a&gt; for reviewing it! now we have a lot more functionality for handling permutation groups.&lt;/li&gt;
&lt;li&gt;Some more debugging on PRINTELEMENTS (I was talking about it in the third bullet of &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/&quot; target=&quot;_blank&quot;&gt;my post from last week&lt;/a&gt;). It turned out that it was still doing something slightly wrong but now it’s the way it should be. Apart from that, its speed was optimized by a different means of storing computed subwords of the group element being computed as a word in elements from the basic transversals (this assumes some knowledge of the theory of bases and strong generating sets; for a discussion, see [1],  pp.87-88,  pp.108-110)&lt;/li&gt;
&lt;li&gt;In the &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/#comments&quot; target=&quot;_blank&quot;&gt;comments&lt;/a&gt; on &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/&quot; target=&quot;_blank&quot;&gt;my post from last week&lt;/a&gt;, I got a clarification from &lt;a href=&quot;https://github.com/pernici&quot; target=&quot;_blank&quot;&gt;Mario&lt;/a&gt; on the struggles with _coset_repr that I discussed in the third bullet of last week’s post. Now I’ll be able to use the current deterministic implementation of the Schreier-Sims algorithm whenever a BSGS is needed (after some minor modifications to the attributes of a PermutationGroup that are assigned after running Schreier-Sims).&lt;/li&gt;
&lt;li&gt;Finally, the implementation of the algorithm BASESWAP ([1],  pp.102-103). This function is necessary for SUBGROUPSEARCH ([1], p.117) which in turn is necessary for the group intersection algorithm. &lt;strong&gt;This deserves some special attention – I have strong reasons to believe that the pseudocode &amp;amp; its discussion in [1], pp. 102-103 contain the same mistake repeated several times.&lt;/strong&gt; Namely, I think that line 3 of the pseudocode for BASESWAP should read &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7C%5Cbeta_i%5E%7B%5Cleft%5Clangle+T%5Cright%5Crangle%7D%7C%5Cneq+s&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|\beta_i^{\left\langle T\right\rangle}|\neq s&quot; class=&quot;latex&quot; title=&quot;|\beta_i^{\left\langle T\right\rangle}|\neq s&quot; /&gt; instead of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7C%5Cbeta_%7Bi%2B1%7D%5E%7B%5Cleft%5Clangle+T%5Cright%5Crangle%7D%7C%5Cneq+s&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|\beta_{i+1}^{\left\langle T\right\rangle}|\neq s&quot; class=&quot;latex&quot; title=&quot;|\beta_{i+1}^{\left\langle T\right\rangle}|\neq s&quot; /&gt;. At first I implemented the algorithm the way it was given is pseudocode, and lost many hours (it wasn’t working) until I discovered that this little detail might be wrong. Now, I shall assume the notation used in [1] in order to follow their argument as closely as possible. My reasoning is as follows: as we change the set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=T&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;T&quot; class=&quot;latex&quot; title=&quot;T&quot; /&gt; during the run of BASESWAP, we finally want to have &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cleft%5Clangle+T%5Cright%5Crangle+%3D+H+%3A%3D+G%5E%7B%28i%29%7D_%7B%5Cbeta_%7Bi%2B1%7D%7D%3DG_%7B%5Cbeta_1%2C+%5Cbeta_2%2C+%5Cldots%2C+%5Cbeta_%7Bi-1%7D%2C+%5Cbeta_%7Bi%2B1%7D%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\left\langle T\right\rangle = H := G^{(i)}_{\beta_{i+1}}=G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}&quot; class=&quot;latex&quot; title=&quot;\left\langle T\right\rangle = H := G^{(i)}_{\beta_{i+1}}=G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}&quot; /&gt;. The last line &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7CG%5E%7B%28i%29%7D%7C+%3D+%7C%5CDelta%5E%7B%28i%29%7D%7C%7C%5CDelta%5E%7B%28i%2B1%29%7D%7C%7CG%5E%7B%28i%2B2%29%7D%7C+%3D+%7C%5Cbeta_%7Bi%2B1%7D%5E%7BG%5E%7B%28i%29%7D%7D%7C%7CH%7C&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|G^{(i)}| = |\Delta^{(i)}||\Delta^{(i+1)}||G^{(i+2)}| = |\beta_{i+1}^{G^{(i)}}||H|&quot; class=&quot;latex&quot; title=&quot;|G^{(i)}| = |\Delta^{(i)}||\Delta^{(i+1)}||G^{(i+2)}| = |\beta_{i+1}^{G^{(i)}}||H|&quot; /&gt; on page 102 of [1] is indeed correct by a straightforward application of the orbit-stabilizer theorem; so if we put &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s+%3D+%5Cfrac%7B%7C%5CDelta%5E%7B%28i%29%7D%7C%7C%5CDelta%5E%7B%28i%2B1%29%7D%7C%7D%7B+%7C%5Cbeta_%7Bi%2B1%7D%5E%7BG%5E%7B%28i%29%7D%7D%7C%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;s = \frac{|\Delta^{(i)}||\Delta^{(i+1)}|}{ |\beta_{i+1}^{G^{(i)}}|}&quot; class=&quot;latex&quot; title=&quot;s = \frac{|\Delta^{(i)}||\Delta^{(i+1)}|}{ |\beta_{i+1}^{G^{(i)}}|}&quot; /&gt; we indeed have &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7CH%7C+%3D+s%7CG%5E%7B%28i%2B2%29%7D%7C&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|H| = s|G^{(i+2)}|&quot; class=&quot;latex&quot; title=&quot;|H| = s|G^{(i+2)}|&quot; /&gt;. Up to this point, I believe the book. However, after that &lt;strong&gt;they say&lt;/strong&gt; that the last equation implies that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s+%3D+%7C%5Cbeta_%7Bi%2B1%7D%5EH%7C&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;s = |\beta_{i+1}^H|&quot; class=&quot;latex&quot; title=&quot;s = |\beta_{i+1}^H|&quot; /&gt;. Looking more closely, by definitions we recall that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=H+%3D+G_%7B%5Cbeta_1%2C+%5Cbeta_2%2C+%5Cldots%2C+%5Cbeta_%7Bi-1%7D%2C+%5Cbeta_%7Bi%2B1%7D%7D%2C+G%5E%7B%28i%2B2%29%7D+%3D+G_%7B%5Cbeta_1%2C+%5Cbeta_2%2C%5Cldots%2C+%5Cbeta_%7Bi%2B1%7D%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;H = G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}, G^{(i+2)} = G_{\beta_1, \beta_2,\ldots, \beta_{i+1}}&quot; class=&quot;latex&quot; title=&quot;H = G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}, G^{(i+2)} = G_{\beta_1, \beta_2,\ldots, \beta_{i+1}}&quot; /&gt;. Hence, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G%5E%7B%28i%2B2%29%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G^{(i+2)}&quot; class=&quot;latex&quot; title=&quot;G^{(i+2)}&quot; /&gt; is the stabilizer of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta_i&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\beta_i&quot; class=&quot;latex&quot; title=&quot;\beta_i&quot; /&gt; in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=H&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;H&quot; class=&quot;latex&quot; title=&quot;H&quot; /&gt;, thus by the orbit-stabilizer theorem we have &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7CH%7C+%3D+%7C%5Cbeta_i%5EH%7C%7CG%5E%7B%28i%2B2%29%7D%7C&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|H| = |\beta_i^H||G^{(i+2)}|&quot; class=&quot;latex&quot; title=&quot;|H| = |\beta_i^H||G^{(i+2)}|&quot; /&gt;, hence we must have &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7C%5Cbeta_i%5EH%7C+%3D+s&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|\beta_i^H| = s&quot; class=&quot;latex&quot; title=&quot;|\beta_i^H| = s&quot; /&gt;, not &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7C%5Cbeta_%7Bi%2B1%7D%5EH%7C%3Ds&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|\beta_{i+1}^H|=s&quot; class=&quot;latex&quot; title=&quot;|\beta_{i+1}^H|=s&quot; /&gt;. This same mistake (&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta_%7Bi%2B1%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\beta_{i+1}&quot; class=&quot;latex&quot; title=&quot;\beta_{i+1}&quot; /&gt; instead of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta_i&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\beta_i&quot; class=&quot;latex&quot; title=&quot;\beta_i&quot; /&gt;) appears several other times (in fact, all the times) in the discussion of BASESWAP and once in the pseudocode. Now that I changed it to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta_i&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\beta_i&quot; class=&quot;latex&quot; title=&quot;\beta_i&quot; /&gt;, the implementation doesn’t break and behaves as expected. I also implemented the randomized version described in [1], p.103 and [2], p.98, and it also behaves as expected. I’d be extremely happy if anyone else is willing to go over this and check whether what I’m saying is true; I’m pretty sure it is, but I didn’t expect to find such a serious mistake in that book. I’m willing to provide their argument in its entirety or clarify the notation, just shoot me a comment below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, that’s it for now. I’m in the process of furnishing my code for the next pull request (which will hopefully be submitted tomorrow), and then I’ll resume my work on subgroup intersections.&lt;/p&gt;
&lt;p&gt;Edit: My pull request has not been submitted yet since writing the docstrings and tests took me longer than expected. The current state of it is available &lt;a href=&quot;https://github.com/amakelov/sympy/tree/week4&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, if anyone wants to take a look at how things are going. I still have to write some more tests, and hopefully will push it today for review.&lt;/p&gt;
&lt;p&gt;Edit#2: &lt;a href=&quot;https://github.com/sympy/sympy/pull/1406&quot; target=&quot;_blank&quot;&gt;The pull request&lt;/a&gt; is finally out. It is some 1300 lines of code, so if people object I can remove some of the stuff and save them for a future pull request.&lt;/p&gt;
&lt;p&gt;[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp;amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3&lt;/p&gt;
&lt;p&gt;[2] Permutation Group Algorithms, Ákos Seress, Cambridge University Press&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/245/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/245/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/245/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/245/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/245/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/245/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/245/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/245/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/245/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/245/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/245/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/245/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/245/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/245/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=245&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-01T22:45:03+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/2012/06/30/gsoc-2012-post-7-22/">
	<title>Angadh Nanjangud: GSoC 2012 Post 7</title>
	<link>http://angadhsympy.wordpress.com/2012/06/30/gsoc-2012-post-7-22/</link>
	<content:encoded>&lt;p&gt;Another week and more things learned. A new functionality was added this week to mechanics- the partial velocities function. This function basically spits out a list of lists of partial velocities.&lt;/p&gt;
&lt;p&gt;A little background on the use of partial velocities in determining equations of motion- Partial velocities are used in Kane’s method to determine, what Kane calls, generalized active force and generalized inertia force. A partial velocity is defined as the partial derivative of a velocity (or angular velocity) vector with respect to an independent generalized speed, which is a scalar. The outcome of these partial velocities is thus a vector. As many of these can be computed as may be relevant to the system. Then these partial velocities of the points are dotted with the appropriate active and inertial forces at those points.&lt;/p&gt;
&lt;p&gt;As easy and straightforward as that may sound in terms of implementation, I found it a bit of a tedious task to decide what was the best way for implementing it. It’s one thing to write code that is for stand alone purposes and where you have creative reign but it is another when it comes to writing code that must replace chunks of existing code.&lt;/p&gt;
&lt;p&gt;At first, when I wrote out this function, it was just spitting out a list of partial velocities. That wasn’t too hard. But then Jason in the comment on last week’s post suggested that changes be made into the Kane class so that the partial velocities function be incorporated into it. So as it stood, my function was useless for anything else but looking at partial velocities. So back to the drawing board!&lt;/p&gt;
&lt;p&gt;In the mechanics package, the scalar equations that are computed are stored in a matrix. So, I thought what would be ideal is to get a matrix of partial velocities that would mimic the partial velocities table that we get when we try to derive equations of motion by hand. So I went about doing that. Finally when I tested my code, I was getting an error message I couldn’t figure out. Now it was time to debug the code but with an error message that I couldn’t really grasp. I guess I went about trying to decipher the error in an unconventional way, where I went and rewrote each line of my code into the test file. But this was good because I finally figured out the issue with the function- The Matrix package in sympy doesn’t accept objects which are of the Vector class type that we typically use to represent vectors in mechanics.&lt;/p&gt;
&lt;p&gt;Speaking about this with Gilbert finally led to the conclusion that nested lists would be best in this case. So after having written the same function several times, I was finally able to rewrite the function successfully and a pertinent &lt;a href=&quot;https://github.com/sympy/sympy/pull/1391&quot;&gt;PR&lt;/a&gt; opened. (I should add that in all this hoopla of writing and rewriting this function, I completely forgot about python list indexing beginning at 0. In hindsight it was hilarious to see myslef struggle with debugging my function one last time when I forgot one of Python’s quirks. I was up until the wee hours of the morning trying to figure that one out and then it hit me! Hah!). Currently I have been looking at the Kane.py module to see how to incorporate this function into it. In theory it shouldn’t be hard because the math that needs to be done fits right in, but it could be a bit more tedious than I recognize. But I’m confident that the function itself will not have to be tweaked to be used which is a good sign.&lt;/p&gt;
&lt;p&gt;So this upcoming week, I will find a way to use this functionality in the Kane class. I will also be meeting with Gilbert and we will determine a plan in terms of how to implement a Lagrange class which is one of the major goals for this summer.&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/263/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/263/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/263/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/263/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/263/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/263/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/263/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/263/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/263/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/263/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/263/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/263/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/263/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/263/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=263&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-30T09:17:23+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=409">
	<title>Stefan Krastanov: Part 1: What is a Tensor and How is it Implemented in the diffgeom SymPy module?</title>
	<link>http://krastanov.wordpress.com/2012/06/30/part-1-what-is-a-tensor-and-how-is-it-implemented-in-the-diffgeom-sympy-module/</link>
	<content:encoded>&lt;h2&gt;The Math&lt;/h2&gt;
&lt;p&gt;The notion of “a tensor” is commonly defined in two different ways. The first definition goes roughly like this (“roughly” means “do not tell this to your math teacher”):&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;A tensor is a geometrical object that can be represented in some coordinate system as an n-dimensional array (it is not the array itself). The quantities in that array depend on the coordinate system in which the representation is done, however there is a precise rule on how these quantities change if we switch to another coordinate system. It is this rule that defines what a tensor (and in particular a vector or a 1-form) is.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The other definition, less used by physicists and more used by mathematicians is (again roughly) the following:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;A tensor is the sum of tensor products of forms and vectors. Forms and vectors are themselves given nice geometrical definitions.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It is this second definition that is used in the diffgeom SymPy module. Naturally, we need to define “tensor product”, “vector” and “form” in order to use this definition. Indeed, the structure of the module follows closely these mathematical definitions.&lt;/p&gt;
&lt;p&gt;Disclaimer: I have used and will use the words tensor and tensor field interchangeably. In order for this post to make any sense to you, ensure that you understand the difference and are able to find out the exact meaning from the context. The same goes also for vector / vector field and form / form field.&lt;/p&gt;
&lt;h2&gt;The Implementation&lt;/h2&gt;
&lt;p&gt;To create the mathematical structure of differential geometry or its implementation in a CAS like SymPy we need to build up the ladder of object definitions. Each new and more interesting notion will depend on the definition of the previous. Hence we start with the boilerplate object “Manifold” and on it we define a “Patch” (the diffgeom module implements all this boilerplate for commonly used manifold, however in order to explain how it works, we will redo everything from scratch):&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;m = Manifold('my_manifold', 2) # A 2D manifold called 'my_manifold'
p = Patch('my_patch', m) # A patch called 'my_patch'
 &lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The first object that does something marginally interesting is the “Coordinate System”. Its role is to permit the parametrization of points on the patch by a tuple of numbers:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;cs_r = CoordSystem('R', p) # A coordinate system called 'R' (for rectangular)
point = cs_r.point([1,1]) # A point with coordinates (1, 1)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;If you have two or more coordinate systems you can tell the computer how to transform a tuple of numbers from one system to another:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;cs_p = CoordSystem('P', p)
cs_r.connect_to(cs_p, [x, y], [sqrt(x**2+y**2), atan2(y,x)])
cs_p.connect_to(cs_r, [r, t], [r*cos(t), r*sin(t)], inverse=False)
# Now the point instances know how to transform their coordinate tuples:
point.coords(cs_p)
# output:
#⎡  ___⎤
#⎢╲╱ 2 ⎥
#⎢     ⎥
#⎢  π  ⎥
#⎢  ─  ⎥
#⎣  4  ⎦
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;However, differential geometry is not about calculating coordinates of points in different systems. It is about working with fields. Thus, we will focus on a single coordinate system from now on, and to be explicit about its complete independence of whether we want rectangular or other coordinates, we will just call it ‘c’ and leave it unconnected to other coordinate systems.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;c = CoordSystem('c', p)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Scalar Field&lt;/h3&gt;
&lt;p&gt;We continue to build up our ladder of definitions in order to obtain a more interesting and useful theory/implementation. The next step is the “scalar field”. A scalar field is a mapping from the manifold (the set of points) to the real numbers (yes, just reals (maybe complex), the rest brings unnecessary complexity). Each coordinate system brings with itself the basic scalar fields (i.e. coordinate functions), that correspond to the mappings from a point to an element of its coordinate tuple. These basic scalar fields are implemented internally as BaseScalarField instances (this is however invisible to the user).&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt; c.coord_functions()
# output: [c₀, c₁]
point = c.point([a, b])
c.coord_function(0)(point)
# output: a
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;You can build more complicated fields by using the base scalar fields. This does not produce an instance of some new ScalarField class. The BaseScalarField instances just become a part of the expression tree of an ordinary Expr instance (the base for building expressions in SymPy).&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;c0, c1 = c.coord_functions()
field = f(c0, 3*c1)/sin(c0)*c1**2
f
# output:
#               -1       2
#f(c₀, 3⋅c₁)⋅sin  (c₀)⋅c₁
field(point)
# output:
# 2
#b ⋅f(a, 3⋅b)
#────────────
#   sin(a)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Vector Field&lt;/h3&gt;
&lt;p&gt;Then comes the vector field which is defined as an element of the set of differential operators over the scalar fields. All elements of this set can be build up as linear combinations of base vector fields. The base vector fields correspond to the partial derivatives with respect to the base scalar fields. They are implemented in the BaseVectorField class, which also is invisible to the user.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;c.base_vectors()
# output: [∂_c_0, ∂_c_1]
e_c0, e_c1 = c.base_vectors()
e_c0(c0)
# output: 1
e_c0(c1)
# output: 0
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;One can also use more complicated fields (again, no need for new VectorField class, just being part of the expression tree of Expr):&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;v_field = c1*e_c0 + f(c0)*e_c1
v_field
# output: f(c₀)⋅∂_c_1 + c₁⋅∂_c_0
s_field = g(c0, c1)
v_field(s_field)
# output:
#      ⎛ d            ⎞│           ⎛ d            ⎞│
#f(c₀)⋅⎜───(g(c₀, ξ₂))⎟│      + c₁⋅⎜───(g(ξ₁, c₁))⎟│
#      ⎝dξ₂           ⎠│ξ₂=c₁      ⎝dξ₁           ⎠│ξ₁=c₀
v_field(s_field)(point)
# output:
#  ⎛ d           ⎞│            ⎛ d           ⎞│
#b⋅⎜───(g(ξ₁, b))⎟│     + f(a)⋅⎜───(g(a, ξ₂))⎟│
#  ⎝dξ₁          ⎠│ξ₁=a        ⎝dξ₂          ⎠│ξ₂=b
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;1-Form Field and Differential&lt;/h3&gt;
&lt;p&gt;The final ingredient needed for the basis of differential geometry is the 1-form field. A 1-form field is a linear mapping from the set of vector fields to the set of reals. The interesting thing is that all 1-forms can be build-up from linear combinations of the differentials of the base scalar fields.&lt;/p&gt;
&lt;p&gt;There is the need to define what a differential is. The differential &lt;img src=&quot;http://s0.wp.com/latex.php?latex=df&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;df&quot; class=&quot;latex&quot; title=&quot;df&quot; /&gt; of the scalar field &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; is the 1-form field which has the following property: for every vector field &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;v&quot; class=&quot;latex&quot; title=&quot;v&quot; /&gt; one has &lt;img src=&quot;http://s0.wp.com/latex.php?latex=df%28v%29+%3D+v%28f%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;df(v) = v(f)&quot; class=&quot;latex&quot; title=&quot;df(v) = v(f)&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;In the diffgeom module the differential is implemented as the Differential class. The differentials of the base scalar fields are accessible with the base_oneforms() method, however one can construct the differential of whatever scalar field they wish. There is, as always, no dedicated OneFormField class. Everything is build up with Expr instances.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;c.base_oneforms()
# output: [ⅆ c₀, ⅆ c₁]
dc0, dc1 = c.base_oneforms()
dc0(e_c0), dc1(e_c0)
# output: (1, 0)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;And building up more complicated expressions:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;f_field = g(c0)*dc1 + 2*dc0
f_field(v_field)
# output: g(c₀)⋅f(c₀) + 2⋅c₁
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;The Rest&lt;/h3&gt;
&lt;p&gt;Now that we have the basic building blocks in order to construct higher order tensors we use tensor and wedge products. More about them in part 2.&lt;/p&gt;
&lt;h2&gt;What if I Need to Work with a Number of Different Coordinate Systems&lt;/h2&gt;
&lt;p&gt;The only difference is that the chain rule of differentiation will be necessary. One can express the same statement in a more implementation independent way as “The rule for transformation of coordinates will need to be applied”. Anyhow, it works:&lt;/p&gt;
&lt;p&gt;Examples from the already implemented &lt;img src=&quot;http://s0.wp.com/latex.php?latex=R%5E2&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;R^2&quot; class=&quot;latex&quot; title=&quot;R^2&quot; /&gt; module.&lt;/p&gt;
&lt;h3&gt;Points Defined in one Coordinate System and Evaluated in Another&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;point_r = R2_r.point([x0, y0])
point_p = R2_p.point([r0, theta0])
R2.x(point_r)
# output: x₀
R2.x(point_p)
# output: r₀⋅cos(θ₀)
trigsimp((R2.x**2 + R2.y**2 + g(R2.theta))(point_p))
# output:
#  2
#r₀  + g(θ₀)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Vector Fields Operating on Scalar Fields&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;R2.e_x(R2.theta)
# output:
#            -1
#   ⎛ 2    2⎞
#-y⋅⎝x  + y ⎠
R2.e_theta(R2.y)
# output: cos(θ)⋅r
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;1-Form Fields Operating on Vector Fields&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;R2.dr(R2.e_x)
# output:
#         -1/2
#⎛ 2    2⎞
#⎝x  + y ⎠    ⋅x
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;What if I Need an Unspecified Arbitrary Coordinate System&lt;/h2&gt;
&lt;p&gt;If it is just one coordinate system, nothing; all the examples in the first part were for a completely arbitrary system. If you want two systems with an arbitrary transformation rules between them, just use an arbitrary function when you connect them:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;m = Manifold('my_manifold', 2)
p = Patch('my_patch', m)
cs_a = CoordSystem('a', p)
cs_b = CoordSystem('b', p)
cs_a.connect_to(cs_b, [x, y], [f(x,y), g(x,y)], inverse=False)
cs_a.base_vector(1)(cs_b.coord_function(0))
# output:
#⎛ d            ⎞│
#⎜───(f(a₀, ξ₁))⎟│
#⎝dξ₁           ⎠│ξ₁=a₁
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;How Does This Relate to the Scheme Code by &lt;a href=&quot;http://groups.csail.mit.edu/mac/users/gjs/&quot; target=&quot;_blank&quot;&gt;Gerald Jay Sussman&lt;/a&gt; and &lt;a href=&quot;http://groups.csail.mit.edu/mac/users/wisdom/&quot; target=&quot;_blank&quot;&gt;Jack Wisdom&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The diffgeom module is based in its entirety on the work of &lt;a href=&quot;http://groups.csail.mit.edu/mac/users/gjs/&quot; target=&quot;_blank&quot;&gt;Gerald Jay Sussman&lt;/a&gt; and &lt;a href=&quot;http://groups.csail.mit.edu/mac/users/wisdom/&quot; target=&quot;_blank&quot;&gt;Jack Wisdom&lt;/a&gt; on &lt;a href=&quot;http://dspace.mit.edu/handle/1721.1/30520&quot; target=&quot;_blank&quot;&gt;“Functional Differential Geometry”&lt;/a&gt;. The only substantial difference (in what is already implemented) is how the diffgeom module treats operations on fields. Both the diffgeom module and the original Scheme code behave like this:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;scalar_field(point) ---&amp;gt; an expression representing a real number
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;However, the original scheme implementation and the SymPy module behave differently in these cases:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt; vector_field(scalar_field)
form_field(vector_field)
 &lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;As far as I know, the original Scheme code produces an opaque object. It indeed represents a scalar field, however &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cpartial_x%28x%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\partial_x(x)&quot; class=&quot;latex&quot; title=&quot;\partial_x(x)&quot; /&gt; will not produce directly &lt;img src=&quot;http://s0.wp.com/latex.php?latex=1&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;1&quot; class=&quot;latex&quot; title=&quot;1&quot; /&gt;. Instead it produces an object that returns 1 when evaluated at a point. The diffgeom module does this evaluation at the time at which one calls &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cpartial_x%28x%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\partial_x(x)&quot; class=&quot;latex&quot; title=&quot;\partial_x(x)&quot; /&gt; without the need to evaluate at a point, thus the result is explicit and not encapsulated in an opaque object.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/409/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/409/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/409/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/409/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/409/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/409/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/409/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/409/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/409/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/409/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/409/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/409/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/409/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/409/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;amp;blog=15251174&amp;amp;post=409&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-29T22:36:38+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=165">
	<title>Aleksandar Makelov: Illuminatus!</title>
	<link>http://amakelov.wordpress.com/2012/06/27/illuminatus/</link>
	<content:encoded>&lt;p style=&quot;text-align: right;&quot;&gt;&lt;em&gt;“[it's] like having your brains smashed out by a slice of lemon, wrapped ’round a large gold brick.”&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;&lt;em&gt;Douglas Adams on …?&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;A SLICE OF LEMON?! Why not apple. A large gold brick? Why not a large golden… apple. OK, I admit it, he was apparently talking about the &lt;a href=&quot;http://en.wikipedia.org/wiki/Zaphod_Beeblebrox#Pan-Galactic_Gargle_Blaster&quot; target=&quot;_blank&quot;&gt;Pan-Galactic Gargle Blaster&lt;/a&gt;. But he could have as easily been talking about (can you hear the drums?)&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Illuminatus!&quot;&gt;&lt;img src=&quot;http://amakelov.files.wordpress.com/2012/06/illuminatus.gif?w=474&amp;amp;h=381&quot; title=&quot;Illuminatus!&quot; height=&quot;381&quot; width=&quot;474&quot; alt=&quot;&quot; class=&quot; wp-image-166 aligncenter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;Hell yeah. That’s right. &lt;a href=&quot;http://tvtropes.org/pmwiki/pmwiki.php/Main/Illuminatus&quot; target=&quot;_blank&quot;&gt;The &lt;em&gt;Illuminatus!&lt;/em&gt; trilogy&lt;/a&gt;. This book is totally &lt;a href=&quot;http://amakelov.files.wordpress.com/2012/06/a-strangelove_0.jpg&quot; target=&quot;_blank&quot;&gt;crazy&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=KThlYHfIVa8&quot; target=&quot;_blank&quot;&gt;crazy&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=NMNgbISmF4I&quot; target=&quot;_blank&quot;&gt;crazy&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=5ZaeLFPxo-c&quot; target=&quot;_blank&quot;&gt;crazy&lt;/a&gt;, &lt;a href=&quot;http://amakelov.files.wordpress.com/2012/06/harvey.jpg&quot; target=&quot;_blank&quot;&gt;crazy&lt;/a&gt; in so many ways and on so many levels (and probably &lt;a href=&quot;http://www.goodreads.com/quotes/show/26884&quot; target=&quot;_blank&quot;&gt;even more than that&lt;/a&gt;, actually). It contains &lt;a href=&quot;http://uncyclopedia.wikia.com/wiki/AAAAAAAAA!&quot; target=&quot;_blank&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;http://www.scottaaronson.com/writings/bignumbers.html&quot; target=&quot;_blank&quot;&gt;shamelessly huge number&lt;/a&gt; &lt;a href=&quot;http://amakelov.files.wordpress.com/2012/06/what_did_you_expect.jpg&quot; target=&quot;_blank&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=6pmWojisM_E&quot; target=&quot;_blank&quot;&gt;references &lt;/a&gt;to &lt;a href=&quot;http://www.youtube.com/watch?v=a502RejLz8s&quot; target=&quot;_blank&quot;&gt;art&lt;/a&gt;/&lt;a href=&quot;http://en.wikipedia.org/wiki/Assassination_of_John_F._Kennedy&quot; target=&quot;_blank&quot;&gt;history&lt;/a&gt;/&lt;a href=&quot;http://amakelov.files.wordpress.com/2012/06/what_did_you_expect_2.jpg&quot; target=&quot;_blank&quot;&gt;whatnot&lt;/a&gt;, and the funniest uses of &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/27/illuminatus/&quot;&gt;self-reference&lt;/a&gt; I’ve ever encountered. It holds a very special place in my library, and also it’s a lot of fun, that’s why I chose it as the first (and hopefully not last) book to be discussed in my blog.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;strong&gt;This book is an easy read:&lt;/strong&gt; right from its first line, “It was the year when they finally immanentized the Eschaton.”, it will push you forward (and maybe &lt;a href=&quot;http://en.wikipedia.org/wiki/Pullback_%28differential_geometry%29&quot; target=&quot;_blank&quot;&gt;pull you back&lt;/a&gt; when you finish it? Another inside joke from Math55…) through its dynamic plot, and you’ll be flying over the words, the sometimes absurdly long and complex sentences, the sudden shifts in time and place (and mindset), the infinite loads of irony, the puns, the Goddess(es), the talking porpoises, the playful mood, the underwater… whatever, laughing all the way. And – yay! It’s another sunny and exciting day of your life. You look up at the clear blue sky (no matter if it is clear and blue), infinitely more curious and infinitely more confused than you were when you started reading it. And that is always good. ‘What the hell was that?’, you might be asking yourself. What is left is this subtle feeling of a joke, resting somewhere under the worries of your mind – a small joke? a huge joke? maybe the world is a joke? maybe it was on you? – and it makes you smile mysteriously at everything and everyone you see that day. It makes you feel – or, more accurately, makes you &lt;em&gt;remember that you are&lt;/em&gt; – liberated. And indeed, having your brains smashed out by a slice of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Apple_of_Discord&quot; target=&quot;_blank&quot;&gt;Apple of Discord&lt;/a&gt; never felt so good.&lt;/p&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;&lt;em&gt;“Is”, “is.” “is” — the idiocy of the word haunts me. If it were abolished, human thought might begin to make sense. I don’t know what anything “is”; I only know how it seems to me at this moment” &lt;/em&gt;&lt;br /&gt;
&lt;em&gt; ― Robert Anton Wilson&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;strong&gt;This book is a hard read:&lt;/strong&gt; you won’t know where you ARE, who the fnord characters ARE, whether what the two paranoid authors ARE scribbling about IS happening for real or not (&lt;a href=&quot;http://amakelov.files.wordpress.com/2012/06/in_your_head.jpg&quot; target=&quot;_blank&quot;&gt;whatever that means&lt;/a&gt;), what exactly &lt;a href=&quot;http://www.goodreads.com/quotes/show/79199&quot; target=&quot;_blank&quot;&gt;IS&lt;/a&gt; happening, and all this IS &lt;a href=&quot;http://www.youtube.com/watch?v=bfhkuXuQ9eA&quot; target=&quot;_blank&quot;&gt;making you mad&lt;/a&gt;, IS this some kind of crazy joke, why AM I even reading this?! Why all the weird conspiracy crap?! And fnord what IS the whole point of the story?!! It doesn’t make any sense whatsoever. I shouldn’t have bought fnord that! I’d better leave it back on the shelf…&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;You see what might &lt;a href=&quot;http://en.wikipedia.org/wiki/Robert_Anton_Wilson#The_Cosmic_Trigger_series_and_other_books&quot; target=&quot;_blank&quot;&gt;trigger&lt;/a&gt; the bad trip. So, simply put: just &lt;a href=&quot;http://www.youtube.com/watch?v=l1m-FAaX7JA&quot; target=&quot;_blank&quot;&gt;keep an open mind&lt;/a&gt;, and let the book come in.&lt;/p&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;&lt;em&gt;“The problem with quotes on the Internet is that you can’t always be sure of their authenticity.” &lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;&lt;em&gt;Abraham Lincoln &lt;/em&gt;&lt;/p&gt;
&lt;div style=&quot;width: 466px;&quot; class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_195&quot;&gt;&lt;a href=&quot;http://www.principiadiscordia.com/&quot;&gt;&lt;img src=&quot;http://amakelov.files.wordpress.com/2012/06/eris.jpg?w=456&amp;amp;h=342&quot; title=&quot;eris&quot; height=&quot;342&quot; width=&quot;456&quot; alt=&quot;&quot; class=&quot; wp-image-195   alignright&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;All Hail Eris! Or not. Whatever you like.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;And as coincidence is a major theme of &lt;em&gt;‘Illuminatus!’&lt;/em&gt;, there was a curious coincidence involved in me ordering the book. I had known about it for several years, however I had some money to spend on books, so I ordered this together with one other book that had caught my eye more recenly: &lt;a href=&quot;http://en.wikipedia.org/wiki/Godel_escher_bach&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Gödel, Escher, Bach: An Eternal Golden Braid&lt;/em&gt;&lt;/a&gt;. That’s a weird combination, I thought. Several months later, I found this about &lt;em&gt;‘Illuminatus!’&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In more recent years, it was complimented in the bibliography to the &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/New_Hackers_Dictionary#1990_and_beyond&quot; title=&quot;New Hackers Dictionary&quot;&gt;New Hackers Dictionary&lt;/a&gt;&lt;/em&gt; as a book that can help readers “understand the &lt;a href=&quot;http://en.wikipedia.org/wiki/Hacker_culture&quot; title=&quot;Hacker culture&quot;&gt;hacker&lt;/a&gt; mindset.” The Dictionary described it as:&lt;/p&gt;
&lt;div&gt;An incredible berserko-surrealist rollercoaster of world-girdling conspiracies, intelligent dolphins, the fall of Atlantis, who really killed JFK, sex, drugs, rock’n'roll, and the Cosmic Giggle Factor. [...] The perfect &lt;a href=&quot;http://en.wikipedia.org/wiki/Lateralization_of_brain_function&quot; title=&quot;Lateralization of brain function&quot;&gt;right-brain&lt;/a&gt; companion to &lt;a href=&quot;http://en.wikipedia.org/wiki/Douglas_Hofstadter&quot; title=&quot;Douglas Hofstadter&quot;&gt;Hofstadter&lt;/a&gt;‘s &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach&quot; title=&quot;Gödel, Escher, Bach&quot;&gt;Gödel, Escher, Bach&lt;/a&gt;&lt;/em&gt;.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/The_Illuminatus!_Trilogy#Reviews_and_reputation&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, and this about ‘&lt;em&gt;Gödel, Escher, Bach&lt;/em&gt;‘:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;This book reads like an intellectual Grand Tour of hacker preoccupations. Music, mathematical logic, programming, speculations on the nature of intelligence, biology, and Zen are woven into a brilliant tapestry themed on the concept of encoded self-reference. The perfect left-brain companion to “Illuminatus”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;http://www.iblist.com/book4778.htm&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Well, I was just stupefied at how well the &lt;a href=&quot;http://www.forteantimes.com/features/commentary/396/the_23_phenomenon.html&quot; target=&quot;_blank&quot;&gt;Cosmic Coincidence Control Center&lt;/a&gt; are doing their job, what can I say.&lt;/p&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;&lt;em&gt;Dr John Lilly refers to “the crew that never rests” as Cosmic Coincidence Control Center and warns that they pay special attention to those who pay attention to them.&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;About possible &lt;strong&gt;criticism&lt;/strong&gt;: Yes, I’m aware of all the &lt;strong&gt;conspiracy theories&lt;/strong&gt; mentioned (and developed) in &lt;em&gt;‘Illuminatus!’ &lt;/em&gt;and the &lt;em&gt;‘Cosmic Trigger’&lt;/em&gt; series. To put it firmly: &lt;strong&gt;I don’t care if any of them are true or not.&lt;/strong&gt; When I read a book, I just read a book and that’s it. I agree that in some parts of &lt;em&gt;‘Cosmic Trigger’, &lt;/em&gt;Wilson might appear a little assertive of such stuff, and I always hate it when someone’s like, ‘OK, see? That’s how it is, that’s the conspiracy, they’re not giving you the truth – but I am!’, but his overall approach is &lt;a href=&quot;http://en.wikipedia.org/wiki/Agnosticism&quot; target=&quot;_blank&quot;&gt;agnostic&lt;/a&gt; in nature. And in &lt;em&gt;‘Illuminatus!’ &lt;/em&gt;I didn’t feel any signs of someone being assertive about anything. As I said, it left me even more confused and curious. So if you fell that the book is bad because it’s trying to convince you in some weird New World Order thing, &lt;a href=&quot;http://en.wikipedia.org/wiki/The_Outer_Limits_%281963_TV_series%29#Introduction&quot; target=&quot;_blank&quot;&gt;the problem might actually be in your television set&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;As to the &lt;strong&gt;point&lt;/strong&gt; of the book (I’ve been successfully procrastinating bringing this scary word up), as far as there is one, well, I can’t tell you what it is. It’s simply because I don’t know. I haven’t seen it. I wasn’t able (for good or for bad) to just finish the last page and say, “Hey, I finally see what all this was about. So cool.” And as author Robert A. Wilson used to read Joyce’s &lt;a href=&quot;http://en.wikipedia.org/wiki/Ulysses_%28novel%29&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Ulysses&lt;/em&gt;&lt;/a&gt; each year and find something new in it, I might do the same with &lt;em&gt;‘Illuminatus!’&lt;/em&gt; (and maybe blog about it? haha!). So, nice job, Mr. Wilson! You should be glad, wherever you are. However, what I &lt;em&gt;feel&lt;/em&gt; the point is, right now in this day and in this state of mind, recollecting about the experience I had while reading it a year or so ago, can be roughly summarized as:&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;http://amakelov.files.wordpress.com/2012/06/what_did_you_expect_2.jpg&quot; target=&quot;_blank&quot;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/165/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/165/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/165/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/165/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/165/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/165/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/165/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/165/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/165/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/165/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/165/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/165/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/165/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/165/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=165&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-27T12:16:50+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=162">
	<title>Guru Devanla: Week 5 : Tr class implementation</title>
	<link>http://rhoforsympy.wordpress.com/2012/06/25/week-5-tr-class-implementation/</link>
	<content:encoded>&lt;p&gt;I had not blogged during last week since I was away at the &lt;a href=&quot;http://cssqi2012.iqc.uwaterloo.ca/?page_id=21&quot;&gt;summer school&lt;/a&gt; where I had an opportunity to listen to and talk to both physicists and cs theorists working on the next quantum computer! There were  great presentations and the &lt;a href=&quot;http://www.youtube.com/user/quantumiqc&quot;&gt;videos&lt;/a&gt; should be available shortly. So, now back to Sympy!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Tasks accomplished this week&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My main tasks for this week was to address all comments on pending PR 1333. In addition I had planned to complete printing operations on Tr operator and get started with qubit related Tr operations.  I accomplished the task on addressing comments on PR 1333 and also completed basic printing operations along with having the notebook examples done.  The changes outside of PR 1333 are available in my githhub branch(&lt;a href=&quot;https://github.com/gdevanla/sympy/tree/trace_permute_equals&quot;&gt;trace_permute_equal&lt;/a&gt;) and I plan to submit a PR for these changes as soon as PR 1333 is merged.&lt;/p&gt;
&lt;p&gt;In addition I worked on providing a permute() function and also had to play around with implementation of overriding _hashable_contents() method.  I had spend some time in figuring out the details of such an implementation and there was some discussion on this on the &lt;a href=&quot;https://groups.google.com/d/msg/sympy/FVqM801IFzA/_9eOt7_ckEcJ&quot;&gt;mailing list.&lt;/a&gt;  For now, I have these 2 functions implemented ( but commented out) in branch &lt;a href=&quot;https://github.com/gdevanla/sympy/tree/trace_permute_equals&quot;&gt;trace_permute_equal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, one task that remained but which I could not get to this week was qubit implementation related to Tr.  Also, currently I am in the process of writing up how Tr operations should work on TensorProducts. I should have a write up very soon.&lt;/p&gt;
&lt;p&gt;The tasks for next week, therefore would be  (roughly in this order)&lt;/p&gt;
&lt;p&gt;1. Share a write up on TensorProduct wrt to Tr operations.&lt;/p&gt;
&lt;p&gt;2. Push qubit related changes to my git repo&lt;/p&gt;
&lt;p&gt;3. Get started on TensorProduct/Tr and have the first cut ready for review.&lt;/p&gt;
&lt;p&gt;4 Get &lt;a href=&quot;https://github.com/sympy/sympy/pull/1333&quot;&gt;PR 1333&lt;/a&gt; merged.&lt;/p&gt;
&lt;p&gt;5. Get branch &lt;a href=&quot;https://github.com/gdevanla/sympy/tree/trace_permute_equals&quot;&gt;trace_permute_equal&lt;/a&gt; merged. This branch has minor changes and I hope to get this merged as well this week.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/162/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/162/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/162/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/162/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/162/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/162/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/162/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/162/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/162/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/162/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/162/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/162/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/162/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/162/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=162&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-25T00:16:41+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=382">
	<title>Stefan Krastanov: Printing in SymPy (for the Differential Geometry Module)</title>
	<link>http://krastanov.wordpress.com/2012/06/25/printing-in-sympy-for-the-differential-geometry-module/</link>
	<content:encoded>&lt;p&gt;This week I was doing some interesting refactoring, that brings quite a bit of new possibilities, however I will write about this in the coming days. For now… printing. Most importantly, any suggestions for improvements are very welcomed.&lt;/p&gt;
&lt;p&gt;Printing in SymPy is done really easily. You just add a _print_Whatever() method to the printer and your new class is printed in whatever manner you wish.&lt;/p&gt;
&lt;p&gt;For the moment I am printing scalar fields just as the name of the coordinate in bold non-italic, vector fields as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cpartial&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\partial&quot; class=&quot;latex&quot; title=&quot;\partial&quot; /&gt; with the name as a subscript and differentials as a fancy &lt;img src=&quot;http://s0.wp.com/latex.php?latex=d&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;d&quot; class=&quot;latex&quot; title=&quot;d&quot; /&gt; followed by the name.&lt;/p&gt;
&lt;p&gt;First of all the unicode printer:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://krastanov.files.wordpress.com/2012/06/pprint.png&quot;&gt;&lt;img src=&quot;http://krastanov.files.wordpress.com/2012/06/pprint.png?w=600&quot; alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-383&quot; title=&quot;pprint&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are some obvious problems, like the fact that in unicode there is no subscript for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctheta&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\theta&quot; class=&quot;latex&quot; title=&quot;\theta&quot; /&gt; or &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;And then the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5CLaTeX&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\LaTeX&quot; class=&quot;latex&quot; title=&quot;\LaTeX&quot; /&gt; printer:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://krastanov.files.wordpress.com/2012/06/latex.png&quot;&gt;&lt;img src=&quot;http://krastanov.files.wordpress.com/2012/06/latex.png?w=600&quot; alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-384&quot; title=&quot;latex&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now I must find a nice way to print a Point() instance.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/382/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/382/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/382/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/382/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/382/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/382/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/382/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/382/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/382/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/382/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/382/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/382/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/382/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/382/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;amp;blog=15251174&amp;amp;post=382&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-24T22:24:19+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=147">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 5</title>
	<link>http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/</link>
	<content:encoded>&lt;p&gt;Hi everyone,&lt;/p&gt;
&lt;p&gt;here’s a brief summary of what I’ve been doing for the fifth week of my GSoC.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firstly, I finally had &lt;a href=&quot;https://github.com/sympy/sympy/pull/1319&quot; target=&quot;_blank&quot;&gt;my first pull request&lt;/a&gt; merged; it’s all my fault I didn’t complain about it on the mailing list earlier : ) I had to fix a bunch of things on it (stuff like documentation using sphinx and some improvements in code quality, mainly docstrings), and now I’m really happy to have my first major contribution to sympy merged with the master branch. Thanks to everyone who helped in reviewing it – &lt;a href=&quot;https://github.com/Krastanov&quot; target=&quot;_blank&quot;&gt;Stefan&lt;/a&gt;, &lt;a href=&quot;https://github.com/pernici&quot; target=&quot;_blank&quot;&gt;Mario&lt;/a&gt;, &lt;a href=&quot;https://github.com/ness01&quot; target=&quot;_blank&quot;&gt;Tom&lt;/a&gt;, &lt;a href=&quot;https://github.com/mrocklin&quot; target=&quot;_blank&quot;&gt;Matthew&lt;/a&gt;, and of course my mentor &lt;a href=&quot;https://github.com/wdjoyner&quot; target=&quot;_blank&quot;&gt;David&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Secondly, my next pull request, mainly containing work from weeks 2 and 5. After some moderate rebasing over the fixes from my first pull request, it is available &lt;a href=&quot;https://github.com/sympy/sympy/pull/1377&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Apart from implementations of &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/02/google-summer-of-code-2012-week-2/&quot; target=&quot;_blank&quot;&gt;what I did in week 2&lt;/a&gt;, it addresses the issue of testing randomized algorithms ( which is still being discussed &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/sympy/2el1T0ZY-Z4&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; ), and splits the generators for the named groups (symmetric, dihedral,…) in a separate file (which is probably going to contain more and more constructors for some well-known groups as time goes by). The PR looks longer than it is ( : ) read: any help in the review process will be appreciated), mainly because some 250 lines were copied to a new file in order to accommodate the named groups module. I hope that this time I did a better job at splitting the different parts of the PR into several commits.&lt;/li&gt;
&lt;li&gt;Finally, I started work on algorithms for backtrack searches in groups. These include stuff like printing all group elements (sort of boring, but you have to start somewhere), searching for subgroups of elements satisfying a given property, finding normalizers and centralizers,  intersection of subgroups,… In general, backtrack searches tend to be slow since all the elements in the group have to be visited, but there are ways of skipping large numbers of them. Also, for some problems in computational group theory, backtrack searches are the best we have today. They are described in [1], 4.6., and I’m currently following the exposition offered there. After two days of debugging, I finally got the function PRINTELEMENTS described in 4.6.1 of [1] to work; it turned out that the current implementation of the Schreier-Sims algorithm sets the field _coset_repr of an object of class PermutationGroup in sympy.combinatorics.perm_groups.py in a way that was unexpected to me. This little digression might help anyone else trying to understand the perm_groups file better. So for example consider the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;In [297]: S = SymmetricGroup(4)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;In [298]: S.schreier_sims()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;In [299]: S._coset_repr&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Out[299]:&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[[[0, 1, 2, 3], [1, 2, 3, 0], [2, 3, 0, 1], [3, 0, 1, 2]],&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[[0, 1, 2, 3], [0, 2, 1, 3], [0, 3, 1, 2]],&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[[0, 1, 2, 3], [0, 1, 3, 2]]]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
In [300]: S._base&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Out[300]: [0, 1, 2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From this and similar examples I concluded that the i-th component of _coset_repr is a transversal of the i-th basic orbit of the group S and tried to use this in PRINTELEMENTS. However, consired the following example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;In [302]: G = PermutationGroup([Permutation([[0, 1, 2, 3], [4], [5]]), Permutation([[1, 3], [0], [2], [4], [5]]), Permutation([[0], [1], [2], [3], [4, 5]])])&lt;/code&gt;&lt;/p&gt;&lt;code&gt;
&lt;p&gt;In [303]: G.schreier_sims()&lt;/p&gt;
&lt;p&gt;In [304]: G._base&lt;br /&gt;
Out[304]: [0, 1, 4]&lt;/p&gt;
&lt;/code&gt;&lt;p&gt;&lt;code&gt;In [305]: G._coset_repr&lt;br /&gt;
Out[305]:&lt;br /&gt;
[[[0, 1, 2, 3, 4, 5],&lt;br /&gt;
[1, 2, 3, 0, 4, 5],&lt;br /&gt;
[2, 3, 0, 1, 4, 5],&lt;br /&gt;
[3, 0, 1, 2, 4, 5]],&lt;br /&gt;
[[0, 1, 2, 3, 4, 5], [0, 3, 2, 1, 4, 5]],&lt;br /&gt;
[[0, 1, 2, 3, 4, 5]],&lt;br /&gt;
[[0, 1, 2, 3, 4, 5]],&lt;br /&gt;
[[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 5, 4]]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here, the first two components of _coset_repr are as I expected, but the 3rd and 4th are something I didn’t expect to be there (I expected to get the 5th component instead of the 3rd, and no more components). Hence at present the behaviour of _coset_repr is not too clear to me. The current solution is to use the randomized version of the Schreier-Sims algorithm to get a base and a strong generating set. Another option would be to use the generators from the attribute _stabilizers_gens, but I haven’t tried that yet. Anyway, PRINTELEMENTS works now (edit: there are many other algorithms present for printing all the elements of a group, but this one is significant for the implementation of backtrack searches), and the order in which the elements of the group are visited (lexicographically with respect to the image of the base, in an ordering of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5COmega+%3D+%5C%7B0%2C+1%2C%5Cldots%2C+n-1%5C%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\Omega = \{0, 1,\ldots, n-1\}&quot; class=&quot;latex&quot; title=&quot;\Omega = \{0, 1,\ldots, n-1\}&quot; /&gt; in which base points come first) is used in most of the following backtrack searches, so a large part of this algorithm will be reused in subsequent algorithms ( I hope : ) ). My description of the situation assumed some knowledge of the theory behind the Schreier-Sims algorithm, so if something is not quite clear feel free to ask in the comments!&lt;/p&gt;
&lt;p&gt;That’s it for now. Next week, I’ll continue with backtrack searches, and hopefully will implement the subgroup intersection routine (it seems formidable right now)… and put some more effort into getting the second pull request merged – I’ve got a lot to catch up with in terms of getting my code in sympy : ) .&lt;/p&gt;
&lt;p&gt;[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp;amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/147/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/147/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/147/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/147/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/147/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/147/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/147/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/147/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/147/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/147/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/147/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/147/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/147/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/147/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=147&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-24T21:19:23+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/06/24/gsoc-week-5">
	<title>Bharath M R: Gsoc week 5</title>
	<link>http://catchmrbharath.github.com/programming/2012/06/24/gsoc-week-5</link>
	<content:encoded>&lt;p&gt;This week has been mostly bug fixing and working on migrating the sympy ipython profile to sympy. I also wanted to add the functionality of &lt;code&gt;ipython -c qtconsole&lt;/code&gt;. So it has been mostly hanging in the ipython irc, asking them lots of questions on how ipython works. I am really thankful to minrk who patiently taught me how to do most of the stuff. There are a few problems that I am facing, but I think I will have the qtconsole ready in a day.&lt;/p&gt;

&lt;p&gt;I also submitted a pull request #1370 for my initial work on implicit plotting. Except for the bug of changing line thickness, it works pretty nicely. Please feel free to play with it and comment on the pull request if you encounter any bugs.&lt;/p&gt;</content:encoded>
	<dc:date>2012-06-24T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/?p=217">
	<title>Angadh Nanjangud: GSoC 2012 Post 6</title>
	<link>http://angadhsympy.wordpress.com/2012/06/23/gsoc-2012-post-6-26/</link>
	<content:encoded>&lt;p&gt;This has been a good week in terms of progress and clarity. In terms of completed code, I now have the entire suite of momenta functions working perfectly. The pull request that I linked to last week now has a series of commits. Several helpful comments were made in the PR; most of it had to with improving the readability of the docstrings and I’m extremely thankful for the time taken by everyone to review my work.&lt;/p&gt;
&lt;p&gt;Onto the details of the commits now- I implemented methods to determine linear and angular momenta of both individual particles and rigidbodies. These are working well. As I said last week, I was having trouble figuring out how to deal with a system of bodies. Consequently, I was thrown off track for a bit where I tried to figure out how I would go about doing this without having to restructure the existing code. Sadly (when I think of the time I lost doing this but simultaneously glad that I figured it out eventually), the answer had been staring me in the face. Whenever anyone uses ‘mechanics’ to compute the equations of motion, they are required to set up a body list so all I had to do was tap into that. I ultimately wrote up a little procedure that computes both the momenta for a system of rigid bodies and/or particles. I then polished up the previous tests I had written and wrote some additional tests for the newer functionality. Overall, it was very satisfying to see the body of work that has been contributed, It will be a pretty useful tool when the time comes to implement the Newton-Euler method to determine the equations of motion, though I may not be the one to do it (at least not probably within this summer) as I plan to attack Lagrange’s method for equation derivation.&lt;/p&gt;
&lt;p&gt;To that end, I spent some time this week trying to see how I would go about including Lagrange’s method. In my proposal, I have stated that the intention is to have Lagrange’s method for holonomic systems, but this is the more trivial case and is pretty well known to most dynamicists. I’m hoping that I can push the boundaries a little further and not be limited to just holonomic systems. The problem with the Lagrange approach is that it requires the determination of Lagrange multipliers whilst dealing with nonholonomic systems and this is not a method that is well documented in the classical textbooks. Finding material on this is a little tedious and I’m still uncertain about implementing this portion but I’m hopeful that it can be done.&lt;/p&gt;
&lt;p&gt;So apart from the completion of code and a literature review on Lagrange, I have begun on a function to determine partial velocities and another for kinetic energies of particles and rigidbodies. These aren’t particularly hard but I’m constantly thinking of how I would go about using these functions when it comes to Lagrange’s equations of motion. (Another issue here is that there a couple ways to determine the equations of motion of holonomic systems even in Lagrange’s approach. One involves determining a Lagrangian and performing some operations on the Lagrangian and another approach involves determining just kinetic energies and generalized forces.) The coming week will lead to some clarity on that, it appears. I ill also be talking to my grad school advisor about this matter as I’m confident he will have more insight on this.&lt;/p&gt;
&lt;p&gt;One thing that I have failed to talk about in my previous posts is the difficulty (read as ‘frustrations’) with using git. For someone with a pretty poor background in programming, the amount of jargon in python alone is hard to deal with. I remember when I was accustoming myself to git via the progit online book, it all seemed so easy. In the last few weeks, I have realized how much more harder it is to do the right things in the right order when you’re working on a real project and not on an example. Somwhow theory is always easier than practice. The frustrations that I had had lesser to with git and more to do with the fact that it was taking so long to master. But I took some solace after conversations with the other people in my lab who have worked on it when they said that it took them a while to get to grips with it. But nonetheless, I can see why it such an important tool. Over the last couple of weeks, I have gotten very familiar with not only the trivial aspects of making new branches and rebasing but also with the more powerful things like branching off of the right branches correctly and just in general better planning of projects. It was also also useful to learn that I could pull work from other people and collaborate on their work too.&lt;/p&gt;
&lt;p&gt;One of the lessons that I have learned this week though is that I shouldn’t be worried about being a bit of a slow coder as everyone takes a while to get fast at things. What’s more important is to have ‘usable’ code. BUT I will be picking up the pace from here on, I believe. Python has definitely got me interested in programming like never before. All in all. a pretty good week, personally.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/217/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/217/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/217/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/217/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/217/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/217/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/217/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/217/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/217/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/217/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/217/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/217/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/217/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/217/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=217&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-23T09:17:51+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=130">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 4</title>
	<link>http://amakelov.wordpress.com/2012/06/18/google-summer-of-code-2012-week-4/</link>
	<content:encoded>&lt;p&gt;Hi everyone,&lt;/p&gt;
&lt;p&gt;Here’s a brief summary of what I’ve been doing for the 4-th week of my GSoC.&lt;/p&gt;
&lt;p&gt;This week, like the previous one, was not intense in terms of coding. Here’s what I have up and running, basically what I was talking about last week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A working implementation of the randomized Schreier-Sims algorithm. This still needs to be integrated with the deterministic version of the algorithm, using the fields  _base, _coset_repr, _coset_repr_n, stabilizers_gens so that a result from the randomized algorithm can be verified deterministically. Also, it’s been &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/10/google-summer-of-code-2012-week-3/#comments&quot; target=&quot;_blank&quot;&gt;suggested &lt;/a&gt;that we have a function that determines the base and transversal elements for the basic orbits by a given generating set that is known to be strong. This won’t be hard to implement, and will be helpful for the Butler-Portugal algorithm for tensor canonicalization – see &lt;a href=&quot;https://github.com/sympy/sympy/pull/1326#issuecomment-6236332&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; pull request for more information if you are interested! For more on bases and strong generating sets, see [1], pp.101-119&lt;/li&gt;
&lt;li&gt;A function &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctext%7BDirectProduct%28%2Agroups%29%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\text{DirectProduct(*groups)}&quot; class=&quot;latex&quot; title=&quot;\text{DirectProduct(*groups)}&quot; /&gt; that constructs the direct product of several groups. For more than two groups, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctext%7BDirectProduct%7D%28G_1%2C%5Cldots%2C+G_n%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\text{DirectProduct}(G_1,\ldots, G_n)&quot; class=&quot;latex&quot; title=&quot;\text{DirectProduct}(G_1,\ldots, G_n)&quot; /&gt; is several times faster than calling &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G_1%2A%5Cldots+%2A+G_n&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G_1*\ldots * G_n&quot; class=&quot;latex&quot; title=&quot;G_1*\ldots * G_n&quot; /&gt; (benchmarked it), thus it makes sense to have such a function. This is later used in constructing an arbitrary abelian group by its cycle decomposition.&lt;/li&gt;
&lt;li&gt;A function for calculating the degree of transitivity of a permutation group. The idea is very brute-force: we look at the orbit of a &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k%2B1&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;k+1&quot; class=&quot;latex&quot; title=&quot;k+1&quot; /&gt;-tuple &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%280%2C+1%2C+%5Cldots%2C+k%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(0, 1, \ldots, k)&quot; class=&quot;latex&quot; title=&quot;(0, 1, \ldots, k)&quot; /&gt; for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k+%3D+0%2C+1%2C+%5Cldots%2C+n-1&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;k = 0, 1, \ldots, n-1&quot; class=&quot;latex&quot; title=&quot;k = 0, 1, \ldots, n-1&quot; /&gt; and check if it spans all possible &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k%2B1&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;k+1&quot; class=&quot;latex&quot; title=&quot;k+1&quot; /&gt;-tuples. This is really bad since the number of tuples is growing like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%5E%7Bk%2B1%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n^{k+1}&quot; class=&quot;latex&quot; title=&quot;n^{k+1}&quot; /&gt;, hence the complexity is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=O%28n%5E%7Bk%2B1%7Dr%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;O(n^{k+1}r)&quot; class=&quot;latex&quot; title=&quot;O(n^{k+1}r)&quot; /&gt; where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; is the degree of transitivity, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;r&quot; class=&quot;latex&quot; title=&quot;r&quot; /&gt; is the number of generators. It seems that some sort of randomization that checks only several randomly chosen tuples for membership in the orbit will decrease the complexity, but to make sure we still need to do all the checks if the random tuples pass, which is again &lt;img src=&quot;http://s0.wp.com/latex.php?latex=O%28n%5E%7Bk%2B1%7Dr%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;O(n^{k+1}r)&quot; class=&quot;latex&quot; title=&quot;O(n^{k+1}r)&quot; /&gt;. Some bound on the probability will be good to know here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main focus this week was on several discussions about future changes in the permutation groups module, and on making some more effort to get my code so far merged &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt;  :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/sympy/dpeN1Z9pf9c&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; post to the mailing list, it was suggested to implement an algorithm for intersecting subgroups of a given group so that it can be used in the tensor canonicalization algorithm (again, see &lt;a href=&quot;https://github.com/sympy/sympy/pull/1326#issuecomment-6236332&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;). This is done in [1] but seems fairly complicated and opens the subject of backtrack searches in permutation groups; I’ll try to figure it out and implement it this coming week.&lt;/li&gt;
&lt;li&gt;In &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/sympy/2el1T0ZY-Z4&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; post to the mailing list, we discussed ways of testing randomized algorithms (and there are a lot of them involved in computational group theory), and an agreement was reached that some sort of manual setting of the randomized output (via an additional argument) is a sensible approach.&lt;/li&gt;
&lt;li&gt;In &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/sympy/xRXpKZuvpzg&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; post to the mailing list, we discussed some changes in interface in the permutations module. Even though not everybody agrees with what I last suggested, I’ll carry these changes out and see how things unfold (i.e., whether people are happy)&lt;/li&gt;
&lt;li&gt;Finally, my work from week 1 is, I hope, ready to be merged, now that I’ve made the changes suggested in the discussion of the &lt;a href=&quot;https://github.com/sympy/sympy/pull/1319&quot; target=&quot;_blank&quot;&gt;pull request&lt;/a&gt; . I (finally) got familiar with the sphinx system and building the docs for sympy, and with all the conventions for writing docstrings (and convinced myself that I’ve been writing them the wrong way, I’ll fix all the docstrings in the module in the future). By the way, I installed the sphinx system in a virtualenv at the suggestion of S. Krastanov, and found the following &lt;a href=&quot;http://iamzed.com/2009/05/07/a-primer-on-virtualenv/&quot; target=&quot;_blank&quot;&gt;guide &lt;/a&gt;really helpful in the process. When the week1 branch gets merged, a pull request with the week2 code will follow shortly, and then with the rest of the code so far…&lt;/li&gt;
&lt;li&gt;And in &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/sympy/bc2viXVsVmU&quot; target=&quot;_blank&quot;&gt;this &lt;/a&gt;discussion, there were some more changes suggested, for example David proposed isolating the named groups (Symmetric, Dihedral, …) in a separate module, which I’m going to do in one of the next pull requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, that’s it for now. Next week I’ll focus on getting some more of my code merged and backtrack searches.&lt;/p&gt;
&lt;p&gt;[1] Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/130/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/130/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/130/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/130/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/130/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/130/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/130/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/130/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/130/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/130/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/130/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/130/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/130/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/130/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=130&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-18T00:30:18+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=336">
	<title>Stefan Krastanov: Integral Curves of Vector Fields in SymPy</title>
	<link>http://krastanov.wordpress.com/2012/06/17/integral-curves-of-vector-fields-in-sympy/</link>
	<content:encoded>&lt;p&gt;A week or two ago I implemented some basic functionality for work with integral curves of vector fields. However, I needed to make additional changes in other parts of SymPy in order for the ODE solver to work with systems of equations and with initial conditions. I also wanted to get my plotting module merged so I can show some visualizations if necessary.&lt;/p&gt;
&lt;p&gt;Now that all this is ready (even though not everything is merged in SymPy master) I can show you some of the most basic capabilities implemented in the differential geometry module. First, we start with the boilerplate:&lt;/p&gt;
&lt;h3&gt;A Simple Field&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;from sympy.diffgeom import *
from sympy.diffgeom.Rn import * # This gives me:
                                    #   - R2_p - the polar coord system
                                    #   - R2_r - the rectangular coord system
                                    #   - x,y,r,theta - the base scalar fields
                                    #   - e_x, ... - the base vector fields
# Define some fields to play with
# (these are the same fields, defined in two different ways):
vector_field_circular_p = R2_p.e_theta
vector_field_circular_r = -R2.y*R2.e_x + R2.x*R2.e_y
# Define the same point in two different ways
point_p = R2_p.point([1,pi/2])
point_r = R2_r.point([0,1])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The r index is for rectangular coordinate systems and the p index is for polar.&lt;/p&gt;
&lt;p&gt;Now using &lt;code&gt;intcurve_diffequ&lt;/code&gt; we can generate the differential equations for the integral curve. This function also generates the required initial conditions:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;#        vector field      free parameter for    starting point
#                  |        the curve     |     /          coord system
#                  v                      v    v      v-- for the equation
intcurve_diffequ(vector_field_circular_p, t, point_p, R2_p)
# output:
#   d            d
#([ ──(f₀(t)),   ──(f₁(t)) - 1  ],
#   dt           dt
#
#                        π
# [f₀(0) - 1,    f₁(0) - ─      ])
#                        2

intcurve_diffequ(vector_field_circular_p, t, point_p, R2_r)
# output:
#           d                     d
#([ f₁(t) + ──(f₀(t)),   -f₀(t) + ──(f₁(t))  ],
#           dt                    dt
#
# [ f₀(0),               f₁(0) - 1           ])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Here we have equations for the functions &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f_0&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;f_0&quot; class=&quot;latex&quot; title=&quot;f_0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f_1&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;f_1&quot; class=&quot;latex&quot; title=&quot;f_1&quot; /&gt; which are by convention the names that &lt;code&gt;intcurve_diffequ&lt;/code&gt; gives for the first and second coordinate.&lt;/p&gt;
&lt;p&gt;The cool thing is that we can mix the coordinate systems in any way we wish. The code will automatically make the needed coordinate transformation and return the equations in the demanded coordinate system independently of the coordinate systems in which the input objects were defined (at worst you will need to call some simplification routines):&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;a = intcurve_diffequ(vector_field_circular_p, t, point_p, R2_r)
a == intcurve_diffequ(vector_field_circular_p, t, point_r, R2_r)
# True
a == intcurve_diffequ(vector_field_circular_r, t, point_r, R2_r)
# True
a == intcurve_diffequ(vector_field_circular_r, t, point_p, R2_r)
# True
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Solving the equations actually gives (this solver is not yet in SymPy master as of the time of writing):&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;equ_r, init_r = intcurve_diffequ(vector_field_circular_r, t, point_r, R2_r)
sol_r = dsolve(equ_r+init_r, [Function('f_0')(t), Function('f_1')(t)])
[simplify(s.rewrite(sin)) for s in sol_r] # some simplification
#[f₀(t) = -sin(t), f₁(t) = cos(t)]            # is necessary because
                                              # dsolve returned complex
                                              # exponentials
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Even simpler:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;equ_p, init_p = intcurve_diffequ(vector_field_circular_p, t, point_p, R2_p)
dsolve(equ_p+init_p, [Function('f_0')(t), Function('f_1')(t)])
# output:
#[f₀(t) = 1,
#             π
# f₁(t) = t + ─
#             2]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This is obviously just a circle (did I mentioned that the vector field that I defined is circular). There is no need to plot it as it is fairly simple. However a slight change will render the field a bit more interesting:&lt;/p&gt;
&lt;h3&gt;Radial Component&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# A circular field that also pushes in radial direction
# towards an equilibrium radius.
v_field = R2.e_theta + (r0 - R2.r)*R2.e_r
# An initial position slightly away from the
# equilibrium one.
start_point = R2_p.point([r0+delta, 0])
equ, init = intcurve_diffequ(v_field, t, start_point)
equ
#                d            d
#[ -r₀ + f₀(t) + ──(f₀(t)),   ──(f₁(t)) - 1 ]
#                dt           dt

init
#[-δ - r₀ + f₀(0), f₁(0)]

dsolve(equ+init, [Function('f_0')(t), Function('f_1')(t)])
#            -t
#[f₀(t) = δ⋅ℯ   + r₀, f₁(t) = t]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This gives a spiral tending towards the equilibrium radius &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r_0&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;r_0&quot; class=&quot;latex&quot; title=&quot;r_0&quot; /&gt;. Let us extract the coordinates from these equations and plot the resulting curve:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;intcurve_coords = [eq.rhs for eq in dsolve(equ+init, [Function('f_0')(t), Function('f_1')(t)])]
intcurve_coords
#    -t
#[δ⋅ℯ   + r₀, t]

# We need this in Cartesian coordinates for the plot routine.
# We could have solved for Cartesian coordinates since the
# beginning, however our current approach permits us to see
# how to use the `CoordSys` classes to change coordinate systems:
coords_in_cartesian = R2_p.point(intcurve_coords).coords(R2_r)
coords_in_cartesian
#⎡⎛   -t     ⎞       ⎤
#⎢⎝δ⋅ℯ   + r₀⎠⋅cos(t)⎥
#⎢                   ⎥
#⎢⎛   -t     ⎞       ⎥
#⎣⎝δ⋅ℯ   + r₀⎠⋅sin(t)⎦

# Substitute numerical values for the plots:
x,y = coords_in_cartesian.subs({delta:0.5, r0:1})
plot(x,y, (t,0,4*pi))
#Plot object containing:
#[0]: parametric cartesian line:
#      ((1 + 0.5*exp(-t))*cos(t), (1 + 0.5*exp(-t))*sin(t))
#      for t over (0.0, 12.566370614359172)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://krastanov.files.wordpress.com/2012/06/integral_curve.png&quot;&gt;&lt;img src=&quot;https://krastanov.files.wordpress.com/2012/06/integral_curve.png?w=300&amp;amp;h=225&quot; title=&quot;integral_curve&quot; height=&quot;225&quot; width=&quot;300&quot; alt=&quot;simple integral curve&quot; class=&quot;aligncenter size-medium wp-image-354&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is all great, but what happens if one has to work with more complicated fields. For instance the following simple field will not permit analytical solution:&lt;/p&gt;
&lt;h3&gt;No Analytical Solution&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;v_field = R2.e_theta + r0*sin(1 - R2.r/r0)*R2.e_r
equ, init = intcurve_diffequ(v_field, t, start_point)
equ
#[
#        ⎛    f₀(t)⎞   d
#- r₀⋅sin⎜1 - ─────⎟ + ──(f₀(t))
#        ⎝      r₀ ⎠   dt       ,
#
#d
#──(f₁(t)) - 1
#dt           ]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;For cases like this one the user can take advantage of one of the numerical ODE solvers from scipy. Or sticking to symbolic work he can use the &lt;code&gt;intcurve_series&lt;/code&gt; function that gives the series expansion for the curve:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;intcurve_series(v_field, t, start_point, n=1)
#⎡δ + r₀⎤
#⎢      ⎥
#⎣  0   ⎦

intcurve_series(v_field, t, start_point, n=2)
#⎡            ⎛    δ + r₀⎞     ⎤
#⎢δ + r₀⋅t⋅sin⎜1 - ──────⎟ + r₀⎥
#⎢            ⎝      r₀  ⎠     ⎥
#⎢                             ⎥
#⎣              t              ⎦

intcurve_series(v_field, t, start_point, n=4, coeffs=True)
#[
#⎡δ + r₀⎤
#⎢      ⎥
#⎣  0   ⎦,
#
#⎡        ⎛    δ + r₀⎞⎤
#⎢r₀⋅t⋅sin⎜1 - ──────⎟⎥
#⎢        ⎝      r₀  ⎠⎥
#⎢                    ⎥
#⎣         t          ⎦,
#
#⎡     2    ⎛    δ + r₀⎞    ⎛    δ + r₀⎞⎤
#⎢-r₀⋅t ⋅sin⎜1 - ──────⎟⋅cos⎜1 - ──────⎟⎥
#⎢          ⎝      r₀  ⎠    ⎝      r₀  ⎠⎥
#⎢──────────────────────────────────────⎥
#⎢                  2                   ⎥
#⎢                                      ⎥
#⎣                  0                   ⎦,
#
#⎡      ⎛     2                  2            ⎞                ⎤
#⎢    3 ⎜      ⎛    δ + r₀⎞       ⎛    δ + r₀⎞⎟    ⎛    δ + r₀⎞⎥
#⎢r₀⋅t ⋅⎜- sin ⎜1 - ──────⎟ + cos ⎜1 - ──────⎟⎟⋅sin⎜1 - ──────⎟⎥
#⎢      ⎝      ⎝      r₀  ⎠       ⎝      r₀  ⎠⎠    ⎝      r₀  ⎠⎥
#⎢─────────────────────────────────────────────────────────────⎥
#⎢                              6                              ⎥
#⎢                                                             ⎥
#⎣                              0                              ⎦]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;However these series do not always converge to the solution, so care should be taken.&lt;/p&gt;
&lt;p&gt;There are other amusing possibilities already implemented, however I will write about them another time.&lt;/p&gt;
&lt;p&gt;If you want to suggest more interesting examples, please do so in the comments.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/336/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/336/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/336/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/336/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/336/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/336/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/336/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/336/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/336/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/336/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/336/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/336/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/336/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/336/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;amp;blog=15251174&amp;amp;post=336&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-17T20:40:16+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=200">
	<title>Sergiu Ivanov: The Matrix</title>
	<link>http://scolobb.wordpress.com/2012/06/17/the-matrix/</link>
	<content:encoded>&lt;p&gt;Since &lt;a href=&quot;https://github.com/sympy/sympy/pull/1338&quot;&gt;my implementation&lt;/a&gt; of the base classes of category theory has received an “almost good to go” status, I am now fully transitioning into the second stage of &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;my project&lt;/a&gt;: drawing diagrams.  I expect this stage to be considerably more thrilling since during it I am going to write some actual functionality, i.e., code that does something useful™.&lt;/p&gt;
&lt;p&gt;Well, I guess I don’t really have to expect anything any more, since I am already thrilled: a couple days ago I found an awesome LaTeX package, &lt;a href=&quot;http://www.tug.org/applications/Xy-pic/&quot;&gt;Xy-pic&lt;/a&gt;, which allows typesetting precisely what I need: diagrams with grid-like layout.  This Wikipedia &lt;a href=&quot;http://en.wikipedia.org/wiki/File:First_isomorphism_theorem_(plain).svg&quot;&gt;page&lt;/a&gt; shows how easy it is do produce a commutative diagram with this package.  My initial plan was to go with &lt;a href=&quot;http://www.texample.net/tikz/&quot;&gt;TikZ&lt;/a&gt;, which is also awesome, but it is much better for more general drawing tasks.  With TikZ, it would have been necessary to manually arrange objects in the diagram in a grid, place text over arrows, and decide as to how the arrows should curve.  This is not the most difficult part of the diagram drawing business, but it is always nice to use some stuff which someone else has already done (better).&lt;/p&gt;
&lt;p&gt;In this post I will try to outline how I see the implementation of the diagram drawing functionality now, after I have went through the review process of my first large chunk of code in SymPy.&lt;/p&gt;
&lt;p&gt;According to the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;proposal&lt;/a&gt;, the process of drawing a diagram includes two stages.  After the first stage, the matrix which will serve as the outline of the visual representation of the diagram should be constructed.  I plan to have the whole first stage done in the &lt;tt&gt;DiagramGrid&lt;/tt&gt; class, which will be constructed from a &lt;tt&gt;Diagram&lt;/tt&gt; and will act a lot like a matrix in that it will be possible to see its dimensions and what lies at a position given by rectangular coordinates.  It will also be possible to find out which morphisms connect a certain node in the matrix to other nodes, and whether it is likely that it overlaps with other morphisms or not.  Here the job of &lt;tt&gt;DiagramGrid&lt;/tt&gt; ends.  A minor remark is nevertheless due before proceeding to the actual drawing.  In the proposal I stated that certain objects which don’t fit easily in the existing matrix will be arranged in a circle around the existing structure.  I have abolished this, because it will break the idea of typesetting the diagram in a matrix, which makes the whole thing considerably harder to handle.  Instead, these “unfitting” objects will be placed along one of the four edges of the frame of the diagram, while the morphisms going into these objects will be marked with the flag which shows that they may overlap with other morphisms.&lt;/p&gt;
&lt;p&gt;The second stage of the diagram drawing process is actually typesetting the diagram matrix using Xy-pic.  This part should be pretty straightforward, since it is basically about putting the matrix that has resulted from the first stage into an Xy-pic matrix.  I plan to have the second stage of drawing implemented in the class &lt;tt&gt;DiagramGridDrawer&lt;/tt&gt;.  This class will contain the method &lt;tt&gt;draw_outline&lt;/tt&gt;, which will return an Xy-pic representation of a &lt;tt&gt;DiagramGrid&lt;/tt&gt;.  The drawer class will have a dictionary of morphism name formatters, which will associate a property to a function of one string argument.  For example, the property “exists” may be associated to a function which prepends its argument with the mathematical symbol “exists”.  The drawer class will also have a dictionary of morphism styles, which will map string properties to arrow styles.  I have also considered taking advantage of the fact that morphism properties are not enforced to be strings, and putting some additional formatting information into those properties.  I am not yet sure that it is necessary, though, so I don’t include this into the plan.&lt;/p&gt;
&lt;p&gt;Now, there are some changes to the timeline in the proposal, which are caused in part by the fact that I have spent so much time on bringing my first pull request up to scratch, and in part by the fact that I now have a slightly different vision on how to implement the drawing.  Thus I plan to spend the coming week, June 18 – June 24, on implementing &lt;tt&gt;DiagramGrid&lt;/tt&gt;.  Then, in the next week, June 25 – July 1, I plan to implement &lt;tt&gt;DiagramGridDrawer&lt;/tt&gt; and extensively test both classes.  The week July 2 – July 8 I reserve for getting my changes merged.  Not that I expect to spend a whole week on this; but I’d rather allocate slightly more time, with some reserve, than make promises which I may fail to fulfill.&lt;/p&gt;
&lt;p&gt;I would like to explicitly remark the fact that the changes to the timeline do not delay the moment when I plan to have the drawing functionality ready.  Therefore I’m still not too far astray from my planned timing &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=200&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-16T22:34:34+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/2012/06/16/gsoc-2012-post-5-35/">
	<title>Angadh Nanjangud: GSoC 2012 post 5</title>
	<link>http://angadhsympy.wordpress.com/2012/06/16/gsoc-2012-post-5-35/</link>
	<content:encoded>&lt;p&gt;This has been a very interesting week for me. I have learned a lot more about the intricacies of Python and how sympy.physics.mechanics has been written. I should admit that as an engineer, my programming background isn’t as strong as that of others so maybe I’m not asking the right questions. But I’m also with several questions after writing my first ‘formal’ code.&lt;/p&gt;
&lt;p&gt;I have opened a &lt;a href=&quot;https://github.com/sympy/sympy/pull/1346/files#r982392&quot;&gt;pull request&lt;/a&gt; with my functions for angular momenta for both particles and rigid body. I don’t intend to go into the details of the mechanics of it but one thing that I have asked myself upon writing my first set of code is whether it is useful in and of itself. I’m not convinced about it being the best implementation. The code definitely spits out the (linear or angular) momentum of any individual component of a system but I haven’t found a suitable way to determine the momentum of an entire system that may compromise a multi-body system i.e. one that has more than one kind of object, in this case ‘Particles’ and ‘RigidBodies’. I believe it is fairly trivial to deal with just one of these object types when they comprise a system but it’s a lot more intriguing to think about how to incorporate a system with multiple objects. The way I’m thinking of it right now is that ‘Particles’ and ‘RigidBodies’ must be derived classes of a more general class, somethig like ‘class System(object):’ with the rest of the code following that. But I also feel, at the same time, that I’m not approaching this problem the right way. I gave myself a couple days to figure this out and I was really hoping that I could figure this out on my own but I guess I will need more guidance on this issue. This has also made me question the simple code that I have to determine the energies, kinetic and potential, of either system. It is useful as it stands for individual components of multibody systems as it is trivial to have a method to determine either energy of a particle or a rigid body but adding this functionality keeping in mind that it has to be used to determine the Lagrangian of a more complex multibody system is also proving to be a bit of barrier. I’m uncertain but I feel that the answer to this also lies in what I have spoken about prior- the issues with angualr momentum of a system.&lt;/p&gt;
&lt;p&gt;This has been primarily what has dominated my time since I have worked on my momenta functions.&lt;/p&gt;
&lt;p&gt;In terms of tangibles, I have the momenta code up and running. I have also tested the better checking methods for vectors and dyadics as per &lt;a href=&quot;https://github.com/sympy/sympy/pull/1269#issuecomment-6346970&quot;&gt;PR 1269&lt;/a&gt;. (Note- That particular pull request has proven to be extremely crucial to my work. When angular momentum vector of a rigid body is to be found about the mass center, the generic formula for angular momentum that I implemented in ‘mechanics’ falls apart because in the math that follows, a cross product between a zero vector and a non zero vector needs to be performed. It turns out that the methods currently available in ‘mechanics’  aren’t up to task to cope with this (even though cross products between a vector and a zero vector are performed correctly.)) After having spent almost 2 days trying to examine why this generic formula wasn’t working, I ended up writing some patchy code with some conditional statements for the angular momentum to work with the current setup. After this I went through Gilbert’s updated code (PR 1269) and saw that it handles the math being performed in my angular momentum function perfectly. I hope that both that PR and mine get merged in that order. And as I am also waiting on that merge, I have been furhter examining the pydy.org website. I have jotted down several recommendations that I have to make for that page. This will prove to be important because that is the page that students in UC Davis use to learn sympy.physics,mechanics. As this has already turned into a bit of a prosaic blog post, I shall end this here. But, yes this has been a long week and a lot has been learned and I’m pretty satisfied with what I’ve learned and am even more invigorated for all that is in store in the coming weeks.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/167/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/167/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/167/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/167/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/167/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/167/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/167/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/167/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/167/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/167/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/167/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/167/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/167/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/167/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=167&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-16T12:34:48+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=186">
	<title>Sergiu Ivanov: The Re-Setting</title>
	<link>http://scolobb.wordpress.com/2012/06/16/the-re-setting/</link>
	<content:encoded>&lt;p&gt;I have just finished complying with what I hope to be among the closing waves of remarks on the &lt;a href=&quot;https://github.com/sympy/sympy/pull/1338&quot;&gt;pull request&lt;/a&gt; I opened last week.  That pull request adds the classes which model some of the fundamental notions in category theory: &lt;tt&gt;Object&lt;/tt&gt;, &lt;tt&gt;Morphism&lt;/tt&gt;, &lt;tt&gt;Diagram&lt;/tt&gt;, &lt;tt&gt;Category&lt;/tt&gt;.  I described these classes in detail in the &lt;a href=&quot;http://scolobb.wordpress.com/2012/06/11/the-setting/&quot;&gt;previous post&lt;/a&gt;.  This week has been revolutionary for those classes, since all all of them have suffered great changes, and the first two of them, &lt;tt&gt;Object&lt;/tt&gt; and &lt;tt&gt;Morphism&lt;/tt&gt;, have changed to be something radically different.&lt;/p&gt;
&lt;p&gt;The most important change concerns morphisms.  In my initial version, I had one class to represent any morphism.  When fitting it into the architecture of SymPy, it turned out that distinguishing between an identity morphism and a non-identity morphism wasn’t quite that easy, because it is impossible to store a Python Boolean value in &lt;tt&gt;Basic.args&lt;/tt&gt;.  The suggested solution was to splinter identity morphisms into a separate class.  Later, my mentor Tom Bachmann noticed that an even finer granularity was necessary.  Indeed, according to the code defined at that moment, if a morphism was a composite, &lt;em&gt;and&lt;/em&gt; had a name, then that name wouldn’t matter at all at comparisons or at printing.  Therefore, composite morphisms don’t really seem to be the same kind of beast as named morphisms.  And yet again, identity morphisms belong to a separate class of things.&lt;/p&gt;
&lt;p&gt;According to this idea, I completely threw away the old &lt;tt&gt;Morphism&lt;/tt&gt; and &lt;tt&gt;IdentityMorphism&lt;/tt&gt;, and replaced them with &lt;tt&gt;NamedMorphism&lt;/tt&gt;, &lt;tt&gt;IdentityMorphism&lt;/tt&gt;, &lt;tt&gt;CompositeMorphism&lt;/tt&gt;, and a different &lt;tt&gt;Morphism&lt;/tt&gt; to serve as the base class.  I have also removed the possibility to create anonymous morphisms.  This has resulted in shorter, easier to use, more flexible, and less error-prone code.  The experience was absolutely great &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Besides this change, I’ve done numerous corrections and enhancements, which have hopefully brought my code up to scratch.  I have received the relieving “almost good to go” comment from my mentor; sounds almost unbelievable &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;The downside of this is that I have spent on grooming my code &lt;em&gt;considerably&lt;/em&gt; more time than I initially expected.  This means that I have to hurry up with the next sections of my timeline.&lt;/p&gt;
&lt;p&gt;This week I have also found something which will hopefully make implementing the diagram drawing functionality more piece-of-cakely: &lt;a href=&quot;http://www.tug.org/applications/Xy-pic/&quot;&gt;Xy-pic&lt;/a&gt;.  My next bit of effort will therefore be directed towards mastering this package and adapting my initial plan to this (rather radical) change of strategy.  This will be reflected in the next blog post, which is due to come soon.  Very soon &lt;img src=&quot;http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif&quot; alt=&quot;;-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/186/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/186/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/186/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/186/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/186/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/186/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/186/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/186/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/186/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/186/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/186/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/186/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/186/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/186/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=186&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-15T22:55:50+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="https://asmeurersympy.wordpress.com/?p=1109">
	<title>Aaron Meurer: How to install the development version of IPython Qtconsole and Notebook in Ubuntu</title>
	<link>http://asmeurersympy.wordpress.com/2012/06/14/how-to-install-the-development-version-of-ipython-qtconsole-and-notebook-in-ubuntu/</link>
	<content:encoded>&lt;p&gt;Both the awesome &lt;a href=&quot;http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html&quot;&gt;IPython notebook&lt;/a&gt; and &lt;a href=&quot;http://ipython.org/ipython-doc/stable/interactive/qtconsole.html&quot;&gt;Qtconsole&lt;/a&gt; are in the Ubuntu repositories, so if you just want to use the stable released versions, you can just do&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: bash;&quot;&gt;sudo apt-get install ipython-notebook ipython-qtconsole
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;and be on your way.  But the git development version has a lot of cool new features, and you may not want to wait for 0.13 to be released and make its way to the Ubuntu repos.  But you may be thinking that to use those you will have to figure out all the dependencies yourself.  Actually, it’s pretty easy:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: bash;&quot;&gt;# First install git, if you don't already have it
sudo apt-get install git
# Then, clone the IPython repo, if you haven't already.
git clone git://github.com/ipython/ipython.git
cd ipython
# Now just install IPython with apt, then uninstall it.  The dependencies will remain
sudo apt-get install ipython-notebook ipython-qtconsole
sudo apt-get remove ipython-notebook ipython -qtconsole ipython
# Now install the IPython git version in such a way that will keep up to date when you pull
sudo python setup.py develop
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;To update, just cd into that ipython directory and type &lt;code&gt;git pull&lt;/code&gt;.  That’s it.  Now type &lt;code&gt;ipython notebook&lt;/code&gt; or &lt;code&gt;ipython qtconsole&lt;/code&gt; to get the magic.&lt;/p&gt;
&lt;p&gt;EDIT: After you do this, &lt;code&gt;apt-get&lt;/code&gt; will start bugging you every time that you use it that a bunch of packages are no longer needed.  These are the ones that you do need for the qtconsole and the notebook, so you should not autoremove them as it says.  Rather, set them as manually installed by copying the list of packages that it tells you about and &lt;code&gt;sudo apt-get install&lt;/code&gt;ing them.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1109/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1109/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1109/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1109/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1109/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1109/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1109/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1109/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1109/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1109/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1109/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1109/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1109/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1109/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1109&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-14T05:49:08+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=115">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 3</title>
	<link>http://amakelov.wordpress.com/2012/06/10/google-summer-of-code-2012-week-3/</link>
	<content:encoded>&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;there wasn’t much coding done on my project this week; I’ve been going over the different versions of the Schreier-Sims algorithm as described in [1]; there is currently an implementation with using Jerrum’s filter as an optimization (see &lt;a href=&quot;http://www.m8j.net/%28All%29Schreier%20Sims%20Algorithm&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt;), and I’ve almost implemented the faster randomized version described in [1]. It remains to see how to integrate both so that the output of the randomized version can be verified, and how to use the deterministic implementation in order to do variations of the Schreier-Sims algorithm, for example when the order of the group is known in advance, or when a base is known. Also, it might be appropriate to switch between storing transversals explicitly (requires a lot of memory, but increases speed) and using schreier vectors insted (much less memory, slower access to transversal elements) depending on the degree of the permutation group.&lt;/p&gt;
&lt;p&gt;Apart from that, there’s been work on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finding the degree of transitivity for a permutation group: using the function orbit as acting on tuples of points, but the algorithm is sort of brute-force and becomes large for groups of large degree or large degree of transitivity.&lt;/li&gt;
&lt;li&gt;Constructing abelian groups as permutation groups, by their decomposition as a direct sum of cyclic groups of given orders (per the &lt;a href=&quot;http://en.wikipedia.org/wiki/Abelian_group#Finite_abelian_groups&quot; target=&quot;_blank&quot;&gt;classification&lt;/a&gt; of finite abelian groups), i.e. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A+%3D+%5Ctext%7BAbelianGroup%7D%28%5B3%2C4%2C5%5D%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;A = \text{AbelianGroup}([3,4,5])&quot; class=&quot;latex&quot; title=&quot;A = \text{AbelianGroup}([3,4,5])&quot; /&gt; is the group isomorphic to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C_3+%5Coplus+C_4+%5Coplus+C_5&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;C_3 \oplus C_4 \oplus C_5&quot; class=&quot;latex&quot; title=&quot;C_3 \oplus C_4 \oplus C_5&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My code from the first two weeks is not yet merged, so next week I’ll focus on getting my pull requests reviewed, and will probably do a combined pull request next week including the code from this week. The &lt;a href=&quot;https://groups.google.com/group/sympy/browse_thread/thread/c515e9299bafa738&quot; target=&quot;_blank&quot;&gt;discussion&lt;/a&gt; I started on the mailing list received some attention and it is now a bit clearer what changes to the interface are going to be desirable. Also, it seems that a wider array of available groups to work with will be helpful for testing purposes (i.e., groups of large degree with a small base and other interesting types of groups).&lt;/p&gt;
&lt;p&gt;[1] Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/115/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/115/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/115/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/115/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/115/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/115/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/115/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/115/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/115/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/115/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/115/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/115/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/115/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/115/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=115&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-10T22:37:15+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=119">
	<title>Sergiu Ivanov: The Setting</title>
	<link>http://scolobb.wordpress.com/2012/06/11/the-setting/</link>
	<content:encoded>&lt;p&gt;This week has been my first week fully-dedicated to GSoC and my (absolutely beloved) category-theory-related &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First off, I have finished working on the first phase of the project, entitled “Base Classes”.  In the course of this phase I have implemented the base classes (oh yeah &lt;img src=&quot;http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif&quot; alt=&quot;;-)&quot; class=&quot;wp-smiley&quot; /&gt;  ) of the category theory module, which includes &lt;tt&gt;Object&lt;/tt&gt;, &lt;tt&gt;Morphism&lt;/tt&gt;, &lt;tt&gt;Category&lt;/tt&gt;, and &lt;tt&gt;Diagram&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The names of the classes were meant to be self-documenting, but there are a couple gotchas which are determined by the pre-incipient state of the module. In the following paragraphs I will try to briefly overview the classes and point out the things which may be unexpected.&lt;/p&gt;
&lt;p&gt;The first two classes in the enumeration are pretty straightforward. The class &lt;tt&gt;Object&lt;/tt&gt; represents an object in an abstract category. Since we’re talking about abstract categories, an object is little more than its name. The class &lt;tt&gt;Morphism&lt;/tt&gt; represents a morphism in an abstract category, which is little more than just an arrow from an object to another object. Correspondingly, a &lt;tt&gt;Morphism&lt;/tt&gt;, has a string name, an &lt;tt&gt;Object&lt;/tt&gt; which is the &lt;em&gt;domain&lt;/em&gt; (the object where the arrow begins) and &lt;em&gt;codomain&lt;/em&gt; (the object where the arrow ends). Now, morphisms can be &lt;em&gt;composed&lt;/em&gt;. Thus if you have a morphism &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; (which are objects in some (asbtract) category), and a morphism &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g&quot; class=&quot;latex&quot; title=&quot;g&quot; /&gt; from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C&quot; class=&quot;latex&quot; title=&quot;C&quot; /&gt;, then you can take their composition, which is a morphism from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C&quot; class=&quot;latex&quot; title=&quot;C&quot; /&gt;. This composite is often denoted &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%5Ccirc+f&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g\circ f&quot; class=&quot;latex&quot; title=&quot;g\circ f&quot; /&gt; (mind the order). The morphisms themselves are often written as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f:A\rightarrow B&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%3AB%5Crightarrow+C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g:B\rightarrow C&quot; class=&quot;latex&quot; title=&quot;g:B\rightarrow C&quot; /&gt;. These two morphisms are called &lt;em&gt;composable&lt;/em&gt; in this order.&lt;/p&gt;
&lt;p&gt;While in some concrete settings like set mappings, group homomorphisms, etc. the composite function/homomorphism acts in a well-defined way, there’s no way to define the action of an abstract category theoretic morphism. In correspondence with this, compositions of &lt;tt&gt;Moprhism&lt;/tt&gt;‘s yield other morphisms, which store the components they were obtained from inside themselves. Composing morphisms which were already composed is all right, since a &lt;tt&gt;Morphism&lt;/tt&gt; always stores the flattened-down version of the list of components. Thus a &lt;tt&gt;Morphism&lt;/tt&gt; representing &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%5Ccirc+%28g%5Ccirc+f%29&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;h\circ (g\circ f)&quot; class=&quot;latex&quot; title=&quot;h\circ (g\circ f)&quot; /&gt;, the composite of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%3AC%5Crightarrow+D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;h:C\rightarrow D&quot; class=&quot;latex&quot; title=&quot;h:C\rightarrow D&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%5Ccirc+f%3AA%5Crightarrow+C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g\circ f:A\rightarrow C&quot; class=&quot;latex&quot; title=&quot;g\circ f:A\rightarrow C&quot; /&gt;, will store the list of three morphisms representing &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g&quot; class=&quot;latex&quot; title=&quot;g&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; (again, mind the order).&lt;/p&gt;
&lt;p&gt;A morphism of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=id_A%3AA%5Crightarrow+A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;id_A:A\rightarrow A&quot; class=&quot;latex&quot; title=&quot;id_A:A\rightarrow A&quot; /&gt; is called an &lt;em&gt;identity&lt;/em&gt; if for any two other morphisms &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%3AX%5Crightarrow+A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f:X\rightarrow A&quot; class=&quot;latex&quot; title=&quot;f:X\rightarrow A&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%3AA%5Crightarrow+Y&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g:A\rightarrow Y&quot; class=&quot;latex&quot; title=&quot;g:A\rightarrow Y&quot; /&gt; one has &lt;img src=&quot;http://s0.wp.com/latex.php?latex=id_A%5Ccirc+f+%3D+f&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;id_A\circ f = f&quot; class=&quot;latex&quot; title=&quot;id_A\circ f = f&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%5Ccirc+id_A+%3D+g&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g\circ id_A = g&quot; class=&quot;latex&quot; title=&quot;g\circ id_A = g&quot; /&gt;, that is, identity morphisms are identities with respect to morphism composition. Instances of &lt;tt&gt;Morphism&lt;/tt&gt; which have the flag &lt;tt&gt;identity&lt;/tt&gt; set, behave exactly as one would expect them, i.e., if you try to compose with them, nothing happens (of course, I’m talking of the situation when you take a &lt;em&gt;composable&lt;/em&gt; morphism).&lt;/p&gt;
&lt;p&gt;So far so good. Here come the gotchas of &lt;tt&gt;Morphism&lt;/tt&gt;, however. Morphisms are compared by domain, codomain, and name. Thus for the representations &lt;tt&gt;f1&lt;/tt&gt; and &lt;tt&gt;f2&lt;/tt&gt; of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f_1%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f_1:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f_1:A\rightarrow B&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f_2%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f_2:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f_2:A\rightarrow B&quot; /&gt;, &lt;tt&gt;f1 == f1&lt;/tt&gt; is &lt;tt&gt;True&lt;/tt&gt; and &lt;tt&gt;f1 == f2&lt;/tt&gt; is &lt;tt&gt;False&lt;/tt&gt;, even if &lt;tt&gt;f1&lt;/tt&gt; and &lt;tt&gt;f2&lt;/tt&gt; are actually the same morphisms with different names. Now, that’s quite understandable, since a &lt;tt&gt;Morphism&lt;/tt&gt; cannot really know what you &lt;em&gt;actually&lt;/em&gt; want &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  However, with the implemented apparatus, you &lt;em&gt;can&lt;/em&gt; state that &lt;tt&gt;f1&lt;/tt&gt; and &lt;tt&gt;f2&lt;/tt&gt; are actually the same thing. Read to the end to find out how &lt;img src=&quot;http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif&quot; alt=&quot;;-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;On a side note, &lt;tt&gt;Morphism&lt;/tt&gt; is sufficiently clever to know that all identity morphisms of the same object are equal, no matter the name.&lt;/p&gt;
&lt;p&gt;Next comes &lt;tt&gt;Category&lt;/tt&gt;. Unfortunately, at the moment this class isn’t capable of doing much useful stuff. One of the reasons is that the notion of a category is based on the notion of a set-theoretical &lt;a href=&quot;http://en.wikipedia.org/wiki/Class_(set_theory)&quot;&gt;class&lt;/a&gt;, which is not implemented in SymPy yet. More importantly, though, for the purposes of this GSoC project, an essentially primitive &lt;tt&gt;Category&lt;/tt&gt; is perfectly enough. A &lt;tt&gt;Category&lt;/tt&gt; has a string name and a set of &lt;tt&gt;Diagram&lt;/tt&gt;‘s which are asserted to be commutative in this category.&lt;/p&gt;
&lt;div style=&quot;width: 210px;&quot; class=&quot;wp-caption alignright&quot; id=&quot;attachment_157&quot;&gt;&lt;a href=&quot;http://scolobb.files.wordpress.com/2012/06/200px-commutative_square-svg.png&quot;&gt;&lt;img src=&quot;http://scolobb.files.wordpress.com/2012/06/200px-commutative_square-svg.png?w=549&quot; alt=&quot;A simple square diagram with four objects and four morphisms.&quot; class=&quot;size-full wp-image-157&quot; title=&quot;A simple diagram.&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;A simple diagram.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;The last and the most interesting class in the context of this project is &lt;tt&gt;Diagram&lt;/tt&gt;. A diagram is a very cool way to write a lot of stuff in category theory and in algebra in general. A diagram is basically a bunch of objects from a category and some of the morphisms between these objects.  Diagrams are usually drawn, objects being represented as letters and morphisms as arrows between the letters.  A diagram is said to be &lt;em&gt;commutative&lt;/em&gt;, if all paths between any two objects &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; in the diagram yield the same morphism.  For example, if the diagram in the figure is commutative, then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k%5Ccirc+g+%3D+h%5Ccirc+f&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;k\circ g = h\circ f&quot; class=&quot;latex&quot; title=&quot;k\circ g = h\circ f&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;The class &lt;tt&gt;Diagram&lt;/tt&gt; is meant to represent such diagrammatic structures.  It cannot be plotted as yet; what it can do is storing a bunch of morphisms.  A &lt;tt&gt;Diagram&lt;/tt&gt; does not know whether it is commutative or not; however, one can assert that certain &lt;tt&gt;Diagram&lt;/tt&gt;‘s are commutative in a ceratain &lt;tt&gt;Category&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;Diagram&lt;/tt&gt; is actually meant to store something slightly more general than what is shown in the picture.  Suppose that the author of the picture has wanted to say that, if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; is an isomorpism, then there exists a unique moprhism &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; such that the diagram commutes.  Authors often want to say such things, therefore &lt;tt&gt;Diagram&lt;/tt&gt; contains &lt;em&gt;two&lt;/em&gt; sets of morphisms: the &lt;tt&gt;premises&lt;/tt&gt; and &lt;tt&gt;conclusions&lt;/tt&gt;.  Well, actually, those are not sets, but rather dictionaries, mapping morphisms to their properties (which are really just strings).  Thus an instance of &lt;tt&gt;Diagram&lt;/tt&gt; is read as follows: “If there exist such morphisms as in &lt;tt&gt;premises&lt;/tt&gt; with corresponding properties, than there exist such morphisms as in &lt;tt&gt;conclusions&lt;/tt&gt; with corresponding properties and the diagram is commutative”.  You can also state simpler statements which don’t look like logical implications by not using the conclusions part of the diagram.&lt;/p&gt;
&lt;p&gt;Now, &lt;tt&gt;Diagram&lt;/tt&gt; is awesome enough to also include all composite morphisms in premises (and in conclusions, when necessary).  If you specify that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f:A\rightarrow B&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%3AB%5Crightarrow+C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g:B\rightarrow C&quot; class=&quot;latex&quot; title=&quot;g:B\rightarrow C&quot; /&gt; are in the &lt;tt&gt;Diagram&lt;/tt&gt;, then you don’t have to say that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%5Ccirc+f%3AA%5Crightarrow+C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g\circ f:A\rightarrow C&quot; class=&quot;latex&quot; title=&quot;g\circ f:A\rightarrow C&quot; /&gt; is in the &lt;tt&gt;Diagram&lt;/tt&gt; as well.  There’s a small thing to keep in mind here: you sometimes add morphisms &lt;em&gt;with properties&lt;/em&gt; to a &lt;tt&gt;Diagram&lt;/tt&gt;.  When &lt;tt&gt;Diagram&lt;/tt&gt; adds the composite &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%5Ccirc+f&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g\circ f&quot; class=&quot;latex&quot; title=&quot;g\circ f&quot; /&gt; to itself, the properties of the composite will be the &lt;em&gt;intersection&lt;/em&gt; of the properties of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g&quot; class=&quot;latex&quot; title=&quot;g&quot; /&gt;.  You can always override this by explicitly adding the composite with a different set of properties.&lt;/p&gt;
&lt;p&gt;And finally, as I promised, I’ll tell how to state that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f_1%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f_1:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f_1:A\rightarrow B&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f_2%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f_2:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f_2:A\rightarrow B&quot; /&gt; are equal, despite different names.  Well, just create a diagram with these two morphisms and assert it as commutative &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;And yet even more finally, I’d like to tell about a bit of programming experience I have found exhilarating this week.   I’ve learnt a very cool lesson: write your tests before the implementation whenever possible!  There’s no better formal way to write a specification than to write tests.  I was totally amazed at how this practice streamlined my workflow!&lt;/p&gt;
&lt;p&gt;Image source: &lt;a href=&quot;http://en.wikipedia.org/wiki/File:Commutative_square.svg&quot;&gt;http://en.wikipedia.org/wiki/File:Commutative_square.svg&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/119/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/119/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/119/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/119/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/119/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/119/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/119/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/119/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/119/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/119/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/119/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/119/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/119/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/119/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=119&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-10T21:09:58+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=151">
	<title>Guru Devanla: Week 3: Activity Summary</title>
	<link>http://rhoforsympy.wordpress.com/2012/06/10/week-3-activity-summary/</link>
	<content:encoded>&lt;p&gt;My week started with some design discussion with my mentors &lt;a href=&quot;https://github.com/ellisonbg&quot;&gt;@ellisonbg&lt;/a&gt; and &lt;a href=&quot;https://github.com/flacjacket&quot;&gt;@flacjacket&lt;/a&gt;.  We had a preliminary discussion on how we should go about implementing the Tr (trace) operator.&lt;/p&gt;
&lt;p&gt;Based on the preliminary discussion, I submitted a &lt;a href=&quot;https://github.com/sympy/sympy/pull/1333&quot;&gt;PR 1333&lt;/a&gt; purely for review and got some useful comments. I went back to work and addressed almost all the comments/suggested provided and I have updated the PR with my new changes.&lt;/p&gt;
&lt;p&gt;As it stands now, the current &lt;a href=&quot;https://github.com/sympy/sympy/pull/1333&quot;&gt;PR 1333&lt;/a&gt; has the basic functionality needed for Tr operation. This version still does not handle reduced trace operations and also does not use any options passed through **kwargs.  Even, printing will have to be fixed. But, barring any major issues after few more iterations the coming week I am confident this PR can be merged.&lt;/p&gt;
&lt;p&gt;So, assuming I will not be adding any more features to the PR, my plan for next week is make sure this PR gets accepted.  Since, I am at the summer school next week, I may not be doing any other new coding activity. So, my minimal goal is to make sure this PR is merged by end of next week.&lt;/p&gt;
&lt;p&gt;I plan to branch out of this PR, to work on the following activities during next 2 weeks(mostly week after):&lt;/p&gt;
&lt;p&gt;1. Fix printing for Tr operator. Currently, the printing is pretty crude. I will also add examples for Notebook along with this task.&lt;/p&gt;
&lt;p&gt;2. Fix the is_number operation ( based on what suggestions I get). I am still to understand what “is_number” means to sympy and what scenarios Tr needs to handle.  I need to work on this property, since this property is called from the base classes for when 2 Tr objects are added through Add(*[Tr(args,indices)]) operation.&lt;/p&gt;
&lt;p&gt;3. Integrate currently existing Qubit logic for partial trace operation.&lt;/p&gt;
&lt;p&gt;The above 3 tasks should go into the next PR.&lt;/p&gt;
&lt;p&gt;4. Meanwhile, I would like to chat with my mentors and about all use cases (general/special) that we will have to address to TensorProducts wrt to density operators and eventually partial trace operations.&lt;/p&gt;
&lt;p&gt;Edit 1: Update (1) to include Notebook.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/151/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/151/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/151/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/151/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/151/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/151/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/151/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/151/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/151/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/151/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/151/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/151/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/151/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/151/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=151&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-10T04:30:31+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/06/09/gsoc-week-3">
	<title>Bharath M R: GSoC Week 3</title>
	<link>http://catchmrbharath.github.com/programming/2012/06/09/gsoc-week-3</link>
	<content:encoded>&lt;p&gt;I have almost finished with the basic framework of implicit plotting based on interval arithmetic. The module implements both continuity tracking and domain tracking. Hence it does not plot points which are not there in the domain of the function. The functionalities are best illustrated by plots. There are also a couple of limitations that I encountered, which I think is difficult to avoid. I will illustrate both the functionality and the problems through plots.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09062012/img1.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;The above image illustrates a plot which does domain tracking and continuity tracking. It is not possible for interval arithmetic without tracking, to decide whether to draw the plots near zero. But with continuity tracking we get an accurate plot.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09062012/img2.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;The above plot is that of $y = \frac{1}{\tan{\left (x \right )}}$ . It is possible to see the small discontinuity near multiples of $\pi / 2$ as $\pi / 2$ is not there in the domain of the expression.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09062012/img3.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;The above plot illustrates how sqrt does not plot anything outside its domain. Even though it appears not that significant, it becomes significant when the huge expression is provided as the argument to the function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Illustrations of more plots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Plot of $y^{2}=x^{3}-x$ &lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09062012/img4.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09062012/img5.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;The above plot took 19.26 seconds to render.&lt;/p&gt;

&lt;h2 id=&quot;problems&quot;&gt;Problems&lt;/h2&gt;

&lt;p&gt;The problem with plots using interval arithmetic is that the errors increases with the length of the expression as the it takes the lowest and the uppermost bounds. It is possible to see the effect of errors in the following plot. It is possible to see the line thickens when the expression reaches a maximum or an minimum. This is due to the error creeping in. The interval becomes wide even at the smallest of the x interval.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09062012/img6.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;It is better illustrated in the plot below. It is possible to see the width of the line increasing and then decreasing. &lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09062012/img7.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then next problem is that of rasterization. In order to avoid rasterization I tried using the Matplotlib’s &lt;code&gt;contourf&lt;/code&gt; function which implements the marching squares algorithm. Though it smoothens the curves, still there is fair bit of rasterization. The plot below is a zoomed version of $y=sin(x)$ &lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09062012/img8.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Presently the plotting function supports plotting of expressions containing &lt;code&gt;cos&lt;/code&gt;, &lt;code&gt;sin&lt;/code&gt;, &lt;code&gt;tan&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;atan&lt;/code&gt;. Implementing more functions is fairly easy. I should be able to finish most of the expressions that can be implemented in the next week. I will look into implementing plotting implicit equations for expressions which cannot be implemented using interval arithmetic.&lt;/p&gt;</content:encoded>
	<dc:date>2012-06-09T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/?p=94">
	<title>Angadh Nanjangud: GSoC 2012 Post 4</title>
	<link>http://angadhsympy.wordpress.com/2012/06/08/gsoc-2012-post-4-15/</link>
	<content:encoded>&lt;p&gt;This week I officially got started on my GSoC work. With some last minute confusions I was a day later than expected but I found that just a little over a week away from Python, and my memory was already a little rusty. It was back to the Python Tutorial for me to brush up for a short while.&lt;br /&gt;Having a less rigorous exposure to programming and only ever having dwelled in the functional programming world, dealing with the concept of ‘Classes’ has been overwhelming. I think with respect to training myself in Python through the tutorial, it is probably the topic I have spent the most time on and every time that I go through it, I seem to come across a little nugget of information that I missed or had misunderstood. With all that going on, it took me longer than I expected but I was able to get my first helper function working- the linear momentum function. It took me a lot longer than expected to get it working but it appears that I was having some issues importing the module that contained that function. It’s not completely apparent what I was doing incorrectly because I didn’t change anything in my code. Ultimately, by earlier today morning, I had the function working for both particles and rigid bodies and I have pushed the functions to my fork. I haven’t opened a pull request yet. I will do so once I have all the documentation in place. So currently, I’m just working on the documentation, just brushing up on the ‘standards’ for editing the docstring, making my tests and examples more explicit. Apart from that, I’m looking at&lt;a href=&quot;https://github.com/sympy/sympy/pull/1269#issuecomment-5417513&quot;&gt; PR 1269&lt;/a&gt;  and the documentation on &lt;a href=&quot;http://pydy.org/index.php?title=Main_Page&quot;&gt;pydy.org&lt;/a&gt;. I constantly had to explore that webpage during the winter quarter of 2012 when I was taking a multibody dynamics class which required us to learn sympy.physics.mechanics. Though the documentation is very good, it is a commonly held belief that things can be made more accessible than it is at present. So, I’m jsut exploring that to see what could be plausible ways of improving things as they currently stand. On the coding front, I will be getting on to the angular momentum helper function and also, I’m thinking of determining a way to represent a system of rigid bodies and/or particles so that composite momenta (and probably inertia too) can be computed as these are useful information to be have at one’s disposal.&lt;br /&gt;Until next week, then.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/94/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/94/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/94/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/94/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/94/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/94/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/94/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/94/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/94/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/94/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/94/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/94/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/94/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/94/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=94&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-08T22:43:37+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=67">
	<title>Aleksandar Makelov: Think small</title>
	<link>http://amakelov.wordpress.com/2012/06/07/think-small-2/</link>
	<content:encoded>&lt;p style=&quot;text-align: right;&quot;&gt;&lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy&quot; target=&quot;_blank&quot;&gt;Time is an illusion. Lunchtime doubly so.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;&lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Douglas_Adams&quot; target=&quot;_blank&quot;&gt;Douglas Adams, &lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;By the way, the &lt;a href=&quot;http://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy_%28film%29&quot; target=&quot;_blank&quot;&gt;movie&lt;/a&gt; isn’t as bad as I thought when I saw it the first time. I guess I was too narrow-minded back then.&lt;/p&gt;
&lt;p&gt;To paraphrase Douglas Adams, everyone has problems, and mathematicians doubly so. &lt;strong&gt;Problems&lt;/strong&gt; are what makes math so cool and challenging, and coming up with a nice, beautiful solution is what makes mathematicians go “WOOHOO! HAHAHAHA! OOOOH YEAH!” That’s why I want to start my discussion of mathematics with a (in my view, very interesting) problem. There is no clear way to state it rigorously, but it’s more or less intuitively clear what’s going on. So here we go: you can pick the more formalized or less formalized version; the way I first heard it (thanks to V. Valov, MIT, ’15) was in the latter version.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;strong&gt;Not so formal:&lt;/strong&gt; There are several lions and one goat (note that lions enjoy eating goats). If a lion eats a goat he turns into a goat, and each lion knows that. What is going to happen?&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;strong&gt;More formal:&lt;/strong&gt; There are &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%5Cin%5Cmathbb%7BN%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n\in\mathbb{N}&quot; class=&quot;latex&quot; title=&quot;n\in\mathbb{N}&quot; /&gt; lions and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=1&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;1&quot; class=&quot;latex&quot; title=&quot;1&quot; /&gt; goat. Each lion obeys the following set of priorities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stay alive.&lt;/li&gt;
&lt;li&gt;Eat a goat.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;in this order, meaning that he’s going to eat a goat if and only if he’ll stay alive after that. If a lion eats a goat, he’s going to turn into a goat, and each lion knows that. Also, somewhat surprisingly, lions can predict the outcome of any possible situation in the lion-goat configuration. If several lions want to eat one goat, assume that the only result of this is one of them eating the goat.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;What is going to happen?&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;***&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;If you want to get any real fun out of this blog post, you should now try to solve it for yourself.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;***&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;strong&gt;Solution.&lt;/strong&gt; I’ve already showed this problem (in the more formal version) to several people from different math backgrounds. Common first reactions were nevertheless similar: “Nothing is going to happen (implicit: each lion will avoid becoming a goat and thus being eaten)!”; or, “There is going to be one goat in the end (implicit: lions just want to eat goats. That’s it.)!” My initial reaction was similar. There is often confusion as to why the number &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%5Cin%5Cmathbb%7BN%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n\in\mathbb{N}&quot; class=&quot;latex&quot; title=&quot;n\in\mathbb{N}&quot; /&gt; should even matter.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;Then you can just get stuck, as it often happens in math (it wouldn’t be that interesting otherwise, would it?).&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;One thing I learned from the &lt;a href=&quot;http://www.imo-official.org/&quot; target=&quot;_blank&quot;&gt;olympiad&lt;/a&gt; training (good old times) was that whenever you have ” for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%5Cin%5Cmathbb%7BN%7D+&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n \in\mathbb{N} &quot; class=&quot;latex&quot; title=&quot;n \in\mathbb{N} &quot; /&gt;…”, and no real ideas what to do, you should just start with looking at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%3D1%2C+n%3D2%2C+n%3D3%2C%5Cldots+&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n=1, n=2, n=3,\ldots &quot; class=&quot;latex&quot; title=&quot;n=1, n=2, n=3,\ldots &quot; /&gt; and try to find a pattern. It’s that simple, and yet often overlooked by contestants.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%3D1&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n=1&quot; class=&quot;latex&quot; title=&quot;n=1&quot; /&gt;. Well, he’s either going to eat the goat or not. But there’s no one else to eat him if he does, so the list of priorities tells us that he’s gonna have a meal. Yay! So for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%3D1&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n=1&quot; class=&quot;latex&quot; title=&quot;n=1&quot; /&gt; the outcome is that the lion eats the goat.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%3D2&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n=2&quot; class=&quot;latex&quot; title=&quot;n=2&quot; /&gt;. It doesn’t take a lot of effort to see that if one of the lions eats the goat, the other lion is going to eat &lt;em&gt;him&lt;/em&gt;, so in this case the lions are going to stick to priority number 1 and do nothing.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%3D3&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n=3&quot; class=&quot;latex&quot; title=&quot;n=3&quot; /&gt;. Hmm. Well, for what we may call the first move, the goat is either going to be eaten or not.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;If it is, we’re left with two lions and a goat… &lt;strong&gt;sounds sort of familiar.&lt;/strong&gt; Nothing happens.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;Since nothing happens (the lion who eats the goat stays alive, though a bit more goatish), it &lt;em&gt;must &lt;/em&gt;be the case that the a lion eats the goat (recall the priorities).&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;Now we’re going somewhere (aren’t we?). In &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%3D4&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n=4&quot; class=&quot;latex&quot; title=&quot;n=4&quot; /&gt;, we again consider the same two cases and see that if a lion eats the goat, he is going to be eaten by another lion afterwards, because that other lion knows he’s not going to be eaten, because… blah blah… because… blah blah.. because if there’s one lion and a goat, he’s going to eat the goat. It’s sort of long to phrase. These lions probably get a really bad headache while thinking of the outcome of a given situation…&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;Well, not really. Math is about patterns, and quite often, about being concise. Even something that doesn’t seem too important, like notation, can bring great insights when introduced in the right way. In our case, it is the &lt;strong&gt;hypothesis &lt;/strong&gt;- i.e., what we think the answer is – that will help us actually &lt;strong&gt;prove&lt;/strong&gt; that it is the answer. &lt;strong&gt;Mathematicians like to know &lt;a href=&quot;http://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe.2C_and_Everything_.2842.29&quot; target=&quot;_blank&quot;&gt;the answer&lt;/a&gt; before they actually start solving the problem&lt;/strong&gt; (and this doesn’t only apply to problems with numbers &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt;  ).&lt;/p&gt;
&lt;p&gt;So, what is the hypothesis going to be? We saw that for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%3D+1%2C3&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n = 1,3&quot; class=&quot;latex&quot; title=&quot;n = 1,3&quot; /&gt; one lion eats the goat and that’s it, whereas for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%3D+2%2C4&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n = 2,4&quot; class=&quot;latex&quot; title=&quot;n = 2,4&quot; /&gt;, nothing happens. Proceeding in the same way with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%3D+5%2C+6%2C%5Cldots&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n = 5, 6,\ldots&quot; class=&quot;latex&quot; title=&quot;n = 5, 6,\ldots&quot; /&gt; we find that for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=5%2C7%2C9%2C%5Cldots&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;5,7,9,\ldots&quot; class=&quot;latex&quot; title=&quot;5,7,9,\ldots&quot; /&gt; a lion eats the goat and for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%3D+6%2C8%2C10%2C%5Cldots&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n = 6,8,10,\ldots&quot; class=&quot;latex&quot; title=&quot;n = 6,8,10,\ldots&quot; /&gt; nothing happens. We are now pretty convinced that this is one of the simplest possible patterns: even and odd.&lt;/p&gt;
&lt;p&gt;Now that we’ve made that leap of faith, a straightforward &lt;a href=&quot;http://en.wikipedia.org/wiki/Mathematical_induction&quot; target=&quot;_blank&quot;&gt;induction&lt;/a&gt; can be used to prove that it is actually correct. Induction is basically what we did in order to deduce the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%3D+4&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n = 4&quot; class=&quot;latex&quot; title=&quot;n = 4&quot; /&gt; case from the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%3D+3&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;n = 3&quot; class=&quot;latex&quot; title=&quot;n = 3&quot; /&gt; case, but you just keep doing it on and on. The idea is that any natural number is finite, so we’re going to reach it at some point. Thinking small helped us think big.&lt;/p&gt;
&lt;p&gt;It is worth noting how important the principle of induction is. If you want to be rigorous (and mathematicians certainly do that, for a simple reason – they don’t want to fall into the trap of intuition), it doesn’t even make sense to talk about &lt;strong&gt;proving &lt;/strong&gt;the principle of induction. This has got to do with what the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BN%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\mathbb{N}&quot; class=&quot;latex&quot; title=&quot;\mathbb{N}&quot; /&gt; actually &lt;a href=&quot;http://en.wikipedia.org/wiki/Peano_axioms&quot; target=&quot;_blank&quot;&gt;is&lt;/a&gt; in the formal sense – the principle of induction is actually a part of the definition of the natural numbers that is accepted today, and indeed the most powerful axiom among Peano’s axioms.&lt;/p&gt;
&lt;p&gt;And so we enter the realm of rigorous mathematical logic where &lt;a href=&quot;http://en.wikipedia.org/wiki/Georg_Cantor&quot; target=&quot;_blank&quot;&gt;one&lt;/a&gt; can go &lt;a href=&quot;http://www.youtube.com/watch?v=NMNgbISmF4I&amp;amp;ob=av2e&quot; target=&quot;_blank&quot;&gt;crazy&lt;/a&gt; and proving &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cforall+y%5Cin%5Cmathbb%7BN%7D%3A%5Cforall+z%5Cin%5Cmathbb%7BN%7D%3A+%5Cforall+x+%5Cin%5Cmathbb%7BN%7D%3A+y%5Cneq+z+%5Cimplies+yx%5Cneq+zx&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\forall y\in\mathbb{N}:\forall z\in\mathbb{N}: \forall x \in\mathbb{N}: y\neq z \implies yx\neq zx&quot; class=&quot;latex&quot; title=&quot;\forall y\in\mathbb{N}:\forall z\in\mathbb{N}: \forall x \in\mathbb{N}: y\neq z \implies yx\neq zx&quot; /&gt; takes about 6 pages. If you want to hang around, you might find &lt;a href=&quot;http://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach&quot; target=&quot;_blank&quot;&gt;this &lt;/a&gt;interesting.&lt;/p&gt;
&lt;p&gt;And finally, the above approach is not always guaranteed to be a good idea. There are a lot of crazy examples (and counterexamples, if you like the negative connotation better) for all kinds of things in math, and thinking small is no exception. I’m so sorry to bring this to your attention, but see &lt;a href=&quot;http://en.wikipedia.org/wiki/Borwein_integral&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;http://www.math.hmc.edu/funfacts/ffiles/20009.5.shtml&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt;. You know, you &lt;a href=&quot;http://spikedmath.com/499.html&quot; target=&quot;_blank&quot;&gt;can’t&lt;/a&gt; have everything.&lt;/p&gt;
&lt;p&gt;Anyway, I’m not really blogging and this might be my last post. Farewell!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/67/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/67/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/67/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/67/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/67/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/67/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/67/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/67/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/67/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/67/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/67/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/67/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/67/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/67/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=67&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-07T22:44:48+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=34">
	<title>Aleksandar Makelov: GSoC: Setting up the environment</title>
	<link>http://amakelov.wordpress.com/2012/06/07/gsoc-setting-up-the-environment/</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;&lt;strong&gt;A guide from a newbie&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So you’re gonna be coding? Well, coding and Linux go really well together… they say.&lt;/p&gt;
&lt;p&gt;But if you like how everything in Windows seems to work without you thinking too much about it, don’t despair!&lt;/p&gt;
&lt;p&gt;Because there are these amazing things called &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_machine&quot; target=&quot;_blank&quot;&gt;virtual machines&lt;/a&gt; that allow you to run two operating systems simultaneously on the same computer…&lt;/p&gt;
&lt;p&gt;wait what?!… Yes, this is possible. Actually, the idea turns out to be quite &lt;a href=&quot;http://www.extremetech.com/computing/72186-virtual-machines-vmware-part-i/2&quot; target=&quot;_blank&quot;&gt;old&lt;/a&gt;, and, it seems, backed up by some fairly sophisticated &lt;a href=&quot;http://developers.slashdot.org/story/02/06/25/1223234/virtual-machine-design-and-implementation-in-cc&quot; target=&quot;_blank&quot;&gt;theory&lt;/a&gt; (so it’s not surprising that virtual machines feel like &lt;a href=&quot;http://www.quotationspage.com/quote/776.html&quot; target=&quot;_blank&quot;&gt;magic&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I personally use the &lt;a href=&quot;http://en.wikipedia.org/wiki/Hypervisor&quot; target=&quot;_blank&quot;&gt;hypervisor &lt;/a&gt;&lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot;&gt;Virtual Box&lt;/a&gt; and the &lt;a href=&quot;http://en.wikipedia.org/wiki/Ubuntu_%28operating_system%29&quot; target=&quot;_blank&quot;&gt;Ubuntu&lt;/a&gt; operating system as a guest OS. The following simple &lt;a href=&quot;http://www.psychocats.net/ubuntu/virtualbox&quot; target=&quot;_blank&quot;&gt;guide&lt;/a&gt; got Ubuntu installed and running inside the VM in about half an hour. It is important to decide how you’re going to split your machine’s resources between the host OS and the guest OS, mainly the CPU and RAM, but you can always revert the changes if you find something is not quite balanced. I have the following on my machine:&lt;/p&gt;
&lt;p&gt;CPU: Intel Core i3 M 350 @ 2.27 GHz&lt;/p&gt;
&lt;p&gt;RAM: 4.00 GB&lt;/p&gt;
&lt;p&gt;ATI Mobility Radeon HD 5145 512 MB&lt;/p&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;running under Windows 7.&lt;/p&gt;
&lt;p&gt;I assigned as much as I could to my VM, this being 1.75GB of RAM, 2 CPUs and 128MB of video memory. It has been running pretty smoothly for all my programming/web browsing purposes so far (unless when I try to compute something ridiculously huge, but that’s sort of expected); the host OS is also performing smoothly for web browsing, and that’s quite enough for me at the moment.&lt;/p&gt;
&lt;p&gt;Next, you &lt;em&gt;want &lt;/em&gt;to get the &lt;a href=&quot;http://www.virtualbox.org/manual/ch04.html&quot; target=&quot;_blank&quot;&gt;guest additions installed&lt;/a&gt; because they make the VM seem even more magical (and, what is probably more important from a practical perspective, more user-friendly).&lt;/p&gt;
&lt;p&gt;Setting up &lt;strong&gt;shared folders&lt;/strong&gt; is also really convenient – and changing the contents of the folder in one OS can immediately be seen in the other (see? &lt;a href=&quot;http://www.youtube.com/watch?v=YWf5BLUOhNM&amp;amp;ob=av2n&quot; target=&quot;_blank&quot;&gt;magic!&lt;/a&gt;). It took me some time to figure out the cryptic command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mount -t vboxsf [-o OPTIONS] sharename mountpoint&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;found in the Shared Folders menu of VirtualBox, but, in short, what you have to do is open a terminal in your Ubuntu guest OS and use&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo mount -t vboxsf sharename path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where sharename is only &lt;strong&gt;the name&lt;/strong&gt; of your shared folder as you created &lt;strong&gt;in your host OS&lt;/strong&gt; (for me, it is in the C:\Users\Username\.VirtualBox folder, so for example if you want to share C:\Users\Username\.VirtualBox\shared you should use shared for sharename), and path is the full path, relative to your home directory, to the folder as which you want the shared folder to appear &lt;strong&gt;in your guest OS&lt;/strong&gt;. Be careful, since mounting the shared folder will &lt;strong&gt;erase&lt;/strong&gt; whatever there is in the folder pointed to by path (this happened to me once, but restarting the guest OS undid the changes). Also, the folder pointed to by path must exist by the time of mounting.&lt;/p&gt;
&lt;p&gt;Next, the &lt;strong&gt;coding tools&lt;/strong&gt;. For editing code, I shamelessly use gedit that comes with Ubuntu (probably a very bad idea in general, but we’ll see where this goes). Since I’m writing code for a large enough project to care about trailing whitespace and stuff, I found the following &lt;a href=&quot;https://gitorious.org/gedit-trailing-spaces&quot; target=&quot;_blank&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;https://github.com/jonleighton/gedit-trailsave&quot; target=&quot;_blank&quot;&gt;plugins&lt;/a&gt; really helpful for automatically getting rid of these brats – you can download them directly from the git repository and copy the relevant files in the relevant folders, as per &lt;a href=&quot;https://live.gnome.org/Gedit/Plugins&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Which leads us to version control, and &lt;a href=&quot;http://en.wikipedia.org/wiki/Git_%28software%29&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;git&lt;/strong&gt;&lt;/a&gt;. I don’t really know git, but I’m getting used to it, and the following &lt;a href=&quot;http://gitref.org/&quot; target=&quot;_blank&quot;&gt;reference&lt;/a&gt; has been helpful so far (though it doesn’t provide information about some of the more advanced commands). Beyond that, you should basically scream for help, google stuff if you’re not sure, and, most importantly, get your hands on it (this approach seems to work for a surprising number of things in life).&lt;/p&gt;
&lt;p&gt;And finally, &lt;a href=&quot;http://www.youtube.com/watch?v=anwy2MPT5RE&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;python&lt;/strong&gt;&lt;/a&gt;. I recently started using the &lt;a href=&quot;https://github.com/ipython/ipython&quot; target=&quot;_blank&quot;&gt;ipython&lt;/a&gt; interpreter (you can download the development version from github, or a stable release from their &lt;a href=&quot;http://ipython.org/&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt;). It has some really nice features, for example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%load_ext autoreload&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%autoreload&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;reloads the modules currently imported so that any changes made after the interpreter was started are taken into account. Or&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
%timeit(my_function())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which runs some function my_function() several times to record the time of computation more precisely.&lt;/p&gt;
&lt;p&gt;Well, that’s it for now. If I find any other useful additions to my environment, or anything nontrivial that I had to do in order to make my life as a programmer easier, I’ll try to put it up here, for my own reference and for anyone who may be struggling with the same problems.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/34/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/34/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/34/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/34/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/34/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/34/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/34/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/34/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/34/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/34/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/34/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/34/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/34/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/34/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=34&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-07T18:54:41+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=333">
	<title>Stefan Krastanov: Consistent output from the SymPy solvers (and some ideas about the ODE solver)</title>
	<link>http://krastanov.wordpress.com/2012/06/04/consistent-output-from-the-sympy-solvers-and-some-ideas-about-the-ode-solver/</link>
	<content:encoded>&lt;p&gt;The work on the differential geometry module has not progressed much this week. I have fixed some minor issues, docstrings and naming conventions, however I have not done much with respect to the implementation of form fields as there are still some questions about the design to be ironed out.&lt;/p&gt;
&lt;p&gt;Instead I focused on studying two of the features that SymPy presents and that I will use heavily. The first is the simplification routine that I will discuss another time. The second one is the different solvers implement in SymPy.&lt;/p&gt;
&lt;p&gt;First of all, I have a very hard time getting used to the various output that the solvers provide. The algebraic equations solver, for example, can return either an empty list or a None instance if there is no solution. If there are solutions it can return a list of tuples of solutions, or a list of dictionaries of solutions, or a list of solutions if there is only one variable to solve for, or the solution itself if the solution is unique… Thankfully, a remedy for this was implemented by Christopher Smith. In &lt;a href=&quot;https://github.com/sympy/sympy/pull/1324&quot; target=&quot;_blank&quot;&gt;pull request 1324&lt;/a&gt; he provided some flags that force the solver to return the solutions in a canonical form. I am very grateful for his work and I hope that in the not too distant future what he has done will become the default behavior. I also hope that the solver will get refactored, because internally it is still a mess of different possible outputs that are canonicalized only at the very end. It is possible that I will work on this later.&lt;/p&gt;
&lt;p&gt;Then there is the ODE module. I already need this solver in order to work with the integral curves that my code produces[1]. It is a very advanced solver written a few years ago by Aaron Meurer as part of his GSoC project. However, it still does not support systems of ODEs or solving for initial conditions. With Aaron’s help I have started those. The main difficulty is that I am covering only the simplest cases, however the new API must be futureproof. Moreover, here I again have a problem with the various outputs that can be produced by the ODE solver. Solutions are always returned as Equation instances (which is necessary, as some solutions can be in implicit form), however if there are multiple solutions they are returned in a list, while single solutions are returned themselves (not in a list). Anyway, the structure of the ODE module is straightforward so this should not be too hard to work around.&lt;/p&gt;
&lt;p&gt;This week I will probably finish my work with the ODE solver and proceed to the form fields.&lt;/p&gt;
&lt;p&gt;[1] The code on the differential geometry side is ready, however before showing it I will first extend the ODE solver in order to have more interesting examples.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/333/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/333/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/333/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/333/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/333/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/333/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/333/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/333/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/333/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/333/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/333/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/333/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/333/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/333/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;amp;blog=15251174&amp;amp;post=333&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-03T22:14:40+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/06/03/gsoc-week-2">
	<title>Bharath M R: GSoC Week 2</title>
	<link>http://catchmrbharath.github.com/programming/2012/06/03/gsoc-week-2</link>
	<content:encoded>&lt;p&gt;I worked on interval aithmetic using numpy this week. I have almost got the module ready. I have to integrate it with Stefan’s branch and a basic version of implicit plotting will be ready to go. I will update this blog post with plots and performance results once I integrate it with Stefan’s branch.&lt;/p&gt;</content:encoded>
	<dc:date>2012-06-03T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=25">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 2</title>
	<link>http://amakelov.wordpress.com/2012/06/02/google-summer-of-code-2012-week-2/</link>
	<content:encoded>&lt;p&gt;Hi everyone,&lt;/p&gt;
&lt;p&gt;Here is a brief summary of what I’ve been doing for the second week of my GSoC.&lt;/p&gt;
&lt;p&gt;The first main direction was randomization: an implementation of the &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Nielsen_transformation#Product_replacement_algorithm&quot; target=&quot;_blank&quot;&gt;product replacement algorithm&lt;/a&gt; using an optimization suggested by Leedham-Green, as described in [1]&lt;/strong&gt;. After an initialization that takes ~ 50 group operations (a number suggested by [1] to be large enough for practical purposes), group elements the properties of which are satisfyingly random for most CGT algorithms can be produced at the cost of one group operation (in the context of permutation groups, by a ‘group operation’ we mean the multiplication of two permutations of size the degree of the permutation group). Thus the time complexity here is O(n).&lt;/p&gt;
&lt;p&gt;The product replacement algorithm allowed the implementation of a simple (yet backed up by some nontrivial results in number theory and group theory) and fast &lt;a href=&quot;http://en.wikipedia.org/wiki/Monte_Carlo_algorithm&quot; target=&quot;_blank&quot;&gt;Monte Carlo algorithm&lt;/a&gt; for &lt;strong&gt;testing whether a given permutation group is the symmetric or the alternating group&lt;/strong&gt; (once we know this, it is straightforward to decide which one it is by checking the parity of all the generators). This is suggested in [1] as a first step in analyzing a large permutation group. It should be noted that the algorithm is actually one-sided Monte Carlo (as defined in [2]): a wrong answer is guaranteed to be wrong, whereas a right answer may be wrong with some predefined probability. The complexity here is O(n log(n)).&lt;/p&gt;
&lt;p&gt;The second direction was &lt;strong&gt;computing minimal blocks by Atkinson’s algorithm&lt;/strong&gt;. A function taking several points S from {0, 1, …, n-1} for a transitive permutation group G of degree n, and returning the maximal block system of G (meaning the one with the smallest block size) such that the points in S are contained in the same block, was implemented. The time complexity is just above O(|S|n) ([1]). Atkinson’s algorithm itself makes use of the &lt;a href=&quot;http://www.algorithmist.com/index.php/Union_Find&quot; target=&quot;_blank&quot;&gt;union-find&lt;/a&gt; algorithm (of course, with path compression and union by rank) to manage an equivalence relation on the set {0, 1, …, n-1}.&lt;/p&gt;
&lt;p&gt;As a consequence of this, &lt;strong&gt;primitivity testing&lt;/strong&gt; in O(n^2) time is possible (we just check for blocks containing {0, 1}, {0, 2},…, {0, n-1}). There are three optimizations to this suggested in [1] that were implemented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compute the stabilizer Stab of 0 and look at {0, rep} for orbit representatives of the action of Stab on {0, …,  n-1}&lt;/li&gt;
&lt;li&gt;Stop the merging process once an equivalence class becomes larger than n/p where p is the smallest prime dividing n (as block sizes must divide n)&lt;/li&gt;
&lt;li&gt;Instead of computing the stabilizer deterministically, take a subgroup generated by several random elements from Stab, by a slight modification of product replacement for G.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still, the algorithm runs for O(n^2) time and will perform badly if Stab is small. There are primitivity testing algorithms that run in almost linear time (one is suggested in [2]), but it is claimed in [1] that the use of Atkinson’s algorithm performs well for permutation groups with degrees in the millions (which is good for our purposes) — so the question of performance here needs some further investigation.&lt;/p&gt;
&lt;p&gt;There were some other minor changes made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The group constructors for Sym and Alt now don’t calculate the order of the group right away, but only when the order is called for ( factorial(1000000) used to take almost all the time for initializing SymmetricGroup(1000000)).&lt;/li&gt;
&lt;li&gt;The function orbit() can now compute the union of the orbits for several points, or the orbit of an ordered tuple of elements of {0, 1,…, n-1}. It would be desirable to be able to do this for unordered tuples as well – but the effectiveness of this might become very low since sets are not hashable in python. Perhaps there is some way to get around this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Several changes in design were proposed in the &lt;a href=&quot;https://github.com/sympy/sympy/pull/1319#issuecomment-6005413&quot; target=&quot;_blank&quot;&gt;pull request for week1&lt;/a&gt; that deserve consideration (and discussion).&lt;/p&gt;
&lt;p&gt;[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp;amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3&lt;/p&gt;
&lt;p&gt;[2] Permutation Group Algorithms, Ákos Seress, Cambridge University Press&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/25/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/25/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/25/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/25/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/25/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/25/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/25/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/25/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/25/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/25/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/25/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/25/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/25/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/25/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=25&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-02T16:35:29+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=116">
	<title>Guru Devanla: Week 2: Activity Summary</title>
	<link>http://rhoforsympy.wordpress.com/2012/06/02/week-2-activity-summary/</link>
	<content:encoded>&lt;p&gt;This week there was fewer lines of code than last week. But, with this week I have almost(except partial trace) merged all changes from @ellisonbg’s densityop branch and ready to extend the implementation to incorporate other features.  Most of the time I spent this week is to review and structure my work for the coming weeks and address comments on previous PR . I have provided a detailed plan below.&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Tasks performed this week&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;1.  Responded to and completed all comments on last weeks pull &lt;a href=&quot;https://github.com/sympy/sympy/pull/1312&quot; title=&quot;PR 1312&quot;&gt;PR1312.&lt;/a&gt;&lt;br /&gt;
2.  Pushed a minor code change branch to my git account. This change handles &lt;strong&gt;entropy for general density operators&lt;/strong&gt;.  (&lt;em&gt;I am still waiting for the previous pull request to get merged, since this pull request was branched off that.)&lt;br /&gt;
&lt;/em&gt;3.  Review and understand the partial trace operations and qubit related implementation.  Further notes will be prepared for the discussion.&lt;br /&gt;
4. Understand current implementation of tensor products to plan work for coming weeks.&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;My plan for weeks 3,4,5,6 ( based on design discussion we have had regarding partial trace )&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(Note, the detailed plan here still meets the timeline outlined in the proposal. The only change is I will be working fewer hours during Week 4(June 10-16), since I am at the summer school. Hopefully, I can contain the work to not flow into later weeks). &lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Week 3/4&lt;/h3&gt;
&lt;p&gt;Implement/test partial trace methods [ &lt;strong&gt;_eval_partial_trace&lt;/strong&gt; ] and other required methods for following classes:&lt;/p&gt;
&lt;p&gt;QubitDensity (&lt;span style=&quot;color: #800000;&quot;&gt;&lt;em&gt;name suggestion needed!&lt;/em&gt;)&lt;/span&gt; : for this I will use the current bit-twiddling algorithm but add detailed test cases.&lt;br /&gt;
TensorProduct : Code to handle density operators ( both qubit based, and generic) during expand, mul operations.&lt;br /&gt;
TensorProduct : _eval_partial_trace method will split the sub-system to trace. and then based on states inside Tr(|i&amp;gt;&amp;lt;k|).  [ &lt;em&gt;This needs more discussions during the next few days and during IRC session.&lt;/em&gt;]&lt;br /&gt;
Sub-classes of ‘State’ : Need to decide which subclasses need and how it should be done.&lt;/p&gt;
&lt;h3&gt;Week 5&lt;/h3&gt;
&lt;p&gt;Symbolic Trace operations and Partial Trace operations.&lt;/p&gt;
&lt;h3&gt;Week 6&lt;/h3&gt;
&lt;p&gt;Changes to qapply for L and R operations and any operations that would be needed based on changes so far. (will also fix the bug identified in PR 1312)&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Other related learning activities this week.&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I tried &lt;a href=&quot;http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html&quot;&gt;IPython Notebook&lt;/a&gt; and I absolutely love it. Now, I am using that as my command line interface for running sympy commands and understanding current implementation.  The best thing Notebook has done to my workflow is help me save my scratch work and go back whenever I need it. Thanks&lt;a href=&quot;https://github.com/ellisonbg&quot; title=&quot;Brian's github&quot;&gt; @ellisonbg&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I did have to jump some hoops to set up Notebook on Ubuntu 11.04, since I had to build a lot of dependencies myself. I plan to blog about it as part of another post.  A minor pain point with it is, I need to drag/drop files I want to work on. Wish it gave me an option to type in the URL to a saved notebook rather than forcing me to open a FileManager window to find file to drag and drop.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=116&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-02T13:30:41+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/2012/06/02/gsoc-2012-post-3-4/">
	<title>Angadh Nanjangud: GSoC 2012 Post 3</title>
	<link>http://angadhsympy.wordpress.com/2012/06/02/gsoc-2012-post-3-4/</link>
	<content:encoded>&lt;p&gt;It’s the last week of school so things are a little crazy. I haven’t had time to look into much for the summer of code this week as a result. I will have my responsibilities for the quarter wrapped by noon on the 5th (Tuesday) so it appears that I will be on schedule as predicted.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=65&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-02T00:34:15+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/2012/06/02/the-prologue-37/">
	<title>Sergiu Ivanov: The Prologue</title>
	<link>http://scolobb.wordpress.com/2012/06/02/the-prologue-37/</link>
	<content:encoded>&lt;p&gt;And yeah, the last exam in this semester is a matter of the past &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  In my opinion, this is so important a thing, that it deserves standing in a separate paragraph &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Since I’ve only had a couple hours of work today, because of the exam, there’s not much that I can say about my progress this week.  I’d like to explicitly note, though, that this delay was allowed for in the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov%3A-Category-Theory-Module/&quot;&gt;proposal&lt;/a&gt;, so I’m still good with my timing.&lt;/p&gt;
&lt;p&gt;Nevertheless, I have started setting up the basic infrastructure (view &lt;a href=&quot;https://github.com/scolobb/sympy/tree/ct0-base-classes&quot;&gt;branch&lt;/a&gt; on GitHub).  While I did contribute bits of code to SymPy before, I’ve never lived through the experience of adding a new module, and this has immediately posed a number of important questions which I think I have succeeded find an answer for by looking at other parts of SymPy, but also by asking the Knowledgeable.  In the next paragraphs I will summarise the most important of the problems I have run into and the solutions I have subsequently adopted.&lt;/p&gt;
&lt;p&gt;My first problem was about docstrings.  While it is clear that a docstring should briefly describe the class, I wasn’t sure as to how much information about the mathematical concept itself to introduce.  The central thing to realise here is that category theoretical notions aren’t among the best known; moreover, they tend to bear names which may be quite misleading for people familiar with notions with similar names, introduced in other domains.  Therefore, I decided to also briefly describe the concept itself in the docstring of the class which is meant to represent this concept.&lt;/p&gt;
&lt;p&gt;My other point of uncertainty was about producing string representations of morphisms.  My being unsure arose from the fact that my knowledge about string representations and pretty printing in SymPy had been rather vague.  Now, however, it has been &lt;a href=&quot;https://groups.google.com/d/topic/sympy/6zBUN2OzmpA/discussion&quot;&gt;decided&lt;/a&gt; that the string representation of a morphism &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f:A\rightarrow B&quot; /&gt; should be&lt;/p&gt;
&lt;pre&gt;Morphism(Object(&quot;A&quot;), Object(&quot;B&quot;), &quot;f&quot;)&lt;/pre&gt;
&lt;p&gt;while in its pretty-printed version it should be something like&lt;/p&gt;
&lt;pre&gt;f:A-&amp;gt;B&lt;/pre&gt;
&lt;p&gt;With morphism composition things should be done similarly.  For example, given two morphisms &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f:A\rightarrow B&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%3AB%5Crightarrow+C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g:B\rightarrow C&quot; class=&quot;latex&quot; title=&quot;g:B\rightarrow C&quot; /&gt;, the morphism &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%5Ccirc+f%3AA%5Crightarrow+C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g\circ f:A\rightarrow C&quot; class=&quot;latex&quot; title=&quot;g\circ f:A\rightarrow C&quot; /&gt; should look like&lt;/p&gt;
&lt;pre&gt;Morphism(Object(&quot;B&quot;), Object(&quot;C&quot;), &quot;g&quot;) * 
  Morphism(Object(&quot;A&quot;), Object(&quot;B&quot;), &quot;f&quot;)&lt;/pre&gt;
&lt;p&gt;in string representation, and like&lt;/p&gt;
&lt;pre&gt;g∘f:A-&amp;gt;C&lt;/pre&gt;
&lt;p&gt;in pretty-printed version.  Note that the object &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; is not shown in this representation.  I think this better fits the notion of composition of morphisms, but I am totally open to suggestions in this regard.  I will also take care that the composition symbol is rendered properly and is substituted with an asterisk on non-unicode terminals.&lt;/p&gt;
&lt;p&gt;And the latest problem I am currently at is writing tests &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  I have once read in good book on Smalltalk (no link, since I don’t remember its name &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif&quot; alt=&quot;:-(&quot; class=&quot;wp-smiley&quot; /&gt;  ) that writing tests &lt;em&gt;before&lt;/em&gt; the actual functionality is a Good Thing™.  I’ll try to apply this approach right now, especially since I’ve heard some of the SymPy developers confirm the goodness of the Thing. Thus, the methods I now have in &lt;em&gt;Morphism&lt;/em&gt; only have docstrings mostly and do nothing.  I plan to write some tests which should feature the desired behaviour and then to actually implement this behaviour.  Afterwards, I’ll extend the tests to cover the corner cases.  I guess it’s going to take a while to actually do all this, but I think it’s going to be worthwhile.  Also, I’d like to suppose that I will get faster at it with time &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;On the overall, I feel that I haven’t yet fully adapted to my current “job”, but I expect to free myself from this feeling over the next couple of days &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATED &lt;/strong&gt;To mention a better pretty-printed version of a morphism (see first comment).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATED&lt;/strong&gt; To included a more correct way to represent morphism composition as string (see first reply to first comment).&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=106&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-01T21:41:39+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=307">
	<title>Stefan Krastanov: Scalar and Vector Fields in SymPy – First Steps</title>
	<link>http://krastanov.wordpress.com/2012/05/27/scalar-and-vector-fields-in-sympy-first-steps/</link>
	<content:encoded>&lt;p&gt;The Differential Geometry module for SymPy already supports some interesting basic operations. However, it would be appropriate to describe its structure before giving any examples.&lt;/p&gt;
&lt;p&gt;First of all, there are the &lt;code&gt;Manifold&lt;/code&gt; and &lt;code&gt;Patch&lt;/code&gt; classes which are just placeholders. They contain all the coordinate charts that are defined on the patch and do not provide, for instance, any topological information. This leads us to the &lt;code&gt;CoordSystem&lt;/code&gt; class which contains all the coordinate transformation logic. For example, if I want to define the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D%5E2+&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\mathbb{R}^2 &quot; class=&quot;latex&quot; title=&quot;\mathbb{R}^2 &quot; /&gt; euclidean manifold together with the polar and Cartesian coordinate systems I would do:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;R2 = Manifold('R^2', 2)
# Patch and coordinate systems.
R2_origin = Patch('R^2_o', R2)
R2_r = CoordSystem('R^2_r', R2_origin)
R2_p = CoordSystem('R^2_p', R2_origin)

# Connecting the coordinate charts.
x, y, r, theta = [Dummy(s) for s in ['x', 'y', 'r', 'theta']]
R2_r.connect_to(R2_p, [x, y],
                      [sqrt(x**2 + y**2), atan2(y, x)],
                inverse=False, fill_in_gaps=False)
R2_p.connect_to(R2_r, [r, theta],
                      [r*cos(theta), r*sin(theta)],
                inverse=False, fill_in_gaps=False)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;All following examples will be about the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D%5E2+&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\mathbb{R}^2 &quot; class=&quot;latex&quot; title=&quot;\mathbb{R}^2 &quot; /&gt; manifold which is already implemented in the code for the module. Also, notice the use of the &lt;code&gt;inverse&lt;/code&gt; and &lt;code&gt;fill_in_gaps&lt;/code&gt; flags. When they are set to &lt;code&gt;True&lt;/code&gt; the &lt;code&gt;CoordSystem&lt;/code&gt; classes try to automatically deduce the inverse transformations using SymPy’s &lt;code&gt;solve&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Now that we have a manifold we would like to create some fields on it and define some points that belong to the manifold. The points are implemented in the &lt;code&gt;Point&lt;/code&gt; class. You need to specify some coordinates when you define the point, however after that the object is completely coordinate-system-idependent.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# You need to specify coordinates in some coordinate system
p = Point(R2_p, [r0, theta0])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Then one can define fields. &lt;code&gt;ScalarField&lt;/code&gt; takes points to real numbers and &lt;code&gt;VectorField&lt;/code&gt; is an operator on &lt;code&gt;ScalarField&lt;/code&gt; taking a scalar field to another scalar field by applying a directional derivative. For example, here &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the scalar fields taking a point and returning it’s coordinate and &lt;code&gt;d_dx&lt;/code&gt; and &lt;code&gt;d_dy&lt;/code&gt; are the vector fields &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial+x%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{\partial}{\partial x}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial}{\partial x}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial+y%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{\partial}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial}{\partial y}&quot; /&gt;. &lt;code&gt;R2_r&lt;/code&gt; is the Cartesian coordinate system and &lt;code&gt;R2_p&lt;/code&gt; is the polar one.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;R2_r.x(p) == r0*cos(theta0)
# R2_r.d_dx(R2_r.x) is a also scalar field
R2_r.d_dx(R2_r.x)(p) == 1
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Looking at how can these fields be defined:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# For a ScalarField you provide the transformation in some coordinate system
R2_r.x = ScalarField(R2_r, [x0, y0], x0)
#                     /      |        ^-------- the result
#     the coord system     the coordinates

# For a VectorField you provide the components in some coordinate system
R2_r.d_dx = VectorField(R2_r, [x0, y0], [1, 0])
#                        /      |         ^-------- the components
#         the coord system     the coordinates
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Obviously one can define much more interesting fields. For instance the potential due to a point charge at the origin is:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;potential = ScalarField(R2_p, [r0, thata0], -1/r0)
# And to reiterate, the definition does not limit you
# to use it only in this coordinate system. For instance:
potential(R2_r.point([x0, y0])) == 1/sqrt(x0**2 + y0**2)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;However there is another more intuitive way to do it:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# R2_p.r is the scalar field that takes a point and returns the r coordinate
potential2 = 1/R2_p.r
potential2(R2_r.point([x0, y0])) == 1/sqrt(x0**2 + y0**2))
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;And this new object &lt;code&gt;potential2&lt;/code&gt; is not an instance of &lt;code&gt;ScalarField&lt;/code&gt;. It is actually a normal SymPy expression tree that contains a &lt;code&gt;ScalarField&lt;/code&gt; somewhere in its leafs (namely in this case it is &lt;code&gt;Pow(R2_p.r, -1)&lt;/code&gt;). However, due to the change to one of the base classes of SymPy that I did in this &lt;a href=&quot;https://github.com/sympy/sympy/pull/1299&quot; target=&quot;_blank&quot; title=&quot;Make Expr recursively callable&quot;&gt;pull request&lt;/a&gt; it is now possible for such tree to be a python callable, by recursively applying the argument to each callable leaf in the tree. This change is still debated and it may be reverted.&lt;/p&gt;
&lt;p&gt;Vector fields can also be build in this manner. However, they pose a problem. What happens when you multiply a vector field and a scalar field? This operation should give another vector field. And here is a possible problem with the approach of recursively callable expressions trees:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# Naively this operation will call a scalar field on
# another scalar field which is nonsense:
(R2_r.x * R2_r.d_dx)(R2_r.x) == R2_r.x(R2_r.x) * R2_r.d_dx(R2_r.x)
#                         nonsense----^
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The current solution is for &lt;code&gt;scalar_field(not_point)&lt;/code&gt; to return the callable itself. Thus we have:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;(R2_r.x * R2_r.d_dx)(R2_r.x) == R2_r.x * R2_r.d_dx(R2_r.x)
#\________________/ \______/    \_______________________/
#   vector field        ^---scalar fields---^
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This way there is no need for complicated logic in &lt;code&gt;__mul__ nor is there need for addition subclasses of &lt;/code&gt;&lt;code&gt;Expr&lt;/code&gt; in order to accommodate this behavior.&lt;/p&gt;
&lt;p&gt;There is not much more to be said about the structure of the module. There are some other nice things already implemented like integral curves, however I will discuss these in a later post.&lt;/p&gt;
&lt;p&gt;Among the things that should be done at some point:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should vector fields be callable on points? If yes, what the result should be? An abstract vector, a tuple of coordinates in a certain coordinate system, something else?&lt;/li&gt;
&lt;li&gt;There are many expressions generated by this code that are not simple enough. I should work on the simplification routines and on the differential geometry module itself in order to get more canonical expressions.&lt;/li&gt;
&lt;li&gt;The last point is also valid about the solvers: some coordinate transformations are too complicated for the solvers to find the inverse transformation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Manifold&lt;/code&gt; and &lt;code&gt;Patch&lt;/code&gt; have &lt;code&gt;name&lt;/code&gt; attributes. Are these necessary? What is the role of &lt;code&gt;name&lt;/code&gt; attributes in SymPy besides printing?&lt;/li&gt;
&lt;li&gt;Start using &lt;code&gt;Lambda&lt;/code&gt; where applicable.&lt;/li&gt;
&lt;li&gt;Follow better the class structure of SymPy.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;amp;blog=15251174&amp;amp;post=307&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-05-27T13:04:42+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=9">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 1</title>
	<link>http://amakelov.wordpress.com/2012/05/26/google-summer-of-code-2012-week-1/</link>
	<content:encoded>&lt;p&gt;Hi everyone,&lt;/p&gt;
&lt;p&gt;Here is a brief summary of what I’ve been doing for the first six days of my GSoC.&lt;/p&gt;
&lt;p&gt;Since there was already some work done on computational group theory in the module sympy.combinatorics, mainly in the files perm_groups.py and permutations.py, I got to know what the code is doing and made some minor improvements (improved docstrings, removed some duplicate functionality.) In particular, the implementation of the Schreier-Sims algorithm took most of my time, and I still have to analyze its complexity (it seems a bit slow). Anyway, I found the following &lt;a href=&quot;http://www.m8j.net/%28All%29Schreier%20Sims%20Algorithm&quot; target=&quot;_blank&quot;&gt;files&lt;/a&gt; particularly useful in making my way through the code.&lt;/p&gt;
&lt;p&gt;Since there were already a lot of things implemented, this interfered with the &lt;a href=&quot;http://google-melange.appspot.com/gsoc/proposal/review/google/gsoc2012/amakelov/1&quot; target=&quot;_blank&quot;&gt;schedule&lt;/a&gt; I had set for myself on my GSoC application. So after a quick change of plans, I decided to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implement constructors for four of the basic types of groups (symmetric, cyclic, dihedral, alternating) in order to be able to use groups of fairly large size for testing and comparing the complexity of the different algorithms for computation with groups&lt;/li&gt;
&lt;li&gt;Evaluate the more basic functionality already implemented (read: all but Schreier-Sims), in particular at orbits and stabilizers. It turned out that the implementations currently in sympy are slower than the ones suggested in [1], so I rewrote these and added implementations for the Schreier vector and some other orbit-related computations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the near future (today and tomorrow), I’ll implement a procedure for taking direct products of several groups (so that I can have even more examples of groups for testing and playing around) and Monte Carlo testing if a given permutation group is large (the symmetric or the alternating group). You’re welcome to take a look at my branch labeled &lt;a href=&quot;https://github.com/amakelov/sympy/tree/week1&quot; target=&quot;_blank&quot;&gt;week1&lt;/a&gt;, and I’ll do a pull request in the next couple of days.&lt;/p&gt;
&lt;p&gt;In the more distant future, I’ll dive into Schreier-Sims and take a look at the implementation offered in [1] (and maybe [2]?) in order to try to compare it with the existing one. Also, the randomized version of Schreier-Sims (the output of which can then be quickly tested with the deterministic version, [1] says) is promised to be significantly faster so it is a must-have. And I feel that there is some more optimization that can be done in permutations.py and perm_groups.py.&lt;/p&gt;
&lt;p&gt;And about the changes in the interface I wanted to implement – my main pain right now is that singleton cycles have to be included in the cyclic form of a permutation. But the cyclic form itself is not heavily used in the rest of the functionality, so it is not such a pressing issue. Also, I feel that possible changes in the interface need some more careful thinking on my part… Do we want our group action to be on the left or on the right (GAP and MAGMA do it on the right, as I gather from [1])? Do we want to label the underlying set for a permutation by 0,1,…, n-1 or 1,2,…,n?…&lt;/p&gt;
&lt;p&gt;Anyway, I’m really enthusiastic about my project and hope that we’ll have some nice and reasonably fast algorithms in CGT by the end of the summer!&lt;/p&gt;
&lt;p&gt;[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp;amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3&lt;/p&gt;
&lt;p&gt;[2] Permutation Group Algorithms, Ákos Seress, Cambridge University Press&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=9&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-05-26T13:10:22+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/05/26/adaptive-sampling-for-2d-plots">
	<title>Bharath M R: Adaptive sampling for 2D plots</title>
	<link>http://catchmrbharath.github.com/programming/2012/05/26/adaptive-sampling-for-2d-plots</link>
	<content:encoded>&lt;p&gt;This was my first week of GSoC and I spent time on experimenting with adaptive sampling. The major idea explored were what constitutes a condition for which we need not sample more to obtain an accurate plot. I started with the idea of the area of the triangle formed by the three consecutive points to be less than a tolerance value. This worked nicely but did oversampling unnecessarily. The problem with it was the area of the triangle was dependent on the distance between the points which made the condition dependent on the lengths and hence oversampled even though the line formed by the three points was almost collinear. So the obvious next idea was to check the angle formed by the three points and see whether it forms an angle near to 180 degree. There were three versions of the above algorithm implemented, out of which one was the iterative version of a recursive solution. The iterative version is &lt;a href=&quot;https://github.com/Krastanov/sympy/pull/5&quot;&gt;here&lt;/a&gt;. Considering Stefan Krastanov’s suggestion, I implemented a recursive solution which samples 5 additional points between two points instead of a single point. The idea was to use numpy’s quick evaluations of an array and also arrive at the straight line condition faster. Also, this reuses most of the code written before. The code for the following can be found &lt;a href=&quot;https://github.com/catchmrbharath/sympy/tree/adaptnew&quot;&gt;here&lt;/a&gt;. The snippet of the code is as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_adapt_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorized_lambdify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list_segments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;list_segments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_sampling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_sampling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_sampling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]):&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;list_segments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;#sample the last segment&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;list_segments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;yvalues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;segments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_segments&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vectorA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vectorB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;costheta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costheta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The major problem with the above approach is the way that the rightmost point / segment is handled. The rightmost segment does not have another right segment to decide whether it forms a 180 degree angle or not. Hence it is assumed straight if the previous segment and the present segment forms a straight line. Most of the time this fails to sample further for the end segment thought it should have sampled. The problem can be seen in an plot of &lt;span&gt; $y = sin(x^{2})$ &lt;/span&gt;&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/26052012/plot.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;The last method used is symmetric and gives better results, but it is quite ugly. The branch is &lt;a href=&quot;https://github.com/catchmrbharath/sympy/tree/complexplot&quot;&gt;here&lt;/a&gt;.(EDIT: changed the link). It uses some amount of random sampling to avoid aliased results. The plot of &lt;span&gt; $y = sin(x^{2})$ &lt;/span&gt; renders very accurately. Feel free to experiment with it and if there is a better method, you can comment below :).&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/26052012/betterplot.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;I think I will get an non - ugly code ready by the tomorrow and wait for Stefan’s branch to get merged before submitting this method as pull request. This week has been lots of experimentation. I think I will spend the next week getting a basic version of Interval Arithmetic ready using numpy.&lt;/p&gt;</content:encoded>
	<dc:date>2012-05-26T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/2012/05/26/gsoc-2012-post-2-18/">
	<title>Angadh Nanjangud: GSoC 2012 Post 2</title>
	<link>http://angadhsympy.wordpress.com/2012/05/26/gsoc-2012-post-2-18/</link>
	<content:encoded>&lt;p&gt;As I’m nearing the end of my quarter, I haven’t been able to afford myself the time to make any tangible contributions yet. I had expected this to happen as mentioned in my proposal. Nonetheless, I have spent more time delving into the ‘mechanics’ of sympy.physics.mechanics and improve my understanding of python in the little free time that I do get.&lt;/p&gt;
&lt;p&gt;That is not to say that not much has been thought up as to what must be addressed first and how it should be addressed. After conversations with Gilbert, Luke, and Jason, I have a clearer idea about how to go about implementing the first helper function. This is going to be the momentum function. We debated whether there should be separate functions for linear and angular momenta. More importantly, we addressed an issue for the end user; should these momenta functions be implemented as stand alone functions or as methods. It was concluded that the easiest and ‘cleanest’ implementation with regards to an end user would be a method. With that, the user wouldn’t have to concern himself with entering the arguments. At the same time, it would also not compromise readability for a dynamicist. I will be posting a message in the groups sometime before the end of the long weekend about this as I can definitely use more input. I think this writing this function will be great because I feel like I get the theory of classes pretty well but this will be the real test of that. I’m very excited by this prospect.&lt;/p&gt;
&lt;p&gt;I think that is all for now. I’m working a little overtime with school to get my duties as a TA finished so that I can dedicate begin working on the Summer of Code by my proposed start date of June 5th. See you next week!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=55&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-05-26T04:44:11+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=76">
	<title>Guru Devanla: Week 1 Report : Initial set of routines for Density Operators</title>
	<link>http://rhoforsympy.wordpress.com/2012/05/25/week-1-report-initial-set-of-routines-for-density-operators/</link>
	<content:encoded>&lt;p&gt;Today I submitted a &lt;a href=&quot;https://github.com/sympy/sympy/pull/1312&quot; target=&quot;_blank&quot;&gt;pull&lt;/a&gt; request&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;What went into this weeks pull request&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The framework and routines were inherited from Brian’s github branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The  _eval_args function was added.  I went back-and-forth on deciding if we needed strong checks to make sure the states used to build density objects should be strictly &lt;strong&gt;KetBase&lt;/strong&gt; and &lt;strong&gt;Qubits&lt;/strong&gt;. But, there were scenarios where just symbols could be used for states, or even QExpr could be used. So, discarded that check.   But, this would mean Density objects could have arbitrary objects for states.  &lt;em&gt;Flip side to this is,  represent() on density objects which do not have a KetBase object does not work very well. &lt;/em&gt;For example, having ‘mul’ expressions for ‘state’ creates problems in represent functions. But, my assumption is represent function need not handle such scenarios.                                                                                                                                    Similarly, I went back and forth regarding checking for valid values for probabilities. Then, I dropped those validations as well.&lt;/li&gt;
&lt;li&gt;Added test routines for all public facing methods in density.py. Some methods from original DensityOp branch are not in this pull request. I will add them back in future requests.&lt;/li&gt;
&lt;li&gt;I also created a minor &lt;a href=&quot;https://github.com/sympy/sympy/pull/1311&quot; target=&quot;_blank&quot;&gt;pull&lt;/a&gt; request for minor printing changes that were in the original densityOp branch. This takes care of changes to the latex() in operator.py. I will add checks for density operator after this pull request is accepted.&lt;/li&gt;
&lt;li&gt;Added test routines for changes related to density in qapply.py. These checks will have to be extended after I make density operators work well with Qubits.&lt;/li&gt;
&lt;li&gt;Added doc strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Where I spent a my time while trying to accomplish this weeks tasks:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understanding the process-function call flow of _eval_args,   _print methods.&lt;/li&gt;
&lt;li&gt;Getting familiarized with operator.py , represent(), and qapply().&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(The following point is also a question for my next task)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The way  &lt;em&gt;_qsympify_sequence(seq)&lt;/em&gt; method is implemented, it treats any Qubit() passed as state to Density as a sequence object. Therefore, the Qubit object is lost and a tuple is replaced instead of the Qubit object. This needs to a fixed or a work around decided so that Qubits can be provided as states to Density objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;My next steps ( plan for next week’s pull request):&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discuss with the mentor team and see how to approach the problem with Qubits being converted to sequence. ( in next 2 days )&lt;/li&gt;
&lt;li&gt;Add remaining functionality into density.py ( entropy, reduced trace operations ) ( should be completed by middle of next week )&lt;/li&gt;
&lt;li&gt;Blog about the implementation details of changes to tensorproduct.py with respect to what we would need for density operators.  I hope to also have this part implemented by end of next week.&lt;/li&gt;
&lt;li&gt;Address issues with the current pull request. I plan to have this as the top priority task and work on this every time it comes back to me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Misc:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I gave a lightening talk at Google Chicago office this week regarding my GSoC 2012 project and there was lot of interest in Sympy. Particularly, folks were very excited to know about  &lt;a href=&quot;http://live.sympy.org&quot; target=&quot;_blank&quot;&gt;Sympy Live&lt;/a&gt; website which I spoke about in the presentation.&lt;/p&gt;
&lt;p&gt;Also, met one of our Sympy contributors &lt;a href=&quot;https://github.com/mrocklin&quot;&gt;Matthew Rocklin&lt;/a&gt;  at the meeting. Nice to meet someone you know only as an email-id, in person!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=76&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-05-25T19:06:15+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=26">
	<title>Sergiu Ivanov: Smelling the GSoC Adventure</title>
	<link>http://scolobb.wordpress.com/2012/05/24/smelling-the-gsoc-adventure/</link>
	<content:encoded>&lt;p&gt;I seem to be finally able to afford more time to work for SymPy every day, so I am hastily working through a simulacrum of a community bonding period.  The official coding period has already begun, but I have afforded for a week of delay with my own start in the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;proposal&lt;/a&gt;.  I am currently working on fixing a couple important issues with &lt;em&gt;re, im&lt;/em&gt;, and their interaction with &lt;em&gt;as_real_imag()&lt;/em&gt; functions (Pull Request &lt;a href=&quot;https://github.com/sympy/sympy/pull/1304&quot;&gt;1304&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The good news pertaining to my own project is that we seem to have settled on a name for the module which I am going to add: c&lt;em&gt;ategories&lt;/em&gt;.  I am very enthusiastic about starting my work on it; this event is going to happen within a day or two, and that’s very cool &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=26&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-05-24T20:24:47+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=16">
	<title>Guru Devanla: Plan for first 4 weeks : Post 1</title>
	<link>http://rhoforsympy.wordpress.com/2012/05/15/plan-for-first-4-weeks-post-1/</link>
	<content:encoded>&lt;p&gt;As part of first set of steps (first 4 weeks) in the project plan, my initial proposal was to achieve the following specific goals:&lt;br /&gt;
(These goals are listed also with respect using the current implementation of density operators at this branch: &lt;a href=&quot;https://github.com/ellisonbg/sympy/commit/d43f10bd899b5e4dcd75876a1b6a9e82333e0f57&quot; target=&quot;_blank&quot; title=&quot;densityop&quot;&gt;densityOp branch at ellisongb@github&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start with density.py&lt;br /&gt;
Make it work with different bases by aligning the current implementation with representation logic.&lt;/li&gt;
&lt;li&gt;Come up with an proposal/implementation for density matrices specific to qubits. ( Do we need a specific version for qubits? )&lt;/li&gt;
&lt;li&gt;Update TensorProduct.py for multi-qubit states.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above tasks currently has been planned for the first 4 weeks of the project. For each of the above tasks, I will provide 2 sections in this blog and subsequent blog posts. In the first section, I describe my understanding of current implementation and in the second section I list out what is needed (kind of list out requirements, and then propose the implementation idea).&lt;/p&gt;
&lt;h3&gt;What is currently available in Density.py? ( from the above git branch)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Currently, density.py has the basic function prototypes. &lt;br /&gt;
The current density object accepts any kind of input. That is, there is no restriction on objects to be strictly of type ‘State’ or ‘Ket’.&lt;/li&gt;
&lt;li&gt;Also, when we use Qubit’s as argument to the density object, what gets printed is not accurate. For example,
&lt;/li&gt;&lt;li&gt;
&lt;img src=&quot;https://rhoforsympy.files.wordpress.com/2012/05/screenshot-2.png?w=500&quot; alt=&quot;Example of output for Density&quot; /&gt;&lt;p&gt;&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;The doit() method and represent() method do not execute successfully.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Next steps for density.py&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt; Add eval() function &lt;br /&gt;
     Validate the arguments passed to the constructor. Only instances of type ‘State’ will be accepted.&lt;br /&gt; If any QExpr is passed as argument, then QExpr will have to be simplified and checked if final QExpr object is an instance of type ‘State’. Alternatively, we could just check if passed states are of type ‘Ket’. This step takes care of creation of density matrices.&lt;/li&gt;
&lt;li&gt; Update doit() : The current implementation currently errors out. We will work on this to fix it.&lt;/li&gt;
&lt;li&gt; Update _represent() : The current implementation errors out. Also, the current implementation expands the density operator (thus producing the matrix) before the original represent() method is invoked. The approach, we plan to take is call the represent method for each of the states in the density op.&lt;br /&gt;
Say, Density([ ket1,p1 ] , [ket2, p2], [ket3,p3] ), then would way do change of basis using represent would be to do the following:&lt;br /&gt;
(the following code, is just pseudo-code) &lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;_represent(self, **options)
  states = []
  for each state in density matrix
   states.append(represent(state, **options)
  return Density(states, probabilities )
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;(My understanding is the probabilities of each state should not get affected during change of basis. Is this correct?)&lt;/i&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt; Add test cases. Of course, this step will be step 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
My next blog post will have similar structure of discussion for the next 2  topics. My hope is by end of this week, these details are spec’d out enough so that I can exactly say what I will deliver at end of each of the first 4 weeks.&lt;/p&gt;
&lt;p&gt;
P.S: I plan to provide detailed plan for remaining tasks as we approach the specific week for corresponding task.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=16&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-05-15T23:42:39+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/05/14/region-plots-with-interval-arithmetic">
	<title>Bharath M R: Region Plots with Interval Arithmetic</title>
	<link>http://catchmrbharath.github.com/programming/2012/05/14/region-plots-with-interval-arithmetic</link>
	<content:encoded>&lt;p&gt;My GSoC project is to provide support for implicit plotting using interval arithmetic. As mpmath already has a very good interval arithmetic library, I wanted to try out how efficient the algorithm is going to be using the mpmath interval arithmetic library. I wanted to get an idea on the time required for plotting and also wanted to decide whether to write my own interval arithmetic library or use the existing mpmath library and add additional things to it. I have a basic implementation which supports only the mpmath interval arithmetic functions. The results look promising and I am guessing a separate implementation for plotting will be faster and I will be able to add features more easily.I have an image of &lt;span&gt; $y &amp;gt; 1/x$ &lt;/span&gt; with the interval edges below. The image below was plotted so with a resolution of 1024x1024. It is possible to see how the intervals are subdivided more and more when it reaches the edge of a region.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/14052012/figwithedge.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;It took 1.57 seconds to render this image which is decently fast. I observed that if the independent regions are less and large, then the time take for the plot to be rendered is high. I tried &lt;span&gt; $cos(y) &amp;gt; sin(x)$ &lt;/span&gt; which took about 5.3 seconds to render.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/14052012/cosysinx.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;I wanted to try what the maximum time it takes to render something. So I tried plotting &lt;span&gt; $sin^{2}x+cos^{2}x$ &lt;/span&gt;less than 1. As the arithmetic is done on intervals, it is not possible for the algorithm to decide that the expression is not true throughout the interval. So it goes on subdividing more and more, until it reaches a dimension of 1 pixel. For a resolution of 512X512, it took 120 seconds to render. If there are a lot of evaluations in the expression, then it might increase, but we should be expecting times around 120 seconds.&lt;/p&gt;

&lt;p&gt;Another problem that I have to address is rasterization. I am really not getting any ideas on how to avoid rasterization. One way is to handle the zoom event in matplotlib and change the data to match the zoom. But for complicated graphs, revaluating might take a lot of time, which is bad.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/14052012/figraster.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;We can see that if there is a way of interpolating over the rectangular edges, then we will have a plot without rasterization. I haven’t got any foolproof idea to implement this interpolation as there will be many independent regions. So if you have any idea, then please comment or mail me :). The code for plotting can be found &lt;a href=&quot;https://gist.github.com/2695079&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2012-05-14T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=298">
	<title>Stefan Krastanov: Differential Geometry in SymPy – my GSoC project</title>
	<link>http://krastanov.wordpress.com/2012/05/14/differential-geometry-in-sympy-my-gsoc-project/</link>
	<content:encoded>&lt;p&gt;The next few moths will be interesting. I got accepted in the Google Summer of Code program and I am already starting to worry (irrationally) about the project and the schedule. I will be working on a differential geometry module for SymPy (and time permitting, some more advanced tensor algebra).&lt;/p&gt;
&lt;p&gt;Basically, I want to create the boilerplate that will permit defining some scalar/vector/form/tensor field in an arbitrary coordinate system, then doing some coordinate-system-independent operations on the field (with hopefully coordinate-system-independent simplifications) and, finally, getting the equations describing the final result in another arbitrary coordinate system.&lt;/p&gt;
&lt;p&gt;With this in mind, the details about the project can be seen on &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Stefan-Krastanov%3A-Vector-Analysis&quot; target=&quot;_blank&quot;&gt;the proposal page&lt;/a&gt;. Most of it (all except the tensor algebra that I may work on at the end) is based on the work of &lt;a href=&quot;http://groups.csail.mit.edu/mac/users/gjs/&quot; target=&quot;_blank&quot;&gt;Gerald Jay Sussman&lt;/a&gt; and &lt;a href=&quot;http://groups.csail.mit.edu/mac/users/wisdom/&quot; target=&quot;_blank&quot;&gt;Jack Wisdom&lt;/a&gt; on &lt;a href=&quot;http://dspace.mit.edu/handle/1721.1/30520&quot; target=&quot;_blank&quot;&gt;“Functional Differential Geometry”&lt;/a&gt;. I suppose that this project started as a part of their superb book &lt;a href=&quot;http://mitpress.mit.edu/sicm/&quot; target=&quot;_blank&quot;&gt;“Structure and Interpretation of Classical Mechanics”&lt;/a&gt; (I really have to read this book if I am to call myself a physicist) and the accompanying &lt;a href=&quot;http://groups.csail.mit.edu/mac/users/gjs/6946/linux-install.htm&quot; target=&quot;_blank&quot;&gt;“Scheme Mechanics”&lt;/a&gt; software. By the way, reading the Scheme code is a wonderful experience. This language is beautiful! The authors are also actively updating their code and a newer, more detailed paper on the project can be found &lt;a href=&quot;http://krastanov.wordpress.com/category/sympy-2/feed/groups.csail.mit.edu/mac/users/gjs/6946/calculus-indexed.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most of my work will be reading the Scheme code and tracing corner cases in SymPy. My workflow will probably consist of implementing some notion from “Functional Differential Geometry” in SymPy and only when I get to semi-working state comparing with the original Scheme code for ideas, then repeating the process on the next part of the system. This way I will be less susceptible to implementing Scheme idioms in Python.&lt;/p&gt;
&lt;p&gt;Writing the final version of each function/class of my module will probably take very little time. Most of the time will be dedicated to removing/studying corner cases and assumptions in SymPy’s codebase (more about these later) and experimenting with different approaches for the module structure (and of course reading/deciphering the work of Wisdom and Sussman).&lt;/p&gt;
&lt;p&gt;Finally, I will speak a bit about the aforementioned corner cases and assumptions in the SymPy’s codebase. There are the obvious things like having to derive from Expr if you want to be able to have your class as a part of a symbolic expression. Then there is the fact that Basic (and its subclasses like Expr) do some magic with the arguments for the constructor (saved in &lt;code&gt;expr._args&lt;/code&gt;) in order to automagically have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rebuildable expression with &lt;code&gt;eval(srepr(expr))==expr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rebuildable expression with &lt;code&gt;type(expr)(*expr._args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;some magic with the &lt;code&gt;_hashable_content()&lt;/code&gt; method in order to (presumably) have efficient cashing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These details make it a bit unclear how to implement things like &lt;code&gt;CoordinateSystem&lt;/code&gt; objects which learn during their existence how to transform to other coordinate systems (thus their implementation in code is a mutable object) but at the same time they are the same mathematical object. Anyway, from what I have seen just having a persistent hash and a correct &lt;code&gt;srepr&lt;/code&gt; should be enough. I wonder how tabu it is to change your &lt;code&gt;_args&lt;/code&gt; after the creation of the class. Why I need to worry about caching (thus the hash) and rebuilding (thus the &lt;code&gt;srepr&lt;/code&gt;) is still unclear to me, but I will dedicate whole posts to them later on when I have the explanation. The caching is presumably for performance. It is the need for all that fancy magic that does not permit duck typing in SymPy. If you do not subclass Basic, you can not be part of SymPy, no matter the interfaces that you support.&lt;/p&gt;
&lt;p&gt;Then there is the question of using the container subclasses of &lt;code&gt;Expr&lt;/code&gt;. Things like &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Mul&lt;/code&gt;, which I would have expected to be just containers. However, they are not. They also do some partial canonicalization, but at the moment their exact role (and more importantly, what they &lt;strong&gt;don’t&lt;/strong&gt; do) is very unclear to me. There was much discussion about AST trees and canonicalization on the mailing list, if you are interested, and how exactly to separate the different duties that &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Mul&lt;/code&gt; have, but as this is enough work for another GSoC I decided to just stop thinking about that and use them in the simples way possible: just as containers.&lt;/p&gt;
&lt;p&gt;There is one drawback to this approach. The sum of two vector fields for example is still a vector field and the object that represents the sum should have all the methods of the object representing one of the fields, however &lt;code&gt;Add&lt;/code&gt; does not have the same methods as &lt;code&gt;VectorField&lt;/code&gt;. The solution that was already used in the matrix module was to create classes like &lt;code&gt;MatrixAdd&lt;/code&gt;, and the same was done in the quantum physics module. However, I fear such proliferation of classes for it becomes unsustainable as the number of different modules grows. What happens when I want to combine two objects from the disjoint modules? This is why I simply use &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Mul&lt;/code&gt; and implement helper functions that are not part of the class. These helper functions will ideally be merged in some future canonicalizer that comes about from separating the container and canonicalization parts of &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Mul&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One last remark is that I will probably have to work on sympify and the sympification of matrices, as I will use coordinate tuples (column vectors) quite often. Then there is the distinction between Application and Function and all the magic with metaclasses that seems very hard to justify. But probably I will write entire posts in which I try to understand why the metaclasses in the core are necessary.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;amp;blog=15251174&amp;amp;post=298&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-05-13T23:15:15+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/?p=7">
	<title>Angadh Nanjangud: GSoC 2012 Post 1</title>
	<link>http://angadhsympy.wordpress.com/2012/05/12/gsoc-2012-post-1/</link>
	<content:encoded>&lt;p&gt;A first (and cursory) blog post.&lt;/p&gt;
&lt;p&gt;Having been given the opportunity to code for SymPy this year is extremely flattering so I would like to thank everyone associated with SymPy for the same.&lt;/p&gt;
&lt;p&gt;The last month and a half has been extremely hectic yet, it has been perversely gratifying. School and GSoC preparations have really helped me maximize my productivity by giving me multiple things to focus on. Every day is proving to be enlightening and challenging so far. I should be sufficiently armed by my intended start date. Also, here is a &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud%3A-sympy.physics.mechanics&quot;&gt;link&lt;/a&gt; to my proposal. Special mention to the folks (you know who you are) for guiding me through everything.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=7&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-05-12T07:16:06+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=4">
	<title>Aleksandar Makelov: GSoC 2012: Computational Group Theory</title>
	<link>http://amakelov.wordpress.com/2012/05/11/gsoc-2012-computational-group-theory/</link>
	<content:encoded>&lt;p&gt;And so it happened that by some weird accident I was accepted into GSoC 2012 to implement CGT – and Group Theory is a part of mathematics that I particularly enjoy. Until a few days ago I was pretty busy working for my exams, but in the next few weeks I should be able to start preparing for my project.&lt;/p&gt;
&lt;p&gt;I hope that the timeline I’ve set to myself is not too impossible to do, and that I’ll be able to implement everything I promised in it.&lt;/p&gt;
&lt;p&gt;Finally, I’d like to thank all the people that make sympy possible, and all the people that liked my application, and especially my mentor – David Joyner, and my co-mentor – Aaron Meurer, for their enthusiasm!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=4&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-05-11T00:52:19+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=1">
	<title>Aleksandar Makelov: Hello world!</title>
	<link>http://amakelov.wordpress.com/2012/05/11/hello-world/</link>
	<content:encoded>&lt;p&gt;Welcome to &lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress.com&lt;/a&gt;! This is your very first post. Click the Edit link to modify or delete it, or &lt;a href=&quot;http://amakelov.wordpress.com/wp-admin/post-new.php&quot; title=&quot;Direct link to Add New in the Admin Dashboard&quot;&gt;start a new post&lt;/a&gt;. If you like, use this post to tell readers why you started this blog and what you plan to do with it.&lt;/p&gt;
&lt;p&gt;Happy blogging!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=1&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-05-11T00:12:55+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/05/08/gsoc-2012-sympy">
	<title>Bharath M R: GSoC 2012 Sympy</title>
	<link>http://catchmrbharath.github.com/programming/2012/05/08/gsoc-2012-sympy</link>
	<content:encoded>&lt;p&gt;I was selected by &lt;a href=&quot;http://sympy.org&quot;&gt;SymPy&lt;/a&gt; to work on their plotting module as part of GSoC2012. So I will be spending the next three months working on a plotting module to plot implicit functions. Implicit functions are difficult to plot by simple meshing. Though we might get a good result with simple meshing for most of the functions, it can be quite erroneous for some of the functions. So I will be using interval arithmetic to provide a way to plot implicit functions. My GSoC application can be found &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Bharath-M-R%3A-Plotting-Module&quot;&gt;here&lt;/a&gt;. I will be atlast making a lasting contribution to an open - source software.&lt;/p&gt;

&lt;p&gt;There are a lot of posts on how contributing to a open source software is the best way to sharpen your programming skills. But lot of people are too afraid to approach an organization and start contributing. There is an impending fear that people working on these projects are very stud(intelligent) people and they might get annoyed at your ignorance. Well, let me tell you this, people in an open source project are really nice. They don’t get annoyed very easily and they are ready to help you with everything. They correct all your mistakes with lots of patience and help you with improving your code. I think getting your code reviewed is the best way to improve your programming skills after you have reached a certain stage.&lt;/p&gt;

&lt;p&gt;I was pretty much amazed with SymPy’s code base. Its so neat and clean that any newcomer can just look at the docstrings and can deduce the functionality of every function. Though my experience is limited, I haven’t seen a better codebase than SymPy’s. I am still looking at their codebase and the amount of modularity continues to amaze me. So if anybody is interested in contributing to a python open source project, then consider contributing to &lt;a href=&quot;http://sympy.org&quot;&gt;SymPy&lt;/a&gt;, for you will learn a lot on how a python project has to be structured.&lt;/p&gt;

&lt;p&gt;I will be using this blog to update about my GSoC project and hopefully I will learn a lot during this period.&lt;/p&gt;</content:encoded>
	<dc:date>2012-05-08T07:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:blogger.com,1999:blog-2520472460430880330.post-1283583601392089559">
	<title>Official SymPy blog: GSoC 2012 Results Announced</title>
	<link>http://sympy.blogspot.com/2012/04/google-has-announced-theresults-for.html</link>
	<content:encoded>Google has announced the results for Google Summer of Code.  I am proud to announce that we got six slots from Google.  The following projects have been accepted: &lt;br /&gt;&lt;br /&gt;(Project, Student, Mentor)&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;Category Theory Module&lt;/a&gt;, Sergiu Ivanov, Tom Bachmann&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Guru-Devanla:-Density-Operators-for-Quantum-Module&quot;&gt;Density Operators for Quantum Module in sympy.physics.quantum&lt;/a&gt;, Guru Devanla, Brian Granger (co-mentor Sean Vig)&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud:-sympy.physics.mechanics&quot;&gt;Enhancements to sympy.physics.mechanics&lt;/a&gt;, Angadh Nanjangud, Gilbert Gede&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Aleksandar-Makelov:-Group-theory&quot;&gt;Group Theory&lt;/a&gt;, Aleksandar Makelov, David Joyner (co-mentor Aaron Meurer)&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Bharath-M-R:-Plotting-Module&quot;&gt;Implicit Plotting Module&lt;/a&gt;, Bharath M R, Aaron Meurer&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Stefan-Krastanov:-Vector-Analysis&quot;&gt;Vector Analysis&lt;/a&gt;, Stefan Krastanov, Matthew Rocklin&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Join me in congratulating these students on their acceptance. &lt;br /&gt;&lt;br /&gt;In case you don't know, Google Summer of Code is a program where Google pays students to write code for open source projects.  SymPy was accepted as a mentoring organization this year.  The goal of the program is to help the students learn new skills, in particular in our case: &lt;br /&gt;&lt;br /&gt;* contributing to opensource * working with the community * learn git, pull requests, reviews * teach them how to review other's people patches * do useful work for SymPy * have fun, and encourage the students to stay around &lt;br /&gt;&lt;br /&gt;To all the students who are accepted, you should be receiving an email from your mentor soon to discuss how you will be communicating over the summer about your project.  You should meet with your mentor about once a week during the summer to go over your progress.  You should either meet on a public channel (like IRC), or else post minutes of your meeting in some public channel, so that the whole community can see your progress too. &lt;br /&gt;&lt;br /&gt;Some of you may also be assigned a backup mentor or co-mentor.  These people will also help out in mentoring your project.  If you have two mentors and one is not available for something, or does not know the answer, you can ask your co-mentor. &lt;br /&gt;&lt;br /&gt;I would like all of us to strongly encourage students this summer to submit pull requests early and often.  This will go a long ways towards making sure that you don't end the summer with a ton of code written that never gets merged.  Students should help review pull requests by other students, so that we don't get bogged down reviewing so much code. &lt;br /&gt;&lt;br /&gt;We also require that all students keep a weekly blog of their work over the summer.  If you don't already have a blog, you should start one.  I recommend using either Wordpress or Blogger (I personally use and prefer Wordpress because it has a cleaner interface and lets you do $latex math$, but I recommend you test out both).  You can also use some other service too if you like.  The only requirement is that it has an RSS feed, so we can put it on planet.sympy.org.  Once you have set up your blog, send me the url so I can add it there. &lt;br /&gt;&lt;br /&gt;Starting on the week of May 21 (when the GSoC period officially begins), We will expect you to have at least one blog post a week, describing your progress for that week, or something interesting about your project.  If you don't have a post by the beginning of the day on Saturday, your mentor or I will email you to remind you about it. &lt;br /&gt;&lt;br /&gt;I invite other mentors who have blogs to blog as well.  And I encourage all community members to follow the student blogs, so you can see their progress. &lt;br /&gt;&lt;br /&gt;I would like to thank all the students who applied this year and everyone who submitted a patch.  We received way more feedback this year than we ever have before.  I would also like to thank all the mentors for helping review patches and proposals. &lt;br /&gt;&lt;br /&gt;This summer is looking to be another very productive one for SymPy, and I look forward to it!&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/2520472460430880330-1283583601392089559?l=sympy.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2012-04-27T21:52:26+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/2012/04/27/gsoc-2012-with-sympy-in-the-nearest-future-9/">
	<title>Sergiu Ivanov: GSoC 2012 with SymPy in the Nearest Future</title>
	<link>http://scolobb.wordpress.com/2012/04/27/gsoc-2012-with-sympy-in-the-nearest-future-9/</link>
	<content:encoded>&lt;p&gt;So, I have been accepted as a &lt;a href=&quot;http://www.google-melange.com/gsoc/homepage/google/gsoc2012&quot; target=&quot;_blank&quot;&gt;Google Summer of Code&lt;/a&gt; student to &lt;a href=&quot;http://sympy.org/en/index.html&quot; target=&quot;_blank&quot;&gt;SymPy&lt;/a&gt;.  The coolest part is that I have been accepted with a very experimental project concerned with category theory (the proposal is &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;), for which I am very thankfull to all mentors of SymPy and, in particular, to the project leader &lt;a href=&quot;http://asmeurersympy.wordpress.com/&quot; target=&quot;_blank&quot;&gt;Aaron Meurer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am still busy with my university affairs now, so I’ll only be doing minor fixes while my the semester hasn’t finished at the end of May.  However, I plan to become more active in about a week, when a lot of deadlines which I have now will have expired.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=21&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-04-27T18:30:08+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=1">
	<title>Sergiu Ivanov: Hello world!</title>
	<link>http://scolobb.wordpress.com/2012/04/27/hello-world/</link>
	<content:encoded>&lt;p&gt;Welcome to &lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress.com&lt;/a&gt;! This is your very first post. Click the Edit link to modify or delete it, or &lt;a href=&quot;http://scolobb.wordpress.com/wp-admin/post-new.php&quot; title=&quot;Direct link to Add New in the Admin Dashboard&quot;&gt;start a new post&lt;/a&gt;. If you like, use this post to tell readers why you started this blog and what you plan to do with it.&lt;/p&gt;
&lt;p&gt;Happy blogging!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=1&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-04-27T17:47:24+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/2012/04/24/selected-for-gsoc-2012/">
	<title>Guru Devanla: Selected for GSOC 2012</title>
	<link>http://rhoforsympy.wordpress.com/2012/04/24/selected-for-gsoc-2012/</link>
	<content:encoded>&lt;p&gt;It feels great to be one of the participants chosen to participate in this year’s GSOC.  This blog will continue to have updates regarding my progress through the summer.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=14&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-04-24T22:18:14+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://fseoane.net/blog/?p=1164">
	<title>Fabian Pedregosa: line-by-line memory usage of a Python program</title>
	<link>http://fseoane.net/blog/2012/line-by-line-report-of-memory-usage/</link>
	<content:encoded>&lt;p&gt;My newest project is a Python library for monitoring memory consumption of arbitrary process, and one of its most useful features is the line-by-line analysis of memory usage for Python code.&lt;/p&gt;
&lt;p&gt;I wrote a basic prototype six months ago after being surprised by the lack of related tools. I wanted to  &lt;a href=&quot;http://fseoane.net/blog/2011/qr_multiply-function-in-scipy-linalg/&quot;&gt;plot memory consumption&lt;/a&gt; of a couple of Python functions but did not find a python module to do the job. I came to the conclusion that there is no standard way to get the memory usage of the Python interpreter from within Python, so I resorted to reading for from &lt;code&gt;/proc/$PID/statm&lt;/code&gt;. From there on I realized that one the fetching of memory is done, making a line-by-line report wouldn’t be hard. &lt;/p&gt;
&lt;p&gt;Back to today. I’ve been using the line-by-line memory monitoring to diagnose poor memory management (hidden temporaries, unused allocation, etc.) for some time. It seems to work on two different computers, so full of confidence as I am, I’ll write a blog post about it …&lt;/p&gt;
&lt;h2&gt;How to use it?&lt;/h2&gt;
&lt;p&gt;The easiest way to get it is to install from the Python Package Index:&lt;/p&gt;
&lt;div style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot; class=&quot;codecolorer-container bash default&quot;&gt;&lt;div style=&quot;&quot; class=&quot;bash codecolorer&quot;&gt;    $ easy_install &lt;span style=&quot;color: #660033;&quot;&gt;-U&lt;/span&gt; memory_profiler &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# pip install -U memory_profiler&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but other options include fetching the latests from &lt;a href=&quot;https://github.com/fabianp/memory_profiler&quot;&gt;github&lt;/a&gt; or dropping it on your current working directory or somewhere else on your PYTHONPATH since it consist of a single file.&lt;/p&gt;
&lt;p&gt;Then next step is to write some python code to profile. It can be just about any function, but for the purpose of this blog post I’ll create a function my_func() with mostly memory allocations and save it to a file named example.py:&lt;/p&gt;
&lt;div style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot; class=&quot;codecolorer-container python default&quot;&gt;&lt;div style=&quot;&quot; class=&quot;python codecolorer&quot;&gt;&lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;import&lt;/span&gt; numpy &lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;as&lt;/span&gt; np&lt;br /&gt;
&lt;br /&gt;
@&lt;span style=&quot;color: #dc143c;&quot;&gt;profile&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;def&lt;/span&gt; my_func&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;:&lt;br /&gt;
    a = np.&lt;span style=&quot;color: black;&quot;&gt;zeros&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;100&lt;/span&gt;, &lt;span style=&quot;color: #ff4500;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
    b = np.&lt;span style=&quot;color: black;&quot;&gt;zeros&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;1000&lt;/span&gt;, &lt;span style=&quot;color: #ff4500;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
    c = np.&lt;span style=&quot;color: black;&quot;&gt;zeros&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;10000&lt;/span&gt;, &lt;span style=&quot;color: #ff4500;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;return&lt;/span&gt; a, b, c&lt;br /&gt;
&lt;br /&gt;
&lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;if&lt;/span&gt; __name__ == &lt;span style=&quot;color: #483d8b;&quot;&gt;'__main__'&lt;/span&gt;:&lt;br /&gt;
    my_func&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that I’ve decorated the function with @profile. This tells the profiler to look into function my_func and gather the memory consumption for each line.&lt;/p&gt;
&lt;h2&gt;Wake up the cookie monster&lt;/h2&gt;
&lt;p&gt;To start profiling and output the result to stdout, run the script as usual and append the options “-m memory_profiler -l -v” to the python interpreter.&lt;/p&gt;
&lt;div style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot; class=&quot;codecolorer-container bash default&quot;&gt;&lt;div style=&quot;&quot; class=&quot;bash codecolorer&quot;&gt;$ python &lt;span style=&quot;color: #660033;&quot;&gt;-m&lt;/span&gt; memory_profiler &lt;span style=&quot;color: #660033;&quot;&gt;-l&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-v&lt;/span&gt; example.py&lt;br /&gt;
Line &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;#    Mem usage   Line Contents&lt;/span&gt;&lt;br /&gt;
===================================&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;3&lt;/span&gt;                &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;@&lt;/span&gt;profile&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;4&lt;/span&gt;     &lt;span style=&quot;color: #000000;&quot;&gt;13.68&lt;/span&gt; MB   def my_func&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;:&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;5&lt;/span&gt;     &lt;span style=&quot;color: #000000;&quot;&gt;13.77&lt;/span&gt; MB       a = np.zeros&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;100&lt;/span&gt;, &lt;span style=&quot;color: #000000;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;6&lt;/span&gt;     &lt;span style=&quot;color: #000000;&quot;&gt;21.40&lt;/span&gt; MB       b = np.zeros&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;1000&lt;/span&gt;, &lt;span style=&quot;color: #000000;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;7&lt;/span&gt;     &lt;span style=&quot;color: #000000;&quot;&gt;97.70&lt;/span&gt; MB       c = np.zeros&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;10000&lt;/span&gt;, &lt;span style=&quot;color: #000000;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;8&lt;/span&gt;     &lt;span style=&quot;color: #000000;&quot;&gt;97.70&lt;/span&gt; MB       &lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;return&lt;/span&gt; a, b, c&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;voilá! Each line is prefixed by the memory usage in MB of the Python interpreter after that line has been executed.&lt;/p&gt;</content:encoded>
	<dc:date>2012-04-24T05:04:46+00:00</dc:date>
	<dc:creator>fabian</dc:creator>
</item>
<item rdf:about="http://wdjoyner.wordpress.com/?p=369">
	<title>David Joyner: SymPy and the GSoC</title>
	<link>http://wdjoyner.wordpress.com/2012/04/23/sympy-and-the-gsoc/</link>
	<content:encoded>&lt;p&gt;Google has announced the results for Google Summer of Code.  The following projects have been accepted for &lt;a href=&quot;http://sympy.org/&quot; target=&quot;_blank&quot;&gt;SymPy&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;(Project, Student, Mentor, Link to proposal on the wiki)&lt;br /&gt;
- Category Theory Module, Sergiu Ivanov, Tom Bachmann&lt;br /&gt;
- Density Operators for Quantum Module in sympy.physics.quantum, Guru&lt;br /&gt;
Devanla, Brian Granger (co-mentor Sean Vig)&lt;br /&gt;
- Enhancements to sympy.physics.mechanics, Angadh Nanjangud, Gilbert Gede&lt;br /&gt;
- Group Theory, Aleksandar Makelov, David Joyner (Aaron Meurer co-mentor)&lt;br /&gt;
- Implicit Plotting Module, Bharath M R, Aaron Meurer&lt;br /&gt;
- Vector Analysis, Stefan Krastanov, Matthew Rocklin&lt;/p&gt;
&lt;p&gt;I will help mentor Aleksandar Makelov’s work on group theory. He is a freshman at Harvard.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=wdjoyner.wordpress.com&amp;amp;blog=3527098&amp;amp;post=369&amp;amp;subd=wdjoyner&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-04-23T22:04:07+00:00</dc:date>
	<dc:creator>wdjoyner</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=1">
	<title>Guru Devanla: Hello GSOC Reviewers!</title>
	<link>http://rhoforsympy.wordpress.com/2012/04/05/gsocintro/</link>
	<content:encoded>&lt;p&gt;Hello there!  I plan to use this blog to communicate with the Sympy community regarding the progress I make on the project. I plan to update this blog atleast on a weekly basis, and sometime more frequently if I find something interesting and important to share!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=1&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-04-05T19:28:27+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://sympystats.wordpress.com/?p=257">
	<title>Matthew Rocklin: Simplifying Sets</title>
	<link>http://sympystats.wordpress.com/2012/03/30/simplifying-sets/</link>
	<content:encoded>&lt;p&gt;SymPy’s sets module is a pleasure to work on. The math is approachable well structured. There are basic sets (Intervals, FiniteSets) compound sets (Unions, Intersections, Cartesian Products) and operations (contains, complement, measure, subset). Because the problem is easy to understand and intrinsically simple, sets is a great project to practice coding. Can we write code that is as simple as the problem we’re solving?&lt;/p&gt;
&lt;p&gt;Historically I have been bad at this. I am guilty of writing needlessly complex code. A friend recently sent me &lt;a href=&quot;http://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;a talk by Rich Hickey&lt;/a&gt;, the creator of &lt;a href=&quot;http://en.wikipedia.org/wiki/Clojure&quot;&gt;Clojure&lt;/a&gt;, about simplicity versus ease. I decided to try to make the SymPy.Sets code simpler as an educational project. &lt;/p&gt;
&lt;p&gt;The current issue with sets is that many classes contain code to interact with every other type of class. I.e. we have code that looks like this:&lt;/p&gt;
&lt;pre&gt;def operation(self, other):
    if other.is_FiniteSet:
        ...
    if other.is_Interval:
        ...
    if other.is_ProductSet:
        ...
&lt;/pre&gt;
&lt;p&gt;This is because the rules to, say join the FiniteSet &lt;code&gt;{1,2,3,4}&lt;/code&gt; with the Interval &lt;code&gt;[2, 3)&lt;/code&gt; can be complex. The sets module handles this all marvelously well and produces &lt;code&gt;[2, 3] U {1, 4}&lt;/code&gt;, a nice answer. The code to do it however is atrocious and filled with nests of rules and special cases. Much of this code is in the Union and RealUnion classes but some of it is in FiniteSet, some of it is in Interval as well. Everything works, it’s just complex. &lt;/p&gt;
&lt;p&gt;This is similar to the situation in &lt;code&gt;Mul.flatten&lt;/code&gt; and friends. &lt;/p&gt;
&lt;p&gt;So what is the solution for Sets? How do we simplify Union and Intersection? &lt;/p&gt;
&lt;p&gt;First, lets acknowledge that Union/Intersection serve two purposes&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; They serve as a container of sets
&lt;/li&gt;&lt;li&gt; They simplify these sets using known rules
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;We separate these two aspects and solve them independently. &lt;/p&gt;
&lt;p&gt;We separate these two in the same way Mul and Add handle it. We create a reduce/flatten method and, while we call it by default, it is now separate from the construction logic. There has been talk about separating these two parts of our container classes even further by having container classes that only contain and simplifyers/canonicalizers that only simplify/canonicalize. &lt;/p&gt;
&lt;p&gt;We need a simple way to manage all of the special rules we know for simplifying collections of sets. The issue is that there are a lot of special cases; FiniteSets can do some things, Intervals others, and how do we anticipate not-yet-defined sets? Our solution is as follows. &lt;/p&gt;
&lt;p&gt;Every set class has methods &lt;code&gt;_union(self, other)&lt;/code&gt; and &lt;code&gt;_intersect(self, other)&lt;/code&gt;. These methods contain local simplification rules. I.e. if &lt;code&gt;self&lt;/code&gt; knows how to interact with &lt;code&gt;other&lt;/code&gt; it returns a new, simplified set, otherwise it returns &lt;code&gt;None&lt;/code&gt; for “I don’t know what to do in this situation”. For example &lt;code&gt;Intervals&lt;/code&gt; know how to intersect themselves with other &lt;code&gt;Intervals&lt;/code&gt; but they don’t know how to interact with &lt;code&gt;FiniteSets&lt;/code&gt;, luckily &lt;code&gt;FiniteSets&lt;/code&gt; know how to do this. Together they know how to handle any situation between them. &lt;/p&gt;
&lt;p&gt;Here are the local interaction methods for &lt;code&gt;EmptySet&lt;/code&gt;. &lt;/p&gt;
&lt;pre&gt;def _union(self, other):
    return other
def _intersect(self, other):
    return S.EmptySet
&lt;/pre&gt;
&lt;p&gt;These are particularly simple, are known only by EmptySet, and yet produce proper behavior in any interaction. When we add EmptySet to the family of Sets we don’t need to add code to Union or Intersection. Everything is nicely contained. &lt;/p&gt;
&lt;p&gt;When they simplify, the Union and Intersection classes do two things. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; They walk over the collection of sets and use local rules to perform simplifications
&lt;/li&gt;&lt;li&gt; They also contain a few “global rules” that can accelerate the process by looking at the entire collection of sets at once.
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;In this way it is very easy to extend the Sets module with new classes without breaking Union and Intersection. Additionally, the old nest of code has been cleanly separated and placed into the relevant classes. Unions and Intersections no longer need to know every possible interaction between every possible Set. Instead they manage interactions and let Sets simplify themselves. &lt;/p&gt;
&lt;p&gt;A final note. I like this idea of managing many small simplification rules. I stole this idea from &lt;a href=&quot;http://deeplearning.net/software/theano/&quot;&gt;Theano&lt;/a&gt;, a symbolic/numeric python library. They go one step further though and separate the rule from the container class. I.e. rather than telling Intervals how to interact with Intervals they make a separate rule and include it in some separate simplifying manager. If this idea interests you I suggest you look at their &lt;a href=&quot;http://deeplearning.net/software/theano/optimizations.html#optimizations&quot;&gt;documentation on optimizations&lt;/a&gt;.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=257&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-03-30T20:14:16+00:00</dc:date>
	<dc:creator>mrocklin</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-2520472460430880330.post-798629723236480051">
	<title>Official SymPy blog: Google Summer of Code 2012</title>
	<link>http://sympy.blogspot.com/2012/03/google-summer-of-code-2012.html</link>
	<content:encoded>SymPy was accepted by Google once again to participate in Google Summer of Code for 2012.  Please go to &lt;a href=&quot;http://www.google-melange.com/gsoc/org/google/gsoc2012/sympy&quot;&gt;http://www.google-melange.com/gsoc/org/google/gsoc2012/sympy&lt;/a&gt; for more information about how to apply and get started.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/2520472460430880330-798629723236480051?l=sympy.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2012-03-16T20:55:25+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8814696591561172392.post-4829631852742579231">
	<title>Vladimir Perić: Thoughts on Google Code-in 2011</title>
	<link>http://vperic.blogspot.com/2012/02/thoughts-on-google-code-in-2011.html</link>
	<content:encoded>Google Code-in is the high-school equivalent of the Google Summer of Code. The program ran from Nov 21st to Jan 16th, though we've only now gotten around to sending &lt;a href=&quot;https://groups.google.com/group/sympy/browse_thread/thread/fde434aa771fd5eb/c3220755357b032a&quot;&gt;a &quot;summary&quot; mail to the list about it&lt;/a&gt;. As Aaron noted, we've had some translation work, some work on SymPy Live and a bevy of documentation and code improvements. With 176 tasks completed, I'd say the whole project was a success for SymPy. I was involved as a mentor, so here are some general thoughts and observations about the process. &lt;br /&gt; &lt;br /&gt;&lt;b&gt;E-mail spam.&lt;/b&gt; In SymPy we didn't have a clean separation of mentor duties (eg. KDE only allowed tasks for which someone volunteered to mentor), so the initial idea was to add all (most) mentors to all tasks. This meant a lot of mails, an effect worsened by the fact that each commenter to the issue starts another &quot;conversation&quot; when viewed from Gmail (which I even &lt;a href=&quot;https://code.google.com/p/soc/issues/detail?id=1388&quot;&gt;reported to Melange&lt;/a&gt; as a feature request/bug). At the height of activity, I could get upwards of 30-40 mails (&quot;conversations&quot;) daily, which by far dwarfed my other mail traffic. Then, because each comment is basically a separate mail, I wasted a lot of time looking at issue that someone already addressed (again, most mentors could handle most tasks). For the second round of tasks I didn't add myself to each task, otherwise I'm sure I'd have gotten even more spam. The bug I reported in Melange was fixed, so hopefully this will be less of an issue next year. &lt;br /&gt; &lt;br /&gt;&lt;b&gt;Being a mentor takes a lot of time.&lt;/b&gt; Partly a consequence of above, partly due to all the work being done, but being a mentor took a lot of time. Many students were unfamiliar with git (and didn't want to read the instructions on development workflow on our excellently-written (in my opinion) &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GCI-2011-Landing&quot;&gt;GCI Landing Page&lt;/a&gt;) and solving issues with them was a constant topic on IRC. Students also lacked follow-through with comments (or, occasionally, expected the work handed down to them) which didn't help. Finally, many students were very anxious, and didn't appreciate that we are all volunteers and cannot be around 24/7. All of this resulted in a process that was frustrating at times and stressful for mentors.  &lt;br /&gt; &lt;br /&gt;Regardless of all of the above, &lt;b&gt;a lot of work was done&lt;/b&gt; for SymPy. While I didn't look at the stats, my feeling is that the biggest improvement could be seen in our SymPy Live interface (and our webpage) and our documentation. Yes, we also saw some code improvements, but they were probably a smaller part of the overall contribution (though by no means less important). Interestingly, I think this exposes the two types of tasks the GCI contest is well-suited to: tasks where there is no &quot;in-house&quot; expertise (anything web related in our case) and uninteresting tasks/chores (writing documentation, in our case and probably for most projects). In the first case, we managed to attract experienced developers who could improve our webpage much faster and better than any of the core developers. Writing documentation is also an important task, but one that is shunned by most developers. Still, it is mostly simple work and (more importantly) doesn't usually require in-depth understanding of the code. This made it ideally suited for new contributors. The financial award (100$ for every 3 completed tasks, up to 500$) was enough of a motivation for students. The all-around improvements to our documentation are probably the single biggest advantage of our participation in GCI. &lt;br /&gt; &lt;br /&gt;&lt;b&gt;Translations.&lt;/b&gt; In GCI, tasks were divided into categories and we needed to have at least 5 tasks in every category. While we managed to &quot;fill-up&quot; most categories, Translation was probably the biggest problem. As a, basically, command-line library, it does not make a lot of sense for SymPy to be translated in other languages. In the end, we created tasks for translating our webpage and tutorial to the languages covered by the development team and some of these were done, but I consider this a waste of time. Though this issue is &quot;near and dear&quot; to me (I'm not a native speaker of English), I'm of the opinion that it would be impossible for someone without at least a basic knowledge of English to program with SymPy. Simply, however much effort we put into translating, the class and method names will remain in English and there's no helping that. I very much doubt the newly translated documents will be even used and they're bound to fall behind as the original document changes. We also had to start using gettext to manage the translations, which is a non-trivial amount of work (and there are still some issues). In my opinion, it adds another layer of complexity (however small) for very little gain. &lt;br /&gt; &lt;br /&gt;In &lt;b&gt;conclusion&lt;/b&gt;: did we get stuff done? Yes, without a doubt. Would we have gotten more if the mentors used their mentoring time for coding? Perhaps, but not necessarily. Are some of the students going to keep contributing? Most likely not. Still, I would consider the whole program, and our participation in it, a &lt;b&gt;success&lt;/b&gt;. Ideas for next year could be focusing more on stuff none of the core developers can do (eg. the website work), but we can't really say how far along will SymPy development progress during this year or which tasks might be available to students. Hopefully, more people will volunteer to mentor next year, which would help with most issues I raised here. It is interesting, though, that even with our normally very fast development process we couldn't handle the influx of student work. It'd be interesting to see how other organizations coped. &lt;br /&gt; &lt;br /&gt;Here's to another GCI this year!&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8814696591561172392-4829631852742579231?l=vperic.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2012-02-10T16:27:46+00:00</dc:date>
	<dc:creator>Vladimir Perić</dc:creator>
</item>
<item rdf:about="http://sympystats.wordpress.com/?p=241">
	<title>Matthew Rocklin: sympy.stats is in</title>
	<link>http://sympystats.wordpress.com/2012/02/06/sympy-stats-is-in/</link>
	<content:encoded>&lt;h3&gt;Development&lt;/h3&gt;
&lt;p&gt;It seems there was a flurry of development over the winter holidays.&lt;/p&gt;
&lt;p&gt;Tom’s Meijer-G integration code was merged into master giving SymPy an incredibly powerful definite integration engine. This encouraged me to finish up the pull request for random variables.&lt;/p&gt;
&lt;p&gt;Earlier this morning we finally merged it in and sympy.stats is now in master. If you’re interested please play with it and generate feedback. At the very least it should be able to solve many of your introductory stats homework problems :)&lt;/p&gt;
&lt;p&gt;Actually, I tried using it for a non-trivial example last month and generated an integral which killed the integration engine (mostly this was due to a combination of trigonometric and delta functions). However, I still really wanted the result. The standard solution to analytically intractable statistics problems is to sample. This pushed me to build a monte carlo engine into sympy stats.&lt;/p&gt;
&lt;h3&gt;Sampling&lt;/h3&gt;
&lt;p&gt;The family of stats functions P, E, Var, Density, Given, now have a new member, Sample. You can generate a random sample of any random expression as follows&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.stats import *
&amp;gt;&amp;gt;&amp;gt; X, Y = Die(6), Die(6)
&amp;gt;&amp;gt;&amp;gt; roll = X+Y
&amp;gt;&amp;gt;&amp;gt; Sample(roll)
10
&amp;gt;&amp;gt;&amp;gt; Sample(roll)
5
&amp;gt;&amp;gt;&amp;gt; Sample(X, roll&amp;gt;10) # Sample X given that X+Y&amp;gt;10
6
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Sampling is of course more fail-proof than solving integrals and so expressions can be made arbitrarily complex without issue. This sampling mechanism is also built into the probability and expectation functions using the keyword “numsamples”&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.stats import *
&amp;gt;&amp;gt;&amp;gt; X, Y = Normal(0, 1), Normal(0, 1)
&amp;gt;&amp;gt;&amp;gt; P(X&amp;gt;Y)
1/2
&amp;gt;&amp;gt;&amp;gt; P(X&amp;gt;Y, numsamples = 1000)
499 
────
1000
&amp;gt;&amp;gt;&amp;gt; E(X+Y)
0
&amp;gt;&amp;gt;&amp;gt; E(X+Y, numsamples = 1000)
-0.0334982435603208
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Future&lt;/h3&gt;
&lt;p&gt;GSoC 2012 was announced a couple days ago. I’m excited to see what projects are proposed. &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=241&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-02-07T04:03:22+00:00</dc:date>
	<dc:creator>mrocklin</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-6568744196982634289.post-7881611169286097799">
	<title>Ondřej Čertík: When double precision is not enough</title>
	<link>http://ondrejcertik.blogspot.com/2012/01/when-double-precision-is-not-enough.html</link>
	<content:encoded>I was doing some finite element (FE) calculation and I needed the sum of the lowest 7 eigenvalues of a symmetric matrix (that comes from the FE assembly) to converge to at least 1e-8 accuracy (so that I can check calculation done by some other solver of mine, that calculates the same but doesn't use FE). In reality I wanted the rounded value to 8 decimal digits to be correct, so I really needed 1e-9 accuracy (but it's ok if it is let's say 2e-9, but not ok if it is 9e-9). With my FE solver, I couldn't get it to converge more than to roughly 5e-7 no matter how hard I tried. Now what?&lt;br /&gt;&lt;br /&gt;When doing the convergence, I take a good mesh and keep increasing &quot;p&quot; (the polynomial order) until it converges. For my particular problem, it is fully converged for about p=25 (the solver supports the order up to 64). Increasing &quot;p&quot; further will not increase the accuracy anymore, and the accuracy stays at the level 5e-7 for the sum of the lowest 7 eigenvalues. For optimal meshes, it converges at p=25, for not optimal meshes, it converges for higher &quot;p&quot;, but in all cases, it doesn't get below 5e-7.&lt;br /&gt;&lt;br /&gt;I know from experience, that for simpler problems, the FE solver can easily converge to 1e-10 or more using double precision. So I know it is doable, now the question is what the problem is: there&lt;br /&gt;are a few possible reasons:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The FE quadrature is not accurate enough&lt;/li&gt;&lt;li&gt;The condition number of the matrix is high, thus LAPACK doesn't return very accurate eigenvalues&lt;/li&gt;&lt;li&gt;Bug in the assembly/solver (like single/double corruption in Fortran, or some other subtle bug)&lt;/li&gt;&lt;/ul&gt;When using the same solver for simpler potential, it converged nicely to 1e-10. So this suggests there is no bug in the assembly or solver itself. It is possible that the quadrature is not accurate enough, but again, if it converges for simple problem, it's probably not it. So it seems it is the ill conditioned matrix, that causes this. So I printed the residuals (that I simply calculated in Fortran using the matrix and the eigenvectors returned by LAPACK), and it only showed 1e-9. For simpler problems, it can go to 1e-14 easily. So that must be it. How do we fix it?&lt;br /&gt;&lt;br /&gt;Obviously by making the matrix less ill conditioned, which is caused by the mesh for the problem (the ratio of the longest/shortest elements is 1e9) but for my problem I really needed such a mesh. So the other option is to increase the real number accuracy.&lt;br /&gt;&lt;br /&gt;In Fortran all real variables are defined as real(dp), where dp is an integer defined at a single place in the project. There are several ways to define it, but it's value is 8 for gfortran and it means double precision. So I increased it to 16 (quadruple precision), recompiled. Now the whole program calculates in quadruple precision (more than 30 significant digits). I had to recompile LAPACK using the &quot;-fdefault-real-8&quot; gfortran option, that promotes all double precision numbers to quadruple precision, and I used the &quot;d&quot; versions (double precision, now promoted to quadruple) of LAPACK routines. &lt;br /&gt;&lt;br /&gt;I rerun the calculation ---- and suddenly LAPACK residuals are around 1e-13, and the solver converges to 1e-10 easily (for the sum of the lowest 7 eigenvalues). Problem solved. &lt;br /&gt;&lt;br /&gt;Turning my Fortran program to quadruple precision is as easy as changing one variable and recompiling. Turning LAPACK to quadruple precision is easy with a single gfortran flag (LAPACK uses the old f77 syntax for double precision, if it used real(dp), then I would simply change it as for my program). The whole calculation got at least 10x slower with quadruple. The reason is that gfortran runtime uses the libquadmath library, that simulates quadruple precision (as current CPUs only support double precision natively). &lt;br /&gt;&lt;br /&gt;I actually discovered a few bugs in my program (typically some constants in older code didn't use the &quot;dp&quot; syntax, but had the double precision hardwired). Fortran warns about all such cases, when the real variables have incompatible precision. &lt;br /&gt;&lt;br /&gt;It is amazing how easy it is to work with different precision in Fortran (literally just one change and recompile). How could this be done with C++? This wikipedia &lt;a href=&quot;http://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format&quot;&gt;page&lt;/a&gt; suggests, that &quot;long double&quot; is only 80bit in most cases (quadruple is 128bit), but gcc offers __float128, so it seems I would have to manually change all &quot;double&quot; to &quot;__float128&quot; in the whole C++ program (this could be done with a single &quot;sed&quot; command).&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/6568744196982634289-7881611169286097799?l=ondrejcertik.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2012-01-26T18:51:28+00:00</dc:date>
	<dc:creator>Ondřej Čertík</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8510171342300140296.post-5238790680519906319">
	<title>Sean Vig: Finishing what I started</title>
	<link>http://seanvig.blogspot.com/2012/01/finishing-what-i-started.html</link>
	<content:encoded>As of today, I'm happy to report that my last pull request for angular momentum coupling was merged into master (see &lt;a href=&quot;http://here/&quot;&gt;here&lt;/a&gt;). The master branch now has the capability to do arbitrary angular momentum coupling and uncoupling. I ended up writing a summary of the algorithm I used to write this, which I briefly described (or more accurately, brushed over) in the previous blog post, the write up for which is currently hosted on github &lt;a href=&quot;https://github.com/flacjacket/coupling_algorithm&quot;&gt;here&lt;/a&gt;. This should be all of the big changes for the angular momentum algebra I can foresee in the near future.&lt;br /&gt;&lt;br /&gt;At this point, school is starting back up again and especially since I have joined a research group I won't be doing anything big in the near future. That said, I do have a couple things I've started in on that I will try to finish up if I can get some time. First, I started working on some changes to the quantum printing framework. I have a pull request open for some new tests to the quantum printing framework, so if that can get finished up I'll try to work on getting those changes in. This was an issue that had been brought up before (around the time I started the GSoC project) and even the work I've done so far, I've dug up a couple issues with the printing framework. The current pull for the tests are &lt;a href=&quot;https://github.com/sympy/sympy/pull/908&quot;&gt;here&lt;/a&gt; and the changes to the printing framework which are to follow are &lt;a href=&quot;https://github.com/flacjacket/sympy/tree/quantum_printing&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In addition, over winter break, I dug into some related issues with Piecewise, particularly with the treatment of the otherwise parameter. Just today I opened a pull request for collecting feedback on the changes I made &lt;a href=&quot;https://github.com/sympy/sympy/pull/1009&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Now that the spin stuff is finished, I've been thinking about going back and looking at the stuff I did at the beginning of the GSoC project, particularly some of the stuff with CG coefficients and simplification of these terms. From what I remember, there should be some quick changes to make some stuff run much better, so if I get time, I'll take a look back at that.&lt;br /&gt;&lt;br /&gt;Last, while I am quite happy with how the current angular momentum coupling and uncoupling methods treat numerical cases, there's nothing really there for treating symbolic cases and any symbolic arguments cause the methods to return a very general summation. I put some thought into modifying the current algorithm to allow for some forms of symbolic coupling and uncoupling, but I wasn't able to come up with any. If I can sit down and find something that could do symbolic coupling and uncoupling, that would be the icing on the cake of the current algorithm.&lt;br /&gt;&lt;br /&gt;With the merging of this pull request, everything that I set out to do for my GSoC project last summer has been completed in some form. There may be some things to refine or work on, but for the most part, I have accomplished everything I set out to do. Unless I make some big changes to the coupling algorithm, like working out something with symbolic cases, or make some other big change to the angular momentum algebra, this will likely be my last post here, at least until something else comes up that I'd like to document.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-5238790680519906319?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2012-01-22T06:57:37+00:00</dc:date>
	<dc:creator>Sean Vig</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1077">
	<title>Aaron Meurer: Vim vs. Emacs (Part 3)</title>
	<link>http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/</link>
	<content:encoded>&lt;p&gt;See parts &lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/&quot;&gt;1&lt;/a&gt; and &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/&quot;&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some more comments after using emacs for a while:&lt;/p&gt;
&lt;li&gt;I finally found the perfect tab completion solution. It took way too much searching for how awesome it is.  It’s called &lt;a href=&quot;http://cx4a.org/software/auto-complete/manual.html&quot;&gt;auto-complete-mode&lt;/a&gt;.  The best way to get an idea of what this is is to watch &lt;a href=&quot;http://www.youtube.com/watch?v=rGVVnDxwJYE&quot;&gt;this screencast&lt;/a&gt;.  Basically, it shows you a completion list automatically.  It uses the &lt;em&gt;TAB&lt;/em&gt; key to do completion (to me, this is a no brainer, but for some reason, no other completion extension that I found did this, requiring you to do all kinds of nonsense in your .emacs file).  It’s got cool features like simple fuzzy matching and intelligent matching (so the first completion is what you tend to use, instead of just the first one that matches).  To quote the author, “a goal of auto-complete-mode is to provide a system that does what users want without any command.” I couldn’t agree with that goal more. If you install it, I recommend adding &lt;code&gt;(define-key ac-mode-map (kbd &quot;M-TAB&quot;) 'auto-complete)&lt;/code&gt; to your .emacs, so that you can use M-TAB to force the completion menu to come up.  This generally happens automatically, but I think this is the only way to get fuzzy matching, for example. Actually, you can also just use &lt;code&gt;(ac-set-trigger-key &quot;TAB&quot;)&lt;/code&gt;, which intelligently sets TAB to complete or indent, based on which one you more likely want.  This seems to work pretty well to me.&lt;/li&gt;
&lt;li&gt;Speaking of indenting, emacs has a pretty nice indentation feature for Python.  You just press &lt;code&gt;TAB&lt;/code&gt; repeatedly, and it cycles through all the syntactically legal indentations.  I find this to be more useful than the usual &lt;code&gt;TAB&lt;/code&gt; indents behavior of most editors. Note that by default, it won’t automatically indent, even with trivial indentations (i.e., keeping the previous indentation).  This is easy to fix, though.  Just add &lt;code&gt;(define-key global-map (kbd &quot;RET&quot;) 'newline-and-indent)&lt;/code&gt; to your .emacs file.  This will make &lt;code&gt;RET&lt;/code&gt; do the same thing as &lt;code&gt;C-j&lt;/code&gt;, i.e., basically the equivalent of &lt;code&gt;RET TAB&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;emacs comes with an extension that lets you work with version control systems, called VC.  I don’t use it.  I don’t like stuff messing with my git stuff behind my back (sounds like a good way to lose data to me), and I’m good enough with git commands straight that I don’t need the help.
&lt;p&gt;But unlike all the other hundreds of emacs features that I don’t use, this one was seriously slowing down my workflow.  It adds three or four seconds to the startup time of emacs when loading from within a git repository.  So I did some Googling and added this to my .emacs file:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;;; Disable all the version control stuff         
;; Makes emacs load much faster inside git repos 

(setq vc-handled-backends nil)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;unrelated: Why doesn’t WordPress support lisp as a language for syntax highlighting?&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;This disables the version control stuff, making emacs load fast again (virtually as fast as vim, actually).
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Speaking of making emacs go faster, make sure you compile all your extensions into byte code.  For whatever reason, emacs doesn’t do this automatically, even though compiled files run much faster, and it doesn’t take very long.  The easiest way is to use &lt;code&gt;M-x byte-compile-file&lt;/code&gt; from within emacs.  Just make sure that if you modify the .el file that you recompile the byte code, or it will continue to use the old version.&lt;/li&gt;
&lt;li&gt;I finally figured out how to enable mouse support.  For whatever reason, Googling got me nowhere with this, so I ended up asking on the &lt;a href=&quot;https://lists.gnu.org/mailman/listinfo/help-gnu-emacs&quot;&gt;help-gnu-emacs&lt;/a&gt; list, which was very helpful.  The solution is to put
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;;; ===== Enable mouse support ====
                                      
(require 'xt-mouse)                   
(xterm-mouse-mode)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;in your .emacs file.  And then it just works.  It needs some tweaking (e.g., it doesn’t play so well with momentum scrolling), but at least it works. I thought I was going to hang myself without mouse support. Because frankly, as good as the movement commands are, moving with the mouse is so much easier sometimes (the same is true for vim too, btw).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;I compiled the git version of emacs (it’s not very hard btw).  I did this to see if the mouse suport “bug” was fixed there, but I’ve gone ahead and kept using it, as it’s nicer.  But I didn’t figure out how to configure it to not load in an X window. So for now, I’ve aliased &lt;code&gt;emacs&lt;/code&gt; to &lt;code&gt;emacs -nw&lt;/code&gt;. I’m sure I just need to add some flag to &lt;code&gt;configure&lt;/code&gt;, but I haven’t gotten around to looking it up yet.&lt;/li&gt;
&lt;li&gt;I found out how to allow editing in the Isearch mode (again, thanks to the help-gnu-emacs list).  You need to install the &lt;a href=&quot;https://github.com/asmeurer/dotfiles/blob/master/.emacs.d/lisp/isearch%2B.el&quot;&gt;isearch+&lt;/a&gt; extension, add the following to your .emacs,
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;;; ===== isearch+ =====         

(require 'isearch+)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;and most importantly, you need to edit the file and uncomment all the commmands you want to allow.  If you follow my link above, it goes to my personal dotfiles repo, where I’ve already done that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;On a related note, this is the first of several emacs extensions I’ve installed that I’ve edited the extension file itself for.  The rest, I just had to add some code to .emacs.  In most cases, there was already a variable or suggested code snippet to add to .emacs to get what I wanted.
&lt;p&gt;On the other hand, with vim, I had to edit virtually every extension I installed to make it do what I want.  I’m not sure what this means, though.  It could be a statement about one of many things: how the emacs community provides nicer defaults, how the vim language is easier to use, and hence more inviting for me to edit the files, or how I haven’t gotten around to messing with certain things yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;If you do a lot of work with LaTeX, check out &lt;a href=&quot;http://www.gnu.org/software/auctex/&quot;&gt;AUCTeX&lt;/a&gt;. I haven’t used it enough yet to say much about it, but from what I’ve played around with, it’s pretty awesome.  And if you use a windowed version of emacs, it’s got a really awesome preview mode.&lt;/li&gt;
&lt;li&gt;If you’re bored, check out the &lt;a href=&quot;http://www.dr-qubit.org/predictive/predictive-user-manual/html/index.php&quot;&gt;predictive&lt;/a&gt; extension.  It’s actually not as helpful as you’d think (unlike the very similar auto-complete-mode module mentioned above).  But it’s kind of cool to turn on and play around with when you’re typing something.  Maybe you’ll learn new words or something.&lt;/li&gt;
&lt;li&gt;I could go on and on.  I haven’t mentioned the most basic customizations (like how to setup four-space tabs).  If you are starting to use emacs, I recommend going through &lt;code&gt;M-x customize&lt;/code&gt;, and reading my &lt;a href=&quot;https://github.com/asmeurer/dotfiles/blob/master/.emacs&quot;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file.  And my best advice: if you want emacs to do something, first do &lt;code&gt;M-x customize&lt;/code&gt; and search for what you want (EDIT: apparently searching customize requires emacs 24, i.e., the development version).  If you don’t find what you want there (and you will surprisingly often), search Google.  There are so many emacs users, that the chances of someone else wanting what you want are very likely. I’ve found the results from the &lt;a href=&quot;http://www.emacswiki.org/&quot;&gt;emacs wiki&lt;/a&gt; to be particularly helpful. And one more thing: if you find an extension you like, double check first to see if it’s not already included in emacs. Emacs seems to like including good extensions in future releases, so an older extension has a good chance of already being included.&lt;/li&gt;
&lt;p&gt;Some emacs questions:&lt;/p&gt;
&lt;li&gt;I tried &lt;code&gt;(define-abbrev global-abbrev-table &quot;Ondrej&quot; &quot;Ondřej&quot;)&lt;/code&gt;, so that when I type Ondrej it give me Ondřej.  But it doesn’t work.  Is this a bug or what? If I do &lt;code&gt;(define-abbrev global-abbrev-table &quot;foo&quot; &quot;bar&quot;)&lt;/code&gt; and type “foo”, it turns into “bar”, but the above leaves Ondrej alone. &lt;em&gt;EDIT: I guess this was an emacs bug.  It doesn’t seem to be there any more (perhaps it was fixed with the git version or something).&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Is there a way to reload .emacs without closing emacs? I’m doing that a lot these days. &lt;em&gt;EDIT: I found it. Do &lt;code&gt;M-x load-file RET ~/.emacs&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Is there a good emacs equivalent of the vim &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=273&quot;&gt;tag list plugin&lt;/a&gt;  (thanks for commenter Scott for pointing me to that in the first place)?  I just want something that lists all the class and function definitions in a Python file in order, so I can easily jump to the one I want, or just get an overview of the file.  &lt;/li&gt;
&lt;p&gt;This Tuesday will mark the point where I will have spend as long using emacs as I did using vim. But already, I feel more competent with emacs.  I won’t repeat what I said in my last post, but I just want to say that the ability to edit and write at the same time makes me way more productive.  The fact that it uses keyboard shortcuts that I’m already used to probably helps a lot too.  Even so, I’ve not used any kind of cheat sheet for emacs (since I never really found any that were any good), and yet I feel like I’ve memorized more key commands now than I ever did with vim, for which I did use a &lt;a href=&quot;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&quot;&gt;cheat sheet&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;So I really don’t see myself going back to vim at this point.&lt;/p&gt;
&lt;p&gt;I’m actually surprised.  Virtually everyone I know who uses a command line editor uses vim.  It’s definitely the more popular of the two.  But having tried both, I can only speculate as to why.  Vim has a much higher learning curve than emacs.  Everybody grows up learning how to write text in editors like Microsoft Word, TextEdit, Notepad, etc., that all work fundamentally like emacs: if you type text, it enters the text.  If you want to do advanced editing with the keyboard, you hold down some meta keys and type chorded keyboard shortcuts.  The vim modal editing methodology is so different from this, that it surprises me that so many people go to the trouble of learning it (I mean, to the point that they are more efficient with it).  I can see the benefit over GUI editors, which have nothing on either vim or emacs with regards to customization, or just the plain editing power that is really necessary for coding. My guesses why people use vim:&lt;/p&gt;
&lt;li&gt;They are shown vim first, so just use it.
&lt;/li&gt;
&lt;li&gt;They are turned off by the massiveness of emacs (it seems contradictory to me, since the whole point of using a command line editor is to get more power, but I could see it).
&lt;/li&gt;
&lt;li&gt;They are turned off by emacs lisp.
&lt;/li&gt;
&lt;li&gt;Some combination of those.&lt;/li&gt;
&lt;p&gt;Maybe the vim users out there could comment why they use vim.  Am I missing something?  Or are your heads just wired differently from mine? And if you use emacs (or anything else), I’d love to hear from you too?&lt;/p&gt;
&lt;p&gt;At any rate, I recommend that anyone who wants to give command line editors a chance do what I did: learn both vim and emacs.  My blog posts should be enough to give you some good advice.  I went cold-turkey, and I recommend that you do too, but only do it if you won’t have any important editing to do for a few weeks, as your editing rate will slow down a lot as you are learning for both editors.  And even though I think I am going to stick with emacs, learning vim was still valuable.  Unlike emacs, vi is part of the POSIX standard, so it’s included in pretty much every UNIX distribution.  I’ll be glad when I find myself on a minimal command line and know how to use a decent text editor.  And anyway, you can’t really know which one will be your way until you try them both.  I really thought I would end up using vim, as it was so popular among all the people I know who use command line editors. But I guess there is only &lt;a href=&quot;http://www.dina.dk/~abraham/religion/&quot;&gt;One True Editor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; I found out how to make emacs really fast.  The key is to run one process of emacs in daemon mode, and have the rest connect to that.  Then you only have to wait for the startup once (per computer session).  To do it, just set your &lt;code&gt;EDITOR&lt;/code&gt; to &lt;code&gt;'emacsclient -a &quot;&quot; -nw'&lt;/code&gt; (and you might also want to alias &lt;code&gt;emacs&lt;/code&gt; to that as well).  What this does is connect to the emacs daemon.  The &lt;code&gt;-a &quot;&quot;&lt;/code&gt; starts one if it isn’t already started (you can also do this yourself with &lt;code&gt;emacs --daemon&lt;/code&gt;.  If you only want to use the daemon version if you’ve specifically started it, replace &lt;code&gt;&quot;&quot;&lt;/code&gt; with &lt;code&gt;emacs&lt;/code&gt;.  This will connect to the daemon if it’s running, and otherwise just start a new emacs process.  &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-nw&lt;/code&gt; keeps it from running in window mode.  Remove this if you use the GUI version of emacs.  This is necessary to make it work correctly with multiple tabs.  This is so fast that you should never really even need to use &lt;code&gt;C-z&lt;/code&gt; to quickly exit emacs.  &lt;code&gt;C-x C-c&lt;/code&gt; is just fine, because reopening will be instantaneous.  I like this because I was starting to accumulate background emacs processes that I forgot about.&lt;/p&gt;
&lt;p&gt;This probably requires a fairly new version of emacs, possibly even the development version.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1077&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-01-13T23:01:39+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1070">
	<title>Aaron Meurer: Vim vs. Emacs (Part 2)</title>
	<link>http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/</link>
	<content:encoded>&lt;p&gt;As I noted in &lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/&quot;&gt;part 1&lt;/a&gt;, I have decided to switch to a command line text editor.  I decided that, to be fair, I would try both vim and emacs.  And to force myself to learn them, I decided to use them cold-turkey.  &lt;/p&gt;
&lt;p&gt;Since I’m going cold-turkey, I am doing this over my break from classes, so that I can weed out any difficulties during a period when I can live with slow text editing if necessary.  This is a one month break.  I have reached (roughly) the half way point.  For the first half, I used nothing but vim to edit text.  Now, I will use nothing but emacs.&lt;/p&gt;
&lt;p&gt;Now that I’ve stopped using vim (for now anyway), my view of it isn’t much different from what I wrote in the first part.  A lot of things there were addressed by commenters (or rather commenter).  I still feel that it’s not an a method of text editing that fits my head.  My entire life, I’ve used text editors where typing inserts text, and various control characters do things like move around faster.  &lt;/p&gt;
&lt;p&gt;Enter emacs. It does exactly this.  Also a ton more.&lt;/p&gt;
&lt;p&gt;I’ve only been using emacs for two days, but here are my impressions so far:&lt;/p&gt;
&lt;li&gt;&lt;strong&gt;The tutorial is better.&lt;/strong&gt;  When you start emacs, it tells you how to start the tutorial.  Just type &lt;code&gt;C-h t&lt;/code&gt; (if you don’t already know, in emacs &lt;code&gt;C-&lt;/code&gt; means &lt;code&gt;CTRL-&lt;/code&gt; and &lt;code&gt;M-&lt;/code&gt; means &lt;code&gt;ALT-&lt;/code&gt;).  Like I said last time, the very first thing you learn is how to scroll by more than one line at a time.  That turns out to be a very useful thing to do.  Also, the emacs tutorial did a better job of explaining how to use multiple files at once in emacs, which is something that I still don’t really know how to do very well in vim.
&lt;p&gt;I have to give the vim tutorial some credit for one thing, though.  It has better interactive examples.  For example, in the vim tutorial, you have stuff like &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;  1. Move the cursor to the second line in the phrase below.
  2. Type  dd  to delete the line.
  3. Now move to the fourth line.
  4. Type   2dd   to delete two lines.

---&amp;gt;  1)  Roses are red,
---&amp;gt;  2)  Mud is fun,
---&amp;gt;  3)  Violets are blue,
---&amp;gt;  4)  I have a car,
---&amp;gt;  5)  Clocks tell time,
---&amp;gt;  6)  Sugar is sweet
---&amp;gt;  7)  And so are you.
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;whereas in the emacs tutorial, you just have&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;&amp;gt;&amp;gt; Kill a line, move around, kill another line.
   Then do C-y to get back the second killed line.
   Then do M-y and it will be replaced by the first killed line.
   Do more M-y's and see what you get.  Keep doing them until
   the second kill line comes back, and then a few more.
   If you like, you can try giving M-y positive and negative
   arguments.
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;which is a little more vague.  So I have to give vim credit for that.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everything’s a buffer.&lt;/strong&gt; This line from the emacs tutorial really stuck with me: “ANY text you see in an Emacs window is always part of some buffer.”  Emacs has really a awesome editing model, even simple things like &lt;code&gt;M-f&lt;/code&gt; and &lt;code&gt;M-b&lt;/code&gt; to move around words at a time, or &lt;code&gt;M-DEL&lt;/code&gt; to delete whole words make things &lt;strong&gt;way&lt;/strong&gt; faster.  Vim of course has all of these too, albiet in a different way, but they aren’t everywhere.  In emacs, everything is a buffer, which just means that everything supports all the standard emacs commands.  So if you type &lt;code&gt;M-x&lt;/code&gt; (roughly the equivalent of vim’s &lt;code&gt;:&lt;/code&gt;) and start typing a command, you can move around and edit your command with emacs commands.  One of the things that bothered me about vim was that when I was typing something with &lt;code&gt;:&lt;/code&gt;, I couldn’t use vim’s text moving/modifying commands to manipulate the text.  Typing ESC just canceled the command.
&lt;p&gt;Exceptions: There are at least two exceptions I’ve found to this rule.  First, if you do a search with &lt;code&gt;C-s&lt;/code&gt; or &lt;code&gt;C-r&lt;/code&gt;, no control commands work.  If you type a search string, and then type &lt;code&gt;M-DEL&lt;/code&gt; to try to delete the last word in your search string, you will instead delete the word where the cursor is!  The solution I think is to use something like &lt;code&gt;M-x re-builder&lt;/code&gt; instead.  This was a little slow in my tests.&lt;/p&gt;
&lt;p&gt;Second, the emacs manual is presented in the &lt;code&gt;info&lt;/code&gt; program, which uses completely different key commands from every other program.  This irked me quite a bit, because as soon as I finished the emacs tutorial, it pointed me to the manual, which was in &lt;code&gt;info&lt;/code&gt;.  Then, the first thing in &lt;code&gt;info&lt;/code&gt; is a tutorial on how to use &lt;code&gt;info&lt;/code&gt;!  I opted to skip this.  If I need any information on emacs, I’ll just do a Google search anyway, so I found this to be a waste of time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s a little slower.&lt;/strong&gt; I do notice a speed difference between emacs and vim.  vim is much more lightweight, and it shows.  Starting up emacs takes a second or two.  Also, since a lot of the features are more interactive, they suffer from a speed delay.  It’s not nearly slow enough to be a serious issue, though, and it’s still way faster than the GUI program I was using before (start up time).
&lt;p&gt;The emacs tutorial suggests using &lt;code&gt;C-z&lt;/code&gt; whenever you want to only temporarily close emacs.  This seems like a good idea, and has worked pretty well for me so far (though I still usually close the whole thing with &lt;code&gt;C-x C-c&lt;/code&gt; out of habit).&lt;/p&gt;
&lt;p&gt;On a related note, I noticed that doing type-ahead while waiting for emacs to start up didn’t always work, whereas it always worked in vim (I do this, e.g., when waiting for the editor to start up when writing commit messages).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s way more user-friendly.&lt;/strong&gt; Note that this is of course a relative term.  I mean more user-friendly than vim, and pretty user-friendly for a command line program.  Obviously, the most user-friendly text editors are the GUI ones used by the majority of the population (for that very reason).  Actually, both vim and emacs are user-unfriendly in that if you accidentally open them and don’t know what they are or how to use them, you have no idea how to close them.  But even &lt;code&gt;less&lt;/code&gt; (i.e., &lt;code&gt;man&lt;/code&gt;) is technically like this.
&lt;p&gt;I’m not even referring to the different editing “modes” of the two editors, though you could easily argue that emacs style editing is more user-friendly than vim style editing. What I mean here is that emacs interaction is nice. When you type &lt;code&gt;:&lt;/code&gt; in vim, start typing a command, and type &lt;code&gt;TAB&lt;/code&gt;, it enters the first completion, regardless if it’s unique.  Pressing &lt;code&gt;TAB&lt;/code&gt; multiple times give the rest.  In emacs, if you type &lt;code&gt;M-x&lt;/code&gt; and start typing a command and type &lt;code&gt;TAB&lt;/code&gt;, it pops up a temporary window with the list of all completions.  It even colors the next character, so you can easily see what to type next to get what you want.  As soon as you enter the command, the window disappears. (yes, I know about &lt;code&gt;CTRL-D&lt;/code&gt; in vim, but to me tab completion should &lt;em&gt;always&lt;/em&gt; work like it does in bash: complete characters if and only if they are unique in the list of completions)&lt;/p&gt;
&lt;p&gt;By the way, when I said everything’s a buffer, I mean everything.  If you want, you can exit the &lt;code&gt;M-x&lt;/code&gt; entry (type &lt;code&gt;C-g&lt;/code&gt;), type &lt;code&gt;C-x C-b&lt;/code&gt; to show the list of buffers, &lt;code&gt;C-x o&lt;/code&gt; to switch to it, scroll down to “Completions”, press Enter, and actually get in the completion list, as a buffer (there’s probably a less complicated way to get to it, by the way).  You can then do whatever your heart fancies with it (save it to a file, copy it, whatever).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customization is harder.&lt;/strong&gt; This was expected, since I already knew that emacs used lisp.  vim uses a language that is really easy to understand.  I was able to modify all the vim plugins I installed very easily.  If you want to change a setting globally in vim, just Google it and add one line to your .vimrc.   In emacs, everything is in Emacs Lisp.  I suppose prior experience with Lisp would probably help here.
&lt;p&gt;In the vim tutorial, near the end, it told how to create a .vimrc file, and even gave a very useful sample one as a starter.  In emacs, it took me a while to figure out how to do the equivalent (it took me a few Google searches just to figure out that the name of the configuration file in emacs is .emacs).  &lt;/p&gt;
&lt;p&gt;Actually, the emacs equivalent is way better than in vim, but it isn’t really mentioned anywhere. It took me probably a dozen Google searches before I learned about it (granted, I was looking for things in the same way I did for vim, lines to add to .emacs). What you have to do is type &lt;code&gt;M-x configure&lt;/code&gt;.  This opens what is basically a huge preferences dialog for emacs.  You can then go through and set just about every settable emacs setting from there.  The interface is very nice, as it’s interactive and tells you all about each setting.  And you never have to touch Lisp.  I’m still going through it, so I can’t comment more on it yet.  But I recommend doing &lt;code&gt;M-x configure&lt;/code&gt; as soon as you have finished the tutorial and have gotten used to editing with emacs, as you are invariably going to want to change some things (though I should note that emacs generally has nicer defaults than vim).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better text editing methodology?&lt;/strong&gt; Like I’ve already mentioned a bunch of times, the emacs editing model seems to fit my head better than the vim model.  In emacs, you type text, and it inserts the text.  If you want to do some advanced modification or move around, you type a control sequence.  In vim, you type characters, and it does modifications or moves around.  If you want to type text, you type &lt;code&gt;i&lt;/code&gt; (or one of a few other characters) and type it.  Then, if you want to move around or modify the text, you have to press &lt;code&gt;ESC&lt;/code&gt;.  This so-called “modular editing” doesn’t seem to work for me.  For one thing, I like to rapidly switch back and forth between these two “modes” (editing and inserting) when I write things.  I type too fast and write something wrong, and have to delete some stuff. The &lt;code&gt;M-DEL&lt;/code&gt; emacs command is probably my most used (this also works in Mac OS X text dialogs, so I’m used to it already).  In vim, there is &lt;code&gt;CTRL-w&lt;/code&gt; and a few others, but if I want to do something more advanced, like rearranging a sentence, then half of my key presses would be &lt;code&gt;ESC&lt;/code&gt; or &lt;code&gt;i&lt;/code&gt;, i.e., just moving between the modes.  In emacs, I can always have my pinky by Control and Alt (especially as soon as I remap CAPS-LOCK to Control).
&lt;p&gt;Also, it really irks me how in vim, if you are at the end of a line and press &lt;code&gt;l&lt;/code&gt; (or right-arrow), instead of moving to the beginning of the next line, it beeps!  In emacs, if you are at the end of a the line and type &lt;code&gt;C-f&lt;/code&gt;, it moves to the beginning of the next line (actually, it technically moves just beyond the line, in case you want to append, which is another annoying thing about vim: you have to use &lt;code&gt;A&lt;/code&gt;, not &lt;code&gt;i&lt;/code&gt;,  to add text to the end of a line). &lt;/p&gt;&lt;/li&gt;
&lt;p&gt;Well, that’s it for now.  I will hold off on the questions until after I go through all the customizations, as it seems that, unlike vim, emacs has many things already built-in (but we already knew that, didn’t we :).  So I have just one question for readers: does anyone know of a really good emacs cheatsheet?  The &lt;a href=&quot;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&quot;&gt;one I used for vim&lt;/a&gt; was really awesome, but I haven’t found anything equal for emacs.  I find myself searching the tutorial whenever I forget something, which is not very efficient, so I would appreciate something better. Otherwise, I’ll just find something decent and print it out, as it would be better than nothing.&lt;/p&gt;
&lt;p&gt;And if anyone cares, you can see what I’ve got for my .emacs file so far at &lt;a href=&quot;https://github.com/asmeurer/dotfiles/blob/master/.emacs&quot;&gt;https://github.com/asmeurer/dotfiles/blob/master/.emacs&lt;/a&gt;.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1070&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-01-03T07:30:37+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1068">
	<title>Aaron Meurer: 2011 in review</title>
	<link>http://asmeurersympy.wordpress.com/2012/01/01/2011-in-review/</link>
	<content:encoded>&lt;p&gt;The WordPress.com stats helper monkeys prepared a 2011 annual report for this blog.&lt;/p&gt;
&lt;div style=&quot;height: 300px;&quot;&gt;&lt;/div&gt;
&lt;p&gt;Here’s an excerpt:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The concert hall at the Syndey Opera House holds 2,700 people.  This blog was viewed about &lt;strong&gt;11,000&lt;/strong&gt; times in 2011.  If it were a concert at Sydney Opera House, it would take about 4 sold-out performances for that many people to see it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/annual-report/&quot;&gt;Click here to see the complete report.&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1068&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-01-01T00:00:49+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>

</rdf:RDF>
