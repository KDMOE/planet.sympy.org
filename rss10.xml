<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://planet.sympy.org/">
	<title>Planet SymPy</title>
	<link>http://planet.sympy.org/</link>
	<description>Planet SymPy - http://planet.sympy.org/</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8814696591561172392.post-4829631852742579231" />
			<rdf:li rdf:resource="http://sympystats.wordpress.com/?p=241" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-6568744196982634289.post-7881611169286097799" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8510171342300140296.post-5238790680519906319" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1077" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1070" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1068" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1059" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-2520472460430880330.post-84564291301844126" />
			<rdf:li rdf:resource="http://dlpeterson.com/blog/?p=193" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8510171342300140296.post-7586073962705778071" />
			<rdf:li rdf:resource="http://dlpeterson.com/blog/?p=190" />
			<rdf:li rdf:resource="http://dlpeterson.com/blog/?p=187" />
			<rdf:li rdf:resource="http://dlpeterson.com/blog/?p=177" />
			<rdf:li rdf:resource="http://fseoane.net/blog/?p=1128" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8814696591561172392.post-7396657487035470347" />
			<rdf:li rdf:resource="http://dlpeterson.com/blog/?p=175" />
			<rdf:li rdf:resource="http://fseoane.net/blog/?p=1062" />
			<rdf:li rdf:resource="http://dlpeterson.com/blog/?p=172" />
			<rdf:li rdf:resource="http://fseoane.net/blog/?p=1048" />
			<rdf:li rdf:resource="http://fseoane.net/blog/?p=1017" />
			<rdf:li rdf:resource="http://fseoane.net/blog/?p=999" />
			<rdf:li rdf:resource="http://fseoane.net/blog/?p=974" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8510171342300140296.post-4221049810717497721" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8814696591561172392.post-3859482934470016015" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1042" />
			<rdf:li rdf:resource="http://saptman.wordpress.com/?p=32" />
			<rdf:li rdf:resource="http://lazovichsympy.wordpress.com/?p=91" />
			<rdf:li rdf:resource="http://gilbertgede.wordpress.com/?p=82" />
			<rdf:li rdf:resource="http://sympystats.wordpress.com/?p=239" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8510171342300140296.post-984850516976455252" />
			<rdf:li rdf:resource="http://nessgrh.wordpress.com/?p=366" />
			<rdf:li rdf:resource="http://f1728.wordpress.com/?p=234" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1020" />
			<rdf:li rdf:resource="http://lazovichsympy.wordpress.com/?p=86" />
			<rdf:li rdf:resource="http://gilbertgede.wordpress.com/?p=78" />
			<rdf:li rdf:resource="http://nessgrh.wordpress.com/?p=355" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8510171342300140296.post-3492520740647959899" />
			<rdf:li rdf:resource="http://nessgrh.wordpress.com/?p=351" />
			<rdf:li rdf:resource="http://sympystats.wordpress.com/?p=237" />
			<rdf:li rdf:resource="http://f1728.wordpress.com/?p=216" />
			<rdf:li rdf:resource="http://sherjilozair.wordpress.com/?p=80" />
			<rdf:li rdf:resource="http://lazovichsympy.wordpress.com/?p=83" />
			<rdf:li rdf:resource="http://saptman.wordpress.com/?p=29" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8510171342300140296.post-8561852009544025205" />
			<rdf:li rdf:resource="http://gilbertgede.wordpress.com/?p=76" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1016" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-2520472460430880330.post-6591106898156468358" />
			<rdf:li rdf:resource="http://sympystats.wordpress.com/?p=235" />
			<rdf:li rdf:resource="http://f1728.wordpress.com/?p=200" />
			<rdf:li rdf:resource="http://nessgrh.wordpress.com/?p=347" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8814696591561172392.post-3132546778974806304" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=981" />
			<rdf:li rdf:resource="http://gilbertgede.wordpress.com/?p=70" />
			<rdf:li rdf:resource="http://saptman.wordpress.com/?p=26" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8510171342300140296.post-3285901508455144916" />
			<rdf:li rdf:resource="http://nessgrh.wordpress.com/?p=343" />
			<rdf:li rdf:resource="http://f1728.wordpress.com/?p=193" />
			<rdf:li rdf:resource="http://nessgrh.wordpress.com/?p=317" />
			<rdf:li rdf:resource="http://sympystats.wordpress.com/?p=193" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="tag:blogger.com,1999:blog-8814696591561172392.post-4829631852742579231">
	<title>Vladimir Perić: Thoughts on Google Code-in 2011</title>
	<link>http://vperic.blogspot.com/2012/02/thoughts-on-google-code-in-2011.html</link>
	<content:encoded>Google Code-in is the high-school equivalent of the Google Summer of Code. The program ran from Nov 21st to Jan 16th, though we've only now gotten around to sending &lt;a href=&quot;https://groups.google.com/group/sympy/browse_thread/thread/fde434aa771fd5eb/c3220755357b032a&quot;&gt;a &quot;summary&quot; mail to the list about it&lt;/a&gt;. As Aaron noted, we've had some translation work, some work on SymPy Live and a bevy of documentation and code improvements. With 176 tasks completed, I'd say the whole project was a success for SymPy. I was involved as a mentor, so here are some general thoughts and observations about the process.&lt;br /&gt; &lt;br /&gt;&lt;b&gt;E-mail spam.&lt;/b&gt; In SymPy we didn't have a clean separation of mentor duties (eg. KDE only allowed tasks for which someone volunteered to mentor), so the initial idea was to add all (most) mentors to all tasks. This meant a lot of mails, an effect worsened by the fact that each commenter to the issue starts another &quot;conversation&quot; when viewed from Gmail (which I even &lt;a href=&quot;https://code.google.com/p/soc/issues/detail?id=1388&quot;&gt;reported to Melange&lt;/a&gt; as a feature request/bug). At the height of activity, I could get upwards of 30-40 mails (&quot;conversations&quot;) daily, which by far dwarfed my other mail traffic. Then, because each comment is basically a separate mail, I wasted a lot of time looking at issue that someone already addressed (again, most mentors could handle most tasks). For the second round of tasks I didn't add myself to each task, otherwise I'm sure I'd have gotten even more spam. The bug I reported in Melange was fixed, so hopefully this will be less of an issue next year.&lt;br /&gt; &lt;br /&gt;&lt;b&gt;Being a mentor takes a lot of time.&lt;/b&gt; Partly a consequence of above, partly due to all the work being done, but being a mentor took a lot of time. Many students were unfamiliar with git (and didn't want to read the instructions on development workflow on our excellently-written (in my opinion) &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GCI-2011-Landing&quot;&gt;GCI Landing Page&lt;/a&gt;) and solving issues with them was a constant topic on IRC. Students also lacked follow-through with comments (or, occasionally, expected the work handed down to them) which didn't help. Finally, many students were very anxious, and didn't appreciate that we are all volunteers and cannot be around 24/7. All of this resulted in a process that was frustrating at times and stressful for mentors. &lt;br /&gt; &lt;br /&gt;Regardless of all of the above, &lt;b&gt;a lot of work was done&lt;/b&gt; for SymPy. While I didn't look at the stats, my feeling is that the biggest improvement could be seen in our SymPy Live interface (and our webpage) and our documentation. Yes, we also saw some code improvements, but they were probably a smaller part of the overall contribution (though by no means less important). Interestingly, I think this exposes the two types of tasks the GCI contest is well-suited to: tasks where there is no &quot;in-house&quot; expertise (anything web related in our case) and uninteresting tasks/chores (writing documentation, in our case and probably for most projects). In the first case, we managed to attract experienced developers who could improve our webpage much faster and better than any of the core developers. Writing documentation is also an important task, but one that is shunned by most developers. Still, it is mostly simple work and (more importantly) doesn't usually require in-depth understanding of the code. This made it ideally suited for new contributors. The financial award (100$ for every 3 completed tasks, up to 500$) was enough of a motivation for students. The all-around improvements to our documentation are probably the single biggest advantage of our participation in GCI.&lt;br /&gt; &lt;br /&gt;&lt;b&gt;Translations.&lt;/b&gt; In GCI, tasks were divided into categories and we needed to have at least 5 tasks in every category. While we managed to &quot;fill-up&quot; most categories, Translation was probably the biggest problem. As a, basically, command-line library, it does not make a lot of sense for SymPy to be translated in other languages. In the end, we created tasks for translating our webpage and tutorial to the languages covered by the development team and some of these were done, but I consider this a waste of time. Though this issue is &quot;near and dear&quot; to me (I'm not a native speaker of English), I'm of the opinion that it would be impossible for someone without at least a basic knowledge of English to program with SymPy. Simply, however much effort we put into translating, the class and method names will remain in English and there's no helping that. I very much doubt the newly translated documents will be even used and they're bound to fall behind as the original document changes. We also had to start using gettext to manage the translations, which is a non-trivial amount of work (and there are still some issues). In my opinion, it adds another layer of complexity (however small) for very little gain.&lt;br /&gt; &lt;br /&gt;In &lt;b&gt;conclusion&lt;/b&gt;: did we get stuff done? Yes, without a doubt. Would we have gotten more if the mentors used their mentoring time for coding? Perhaps, but not necessarily. Are some of the students going to keep contributing? Most likely not. Still, I would consider the whole program, and our participation in it, a &lt;b&gt;success&lt;/b&gt;. Ideas for next year could be focusing more on stuff none of the core developers can do (eg. the website work), but we can't really say how far along will SymPy development progress during this year or which tasks might be available to students. Hopefully, more people will volunteer to mentor next year, which would help with most issues I raised here. It is interesting, though, that even with our normally very fast development process we couldn't handle the influx of student work. It'd be interesting to see how other organizations coped.&lt;br /&gt; &lt;br /&gt;Here's to another GCI this year!&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8814696591561172392-4829631852742579231?l=vperic.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2012-02-10T16:27:46+00:00</dc:date>
	<dc:creator>Vladimir Perić</dc:creator>
</item>
<item rdf:about="http://sympystats.wordpress.com/?p=241">
	<title>Matthew Rocklin: sympy.stats is in</title>
	<link>http://sympystats.wordpress.com/2012/02/06/sympy-stats-is-in/</link>
	<content:encoded>&lt;h3&gt;Development&lt;/h3&gt;
&lt;p&gt;It seems there was a flurry of development over the winter holidays.&lt;/p&gt;
&lt;p&gt;Tom’s Meijer-G integration code was merged into master giving SymPy an incredibly powerful definite integration engine. This encouraged me to finish up the pull request for random variables.&lt;/p&gt;
&lt;p&gt;Earlier this morning we finally merged it in and sympy.stats is now in master. If you’re interested please play with it and generate feedback. At the very least it should be able to solve many of your introductory stats homework problems :)&lt;/p&gt;
&lt;p&gt;Actually, I tried using it for a non-trivial example last month and generated an integral which killed the integration engine (mostly this was due to a combination of trigonometric and delta functions). However, I still really wanted the result. The standard solution to analytically intractable statistics problems is to sample. This pushed me to build a monte carlo engine into sympy stats.&lt;/p&gt;
&lt;h3&gt;Sampling&lt;/h3&gt;
&lt;p&gt;The family of stats functions P, E, Var, Density, Given, now have a new member, Sample. You can generate a random sample of any random expression as follows&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.stats import *
&amp;gt;&amp;gt;&amp;gt; X, Y = Die(6), Die(6)
&amp;gt;&amp;gt;&amp;gt; roll = X+Y
&amp;gt;&amp;gt;&amp;gt; Sample(roll)
10
&amp;gt;&amp;gt;&amp;gt; Sample(roll)
5
&amp;gt;&amp;gt;&amp;gt; Sample(X, roll&amp;gt;10) # Sample X given that X+Y&amp;gt;10
6
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Sampling is of course more fail-proof than solving integrals and so expressions can be made arbitrarily complex without issue. This sampling mechanism is also built into the probability and expectation functions using the keyword “numsamples”&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.stats import *
&amp;gt;&amp;gt;&amp;gt; X, Y = Normal(0, 1), Normal(0, 1)
&amp;gt;&amp;gt;&amp;gt; P(X&amp;gt;Y)
1/2
&amp;gt;&amp;gt;&amp;gt; P(X&amp;gt;Y, numsamples = 1000)
499 
────
1000
&amp;gt;&amp;gt;&amp;gt; E(X+Y)
0
&amp;gt;&amp;gt;&amp;gt; E(X+Y, numsamples = 1000)
-0.0334982435603208
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Future&lt;/h3&gt;
&lt;p&gt;GSoC 2012 was announced a couple days ago. I’m excited to see what projects are proposed. &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=241&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-02-07T04:03:22+00:00</dc:date>
	<dc:creator>mrocklin</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-6568744196982634289.post-7881611169286097799">
	<title>Ondřej Čertík: When double precision is not enough</title>
	<link>http://ondrejcertik.blogspot.com/2012/01/when-double-precision-is-not-enough.html</link>
	<content:encoded>I was doing some finite element (FE) calculation and I needed the sum of the lowest 7 eigenvalues of a symmetric matrix (that comes from the FE assembly) to converge to at least 1e-8 accuracy (so that I can check calculation done by some other solver of mine, that calculates the same but doesn't use FE). In reality I wanted the rounded value to 8 decimal digits to be correct, so I really needed 1e-9 accuracy (but it's ok if it is let's say 2e-9, but not ok if it is 9e-9). With my FE solver, I couldn't get it to converge more than to roughly 5e-7 no matter how hard I tried. Now what?&lt;br /&gt;&lt;br /&gt;When doing the convergence, I take a good mesh and keep increasing &quot;p&quot; (the polynomial order) until it converges. For my particular problem, it is fully converged for about p=25 (the solver supports the order up to 64). Increasing &quot;p&quot; further will not increase the accuracy anymore, and the accuracy stays at the level 5e-7 for the sum of the lowest 7 eigenvalues. For optimal meshes, it converges at p=25, for not optimal meshes, it converges for higher &quot;p&quot;, but in all cases, it doesn't get below 5e-7.&lt;br /&gt;&lt;br /&gt;I know from experience, that for simpler problems, the FE solver can easily converge to 1e-10 or more using double precision. So I know it is doable, now the question is what the problem is: there&lt;br /&gt;are a few possible reasons:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The FE quadrature is not accurate enough&lt;/li&gt;&lt;li&gt;The condition number of the matrix is high, thus LAPACK doesn't return very accurate eigenvalues&lt;/li&gt;&lt;li&gt;Bug in the assembly/solver (like single/double corruption in Fortran, or some other subtle bug)&lt;/li&gt;&lt;/ul&gt;When using the same solver for simpler potential, it converged nicely to 1e-10. So this suggests there is no bug in the assembly or solver itself. It is possible that the quadrature is not accurate enough, but again, if it converges for simple problem, it's probably not it. So it seems it is the ill conditioned matrix, that causes this. So I printed the residuals (that I simply calculated in Fortran using the matrix and the eigenvectors returned by LAPACK), and it only showed 1e-9. For simpler problems, it can go to 1e-14 easily. So that must be it. How do we fix it?&lt;br /&gt;&lt;br /&gt;Obviously by making the matrix less ill conditioned, which is caused by the mesh for the problem (the ratio of the longest/shortest elements is 1e9) but for my problem I really needed such a mesh. So the other option is to increase the real number accuracy.&lt;br /&gt;&lt;br /&gt;In Fortran all real variables are defined as real(dp), where dp is an integer defined at a single place in the project. There are several ways to define it, but it's value is 8 for gfortran and it means double precision.So I increased it to 16 (quadruple precision), recompiled. Now the whole program calculates in quadruple precision (more than 30 significant digits). I had to recompile LAPACK using the &quot;-fdefault-real-8&quot; gfortran option, that promotes all double precision numbers to quadruple precision, and I used the &quot;d&quot; versions (double precision, now promoted to quadruple) of LAPACK routines.&lt;br /&gt;&lt;br /&gt;I rerun the calculation ---- and suddenly LAPACK residuals are around 1e-13, and the solver converges to 1e-10 easily (for the sum of the lowest 7 eigenvalues). Problem solved.&lt;br /&gt;&lt;br /&gt;Turning my Fortran program to quadruple precision is as easy as changing one variable and recompiling. Turning LAPACK to quadruple precision is easy with a single gfortran flag (LAPACK uses the old f77 syntax for double precision, if it used real(dp), then I would simply change it as for my program). The whole calculation got at least 10x slower with quadruple. The reason is that gfortran runtime uses the libquadmath library, that simulates quadruple precision (as current CPUs only support double precision natively).&lt;br /&gt;&lt;br /&gt;I actually discovered a few bugs in my program (typically some constants in older code didn't use the &quot;dp&quot; syntax, but had the double precision hardwired). Fortran warns about all such cases, when the real variables have incompatible precision.&lt;br /&gt;&lt;br /&gt;It is amazing how easy it is to work with different precision in Fortran (literally just one change and recompile). How could this be done with C++? This wikipedia &lt;a href=&quot;http://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format&quot;&gt;page&lt;/a&gt; suggests, that &quot;long double&quot; is only 80bit in most cases (quadruple is 128bit), but gcc offers __float128, so it seems I would have to manually change all &quot;double&quot; to &quot;__float128&quot; in the whole C++ program (this could be done with a single &quot;sed&quot; command).&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/6568744196982634289-7881611169286097799?l=ondrejcertik.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2012-01-26T18:51:28+00:00</dc:date>
	<dc:creator>Ondřej Čertík</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8510171342300140296.post-5238790680519906319">
	<title>Sean Vig: Finishing what I started</title>
	<link>http://seanvig.blogspot.com/2012/01/finishing-what-i-started.html</link>
	<content:encoded>As of today, I'm happy to report that my last pull request for angular momentum coupling was merged into master (see &lt;a href=&quot;http://here/&quot;&gt;here&lt;/a&gt;). The master branch now has the capability to do arbitrary angular momentum coupling and uncoupling. I ended up writing a summary of the algorithm I used to write this, which I briefly described (or more accurately, brushed over) in the previous blog post, the write up for which is currently hosted on github &lt;a href=&quot;https://github.com/flacjacket/coupling_algorithm&quot;&gt;here&lt;/a&gt;. This should be all of the big changes for the angular momentum algebra I can foresee in the near future.&lt;br /&gt;&lt;br /&gt;At this point, school is starting back up again and especially since I have joined a research group I won't be doing anything big in the near future. That said, I do have a couple things I've started in on that I will try to finish up if I can get some time. First, I started working on some changes to the quantum printing framework. I have a pull request open for some new tests to the quantum printing framework, so if that can get finished up I'll try to work on getting those changes in. This was an issue that had been brought up before (around the time I started the GSoC project) and even the work I've done so far, I've dug up a couple issues with the printing framework. The current pull for the tests are &lt;a href=&quot;https://github.com/sympy/sympy/pull/908&quot;&gt;here&lt;/a&gt; and the changes to the printing framework which are to follow are &lt;a href=&quot;https://github.com/flacjacket/sympy/tree/quantum_printing&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In addition, over winter break, I dug into some related issues with Piecewise, particularly with the treatment of the otherwise parameter. Just today I opened a pull request for collecting feedback on the changes I made &lt;a href=&quot;https://github.com/sympy/sympy/pull/1009&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Now that the spin stuff is finished, I've been thinking about going back and looking at the stuff I did at the beginning of the GSoC project, particularly some of the stuff with CG coefficients and simplification of these terms. From what I remember, there should be some quick changes to make some stuff run much better, so if I get time, I'll take a look back at that.&lt;br /&gt;&lt;br /&gt;Last, while I am quite happy with how the current angular momentum coupling and uncoupling methods treat numerical cases, there's nothing really there for treating symbolic cases and any symbolic arguments cause the methods to return a very general summation. I put some thought into modifying the current algorithm to allow for some forms of symbolic coupling and uncoupling, but I wasn't able to come up with any. If I can sit down and find something that could do symbolic coupling and uncoupling, that would be the icing on the cake of the current algorithm.&lt;br /&gt;&lt;br /&gt;With the merging of this pull request, everything that I set out to do for my GSoC project last summer has been completed in some form. There may be some things to refine or work on, but for the most part, I have accomplished everything I set out to do. Unless I make some big changes to the coupling algorithm, like working out something with symbolic cases, or make some other big change to the angular momentum algebra, this will likely be my last post here, at least until something else comes up that I'd like to document.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-5238790680519906319?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2012-01-22T06:57:37+00:00</dc:date>
	<dc:creator>Sean Vig</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1077">
	<title>Aaron Meurer: Vim vs. Emacs (Part 3)</title>
	<link>http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/</link>
	<content:encoded>&lt;p&gt;See parts &lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/&quot;&gt;1&lt;/a&gt; and &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/&quot;&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some more comments after using emacs for a while:&lt;/p&gt;
&lt;li&gt;I finally found the perfect tab completion solution. It took way too much searching for how awesome it is.  It’s called &lt;a href=&quot;http://cx4a.org/software/auto-complete/manual.html&quot;&gt;auto-complete-mode&lt;/a&gt;.  The best way to get an idea of what this is is to watch &lt;a href=&quot;http://www.youtube.com/watch?v=rGVVnDxwJYE&quot;&gt;this screencast&lt;/a&gt;.  Basically, it shows you a completion list automatically.  It uses the &lt;em&gt;TAB&lt;/em&gt; key to do completion (to me, this is a no brainer, but for some reason, no other completion extension that I found did this, requiring you to do all kinds of nonsense in your .emacs file).  It’s got cool features like simple fuzzy matching and intelligent matching (so the first completion is what you tend to use, instead of just the first one that matches).  To quote the author, “a goal of auto-complete-mode is to provide a system that does what users want without any command.” I couldn’t agree with that goal more. If you install it, I recommend adding &lt;code&gt;(define-key ac-mode-map (kbd &quot;M-TAB&quot;) 'auto-complete)&lt;/code&gt; to your .emacs, so that you can use M-TAB to force the completion menu to come up.  This generally happens automatically, but I think this is the only way to get fuzzy matching, for example. Actually, you can also just use &lt;code&gt;(ac-set-trigger-key &quot;TAB&quot;)&lt;/code&gt;, which intelligently sets TAB to complete or indent, based on which one you more likely want.  This seems to work pretty well to me.&lt;/li&gt;
&lt;li&gt;Speaking of indenting, emacs has a pretty nice indentation feature for Python.  You just press &lt;code&gt;TAB&lt;/code&gt; repeatedly, and it cycles through all the syntactically legal indentations.  I find this to be more useful than the usual &lt;code&gt;TAB&lt;/code&gt; indents behavior of most editors. Note that by default, it won’t automatically indent, even with trivial indentations (i.e., keeping the previous indentation).  This is easy to fix, though.  Just add &lt;code&gt;(define-key global-map (kbd &quot;RET&quot;) 'newline-and-indent)&lt;/code&gt; to your .emacs file.  This will make &lt;code&gt;RET&lt;/code&gt; do the same thing as &lt;code&gt;C-j&lt;/code&gt;, i.e., basically the equivalent of &lt;code&gt;RET TAB&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;emacs comes with an extension that lets you work with version control systems, called VC.  I don’t use it.  I don’t like stuff messing with my git stuff behind my back (sounds like a good way to lose data to me), and I’m good enough with git commands straight that I don’t need the help.
&lt;p&gt;But unlike all the other hundreds of emacs features that I don’t use, this one was seriously slowing down my workflow.  It adds three or four seconds to the startup time of emacs when loading from within a git repository.  So I did some Googling and added this to my .emacs file:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;;; Disable all the version control stuff         
;; Makes emacs load much faster inside git repos 

(setq vc-handled-backends nil)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;unrelated: Why doesn’t WordPress support lisp as a language for syntax highlighting?&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;This disables the version control stuff, making emacs load fast again (virtually as fast as vim, actually).
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Speaking of making emacs go faster, make sure you compile all your extensions into byte code.  For whatever reason, emacs doesn’t do this automatically, even though compiled files run much faster, and it doesn’t take very long.  The easiest way is to use &lt;code&gt;M-x byte-compile-file&lt;/code&gt; from within emacs.  Just make sure that if you modify the .el file that you recompile the byte code, or it will continue to use the old version.&lt;/li&gt;
&lt;li&gt;I finally figured out how to enable mouse support.  For whatever reason, Googling got me nowhere with this, so I ended up asking on the &lt;a href=&quot;https://lists.gnu.org/mailman/listinfo/help-gnu-emacs&quot;&gt;help-gnu-emacs&lt;/a&gt; list, which was very helpful.  The solution is to put
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;;; ===== Enable mouse support ====
                                      
(require 'xt-mouse)                   
(xterm-mouse-mode)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;in your .emacs file.  And then it just works.  It needs some tweaking (e.g., it doesn’t play so well with momentum scrolling), but at least it works. I thought I was going to hang myself without mouse support. Because frankly, as good as the movement commands are, moving with the mouse is so much easier sometimes (the same is true for vim too, btw).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;I compiled the git version of emacs (it’s not very hard btw).  I did this to see if the mouse suport “bug” was fixed there, but I’ve gone ahead and kept using it, as it’s nicer.  But I didn’t figure out how to configure it to not load in an X window. So for now, I’ve aliased &lt;code&gt;emacs&lt;/code&gt; to &lt;code&gt;emacs -nw&lt;/code&gt;. I’m sure I just need to add some flag to &lt;code&gt;configure&lt;/code&gt;, but I haven’t gotten around to looking it up yet.&lt;/li&gt;
&lt;li&gt;I found out how to allow editing in the Isearch mode (again, thanks to the help-gnu-emacs list).  You need to install the &lt;a href=&quot;https://github.com/asmeurer/dotfiles/blob/master/.emacs.d/lisp/isearch%2B.el&quot;&gt;isearch+&lt;/a&gt; extension, add the following to your .emacs,
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;;; ===== isearch+ =====         

(require 'isearch+)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;and most importantly, you need to edit the file and uncomment all the commmands you want to allow.  If you follow my link above, it goes to my personal dotfiles repo, where I’ve already done that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;On a related note, this is the first of several emacs extensions I’ve installed that I’ve edited the extension file itself for.  The rest, I just had to add some code to .emacs.  In most cases, there was already a variable or suggested code snippet to add to .emacs to get what I wanted.
&lt;p&gt;On the other hand, with vim, I had to edit virtually every extension I installed to make it do what I want.  I’m not sure what this means, though.  It could be a statement about one of many things: how the emacs community provides nicer defaults, how the vim language is easier to use, and hence more inviting for me to edit the files, or how I haven’t gotten around to messing with certain things yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;If you do a lot of work with LaTeX, check out &lt;a href=&quot;http://www.gnu.org/software/auctex/&quot;&gt;AUCTeX&lt;/a&gt;. I haven’t used it enough yet to say much about it, but from what I’ve played around with, it’s pretty awesome.  And if you use a windowed version of emacs, it’s got a really awesome preview mode.&lt;/li&gt;
&lt;li&gt;If you’re bored, check out the &lt;a href=&quot;http://www.dr-qubit.org/predictive/predictive-user-manual/html/index.php&quot;&gt;predictive&lt;/a&gt; extension.  It’s actually not as helpful as you’d think (unlike the very similar auto-complete-mode module mentioned above).  But it’s kind of cool to turn on and play around with when you’re typing something.  Maybe you’ll learn new words or something.&lt;/li&gt;
&lt;li&gt;I could go on and on.  I haven’t mentioned the most basic customizations (like how to setup four-space tabs).  If you are starting to use emacs, I recommend going through &lt;code&gt;M-x customize&lt;/code&gt;, and reading my &lt;a href=&quot;https://github.com/asmeurer/dotfiles/blob/master/.emacs&quot;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file.  And my best advice: if you want emacs to do something, first do &lt;code&gt;M-x customize&lt;/code&gt; and search for what you want (EDIT: apparently searching customize requires emacs 24, i.e., the development version).  If you don’t find what you want there (and you will surprisingly often), search Google.  There are so many emacs users, that the chances of someone else wanting what you want are very likely. I’ve found the results from the &lt;a href=&quot;http://www.emacswiki.org/&quot;&gt;emacs wiki&lt;/a&gt; to be particularly helpful. And one more thing: if you find an extension you like, double check first to see if it’s not already included in emacs. Emacs seems to like including good extensions in future releases, so an older extension has a good chance of already being included.&lt;/li&gt;
&lt;p&gt;Some emacs questions:&lt;/p&gt;
&lt;li&gt;I tried &lt;code&gt;(define-abbrev global-abbrev-table &quot;Ondrej&quot; &quot;Ondřej&quot;)&lt;/code&gt;, so that when I type Ondrej it give me Ondřej.  But it doesn’t work.  Is this a bug or what? If I do &lt;code&gt;(define-abbrev global-abbrev-table &quot;foo&quot; &quot;bar&quot;)&lt;/code&gt; and type “foo”, it turns into “bar”, but the above leaves Ondrej alone.&lt;em&gt;EDIT: I guess this was an emacs bug.  It doesn’t seem to be there any more (perhaps it was fixed with the git version or something).&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Is there a way to reload .emacs without closing emacs? I’m doing that a lot these days.&lt;em&gt;EDIT: I found it. Do &lt;code&gt;M-x load-file RET ~/.emacs&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Is there a good emacs equivalent of the vim &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=273&quot;&gt;tag list plugin&lt;/a&gt;  (thanks for commenter Scott for pointing me to that in the first place)?  I just want something that lists all the class and function definitions in a Python file in order, so I can easily jump to the one I want, or just get an overview of the file.  &lt;/li&gt;
&lt;p&gt;This Tuesday will mark the point where I will have spend as long using emacs as I did using vim. But already, I feel more competent with emacs.  I won’t repeat what I said in my last post, but I just want to say that the ability to edit and write at the same time makes me way more productive.  The fact that it uses keyboard shortcuts that I’m already used to probably helps a lot too.  Even so, I’ve not used any kind of cheat sheet for emacs (since I never really found any that were any good), and yet I feel like I’ve memorized more key commands now than I ever did with vim, for which I did use a &lt;a href=&quot;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&quot;&gt;cheat sheet&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;So I really don’t see myself going back to vim at this point.&lt;/p&gt;
&lt;p&gt;I’m actually surprised.  Virtually everyone I know who uses a command line editor uses vim.  It’s definitely the more popular of the two.  But having tried both, I can only speculate as to why.  Vim has a much higher learning curve than emacs.  Everybody grows up learning how to write text in editors like Microsoft Word, TextEdit, Notepad, etc., that all work fundamentally like emacs: if you type text, it enters the text.  If you want to do advanced editing with the keyboard, you hold down some meta keys and type chorded keyboard shortcuts.  The vim modal editing methodology is so different from this, that it surprises me that so many people go to the trouble of learning it (I mean, to the point that they are more efficient with it).  I can see the benefit over GUI editors, which have nothing on either vim or emacs with regards to customization, or just the plain editing power that is really necessary for coding. My guesses why people use vim:&lt;/p&gt;
&lt;li&gt;They are shown vim first, so just use it.
&lt;/li&gt;
&lt;li&gt;They are turned off by the massiveness of emacs (it seems contradictory to me, since the whole point of using a command line editor is to get more power, but I could see it).
&lt;/li&gt;
&lt;li&gt;They are turned off by emacs lisp.
&lt;/li&gt;
&lt;li&gt;Some combination of those.&lt;/li&gt;
&lt;p&gt;Maybe the vim users out there could comment why they use vim.  Am I missing something?  Or are your heads just wired differently from mine? And if you use emacs (or anything else), I’d love to hear from you too?&lt;/p&gt;
&lt;p&gt;At any rate, I recommend that anyone who wants to give command line editors a chance do what I did: learn both vim and emacs.  My blog posts should be enough to give you some good advice.  I went cold-turkey, and I recommend that you do too, but only do it if you won’t have any important editing to do for a few weeks, as your editing rate will slow down a lot as you are learning for both editors.  And even though I think I am going to stick with emacs, learning vim was still valuable.  Unlike emacs, vi is part of the POSIX standard, so it’s included in pretty much every UNIX distribution.  I’ll be glad when I find myself on a minimal command line and know how to use a decent text editor.  And anyway, you can’t really know which one will be your way until you try them both.  I really thought I would end up using vim, as it was so popular among all the people I know who use command line editors. But I guess there is only &lt;a href=&quot;http://www.dina.dk/~abraham/religion/&quot;&gt;One True Editor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; I found out how to make emacs really fast.  The key is to run one process of emacs in daemon mode, and have the rest connect to that.  Then you only have to wait for the startup once (per computer session).  To do it, just set your &lt;code&gt;EDITOR&lt;/code&gt; to &lt;code&gt;'emacsclient -a &quot;&quot; -nw'&lt;/code&gt; (and you might also want to alias &lt;code&gt;emacs&lt;/code&gt; to that as well).  What this does is connect to the emacs daemon.  The &lt;code&gt;-a &quot;&quot;&lt;/code&gt; starts one if it isn’t already started (you can also do this yourself with &lt;code&gt;emacs --daemon&lt;/code&gt;.  If you only want to use the daemon version if you’ve specifically started it, replace &lt;code&gt;&quot;&quot;&lt;/code&gt; with &lt;code&gt;emacs&lt;/code&gt;.  This will connect to the daemon if it’s running, and otherwise just start a new emacs process.  &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-nw&lt;/code&gt; keeps it from running in window mode.  Remove this if you use the GUI version of emacs.  This is necessary to make it work correctly with multiple tabs.  This is so fast that you should never really even need to use &lt;code&gt;C-z&lt;/code&gt; to quickly exit emacs.  &lt;code&gt;C-x C-c&lt;/code&gt; is just fine, because reopening will be instantaneous.  I like this because I was starting to accumulate background emacs processes that I forgot about.&lt;/p&gt;
&lt;p&gt;This probably requires a fairly new version of emacs, possibly even the development version.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1077&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-01-13T23:01:39+00:00</dc:date>
	<dc:creator>asmeurer</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1070">
	<title>Aaron Meurer: Vim vs. Emacs (Part 2)</title>
	<link>http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/</link>
	<content:encoded>&lt;p&gt;As I noted in &lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/&quot;&gt;part 1&lt;/a&gt;, I have decided to switch to a command line text editor.  I decided that, to be fair, I would try both vim and emacs.  And to force myself to learn them, I decided to use them cold-turkey.  &lt;/p&gt;
&lt;p&gt;Since I’m going cold-turkey, I am doing this over my break from classes, so that I can weed out any difficulties during a period when I can live with slow text editing if necessary.  This is a one month break.  I have reached (roughly) the half way point.  For the first half, I used nothing but vim to edit text.  Now, I will use nothing but emacs.&lt;/p&gt;
&lt;p&gt;Now that I’ve stopped using vim (for now anyway), my view of it isn’t much different from what I wrote in the first part.  A lot of things there were addressed by commenters (or rather commenter).  I still feel that it’s not an a method of text editing that fits my head.  My entire life, I’ve used text editors where typing inserts text, and various control characters do things like move around faster.  &lt;/p&gt;
&lt;p&gt;Enter emacs. It does exactly this.  Also a ton more.&lt;/p&gt;
&lt;p&gt;I’ve only been using emacs for two days, but here are my impressions so far:&lt;/p&gt;
&lt;li&gt;&lt;strong&gt;The tutorial is better.&lt;/strong&gt;  When you start emacs, it tells you how to start the tutorial.  Just type &lt;code&gt;C-h t&lt;/code&gt; (if you don’t already know, in emacs &lt;code&gt;C-&lt;/code&gt; means &lt;code&gt;CTRL-&lt;/code&gt; and &lt;code&gt;M-&lt;/code&gt; means &lt;code&gt;ALT-&lt;/code&gt;).  Like I said last time, the very first thing you learn is how to scroll by more than one line at a time.  That turns out to be a very useful thing to do.  Also, the emacs tutorial did a better job of explaining how to use multiple files at once in emacs, which is something that I still don’t really know how to do very well in vim.
&lt;p&gt;I have to give the vim tutorial some credit for one thing, though.  It has better interactive examples.  For example, in the vim tutorial, you have stuff like &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;  1. Move the cursor to the second line in the phrase below.
  2. Type  dd  to delete the line.
  3. Now move to the fourth line.
  4. Type   2dd   to delete two lines.

---&amp;gt;  1)  Roses are red,
---&amp;gt;  2)  Mud is fun,
---&amp;gt;  3)  Violets are blue,
---&amp;gt;  4)  I have a car,
---&amp;gt;  5)  Clocks tell time,
---&amp;gt;  6)  Sugar is sweet
---&amp;gt;  7)  And so are you.
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;whereas in the emacs tutorial, you just have&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;&amp;gt;&amp;gt; Kill a line, move around, kill another line.
   Then do C-y to get back the second killed line.
   Then do M-y and it will be replaced by the first killed line.
   Do more M-y's and see what you get.  Keep doing them until
   the second kill line comes back, and then a few more.
   If you like, you can try giving M-y positive and negative
   arguments.
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;which is a little more vague.  So I have to give vim credit for that.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everything’s a buffer.&lt;/strong&gt; This line from the emacs tutorial really stuck with me: “ANY text you see in an Emacs window is always part of some buffer.”  Emacs has really a awesome editing model, even simple things like &lt;code&gt;M-f&lt;/code&gt; and &lt;code&gt;M-b&lt;/code&gt; to move around words at a time, or &lt;code&gt;M-DEL&lt;/code&gt; to delete whole words make things &lt;strong&gt;way&lt;/strong&gt; faster.  Vim of course has all of these too, albiet in a different way, but they aren’t everywhere.  In emacs, everything is a buffer, which just means that everything supports all the standard emacs commands.  So if you type &lt;code&gt;M-x&lt;/code&gt; (roughly the equivalent of vim’s &lt;code&gt;:&lt;/code&gt;) and start typing a command, you can move around and edit your command with emacs commands.  One of the things that bothered me about vim was that when I was typing something with &lt;code&gt;:&lt;/code&gt;, I couldn’t use vim’s text moving/modifying commands to manipulate the text.  Typing ESC just canceled the command.
&lt;p&gt;Exceptions: There are at least two exceptions I’ve found to this rule.  First, if you do a search with &lt;code&gt;C-s&lt;/code&gt; or &lt;code&gt;C-r&lt;/code&gt;, no control commands work.  If you type a search string, and then type &lt;code&gt;M-DEL&lt;/code&gt; to try to delete the last word in your search string, you will instead delete the word where the cursor is!  The solution I think is to use something like &lt;code&gt;M-x re-builder&lt;/code&gt; instead.  This was a little slow in my tests.&lt;/p&gt;
&lt;p&gt;Second, the emacs manual is presented in the &lt;code&gt;info&lt;/code&gt; program, which uses completely different key commands from every other program.  This irked me quite a bit, because as soon as I finished the emacs tutorial, it pointed me to the manual, which was in &lt;code&gt;info&lt;/code&gt;.  Then, the first thing in &lt;code&gt;info&lt;/code&gt; is a tutorial on how to use &lt;code&gt;info&lt;/code&gt;!  I opted to skip this.  If I need any information on emacs, I’ll just do a Google search anyway, so I found this to be a waste of time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s a little slower.&lt;/strong&gt; I do notice a speed difference between emacs and vim.  vim is much more lightweight, and it shows.  Starting up emacs takes a second or two.  Also, since a lot of the features are more interactive, they suffer from a speed delay.  It’s not nearly slow enough to be a serious issue, though, and it’s still way faster than the GUI program I was using before (start up time).
&lt;p&gt;The emacs tutorial suggests using &lt;code&gt;C-z&lt;/code&gt; whenever you want to only temporarily close emacs.  This seems like a good idea, and has worked pretty well for me so far (though I still usually close the whole thing with &lt;code&gt;C-x C-c&lt;/code&gt; out of habit).&lt;/p&gt;
&lt;p&gt;On a related note, I noticed that doing type-ahead while waiting for emacs to start up didn’t always work, whereas it always worked in vim (I do this, e.g., when waiting for the editor to start up when writing commit messages).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s way more user-friendly.&lt;/strong&gt; Note that this is of course a relative term.  I mean more user-friendly than vim, and pretty user-friendly for a command line program.  Obviously, the most user-friendly text editors are the GUI ones used by the majority of the population (for that very reason).  Actually, both vim and emacs are user-unfriendly in that if you accidentally open them and don’t know what they are or how to use them, you have no idea how to close them.  But even &lt;code&gt;less&lt;/code&gt; (i.e., &lt;code&gt;man&lt;/code&gt;) is technically like this.
&lt;p&gt;I’m not even referring to the different editing “modes” of the two editors, though you could easily argue that emacs style editing is more user-friendly than vim style editing. What I mean here is that emacs interaction is nice. When you type &lt;code&gt;:&lt;/code&gt; in vim, start typing a command, and type &lt;code&gt;TAB&lt;/code&gt;, it enters the first completion, regardless if it’s unique.  Pressing &lt;code&gt;TAB&lt;/code&gt; multiple times give the rest.  In emacs, if you type &lt;code&gt;M-x&lt;/code&gt; and start typing a command and type &lt;code&gt;TAB&lt;/code&gt;, it pops up a temporary window with the list of all completions.  It even colors the next character, so you can easily see what to type next to get what you want.  As soon as you enter the command, the window disappears. (yes, I know about &lt;code&gt;CTRL-D&lt;/code&gt; in vim, but to me tab completion should &lt;em&gt;always&lt;/em&gt; work like it does in bash: complete characters if and only if they are unique in the list of completions)&lt;/p&gt;
&lt;p&gt;By the way, when I said everything’s a buffer, I mean everything.  If you want, you can exit the &lt;code&gt;M-x&lt;/code&gt; entry (type &lt;code&gt;C-g&lt;/code&gt;), type &lt;code&gt;C-x C-b&lt;/code&gt; to show the list of buffers, &lt;code&gt;C-x o&lt;/code&gt; to switch to it, scroll down to “Completions”, press Enter, and actually get in the completion list, as a buffer (there’s probably a less complicated way to get to it, by the way).  You can then do whatever your heart fancies with it (save it to a file, copy it, whatever).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customization is harder.&lt;/strong&gt; This was expected, since I already knew that emacs used lisp.  vim uses a language that is really easy to understand.  I was able to modify all the vim plugins I installed very easily.  If you want to change a setting globally in vim, just Google it and add one line to your .vimrc.   In emacs, everything is in Emacs Lisp.  I suppose prior experience with Lisp would probably help here.
&lt;p&gt;In the vim tutorial, near the end, it told how to create a .vimrc file, and even gave a very useful sample one as a starter.  In emacs, it took me a while to figure out how to do the equivalent (it took me a few Google searches just to figure out that the name of the configuration file in emacs is .emacs).  &lt;/p&gt;
&lt;p&gt;Actually, the emacs equivalent is way better than in vim, but it isn’t really mentioned anywhere. It took me probably a dozen Google searches before I learned about it (granted, I was looking for things in the same way I did for vim, lines to add to .emacs). What you have to do is type &lt;code&gt;M-x configure&lt;/code&gt;.  This opens what is basically a huge preferences dialog for emacs.  You can then go through and set just about every settable emacs setting from there.  The interface is very nice, as it’s interactive and tells you all about each setting.  And you never have to touch Lisp.  I’m still going through it, so I can’t comment more on it yet.  But I recommend doing &lt;code&gt;M-x configure&lt;/code&gt; as soon as you have finished the tutorial and have gotten used to editing with emacs, as you are invariably going to want to change some things (though I should note that emacs generally has nicer defaults than vim).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better text editing methodology?&lt;/strong&gt; Like I’ve already mentioned a bunch of times, the emacs editing model seems to fit my head better than the vim model.  In emacs, you type text, and it inserts the text.  If you want to do some advanced modification or move around, you type a control sequence.  In vim, you type characters, and it does modifications or moves around.  If you want to type text, you type &lt;code&gt;i&lt;/code&gt; (or one of a few other characters) and type it.  Then, if you want to move around or modify the text, you have to press &lt;code&gt;ESC&lt;/code&gt;.  This so-called “modular editing” doesn’t seem to work for me.  For one thing, I like to rapidly switch back and forth between these two “modes” (editing and inserting) when I write things.  I type too fast and write something wrong, and have to delete some stuff. The &lt;code&gt;M-DEL&lt;/code&gt; emacs command is probably my most used (this also works in Mac OS X text dialogs, so I’m used to it already).  In vim, there is &lt;code&gt;CTRL-w&lt;/code&gt; and a few others, but if I want to do something more advanced, like rearranging a sentence, then half of my key presses would be &lt;code&gt;ESC&lt;/code&gt; or &lt;code&gt;i&lt;/code&gt;, i.e., just moving between the modes.  In emacs, I can always have my pinky by Control and Alt (especially as soon as I remap CAPS-LOCK to Control).
&lt;p&gt;Also, it really irks me how in vim, if you are at the end of a line and press &lt;code&gt;l&lt;/code&gt; (or right-arrow), instead of moving to the beginning of the next line, it beeps!  In emacs, if you are at the end of a the line and type &lt;code&gt;C-f&lt;/code&gt;, it moves to the beginning of the next line (actually, it technically moves just beyond the line, in case you want to append, which is another annoying thing about vim: you have to use &lt;code&gt;A&lt;/code&gt;, not &lt;code&gt;i&lt;/code&gt;,  to add text to the end of a line). &lt;/p&gt;&lt;/li&gt;
&lt;p&gt;Well, that’s it for now.  I will hold off on the questions until after I go through all the customizations, as it seems that, unlike vim, emacs has many things already built-in (but we already knew that, didn’t we :).  So I have just one question for readers: does anyone know of a really good emacs cheatsheet?  The &lt;a href=&quot;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&quot;&gt;one I used for vim&lt;/a&gt; was really awesome, but I haven’t found anything equal for emacs.  I find myself searching the tutorial whenever I forget something, which is not very efficient, so I would appreciate something better. Otherwise, I’ll just find something decent and print it out, as it would be better than nothing.&lt;/p&gt;
&lt;p&gt;And if anyone cares, you can see what I’ve got for my .emacs file so far at &lt;a href=&quot;https://github.com/asmeurer/dotfiles/blob/master/.emacs&quot;&gt;https://github.com/asmeurer/dotfiles/blob/master/.emacs&lt;/a&gt;.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1070&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-01-03T07:30:37+00:00</dc:date>
	<dc:creator>asmeurer</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1068">
	<title>Aaron Meurer: 2011 in review</title>
	<link>http://asmeurersympy.wordpress.com/2012/01/01/2011-in-review/</link>
	<content:encoded>&lt;p&gt;The WordPress.com stats helper monkeys prepared a 2011 annual report for this blog.&lt;/p&gt;
&lt;div style=&quot;height: 300px;&quot;&gt;&lt;/div&gt;
&lt;p&gt;Here’s an excerpt:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The concert hall at the Syndey Opera House holds 2,700 people.  This blog was viewed about &lt;strong&gt;11,000&lt;/strong&gt; times in 2011.  If it were a concert at Sydney Opera House, it would take about 4 sold-out performances for that many people to see it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/annual-report/&quot;&gt;Click here to see the complete report.&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1068&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-01-01T00:00:49+00:00</dc:date>
	<dc:creator>asmeurer</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1059">
	<title>Aaron Meurer: Vim vs. Emacs (Part 1)</title>
	<link>http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/</link>
	<content:encoded>&lt;p&gt;So about a month or so ago, I decided that I needed to start learning a command line text editor.  XCode, the editor I had been using for Python files, didn’t work very well with the new version (in particular, the &lt;a href=&quot;http://asmeurersympy.wordpress.com/2009/12/29/automatically-remove-trailing-whitespace-in-xcode/&quot;&gt;essential plugin&lt;/a&gt; that I’d been using to clear trailing whitespace on save doesn’t yet work in XCode 4).  I’d been using TextWrangler for other things, and started to switch to it for Python editing too.  As far as free GUI text editors on the Mac go, TextWrangler is the best.  &lt;/p&gt;
&lt;p&gt;But I’d seen some of the nice features that vim has, like automatically keeping all lines under 80 characters, on a friend’s computer, and I decided that I should try it.&lt;/p&gt;
&lt;p&gt;Now, I had had a little prior experience with both vim and emacs, but all that I remembered was for vim that &lt;code&gt;i&lt;/code&gt; inserts and &lt;code&gt;ZZ&lt;/code&gt; quits (for when I accidentally open it) and for emacs, that &lt;code&gt;M-X doctor&lt;/code&gt; starts the psychiatrist. &lt;/p&gt;
&lt;p&gt;So I’ve decided to try them out, doing it cold turkey.  To make sure that I choose the better one, I’ve decided to try both.  So, starting about a week ago, I’ve been using nothing but vim for all my text editing.  Starting in January, I will try using emacs, and after two weeks, I will see what I like better.&lt;/p&gt;
&lt;p&gt;My opinions so far on vim:&lt;/p&gt;
&lt;li&gt;The tutorials suck.  The best tutorial is &lt;code&gt;vimtutor&lt;/code&gt; (type that in the command line), which I think comes with vim.  It’s not bad, but it leaves out a few things that I would consider to be essential to a tutorial, for example, how to scroll (answer: use CTRL-D and CTRL-U).  I started the emacs tutorial a while back, and while I never finished it, from what I remember, it was much better (and I also remember that the first thing it talked about was how to scroll by more than one line at a time). It also left out the &lt;code&gt;.&lt;/code&gt; command, which I think is rather useful.  I did print out &lt;a href=&quot;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&quot;&gt;this cheatsheet&lt;/a&gt; and have it sitting next to me on my desk.  That has helped a lot.  I hope I can find something similar for emacs when I get to it.&lt;/li&gt;
&lt;li&gt;vim is too line oriented.  vi started out as an extension to ed, the line editor, so this is not surprising.  But I still can’t understand why pressing &lt;code&gt;l&lt;/code&gt; at the end of a line can’t bring me to the beginning of the next line.  Maybe I’m just still doing it wrong (supposedly, you should rarely use &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt; over more efficient moving commands).  &lt;/li&gt;
&lt;li&gt;Somewhat related to the last point, vim really likes to ring the terminal bell a lot. To quote &lt;a href=&quot;http://en.wikipedia.org/wiki/Editor_war&quot;&gt;Wikipedia&lt;/a&gt;, “vi has two modes – ‘beep repeatedly’ and ‘break everything’”&lt;/li&gt;
&lt;li&gt;I managed to customize it to the point of usability (there are still several things I need to go in and figure out how to fix).  See https://github.com/asmeurer/dotfiles for my .vimrc and .vim/ files.  I found a decent Python syntax file, but it’s actually not that great.  I modified it to color single quoted strings different from double quoted strings (a feature I missed from Xcode). I still need to make a better color scheme (preferably the same as Xcode’s midnight), but this is enough work that I’ve put it off.&lt;/li&gt;
&lt;li&gt;Pressing ESC all the time is really annoying.  Sometimes, I just arrow over, even though I know you’re not “supposed to”, just because my fingers don’t want to reach over and press ESC.  I’m also really used to using control sequences to move around while typing, which of course doesn’t work in vim.  In fact, so far, I’m suspecting that I’ll like emacs better.  But I’ve vowed to give both a fair chance.  But so far, my impression is that vim is a great for text &lt;em&gt;editing&lt;/em&gt;, but not so hot for text &lt;em&gt;writing&lt;/em&gt; (unless you always write text perfectly, so that you never need to leave insert mode until you are done typing).  Just the simple act of deleting a mistyped word (yes, word, that happens a lot when you are decently fast touch typist) takes several keystrokes, when it should in my opinion only take one (two if you count the meta-key).&lt;/li&gt;
&lt;li&gt;The customizability is really nice.  So far, everything that I’ve thought of to change has been changeable.  Also, language is easy enough to understand that I was able to modify the Python syntax file without any difficulty.  &lt;/li&gt;
&lt;li&gt;I like how it syntax highlights virtually everything I throw at it. &lt;/li&gt;
&lt;p&gt;If there are any vim experts out there reading this, I have some questions:&lt;/p&gt;
&lt;li&gt;Is there an easy way to get a list of and jump to a function/class definition in a Python file?  In Xcode and TextWrangler, there was a nice popup at the top of the window that I could access these from.  In vim, so far the best I’ve found is searching for it, which isn’t very efficient.&lt;/li&gt;
&lt;li&gt;I got TAB to indent 4 spaces in Python, but for some reason, when I create a new line after a &lt;code&gt;:&lt;/code&gt;, it puts 8 extra spaces. I wouldn’t be surprised if this is the result of some mismatch/error in &lt;a href=&quot;https://github.com/asmeurer/dotfiles&quot;&gt;my .vimrc or .vim/ files&lt;/a&gt;, but I don’t know how to fix it&lt;/li&gt;
&lt;li&gt;Any useful tricks to share?  Especially for editing Python files.&lt;/li&gt;
&lt;li&gt;How long did it take you to become reasonably efficient with vim?&lt;/li&gt;
&lt;p&gt;&lt;strong&gt;EDIT: I thought of some more questions:&lt;/strong&gt;&lt;/p&gt;
&lt;li&gt;Is there a way to make vim consider camelCase to be word boundaries?&lt;/li&gt;
&lt;p&gt;Finally, if anyone else is thinking of starting vim, I have some useful things I’ve already found in my .vimrc. So you might take a look at that, and add the ones that you like to your .vimrc.  Finally, if you are on Mac OS X, you should use &lt;a href=&quot;http://www.iterm2.com/#/section/home&quot;&gt;iTerm2&lt;/a&gt;.  Actually, you should use this regardless of what text editor you use.  It’s a very good Terminal.app replacement that has virtually all the features (with a couple of exceptions) as Terminal.app, and a ton of extra ones.  The one I want to mention here is mouse reporting support, so you can use your mouse to do things in vim.  This is very useful, as sometimes, e.g., when selecting text, using the mouse is just more efficient.  Also, if you get frustrated trying to remember the commands that will move around you faster than &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, and &lt;code&gt;l&lt;/code&gt;, you can just click on where you want to go.&lt;/p&gt;
&lt;p&gt;:wq&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1059&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-12-20T08:17:43+00:00</dc:date>
	<dc:creator>asmeurer</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-2520472460430880330.post-84564291301844126">
	<title>Official SymPy blog: Google Summer of Code 2011 Wrap-Up</title>
	<link>http://sympy.blogspot.com/2011/12/google-summer-of-code-2011-wrap-up.html</link>
	<content:encoded>&lt;span style=&quot;font-style: italic;&quot;&gt;(Cross-posted on the &lt;a href=&quot;http://google-opensource.blogspot.com/2011/12/students-add-to-sympy.html&quot;&gt;Google Open Source Blog&lt;/a&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://sympy.org/&quot;&gt;SymPy&lt;/a&gt; is a computer algebra system (CAS) written in pure Python. The core allows basic manipulation of expressions (like differentiation or expansion) and it contains many modules for common tasks (limits, integrals, differential equations, series, matrices, quantum physics, geometry, plotting, and code generation).&lt;br /&gt;&lt;br /&gt;SymPy has participated in the &lt;span style=&quot;font-style: italic;&quot;&gt;&lt;a href=&quot;http://code.google.com/soc/&quot;&gt;Google Summer of Code&lt;/a&gt;&lt;/span&gt; program in previous years under the umbrellas of &lt;a href=&quot;http://www.python.org/psf/&quot;&gt;Python Software Foundation&lt;/a&gt;, Portland State University, and the &lt;a href=&quot;http://www.stsci.edu/portal/&quot;&gt;Space Telescope Science Institute&lt;/a&gt;, where we were very successful. In fact, several of our core developers, including four of the mentors from this year, started working with SymPy as Google Summer of Code students. This was our first year participating as a standalone organization, and we would like to share our experience.&lt;br /&gt;&lt;br /&gt;As part of the application process we required each student to submit a patch (as a GitHub pull request) that had to be reviewed and accepted. This allowed us to see that each applicant knew how to use git as well as communicate effectively during the review process.This also encouraged only serious applicants to apply. We had over 10 mentors available and we ended up with 9 students, all of whom were successful at final evaluations.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://nessgrh.wordpress.com/&quot;&gt;Tom Bachmann&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Tom-Bachmann%3A-Definite-Integration&quot;&gt;Definite Integration using Meijer G-functions&lt;/a&gt;, mentored by Aaron Meurer&lt;br /&gt; Tom implemented an algorithm for computing symbolic definite integrals that uses so-called &lt;a href=&quot;http://en.wikipedia.org/wiki/Meijer_g-function&quot;&gt;Meijer G-functions&lt;/a&gt;. This is the state-of-the-art algorithm for computing definite integrals, and indeed the results of his project are very impressive. This project has pushed SymPy forward a long way to becoming the strongest open source computer algebra system with respect to symbolic definite integration.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://vperic.blogspot.com/&quot;&gt;Vladimir Peric&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Application%3A-Vladimir-Peri%C4%87%3A-Porting-to-Python-3&quot;&gt;Porting to Python 3&lt;/a&gt;, mentored by Ronan Lamy&lt;br /&gt; Vladimir ported SymPy to work on Python 3 and ported all testing infrastructure so that SymPy gets regularly tested in Python 2.x, 3.2 and PyPy. Thanks to Vladimir’s work, the next version of SymPy, 0.7.2, which will hopefully be released later this year, will work in both Python 2 and Python 3, and it may support PyPy as well.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://gilbertgede.wordpress.com/&quot;&gt;Gilbert Gede&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Gilbert-Gede%3A-PyDy&quot;&gt;PyDy&lt;/a&gt;, mentored by Luke Peterson&lt;br /&gt; Gilbert implemented a physics module to assist in generating symbolic equations of motion for complex multibody systems using Kane's Method. He expanded on the code written by his mentor, Luke, in 2009, and the module can now generate equations of motion for a bicycle. Gilbert also wrote very thorough documentation both for the Kane’s Method and the module in SymPy.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://lazovichsympy.wordpress.com/&quot;&gt;Tomo Lazovich&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Tomo-Lazovich%3A-Position-and-Momentum-Bases-for-QM&quot;&gt;Position and Momentum Bases for Quantum Mechanics&lt;/a&gt;, mentored by Brian Granger&lt;br /&gt; Tomo has greatly improved the quantum mechanics module by implementing position/momentum representations for operators and eigenstates in various coordinate systems (including cartesian, cylindrical, and spherical) that allows you to easily represent many of the &quot;textbook&quot; quantum mechanics systems, including particle in a box, simple harmonic oscillator, hydrogen atom, etc.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://saptman.wordpress.com/&quot;&gt;Saptarshi Mandal&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Gsoc-2011-report-saptarshi-mandal%3A-combinatorics-package-for-sympy&quot;&gt;Combinatorics package for Sympy&lt;/a&gt;, mentored by Christian Muise&lt;br /&gt; Saptarshi’s project was to mimic the various capabilities of Combinatorica, a Mathematica package for combinatorics. Most of the functionality involving elementary combinatorial objects such as Permutations, Partitions, Subsets, Gray codes and Prufer codes are complete.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://sherjilozair.wordpress.com/&quot;&gt;Sherjil Ozair&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sherjil-Ozair%3A-Symbolic-Linear-Algebra&quot;&gt;Symbolic Linear Algebra&lt;/a&gt;, mentored by Vinzent Steinberg&lt;br /&gt; Sherjil improved the speed of the linear algebra module by using efficient coefficient types for values of entries of matrices. Previously, SymPy used generic expressions in this place, which slowed down computations considerably and caused trouble with solving of the zero equivalence problem. He also implemented sparse matrix representation and unified the API with dense matrices. In addition, Sherjil also added a few linear algebra related algorithms (e.g. Cholesky decomposition).&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://sympystats.wordpress.com/&quot;&gt;Matthew Rocklin&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Matthew-Rocklin%3A-Random-Variables&quot;&gt;SymPy Stats: Random Variables&lt;/a&gt;, mentored by Andy Terrel&lt;br /&gt; Matthew improved the statistics module to use symbolics and introduced a Random Variable type, with support for finite, continuous, and multivariable normal random variables. With these you can symbolically compute things like probabilities of a given condition, conditional spaces, and expectation values. As a side consequence of this project, he also improved some of our Sets classes and implemented a MatrixExpr class, which allows you to compute with matrices symbolically, including computing with block matrices.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://seanvig.blogspot.com/&quot;&gt;Sean Vig &lt;/a&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig-Symbolic-Clebsch-Gordon-coefficients%3AWigner-symbols-and-Implementing-Addition-of-Spin-Angular-Momenta&quot;&gt;Symbolic Clebsch-Gordon coefficients/Wigner symbols and Implementing Addition of Spin Angular Momenta&lt;/a&gt;, mentored by Ondřej Čertík&lt;br /&gt; Sean was working on the quantum mechanics module and has implemented symbolic Clebsch-Gordan coefficients, Wigner D function, and related mathematical concepts that are used very often in quantum physics when dealing with angular momentum and then the necessary classes to support coupled spin algebra.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://f1728.wordpress.com/&quot;&gt;Jeremias Yehdegho&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Jeremias-Yehdegho%3A-Implementing-F5&quot;&gt;Implementing F5&lt;/a&gt;, mentored by Mateusz Paprocki&lt;br /&gt; Jeremias worked on implementing algorithms related to &lt;a href=&quot;http://en.wikipedia.org/wiki/Groebner_bases&quot;&gt;Groebner bases&lt;/a&gt;. Groebner bases are a useful tool in many areas of computer algebra. He implemented the F5B algorithm, which is an improved version of the classical Buchberger’s algorithm that was previously implemented in SymPy, and an algorithm for converting Groebner bases between different orders of monomials and worked on applications of Groebner bases. This allowed for handling problems of much larger size in SymPy.&lt;br /&gt;&lt;br /&gt;The full report can be found &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Gsoc-2011-report&quot;&gt;here&lt;/a&gt;, where each student wrote a wiki page about their experience during the summer and you can also find their blogs and links to applications. Each student was required to blog about their progress each week and all blogs were synchronized at &lt;a href=&quot;http://planet.sympy.org/&quot;&gt;planet.sympy.org&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In previous years, there was usually one student from each summer who became a regular contributor and also a mentor for the next year. It has been a rewarding experience for the whole SymPy community.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/2520472460430880330-84564291301844126?l=sympy.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-12-13T00:10:28+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://dlpeterson.com/blog/?p=193">
	<title>Dale Peterson: Mode shapes and modal decomposition</title>
	<link>http://dlpeterson.com/blog/?p=193</link>
	<content:encoded>&lt;p&gt;I recently did a lecture in a mechanical vibrations course on mode shapes and modal decomposition.  I made a &lt;a href=&quot;http://dlpeterson.com/blog/wp-content/uploads/2011/12/handout.pdf&quot;&gt;handout&lt;/a&gt; for the material to summarize the main ideas.&lt;/p&gt;</content:encoded>
	<dc:date>2011-12-07T08:55:40+00:00</dc:date>
	<dc:creator>luke</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8510171342300140296.post-7586073962705778071">
	<title>Sean Vig: Finalizing arbitrary spin coupling</title>
	<link>http://seanvig.blogspot.com/2011/11/finalizing-arbitrary-spin-coupling.html</link>
	<content:encoded>As expected, my work with Sympy slowed drastically once school started, but nevertheless, I have found enough time to polish off the coupling of arbitrary number of spin spaces that I started over the summer. I'll probably wait until after school is done (and the initial Google Code-In traffic dies down) before opening a pull request, but it has neared the state of conclusion, but I will outline the work done on the branch &lt;a href=&quot;https://github.com/flacjacket/sympy/tree/multi_coupled&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;A notable change from the summer is the coupling and uncoupling code is now &lt;i&gt;much&lt;/i&gt; cleaner. The old methods used messy &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;while True:&lt;/span&gt; loops  which would increment some parameters and check if some end condition was reached, which I found very unsatisfactory and open to some weird use case throwing it into complete disarray. The new methods utilize the notion that any coupling or uncoupling will occur such that there is a well defined change in either the j (in the case of coupling) or m (in the case of uncoupling) values from their maximal values, and this change can be applied over the (un)couplings in the same way you can distribute n balls in m boxes, then it is just matching an integer to a given state and check that the given state is physically feasible.&lt;br /&gt;&lt;br /&gt;In addition, I have added all necessary documentation for the new functionality and fixed a few other minor issues with other parts of the new code. I may yet change some of the handling of the j_coupling parameter, but I will reevaluate that when I have more time to look at the code after I finish the semester.&lt;br /&gt;&lt;br /&gt;The passing of quantum numbers to define the couplings and un-couplings is still quite verbose, but I see no better way of passing the parameters, hopefully in review someone will see a better way of defining states and couplings.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-7586073962705778071?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-11-28T05:58:52+00:00</dc:date>
	<dc:creator>Sean Vig</dc:creator>
</item>
<item rdf:about="http://dlpeterson.com/blog/?p=190">
	<title>Dale Peterson: Sad</title>
	<link>http://dlpeterson.com/blog/?p=190</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;http://dlpeterson.com/blog/wp-content/uploads/2011/11/Screenshot-11252011-082207-PM.png&quot;&gt;&lt;img src=&quot;http://dlpeterson.com/blog/wp-content/uploads/2011/11/Screenshot-11252011-082207-PM.png&quot; alt=&quot;&quot; width=&quot;221&quot; class=&quot;aligncenter size-full wp-image-191&quot; height=&quot;359&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-11-26T04:28:29+00:00</dc:date>
	<dc:creator>luke</dc:creator>
</item>
<item rdf:about="http://dlpeterson.com/blog/?p=187">
	<title>Dale Peterson: Success in court</title>
	<link>http://dlpeterson.com/blog/?p=187</link>
	<content:encoded>&lt;p&gt;I pleaded not guilty to a bicycle stop sign violation in Yolo county today.  The judge found there to be reasonable doubt, and I was found not guilty.&lt;/p&gt;
&lt;p&gt;I was cited for failure to stop at the stop sign while headed eastbound at the intersection of East 8th street and J street, Davis, CA.  The citation occurred at 9:05am on a weekday.  The officer stated the indisputable facts of the case, and the key to my argument was that he was on the west side of J street, about 100 feet north of E 8th street, facing south.  I was coming to the intersection from the officers right, but I was in the bike lane next to the cars, so his view of me would be obstructed by automobile traffic had there been any.  I asked him if he recalled there being traffic at the intersection at the time of the incident.  He responded that he didn’t recall there being any.  I asked him also whether he would be able to see through the cars to see whether I stopped.  He responded that he couldn’t testify whether or not he could.  I then presented my case, which is as follows.&lt;/p&gt;
&lt;p&gt;I commute by bicycle and pass through this intersection 2-4 times per day.  I know the stop signs are there and I know that I stop for them.  In the particular day in question, I recall there being traffic and being adjacent to cars (on the south side of eastbound traffic) as I approached the intersection.  I recall stopping, as I always do at that intersection.  I disputed the officer’s testimony that he could see me approach the intersection without slowing down and that I went through the intersection without stopping.  I argued that he couldn’t have seen me not stop because there were cars in between him and I.  I also reemphasized that I frequent this intersection a lot and that I always stop.  The officer responded by repeating his original statements but didn’t really add anything new to what he originally testified.  I responded by emphasizing that I know for a fact that there was traffic since it was 9:05am, and that there was no way he could have seen whether or not I stopped from his position, and that I pass through that intersection frequently and always stop.&lt;/p&gt;
&lt;p&gt;The judge stated that he found there to be reasonable doubt of my guilt and that since there was no further evidence, I was found not guilty.&lt;/p&gt;
&lt;p&gt;So, it was worth making 2 trips to the Yolo courthouse because I saved myself $200 and also avoided points being added to my DMV record.&lt;/p&gt;</content:encoded>
	<dc:date>2011-11-23T22:08:16+00:00</dc:date>
	<dc:creator>luke</dc:creator>
</item>
<item rdf:about="http://dlpeterson.com/blog/?p=177">
	<title>Dale Peterson: Feynman Lectures Exercise Challenge</title>
	<link>http://dlpeterson.com/blog/?p=177</link>
	<content:encoded>&lt;p&gt;I noticed that the editors/publshers of the revised Feynman Lectures on Physics posted a &lt;a href=&quot;http://feynmanlectures.info/forum/index.php?topic=47.0&quot; target=&quot;_blank&quot; title=&quot;Feynman Lectures Exercise Challenge&quot;&gt;challenge problem&lt;/a&gt;, so  I decided to work out a solution.  In doing so, I took the time to learn &lt;a href=&quot;http://www.texample.net/tikz/&quot; target=&quot;_blank&quot; title=&quot;TikZ&quot;&gt;TikZ&lt;/a&gt;.  The result was a pretty nice (I think) drawing of the pendulum system described in that problem.  My solution is available &lt;a href=&quot;http://dlpeterson.com/FLP_Exercise_Challenge/solution.pdf&quot; target=&quot;_blank&quot; title=&quot;Solution to Feynman Lectures Exercise Challenge&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2011-11-14T10:17:06+00:00</dc:date>
	<dc:creator>luke</dc:creator>
</item>
<item rdf:about="http://fseoane.net/blog/?p=1128">
	<title>Fabian Pedregosa: Low rank approximation</title>
	<link>http://fseoane.net/blog/2011/low-rank-approximation/</link>
	<content:encoded>&lt;p&gt;A little experiment to see what low rank approximation looks like. These are the best rank-k approximations (in the Frobenius norm) to the a natural image for increasing values of k and an original image of rank 512.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/11/animation1.gif&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/11/animation1.gif&quot; title=&quot;Low-rank approximation for the Lena Image&quot; height=&quot;400&quot; width=&quot;600&quot; alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1156&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python code can be found &lt;a href=&quot;https://gist.github.com/1342033&quot;&gt;here&lt;/a&gt;. GIF animation made using ImageMagic’s convert script.&lt;/p&gt;</content:encoded>
	<dc:date>2011-11-06T10:05:09+00:00</dc:date>
	<dc:creator>fabian</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8814696591561172392.post-7396657487035470347">
	<title>Vladimir Perić: GSoC: Final Report</title>
	<link>http://vperic.blogspot.com/2011/11/gsoc-final-report.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;My project, officially named just &quot;Porting to Python 3&quot;, is actually divided into two separate (albeit mutually complimentary) parts: my first goal was to set up a testing framework, to ensure continuous testing of SymPy across different versions of Python. SymPy used to have a server that ran buildbot, but it stopped working some time ago. This was to provide a solid base for working on my main project, making the code Python 3 compatible. As this was to be done with a single code-base, I estimated (correctly) that these could lead to subtle incompatibilities between various Python versions. Time permitting, I also intended to leverage this framework and my knowledge to get SymPy compatible with PyPy, too. The original application can be seen at the SymPy Wiki, &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Application%3A-Vladimir-Peri%C4%87%3A-Porting-to-Python-3&quot;&gt;here&lt;/a&gt;. More details about my progress can also be found in &lt;a href=&quot;http://vperic.blogspot.com/&quot;&gt;my blog&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;Testing framework&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;As mentioned above, SymPy used to use buildbot, so this was my first choice. I also read about Tox, a tool that is written for the sole purpose of testing Python programs under various conditions (different interpreters, presence or lack of certain dependencies), which also provides good integration with Jenkins, a well known server for continuous integration. My initial thoughts on this are in &lt;a href=&quot;http://vperic.blogspot.com/2011/05/continuous-integration-and-sympy.html&quot;&gt;one of my first blog posts&lt;/a&gt;, where I had decided to use Tox and then later try to integrate it with Jenkins, to form a fully functioning CI server. While Tox was immediately useful (here's &lt;a href=&quot;http://vperic.blogspot.com/2011/06/setting-up-and-using-tox-in-sympy.html&quot;&gt;a post on setting up and using it&lt;/a&gt;), the integration with Jenkins proved to be more arduous than my initial tests showed. In retrospect, perhaps I should have given buildbot a more thorough look later, rather than eliminate it so early. Furthermore, while I saw Tox as a great tool, the uptake among other developers has been.. less than stellar (other than Aaron, I'm not aware of anyone using it regularly).&lt;br /&gt;&lt;br /&gt;Fortunately, parallel to me setting up Tox/Jenkins, work was progressing on &lt;a href=&quot;https://github.com/sympy/sympy-bot&quot;&gt;sympy-bot&lt;/a&gt;. The main need for continuous integration came from a desire to review all pull requests and test them for errors - while bigger companies and projects might need real CI, all of SymPy's code gets in through the GitHub pull request system, so theoretically it should be enough to just thoroughly test every pull request; sympy-bot was developed with this purpose in mind. Designed to be ran manually, it still has the basic functionality which I couldn't manage to replicate in Jenkins: run the test suite and post the results back. Work on it has also quickened somewhat in the last couple of months, and &lt;i&gt;I now consider further development of sympy-bot a better idea than working more with Jenkins.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;Python 3 porting&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Even with the relative failure of setting up a robust testing framework, my main project was also progressing. Due to the nature of the issue, progress was somewhat sporadic and didn't proceed at a steady pace. This was particularly apparent during the start - I was simply stumped by some of the errors I was getting and couldn't get around them; once I made a key breakthrough, I was quickly able to get SymPy importable under Python 3, though this only happened &lt;a href=&quot;http://vperic.blogspot.com/2011/06/gsoc-week-5-sympy-now-runs-in-python-3.html&quot;&gt;by week five&lt;/a&gt;. The rest of my summer was spent hunting down the remaining errors, which was interesting at first but got very tiresome by the end. In fact, at the end Mateusz had to step in and fix the remaining few failures as I simply couldn't bring myself to look at them &lt;i&gt;yet again&lt;/i&gt;. Thanks Mateusz! [Mateusz also did a lot of work on improving PyPy support, something for which I simply didn't find the time, so double thanks to Mateusz!]&lt;br /&gt;&lt;br /&gt;One issue that arose early during the porting process was the (un)bundling of libraries with SymPy. SymPy bundled Pyglet and mpmath. Bundling the first was probably a bad idea at the start, and it was finally removed by Stefan Krastanov sometime early in the summer to unanimous approval. Unbundling mpmath was a more contentious issue, it sparked &lt;a href=&quot;https://code.google.com/p/sympy/issues/detail?id=2482&quot;&gt;a very lively discussion on the issue tracker&lt;/a&gt;. I won't rephrase it here, but in the end it was decided &lt;b&gt;not&lt;/b&gt; to unbudle it. This meant that I had to write a custom tool to handle calling 2to3: we needed to avoid calling it on the mpmath/ directories, because mpmath is already py3k compatible (and running 2to3 on such code produces bad code).&lt;br /&gt;&lt;br /&gt;It was ultimately decided that this tool will live in bin/use2to3 and work by creating a Python 3-compatible version of the source code in a py3k-sympy/ subdirectory (originally sympy-py3k/ but that interfered too much with tab-completion!), from which SymPy could then be ran normally under Python 3. While I initially had misgivings about the script, I now think it's quite powerful. It's not the most ideal solution, but it does work and was the last missing link in seamless Python 3 support (eg. it also corrects shebangs and fixes some whitespace issues caused by 2to3).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Officially, my project was a success, but I really couldn't have done it without the help of other developers working on SymPy, in particular Ronan, Aaron and Mateusz. Beyond the GSoC period, I've got every intention to continue working with SymPy, as I think I've already shown with the few pull requests I've submitted since; I have also decided to take a more active role in helping with the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GCI-2011-Organization-Application&quot;&gt;Google Code-In project&lt;/a&gt; (assuming SymPy is accepted). As for my project, I intend to focus more on the infrastructure needed to support SymPy, rather than the math issues. Still, as my knowledge of math and SymPy internals increases, I'm sure I'll find other places to contribute as well.&lt;br /&gt;&lt;br /&gt;To future GSoC students, I suggest maintaining good communication links and trying to be involved with the project as much as possible. Good communication with the core developers and general awareness of the current state of SymPy helped me a lot. While this was arguably more important for my project than others, at least &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig-Symbolic-Clebsch-Gordon-coefficients%3AWigner-symbols-and-Implementing-Addition-of-Spin-Angular-Momenta&quot;&gt;Sean Vig&lt;/a&gt; has also expressed regret at not being more involved. The second most important bit of advice is to try and split your work into multiple pull requests and try to get them merged as fast as possible. SymPy has a very rapid pace of development, and as such it is &lt;i&gt;always&lt;/i&gt; better to integrate sooner rather than later. This ties in to making good, atomic commits, but means more than that: your work should be clearly separated into small, logical chunks (&amp;lt;= 20 commits is my suggestion). A lot of the work done this summer has still to be integrated, or there were many troubles getting it finally in (eg. the physics.mechanics module). Finally, try to budget a lot of extra time in your project application - most of us are not experienced developers and cannot estimate the amount of work needed for something correctly. Plus, when some additional problems arise (and they &lt;i&gt;will&lt;/i&gt;), it's always better to have time set aside to deal with them.&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8814696591561172392-7396657487035470347?l=vperic.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-10-31T23:02:24+00:00</dc:date>
	<dc:creator>Vladimir Perić</dc:creator>
</item>
<item rdf:about="http://dlpeterson.com/blog/?p=175">
	<title>Dale Peterson: The price of a single stitch</title>
	<link>http://dlpeterson.com/blog/?p=175</link>
	<content:encoded>&lt;p&gt;About 2 months ago on a Saturday evening, I was working on my bike and cut the middle joint of my index finger.  The cut was deep enough, and the hacksaw was dirty enough, that I knew that I needed get it looked by a doctor.  I looked up my health benefits on my insurance card and tried to find a clinic that was open at 9pm on a Saturday night.  Nothing was open anywhere.  So, my options were to wait until Monday, or go to the ER.  I choose to go to the ER.  They weren’t busy and I was in and out in less than 45 minutes.  They cleaned the wound and put a single stitch in it, then put a bit of neosporin on it and put a band aid on it.&lt;/p&gt;
&lt;p&gt;The total cost?  $1060.71.  Seriously?  Luckily I am insured, and I am only responsible for $100 of that.  I don’t know what the cost would have been if I had gone to a clinic during normal business hours (8am-5pm on a weekday).  &lt;/p&gt;
&lt;p&gt;If I didn’t have insurance, would I have gone?  I don’t think so.  With national unemployment at 9.1% it is a safe bet that at least 1 in 10, probably 1 in 5, either don’t have health insurance or have insurance that wouldn’t cover enough for them to be able to afford such a trip to the hospital to get a relatively minor finger injury taken care of properly.  So 1 in 5 wouldn’t get such a serious injury taken care of.  Imagine if it were a more serious injury.  This system is broken.&lt;/p&gt;</content:encoded>
	<dc:date>2011-10-30T18:26:18+00:00</dc:date>
	<dc:creator>luke</dc:creator>
</item>
<item rdf:about="http://fseoane.net/blog/?p=1062">
	<title>Fabian Pedregosa: qr_multiply function in scipy.linalg</title>
	<link>http://fseoane.net/blog/2011/qr_multiply-function-in-scipy-linalg/</link>
	<content:encoded>&lt;p&gt;In scipy’s development version there’s a new function closely related to the &lt;a href=&quot;http://en.wikipedia.org/wiki/QR_decomposition&quot;&gt;QR-decomposition&lt;/a&gt; of a matrix and to the least-squares solution of a linear system.&lt;/p&gt;
&lt;p&gt;What this function does is to compute the QR-decomposition of a matrix and then multiply the resulting orthogonal factor by another arbitrary matrix. In pseudocode:&lt;/p&gt;
&lt;div style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot; class=&quot;codecolorer-container python default&quot;&gt;&lt;div style=&quot;&quot; class=&quot;python codecolorer&quot;&gt;&lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;def&lt;/span&gt; qr_multiply&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;X, Y&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;:&lt;br /&gt;
    Q, R = qr&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;X&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;return&lt;/span&gt; dot&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;Q.&lt;span style=&quot;color: black;&quot;&gt;T&lt;/span&gt;, Y&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but unlike this naive implementation, &lt;code&gt;qr_multiply&lt;/code&gt; is able to do all this &lt;b&gt;without&lt;/b&gt; explicitly computing the orthogonal Q matrix, resulting both in memory and time saving. In the following picture I measured the memory consumption as a function of time of running this computation on a 1.000 x 1.000 matrix X and a vector Y (full code can be found &lt;a href=&quot;https://gist.github.com/1287168&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/10/qr_multiply1.png&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/10/qr_multiply1-300x225.png&quot; title=&quot;Memory usage for a QR multiplication&quot; height=&quot;225&quot; width=&quot;300&quot; alt=&quot;&quot; class=&quot;aligncenter size-medium wp-image-1076&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It can be seen that not only &lt;code&gt;qr_multiply&lt;/code&gt; is almost twice as fast as the naive approach, but also that the memory consumption is significantly reduced, since the orthogonal factor is never explicitly computed.&lt;/p&gt;
&lt;p&gt;Credit for implementing the qr_multiply function goes to &lt;a href=&quot;https://github.com/tecki&quot;&gt;Martin Teichmann&lt;/a&gt;. &lt;/p&gt;</content:encoded>
	<dc:date>2011-10-14T14:44:10+00:00</dc:date>
	<dc:creator>fabian</dc:creator>
</item>
<item rdf:about="http://dlpeterson.com/blog/?p=172">
	<title>Dale Peterson: Matlab function syntax is abysmal</title>
	<link>http://dlpeterson.com/blog/?p=172</link>
	<content:encoded>&lt;p&gt;Today I was helping some undergraduates in a mechanical vibrations course to use ode45.  The way you specify the right hand side of the ode’s must fit Matlab’s particular form (using an @ before the function name, which must be contained in a file of the same name, with a ‘.m’ extension).  Looking at the documentation, I found this gem that really made me want to suck start a shotgun:&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
One way to provide additional parameters to a functional argument of a function function is to write a file that:&lt;br /&gt;
  -- Accepts the additional parameters as inputs&lt;br /&gt;
  -- Invokes the function function&lt;br /&gt;
  -- Contains the function called by the function function as a nested function&lt;br /&gt;
&lt;/code&gt;&lt;br /&gt;
That last one is a real doozy.  Try saying that 5 times real fast, then explain what the hell it means to an undergrad.  I’d rather explain what a pointer to pointer to char is, personally.&lt;/p&gt;</content:encoded>
	<dc:date>2011-10-12T00:40:14+00:00</dc:date>
	<dc:creator>luke</dc:creator>
</item>
<item rdf:about="http://fseoane.net/blog/?p=1048">
	<title>Fabian Pedregosa: scikit-learn 0.9</title>
	<link>http://fseoane.net/blog/2011/scikit-learn-0-9/</link>
	<content:encoded>&lt;p&gt;Last week we released a new version of scikit-learn. The &lt;a href=&quot;http://scikit-learn.sourceforge.net/stable/whats_new.html&quot;&gt;Changelog is particularly impressive&lt;/a&gt;, yet personally this release is important for other reasons. &lt;/p&gt;
&lt;p&gt;This will probably be my last release as a paid engineer. I’m starting a PhD next month, and although I plan to continue contributing to the project and make a few more releases, I will certainly have less time to devote to it. Luckily, I received a lot of help from the community while preparing the release, from Changelog writing to build of Windows binaries, thus I expect the transition to go smoothly.&lt;/p&gt;
&lt;p&gt;Almost two years have elapsed since the first 0.1 release. During this time, we did a lot of refactoring and broke the API several times. However, I’ve seen some concerns about API stability both at the EuroScipy conference and in the mailing list where I’ve realized we need to provide an API that does not break in every release, and do this in a way that the project remains fun for developers.&lt;/p&gt;
&lt;p&gt; That’s why I’m extremely glad to see that although this release is big in changes, these have been made in a more organized manner. Yes, we’ve broken the API once again, but now there’s a compatibility layer that ensures that code written for 0.8 will continue working with the new release. &lt;/p&gt;</content:encoded>
	<dc:date>2011-10-02T09:19:57+00:00</dc:date>
	<dc:creator>fabian</dc:creator>
</item>
<item rdf:about="http://fseoane.net/blog/?p=1017">
	<title>Fabian Pedregosa: Reworked example gallery for scikit-learn</title>
	<link>http://fseoane.net/blog/2011/reworked-example-gallery-for-scikit-learn/</link>
	<content:encoded>&lt;p&gt;I’ve been working lately in improving the scikit-learn example gallery to show also a small thumbnail of the plotted result. Here is what the gallery looks like now&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://scikit-learn.sourceforge.net/dev/auto_examples/index.html&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/09/Screenshot-Examples-—-scikit-learn-v0.9-git-documentation-Google-Chrome.png&quot; alt=&quot;&quot; width=&quot;600&quot; title=&quot;Screenshot-Examples&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;And the real thing should be already displayed in the &lt;a href=&quot;http://scikit-learn.sourceforge.net/dev/auto_examples/index.html&quot;&gt;development documentation&lt;/a&gt;. The next thing is to add a static image to those that don’t generate any result, examples such as the &lt;a href=&quot;http://scikit-learn.sourceforge.net/dev/auto_examples/applications/svm_gui.html&quot;&gt;SVM GUI&lt;/a&gt; should have an image to display.&lt;/p&gt;</content:encoded>
	<dc:date>2011-09-04T18:09:02+00:00</dc:date>
	<dc:creator>fabian</dc:creator>
</item>
<item rdf:about="http://fseoane.net/blog/?p=999">
	<title>Fabian Pedregosa: scikit-learn’s EuroScipy 2011 coding sprint — day two</title>
	<link>http://fseoane.net/blog/2011/scikit-learn%e2%80%99s-euroscipy-2011-coding-sprint-day-two/</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/all.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/all-300x225.jpg&quot; title=&quot;scikit-learn coding sprint&quot; height=&quot;225&quot; width=&quot;300&quot; alt=&quot;&quot; class=&quot;aligncenter size-medium wp-image-1001&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today’s coding sprint was a bit more crowded, with some notable scipy hackers such as Ralph Gommers, &lt;a href=&quot;http://mentat.za.net/&quot;&gt;Stefan van der Walt&lt;/a&gt;, &lt;a href=&quot;http://cournape.wordpress.com/&quot;&gt;David Cournapeau&lt;/a&gt; or &lt;a href=&quot;http://blog.fperez.org/&quot;&gt;Fernando Perez&lt;/a&gt; from Ipython joining in. On what got done:&lt;/p&gt;
&lt;p&gt;  – We merged &lt;a href=&quot;http://www.astro.washington.edu/users/vanderplas/&quot;&gt;Jake&lt;/a&gt;‘s new BallTree code. This is a pure Cython implementation of a nearest-neighbor search similar to the KDTree class in scipy.spatial, but much faster. The code looks awesome and it’s a big speedup compared to the older code.&lt;/p&gt;
&lt;p&gt;  – Vlad is ready to merge his&lt;a href=&quot;https://github.com/scikit-learn/scikit-learn/pull/221&quot;&gt; dictionary learning code&lt;/a&gt;, something that should happen in the upcoming days.&lt;/p&gt;
&lt;p&gt;  – Initial support for Python 3. scikit-learn should now at least build and import cleanly under Python 3.&lt;/p&gt;
&lt;p&gt;  – some bugfixes in the Pipeline object and in docstrings.&lt;/p&gt;
&lt;p&gt;So this was the end of the scikit-learn sprint, but EuroScipy has just begun. See you tomorrow at the conference (follow the signs)!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0093.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0093-202x300.jpg&quot; title=&quot;IMG_0093&quot; height=&quot;300&quot; width=&quot;202&quot; alt=&quot;&quot; class=&quot;alignleft size-medium wp-image-1003&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0092.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0092-189x300.jpg&quot; title=&quot;yannick&quot; height=&quot;300&quot; width=&quot;189&quot; alt=&quot;&quot; class=&quot;alignleft size-medium wp-image-1004&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
–
&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-24T22:33:10+00:00</dc:date>
	<dc:creator>fabian</dc:creator>
</item>
<item rdf:about="http://fseoane.net/blog/?p=974">
	<title>Fabian Pedregosa: scikit-learn’s EuroScipy 2011 coding sprint  — day one</title>
	<link>http://fseoane.net/blog/2011/scikit-learns-euroscipy-2011-coding-sprint-day-one/</link>
	<content:encoded>&lt;p&gt;As a warm-up for the upcoming &lt;a href=&quot;http://www.euroscipy.org/conference/euroscipy2011&quot;&gt;EuroScipy conference&lt;/a&gt;, some of the &lt;a href=&quot;http://scikit-learn.sf.net&quot;&gt;scikit-learn&lt;/a&gt; developers decided to gather and work together for a couple of days.&lt;/p&gt;
&lt;p&gt;Today was the first day and there was only a handfull of us, as the real kickoff is expected tomorrow. Some interesting coding happened, although most of us where still preparing material for the EuroScipy tutorials …&lt;/p&gt;
&lt;p&gt;    – API changes: remove of keyword parameters to &lt;i&gt;fit&lt;/i&gt; method, added method &lt;i&gt;set_params&lt;/i&gt;  (&lt;a href=&quot;https://github.com/scikit-learn/scikit-learn/pull/306&quot;&gt;pull request&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;    – Some bugfixing in NuSVR (&lt;a href=&quot;https://github.com/scikit-learn/scikit-learn/pull/315&quot;&gt;pull request&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;    – Review of &lt;a href=&quot;http://vene.ro&quot;&gt;Vlad&lt;/a&gt;‘s code, developed during his Summer of Code program.&lt;/p&gt;
&lt;p&gt;    – A lot of discussion about algorithm, code, APIs and buildbot dance !&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0076.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0076-150x150.jpg&quot; title=&quot;varokoo&quot; height=&quot;150&quot; width=&quot;150&quot; alt=&quot;&quot; class=&quot;alignleft size-thumbnail wp-image-977&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-3.png&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-3-150x150.png&quot; title=&quot;Olivier Grisel&quot; height=&quot;150&quot; width=&quot;150&quot; alt=&quot;&quot; class=&quot;alignleft size-thumbnail wp-image-979&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0074.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0074-150x150.jpg&quot; title=&quot;Vlad&quot; height=&quot;150&quot; width=&quot;150&quot; alt=&quot;&quot; class=&quot;alignleft size-thumbnail wp-image-982&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-5.png&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-5-150x150.png&quot; title=&quot;Me and Jean&quot; height=&quot;150&quot; width=&quot;150&quot; alt=&quot;&quot; class=&quot;alignleft size-thumbnail wp-image-986&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/emanuelle.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/emanuelle-150x150.jpg&quot; title=&quot;emanuelle&quot; height=&quot;150&quot; width=&quot;150&quot; alt=&quot;&quot; class=&quot;alignleft size-thumbnail wp-image-990&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
–
&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-23T19:38:09+00:00</dc:date>
	<dc:creator>fabian</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8510171342300140296.post-4221049810717497721">
	<title>Sean Vig: Finishing GSoC</title>
	<link>http://seanvig.blogspot.com/2011/08/finishing-gsoc.html</link>
	<content:encoded>So this is the last week of the GSoC program. I'll be writing up a full report on what I've done over the summer &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig&quot;&gt;here&lt;/a&gt; and it will be updated over this next week. This blog post will be recapping this last week of progress and looking forward past the GSoC.&lt;br /&gt;&lt;br /&gt;The main thing to report with this last week was the finishing the work on the spin coupling work that was laid out last week and the writing of the code for Coupled spin states, the last pull request I'll get in during the GSoC project is currently open and should only need a last bit of code review to get pulled.&lt;br /&gt;&lt;br /&gt;The main thing now is moving beyond the work that will be done during the GSoC project. While I'll be starting classes this next week and I have my qual the next week, so work will definitely slow down. However, this last week, I worked on the multi_coupling branch, which takes the coupling work that is in the current pull and expands it to allow for an arbitrary number of spin bases. The first thing to implement with this was a means of representing the coupling between the spin bases, since the order in which spaces are coupled matters. To do this, I added a jcoupling option to the functions that deal with coupled states. It currently seems pretty messy, but I'm not sure of a better way to do it, as coupling multiple spaces will just pick up a bunch of additional quantum numbers that need to be represented somehow. Basically, this parameter is passed as a list of lists, where each element of the outermost list represents a coupling between two spin spaces. These inner lists have 3 elements, 2 giving the number of the space that is being coupled and the third being the j value of these spaces coupled together. For example, if we wanted to represent a state |j,m,j1,j2,(j12),j3&amp;gt;, the jcoupling would be ( (1,2,j12), ). If this option is not set, then the methods default to coupling the spaces in numerical order, i.e. 1 and 2, then 1,2 and 3, etc. Using this, I have been able to rewrite the uncouple code. The results do not yet have tests, and I'll definitely need to do some calculations by hand to make sure this is working properly, but looking at it, I am pretty confident in the results, tho the code could use some cleaning up.&lt;br /&gt;&lt;br /&gt;Moving forward from this would be to get the couple method working with arbitrary spin spaces and run through all of the functions that deal with spin coupling and make sure nothing is still hard coded to use two spin bases. Other than that, the project that I'd set out to work on has been basically completed. I'll continue to work with and develop sympy when I have some spare and hopefully continue to add features and functionality to the quantum module.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-4221049810717497721?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-20T04:37:48+00:00</dc:date>
	<dc:creator>Sean Vig</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8814696591561172392.post-3859482934470016015">
	<title>Vladimir Perić: GSoC: final week</title>
	<link>http://vperic.blogspot.com/2011/08/gsoc-final-week.html</link>
	<content:encoded>Well, I obviously haven't kept up with my blogging. Partly this is because there wasn't too much to report - I've been stuck at the few remaining bugs for a couple of weeks now and just couldn't make myself go at them for real. Still, I've now tentatively submitted &lt;a href=&quot;https://github.com/sympy/sympy/pull/558&quot;&gt;a &quot;final&quot; pull request&lt;/a&gt;, which has some misc fixes and more importantly adds the &quot;use2to3&quot; script that will form the basis of our Python 3 support. The idea is to run the script, which will create a &quot;sympy-py3k&quot; directory, which is a copy of the SymPy directory structure but with 2to3 ran where required. It should then be possible to use SymPy normally under Python 3 from that folder (even installing it). Now, this script could do with some improvements (looking at &quot;git ls-files&quot; instead of traversing the whole dir structure for one), but most importantly it is &lt;i&gt;not really well tested&lt;/i&gt;. I've only tested it on my computer and while it should be sound there have already been some problems reported (in the pull request). Still, the script should hopefully be robust and so, if you have the time and/or care about Python 3 support at all: &lt;i&gt;please&lt;/i&gt; try out the script and see if it breaks. You can get it in my &quot;porting4&quot; branch.&lt;br /&gt;&lt;br /&gt;Now, there are some issues remaining (Ronan is working on &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2574&quot;&gt;the LambertW issue&lt;/a&gt; and the other two, &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2609&quot;&gt;test_priority error&lt;/a&gt; and &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2611&quot;&gt;tensor doctest failures&lt;/a&gt; are on the issue tracker), but I still consider my project as successful. Python 3 support is a moving target anyway (all new code that gets in is another potential error, at least until people start actively testing it) and I also expect issues to crop up that just aren't covered by the test suite. For the moment, Python 3 support can be considered an experimental, dev feature and I'd like to keep it that way for a few weeks before considering a release. Again, if you are interested in Python 3 support, please try it out, start using it for your normal work and note if something unexpected comes up. &lt;br /&gt;&lt;br /&gt;For the foreseeable future, I definitely intend to stay with SymPy. I found the hacking genuinely interesting and would like to finish my stated goals of achieving both Python 3 and PyPy compatibility. Part of my reasoning is completely selfish - I expect these skills to be quite valuable in the near future and hacking one a code base as large as SymPy is bound to teach me a few tricks. Mostly, though, I'd just like to make SymPy better - my line of thought being, if I can do the mundane infrastructure work, then that will enable the mathematicians and physicists among us to implement more cool algorithms. &lt;br /&gt;&lt;br /&gt;I'd also like to extend my thanks to Ronan Lamy, my mentor, who was kind enough to solve a few issues for me and for generally always being around to point me in the right direction; to Aaron Meurer, the maintainer of SymPy, who always had the time for a detailed review of my code, even if our views didn't always coincide :) (&lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2482&quot;&gt;mpmath, anyone?&lt;/a&gt;); and finally, to all the other devs in SymPy who've helped me by reviewing my code and for making such a great program in the first place! &lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8814696591561172392-3859482934470016015?l=vperic.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-19T19:39:38+00:00</dc:date>
	<dc:creator>Vladimir Perić</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1042">
	<title>Aaron Meurer: sqrt(x) now prints as &quot;sqrt(x)&quot;</title>
	<link>http://asmeurersympy.wordpress.com/2011/08/18/sqrtx-now-prints-as-sqrtx/</link>
	<content:encoded>&lt;p&gt;Just a few moments ago, &lt;a href=&quot;https://github.com/sympy/sympy/pull/548&quot; target=&quot;_blank&quot;&gt;a branch&lt;/a&gt; was pushed in that fixed one of my biggest grievances in SymPy, if not the biggest.  Previously we had this behavior:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: sqrt(x)
Out[1]: x**(1/2)

In [2]: solve(x**2 - 2, x)
Out[2]: [-2**(1/2), 2**(1/2)]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Now suppose you took the output of those expressions and pasted them into isympy:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [3]: x**(1/2)
Out[3]: x**0.5

In [4]: [-2**(1/2), 2**(1/2)]
Out[4]: [-1.41421356237, 1.41421356237]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;That’s with &lt;code&gt;__future__.division&lt;/code&gt;.  Here’s what would happen with old division:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [2]: x**(1/2)
Out[2]: 1

In [3]: [-2**(1/2), 2**(1/2)]
Out[3]: [-1, 1]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This is because with old division, &lt;code&gt;1/2&lt;/code&gt; evaluates to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem is that Python evaluates &lt;code&gt;1/2&lt;/code&gt; to &lt;code&gt;0.5&lt;/code&gt; (or &lt;code&gt;0&lt;/code&gt;) before SymPy has a change to convert it to a Rational.  There were several ways that people got around this.  If you copy an expression with number division in it and want to paste it into a SymPy session, the easiest way to do this was to pass it as a string to &lt;code&gt;sympify()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: sympify(&quot;x**(1/2)&quot;)
Out[1]: x**(1/2)

In [2]: sympify(&quot;[-2**(1/2), 2**(1/2)]&quot;)
Out[2]: [-2**(1/2), 2**(1/2)]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;If that was too much typing for you, you could use the &lt;code&gt;S()&lt;/code&gt; shortcut to &lt;code&gt;sympify()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [3]: S(&quot;x**(1/2)&quot;)
Out[3]: x**(1/2)

In [4]: S(&quot;[-2**(1/2), 2**(1/2)]&quot;)
Out[4]: [-2**(1/2), 2**(1/2)]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This solution is fine if you want to paste an expression into a SymPy session, but it’s not a very clean one if you want to paste code into a script. For that, you need to modify the code so that it no longer contains Python int/Python int.  The easiest way to do this is to sympify one of the ints.  So you would do something like&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [5]: x**(S(1)/2)
Out[5]: x**(1/2)

In [6]: [-2**(S(1)/2), 2**(S(1)/2)]
Out[6]: [-2**(1/2), 2**(1/2)]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This wasn’t terribly readable, though.  The &lt;em&gt;best&lt;/em&gt; way to fix the problem when you had a power of one half was to use &lt;code&gt;sqrt()&lt;/code&gt;, which is a shortcut to &lt;code&gt;Pow(…, Rational(1, 2))&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Well, this last item should make you think.  If &lt;code&gt;sqrt(x)&lt;/code&gt; is more readable than &lt;code&gt;x**(S(1)/2)&lt;/code&gt; or even &lt;code&gt;x**(1/2)&lt;/code&gt;, why not print it like that in the first place.  Well, I thought so, so I changed the string printer, and now this is the way that SymPy works.  So 90% of the time, you can just paste the result of &lt;code&gt;str()&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt;, and it will just work, because there won’t be any &lt;code&gt;**(1/2)&lt;/code&gt;, which was by far the most common problem of “Python evaluating the expression to something before we can.”  In the git master, SymPy now behaves like&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: sqrt(x)
Out[1]: sqrt(x)

In [2]: solve(x**2 - 2, x)
Out[2]: [-sqrt(2), sqrt(2)]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;You can obviously just copy and paste these results, and you get the exact same thing back.  Not only does this make expressions more copy-and-pastable, but the output is &lt;em&gt;much&lt;/em&gt; nicer in terms of readability.  Here are some before and afters that come from actual SymPy doctests that I had to change after fixing the printer:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;Before:
&amp;gt;&amp;gt;&amp;gt; e = ((2+2*sqrt(2))*x+(2+sqrt(8))*y)/(2+sqrt(2))
&amp;gt;&amp;gt;&amp;gt; radsimp(e)
2**(1/2)*x + 2**(1/2)*y

After:
&amp;gt;&amp;gt;&amp;gt; radsimp(e)
sqrt(2)*x + sqrt(2)*y
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;Before:
&amp;gt;&amp;gt;&amp;gt; b = besselj(n, z)
&amp;gt;&amp;gt;&amp;gt; b.rewrite(jn)
2**(1/2)*z**(1/2)*jn(n - 1/2, z)/pi**(1/2)

After:
&amp;gt;&amp;gt;&amp;gt; b.rewrite(jn)
sqrt(2)*sqrt(z)*jn(n - 1/2, z)/sqrt(pi)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;Before:
&amp;gt;&amp;gt;&amp;gt; x = sympify('-1/(-3/2+(1/2)*sqrt(5))*sqrt(3/2-1/2*sqrt(5))')
&amp;gt;&amp;gt;&amp;gt; x
(3/2 - 5**(1/2)/2)**(-1/2)

After
&amp;gt;&amp;gt;&amp;gt; x
1/sqrt(3/2 - sqrt(5)/2)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;And not only is &lt;code&gt;sqrt(x)&lt;/code&gt; easier to read than &lt;code&gt;x**(1/2)&lt;/code&gt; but it’s fewer characters.&lt;/p&gt;
&lt;p&gt;In the course of changing this, I went ahead and did some greps of the repository to get rid of all &lt;code&gt;**(S(1)/2)&lt;/code&gt;, &lt;code&gt;**Rational(1, 2)&lt;/code&gt; and similar throughout the code base (not just in the output of doctests where the change had to be made), replacing them with just &lt;code&gt;sqrt&lt;/code&gt;.  Big thanks to Chris Smith for helping me catch all instances of this.  Now the code should be a little easier to read and maintain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future Work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a big change, and I believe it will fix the copy-paste problem for 90% of expressions. But it does not solve it completely.  It is still possible to get int/int in the string form of an expression.  Only powers of 1/2 and -1/2 are converted to sqrt, so any other rational power will still print as a/b, like&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: x**Rational(3, 2)
Out[1]: x**(3/2)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Also, as you may have noticed in the last example above, a rational number that sits by itself will still be printed as int/int, like&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [2]: (1 + x)/2
Out[2]: x/2 + 1/2
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Therefore, I’m leaving the &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2359&quot; target=&quot;_blank&quot;&gt;issue for this&lt;/a&gt; open to discuss potential future fixes to the string printer.  One idea is to create a &lt;code&gt;root&lt;/code&gt; function that is a shortcut to &lt;code&gt;root(x, a) == x**(1/a)&lt;/code&gt;. This would work for rational powers where the numerator is 1.  For other rational powers, we could then denest these with an integer power.  It’s important to do this in the right order, though, as they are not equivalent.  You can see that SymPy auto-simplifies it when it is mathematically correct in all cases, and not when it is not:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [3]: sqrt(x**3)
Out[3]: sqrt(x**3)

In [4]: sqrt(x)**3
Out[4]: x**(3/2)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Thus &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cleft%28%5Csqrt%7Bx%7D%5Cright%29%5E3+%3D+x%5E%7B%5Cfrac%7B3%7D%7B2%7D%7D&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\left(\sqrt{x}\right)^3 = x^{\frac{3}{2}}&quot; class=&quot;latex&quot; title=&quot;\left(\sqrt{x}\right)^3 = x^{\frac{3}{2}}&quot; /&gt; but &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csqrt%7Bx%5E3%7D+%5Cneq+x%5E%7B%5Cfrac%7B3%7D%7B2%7D%7D&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\sqrt{x^3} \neq x^{\frac{3}{2}}&quot; class=&quot;latex&quot; title=&quot;\sqrt{x^3} \neq x^{\frac{3}{2}}&quot; /&gt; (to see this, replace &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; with -1).&lt;/p&gt;
&lt;p&gt;So the idea would be to print &lt;code&gt;Pow(expr, Rational(a, b))&lt;/code&gt; as &lt;code&gt;root(expr, b)**a&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;The merits of this are debatable, but anyway I think we should have this &lt;code&gt;root()&lt;/code&gt; function in any case (see &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2643&quot; target=&quot;_blank&quot;&gt;issue 2643&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Another idea, which is probably not a good one, is to always print &lt;code&gt;int/int&lt;/code&gt; as &lt;code&gt;S(int)/int&lt;/code&gt;.  So we would get&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Rational(1, 2)
S(1)/2
&amp;gt;&amp;gt;&amp;gt; x**Rational(4, 5)
x**(S(4)/5)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This is probably a bad idea because even though expressions would always be copy-pastable, they would be slightly less readable.  &lt;/p&gt;
&lt;p&gt;By the way, in case you didn’t catch it, all of these changes only affect the string printer.  The pretty printer remained unaffected, and would under any additional changes, as it isn’t copy-pastable anyway, and already does a superb job of printing roots.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1042&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-08-18T03:11:32+00:00</dc:date>
	<dc:creator>asmeurer</dc:creator>
</item>
<item rdf:about="http://saptman.wordpress.com/?p=32">
	<title>Saptarshi Mandal: Summer is ending :(</title>
	<link>http://saptman.wordpress.com/2011/08/14/summer-is-ending/</link>
	<content:encoded>&lt;p&gt;A beautiful summer is coming to an end and I am at the last leg of my Gsoc. I must apologize for the erratic posts but its mostly because I was “busy” with other things (mostly enjoying myself in the US of A, eating steaks, going out for barbecues, and enjoying the beautiful Maryland summer weather.)&lt;/p&gt;
&lt;p&gt;In the last few weeks I spent a bit of time cleaning up Gray code. It went through a few API changes and I hope to have the subsets and partitions branches merged in within this week. I also implemented a demo of the Permutations branch that involves Polyhedron rotations. I hope to show one involving a Rubik’s cube when I have the Permutation group module in (more on that in a while). I also implemented a residue class and a residue group module as that was missing in the number theory branch of Sympy. That branch needs an overhaul both in terms of functionality as well as the code that is already there and I hope I can get some momentum going in that direction with the code I have written. I also wrote some generators for Permutation groups. This is fairly easy to do now, the basic algorithm is to generate all permutations and filter out those that do not fit the criteria. Of course, generating all permutations is inefficient, and some generators have certain special properties that we can use. For example, the Cyclic group can be generated in linear time as that simply involves a single rotation. Alternating group however requires the generation of all even permutations. Some group generators will probably make use of the specialized algorithms that have been implemented in the iterables section of Sympy.&lt;/p&gt;
&lt;p&gt;I have also managed to implement the Schreier sims algorithm but its extremely ugly and unpythonic for now. Algorithms for generating orbits and stabilizer chains are also there but they are fairly inefficient. I hope to clean them up and submit them for a pull request in this week before the hard pencils down date.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=saptman.wordpress.com&amp;amp;blog=23040289&amp;amp;post=32&amp;amp;subd=saptman&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-14T21:25:54+00:00</dc:date>
	<dc:creator>saptman</dc:creator>
</item>
<item rdf:about="http://lazovichsympy.wordpress.com/?p=91">
	<title>Tomo Lazovich: Cool results in represent</title>
	<link>http://lazovichsympy.wordpress.com/2011/08/13/cool-results-in-represent/</link>
	<content:encoded>&lt;p&gt;This post right now is just a quick update with an example python session showing the cool things we can do in represent now, after a very hectic week of code writing. I’m currently in the process of finalizing things in the way that represent works, so I will post a &lt;em&gt;much&lt;/em&gt; more detailed post at some point later, but right now I just want to show that we can actually do quantum mechanics in continuous bases! (In this case, with the particle in a box system).&lt;/p&gt;
&lt;p&gt;Here is an example python session with notes on the output:&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.quantum import *
&amp;gt;&amp;gt;&amp;gt; from sympy.physics.quantum.piab import *
&amp;gt;&amp;gt;&amp;gt; wf = represent(PIABKet())
&amp;gt;&amp;gt;&amp;gt; wf
Wavefunction(2**(1/2)*(1/L)**(1/2)*sin(pi*n*x_1/L), (x_1, 0, L))
&amp;gt;&amp;gt;&amp;gt; wf.norm
1&lt;/pre&gt;
&lt;div id=&quot;:2qo&quot;&gt;
&lt;p&gt;We get a particle-in-the-box Wavefunction when it is represented and it’s properly normalized.&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; represent(XOp()*PIABKet())
Wavefunction(2**(1/2)*x_2*(1/L)**(1/2)*sin(pi*n*x_2/L), x_2)&lt;/pre&gt;
&lt;p&gt;We now get a wavefunction with an extra factor of x!&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; represent(PxOp()*PIABKet(), basis=XKet)
Wavefunction(-2**(1/2)*hbar*I*pi*n*(1/L)**(1/2)*cos(pi*n*x_2/L)/L, x_2)&lt;/pre&gt;
&lt;p&gt;The PxOp actually takes the derivative of the wavefunction correctly! (Momentum operators in the position basis are differential operators).&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; represent(PIABBra()*XOp()*PIABKet(), basis=XKet)
0&lt;/pre&gt;
&lt;p&gt;Here, we insert two unities. The first one integrated collapses a delta function, but the second one integrated actually computes the expectation value of x for the particle-in-a-box wavefunction (which is what you expect from representing &amp;lt;psi|X|psi&amp;gt;).&lt;/p&gt;
&lt;p&gt;EDIT: As you’ll see in the comments, Raoul pointed out that this is actually incorrect, and I will be looking into it!&lt;/p&gt;
&lt;p&gt;There are still a few kinks being worked out, but we’re very close to having a nice finished product which is why I am reserving a longer post for tomorrow. I am quite pleased with the results we’re seeing so far though!&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;amp;blog=22774068&amp;amp;post=91&amp;amp;subd=lazovichsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-08-14T03:39:06+00:00</dc:date>
	<dc:creator>lazovich</dc:creator>
</item>
<item rdf:about="http://gilbertgede.wordpress.com/?p=82">
	<title>Gilbert Gede: GSoC, Week 12</title>
	<link>http://gilbertgede.wordpress.com/2011/08/13/gsoc-week-12/</link>
	<content:encoded>&lt;p&gt;Well, this past week was the final “full” week of the 2011 Google Summer of Code. The ‘soft’ pencils down date is Monday.&lt;/p&gt;
&lt;p&gt;This week, I mostly rewrote interfaces to some functions and classes. I should probably go back through previous blog posts and update those to show how they are different, so if anyone comes across this in the future, there won’t be example code which doesn’t work. I also tried to finish up the documentation this week. I decided a little late in the week to add another page, a “advanced/future interfaces” page, to describe how some functions/classes have different interfaces (and their advantages/disadvantages) as well as some discussed extensions to the current interface (that probably won’t be implemented right now). Some of these things were: more ways to access basis vectors, more printing options, and more ways to initialize the Kane object. Like I said, I don’t think I’ll be able to implement these now. I think I’ll try and do those three things this Fall though.&lt;/p&gt;
&lt;p&gt;I also went through an example of bringing non-contributing forces into evidence (I discussed this topic a little in last week’s blog post). With the changes to the Kane interface it has ended up working out quite nicely. I put some code for this into the examples section, so hopefully it will be relatively easy for others to figure out. I didn’t make as much progress as I’d like with the code output function, but I think it can do an adequate job at the moment. I also spent most of a day rebasing all of my code of the latest master. I’m not sure what I did wrong, but somehow, I managed to get double commits again, so I took care of this. I think it might have been how I branched, rebased on one branch, then merged? It took some time to sort out.&lt;/p&gt;
&lt;p&gt;I see there being two more things to do. The first is updating the images I have in the documentation; they’re all hand-drawn and of low quality. I plan on spending a little time this weekend on that, as well as Monday. The other thing is updating my pull request, getting others to look at it, and making necessary changes (and hopefully during this time, I’ll be able to check out other people’s pull requests and help them). Working with the pull request will probably take longer than updating the images…&lt;/p&gt;
&lt;p&gt;Anyways, this is the last required blog post, but I think I’ll do at least one more as part of the Summer of Code, to wrap things up, and maybe introduce one more example.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;amp;blog=22677911&amp;amp;post=82&amp;amp;subd=gilbertgede&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-13T15:46:15+00:00</dc:date>
	<dc:creator>gilbertgede</dc:creator>
</item>
<item rdf:about="http://sympystats.wordpress.com/?p=239">
	<title>Matthew Rocklin: Week 12: Pull Requests</title>
	<link>http://sympystats.wordpress.com/2011/08/13/week-12-pull-requests/</link>
	<content:encoded>&lt;p&gt;As before, not much to report. Slow plodding through testing, bug fixing, etc….&lt;/p&gt;
&lt;p&gt;I have a pull request here for Matrix Expressions&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/532&quot;&gt;https://github.com/sympy/sympy/pull/532&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My branch for Finite and Continuous Random Variables is below. It doesn’t have a pull request yet (I’m waiting for Tom’s code to get in) but I’d be thrilled if anyone wanted to look it over in the meantime.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mrocklin/sympy/tree/rv2&quot;&gt;https://github.com/mrocklin/sympy/tree/rv2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is another branch for Multivariate Random Normals that depends on the previous two. I suspect that it might have to change based on feedback from the previous two branches. It’s probably not worth reviewing at this point but, if you’re interested, here it is.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mrocklin/sympy/tree/mvn_rv&quot;&gt;https://github.com/mrocklin/sympy/tree/mvn_rv&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=239&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-08-13T15:04:26+00:00</dc:date>
	<dc:creator>mrocklin</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8510171342300140296.post-984850516976455252">
	<title>Sean Vig: Getting coupled_spin merged</title>
	<link>http://seanvig.blogspot.com/2011/08/getting-coupledspin-merged.html</link>
	<content:encoded>The biggest development this week was working out what is needed to get the coupled_spin which implements spin coupling merged back into master. There were some things to clean up with non-spin modules and a few minor things to address, but in cleaning this up, there will be some big changes to the way spin coupling works. First, with respect to things that have been implemented, rewrite and represent will no longer handle the coupling and uncoupling of states. To do coupling and uncoupling, instead, a couple and uncouple method will be created to handle the coupling and uncoupling of states. In addition, coupled states will now be represented by new classes, J?KetCoupled for the Cartesian directions. These will be returned by rewrite when a TensorProduct is coupled and will return the proper vector for the coupled space when it is represented and can be uncoupled when an uncoupled operator acts on it.&lt;br /&gt;&lt;br /&gt;Most of these new changes have been implemented to varying degrees. There is some functionality lacking, but much of what remains for this is to implement tests for the new functions and make sure everything is working properly.&lt;br /&gt;&lt;br /&gt;The coupling of arbitrary number of spin spaces had made slow progress due to some ambiguity when coupled states were created using normal states, but with the new Coupled classes, specifying the coupling should be possible, thus making the computations easier.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-984850516976455252?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-13T01:50:40+00:00</dc:date>
	<dc:creator>Sean Vig</dc:creator>
</item>
<item rdf:about="http://nessgrh.wordpress.com/?p=366">
	<title>Tom Bachmann: Last Status Update (Probably)</title>
	<link>http://nessgrh.wordpress.com/2011/08/12/last-status-update-probably/</link>
	<content:encoded>&lt;p&gt;Time flies by … I feel like I just started hyperexpand() yesterday (not quite actually; but you get the idea *g*). I’ve been moving around this week, so I wasn’t terribly productive so far. I did, however, compute (reasonably) neat representations for all the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7B%7D_pF_%7Bp-1%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;{}_pF_{p-1}&quot; class=&quot;latex&quot; title=&quot;{}_pF_{p-1}&quot; /&gt; in the hyperexpand() table. These &lt;a href=&quot;http://pastebin.com/raw.php?i=fv9BNEMe&quot;&gt;examples&lt;/a&gt; demonstrate the kind of neat answers this can yield (compare to some of the examples from last week) [actually the tables contain some much more complicated functions, but I was not yet able to come up with interesting integrals that yield these answers *g*].&lt;/p&gt;
&lt;p&gt;My final plan, beyond mere cleanup and bugfixing, is to do something along the way of simplifying convergence conditions. This won’t be anything fancy (I’m thinking of peep-hole optimisation); my goal is to make mess like the &lt;a href=&quot;http://pastebin.com/raw.php?i=dYdgefP9&quot;&gt;following&lt;/a&gt; somewhat less horrific. I hope to have a final pull request ready by sunday night. Then I will finally slow down and relax; work towards merging my branches; perhaps review some other GSOC pull requests.&lt;/p&gt;
&lt;p&gt;Quite a summer.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;amp;blog=22546379&amp;amp;post=366&amp;amp;subd=nessgrh&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-12T18:22:27+00:00</dc:date>
	<dc:creator>nessgrh</dc:creator>
</item>
<item rdf:about="http://f1728.wordpress.com/?p=234">
	<title>Jeremias Yehdegho: Week 12</title>
	<link>http://f1728.wordpress.com/2011/08/12/week-12/</link>
	<content:encoded>&lt;p&gt;Hi everyone, welcome to one of the last updates. This week I finally finished FGLM without having to use &lt;code&gt;solve&lt;/code&gt;, which makes it quite fast. The problem I had was the following:&lt;/p&gt;
&lt;p&gt;Suppose you’re given a sequence of non-zero vectors &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v_1+%3D+%281%2C+0%2C+%5Cldots%2C+0%29%5Et%2C+%5Cldots%2C+v_r&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v_1 = (1, 0, \ldots, 0)^t, \ldots, v_r&quot; class=&quot;latex&quot; title=&quot;v_1 = (1, 0, \ldots, 0)^t, \ldots, v_r&quot; /&gt; one after the other. You know &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%3C+r&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n &amp;lt; r&quot; class=&quot;latex&quot; title=&quot;n &amp;lt; r&quot; /&gt; of them are linearly independant and thus you consider them to be a basis of the spanned space. Now you would like to iteratively determine of a new vector &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v_s&quot; class=&quot;latex&quot; title=&quot;v_s&quot; /&gt; is linearly dependant on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v_1%2C+%5Cldots%2C+v_%7Bs-1%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v_1, \ldots, v_{s-1}&quot; class=&quot;latex&quot; title=&quot;v_1, \ldots, v_{s-1}&quot; /&gt; and if not, add it to your basis.&lt;br /&gt;
You could do this by solving the following system &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bs-1%7D+%5Clambda_i+v_i+%3D+v_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\sum_{i=1}^{s-1} \lambda_i v_i = v_s&quot; class=&quot;latex&quot; title=&quot;\sum_{i=1}^{s-1} \lambda_i v_i = v_s&quot; /&gt; but this will be a relatively expensive operation and it can be done better:&lt;/p&gt;
&lt;p&gt;Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt; be the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%5Ctimes+n&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n \times n&quot; class=&quot;latex&quot; title=&quot;n \times n&quot; /&gt; identity matrix. At the beginning, it maps &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v_1&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v_1&quot; class=&quot;latex&quot; title=&quot;v_1&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+v_1+%3D+v_1+%3D+e_1&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P v_1 = v_1 = e_1&quot; class=&quot;latex&quot; title=&quot;P v_1 = v_1 = e_1&quot; /&gt;, which is correct.&lt;/p&gt;
&lt;p&gt;Suppose now, that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+%5Ctilde%7Bv%7D_i+%3D+e_i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P \tilde{v}_i = e_i&quot; class=&quot;latex&quot; title=&quot;P \tilde{v}_i = e_i&quot; /&gt; for all &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+%5Cldots%2C+s-1%5C%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i \in \{1, \ldots, s-1\}&quot; class=&quot;latex&quot; title=&quot;i \in \{1, \ldots, s-1\}&quot; /&gt;, then the following can occur: Either &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+%5Ctilde%7Bv%7D_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P \tilde{v}_s&quot; class=&quot;latex&quot; title=&quot;P \tilde{v}_s&quot; /&gt; has no non-zero entries after the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s-1&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;s-1&quot; class=&quot;latex&quot; title=&quot;s-1&quot; /&gt;-th, which means that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde%7Bv%7D_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\tilde{v}_s&quot; class=&quot;latex&quot; title=&quot;\tilde{v}_s&quot; /&gt; is an element of the vector space spanned by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5C%7B%5Ctilde%7Bv%7D_1%2C+%5Cldots%2C+%5Ctilde%7Bv%7D_%7Bs-1%7D%5C%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\{\tilde{v}_1, \ldots, \tilde{v}_{s-1}\}&quot; class=&quot;latex&quot; title=&quot;\{\tilde{v}_1, \ldots, \tilde{v}_{s-1}\}&quot; /&gt; and thus can be discarded, or it has a non-zero entry after the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s-1&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;s-1&quot; class=&quot;latex&quot; title=&quot;s-1&quot; /&gt;-th and is thus linearly independant from the previous vectors.&lt;br /&gt;
Now I’d like to update &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt;, such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+%5Ctilde%7Bv%7D_i+%3D+e_i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P \tilde{v}_i = e_i&quot; class=&quot;latex&quot; title=&quot;P \tilde{v}_i = e_i&quot; /&gt; for all &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+%5Cldots%2C+s%5C%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i \in \{1, \ldots, s\}&quot; class=&quot;latex&quot; title=&quot;i \in \{1, \ldots, s\}&quot; /&gt;. Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; be the smallest index greater than &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;s&quot; class=&quot;latex&quot; title=&quot;s&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28P+%5Ctilde%7Bv%7D_s%29_k&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(P \tilde{v}_s)_k&quot; class=&quot;latex&quot; title=&quot;(P \tilde{v}_s)_k&quot; /&gt; is non-zero and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Clambda+%3D+P+%5Ctilde%7Bv%7D_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\lambda = P \tilde{v}_s&quot; class=&quot;latex&quot; title=&quot;\lambda = P \tilde{v}_s&quot; /&gt;. Then&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=P_%7Bi%2Cj%7D+%3D+%5Cbegin%7Bcases%7D+%5Cfrac%7BP_%7Bk%2C+j%7D%7D%7B%5Clambda_k%7D++%26+%5Cmbox%7Bif+%7D+i+%3D+s%5C%5C+P_%7Bs%2Cj%7D+-+%5Cfrac%7BP_%7Bk%2Cj%7D%7D%7B%5Clambda_k%7D+%5Clambda_i++%26+%5Cmbox%7Bif+%7D+i+%3D+k%5C%5C+P_%7Bi%2Cj%7D+-+%5Cfrac%7BP_%7Bk%2Cj%7D%7D%7B%5Clambda_k%7D+%5Clambda%7Bi%7D++%26+%5Cmbox%7Botherwise%7D%5Cend%7Bcases%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P_{i,j} = \begin{cases} \frac{P_{k, j}}{\lambda_k}  &amp;amp; \mbox{if } i = s\\ P_{s,j} - \frac{P_{k,j}}{\lambda_k} \lambda_i  &amp;amp; \mbox{if } i = k\\ P_{i,j} - \frac{P_{k,j}}{\lambda_k} \lambda{i}  &amp;amp; \mbox{otherwise}\end{cases}&quot; class=&quot;latex&quot; title=&quot;P_{i,j} = \begin{cases} \frac{P_{k, j}}{\lambda_k}  &amp;amp; \mbox{if } i = s\\ P_{s,j} - \frac{P_{k,j}}{\lambda_k} \lambda_i  &amp;amp; \mbox{if } i = k\\ P_{i,j} - \frac{P_{k,j}}{\lambda_k} \lambda{i}  &amp;amp; \mbox{otherwise}\end{cases}&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This new &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt; has the desired properties (just multiply it with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde%7Bv%7D_1%2C+%5Cldots%2C+%5Ctilde%7Bv%7D_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\tilde{v}_1, \ldots, \tilde{v}_s&quot; class=&quot;latex&quot; title=&quot;\tilde{v}_1, \ldots, \tilde{v}_s&quot; /&gt;). Instead of having to use &lt;code&gt;solve&lt;/code&gt;, multiply with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt; and look if enough coefficients at the end are &lt;img src=&quot;http://s0.wp.com/latex.php?latex=0&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;0&quot; class=&quot;latex&quot; title=&quot;0&quot; /&gt;, if so, the vector is linearly dependant on the previous, if not, add it to the basis and update the matrix &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;Being reluctant and not thinking about this thoroughly before trying to write code cost a lot of time. :/&lt;/p&gt;
&lt;p&gt;Anyway, other than FGLM I wrote some documentation (which was overdue… sorry) and tried to improve rational simplification a bit (without much success).&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;amp;blog=22515617&amp;amp;post=234&amp;amp;subd=f1728&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-12T15:40:02+00:00</dc:date>
	<dc:creator>f1728</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1020">
	<title>Aaron Meurer: Hacking PuDB: Now an even better Python debugger</title>
	<link>http://asmeurersympy.wordpress.com/2011/08/08/hacking-pudb-now-an-even-better-python-debugger/</link>
	<content:encoded>&lt;p&gt;Readers of this blog may remember last year when I &lt;a href=&quot;http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger/&quot; target=&quot;_blank&quot;&gt;wrote&lt;/a&gt; about this awesome visual console Python debugger called &lt;a href=&quot;http://pypi.python.org/pypi/pudb&quot; target=&quot;_blank&quot;&gt;PuDB&lt;/a&gt;.  I suggest you read that post if you haven’t.&lt;/p&gt;
&lt;p&gt;At the end of that post, I noted that Ondřej and I had hacked it to make the colors more livable.  Well, a couple of weeks ago, GitHub user &lt;a href=&quot;https://github.com/jtriley&quot; target=&quot;_blank&quot;&gt;jtriley&lt;/a&gt; sent me an email asking me to back port my changes.&lt;/p&gt;
&lt;p&gt;A lot has changed since I wrote my blog post last year.  PuDB now has an official &lt;a href=&quot;http://lists.tiker.net/listinfo/pudb&quot; target=&quot;_blank&quot;&gt;mailing list&lt;/a&gt; and an official &lt;a href=&quot;https://github.com/inducer/pudb&quot; target=&quot;_blank&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I deleted my &lt;a href=&quot;https://github.com/asmeurer/pudb&quot; target=&quot;_blank&quot;&gt;GitHub clone&lt;/a&gt; and reforked from the official version.  &lt;/p&gt;
&lt;p&gt;A lot has also changed in the official code.  Andreas had added config support, including a built-in prefs dialog that lets you set a few settings:  the ability to turn on or off line numbers and the ability to change themes.&lt;/p&gt;
&lt;p&gt;So I took the new code and added my theme as an official theme.  This was pretty straight forward to do.&lt;/p&gt;
&lt;p&gt;But then, I got a little carried away.  &lt;/p&gt;
&lt;p&gt;I noticed that it was difficult to choose a theme with the built-in prefs window because you had to close and reopen the window each time you made a change.  So I added code to make it auto-update your changes as you made them.&lt;/p&gt;
&lt;p&gt;Then I went back and looked at my original blog post and looked at the things that I didn’t like.  There were two things.  First, the default stringifier for variables is &lt;code&gt;type&lt;/code&gt;, which is completely useless.  This is because &lt;code&gt;type&lt;/code&gt; is very fast and stable to compute.  I had previously hacked this to be &lt;code&gt;str&lt;/code&gt;, but now that there was an official config file with a prefs dialog, I figured it should go there. &lt;/p&gt;
&lt;p&gt;So I added support to change this setting.  But this wasn’t enough for me.  I also added the ability to define your own custom stringifier.  You just create a Python file that defines a function called &lt;code&gt;pudb_stringifier(obj)&lt;/code&gt;, which converts &lt;code&gt;obj&lt;/code&gt; into the desired string representation.  I included an &lt;a href=&quot;https://github.com/inducer/pudb/blob/master/example-stringifier.py&quot; target=&quot;_blank&quot;&gt;example file&lt;/a&gt; that gives a fancy example that uses signals to compute the string value, but times out after one second and falls back to the type.  This alleviates one of the problems of using &lt;code&gt;str&lt;/code&gt;, which is that it can be slow for objects with large string expressions, especially SymPy objects, where sometimes the printer can be slow.&lt;/p&gt;
&lt;p&gt;The second thing I didn’t like was that although you can change the width of the right-hand side bar, you could not change the relative heights of the variables, stack, and breakpoints boxes.  I never use breakpoints, and rarely use the stack, so I would prefer to have those smaller and the variables larger.  So I implemented it so that the &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; keys make the selected view smaller or larger.  This information is all saved in the config file, so it’s remembered when you close and reopen PuDB.&lt;/p&gt;
&lt;p&gt;There was one other thing that I didn’t like, which a change since my last blog post that reversed the order of the stack variables from what it was.  It used to be most recent at the bottom, but it was changed to most recent at the top.  This perhaps makes more sense, but the buttons to move around the stack, &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;, were still the same: &lt;code&gt;u&lt;/code&gt; moves down the stack (i.e., less recent), and &lt;code&gt;d&lt;/code&gt; moves up.  These keys were already well established—indeed, these are the same keys used in Python’s built-in debugger pdb—so I added a setting to change the stack order.  This was an easy change to make at this point, as I was already well aquatinted with the settings code, and only two lines of code needed to be changed when the setting changed.  Like all other settings, this uses the cool magic that changes the setting in real time, so you can see the effect without closing the settings window.&lt;/p&gt;
&lt;p&gt;Then someone on the mailing list requested a feature that I realized I also wanted, the ability to wrap variables.  Previously, any variable that was longer than the variable view would just be cut off.  You could make it wider, but that only helped a little bit.  Otherwise, if you wanted to see the whole variable, you had to open IPython by pressing &lt;code&gt;!&lt;/code&gt; and view it there.&lt;/p&gt;
&lt;p&gt;So, I implemented this.  This was definitely the hardest thing to implement.  I found out that it’s ironically very difficult to debug PuDB itself.  You can’t run PuDB inside of PuDB if PuDB crashes, as both instances will just crash.  Also, PuDB eats any print statements.  The solution, suggested by PuDB author Andreas Klöckner, was to get the ttys file of another terminal (e.g., &lt;code&gt;/dev/ttys012&lt;/code&gt;) and write the output to that.&lt;/p&gt;
&lt;p&gt;I also made it so that non-wrapped variables show &lt;code&gt;...&lt;/code&gt; at the end, at Andreas’s suggestion.  I wanted to use the unicode &lt;code&gt;…&lt;/code&gt;, but this was not working at all.  I discovered how much unicode really is a mess in Python 2.  The problem has something to do with … being a three byte character, and I think it also has to do with the color codes that urwid uses.  I’ll try it again once PuDB is ported to Python 3, but for now,  we are going to have to do with the three ascii dots.&lt;/p&gt;
&lt;p&gt;The wrapping code is waiting for merge, but the rest are already in.  Here is a screen shot demonstrating some of the things I did:&lt;/p&gt;
&lt;div style=&quot;width: 310px;&quot; class=&quot;wp-caption alignnone&quot; id=&quot;attachment_1021&quot;&gt;&lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm.png&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm.png?w=300&amp;amp;h=245&quot; title=&quot;Improved PuDB&quot; height=&quot;245&quot; width=&quot;300&quot; alt=&quot;&quot; class=&quot;size-medium wp-image-1021&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Click for full size image&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Things that I implemented to notice here:&lt;/p&gt;
&lt;p&gt;- The midnight theme.&lt;br /&gt;
- The stack and breakpoints views have been shrunken.&lt;br /&gt;
- The variables are wrapped.&lt;br /&gt;
- Wrapping for the variable &lt;code&gt;fourhundred&lt;/code&gt; has been turned off (you can turn wrapping on or off on a per-variable basis by selecting the variable and pressing &lt;code&gt;w&lt;/code&gt;).   Notice that there is an ellipsis at the end to note it has been cut off.&lt;br /&gt;
- Nested variables now have &lt;code&gt;|&lt;/code&gt; before them, to distinguish them from wrapped variables, which are also indented.  This change may or may not be accepted by Andreas.&lt;/p&gt;
&lt;p&gt;Here’s a screen shot showing the prefs window.  I did not implement this, but I did implement all but the first two preferences in the window. I’ve made my window tall so you can see all the options.  You really have to get the code and try it to see the auto-update awesomeness.  You can open the prefs window by pressing &lt;code&gt;Ctrl-p&lt;/code&gt; (this was not at all obvious to me the first time I used it, so I also submitted a patch that makes it open the first time you use PuDB).&lt;/p&gt;
&lt;div style=&quot;width: 253px;&quot; class=&quot;wp-caption alignnone&quot; id=&quot;attachment_1023&quot;&gt;&lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-41-30-pm.png&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-41-30-pm.png?w=243&amp;amp;h=300&quot; title=&quot;PuDB Prefs Window&quot; height=&quot;300&quot; width=&quot;243&quot; alt=&quot;&quot; class=&quot;size-medium wp-image-1023&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Click to see full size image&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;So if you’re not already using this awesome Python debugger, you should.  You can &lt;code&gt;pip install pudb&lt;/code&gt;, or &lt;a href=&quot;https://github.com/inducer/pudb&quot; target=&quot;_blank&quot;&gt;fork it&lt;/a&gt; at GitHub.&lt;/p&gt;
&lt;p&gt;Running it in your code is very easy.  Just add&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;import pudb;pudb.set_trace()
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;in your code wherever you want to set a break point, or you can do &lt;code&gt;python -m pudb.run script.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This awesome tool has increased my productivity tenfold since I discovered it, and has helped me track down bugs that would have otherwise extremely difficult if not impossible to find.  And now, it’s just better.&lt;/p&gt;
&lt;p&gt;PuDB uses the &lt;a href=&quot;http://excess.org/urwid/&quot; target=&quot;_blank&quot;&gt;urwid library&lt;/a&gt; to do all its console GUI magic.  This library makes it pretty easy to do a lot of stuff. For example, it automatically does relative sizing of widgets, so, for example, when you resize the variables, stack, or breakpoints views, you are actually increasing the relative size of each, not the size in characters.  This makes it portable against any terminal size.  The library also made coding the prefs window autoupdate magic very easy.&lt;/p&gt;
&lt;p&gt;Also, I just want to note that git and GitHub make collaboration like this very easy.  I just forked his project, made some improvements, and submitted them as pull requests.  Then it was easy to discuss the changes.  If the code had not been on GitHub and especially if it had not been in git, I probably would have never bothered to submit my contributions upstream.  I highly recommend that every open source project use git and GitHub.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1020&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-08-08T03:16:10+00:00</dc:date>
	<dc:creator>asmeurer</dc:creator>
</item>
<item rdf:about="http://lazovichsympy.wordpress.com/?p=86">
	<title>Tomo Lazovich: An altered internal API for default representations and fun with Wavefunctions</title>
	<link>http://lazovichsympy.wordpress.com/2011/08/06/an-altered-internal-api-for-default-representations-and-fun-with-wavefunctions/</link>
	<content:encoded>&lt;p&gt;This week was a very, very busy week. While there were only a handful of commits, they were probably some of the most crucial ones yet in bringing this home and being able to start writing example systems. With pencils down only two weeks away, it is seriously crunchtime.&lt;/p&gt;
&lt;p&gt;A very nice development was the incorporation of Wavefunctions (Wf) and Differential Operators (DO) into the main represent logic. If you now try to represent anything in cartesian.py, you will get expressions that actually include Wf and have the DO applied appropriately! (I will soon be adding support for a qapply flag, which if set to false will leave all DOs intact without applying them.) Support for this included adding calls to qapply as well a function which unwraps all Wf around expressions before integrating over unities, then rewrapping the final result in a single Wf object.&lt;/p&gt;
&lt;p&gt;With this done, I moved on to another quite important task in the represent logic that I discussed with Brian. This involves dealing with the ambiguous case in represent where no basis is specified in the initial call to represent. The current way that the quantum modules are set up to handle this logic involves the states having an internal _represent_default_basis method, which simply calls the appropriate _represent_FOO method internally in the class. This entire process is basically a black box to the outer represent logic. This becomes a problem in continuous bases, where we actually need to know which basis was chosen for representing (in order to know if there were any unities inserted and integrate appropriately). This is also a more general problem in that if you have an arbitrary expression, you don’t know if all of the internal _represent_default_basis calls actually represent the individual QExprs in the same basis! You could, in fact, have one QExpr represented in a different basis than another and end up with some very weird things.&lt;/p&gt;
&lt;p&gt;So, there are really two problems exposed by this API weakness, and we need to address them both. First, the main represent logic needs to know what the default basis for a given QExpr is. Second, in the case of arbitrary quantum expressions, we need to choose one basis to represent all of the individual QExprs in.&lt;/p&gt;
&lt;p&gt;Brian and I have discussed strategies to address both of these issues. The first is a change in the internal API for default representations. Rather than using the current _represent_default_basis, classes should now contain an internal _get_default_basis, which simply returns  the class which is meant to be the default basis for that QExpr. This way, we can still replicate the previous behavior, but the main represent logic now knows which basis is the default for that class. Because this involves changing an already quite large base of classes in the spin and quantum computing modules, this was quite an arduous task. After much testing and grappling with errors, the spin and cartesian classes now follow the new represent conventions for this, with the quantum computing classes soon to follow. (I should note, that as these changes were made, the spin classes were also changed to follow additional new conventions for represent. The first is that internally, the basis option is converted to a basis state rather than left as an operator in represent. This means that all _represent_Op methods had to be changed to _represent_Ket methods. Second, rather than being able to specify a single operator, you must now specify the complete commuting set of operators for a given eigenket. This means, for the spin classes, rather than being able to pass basis=Jx, you now pass basis=set([J2, Jx]).)&lt;/p&gt;
&lt;p&gt;The second change is to have represent choose which basis to represent in during the first step of the recursion. With the current algorithm, _represent_default_basis was simply called at the lowest level of the recursion, on the individual QExpr. Now, the basis is chosen based on the default basis of the first QExpr in the expression, and all QExprs in the arbitrary expression are represented in this basis. This means all the representations will be consistent and we aren’t left with any strange final expressions. This change in the represent logic is next on my TODO list.&lt;/p&gt;
&lt;p&gt;It is really nice to see all of the pieces of a now very robust representation logic coming together. The schedule I have been following is not quite what I initially planned, but the changes to represent logic for continuous bases ended up being &lt;strong&gt;way&lt;/strong&gt; more subtle than what I initially anticipated. With all the possibilities for different quantum systems out there, I really envision that at the end of the day this revamped represent will be able to handle what is thrown at it. By GSoC pencils down, I will have at least a few different nice example systems implemented and some very clear documentation. Documenting this is very important to me because I’ve put a ton of time into making sure it will work in very general cases (with Brian’s amazing help and discussion), so making sure users know how it works and how to use its full power is the most important thing to me.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;amp;blog=22774068&amp;amp;post=86&amp;amp;subd=lazovichsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-08-06T22:54:00+00:00</dc:date>
	<dc:creator>lazovich</dc:creator>
</item>
<item rdf:about="http://gilbertgede.wordpress.com/?p=78">
	<title>Gilbert Gede: GSoC, Week 11</title>
	<link>http://gilbertgede.wordpress.com/2011/08/06/gsoc-week-11/</link>
	<content:encoded>&lt;p&gt;Well, it looks like there is a little over 1 full week left. This week’s post probably won’t be too long. I have a list of the last few things left to work on. The last few (big) pieces are: finishing code output, making sure you can bring non-contributing forces into evidence, and documentation work.&lt;/p&gt;
&lt;p&gt;Finishing the code output is fairly straight forward; there needs to be some thought given to: output quantities, time to write to file, correct use of cse(), and C code output. I already have code which writes to a file MATLAB or SciPy code for numerical integration, with an option to use cse() on the expressions. Using cse() makes it take longer to generate the code, but the code can execute significantly faster (especially with the bike, where there are a few hundred “common sub-expressions”). Writing to a file unfortunately seems to cost a similar amount of time as printing to the screen; in the case of the bike, a few minutes. There also needs to be some though of how to handle output quantities. When numerically integrating equations of motion, it’s common to look at things like total energy, or a body’s angular momentum, etc. A nice, clean way to work these into the integration would be ideal. There is also the issue of dealing with things like matrices as part of the code output; one might want to output a matrix for doing animations. Deciding on how to accept a matrix and format it for output also needs to be done.&lt;/p&gt;
&lt;p&gt;One of the advantages of Kane’s Method is that “non-contributing forces” do not come into the equations of motion. Non-contributing forces are things like normal forces, contact (but not friction forces) such as pinned or rolling connections, along with some others. Unfortunately, this can also be a disadvantage of Kane’s Method; frequently one wants to know the value of these forces, in cases like: checking that normal forces do not go negative, calculating friction forces, joint constraint forces, etc. There is a way of using Kane’s Method which involves introducing “auxiliary speeds” and “fictitious forces”; the auxiliary speeds are defined as zero, additional equations are introduced, and then the forces are solved for (in terms of the “real” speeds).  I need to go through this to make sure my code is compatible with it; additionally, I’ve never done this for a system with non-holonomic constraints though, so I’ll have to check this out too.&lt;/p&gt;
&lt;p&gt;Finally I’m finishing up the documentation. I have to go through and check docstring and doctest coverage; for some functions I don’t know if a doctest makes sense, such as generating a file from the code output, and I’m not sure what to do here, so I’ll have to look into this. Also, I have to finish the sphinx-documentation; most of it is done, but I need to go through and make sure I’ve covered some of the newer things I’ve added.&lt;/p&gt;
&lt;p&gt;I hope by the end of next week to sort out my branches; right now they’re a little messy; I want to make them a little more organized. I’m planning on going back to having just a pydy branch, and a pydy pull branch. I’ll just work with the pydy-pull brach this time. Previously I made that branch, continued development on pydy, but also made corrections to pydy-pul in request to people’s comments. With development “stopping”, I think that will make things a bit less confusing by just working with issues on the pydy-pull branch.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/78/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/78/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/gilbertgede.wordpress.com/78/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/gilbertgede.wordpress.com/78/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/gilbertgede.wordpress.com/78/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/gilbertgede.wordpress.com/78/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/gilbertgede.wordpress.com/78/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/gilbertgede.wordpress.com/78/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/gilbertgede.wordpress.com/78/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/gilbertgede.wordpress.com/78/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/gilbertgede.wordpress.com/78/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/gilbertgede.wordpress.com/78/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/gilbertgede.wordpress.com/78/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/gilbertgede.wordpress.com/78/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;amp;blog=22677911&amp;amp;post=78&amp;amp;subd=gilbertgede&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-06T20:46:08+00:00</dc:date>
	<dc:creator>gilbertgede</dc:creator>
</item>
<item rdf:about="http://nessgrh.wordpress.com/?p=355">
	<title>Tom Bachmann: Branching, Once More</title>
	<link>http://nessgrh.wordpress.com/2011/08/06/branching-once-more/</link>
	<content:encoded>&lt;p&gt;As usual with my “out-of-line” posts, this one is again mostly to clear my own thoughts. It seeks to address the problem of how to get out “nice” answers, in the sense of e.g. finding a representation that is manifestly real (say to use inverse trig functions instead of logarithms with imaginary arguments). This turns out to be fairly delicate; let me explain why. Recall that when the code returns an expression like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csqrt%7B1+%2B+e%5E%7B-i+%5Cpi%7D+z%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\sqrt{1 + e^{-i \pi} z}&quot; class=&quot;latex&quot; title=&quot;\sqrt{1 + e^{-i \pi} z}&quot; /&gt;, we really mean a certain function on the riemann surface of the logarithm which we try to crudely express above. First of all, it is clear that if we want neat answers, we cannot just return this expression as stated. This is because the square-root function &lt;em&gt;per se&lt;/em&gt; has lots of meanings, whereas we attach here a &lt;em&gt;very&lt;/em&gt; specific meaning to it. There is no realiable way to recognise and transform such expressions later. So we really should return a new function object “MySqrt(z)” which has well-defined meaning for all polar &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;z&quot; class=&quot;latex&quot; title=&quot;z&quot; /&gt;, and which can convert itself into a nice representation. The trouble is now that we have to very carefully &lt;em&gt;define&lt;/em&gt; MySqrt(z) for all polar &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;z&quot; class=&quot;latex&quot; title=&quot;z&quot; /&gt;, in such a way that all slater-expansions are correct. It is not (to me) immediately obvious that this is even possible (although it will turn out it is); note in particular that this function will necessarily be discontinuous. The first problem to solve then is how to deal with hypergeometric and meijer g-functions branched at other points than zero and infinity. After that we need to find a way to display things nicely.&lt;/p&gt;
&lt;h2&gt;Branching at +-1&lt;/h2&gt;
&lt;p&gt;We have the following facts about &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7B%7D_pF_q%28z%29&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;{}_pF_q(z)&quot; class=&quot;latex&quot; title=&quot;{}_pF_q(z)&quot; /&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unbranched if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p+%5Cle+q&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;p \le q&quot; class=&quot;latex&quot; title=&quot;p \le q&quot; /&gt;&lt;/li&gt;
&lt;li&gt;branched at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%2B1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;+1&quot; class=&quot;latex&quot; title=&quot;+1&quot; /&gt; if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p+%3D+q+%2B+1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;p = q + 1&quot; class=&quot;latex&quot; title=&quot;p = q + 1&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we have the following facts about &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G_%7Bp%2Cq%7D%5E%7Bm%2Cn%7D%28z%29&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;G_{p,q}^{m,n}(z)&quot; class=&quot;latex&quot; title=&quot;G_{p,q}^{m,n}(z)&quot; /&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;usually branched at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=0%2C+%5Cinfty&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;0, \infty&quot; class=&quot;latex&quot; title=&quot;0, \infty&quot; /&gt;&lt;/li&gt;
&lt;li&gt;unbranched at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%2B1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;+1&quot; class=&quot;latex&quot; title=&quot;+1&quot; /&gt; if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdelta+%3D+p+%2B+q+-+%28m+%2B+n%29%2F2+%3E+0&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\delta = p + q - (m + n)/2 &amp;gt; 0&quot; class=&quot;latex&quot; title=&quot;\delta = p + q - (m + n)/2 &amp;gt; 0&quot; /&gt;; in this case it is even analytic in a neighborhood of the positive reals&lt;/li&gt;
&lt;li&gt;if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p+%3D+q&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;p = q&quot; class=&quot;latex&quot; title=&quot;p = q&quot; /&gt;, branched at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28-1%29%5E%7Bp+-+m+-+n%7D+%3D+%28-1%29%5E%7Bq+-+m+-+n%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;(-1)^{p - m - n} = (-1)^{q - m - n}&quot; class=&quot;latex&quot; title=&quot;(-1)^{p - m - n} = (-1)^{q - m - n}&quot; /&gt;&lt;/li&gt;
&lt;li&gt;always has a polar lift that is continuous on “circles” (spirals) of radius not equal to one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice further that the Slater theorem (or a generalisation) can be used to come up with a nice (single) answer if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdelta+%3E+0&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\delta &amp;gt; 0&quot; class=&quot;latex&quot; title=&quot;\delta &amp;gt; 0&quot; /&gt;. We thus assume now that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p+%3D+q&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;p = q&quot; class=&quot;latex&quot; title=&quot;p = q&quot; /&gt; (so there is a problematic branch point) and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdelta+%3E+0&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\delta &amp;gt; 0&quot; class=&quot;latex&quot; title=&quot;\delta &amp;gt; 0&quot; /&gt; (so that we need to define the lift of the hypergeometric functions involved), and that a version of the slater theorem applies (else there is no work to do at all). As always, we let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\mathcal{S}&quot; class=&quot;latex&quot; title=&quot;\mathcal{S}&quot; /&gt; be the riemann surface of the logarithm, we understand &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; to be defined thereon (although it is not continuous).&lt;/p&gt;
&lt;p&gt;We immediately find that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; is branched at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;-1&quot; class=&quot;latex&quot; title=&quot;-1&quot; /&gt;, thus &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; can be expressed as a sum of hypergeometric functions of argument &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-z&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;-z&quot; class=&quot;latex&quot; title=&quot;-z&quot; /&gt; or &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B-1%7D%7Bz%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{-1}{z}&quot; class=&quot;latex&quot; title=&quot;\frac{-1}{z}&quot; /&gt;. Now given a hypergeometric function &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7B%7D_pF_%7Bp-1%7D%3A+D+%5Crightarrow+%5Cmathbb%7BC%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;{}_pF_{p-1}: D \rightarrow \mathbb{C}&quot; class=&quot;latex&quot; title=&quot;{}_pF_{p-1}: D \rightarrow \mathbb{C}&quot; /&gt; (where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;D&quot; class=&quot;latex&quot; title=&quot;D&quot; /&gt; is the unit disc, the region of convergence of the power series representation), we wish to define a lift &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7B%7D_pF_%7Bp-1%7D%3A+%5Cmathcal%7BS%7D+%5Crightarrow+%5Cmathbb%7BC%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;{}_pF_{p-1}: \mathcal{S} \rightarrow \mathbb{C}&quot; class=&quot;latex&quot; title=&quot;{}_pF_{p-1}: \mathcal{S} \rightarrow \mathbb{C}&quot; /&gt; which makes all slater-expansions valid for all polar &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;z&quot; class=&quot;latex&quot; title=&quot;z&quot; /&gt; (even though they were initially only valid for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7Cz%7C+%3C+1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;|z| &amp;lt; 1&quot; class=&quot;latex&quot; title=&quot;|z| &amp;lt; 1&quot; /&gt;). Indeed I claim that there exists a &lt;em&gt;unique&lt;/em&gt; &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28z%29&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f(z)&quot; class=&quot;latex&quot; title=&quot;f(z)&quot; /&gt; lift satisfying the following list of properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; is defined on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D+%5Csetminus+%5C%7Be%5E%7Bi+t%7D+%7C+t+%5Cin+%5Cmathbb%7BR%7D%5C%7D+%5Ccup+%5C%7Be%5E%7Bi+t%7D%2C+t+%5Cin+%280%2C+2%5Cpi%29%5C%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\mathcal{S} \setminus \{e^{i t} | t \in \mathbb{R}\} \cup \{e^{i t}, t \in (0, 2\pi)\}&quot; class=&quot;latex&quot; title=&quot;\mathcal{S} \setminus \{e^{i t} | t \in \mathbb{R}\} \cup \{e^{i t}, t \in (0, 2\pi)\}&quot; /&gt;&lt;/li&gt;
&lt;li&gt;if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7B%7D_pF_q&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;{}_pF_q&quot; class=&quot;latex&quot; title=&quot;{}_pF_q&quot; /&gt; does not have a pole at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;1&quot; class=&quot;latex&quot; title=&quot;1&quot; /&gt;, then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; is additionally defined on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E0%2C+e%5E%7B2+%5Cpi+i%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;e^0, e^{2 \pi i}&quot; class=&quot;latex&quot; title=&quot;e^0, e^{2 \pi i}&quot; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; is locally analytic (that is, if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; is defined at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z_0&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;z_0&quot; class=&quot;latex&quot; title=&quot;z_0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=U&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;U&quot; class=&quot;latex&quot; title=&quot;U&quot; /&gt; is an open neighbourhood of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z_0&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;z_0&quot; class=&quot;latex&quot; title=&quot;z_0&quot; /&gt; on which &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; is defined, then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; is analytic on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=U&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;U&quot; class=&quot;latex&quot; title=&quot;U&quot; /&gt;)&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; &lt;em&gt;is&lt;/em&gt; a lift, i.e. if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p%3A%5Cmathcal%7BS%7D+%5Crightarrow+%5Cmathbb%7BC%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;p:\mathcal{S} \rightarrow \mathbb{C}&quot; class=&quot;latex&quot; title=&quot;p:\mathcal{S} \rightarrow \mathbb{C}&quot; /&gt; denotes the usual projection, then for all &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z+%5Cin+p%5E%7B-1%7D%28D%29&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;z \in p^{-1}(D)&quot; class=&quot;latex&quot; title=&quot;z \in p^{-1}(D)&quot; /&gt; we have &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28z%29+%3D+%7B%7D_pF_q%28p%28z%29%29&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f(z) = {}_pF_q(p(z))&quot; class=&quot;latex&quot; title=&quot;f(z) = {}_pF_q(p(z))&quot; /&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such a function has, in particular, the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; is continuous along the ray &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r+e%5E%7Bi%5Cpi%7D%2C+r+%3E+0&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;r e^{i\pi}, r &amp;gt; 0&quot; class=&quot;latex&quot; title=&quot;r e^{i\pi}, r &amp;gt; 0&quot; /&gt;&lt;/li&gt;
&lt;li&gt;it is continuous on “circles” (spirals)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From this it is easy to prove that if in all slater expansions the hypergeometric functions have argument &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7Bi+%5Cpi%7Dz&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;e^{i \pi}z&quot; class=&quot;latex&quot; title=&quot;e^{i \pi}z&quot; /&gt;, then with the above lift the slater expansion holds for all polar &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;z&quot; class=&quot;latex&quot; title=&quot;z&quot; /&gt;.&lt;/p&gt;
&lt;h2&gt;Finding nice representations&lt;/h2&gt;
&lt;p&gt;My idea is to create new objects to represent above-defined polar lifts, a la “MySqrt(z)”. hyperexpand() will work exclusively with these, except that in the end it (optionally) calls “rewrite(‘elementary’)”. The object then attempts to determine a “nice” representation (where what that means is up to the object, of course). I now have to sit down and compute said representations, and come up with a good way to test them. Sounds like a final project.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/355/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/355/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/355/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/355/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/355/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/355/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/355/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/355/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/355/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/355/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/355/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/355/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/355/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/355/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;amp;blog=22546379&amp;amp;post=355&amp;amp;subd=nessgrh&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-06T19:32:42+00:00</dc:date>
	<dc:creator>nessgrh</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8510171342300140296.post-3492520740647959899">
	<title>Sean Vig: Moving beyond first coupling iteration</title>
	<link>http://seanvig.blogspot.com/2011/08/moving-beyond-first-coupling-iteration.html</link>
	<content:encoded>In the last week, one of the main things I did was to submit a pull request for the coupled spin machinery that I have been working on. This pull request can be seen &lt;a href=&quot;https://github.com/sympy/sympy/pull/524&quot;&gt;here&lt;/a&gt;. This implements the coupling and uncoupling operations for states and operators and how these states and operators interact for coupling of two spin states. This pull still has some kinks to work out and some details to iron out, but should be finished up soon.&lt;br /&gt;&lt;br /&gt;Moving beyond this pull, the rest of this week has been in working on modifying the coupling methods developed in this pull and making them work for an arbitrary number of spin spaces. The current idea will be to pass a tuple of j values which are to be coupled instead of passing j1 and j2 parameters. While this would work, it would be nice to be able to define how the terms are coupled, noting that the order of how the spaces are coupled matter in determining the coefficients and what will be diagonal in the basis of the coupled states. The current way I am working the coupling is to couple j1 and j2, then couple this to j3, etc. I have currently changed the all the methods to accept the tuple of j values, however, the coupling and uncoupling methods have not been changed to accept arbitrary numbers of spaces. Most of this week has been thinking and trying to determine a good way to implement this machinery that scales to arbitrary numbers of spaces. While it is not directly necessary for dealing with spin states, I will likely also implement Wigner-6j/9j/12j coefficients in cg.py, which will be very similar to the Wigner-3j symbols that were implemented with the Clebsch-Gordan coefficients.&lt;br /&gt;&lt;br /&gt;While I am starting to work on this final component of my project, it will be a close call as to whether or not it can get pushed in time to make it in before the end of the project, which will be in just 2 weeks. The initial coupling stuff should get in, but this will be a much closer call. That said, I will definitely see this last part of the project into master.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-3492520740647959899?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-06T00:00:17+00:00</dc:date>
	<dc:creator>Sean Vig</dc:creator>
</item>
<item rdf:about="http://nessgrh.wordpress.com/?p=351">
	<title>Tom Bachmann: Status Update—Week 11</title>
	<link>http://nessgrh.wordpress.com/2011/08/05/status-update%e2%80%94week-11/</link>
	<content:encoded>&lt;p&gt;The end of GSOC is rapidly approaching, so this was one further busy week. Here is what I did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fix some bugs in meijerint, uncovered by statistical integrals,&lt;/li&gt;
&lt;li&gt;Optimise meijerint and hyperexpand,&lt;/li&gt;
&lt;li&gt;Implement exponential integrals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before I go into details, let me stake out a final list of things I hope to do before the end of summer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fix a test failure in meijerint. (explained below)&lt;/li&gt;
&lt;li&gt;Think about branching again. In particular, investigate how we can come up with “nice” answers.&lt;/li&gt;
&lt;li&gt;Investigate why hyperexpand results are sometimes ridiculously complicated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s now turn to what I did. First Matthew reported some bugs in my integration code, mostly related to how real variables are converted into polar ones (that is, they were not, which is wrong). I took the opportunity to test lots of integrals that seemed to be important for statistics, e.g. &lt;a href=&quot;http://pastebin.com/raw.php?i=WRyYNrFr&quot;&gt;these&lt;/a&gt;, computing various moments of the normal, exponential and chi-squared distributions.&lt;/p&gt;
&lt;p&gt;Then I started to optimise my code. First I created a script (sympy/benchmark/bench_meijerint.py) which basically times all the individual integrals from the tests. This allowed me to quickly isolate biggest performance problems. &lt;a href=&quot;http://pastebin.com/raw.php?i=ZSQb4GfZ&quot;&gt;This&lt;/a&gt; is the output of the first run, and &lt;a href=&quot;http://pastebin.com/raw.php?i=XrDDQf8Y&quot;&gt;this&lt;/a&gt; is the output with my new optimisations. Let me go through the first few entries on both lists.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;LT((t-apos)**bpos*exp(-cpos*(t-apos))*Heaviside(t-apos), t, s)&lt;/pre&gt;
&lt;p&gt;This was my biggest worry, for two reasons. Firstly it seems fairly common—this is just a very basic laplace transform (though with many parameters). Second it is surprisingly hard—in order to do it, the algorithm has to expand the exponential, then bracket the two exponentials as G1, and the rest as G2. However, it turns out that a few tweaks allow us to recognise fairly quickly that the integral won’t be doable without expansion (because &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7Bc%2At+%2B+d%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;e^{c*t + d}&quot; class=&quot;latex&quot; title=&quot;e^{c*t + d}&quot; /&gt; is not in the tables), and then a few improvements to the heuristics make us try things in a reasonable order. Thus this laplace transform is comfortably down in the second list; from 4.8 to 0.5 seconds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;MT(bessely(a, sqrt(x))**2, x, s)&lt;/pre&gt;
&lt;p&gt;and similar mellin transforms involving bessel functions or logarithms are slow for three reasons: (1) Hyperexpand(), is fairly slow to realise that a certain expansion &lt;em&gt;cannot&lt;/em&gt; be done. This means that any “mis-step” the algorithm does is quite costly. (2) there tend to be confluent g-functions involved, for which we need series expansions (for computing residues), and these are slow. (3) Combsimp used to be slow. I improved combsimp, and I rewrote the residue function to use series expansions a bit more cleverly. I also improved hyperexpand a bit; the results are fairly noticable, but not as satisfying as for the laplace transform.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;E((x+y-1)**2)&lt;/pre&gt;
&lt;p&gt;This computes a certain statistical double integral in two ways, and it is not actually that slow. By my calculation the code winds up doing about 40 integrals (splitting integrals along the real line into two patrs, expanding the binomial, doing a double integral in two steps, and finally doing it all over again the other way round), putting the time for every single integral well into a sensible range.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I should mention that during this optimisations the path taken by meijerint was changed slightly, causing a test failure in test_meijerint which is actually fairly difficult to correct. So much for robust code…&lt;/p&gt;
&lt;p&gt;Finally I implemented exponential integrals. This was quite good fun; let’s just look at a few &lt;a href=&quot;http://pastebin.com/raw.php?i=1Lm7nmC4&quot;&gt;examples&lt;/a&gt;. A few things can be said here. The answers are sometimes messy; often expand() already yields a lot of cancellation. The noticable exception is the integral representation of the generalised exponential integral with two parameters, here more tricks are necessary (but I don’t really think there is any way to know in advance that expressing everything in terms of expint yields such a nice answer, short from recognising the integral). At one stage I’m using a polar variable, this is to allow &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Clog%28u%5E2%29&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\log(u^2)&quot; class=&quot;latex&quot; title=&quot;\log(u^2)&quot; /&gt; to expand (alternatively one could safely use force here). The laplace transforms are a nice example where answers come out much messier than they have to (the other exponential integrals are mostly as bad es Si, noticable exception being e1). Some of the definite integrals illustrate a similar problem.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/351/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/351/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/351/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/351/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/351/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/351/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/351/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/351/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/351/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/351/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/351/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/351/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/351/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/351/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;amp;blog=22546379&amp;amp;post=351&amp;amp;subd=nessgrh&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-05T22:08:31+00:00</dc:date>
	<dc:creator>nessgrh</dc:creator>
</item>
<item rdf:about="http://sympystats.wordpress.com/?p=237">
	<title>Matthew Rocklin: Week 11: Testing, cleaning</title>
	<link>http://sympystats.wordpress.com/2011/08/05/week-11-testing-cleaning/</link>
	<content:encoded>&lt;p&gt;I’m increasing testing coverage and fixing errors in my random variables branch.&lt;/p&gt;
&lt;p&gt;I’m not sure how to proceed with the matrix expressions ideas. On one hand I should wait until the community comes to a consensus about what SymPy Matrix Expressions should be (or even if they should be at all). On the other hand I don’t ever see this consensus happening. How do I spur on a decision here?&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/237/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/237/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/237/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/237/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/237/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/237/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/237/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/237/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/237/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/237/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/237/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/237/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/237/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/237/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=237&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-08-05T13:26:14+00:00</dc:date>
	<dc:creator>mrocklin</dc:creator>
</item>
<item rdf:about="http://f1728.wordpress.com/?p=216">
	<title>Jeremias Yehdegho: Week 11</title>
	<link>http://f1728.wordpress.com/2011/08/05/week-11/</link>
	<content:encoded>&lt;p&gt;This week I tried to write the faster FGLM I mentioned last week. This isn’t so easy because the only source that properly describes this algorithm are Jean-Charles Faugère’s &lt;a href=&quot;http://www-salsa.lip6.fr/~jcf/Teaching/index.html&quot;&gt;lecture notes&lt;/a&gt; (it is mentioned very vaguely in the original FGLM paper) but there are some errors in the &lt;code&gt;update&lt;/code&gt; function. The purpose of the function is to avoid determining whether &lt;img src=&quot;http://s0.wp.com/latex.php?latex=NF%28x_i+m%29&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;NF(x_i m)&quot; class=&quot;latex&quot; title=&quot;NF(x_i m)&quot; /&gt; is in the vectorspace spanned by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v_1%2C+%5Cldots%2C+v_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v_1, \ldots, v_s&quot; class=&quot;latex&quot; title=&quot;v_1, \ldots, v_s&quot; /&gt; by using &lt;code&gt;solve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This can be done more efficiently by having a matrix &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt;, which maps the old basis to the new basis. This matrix is constructed iteratively, such that before every &lt;code&gt;update&lt;/code&gt; call &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+v_i+%3D+e_i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P v_i = e_i&quot; class=&quot;latex&quot; title=&quot;P v_i = e_i&quot; /&gt; for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+%5Cldots%2C+s%5C%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i \in \{1, \ldots, s\}&quot; class=&quot;latex&quot; title=&quot;i \in \{1, \ldots, s\}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+v_%7Bs%2B1%7D+%3D+%5Clambda&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P v_{s+1} = \lambda&quot; class=&quot;latex&quot; title=&quot;P v_{s+1} = \lambda&quot; /&gt;, which has not the desired shape, and afterwards &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+v_i+%3D+e_i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P v_i = e_i&quot; class=&quot;latex&quot; title=&quot;P v_i = e_i&quot; /&gt; for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+%5Cldots%2C+s+%2B+1%5C%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i \in \{1, \ldots, s + 1\}&quot; class=&quot;latex&quot; title=&quot;i \in \{1, \ldots, s + 1\}&quot; /&gt;. So instead of having to use &lt;code&gt;solve&lt;/code&gt; (&lt;img src=&quot;http://s0.wp.com/latex.php?latex=O%28dim%5E3%29&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;O(dim^3)&quot; class=&quot;latex&quot; title=&quot;O(dim^3)&quot; /&gt;), matrix multiplication and changing some entries of a matrix would suffice (&lt;img src=&quot;http://s0.wp.com/latex.php?latex=O%28dim%5E2%29&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;O(dim^2)&quot; class=&quot;latex&quot; title=&quot;O(dim^2)&quot; /&gt;).&lt;/p&gt;
&lt;p&gt;Now I have the problem that there are some errors in the description of the algorithm (and I am too stupid to fix them… so far):&lt;/p&gt;
&lt;p&gt;First of all, it says &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Calpha+%3A%3D+%5Cfrac%7BP_%7Bj%2Ck%7D%7D%7BP_%7Bk%2Ck%7D%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\alpha := \frac{P_{j,k}}{P_{k,k}}&quot; class=&quot;latex&quot; title=&quot;\alpha := \frac{P_{j,k}}{P_{k,k}}&quot; /&gt;, which should be &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7BP_%7Bk%2C+j%7D%7D%7B%5Clambda_k%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{P_{k, j}}{\lambda_k}&quot; class=&quot;latex&quot; title=&quot;\frac{P_{k, j}}{\lambda_k}&quot; /&gt; because then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28P+v_%7Bs%2B1%7D%29_%7Bs%2B1%7D+%3D+1&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(P v_{s+1})_{s+1} = 1&quot; class=&quot;latex&quot; title=&quot;(P v_{s+1})_{s+1} = 1&quot; /&gt; as desired. Then, some more indices seem to have the wrong order, at least with the current code I can convert a few more systems correctly. Currently, all old &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v_i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v_i&quot; class=&quot;latex&quot; title=&quot;v_i&quot; /&gt; map to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e_i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;e_i&quot; class=&quot;latex&quot; title=&quot;e_i&quot; /&gt; but &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+v_%7Bs%2B1%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P v_{s+1}&quot; class=&quot;latex&quot; title=&quot;P v_{s+1}&quot; /&gt; has non-zero entries apart from the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28s%2B1%29&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(s+1)&quot; class=&quot;latex&quot; title=&quot;(s+1)&quot; /&gt;-th. I dunno.&lt;/p&gt;
&lt;p&gt;To give an example of the performance improvements for a small problem (for which the algorithm gives the correct result):&lt;/p&gt;
&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; F=[x**3+x+1, y**2+1, z - (x**2 + y)]
&amp;gt;&amp;gt;&amp;gt; G=groebner(F, x, y, z, order='grlex')
&amp;gt;&amp;gt;&amp;gt; %timeit fglm(G, &quot;lex&quot;, x,y,z, order='grlex')  # old
1 loops, best of 3: 822 ms per loop
&amp;gt;&amp;gt;&amp;gt; %timeit fglm(G, x,y,z, order='grlex')
10 loops, best of 3: 45.1 ms per loop
&lt;/pre&gt;
&lt;p&gt;This also due to using &lt;code&gt;sdp&lt;/code&gt;s everywhere, whereas the old code had to convert between several representations. &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/f1728.wordpress.com/216/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/f1728.wordpress.com/216/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/f1728.wordpress.com/216/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/f1728.wordpress.com/216/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/f1728.wordpress.com/216/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/f1728.wordpress.com/216/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/f1728.wordpress.com/216/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/f1728.wordpress.com/216/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/f1728.wordpress.com/216/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/f1728.wordpress.com/216/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/f1728.wordpress.com/216/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/f1728.wordpress.com/216/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/f1728.wordpress.com/216/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/f1728.wordpress.com/216/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;amp;blog=22515617&amp;amp;post=216&amp;amp;subd=f1728&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-08-05T13:03:21+00:00</dc:date>
	<dc:creator>f1728</dc:creator>
</item>
<item rdf:about="http://sherjilozair.wordpress.com/?p=80">
	<title>Sherjil Ozair: Sorry for the late blogpost</title>
	<link>http://sherjilozair.wordpress.com/2011/08/05/sorry-for-the-late-blogpost/</link>
	<content:encoded>&lt;p&gt;Hello everyone, sorry about the lack of activity. I had been on a vacation from 15th last month to 24th, and my college started on 25th. So I got busy with the new semester. I was still able to extract time to compile a pull request with all the final code I had written in my various experimental branches. You can take a look here. https://github.com/sympy/sympy/pull/525&lt;/p&gt;
&lt;p&gt;Part of why I couldn’t get things done quickly is that I couldn’t agree upon what interface of the classes to use, since it depends so much on how the community wants it to be done. Still I have put in an interface as to how I feel it should be. Only a very small subset of matrix functionalities have been kept inside the Matrix classes, the rest of them are in a separate file called *_tools.py&lt;/p&gt;
&lt;p&gt;But that’s just my inexperienced decision. Anyone with suggestions could go over to the diff and comment in appropriate places of what they think it should rather be. The algorithms are all working well. But things like imports, naming conventions are not consistent and well-formed as of now. So, the code is not very user-friendly as of now. I made a pull request so that everyone could look at my code, comment, review, etc.&lt;/p&gt;
&lt;p&gt;Since my college has started, I would not be able to devote much portion of my day time to sympy work, so I request the mentor group to allow me to take work slowly and in small chunks from now on.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sherjilozair.wordpress.com/80/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sherjilozair.wordpress.com/80/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sherjilozair.wordpress.com/80/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sherjilozair.wordpress.com/80/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sherjilozair.wordpress.com/80/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sherjilozair.wordpress.com/80/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sherjilozair.wordpress.com/80/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sherjilozair.wordpress.com/80/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sherjilozair.wordpress.com/80/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sherjilozair.wordpress.com/80/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sherjilozair.wordpress.com/80/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sherjilozair.wordpress.com/80/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sherjilozair.wordpress.com/80/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sherjilozair.wordpress.com/80/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sherjilozair.wordpress.com&amp;amp;blog=14711170&amp;amp;post=80&amp;amp;subd=sherjilozair&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-08-04T20:23:08+00:00</dc:date>
	<dc:creator>Sherjil Ozair</dc:creator>
</item>
<item rdf:about="http://lazovichsympy.wordpress.com/?p=83">
	<title>Tomo Lazovich: Incorporating Wavefunction and DifferentialOperator into representations</title>
	<link>http://lazovichsympy.wordpress.com/2011/07/31/incorporating-wavefunction-and-differentialoperator-into-representations/</link>
	<content:encoded>&lt;p&gt;This post is a bit late because I’ve been experiencing some computer troubles recently.&lt;/p&gt;
&lt;p&gt;Since my last post, the represent branch has been merged into sympy master! There are still some issues with representing continuous bases that need to be ironed out, so I have started a &lt;a href=&quot;https://github.com/lazovich/sympy/tree/represent2&quot; title=&quot;represent2&quot;&gt;represent2&lt;/a&gt; branch to deal with some of these changes.&lt;/p&gt;
&lt;p&gt;The first commits in the branch are some simple fixes to docstrings and cleanup of the interfaces of Wavefunction (Wf) and DifferentialOperator (DO). Of note are the addition of an _eval_expand to Wf and DO, so that we can do simplifications like expand(Wavefunction((x+y)**2, x, y)) == Wavefunction(x**2, x, y) + Wavefunction(y**2, x, y) + Wavefunction(2*x*y, x, y).&lt;/p&gt;
&lt;p&gt;The biggest tasks for represent2 are to incorporate the new Wf and DO classes into the internal represent logic of classes in quantum. Another big task is to simplify the logic of represent. In particular, rep_innerproduct and rep_expectation will become helper functions rather than being called from the main represent logic. This simplifies the main logic, but retains these methods to be called from the internal _represent methods. This is important because these functions know about proper indexing to form representations in these very standard forms, and this means we don’t have to reproduce that logic internally.&lt;/p&gt;
&lt;p&gt;Both of these tasks are proving to be quite tricky and time consuming. I hope to have them done in the next couple of days. If that is the case, I expect to be able to rapidly move on to implementing coordinate systems and finally getting some example textbook quantum systems up and running. With only a few weeks of GSoC left, I’ll have to work extra hard to make that happen. Modifying the represent logic is taking much longer than expected, but we’re dealing with very complicated logic here and we want to make sure its robust. I’m confident, though, that I can have a nice finished product by the end of GSoC.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/lazovichsympy.wordpress.com/83/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/lazovichsympy.wordpress.com/83/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/lazovichsympy.wordpress.com/83/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/lazovichsympy.wordpress.com/83/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/lazovichsympy.wordpress.com/83/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/lazovichsympy.wordpress.com/83/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/lazovichsympy.wordpress.com/83/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/lazovichsympy.wordpress.com/83/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/lazovichsympy.wordpress.com/83/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/lazovichsympy.wordpress.com/83/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/lazovichsympy.wordpress.com/83/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/lazovichsympy.wordpress.com/83/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/lazovichsympy.wordpress.com/83/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/lazovichsympy.wordpress.com/83/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;amp;blog=22774068&amp;amp;post=83&amp;amp;subd=lazovichsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-07-31T21:37:05+00:00</dc:date>
	<dc:creator>lazovich</dc:creator>
</item>
<item rdf:about="http://saptman.wordpress.com/?p=29">
	<title>Saptarshi Mandal: Update</title>
	<link>http://saptman.wordpress.com/2011/07/31/update-2/</link>
	<content:encoded>&lt;p&gt;This week I implemented generational routines for Fixed density Lyndon words, necklaces and Debruijn cycles. Its still not completely tested so caveat emptor! You can check it out in my iterables branch. Apart from this I got the Permutations branch merged in this week. This was a long standing pull request and will allow folks to do all sorts of stuff that combinatorica allows for Permutations. Currently some graph related stuff is missing but that will be taken care of once I clean up my NetworkX branch. I still need to clean up the Partitions and Subsets pulls which will add another large chunk to the combinatorics module.&lt;/p&gt;
&lt;p&gt;I will probably spend this week cleaning up older pull requests rather than creating newer ones. Even so, those interested can keep track of my permutation_groups branch where most of my work related to that will go.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/saptman.wordpress.com/29/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/saptman.wordpress.com/29/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/saptman.wordpress.com/29/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/saptman.wordpress.com/29/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/saptman.wordpress.com/29/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/saptman.wordpress.com/29/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/saptman.wordpress.com/29/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/saptman.wordpress.com/29/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/saptman.wordpress.com/29/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/saptman.wordpress.com/29/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/saptman.wordpress.com/29/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/saptman.wordpress.com/29/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/saptman.wordpress.com/29/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/saptman.wordpress.com/29/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=saptman.wordpress.com&amp;amp;blog=23040289&amp;amp;post=29&amp;amp;subd=saptman&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-31T01:45:27+00:00</dc:date>
	<dc:creator>saptman</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8510171342300140296.post-8561852009544025205">
	<title>Sean Vig: Finishing current coupled spin work</title>
	<link>http://seanvig.blogspot.com/2011/07/finishing-current-coupled-spin-work.html</link>
	<content:encoded>This last week I made some good headway towards finishing up the coupled spin state work for the coupling of two spin spaces. The decision was made that spin states should not contain any information as to their coupling, which greatly simplifies not only the code, but also the allowable cases when it comes doing things such as applying operators, rewriting, etc. As such, I am very close to finalizing this stage in the coupled spin work. I will try to fix up the implementation for some symbolic cases that should be doable under the current implementation, but all the current code has tests implemented and docstrings in place, so a pull request will be coming up shortly.&lt;br /&gt;&lt;br /&gt;With this stage finishing, I will be moving on to generalizing the current implementation to coupling between more than two spin spaces. I will first need to expand cg.py to include Wigner-6j/9j/etc symbols to describe the coupling between these additional spaces. The logic for spin states will need to be reworked as well, not only to implement these new terms for coupling additional spin spaces, but most of the logic will need to be reworked to allow for an arbitrary number of coupled spin spaces.&lt;br /&gt;&lt;br /&gt;While the change to get rid of what would be considered a coupled spin state (that is a state where the state has defined the coupled spaces) does simplify the current implementation, it does limit what can be done. For example, an uncoupled operator could not be applied to a coupled state, as the coupled states would need to be uncoupled, which is only possible if the j values of the coupled states is known. However it was suggested by Brian that a new class be created to deal with coupled states in this sense. Time permitting, I will begin to look at the possibility of implementing such a feature into the current spin framework.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-8561852009544025205?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-30T08:45:29+00:00</dc:date>
	<dc:creator>Sean Vig</dc:creator>
</item>
<item rdf:about="http://gilbertgede.wordpress.com/?p=76">
	<title>Gilbert Gede: GSoC, Week 10</title>
	<link>http://gilbertgede.wordpress.com/2011/07/30/gsoc-week-10/</link>
	<content:encoded>&lt;p&gt;Week 10….?&lt;/p&gt;
&lt;p&gt;This week, there really isn’t that much to report. Week 10 was supposed to be finishing up the pretty and LaTeX printer, and I have done most of that. Tests and documentation need to be written for both though; I think I’ve learned that things haven’t really been coded successfully until you’ve done those two steps.&lt;/p&gt;
&lt;p&gt;I also got some more work done with the documentation. It’s a little further behind than I had hoped for, but it’s coming along. I definitely need to redo the images I have throughout it so far; they are just scans of sketches I have done, and are of low-quality. There also needs to be a lot more talk about linearization in the documentation. That in fact leads to the last two big coding things.&lt;/p&gt;
&lt;p&gt;I think the last two major things are: more work in linearization and code output for numeric integration. The linearization routine still needs some work; mainly in dealing with situations where the qdot’s are defined with coefficients that depend on the q’s. The question of what to do with user defined dynamic symbols (such as forces or specified position) is also still up in the air. Forces will probably be easy to linearize (or really, take the partial with respect to), but with a specified position, it becomes more complicated; during the process of forming the equations of motion, most likely the derivative of that specified position will be brought into the expressions. I haven’t really decided what to do in this situation, as clearly some distance (say, l), and its derivative (say, l’) are not independent. I’m not sure if adding the position as a system state is the right thing to do here. I think I’ll play around with some simple examples to see what makes the most sense, and consult some other people. The part about code output also relates here, in that I need to decide how to deal with this situation (a value and its derivative). I can imagine just putting both as empty for the user to fill in, and telling them to do it the right way. Hopefully I’ll have this figured out more by next week. I also do need to write the code output stuff. I don’t think it will be that hard, I just have to make the decisions about the formats of of the output. The size of the expressions generated can be problematic though, taking tens of minutes to print out. I’m also not sure how to deal with this situation. Hopefully I can again find out more information on this issue by next weekend.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/gilbertgede.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/gilbertgede.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/gilbertgede.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/gilbertgede.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/gilbertgede.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/gilbertgede.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/gilbertgede.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/gilbertgede.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/gilbertgede.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/gilbertgede.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/gilbertgede.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/gilbertgede.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;amp;blog=22677911&amp;amp;post=76&amp;amp;subd=gilbertgede&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-30T06:00:01+00:00</dc:date>
	<dc:creator>gilbertgede</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1016">
	<title>Aaron Meurer: SymPy 0.7.1 Released</title>
	<link>http://asmeurersympy.wordpress.com/2011/07/30/sympy-0-7-1-released/</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Cross posted on the &lt;a href=&quot;http://sympy.blogspot.com/2011/07/sympy-071-released.html&quot;&gt;official SymPy Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SymPy 0.7.1 has been released on July 29, 2011. It is available at&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sympy.org&quot;&gt;http://sympy.org&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The source distribution can be downloaded from:&lt;br /&gt;
&lt;a href=&quot;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz&quot;&gt;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can get the Windows installer here:&lt;br /&gt;
&lt;a href=&quot;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe&quot;&gt;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And the html documentation here:&lt;br /&gt;
&lt;a href=&quot;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip&quot;&gt;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;About SymPy&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Release notes&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Major changes&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;- Python 2.4 is no longer supported.  SymPy will not work at all in&lt;br /&gt;
  Python 2.4.  If you still need to use SymPy under Python 2.4 for some&lt;br /&gt;
  reason, you will need to use SymPy 0.7.0 or earlier.&lt;/p&gt;
&lt;p&gt;- The Pyglet plotting library is now an (optional) external dependency.&lt;br /&gt;
  Previously, we shipped a version of Pyglet with SymPy, but this was&lt;br /&gt;
  old and buggy.  The plan is to eventually make the plotting in SymPy&lt;br /&gt;
  much more modular, so that it supports many backends, but this has not&lt;br /&gt;
  been done yet.  For now, still only Pyglet is directly supported.&lt;br /&gt;
  Note that Pyglet is only an optional dependency and is only needed for&lt;br /&gt;
  plotting. The rest of SymPy can still be used without any dependencies&lt;br /&gt;
  (except for Python).&lt;/p&gt;
&lt;p&gt;- isympy now works with the new IPython 0.11.&lt;/p&gt;
&lt;p&gt;- mpmath has been updated to 0.17.  See the corresponding mpmath release&lt;br /&gt;
  notes at http://mpmath.googlecode.com/svn/trunk/CHANGES.&lt;/p&gt;
&lt;p&gt;- Added a Subs object for representing unevaluated substitutions.  This&lt;br /&gt;
  finally lets us represent derivatives evaluated at a point, i.e.,&lt;br /&gt;
  `diff(f(x), x).subs(x, 0)` returns `Subs(Derivative(f(_x), _x), (_x,), (0,))`.&lt;br /&gt;
  This also means that SymPy can now correctly compute the chain rule&lt;br /&gt;
  when this functionality is required, such as with `f(g(x)).diff(x)`.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Hypergeometric functions/Meijer G-Functions&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;- Added classes hyper() and meijerg() to represent Hypergeometric and Meijer G-functions, respectively. They support numerical evaluation (using mpmath) and symbolic differentiation (not with respect to the parameters).&lt;/p&gt;
&lt;p&gt;- Added an algorithm for rewriting hypergeometric and meijer g-functions in terms of more familiar, named special functions. It is accessible via the function hyperexpand(), or also via expand_func(). This algorithm recognises many elementary functions, and also complete and incomplete gamma functions, bessel functions, and error functions. It can easily be extended to handle more classes of special functions.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Sets&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;- Added FiniteSet class to mimic python set behavior while also interacting with existing Intervals and Unions&lt;/p&gt;
&lt;p&gt;- FiniteSets and Intervals interact so that, for example `Interval(0, 10) – FiniteSet(0, 5)` produces `(0, 5) U (5, 10]`&lt;/p&gt;
&lt;p&gt;- FiniteSets also handle non-numerical objects so the following is possible `{1, 2, ‘one’, ‘two’, {a, b}}`&lt;/p&gt;
&lt;p&gt;- Added ProductSet to handle Cartesian products of sets&lt;/p&gt;
&lt;p&gt;- Create using the `*` operator, i.e. `twodice = FiniteSet(1, 2, 3, 4, 5, 6) * FiniteSet(1, 2, 3, 4, 5, 6) or square = Interval(0, 1) * Interval(0, 1)`&lt;/p&gt;
&lt;p&gt;- pow operator also works as expected: `R3 = Interval(-oo, oo)**3 ; (3, -5, 0) in R3 == True`&lt;/p&gt;
&lt;p&gt;- Subtraction, union, measurement all work taking complex intersections into account. &lt;/p&gt;
&lt;p&gt;- Added as_relational method to sets, producing boolean statements using And, Or, Eq, Lt, Gt, etc…&lt;/p&gt;
&lt;p&gt;- Changed reduce_poly_inequalities to return unions of sets rather than lists of sets&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Iterables&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;- Added generating routines for integer partitions and binary partitions. The routine for integer partitions takes 3 arguments, the number itself, the maximum possible element allowed in the partitions generated and the maximum possible number of elements that will be in the partition. Binary partitions are characterized by containing only powers of two.&lt;/p&gt;
&lt;p&gt;- Added generating routine for multi-set partitions. Given a multiset, the algorithm implemented will generate all possible partitions of that multi-set.&lt;/p&gt;
&lt;p&gt;- Added generating routines for bell permutations, derangements, and involutions. A bell permutation is one in which the cycles that compose it consist of integers in a decreasing order. A derangement is a permutation such that the ith element is not at the ith position. An involution is a permutation that when multiplied by itself gives the identity permutation.&lt;/p&gt;
&lt;p&gt;- Added generating routine for unrestricted necklaces. An unrestricted necklace is an a-ary string of n characters, each of a possible types. These have been characterized by the parameters n and k in the routine.&lt;/p&gt;
&lt;p&gt;- Added generating routine for oriented forests. This is an implementation of algorithm S in TAOCP Vol 4A.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;xyz Spin bases&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;- The represent, rewrite and InnerProduct logic has been improved to work between any two spin bases. This was done by utilizing the Wigner-D matrix, implemented in the WignerD class, in defining the changes between the various bases. Representing a state, i.e. `represent(JzKet(1,0), basis=Jx)`, can be used to give the vector representation of any get in any of the x/y/z bases for numerical values of j and m in the spin eigenstate. Similarly, rewriting states into different bases, i.e. `JzKet(1,0).rewrite(‘Jx’)`, will write the states as a linear combination of elements of the given basis. Because this relies on the represent function, this only works for numerical j and m values. The inner product of two eigenstates in different bases can be evaluated, i.e. `InnerProduct(JzKet(1,0),JxKet(1,1))`. When two different bases are used, one state is rewritten into the other basis, so this requires numerical values of j and m, but innerproducts of states in the same basis can still be done symbolically.&lt;/p&gt;
&lt;p&gt;- The `Rotation.D` and `Rotation.d` methods, representing the Wigner-D function and the Wigner small-d function, return an instance of the WignerD class, which can be evaluated with the `doit()` method to give the corresponding matrix element of the Wigner-D matrix.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Other changes&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;- We now use MathJax in our docs. MathJax renders LaTeX math entierly in&lt;br /&gt;
  the browser using Javascript.  This means that the math is much more&lt;br /&gt;
  readable than the previous png math, which uses images.  MathJax is&lt;br /&gt;
  only supported on modern browsers, so LaTeX math in the docs may not&lt;br /&gt;
  work on older browsers.&lt;/p&gt;
&lt;p&gt;- nroots() now lets you set the precision of computations&lt;/p&gt;
&lt;p&gt;- Added support for gmpy and mpmath’s types to sympify()&lt;/p&gt;
&lt;p&gt;- Fix some bugs with lambdify()&lt;/p&gt;
&lt;p&gt;- Fix a bug with as_independent and non-commutative symbols.&lt;/p&gt;
&lt;p&gt;- Fix a bug with collect (issue 2516)&lt;/p&gt;
&lt;p&gt;- Many fixes relating to porting SymPy to Python 3.  Thanks to our GSoC&lt;br /&gt;
  student Vladimir Perić, this task is almost completed.&lt;/p&gt;
&lt;p&gt;- Some people were retroactively added to the AUTHORS file.&lt;/p&gt;
&lt;p&gt;- Added a solver for a special case of the Riccati equation in the ODE&lt;br /&gt;
  module.&lt;/p&gt;
&lt;p&gt;- Iterated derivatives are pretty printed in a concise way.&lt;/p&gt;
&lt;p&gt;- Fix a bug with integrating functions with multiple DiracDeltas.&lt;/p&gt;
&lt;p&gt;- Add support for Matrix.norm() that works for Matrices (not just vectors).&lt;/p&gt;
&lt;p&gt;- Improvements to the Groebner bases algorithm.&lt;/p&gt;
&lt;p&gt;- Plot.saveimage now supports a StringIO outfile&lt;/p&gt;
&lt;p&gt;- Expr.as_ordered_terms now supports non lex orderings.&lt;/p&gt;
&lt;p&gt;- diff now canonicalizes the order of differentiation symbols.  This is&lt;br /&gt;
  so it can simplify expressions like `f(x, y).diff(x, y) – f(x,&lt;br /&gt;
  y).diff(y, x)`.  If you want to create a Derivative object without&lt;br /&gt;
  sorting the args, you should create it explicitly with `Derivative`,&lt;br /&gt;
  so that you will get `Derivative(f(x, y), x, y) != Derivative(f(x, y), y, x)`.&lt;br /&gt;
  Note that internally, derivatives that can be computed are always&lt;br /&gt;
  computed in the order that they are given in.&lt;/p&gt;
&lt;p&gt;- Added functions `is_sequence()` and `iterable()` for determining if&lt;br /&gt;
  something is an ordered iterable or normal iterable, respectively.&lt;/p&gt;
&lt;p&gt;- Enabled an option in Sphinx that adds a `source` link next to each function, which links to a copy of the source code for that function.&lt;/p&gt;
&lt;p&gt;In addition to the more noticeable changes listed above, there have been numerous other smaller additions, improvements and bug fixes in the ~300 commits in this release. See the git log for a full list of all changes.  The command `git log sympy-0.7.0..sympy-0.7.1` will show all commits made between this release and the last. You can also see the issues closed since the last release [here](http://code.google.com/p/sympy/issues/list?can=1&amp;amp;q=closed-after%3A2010%2F6%2F13+closed-before%3A2011%2F7%2F30&amp;amp;sort=-closed&amp;amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary+Stars+Closed&amp;amp;cells=tiles).&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Authors&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The following people contributed at least one patch to this release (names are given in alphabetical order by last name).  A total of 26 people contributed to this release.  People with a * by their names contributed a patch for the first time for this release.  Five people contributed for the first time for this release.  &lt;/p&gt;
&lt;p&gt;Thanks to everyone who contributed to this release!&lt;/p&gt;
&lt;p&gt;* Tom Bachmann&lt;br /&gt;
* Ondřej Čertík&lt;br /&gt;
* Renato Coutinho&lt;br /&gt;
* Bill Flynn&lt;br /&gt;
* Bradley Froehle*&lt;br /&gt;
* Gilbert Gede&lt;br /&gt;
* Brian Granger&lt;br /&gt;
* Emma Hogan*&lt;br /&gt;
* Yuri Karadzhov&lt;br /&gt;
* Stefan Krastanov*&lt;br /&gt;
* Ronan Lamy&lt;br /&gt;
* Tomo Lazovich&lt;br /&gt;
* Sam Magura*&lt;br /&gt;
* Saptarshi Mandal&lt;br /&gt;
* Aaron Meurer&lt;br /&gt;
* Sherjil Ozair&lt;br /&gt;
* Mateusz Paprocki&lt;br /&gt;
* Vladimir Perić&lt;br /&gt;
* Mario Pernici&lt;br /&gt;
* Nicolas Pourcelot&lt;br /&gt;
* Min Ragan-Kelley*&lt;br /&gt;
* Matthew Rocklin&lt;br /&gt;
* Chris Smith&lt;br /&gt;
* Vinzent Steinberg&lt;br /&gt;
* Sean Vig&lt;br /&gt;
* Thomas Wiecki&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1016/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1016/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1016/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1016/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1016/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1016/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1016/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1016/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1016/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1016/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1016/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1016/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1016/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1016/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1016&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-07-30T05:19:14+00:00</dc:date>
	<dc:creator>asmeurer</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-2520472460430880330.post-6591106898156468358">
	<title>Official SymPy blog: SymPy 0.7.1 Released</title>
	<link>http://sympy.blogspot.com/2011/07/sympy-071-released.html</link>
	<content:encoded>SymPy 0.7.1 has been released on July 29, 2011. It is available at&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://sympy.org&amp;lt;br /&amp;gt;&quot;&gt;http://sympy.org&lt;br /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The source distribution can be downloaded from:&lt;br /&gt;&lt;a href=&quot;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz&quot;&gt;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz&lt;br /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;You can get the Windows installer here:&lt;br /&gt;&lt;a href=&quot;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe&amp;lt;br /&amp;gt;&quot;&gt;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe&lt;br /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;And the html documentation here:&lt;br /&gt;&lt;a href=&quot;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip&amp;lt;br /&amp;gt;&quot;&gt;http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip&lt;br /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;About SymPy&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Release notes&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Major changes&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;- Python 2.4 is no longer supported.  SymPy will not work at all in&lt;br /&gt;  Python 2.4.  If you still need to use SymPy under Python 2.4 for some&lt;br /&gt;  reason, you will need to use SymPy 0.7.0 or earlier.&lt;br /&gt;&lt;br /&gt;- The Pyglet plotting library is now an (optional) external dependency. &lt;br /&gt;  Previously, we shipped a version of Pyglet with SymPy, but this was&lt;br /&gt;  old and buggy.  The plan is to eventually make the plotting in SymPy&lt;br /&gt;  much more modular, so that it supports many backends, but this has not&lt;br /&gt;  been done yet.  For now, still only Pyglet is directly supported. &lt;br /&gt;  Note that Pyglet is only an optional dependency and is only needed for&lt;br /&gt;  plotting. The rest of SymPy can still be used without any dependencies&lt;br /&gt;  (except for Python).&lt;br /&gt;&lt;br /&gt;- isympy now works with the new IPython 0.11.&lt;br /&gt;&lt;br /&gt;- mpmath has been updated to 0.17.  See the corresponding mpmath release&lt;br /&gt;  notes at http://mpmath.googlecode.com/svn/trunk/CHANGES.&lt;br /&gt;&lt;br /&gt;- Added a Subs object for representing unevaluated substitutions.  This&lt;br /&gt;  finally lets us represent derivatives evaluated at a point, i.e.,&lt;br /&gt;  `diff(f(x), x).subs(x, 0)` returns `Subs(Derivative(f(_x), _x), (_x,), (0,))`.&lt;br /&gt;  This also means that SymPy can now correctly compute the chain rule&lt;br /&gt;  when this functionality is required, such as with `f(g(x)).diff(x)`.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Hypergeometric functions/Meijer G-Functions&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;- Added classes hyper() and meijerg() to represent Hypergeometric and Meijer G-functions, respectively. They support numerical evaluation (using mpmath) and symbolic differentiation (not with respect to the parameters).&lt;br /&gt;&lt;br /&gt;- Added an algorithm for rewriting hypergeometric and meijer g-functions in terms of more familiar, named special functions. It is accessible via the function hyperexpand(), or also via expand_func(). This algorithm recognises many elementary functions, and also complete and incomplete gamma functions, bessel functions, and error functions. It can easily be extended to handle more classes of special functions.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Sets&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;- Added FiniteSet class to mimic python set behavior while also interacting with existing Intervals and Unions&lt;br /&gt;&lt;br /&gt;- FiniteSets and Intervals interact so that, for example `Interval(0, 10) - FiniteSet(0, 5)` produces `(0, 5) U (5, 10]`&lt;br /&gt;&lt;br /&gt;- FiniteSets also handle non-numerical objects so the following is possible `{1, 2, 'one', 'two', {a, b}}`&lt;br /&gt;&lt;br /&gt;- Added ProductSet to handle Cartesian products of sets&lt;br /&gt;&lt;br /&gt;- Create using the `*` operator, i.e. `twodice = FiniteSet(1, 2, 3, 4, 5, 6) * FiniteSet(1, 2, 3, 4, 5, 6) or square = Interval(0, 1) * Interval(0, 1)`&lt;br /&gt;&lt;br /&gt;- pow operator also works as expected: `R3 = Interval(-oo, oo)**3 ; (3, -5, 0) in R3 == True`&lt;br /&gt;&lt;br /&gt;- Subtraction, union, measurement all work taking complex intersections into account. &lt;br /&gt;&lt;br /&gt;- Added as_relational method to sets, producing boolean statements using And, Or, Eq, Lt, Gt, etc...&lt;br /&gt;&lt;br /&gt;- Changed reduce_poly_inequalities to return unions of sets rather than lists of sets&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Iterables&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;- Added generating routines for integer partitions and binary partitions. The routine for integer partitions takes 3 arguments, the number itself, the maximum possible element allowed in the partitions generated and the maximum possible number of elements that will be in the partition. Binary partitions are characterized by containing only powers of two.&lt;br /&gt;&lt;br /&gt;- Added generating routine for multi-set partitions. Given a multiset, the algorithm implemented will generate all possible partitions of that multi-set.&lt;br /&gt;&lt;br /&gt;- Added generating routines for bell permutations, derangements, and involutions. A bell permutation is one in which the cycles that compose it consist of integers in a decreasing order. A derangement is a permutation such that the ith element is not at the ith position. An involution is a permutation that when multiplied by itself gives the identity permutation.&lt;br /&gt;&lt;br /&gt;- Added generating routine for unrestricted necklaces. An unrestricted necklace is an a-ary string of n characters, each of a possible types. These have been characterized by the parameters n and k in the routine.&lt;br /&gt;&lt;br /&gt;- Added generating routine for oriented forests. This is an implementation of algorithm S in TAOCP Vol 4A.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;xyz Spin bases&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;- The represent, rewrite and InnerProduct logic has been improved to work between any two spin bases. This was done by utilizing the Wigner-D matrix, implemented in the WignerD class, in defining the changes between the various bases. Representing a state, i.e. `represent(JzKet(1,0), basis=Jx)`, can be used to give the vector representation of any get in any of the x/y/z bases for numerical values of j and m in the spin eigenstate. Similarly, rewriting states into different bases, i.e. `JzKet(1,0).rewrite('Jx')`, will write the states as a linear combination of elements of the given basis. Because this relies on the represent function, this only works for numerical j and m values. The inner product of two eigenstates in different bases can be evaluated, i.e. `InnerProduct(JzKet(1,0),JxKet(1,1))`. When two different bases are used, one state is rewritten into the other basis, so this requires numerical values of j and m, but innerproducts of states in the same basis can still be done symbolically.&lt;br /&gt;&lt;br /&gt;- The `Rotation.D` and `Rotation.d` methods, representing the Wigner-D function and the Wigner small-d function, return an instance of the WignerD class, which can be evaluated with the `doit()` method to give the corresponding matrix element of the Wigner-D matrix.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Other changes&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;- We now use MathJax in our docs. MathJax renders LaTeX math entierly in&lt;br /&gt;  the browser using Javascript.  This means that the math is much more&lt;br /&gt;  readable than the previous png math, which uses images.  MathJax is&lt;br /&gt;  only supported on modern browsers, so LaTeX math in the docs may not&lt;br /&gt;  work on older browsers.&lt;br /&gt;&lt;br /&gt;- nroots() now lets you set the precision of computations&lt;br /&gt;&lt;br /&gt;- Added support for gmpy and mpmath's types to sympify()&lt;br /&gt;&lt;br /&gt;- Fix some bugs with lambdify()&lt;br /&gt;&lt;br /&gt;- Fix a bug with as_independent and non-commutative symbols.&lt;br /&gt;&lt;br /&gt;- Fix a bug with collect (issue 2516)&lt;br /&gt;&lt;br /&gt;- Many fixes relating to porting SymPy to Python 3.  Thanks to our GSoC&lt;br /&gt;  student Vladimir Perić, this task is almost completed.&lt;br /&gt;&lt;br /&gt;- Some people were retroactively added to the AUTHORS file.&lt;br /&gt;&lt;br /&gt;- Added a solver for a special case of the Riccati equation in the ODE&lt;br /&gt;  module.&lt;br /&gt;&lt;br /&gt;- Iterated derivatives are pretty printed in a concise way.&lt;br /&gt;&lt;br /&gt;- Fix a bug with integrating functions with multiple DiracDeltas.&lt;br /&gt;&lt;br /&gt;- Add support for Matrix.norm() that works for Matrices (not just vectors).&lt;br /&gt;&lt;br /&gt;- Improvements to the Groebner bases algorithm.&lt;br /&gt;&lt;br /&gt;- Plot.saveimage now supports a StringIO outfile&lt;br /&gt;&lt;br /&gt;- Expr.as_ordered_terms now supports non lex orderings.&lt;br /&gt;&lt;br /&gt;- diff now canonicalizes the order of differentiation symbols.  This is&lt;br /&gt;  so it can simplify expressions like `f(x, y).diff(x, y) - f(x,&lt;br /&gt;  y).diff(y, x)`.  If you want to create a Derivative object without&lt;br /&gt;  sorting the args, you should create it explicitly with `Derivative`,&lt;br /&gt;  so that you will get `Derivative(f(x, y), x, y) != Derivative(f(x, y), y, x)`.&lt;br /&gt;  Note that internally, derivatives that can be computed are always&lt;br /&gt;  computed in the order that they are given in.&lt;br /&gt;&lt;br /&gt;- Added functions `is_sequence()` and `iterable()` for determining if&lt;br /&gt;  something is an ordered iterable or normal iterable, respectively.&lt;br /&gt;&lt;br /&gt;- Enabled an option in Sphinx that adds a `source` link next to each function, which links to a copy of the source code for that function.&lt;br /&gt;&lt;br /&gt;In addition to the more noticeable changes listed above, there have been numerous other smaller additions, improvements and bug fixes in the ~300 commits in this release. See the git log for a full list of all changes.  The command `git log sympy-0.7.0..sympy-0.7.1` will show all commits made between this release and the last. You can also see the issues closed since the last release [here](http://code.google.com/p/sympy/issues/list?can=1&amp;amp;q=closed-after%3A2010%2F6%2F13+closed-before%3A2011%2F7%2F30&amp;amp;sort=-closed&amp;amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary+Stars+Closed&amp;amp;cells=tiles).&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Authors&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The following people contributed at least one patch to this release (names are given in alphabetical order by last name).  A total of 26 people contributed to this release.  People with a * by their names contributed a patch for the first time for this release.  Five people contributed for the first time for this release.  &lt;br /&gt;&lt;br /&gt;Thanks to everyone who contributed to this release!&lt;br /&gt;&lt;br /&gt;* Tom Bachmann&lt;br /&gt;* Ondřej Čertík&lt;br /&gt;* Renato Coutinho&lt;br /&gt;* Bill Flynn&lt;br /&gt;* Bradley Froehle*&lt;br /&gt;* Gilbert Gede&lt;br /&gt;* Brian Granger&lt;br /&gt;* Emma Hogan*&lt;br /&gt;* Yuri Karadzhov&lt;br /&gt;* Stefan Krastanov*&lt;br /&gt;* Ronan Lamy&lt;br /&gt;* Tomo Lazovich&lt;br /&gt;* Sam Magura*&lt;br /&gt;* Saptarshi Mandal&lt;br /&gt;* Aaron Meurer&lt;br /&gt;* Sherjil Ozair&lt;br /&gt;* Mateusz Paprocki&lt;br /&gt;* Vladimir Perić&lt;br /&gt;* Mario Pernici&lt;br /&gt;* Nicolas Pourcelot&lt;br /&gt;* Min Ragan-Kelley*&lt;br /&gt;* Matthew Rocklin&lt;br /&gt;* Chris Smith&lt;br /&gt;* Vinzent Steinberg&lt;br /&gt;* Sean Vig&lt;br /&gt;* Thomas Wiecki&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/2520472460430880330-6591106898156468358?l=sympy.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-30T05:16:27+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://sympystats.wordpress.com/?p=235">
	<title>Matthew Rocklin: Week 10 for Random Variables</title>
	<link>http://sympystats.wordpress.com/2011/07/29/week-10-for-random-variables/</link>
	<content:encoded>&lt;p&gt;I’ve been neglecting my GSoC project this week. This is what’s on the burner though:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write up a blogpost on my implementation of Matrix Expressions. What they can and can’t do. I’d like to generate discussion on this topic.&lt;/li&gt;
&lt;li&gt;Test my code against Tom’s integration code. This has been happening over the last 24 hours actually. It’s cool to see lots of new things work and work well – I feel like I’m driving a sports car. I think that this cross-branch testing has been helpful to locate bugs in both of our codebases.&lt;/li&gt;
&lt;li&gt;After I check what will and won’t work with Tom’s code I need to fill out tests and polish documentation for my main Discrete and Continuous RV branch. It’d be nice to have it presentable to the community for review.&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;line-height: 24px;&quot; class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/235/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/235/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/235/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/235/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/235/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/235/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/235/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/235/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/235/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/235/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/235/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/235/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/235/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/235/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=235&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-07-30T02:03:33+00:00</dc:date>
	<dc:creator>mrocklin</dc:creator>
</item>
<item rdf:about="http://f1728.wordpress.com/?p=200">
	<title>Jeremias Yehdegho: Week 10</title>
	<link>http://f1728.wordpress.com/2011/07/29/week-10/</link>
	<content:encoded>&lt;p&gt;FGLM and rational simplification modulo a prime ideal work now, finally.&lt;/p&gt;
&lt;p&gt;The rational simplification modulo prime ideal algorithm, given a prime ideal &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28G%29+%3D+P+%5Ctriangleleft+K%5BX_1%2C+%5Cldots%2C+X_n%5D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(G) = P \triangleleft K[X_1, \ldots, X_n]&quot; class=&quot;latex&quot; title=&quot;(G) = P \triangleleft K[X_1, \ldots, X_n]&quot; /&gt;, where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; is a Gröbner basis of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt;, and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba%7D%7Bb%7D+%5Cin+K%5BX_1%2C+%5Cldots%2C+X_n%5D_P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{a}{b} \in K[X_1, \ldots, X_n]_P&quot; class=&quot;latex&quot; title=&quot;\frac{a}{b} \in K[X_1, \ldots, X_n]_P&quot; /&gt; finds &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bc%7D%7Bd%7D+%5Cin+K%5BX_1%2C+%5Cldots%2C+X_n%5D_P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{c}{d} \in K[X_1, \ldots, X_n]_P&quot; class=&quot;latex&quot; title=&quot;\frac{c}{d} \in K[X_1, \ldots, X_n]_P&quot; /&gt;, such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdeg%28c%29+%2B+%5Cdeg%28d%29&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\deg(c) + \deg(d)&quot; class=&quot;latex&quot; title=&quot;\deg(c) + \deg(d)&quot; /&gt; is minimal and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba%7D%7Bb%7D+%5Cequiv+%5Cfrac%7Bc%7D%7Bd%7D+%5Cbmod%7BP_P%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{a}{b} \equiv \frac{c}{d} \bmod{P_P}&quot; class=&quot;latex&quot; title=&quot;\frac{a}{b} \equiv \frac{c}{d} \bmod{P_P}&quot; /&gt;. To find such &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c%2C+d&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c, d&quot; class=&quot;latex&quot; title=&quot;c, d&quot; /&gt;, the algorithm looks takes polynomials &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c+%3D+%5Csum_i+c_i+m_i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c = \sum_i c_i m_i&quot; class=&quot;latex&quot; title=&quot;c = \sum_i c_i m_i&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=d+%3D+%5Csum_j+d_j+m_j&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;d = \sum_j d_j m_j&quot; class=&quot;latex&quot; title=&quot;d = \sum_j d_j m_j&quot; /&gt;, where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m_i%2C+m_j&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;m_i, m_j&quot; class=&quot;latex&quot; title=&quot;m_i, m_j&quot; /&gt; are the monomials with degree less than the degrees of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a&quot; class=&quot;latex&quot; title=&quot;a&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;b&quot; class=&quot;latex&quot; title=&quot;b&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c_i%2C+d_j&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c_i, d_j&quot; class=&quot;latex&quot; title=&quot;c_i, d_j&quot; /&gt; are indeterminates. Looking at the coefficients of the reduction of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+d+-+b+c&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a d - b c&quot; class=&quot;latex&quot; title=&quot;a d - b c&quot; /&gt; modulo &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; gives a linear system of equations in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c_i%2C+d_j&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c_i, d_j&quot; class=&quot;latex&quot; title=&quot;c_i, d_j&quot; /&gt;. If a non-trivial solution exists, then a simpler representation (that is, a representation with smaller sum of total degrees) has been found.&lt;/p&gt;
&lt;p&gt;Unfortunately, both rational simplification and FGLM are quite slow. With rational simplification a lot of time is lost converting between the several representations of polynomials. For example the following:&lt;/p&gt;
&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a = y**5 + x + y
&amp;gt;&amp;gt;&amp;gt; b = x - y
&amp;gt;&amp;gt;&amp;gt; ratsimpmodprime(a**2/b**2, [x*y**5 - x - y, x, y, order=&quot;lex&quot;)
x**4 + 2*x**3*y + 2*x**3 + x**2*y**2 + 4*x**2*y + x**2 + 2*x*y**2 + 2*x*y + y**2)/(x**4 - 2*x**3*y + x**2*y**2
&lt;/pre&gt;
&lt;p&gt;takes 39.624 seconds with cProfile of which 25.218 are spent on reduced, which calls sdp_div, taking 14.535 seconds. The main work is done in reduced/sdp_div and solve (which takes 6.096 seconds). &lt;/p&gt;
&lt;p&gt;FGLM can be done faster as explained at the end of the lecture notes by Jean-Charles Faugère &lt;a href=&quot;http://www-salsa.lip6.fr/~jcf/Teaching/index.html&quot;&gt;here&lt;/a&gt;. I haven’t done the construction of the matrices corresponding to the maps &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m+%5Cmapsto+x_i+m&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;m \mapsto x_i m&quot; class=&quot;latex&quot; title=&quot;m \mapsto x_i m&quot; /&gt; properly (because it’s the same, but more efficient, as constructing the matrices of the solver from last week). For some reason (presumably in connection with the update procedure) the resulting bases have weird coefficients, so this has still to be fixed. &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/f1728.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/f1728.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/f1728.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/f1728.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/f1728.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/f1728.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/f1728.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/f1728.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/f1728.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/f1728.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/f1728.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/f1728.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/f1728.wordpress.com/200/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/f1728.wordpress.com/200/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;amp;blog=22515617&amp;amp;post=200&amp;amp;subd=f1728&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-29T15:37:48+00:00</dc:date>
	<dc:creator>f1728</dc:creator>
</item>
<item rdf:about="http://nessgrh.wordpress.com/?p=347">
	<title>Tom Bachmann: Status Update—Week 10</title>
	<link>http://nessgrh.wordpress.com/2011/07/28/status-update%e2%80%94week-10/</link>
	<content:encoded>&lt;p&gt;This is a little earlier than my usual status update, but I think now is a good time. I just commited some new code, and many new interesting things work now, hence it is a good time to show off &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; . On the other hand there a quite a number of bugs in my code, so that’s probably what I will be spending next week on…&lt;/p&gt;
&lt;p&gt;Anyway. First I added lerch phi to hyperexpand. Here are a few &lt;a href=&quot;http://pastebin.com/raw.php?i=FkYNdpTN&quot;&gt;examples&lt;/a&gt;. There is not a lot to be said here, but it is good to see many common sums to work now.&lt;/p&gt;
&lt;p&gt;Next I improved hyperexpand() to handle some expansions at “special points”. This means evaluating hypergeometric (or meijer g) functions at say &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z%3D1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;z=1&quot; class=&quot;latex&quot; title=&quot;z=1&quot; /&gt;, even if we don’t know any closed-form expressions for general &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;z&quot; class=&quot;latex&quot; title=&quot;z&quot; /&gt;. There is  a vast literature on such “hypergeometric identities”, and my code is a very humble start at best. It basically just implements Gauss’ and Kummer’s summation theorems for 2F1 and nothing else, but this is fairly effective. Then I improved one of the convergence conditions—it turns out that in addition to what is listed on the wolfram functions site, in the russian book from which they took the conditions there is a crucial extra part. After finding someone to translate it to me I could implement this; now we can do some more integrals. The upshot of this is that the mellin transform of a product of bessel functions can now be &lt;em&gt;derived&lt;/em&gt; by the code, instead of having to put it into the table.&lt;/p&gt;
&lt;p&gt;Let me put this into perspective. There are (at least) the functions &lt;img src=&quot;http://s0.wp.com/latex.php?latex=J%2C+Y%2C+I%2C+K&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;J, Y, I, K&quot; class=&quot;latex&quot; title=&quot;J, Y, I, K&quot; /&gt;. The general products &lt;img src=&quot;http://s0.wp.com/latex.php?latex=J_a+J_b%2C+Y_a+Y_b%2C+J_a+Y_b&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;J_a J_b, Y_a Y_b, J_a Y_b&quot; class=&quot;latex&quot; title=&quot;J_a J_b, Y_a Y_b, J_a Y_b&quot; /&gt; can be exrpessed as g-functions, and similarly for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=I%2C+K&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;I, K&quot; class=&quot;latex&quot; title=&quot;I, K&quot; /&gt;. Also many special products can be expressed. I had previously put in a few of the identities of the first kind. Now almost all of them can be derived from just the entries for single functions. (There are some problems with functions of the second kind, which tend to be singular and/or rapidly growing, so that they don’t really have mellin transforms; deriving formulae for these is difficult in the current setup). On the other hand, this can be somewhat slow; for this reason I only commented out the formulae instead of removing them. Here are a few &lt;a href=&quot;http://pastebin.com/raw.php?i=f65MmSTU&quot;&gt;timings&lt;/a&gt;. These are evidently not great, I’ll have to see what can be done. My guess is that hyperexpand() is relatively slow, but I haven’t looked into this further. [Note also that running this with cache off is much slower, since the algorithm internally uses caching.]&lt;/p&gt;
&lt;p&gt;Finally, I improved the integration heuristics so as to be able to do some more &lt;a href=&quot;http://pastebin.com/raw.php?i=sbN8dQYA&quot;&gt;integrals&lt;/a&gt; [with a few additional factors the last integral is a representation of besselj]. Again I don’t know what makes this so slow.&lt;/p&gt;
&lt;p&gt;In closing, let’s look at some more fun definite &lt;a href=&quot;http://pastebin.com/raw.php?i=UVYgPFpB&quot;&gt;integrals&lt;/a&gt; (all played around with long enough until I found a variation that can be done in closed form &lt;img src=&quot;http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif&quot; alt=&quot;;)&quot; class=&quot;wp-smiley&quot; /&gt;  ). Again not much to say here (except that (9) shows a bug in the hyperepand table, the minus sign must be &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7B-i%5Cpi%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;e^{-i\pi}&quot; class=&quot;latex&quot; title=&quot;e^{-i\pi}&quot; /&gt;); the numerical computations are for comparison with wolfram alpha.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/347/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/347/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/347/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/347/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/347/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/347/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/347/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/347/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/347/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/347/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/347/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/347/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/347/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/347/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;amp;blog=22546379&amp;amp;post=347&amp;amp;subd=nessgrh&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-28T21:38:29+00:00</dc:date>
	<dc:creator>nessgrh</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8814696591561172392.post-3132546778974806304">
	<title>Vladimir Perić: GSoC: week 9: Almost there</title>
	<link>http://vperic.blogspot.com/2011/07/gsoc-week-9-almost-there.html</link>
	<content:encoded>I've just now seen I managed to completely miss my blog post last week. Bah! So, for the past two weeks, I've worked on two things in parallel. Lets take it from the top:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Python 3 support&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This is going as well as could be hoped. &lt;a href=&quot;https://github.com/vperic/sympy/tree/porting&quot;&gt;The latest pull request&lt;/a&gt; is awaiting merging. With it, there are three exceptions and one failure in the main test suite remaining and this hasn't changed in about a week. I've asked Ronan for help on these, and he's opened &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2574&quot;&gt;an issue&lt;/a&gt; for one of the exceptions. It's something deep in the assumptions code; as Ronan knows his way best around this code, I hope he'll be able to solve it. I haven't looked in detail at the other problems, but hopefully they won't be too hard.&lt;br /&gt;&lt;br /&gt;What I have been doing is working on the doctests and the failures they show - at least three real issues that aren't covered in normal tests have beeen uncovered. The others have been mostly problems with the doctests themselves - doctests rely on comparing the exact output and some minor things have changed in Python 3 (eg. &amp;lt;type&amp;gt; is now &amp;lt;class&amp;gt;). Most of these fixes are in the pull request referenced above. There are 2 exceptions and 2 failures remaining to fix. One of the failures (while trivial to hack-fix) actually exposed &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2590&quot;&gt;issue 2590&lt;/a&gt;: &quot;jn_zeros in functions/special/bessel.py should return SymPy Floats, not Python floats&quot;. The rest shouldn't be too bad (though I wish there was someone around to help me with tensor/index_methods.py). &lt;br /&gt;&lt;br /&gt;The real problem was getting the doctests to actually run. Now, to start with, doctests also need to be converted by 2to3. This isn't done automatically but by passing a &quot;-d&quot; flag to 2to3 (which converts only doctests). Unfortunately, this crashed in ntheory/factor_.py because of the use of reduce(). I couldn't work around this so I've opened &lt;a href=&quot;http://bugs.python.org/issue12611&quot;&gt;an issue&lt;/a&gt; upstream (I've also opened &lt;a href=&quot;http://bugs.python.org/issue12616&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;http://bugs.python.org/issue12613&quot;&gt;more&lt;/a&gt; issues for other 2to3 deficiencies that I've managed to work around). This is a problem because even if there's a fix upstream it will only apply to new Pythons. For the moment I've just deleted the relevant bit of doctest, but this warrants further discussion. [EDIT: In fact, I've just opened &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2605&quot;&gt;issue 2605&lt;/a&gt; for this] There's one more fix required (unicode-related) but that can just be wrapped with a version check.&lt;br /&gt;&lt;br /&gt;The second problem was running the .txt doctests. First I learned that I need to pass the .txt files to 2to3 explicitly, they aren't caught otherwise (this from Lennart Regebro's &lt;i&gt;excellent&lt;/i&gt; &lt;a href=&quot;http://python3porting.com/index.html&quot;&gt;Porting to Python 3&lt;/a&gt; book, which is now available for free; thanks Lennart!). Then it turned out our doctest runner depends on an internal procedure (_load_testfile) which changed from Python 2 to Python 3 to have an extra argument for an encoding. Finally, the doctests had a few errors in them but nothing major (one polys issue, though). The real peculiar thing is that some lines seem to print an extra &quot;None&quot; after what they're supposed to print; this happens in tutorial.txt and matrices.txt but nowhere else. As I haven't been able to reproduce this, I must conclude it's related to our testrunner somehow. Furthermore, this only happens with .txt doctests which further narrows it down. It's not clear to me how to solve this yet. Our doctest runner is a bit of a mess, using slightly different methods for .py and .txt doctests and copy-pasting some upstream methods but not all. One solution might be copying the rest of the code over, another could be porting us to py.test. This is something to raise at the next (IRC) meeting with my mentor. It's a minor issue, not impacting any real functionality, but as it could hide other issues it should be fixed.&lt;br /&gt;&lt;br /&gt;We've also reached a solution - of sorts - on the unbundling of mpmath. As Aaron and Ondřej were adamantly against unbundling it, and as no clear benefit was then seen to porting to Distribute (not that it'd be easy without unbundling), I've decided to &quot;concede&quot; that argument. At the moment, the plan is to write a script which would copy the code to a sympy-py3k directory and run 2to3 as appropriate on it. This will probably require changes to various files (setup.py at least should then be compatible with both Python versions without the need for 2to3) and it's not yet clear how all details will be handled but it's definitely possible. I feel such a solution is going to be fragile by definition and could lead to problems down the line, but it's also basically the only way to have my work visible to users in the short run so I will go along it.&lt;br /&gt;&lt;br /&gt;Nevertheless, I feel I'm very close to completing my goal (and the Python 3 part of my project) of porting SymPy to Python 3. Once the above script is decided upon and implemented, I hope to get wider testing from other developers and users. It is almost certain that there will be issues not caught by the tests and as I don't use SymPy myself having others test them is the only way for me to see them. There's an imminent minor release of SymPy, 0.7.1., which unfortunately doesn't include much of my work. I hope, however, that once it's fully complete and merged it will quickly be followed by a 0.7.2-alpha release to allow testing beyond the developer community.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Jenkins for SymPy&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Last week Ondřej was free to work on reinstalling the current server we use and I've since setup a Jenkins CI server there; you can find it at the &lt;a href=&quot;http://72.14.182.119:8080/&quot;&gt;old address&lt;/a&gt;. As before, anonymous users can see the build history while developers should drop me a note if they'd like an account. Currently the builds still have to be triggered manually, but I hope to get the Github-integration complete and have tests run on every change pushed. The &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2585&quot;&gt;crucial issue&lt;/a&gt; here was that the tests were taking up too much memory, causing Jenkins to swap and take hours to run the test suite. This was fixed with &lt;a href=&quot;https://github.com/sympy/sympy/pull/507&quot;&gt;pull 507&lt;/a&gt;, which clears the cache after running each file. This more than halved the memory usage (from ~450 MB to less than 200) which allows Jenkins to complete the 6 test runs (py25-27 x {python, gmpy} ground types) in just under an hour. The change should otherwise be harmless enough, but issues could arise (which is why it isn't included in the upcoming release).&lt;br /&gt;&lt;br /&gt;Increasing the number of tests ran (scipy and numpy integration should also be tested, but in separate jobs probably) and having a working framework for automatically testing pull requests are the remaining tasks, but I consider the Jenkins server running and this part of my project a success. It will also be invaluable when Python 3 support is finally in (as it's unlikely many, if any, developers will test on Python 3 when developing). I've also added another project to continually test a single file to help another GSoC student, &lt;a href=&quot;http://nessgrh.wordpress.com/&quot;&gt;Tom Bachmann&lt;/a&gt; (ness), iron out some issues with random numbers in tests. It tests his branch every 5 minutes, which is many hundreads of runs daily and a lot more coverage than a single developer could reasonably provide. I consider it an experiment, to see how feasible it is to offer a level of extra support for critical changes. So far seems to be working fine. There's also a Jenkins plugin worth investigating, which implements priority for projects, which could allow us to have many such &quot;side&quot; experiments without impacting the main testing process whatsoever. The plugin is currently under development, but it is something to look into.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Phew! That was one long post! Hopefully, it makes up for the missing last week post at least a bit.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8814696591561172392-3132546778974806304?l=vperic.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-25T13:47:56+00:00</dc:date>
	<dc:creator>Vladimir Perić</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=981">
	<title>Aaron Meurer: Merging integration3 with sympy-0.7.0 nightmare</title>
	<link>http://asmeurersympy.wordpress.com/2011/07/25/merging-integration3-with-sympy-0-7-0-nightmare/</link>
	<content:encoded>&lt;p&gt;For a long time, there have been several problems in my &lt;code&gt;integration3&lt;/code&gt; branch that were fixed in &lt;code&gt;master&lt;/code&gt;.  I decided that as an incentive to finish the release, I would hold off on merging &lt;code&gt;master&lt;/code&gt; into my branch until the 0.7.0 release was finished.  Well, here’s a little timeline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;June 28, 2011:&lt;/strong&gt; SymPy 0.7.0 final is released.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;June 29, 2011:&lt;/strong&gt; I type &lt;code&gt;git merge sympy-0.7.0&lt;/code&gt; in my &lt;code&gt;integration3&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;July 24, 2011 (today; technically July 25 because it’s 2 AM):&lt;/strong&gt; I finish merging &lt;code&gt;sympy-0.7.0&lt;/code&gt; into &lt;code&gt;integration3&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s right, it took me over three weeks—almost a month—to merge &lt;code&gt;sympy-0.7.0&lt;/code&gt; into &lt;code&gt;integration3&lt;/code&gt; (granted, I worked on other things at the same time, such as the &lt;a href=&quot;https://github.com/asmeurer/sympy/commit/52657848516ce7f4f7119b921d6b8d64131b58d3&quot; target=&quot;_blank&quot;&gt;SciPy 2011 conference&lt;/a&gt;, but to me, any merge that takes longer than a day to complete is a problem).  This is because git decided that I needed to fix as a merge conflict just about every single change in the release branch since the base of &lt;code&gt;integration3&lt;/code&gt;.  The total was over 100 files.  You can see the final merge commit &lt;a href=&quot;https://github.com/asmeurer/sympy/commit/52657848516ce7f4f7119b921d6b8d64131b58d3&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I started &lt;code&gt;git mergetool&lt;/code&gt;, without which this whole ordeal would have been 10 times worse.  The mergetool, which on my computer is opendiff, i.e., File Merge, gave the correct change by default in most cases, so I actually did not have to manually fix the majority of the conflicts.  But I did have to go through and do a lot of them.  I had to manually check each difference in the polys, as I had made several changes there in the course of working on &lt;code&gt;integration3&lt;/code&gt;.  In several occisaions, I had to research a change using &lt;code&gt;git log -S&lt;/code&gt; and fancy methods.  And I noticed at least two regressions in the polys, which I fixed.&lt;/p&gt;
&lt;p&gt;mergetool was useless against &lt;code&gt;risch.py&lt;/code&gt; and &lt;code&gt;test_risch.py&lt;/code&gt;, because in my branch I had renamed these to &lt;code&gt;heurisch.py&lt;/code&gt; and &lt;code&gt;test_heurisch.py&lt;/code&gt;.  Fortunately, these were not really modified much by me, so I could basically just replace them with the &lt;code&gt;sympy-0.7.0&lt;/code&gt; versions.&lt;/p&gt;
&lt;p&gt;Once I finished merging I had to deal with test failures.  This was partly expected, as my branch has always had test failures due to my hack disabling algebraic substitution in &lt;code&gt;exp&lt;/code&gt;, which is required for &lt;code&gt;risch_integrate()&lt;/code&gt; to work, but there were also several unrelated ones.  &lt;/p&gt;
&lt;p&gt;Some of these were caused by wrong merge conflict resolutions by me.  So I went through &lt;code&gt;git diff sympy-0.7.0&lt;/code&gt; change by change and made sure that nothing was different that I didn’t want to be.  I would recommend doing this for any big merge.&lt;/p&gt;
&lt;p&gt;Then, I had to fix a few bugs that caused test failures.  Several semantics were changed in the release.  I think the ones that I had to change were the renaming of &lt;code&gt;has_any_symbols&lt;/code&gt; to just &lt;code&gt;has&lt;/code&gt;, the renaming of &lt;code&gt;Poly.as_basic()&lt;/code&gt; to &lt;code&gt;Poly.as_expr()&lt;/code&gt;, and the swapping of the meanings of &lt;code&gt;quo&lt;/code&gt; and &lt;code&gt;exquo&lt;/code&gt; in the polys.  There were also some doctest failures due to the change to lexicographic ordering in the printer.&lt;/p&gt;
&lt;p&gt;After all that, there were two regressions that caused test failures.  The first was the following:&lt;/p&gt;
&lt;p&gt;Before:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: Integral((exp(x*log(x))*log(x)), x).subs(exp(x*log(x)), x**x)
Out[1]: 
⌠             
⎮  x          
⎮ x ⋅log(x) dx
⌡             
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;After:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: Integral((exp(x*log(x))*log(x)), x).subs(exp(x*log(x)), x**x)
Out[1]: 
⌠                    
⎮  x⋅log(x)          
⎮ ℯ        ⋅log(x) dx
⌡                    
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This substitution is necessary because the Risch algorithm requires expressions like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5Ex&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x^x&quot; class=&quot;latex&quot; title=&quot;x^x&quot; /&gt; to be rewritten as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7Bx%5Clog%28x%29%7D&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;e^{x\log(x)}&quot; class=&quot;latex&quot; title=&quot;e^{x\log(x)}&quot; /&gt; before it can integrate them, but I try to convert them back after integrating so that the user gets the same thing in the result that he entered.  I created &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2571&quot; target=&quot;_blank&quot;&gt;issue 2571&lt;/a&gt; for this.&lt;/p&gt;
&lt;p&gt;The second was that I had several places in my docstrings with things like&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Given a derivation D on k[t] and f, g in k(t) with f weakly normalized with respect to t, either raise NonElementaryIntegralException, in which case the equation Dy + f*y == g has no solution in k(t), or the quadruplet (a, b, c, h) such that a, h in k[t], b, c in k, and for any solution y in k(t) of Dy + f*y == g, q = y*h in k satisfies a*Dq + b*q == c.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The problem here is the “raise NonElementaryIntegralException,” part.  The code quality checker things that this is an old style exception (like &lt;code&gt;raise Exception, message&lt;/code&gt;), due to a poorly formed regular expression.  I fixed this in a &lt;a href=&quot;https://github.com/sympy/sympy/pull/511&quot; target=&quot;_blank&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The good news is that now a lot of stuff works that didn’t before because of fixes that were required that only existed in &lt;code&gt;master&lt;/code&gt;.  For example, the following did not work before, but now does due to improvements to &lt;code&gt;RootSum&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: risch_integrate(1/(exp(5*x) + exp(x) + 1), x)
Out[1]: 
           ⎛    2                                                           
x + RootSum⎝21⋅z  + 6⋅z + 1, Lambda(_i, _i*log(-3381*_i**4/4 - 3381*_i**3/4 

                                       ⎞          ⎛     3        2          
- 625*_i**2/2 - 125*_i/2 + exp(x) - 5))⎠ + RootSum⎝161⋅z  + 115⋅z  + 19⋅z + 

                                                                            
1, Lambda(_i, _i*log(-3381*_i**4/4 - 3381*_i**3/4 - 625*_i**2/2 - 125*_i/2 +

             ⎞
 exp(x) - 5))⎠

In [2]: cancel(risch_integrate(1/(exp(5*x) + exp(x) + 1), x).diff(x))
Out[2]: 
      1      
─────────────
 5⋅x    x    
ℯ    + ℯ  + 1
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The general definition of the logarithmic part of an integral is a sum over the roots of a polynomial, which must be expressed as a &lt;code&gt;RootSum&lt;/code&gt; in the general case.  Previously, &lt;code&gt;RootSum.diff&lt;/code&gt; did not work, but thanks to Mateusz, an algorithm for computing exactly the RootSum where the Lambda expression is a rational function was implemented (see &lt;a href=&quot;http://mattpap.github.com/scipy-2011-tutorial/html/mathematics.html#summing-roots-of-polynomials&quot; target=&quot;_blank&quot;&gt;this bit&lt;/a&gt; from our SciPy tutorial for an idea on how this works), so now the Risch Algorithm can work with RootSum objects just as well with as an ordinary sum of logarithms.&lt;/p&gt;
&lt;p&gt;Also, there was a bug in the square free algorithm in my branch that was fixed in &lt;code&gt;master&lt;/code&gt; that was causing wrong results (I don’t remember the expression that produced them right now), and also there was a fix by me in &lt;code&gt;master&lt;/code&gt; to make &lt;code&gt;is_rational_function()&lt;/code&gt; faster, as it was significantly slowing down the calculation of some integrals (for example, &lt;code&gt;risch_integrate(Add(*(exp(i*x) for i in range(1000))))&lt;/code&gt;, which is still slow to calculate, but now it’s because of other things).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About big branches&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So this merge, along with the poly12 fiasco (which by the way, I think part of the reason git made me do all these merge conflict resolutions was because &lt;code&gt;polys12&lt;/code&gt; was rebased from the &lt;code&gt;polys11&lt;/code&gt; I had merged into integration3), has shown me very clearly that it is very bad to go off with your own branch and do a lot of work and wait a long time before merging it back into the main repo.&lt;/p&gt;
&lt;p&gt;This is what was done with &lt;code&gt;polys12&lt;/code&gt;.  Mateusz had a lot of new polynomials code that he developed in one big branch, and when it finally came to merging it back in, it was a mess.  This was for several reasons, which I do not want to discuss too much here, but it became clear to everyone I think that doing this was bad, and that it would have been better to have submitted many changes as pull requests as they were made than keeping them all together in one big branch for a long time.&lt;/p&gt;
&lt;p&gt;This model also affected my work, as I had to work off of latest the polys branch, not &lt;code&gt;master&lt;/code&gt;, as my work relied heavily on the latest and greatest in the polys.  &lt;/p&gt;
&lt;p&gt;Well, with this merge of the main repo into my branch, I see that my branch is starting to become the same way.  I originally thought that I should finish the Risch algorithm before submitting it to be merged into &lt;code&gt;master&lt;/code&gt;.  I know know that this is the wrong approach.  Development in &lt;code&gt;master&lt;/code&gt; is too fast to keep code away from it for too long.  The divergence makes it more and more difficult to merge back with every time.  Furthermore, there are regressions that were never noticed to be regressions because the code that would have shown them existed only in my branch.  Now I have to fix these, whereas if the code were in &lt;code&gt;master&lt;/code&gt;, the regression would have never happened in the first place, because the author would have seen it immediately from the test failures.&lt;/p&gt;
&lt;p&gt;I also thought that I should wait to merge because there were so many bugs in my code.  But I see now that this is also wrong.  Merging with &lt;code&gt;master&lt;/code&gt; will help me find these bugs, as people will actually use my code.  Sure, I’ve asked people to try out &lt;code&gt;risch_integrate()&lt;/code&gt;, and some people have (and I thank you), but having it in the default &lt;code&gt;integrate()&lt;/code&gt; in &lt;code&gt;master&lt;/code&gt; will result in finding more bugs in the code than I ever would alone, which is basically the way it is right now with the code living only in my own branch.&lt;/p&gt;
&lt;p&gt;I would prepare my code for merging with &lt;code&gt;master&lt;/code&gt; today, if it weren’t for this &lt;code&gt;exp.subs&lt;/code&gt; hack, which causes test failures and is technically a regression, but is required for the preparsing code to the Risch algorithm to work.  This is why I &lt;a href=&quot;http://groups.google.com/group/sympy/browse_thread/thread/4a19d0f39f51fda6&quot; target=&quot;_blank&quot;&gt;wrote to the list&lt;/a&gt; two weeks ago asking for advice on how to structure the substitution code so that we can nicely have various kinds of substitutions (e.g., exact like I need and algebraic like currently exists in &lt;code&gt;exp&lt;/code&gt;) living together without cluttering up the code.&lt;/p&gt;
&lt;p&gt;Therefore, I am going to focus my energies on fixing this subs problem so I can get my code merged with &lt;code&gt;master&lt;/code&gt;.  Then, when this is done, I will continue my work on implementing the remaining cases of the Risch algorithm.  &lt;/p&gt;
&lt;p&gt;So let this tale be a warning to people working on a lot of code in a big branch.  This especially applies to our GSoC students, as it’s extremely easy to let your code accumulate when you’re a GSoC student (technically this branch of mine is a GSoC branch).  I see that some of our students are doing a better job of this than others.  To those who have your code all in one big branch that hasn’t been merged, I recommend you ready your branch for merge now.  And in the future, try to break your code up into small but still meaningful chunks and submit those as pull requests.  With git, it’s easy to base the code you are currently working on on code that hasn’t been merged yet, while still keeping things in small chunks for the pull requests.  &lt;/p&gt;
&lt;p&gt;On the other hand, git will only take you so far if you keep everything in a big branch, because there are going to be changes in &lt;code&gt;master&lt;/code&gt; that will affect your work, no matter how isolated you think it is, and these are the sorts of things that it is impossible for git to fix for you.  But if your code is in &lt;code&gt;master&lt;/code&gt;, it will be supported by everyone, and any major change that affects it will have to fix it. For example, if someone changes a printer and the doctests change, then he will have to change your doctest too if it’s in &lt;code&gt;master&lt;/code&gt;, but if it’s in your branch, then you will have to fix it when you next merge/rebase with/against &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/981/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/981/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/981/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/981/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/981/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/981/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/981/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/981/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/981/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/981/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/981/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/981/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/981/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/981/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=981&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-07-25T09:25:13+00:00</dc:date>
	<dc:creator>asmeurer</dc:creator>
</item>
<item rdf:about="http://gilbertgede.wordpress.com/?p=70">
	<title>Gilbert Gede: GSoC, Week 9</title>
	<link>http://gilbertgede.wordpress.com/2011/07/24/gsoc-week-9/</link>
	<content:encoded>&lt;p&gt;Week 9 already….? Also, my internet connection is down, so this post is a little later than I planned….&lt;/p&gt;
&lt;p&gt;So there was some progress this week. A lot of it was in doing the math for the linearization process. Linearization is normally easy, but when dealing with dependent quantities becomes more complicated. It requires treating the dependent quantities as functions of the independent quantities, then taking partial derivatives. It ends up being simplest (that is the current theory at least) when using the chain rule; this was done by hand in order to ease the work done by SymPy’s routines. These expressions can get quite large, so minimizing the buildup of expression size is important. Or, to put it another way, we figured out the best way to operate on smaller chunks of expressions, rather than larger ones, and then combine them afterwards, minimizing the size of some of the expressions which have to be dealt with.&lt;/p&gt;
&lt;p&gt;In our lab at UC Davis, one of the big projects currently is studying bicycle dynamics. A paper was written in 2007 which sought to provide benchmark/reference values to validate models of the bicycle against: J.P Meijaard, Jim M Papadopoulos, Andy Ruina and A.L Schwab. Linearized dynamics equations for the balance and steer of a bicycle: a benchmark and review. Proceedings of The Royal Society (2007) 463, 1955-1982 doi: 10.1098/rspa.2007.1857 . One of the goals for PyDy this year was to be able to generate the full nonlinear equations for the bicycle, and the linear equations for comparison of eigenvalues using the reference values. Well, it looks like my code can do that successfully now:&lt;/p&gt;
&lt;p&gt;The code at the bottom of the post calculates the “A” matrix, and writes a few eigenvalues out. You can compare them to those presented in the paper. There are still 2 issues left to investigate as part of the linearization process, there is pretty printing, latex printing, and finally code output and all of the functionality will be “done”. There is also still lots of documentation to write…&lt;/p&gt;
&lt;p&gt;One other issue, that is proving to be somewhat serious, is the speed of the code. The execution time of the code is usually not too terrible, and if it does get bad, turning of Vector’s auto simplification (Vector.simp = False) usually helps. The linearization can also be kinda slow, but not overwhelmingly so. What seems to really be an issue is both printing (to screen or file) and substituting. The expressions get fairly big (I think the forcing term for the bicycle is on the order of 1MB when in Ascii form) so I’m not completely unhappy or surprised about the printing issue. I am more unhappy about the substitution being slow. Right now I’m using .subs(), and it seems to take a few minutes. I’ve also tried .evalf(subs=dict) and lambdify, but .evalf hits a maximum recursion depth error, and I’m getting a syntax error with lambdify (it actually looks like this is due to the use of unknown functions; I’m sure I can solve this somehow).&lt;/p&gt;
&lt;p&gt;Use the pydy-pull-funcderiv branch; that’s the current branch. Some pushes have been forced in, so beware….sorry. Also, Brian Granger’s code got pulled in, so I’ll be defining ‘dynamic symbols’ as undefined functions of time. My branches need a little work to get them organized and unified again.&lt;/p&gt;
&lt;p&gt;Code Output:&lt;/p&gt;
&lt;pre&gt;Calculation of Linearized Bicycle &quot;A&quot; Matrix, with States: Roll, Steer, Roll Rate, Steer Rate
Before Forming the List of Nonholonomic Constraints.
Before Handling of Dependent Speeds
Before Forming Generalized Active Forces, Fr
Before Forming Generalized Inertia Forces, Fr*
Base Equations of Motion Computed
Before Linearization of the &quot;Forcing&quot; Term
Before Substitution of Numerical Values
[               0,                                           0,                  1.0,                    0]
[               0,                                           0,                    0,                  1.0]
[9.48977444677355, -0.891197738059088*v**2 - 0.571523173729246, -0.105522449805691*v, -0.330515398992311*v]
[11.7194768719633,   -1.97171508499972*v**2 + 30.9087533932407,   3.67680523332153*v,  -3.08486552743311*v]
v = 1
{-3.13423125066578: 1, 3.52696170990069 - 0.80774027519931*I: 1, 3.52696170990069 + 0.80774027519931*I: 1, -7.11008014637441: 1}
v = 2
{-8.67387984831737: 1, -3.07158645641514: 1, 2.68234517512745 + 1.68066296590676*I: 1, 2.68234517512745 - 1.68066296590676*I: 1}
v = 3
{-2.63366137253665: 1, 1.70675605663973 + 2.31582447384324*I: 1, 1.70675605663973 - 2.31582447384324*I: 1, -10.3510146724592: 1}
v = 4
{0.41325331521124 - 3.07910818603205*I: 1, -12.1586142657644: 1, 0.41325331521124 + 3.07910818603205*I: 1, -1.42944427361326: 1}
v = 5
{-14.0783896927982: 1, -0.322866429004087: 1, -0.775341882195845 + 4.46486771378823*I: 1, -0.775341882195845 - 4.46486771378823*I: 1}&lt;/pre&gt;
&lt;p&gt;Actual Code:&lt;/p&gt;
&lt;pre&gt;from sympy import *
from sympy.physics.mechanics import *

# Code to get equations of motion for a bicycle modeled as in:
# J.P Meijaard, Jim M Papadopoulos, Andy Ruina and A.L Schwab. Linearized
# dynamics equations for the balance and steer of a bicycle: a benchmark and
# review. Proceedings of The Royal Society (2007) 463, 1955-1982
# doi: 10.1098/rspa.2007.1857

print('Calculation of Linearized Bicycle \&quot;A\&quot; Matrix, with States: Roll, '
      'Steer, Roll Rate, Steer Rate')

# Note that this code has been crudely ported from Autolev, which is the reason
# for some of the unusual naming conventions. It was purposefully as similar as
# possible in order to aide debugging.

# Vector's simplification routines need to be turned off, otherwise the
# expressions get too big and too slow to simplify
Vector.simp = False
mechanics_printing()

# Declare Coordinates &amp;amp; Speeds
q1, q2, q4, q5 = dynamicsymbols('q1 q2 q4 q5')
q1d, q2d, q4d, q5d = dynamicsymbols('q1 q2 q4 q5', 1)
u1, u2, u3, u4, u5, u6 = dynamicsymbols('u1 u2 u3 u4 u5 u6')
u1d, u2d, u3d, u4d, u5d, u6d = dynamicsymbols('u1 u2 u3 u4 u5 u6', 1)

# Declare System's Parameters
WFrad, WRrad, htangle, forkoffset = symbols('WFrad WRrad htangle forkoffset')
forklength, framlength, forkcg1 = symbols('forklength framlength forkcg1')
forkcg3, framcg1, framcg3, Iwr11 = symbols('forkcg3 framcg1 framcg3 Iwr11')
Iwr22, Iwf11, Iwf22, Ifram11 = symbols('Iwr22 Iwf11 Iwf22 Ifram11')
Ifram22, Ifram33, Ifram31, Ifork11 = symbols('Ifram22 Ifram33 Ifram31 Ifork11')
Ifork22, Ifork33, Ifork31, g = symbols('Ifork22 Ifork33 Ifork31 g')
mframe, mfork, mwf, mwr = symbols('mframe mfork mwf mwr')

# Set up reference frames for the system
# N - inertial
# Y - yaw
# R - roll
# WR - rear wheel, rotation angle is ignorable coordinate so not oriented
# FRAM - bicycle frame
# TEMPFRAM - statically rotated frame for easier reference inertia definition
# FORK - bicycle fork
# TEMPFORK - statically rotated frame for easier reference inertia definition
# WF - front wheel, again posses a ignorable coordinate
N = ReferenceFrame('N')
Y = N.orientnew('Y', 'Simple', q1, 3)
R = Y.orientnew('R', 'Simple', q2, 1)
FRAM = R.orientnew('FRAM', 'Simple', q4 + htangle, 2)
WR = ReferenceFrame('WR')
TEMPFRAM = FRAM.orientnew('TEMPFRAM', 'Simple', -htangle, 2)
FORK = FRAM.orientnew('FORK', 'Simple', q5, 1)
TEMPFORK = FORK.orientnew('TEMPFORK', 'Simple', -htangle, 2)
WF = ReferenceFrame('WF')

# Declaration of the RigidBody containers
BodyFram = RigidBody()
BodyFork = RigidBody()
BodyWR = RigidBody()
BodyWF = RigidBody()

# Setting the masses for the bodies
BodyFram.mass = mframe
BodyFork.mass = mfork
BodyWF.mass = mwf
BodyWR.mass = mwr

# Assigning the appropriate frames to each body
BodyFram.frame = FRAM
BodyFork.frame = FORK
BodyWR.frame = WR
BodyWF.frame = WF

# Kinematics of the Bicycle
# First block of code is forming the positions of the relevant points
# rear wheel contact -&amp;gt; rear wheel mass center -&amp;gt; frame mass center +
# frame/fork connection -&amp;gt; fork mass center + front wheel mass center -&amp;gt; front
# wheel contact point
WRhat = Point('WRhat')
WRmc = WRhat.newpoint('WRmc', WRrad * R.z)
STEER = WRmc.newpoint('STEER', framlength * FRAM.z)
FRAMmc = WRmc.newpoint('FRAMmc', -framcg1 * FRAM.x + framcg3 * FRAM.z)
FORKmc = STEER.newpoint('FORKmc', -forkcg1 * FORK.x + forkcg3 * FORK.z)
WFmc = STEER.newpoint('WFmc', forklength * FORK.x + forkoffset * FORK.z)
WFhat = WFmc.newpoint('WFhat', WFrad*(dot(FORK.y, Y.z)*FORK.y - Y.z).unit)

# Set the angular velocity of each frame.
# Angular accelerations end up being calculated automatically by
# differentiating the angular velocities when first needed.
# u1 is yaw rate
# u2 is roll rate
# u3 is rear wheel rate
# u4 is frame pitch rate
# u5 is fork steer rate
# u6 is front wheel rate
Y.set_ang_vel(N, u1 * Y.z)
R.set_ang_vel(Y, u2 * R.x)
WR.set_ang_vel(FRAM, u3 * FRAM.y)
FRAM.set_ang_vel(R, u4 * FRAM.y)
FORK.set_ang_vel(FRAM, u5 * FORK.x)
WF.set_ang_vel(FORK, u6 * FORK.y)

# Form the velocities of the previously defined points, using the 2 - point
# theorem (written out by hand here).
# Accelerations again are calculated automatically when first needed.
WRhat.set_vel(N, 0)
WRmc.set_vel(N, WRhat.vel(N) + (WR.ang_vel_in(N) ^ WRmc.pos_from(WRhat)))
STEER.set_vel(N, WRmc.vel(N) + (FRAM.ang_vel_in(N) ^ STEER.pos_from(WRmc)))
FRAMmc.set_vel(N, WRmc.vel(N) + (FRAM.ang_vel_in(N) ^ FRAMmc.pos_from(WRmc)))
FORKmc.set_vel(N, STEER.vel(N) + (FORK.ang_vel_in(N) ^ FORKmc.pos_from(STEER)))
WFmc.set_vel(N, STEER.vel(N) + (FORK.ang_vel_in(N) ^ WFmc.pos_from(STEER)))
WFhat.set_vel(N, WFmc.vel(N) + (WF.ang_vel_in(N) ^ WFhat.pos_from(WFmc)))

# Assign the relevant points to each body.
BodyFram.mc = FRAMmc
BodyFork.mc = FORKmc
BodyWF.mc = WFmc
BodyWR.mc = WRmc

# Sets the inertias of each body. Uses the inertia frame to construct the
# inertia dyadics. Wheel inertias are only defined by principle moments of
# inertia, and are in fact constant in the frame and fork reference frames; it
# is for this reason that the orientations of the wheels does not need to be
# defined. The frame and fork inertias are defined in the 'TEMP' frames which
# are fixed to the appropriate body frames; this is to allow easier input of
# the reference values of the benchmark paper. Note that due to slightly
# different orientations, the products of inertia need to have their signs
# flipped; this is done later when entering the numerical value.
BodyFram.inertia = (inertia(TEMPFRAM, Ifram11, Ifram22, Ifram33, 0, 0, Ifram31), FRAMmc)
BodyFork.inertia = (inertia(TEMPFORK, Ifork11, Ifork22, Ifork33, 0, 0, Ifork31), FORKmc)
BodyWR.inertia = (inertia(FRAM, Iwr11, Iwr22, Iwr11), WRmc)
BodyWF.inertia = (inertia(FORK, Iwf11, Iwf22, Iwf11), WFmc)

print 'Before Forming the List of Nonholonomic Constraints.'

# The kinematic differential equations; they are defined quite simply. Each
# entry in this list is equal to zero.
kd = [q1d - u1, q2d - u2, q4d - u4, q5d - u5]

# The nonholonomic constraints are the velocity of the front wheel contact
# point dotted into the X, Y, and Z directions; the yaw frame is used as it is
# &quot;closer&quot; to the front wheel (1 less DCM connecting them). These constraints
# force the velocity of the front wheel contact point to be 0 in the inertial
# frame; the X and Y direction constraints enforce a &quot;no-slip&quot; condition, and
# the Z direction constraint forces the front wheel contact point to not move
# away from the ground frame, essentially replicating the holonomic constraint
# which does not allow the frame pitch to change in an invalid fashion.
conlspeed = [WFhat.vel(N) &amp;amp; Y.x, WFhat.vel(N) &amp;amp; Y.y, WFhat.vel(N) &amp;amp; Y.z]
# The holonomic constraint is that the position from the rear wheel contact
# point to the front wheel contact point when dotted into the normal-to-ground
# plane direction must be zero; effectively that the front and rear wheel
# contact points are always touching the ground plane. This is actually not
# part of the dynamic equations, but instead is necessary for the lineraization
# process.
conlcoord = [WFhat.pos_from(WRhat) &amp;amp; Y.z]

# The force list; each body has the appropriate gravitational force applied
# at its mass center.
FL = [(FRAMmc, -mframe * g * Y.z), (FORKmc, -mfork * g * Y.z), (WFmc,
      -mwf * g * Y.z), (WRmc, -mwr * g * Y.z)]
BL = [BodyFram, BodyFork, BodyWR, BodyWF]

# The N frame is the inertial frame, coordinates are supplied in the order of
# independent, dependent coordinates, as are the speeds. The kinematic
# differential equation are also entered here.
KM = Kane(N)
KM.coords([q1, q2, q5, q4])
KM.speeds([u2, u3, u5, u1, u4, u6])
KM.kindiffeq(kd)

print 'Before Handling of Dependent Speeds'

# Here the dependent speeds are specified, in the same order they were provided
# in earlier, along with the non-holonomic constraints.
# The dependent coordinate is also provided, with the holonomic constraint.
# Again, this is only provided for the linearization process.
KM.dependent_speeds([u1, u4, u6], conlspeed)
KM.dependent_coords([q4], conlcoord)

print 'Before Forming Generalized Active Forces, Fr'
fr = KM.form_fr(FL)
print 'Before Forming Generalized Inertia Forces, Fr*'
frstar = KM.form_frstar(BL)
print 'Base Equations of Motion Computed'

# This is the start of entering in the numerical values from the benchmark
# paper to validate the eigen values of the linearized equations from this
# model to the reference eigen values. Look at the aforementioned paper for
# more information. Some of these are intermediate values, used to transform
# values from the paper into the coordinate systems used in this model.
PaperRadRear                    =  0.3
PaperRadFront                   =  0.35
HTA                             =  evalf.N(pi/2-pi/10)
TrailPaper                      =  0.08
rake                            =  evalf.N(-(TrailPaper*sin(HTA)-(PaperRadFront*cos(HTA))))
PaperWb                         =  1.02
PaperFramCgX                    =  0.3
PaperFramCgZ                 	=  0.9
PaperForkCgX                  	=  0.9
PaperForkCgZ                	=  0.7
FramLength                  	=  evalf.N(PaperWb*sin(HTA)-(rake-(PaperRadFront-PaperRadRear)*cos(HTA)))
FramCGNorm                     	=  evalf.N((PaperFramCgZ-PaperRadRear-(PaperFramCgX/sin(HTA))*cos(HTA))*sin(HTA))
FramCGPar                      	=  evalf.N((PaperFramCgX/sin(HTA) + (PaperFramCgZ-PaperRadRear-PaperFramCgX/sin(HTA)*cos(HTA))*cos(HTA)))
tempa                         	=  evalf.N((PaperForkCgZ - PaperRadFront))
tempb                         	=  evalf.N((PaperWb-PaperForkCgX))
tempc                         	=  evalf.N(sqrt(tempa**2+tempb**2))
PaperForkL                      =  evalf.N((PaperWb*cos(HTA)-(PaperRadFront-PaperRadRear)*sin(HTA)))
ForkCGNorm                  	=  evalf.N(rake+(tempc * sin(pi/2-HTA-acos(tempa/tempc))))
ForkCGPar              		=  evalf.N(tempc * cos((pi/2-HTA)-acos(tempa/tempc))-PaperForkL)

# Here is the final assembly of the numerical values. The symbol 'v' is the
# forward speed of the bicycle (a concept which only makes sense in the
# upright, static equilibrium case?). These are in a dictionary which will
# later be substituted in. Again the sign on the *product* of inertia values is
# flipped here, due to different orientations of coordinate systems.
v = Symbol('v')
val_dict = {WFrad: PaperRadFront,
            WRrad: PaperRadRear,
            htangle: HTA,
            forkoffset: rake,
            forklength: PaperForkL,
            framlength: FramLength,
            forkcg1: ForkCGPar,
            forkcg3: ForkCGNorm,
            framcg1: FramCGNorm,
            framcg3: FramCGPar,
            Iwr11: 0.0603,
            Iwr22: 0.12,
            Iwf11: 0.1405,
            Iwf22: 0.28,
            Ifork11: 0.05892,
            Ifork22: 0.06,
            Ifork33: 0.00708,
            Ifork31: 0.00756,
            Ifram11: 9.2,
            Ifram22: 11,
            Ifram33: 2.8,
            Ifram31: -2.4,
            mfork: 4,
            mframe: 85,
            mwf: 3,
            mwr: 2,
            g: 9.81,
            q1: 0,
            q2: 0,
            q4: 0,
            q5: 0,
            u1: 0,
            u2: 0,
            u3: v/PaperRadRear,
            u4: 0,
            u5: 0,
            u6: v/PaperRadFront}

# Here a dictionary is formed using the kinematic differential equations. The
# expression is perhaps slightly more complicated then necessary in this case,
# but should work in all cases in order the generate a dictionary in the form
# {qd: f(u)}.
sub_dict = solve_linear_system_LU(Matrix([KM._k_kqdot.T,
        -(KM._k_ku*Matrix(KM._u) + KM._f_k).T]).T, KM._qdot)

print 'Before Linearization of the \&quot;Forcing\&quot; Term'
# Linearizes the forcing vector; the equations are set up as MM udot = forcing,
# where MM is the mass matrix, udot is the vector representing the time
# derivatives of the generalized speeds, and forcing is a vector which contains
# both external forcing terms and internal forcing terms, such as centripital
# or coriolis forces.
# This actually returns a matrix with as many rows as *total* coordinates and
# speeds, but only as many columns as independent coordinates and speeds.
forcing_lin = KM.linearize().subs(sub_dict)

# As mentioned above, the size of the linearized forcing terms is expanded to
# include both q's and u's, so the mass matrix must have this done as well.
# This will likely be changed to be part of the linearized process, for future
# reference.
MM_full = (KM._k_kqdot).row_join(zeros((4, 6))).col_join((zeros((6,
                4))).row_join(KM.mass_matrix))

print 'Before Substitution of Numerical Values'
# I think this is pretty self explanatory. It takes a really long time though.
# I've experimented with using evalf with substitution, this failed due to
# maximum recursion depth being exceeded; I also tried lambdifying this, and am
# not sure what the error message I got there meant.
MM_full = MM_full.subs(val_dict).evalf()
forcing_lin = forcing_lin.subs(val_dict).evalf()

# Finally, we construct an &quot;A&quot; matrix for the form xdot = A x (x being the
# state vector), although in this case, the sizes are a little off. The
# following line extracts only the minimum entries required for eigenvalue
# analysis, which correspond to rows and columns for lean, steer, lean rate,
# and steer rate.
Amat = MM_full.inv() * forcing_lin
A = Amat.extract([1,2,4,6],[1,2,3,5])
print A
print 'v = 1'
print A.subs(v, 1).eigenvals()
print 'v = 2'
print A.subs(v, 2).eigenvals()
print 'v = 3'
print A.subs(v, 3).eigenvals()
print 'v = 4'
print A.subs(v, 4).eigenvals()
print 'v = 5'
print A.subs(v, 5).eigenvals()&lt;/pre&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/70/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/70/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/gilbertgede.wordpress.com/70/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/gilbertgede.wordpress.com/70/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/gilbertgede.wordpress.com/70/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/gilbertgede.wordpress.com/70/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/gilbertgede.wordpress.com/70/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/gilbertgede.wordpress.com/70/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/gilbertgede.wordpress.com/70/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/gilbertgede.wordpress.com/70/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/gilbertgede.wordpress.com/70/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/gilbertgede.wordpress.com/70/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/gilbertgede.wordpress.com/70/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/gilbertgede.wordpress.com/70/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;amp;blog=22677911&amp;amp;post=70&amp;amp;subd=gilbertgede&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-24T01:25:23+00:00</dc:date>
	<dc:creator>gilbertgede</dc:creator>
</item>
<item rdf:about="http://saptman.wordpress.com/?p=26">
	<title>Saptarshi Mandal: Permutation groups and Prufer codes</title>
	<link>http://saptman.wordpress.com/2011/07/23/permutation-groups-and-prufer-codes/</link>
	<content:encoded>&lt;p&gt;The last week was a bit hectic. It was the first time I had even been on a 13 hour flight.&lt;/p&gt;
&lt;p&gt;I had implemented Prufer codes before I left, which is basically a one-to-one mapping to labelled trees. Using Prufer codes, we can generate trees in an ordered manner, rank and unrank them and do all sorts of other cool stuff. By placing some restrictions on the enumerated Prufer codes, we can get the number of spanning trees of a complete bipartite graph. Apart from Prufer codes, I was also fixing up the algorithms I had implemented for bracelets, fixed-density and fixed-content necklaces, Lyndon brackets (these form the basis for free Lie algebra), meanders and stamp foldings. These are really specialized routines but it was decided in the mailing list that it would be really helpful for others to read.&lt;/p&gt;
&lt;p&gt;Once I get the Permutations branch in, I can begin work on the Permutation Groups module, so that will be my immediate task.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/saptman.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/saptman.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/saptman.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/saptman.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/saptman.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/saptman.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/saptman.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/saptman.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/saptman.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/saptman.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/saptman.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/saptman.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/saptman.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/saptman.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=saptman.wordpress.com&amp;amp;blog=23040289&amp;amp;post=26&amp;amp;subd=saptman&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-23T15:21:39+00:00</dc:date>
	<dc:creator>saptman</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8510171342300140296.post-3285901508455144916">
	<title>Sean Vig: Improving rewrite and represent for coupled/uncoupled states</title>
	<link>http://seanvig.blogspot.com/2011/07/improving-rewrite-and-represent-for.html</link>
	<content:encoded>This last week, most of the coding I have done has been working on getting represent working properly for coupled and uncoupled states. After doing a quick double check on what the basis vectors of a coupled or uncoupled state would be, I was able to get this code in. Tests for the represent logic will still need to be added, but so far it seems to be working properly.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In addition, I modified the rewrite logic to implement the represent method. This way all of the coupling and uncoupling logic is taken care of by represent, just as the represent method also takes care of all rotations of coordinate bases. To simplify the rewrite logic, I also implemented a vect_to_state, which returns a linear combination of states given any state vector when provided with the appropriate parameters, to specify coupled or uncoupled and what the j1 and j2 parameters are.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In addition to this work, I also wrote up the shell of the class that would handle tensor products of operators. However, in its current state, it doesn't function as one would expect, as the _apply_operator_* methods are not being called by qapply. This, in addition to noting that there is very little logic that is in the TensorProductState class has been making me think I can move most of the logic for states and operators that are uncoupled out of the spin class, implementing it instead in places like qapply and represent. The only trick would be the uncoupled-&amp;gt; coupled logic, which is just about the only bit of logic that the TensorProductState class has that couldn't necessarily be generalized, and the loss of the j1/j2/m1/m2 properties. I will be trying to do this in the coming week, which will in turn fix the problems I am having with getting tensor products of states to work.&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-3285901508455144916?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-23T00:30:30+00:00</dc:date>
	<dc:creator>Sean Vig</dc:creator>
</item>
<item rdf:about="http://nessgrh.wordpress.com/?p=343">
	<title>Tom Bachmann: Status Update—Week 9</title>
	<link>http://nessgrh.wordpress.com/2011/07/22/status-update%e2%80%94week-9/</link>
	<content:encoded>&lt;p&gt;This was one busy week again. I implemented polar numbers and changed over the integration and hyperexpand code to use them. This was more painful than I thought, but it seems to work now. Indeed the problems I mentioned before (other than matching) are gone now, as are the hacks. After this I cleaned up my branch to such an extent that I considered it ready for review. There are still some minor issues regarding numerical evaluation that I’m working to sort out, but this shouldn’t affect the review much.&lt;/p&gt;
&lt;p&gt;Then I started working on adding lerchphi and polylogarithms to sympy. The goal of this is to incorporate them into hyperexpand(), so that a few more interesting series can be summed. This is good fun. Here are a few &lt;a href=&quot;http://pastebin.com/raw.php?i=bjrqW8Hp&quot;&gt;exampes&lt;/a&gt;. As you can see, all the standard things that one expects to work do work. And expand_func() can be used to reduce lerchphi to polylogarithms. In fact it can also reduce to hurwitz zeta functions in some cases but that is a &lt;a href=&quot;http://pastebin.com/raw.php?i=aeyYzhmK&quot;&gt;mess&lt;/a&gt;. However, it is correct (tested numerically) and in a specific sense even simpler. In any case it’s nice to have it, even if it is not used much &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; .&lt;/p&gt;
&lt;p&gt;I also started extending hyperexpand to recognise lerch phi … this is slightly non-trivial (compared to normal table extensions) because lerch phi is actually not hypergeometric unless the parameter s is an integer, and even then the number of parameters of the hypergeometric function depends on s. Thus we need a special function to recognise such hypergeometric functions and generate formulae on the fly, this is what I am working on now. It will be finished on monday (so I have something cool to show off next week again *g*).&lt;/p&gt;
&lt;p&gt;Finally it turns out that there are some subtle bugs in random numeric testing for hyperexpand. Since the code is in master now and we are about to release this is fairly bad of course. But luckily another gsoc student is setting up jenkins and configured it in such a way to currently run the relevant tests every five minutes. That should allow me to weed out all bugs.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/343/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/343/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/343/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/343/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/343/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/343/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/343/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/343/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/343/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/343/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/343/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/343/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/343/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/343/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;amp;blog=22546379&amp;amp;post=343&amp;amp;subd=nessgrh&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-22T22:08:02+00:00</dc:date>
	<dc:creator>nessgrh</dc:creator>
</item>
<item rdf:about="http://f1728.wordpress.com/?p=193">
	<title>Jeremias Yehdegho: Week 9</title>
	<link>http://f1728.wordpress.com/2011/07/22/week-9/</link>
	<content:encoded>&lt;p&gt;Last week I proclaimed that for the Gröbner Walk it would be possible to avoid solving for the coefficients of a linear combination. I misunderstood this completely and it is wrong (I think).&lt;/p&gt;
&lt;p&gt;Also my previous lamenting about solvers has less merit. The claimed rounding errors in FGLM were not rounding errors but a problem of ordering expressions. This affected FGLM and rational simplification. &lt;strong&gt;EDIT:&lt;/strong&gt; This is not an error. I did not realize that expressions order variables always alphabetically…&lt;/p&gt;
&lt;p&gt;From the “Using Algebraic Geometry” book I implemented another way of solving polynomial equations. It sounds quite nice at first, but it turned out rather useless for SymPy: Instead of computing a Gröbner basis wrt lex, any term order can be used. Then, for every variably &lt;img src=&quot;http://s0.wp.com/latex.php?latex=X_i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;X_i&quot; class=&quot;latex&quot; title=&quot;X_i&quot; /&gt;, the eigenvalues of the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K&quot; class=&quot;latex&quot; title=&quot;K&quot; /&gt;-linear map &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%2B+I+%5Cmapsto+X_i+f+%2B+I&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f + I \mapsto X_i f + I&quot; class=&quot;latex&quot; title=&quot;f + I \mapsto X_i f + I&quot; /&gt; are computed (where the basis of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K%5BX_1%2C+%5Cldots%2C+X_n%5D%2FI&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K[X_1, \ldots, X_n]/I&quot; class=&quot;latex&quot; title=&quot;K[X_1, \ldots, X_n]/I&quot; /&gt; is given by the monomials not divisible by the leading terms of the reduced Gröbner basis). These eigenvalues are the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i&quot; class=&quot;latex&quot; title=&quot;i&quot; /&gt;-th coordinates of the solutions.&lt;/p&gt;
&lt;p&gt;The problem is that the dimension of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K%5BX_1%2C+%5Cldots%2C+X_n%5D%2FI&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K[X_1, \ldots, X_n]/I&quot; class=&quot;latex&quot; title=&quot;K[X_1, \ldots, X_n]/I&quot; /&gt; can be big and computing the eigenvalues by first computing the characteristic polynomial and then factoring it is slow. If we’d find eigenvalues numerically, it would be quite nice since the error would not propagate as it would otherwise. Additionally, if we’d allow randomness, only a single matrix would have to be considered (I haven’t read that part yet, though). Since finding the minimal polynomial of an algebraic number is just solving for the “last” variable, this could be modified to find minimal polynomials. Also, this can be useful for finding the radical of an ideal.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/f1728.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/f1728.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/f1728.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/f1728.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/f1728.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/f1728.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/f1728.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/f1728.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/f1728.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/f1728.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/f1728.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/f1728.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/f1728.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/f1728.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;amp;blog=22515617&amp;amp;post=193&amp;amp;subd=f1728&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-22T17:21:47+00:00</dc:date>
	<dc:creator>f1728</dc:creator>
</item>
<item rdf:about="http://nessgrh.wordpress.com/?p=317">
	<title>Tom Bachmann: Deciphering Branch Behaviour</title>
	<link>http://nessgrh.wordpress.com/2011/07/22/deciphering-branch-behaviour/</link>
	<content:encoded>&lt;p&gt;Handling branches in computer systems is indeed unbelievably subtle. Here is one slightly complicated example which comes out correctly, at least when looked at in the right way; this is encouraging. The following integral comes up in an ODE test: &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cint+%5Cfrac%7B%5Cmathrm%7Bd%7Dx%7D%7Bx+%5Csqrt%7B1+-+x%5E2%7D%7D+%3D+i+%5Carcsin%7B%5Cfrac%7B1%7D%7Bx%7D%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\int \frac{\mathrm{d}x}{x \sqrt{1 - x^2}} = i \arcsin{\frac{1}{x}}&quot; class=&quot;latex&quot; title=&quot;\int \frac{\mathrm{d}x}{x \sqrt{1 - x^2}} = i \arcsin{\frac{1}{x}}&quot; /&gt;. The right hand side is as computed by the meijerint code and looks suspicious, not being invariant under complex conjugation. However, note that on both sides are branched functions: &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csqrt%7B1+-+x%5E2%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\sqrt{1 - x^2}&quot; class=&quot;latex&quot; title=&quot;\sqrt{1 - x^2}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Carcsin%7B%5Cfrac%7B1%7D%7Bx%7D%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\arcsin{\frac{1}{x}}&quot; class=&quot;latex&quot; title=&quot;\arcsin{\frac{1}{x}}&quot; /&gt;. The left hand side is unbranched at the origin, whereas the right hand side is unbranched at infinity. The left hand side is branched at infinity, whereas the rigth hand side is not. (There is nothing unusual about this, there is no reason to expect indefinite integrals to retain branchpoints.)&lt;/p&gt;
&lt;p&gt;Thus in order to understand what is going on, we first have to understand the extension of both functions to true polar numbers &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt;, because this is what the meijer g code works with. Since inverse sine is surely nasty, let’s try to understand the square root expression. A clue comes from enabling debug output: the meijerint code decides &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7B1-x%5E2%7D%7D+%3D+G%28x%5E2+e%5E%7Bi+%5Cpi%7D%29+%3D+%5Csqrt%7B%5Cpi%7D+G_%7B1%2C+1%7D%5E%7B1%2C+1%7D+%5Cleft%28%5Cbegin%7Bmatrix%7D%5Cfrac%7B1%7D%7B2%7D+%5C%5C+0+%5Cend%7Bmatrix%7D%5Cmiddle%7C+x%5E2+e%5E%7Bi%5Cpi%7D+%5Cright%29&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{1}{\sqrt{1-x^2}} = G(x^2 e^{i \pi}) = \sqrt{\pi} G_{1, 1}^{1, 1} \left(\begin{matrix}\frac{1}{2} \\ 0 \end{matrix}\middle| x^2 e^{i\pi} \right)&quot; class=&quot;latex&quot; title=&quot;\frac{1}{\sqrt{1-x^2}} = G(x^2 e^{i \pi}) = \sqrt{\pi} G_{1, 1}^{1, 1} \left(\begin{matrix}\frac{1}{2} \\ 0 \end{matrix}\middle| x^2 e^{i\pi} \right)&quot; /&gt;. From the definitions, for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7Cx%7C+%3C+1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;|x| &amp;lt; 1&quot; class=&quot;latex&quot; title=&quot;|x| &amp;lt; 1&quot; /&gt; we find &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G%28x%29+%3D+F%28x%29&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;G(x) = F(x)&quot; class=&quot;latex&quot; title=&quot;G(x) = F(x)&quot; /&gt;, where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=F%28x%29&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;F(x)&quot; class=&quot;latex&quot; title=&quot;F(x)&quot; /&gt;, which we shall define only for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7Cx%7C+%3C+1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;|x| &amp;lt; 1&quot; class=&quot;latex&quot; title=&quot;|x| &amp;lt; 1&quot; /&gt;, is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%281+%2B+x%29%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;(1 + x)^{-\frac{1}{2}}&quot; class=&quot;latex&quot; title=&quot;(1 + x)^{-\frac{1}{2}}&quot; /&gt;, evaluated on the principal branch (indeed it is just a binomial series). Also from the definitions, we find that for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7Cx%7C+%3E+1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;|x| &amp;gt; 1&quot; class=&quot;latex&quot; title=&quot;|x| &amp;gt; 1&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G%28x%29+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7Bx%7D%7D+F%5Cleft%28%5Cfrac%7B1%7D%7Bx%7D%5Cright%29&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;G(x) = \frac{1}{\sqrt{x}} F\left(\frac{1}{x}\right)&quot; class=&quot;latex&quot; title=&quot;G(x) = \frac{1}{\sqrt{x}} F\left(\frac{1}{x}\right)&quot; /&gt;, where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7Bx%7D%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{1}{\sqrt{x}}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{\sqrt{x}}&quot; /&gt; denotes the holomorphic function &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D+%5Crightarrow+%5Cmathbb%7BC%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\mathcal{S} \rightarrow \mathbb{C}&quot; class=&quot;latex&quot; title=&quot;\mathcal{S} \rightarrow \mathbb{C}&quot; /&gt; (which is, in particular, continuous, i.e. free of branch cuts). Finally we know that for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7CArg%28x%29%7C+%3C+%5Cpi&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;|Arg(x)| &amp;lt; \pi&quot; class=&quot;latex&quot; title=&quot;|Arg(x)| &amp;lt; \pi&quot; /&gt;, these two definitions must patch together continuously.&lt;/p&gt;
&lt;p&gt;Note how the branching has been resolved crudely: for every polar number x (outside a set of measure zero which does not disconnect &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\mathcal{S}&quot; class=&quot;latex&quot; title=&quot;\mathcal{S}&quot; /&gt;) the integrand has acquired a definite value, continuous on circles. However, there is a circular branch cut on every other sheet.&lt;/p&gt;
&lt;p&gt;Now let’s look back at the integrand. The meijerint code interprets &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cint+%5Cfrac%7B1%7D%7Bx+%5Csqrt%7B1+-+x%5E2%7D%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\int \frac{1}{x \sqrt{1 - x^2}}&quot; class=&quot;latex&quot; title=&quot;\int \frac{1}{x \sqrt{1 - x^2}}&quot; /&gt; as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7BG%28e%5E%7Bi%5Cpi%7D+x%5E2%29%7D%7Bx%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{G(e^{i\pi} x^2)}{x}&quot; class=&quot;latex&quot; title=&quot;\frac{G(e^{i\pi} x^2)}{x}&quot; /&gt;. [It's &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7Bi%5Cpi%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;e^{i\pi}&quot; class=&quot;latex&quot; title=&quot;e^{i\pi}&quot; /&gt; and not &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7B-i%5Cpi%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;e^{-i\pi}&quot; class=&quot;latex&quot; title=&quot;e^{-i\pi}&quot; /&gt; since &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;-1&quot; class=&quot;latex&quot; title=&quot;-1&quot; /&gt; &quot;in the wild&quot; means &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7Bi%5Cpi%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;e^{i\pi}&quot; class=&quot;latex&quot; title=&quot;e^{i\pi}&quot; /&gt; in the standard branch. Of course one can specify this by hand if it is not the desired choice.] Hence for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7Cx%7C+%3E+1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;|x| &amp;gt; 1&quot; class=&quot;latex&quot; title=&quot;|x| &amp;gt; 1&quot; /&gt;, the integrand is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7BF%5Cleft%28%5Cfrac%7B-1%7D%7Bx%5E2%7D+%5Cright%29%7D%7Bx+%5Csqrt%7Be%5E%7Bi+%5Cpi%7Dx%5E2%7D+%7D+%3D+%5Cfrac%7BF%5Cleft%28%5Cfrac%7B-1%7D%7Bx%5E2%7D+%5Cright%29%7D%7Bx%5E2+e%5E%7Bi+%5Cpi%2F2%7D%7D+%3D+%5Cfrac%7B-i%7D%7Bx%5E2+%5Csqrt%7B1+-+%5Cfrac%7B1%7D%7Bx%5E2%7D%7D%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{F\left(\frac{-1}{x^2} \right)}{x \sqrt{e^{i \pi}x^2} } = \frac{F\left(\frac{-1}{x^2} \right)}{x^2 e^{i \pi/2}} = \frac{-i}{x^2 \sqrt{1 - \frac{1}{x^2}}}&quot; class=&quot;latex&quot; title=&quot;\frac{F\left(\frac{-1}{x^2} \right)}{x \sqrt{e^{i \pi}x^2} } = \frac{F\left(\frac{-1}{x^2} \right)}{x^2 e^{i \pi/2}} = \frac{-i}{x^2 \sqrt{1 - \frac{1}{x^2}}}&quot; /&gt; (Recall that in the first term the the square root means the continuous function on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathcal%7BS%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\mathcal{S}&quot; class=&quot;latex&quot; title=&quot;\mathcal{S}&quot; /&gt;, and so the second term is the same as the first. In the third term the square root denotes the principal branch, which is continuous throughout &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7Cx%7C%3E1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;|x|&amp;gt;1&quot; class=&quot;latex&quot; title=&quot;|x|&amp;gt;1&quot; /&gt; as well.)&lt;/p&gt;
&lt;p&gt;Finally, for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7Cx%7C+%3C+1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;|x| &amp;lt; 1&quot; class=&quot;latex&quot; title=&quot;|x| &amp;lt; 1&quot; /&gt;, the derivative of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Carcsin%7Bx%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\arcsin{x}&quot; class=&quot;latex&quot; title=&quot;\arcsin{x}&quot; /&gt; is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7B1+-+x%5E2%7D%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{1}{\sqrt{1 - x^2}}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{\sqrt{1 - x^2}}&quot; /&gt;, again with the principal branch of the square root (for the same reason as before: continue analytically on circles from the real-valued function). Thus lo and behold, if we differentiate &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i%5Carcsin%7B%5Cfrac%7B1%7D%7Bx%7D%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;i\arcsin{\frac{1}{x}}&quot; class=&quot;latex&quot; title=&quot;i\arcsin{\frac{1}{x}}&quot; /&gt; for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7Cx%7C+%3E+1&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;|x| &amp;gt; 1&quot; class=&quot;latex&quot; title=&quot;|x| &amp;gt; 1&quot; /&gt;, we do get out the right sign. As a side note, if we replace &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-x%5E2&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;-x^2&quot; class=&quot;latex&quot; title=&quot;-x^2&quot; /&gt; in the integrand by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7B-i%5Cpi%7Dx%5E2&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;e^{-i\pi}x^2&quot; class=&quot;latex&quot; title=&quot;e^{-i\pi}x^2&quot; /&gt;, we get the other sign.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/317/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/317/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/317/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/317/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/317/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/317/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/317/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/317/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/317/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/317/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/317/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/317/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/317/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/317/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;amp;blog=22546379&amp;amp;post=317&amp;amp;subd=nessgrh&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2011-07-22T13:43:53+00:00</dc:date>
	<dc:creator>nessgrh</dc:creator>
</item>
<item rdf:about="http://sympystats.wordpress.com/?p=193">
	<title>Matthew Rocklin: Multivariate Normal Random Variables</title>
	<link>http://sympystats.wordpress.com/2011/07/19/multivariate-normal-random-variables/</link>
	<content:encoded>&lt;p&gt;Multivariate Normal Random Variables are extraordinarily convenient.&lt;/p&gt;
&lt;p&gt;The probability density of a multivariate normal random variable is proportional to the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28X%29+%3D+e%5E%7B+%5Cleft%28-+%5Cmu+%2B+X%5Cright%29%5ET+%5CSigma%5E%7B-1%7D+%5Cleft%28-+%5Cmu+%2B+X%5Cright%29%7D+&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=3&quot; alt=&quot;f(X) = e^{ \left(- \mu + X\right)^T \Sigma^{-1} \left(- \mu + X\right)} &quot; class=&quot;latex&quot; title=&quot;f(X) = e^{ \left(- \mu + X\right)^T \Sigma^{-1} \left(- \mu + X\right)} &quot; /&gt;&lt;/p&gt;
&lt;p&gt;Where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=X&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;X&quot; class=&quot;latex&quot; title=&quot;X&quot; /&gt; is an n-dimensional state vector, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmu&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mu&quot; class=&quot;latex&quot; title=&quot;\mu&quot; /&gt; is the mean of the distribution, and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5CSigma&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\Sigma&quot; class=&quot;latex&quot; title=&quot;\Sigma&quot; /&gt; is an n by n covariance matrix. Pictorally a 2-D density might be represented like this:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://sympystats.files.wordpress.com/2011/07/mvn.png&quot;&gt;&lt;img src=&quot;http://sympystats.files.wordpress.com/2011/07/mvn.png?w=640&quot; alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-195&quot; title=&quot;mvn&quot; /&gt;&lt;/a&gt;With contour lines showing decreasing probability levels dropping off around the mean (blue x). This distribution is entirely defined by the two quantities, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmu&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mu&quot; class=&quot;latex&quot; title=&quot;\mu&quot; /&gt; which gives the center of the distribution and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5CSigma&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\Sigma&quot; class=&quot;latex&quot; title=&quot;\Sigma&quot; /&gt; which effectively gives the shape of the ellipses. That is, rather than carry around the functional form above, we can simply define X as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=X+%5Csim+N%28%5Cmu%2C+%5CSigma%29&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;X \sim N(\mu, \Sigma)&quot; class=&quot;latex&quot; title=&quot;X \sim N(\mu, \Sigma)&quot; /&gt; and forget the rest.&lt;/p&gt;
&lt;p&gt;Multivariate normals are convenient for three reasons&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They are easy to represent – we only need a mean and covariance matrix&lt;/li&gt;
&lt;li&gt;Linear transformations of normals are again normals&lt;/li&gt;
&lt;li&gt;All operations are represented with linear algebra&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First off, multivariate normals are simple to represent. This ends up being a big deal for functions on very high dimensional spaces. Imagine writing down a general function on 1000 variables.&lt;/p&gt;
&lt;p&gt;Second, linear functions of normals are again normals. This is huge. For example this means that we could project the image above to one of the coordinate axes (or any axis) and get out our old friend the bell curve. As we work on our random variables the three conveniences remain true.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sympystats.files.wordpress.com/2011/07/bell_curve.gif&quot;&gt;&lt;img src=&quot;http://sympystats.files.wordpress.com/2011/07/bell_curve.gif?w=300&amp;amp;h=169&quot; title=&quot;bell_curve&quot; height=&quot;169&quot; width=&quot;300&quot; alt=&quot;&quot; class=&quot;aligncenter size-medium wp-image-196&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Third, the computation to perform these linear transformations of random variables is done solely through linear algebra on the mean and covariance matrices. Fortunately, linear algebra is something about which we know quite a bit.&lt;/p&gt;
&lt;p&gt;So, as long as we’re willing to say that our variables are normally distributed (which is often not far from the truth) we can efficiently represent and compute on huge spaces of interconnected variables.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Multivariate Normals (MVNs) have been a goal of mine for some time while working on this project. They’re where this project starts to intersect with my actual work. I do lots of manipulations on MVNs and would like to stop dealing with all the matrix algebra.&lt;/p&gt;
&lt;p&gt;In order to build them correctly it was clear I would need a relatively powerful symbolic matrix expression system. I’ve been working on something over at &lt;a href=&quot;https://github.com/mrocklin/sympy/tree/matrix_expr/sympy/matrices&quot;&gt;this branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now we can represent symbolic matrices and, using them, represent MVN Random Variables&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# Lets make a Multivariate Normal Random Variable
&amp;gt;&amp;gt;&amp;gt; mu = MatrixSymbol('mu', n, 1) # n by 1 mean vector
&amp;gt;&amp;gt;&amp;gt; Sigma = MatrixSymbol('Sigma', n, n) # n by n covariance matrix
&amp;gt;&amp;gt;&amp;gt; X = Normal(mu, Sigma, 'X') # a multivariate normal random variable

# Density is represented just by the mean and covariance
&amp;gt;&amp;gt;&amp;gt; Density(X)
(μ, Σ)

&amp;gt;&amp;gt;&amp;gt; H = MatrixSymbol('H', k, n) # A linear operator
&amp;gt;&amp;gt;&amp;gt; Density(H*X) # What is the density of X after being transformed by H?
(H⋅μ, H⋅Σ⋅H')

# Lets make some measurement noise
&amp;gt;&amp;gt;&amp;gt; zerok = ZeroMatrix(k, 1) # mean zero
&amp;gt;&amp;gt;&amp;gt; R = MatrixSymbol('R', k, k) # symbolic covariance matrix
&amp;gt;&amp;gt;&amp;gt; noise = Normal(zerok, R, 'eta')

# Density after noise added in?
&amp;gt;&amp;gt;&amp;gt; Density(H*X + noise) # This is a Block matrix
⎛[H  I]⋅⎡μ⎤, [H  I]⋅⎡Σ  0⎤⋅⎡H'⎤⎞
⎜       ⎢ ⎥        ⎢    ⎥ ⎢  ⎥⎟
⎝       ⎣0⎦        ⎣0  R⎦ ⎣I ⎦⎠

# When we collapse the above expression it looks much nicer
&amp;gt;&amp;gt;&amp;gt; block_collapse(Density(H*X + noise))
(H⋅μ, R + H⋅Σ⋅H')

# Now lets imagine that we observe some value of HX+noise,
# what does that tell us about X? How does our prior distribution change?
&amp;gt;&amp;gt;&amp;gt; data = MatrixSymbol('data', k, 1)
&amp;gt;&amp;gt;&amp;gt; Density(X ,  Eq(H*X+noise, data)  ) # Density of X given  HX+noise==data
# I'm switching to the latex printer for this
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5Cmathbb%7BI%7D+%26+%5Cbold%7B0%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%28%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5CSigma+%26+%5Cbold%7B0%7D%5C%5C%5Cbold%7B0%7D+%26+R%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH%5ET%5C%5C%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%28%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH+%26+%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5CSigma+%26+%5Cbold%7B0%7D%5C%5C%5Cbold%7B0%7D+%26+R%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH%5ET%5C%5C%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D%5Cright%29%5E%7B-1%7D+%5Cleft%28+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH+%26+%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5Cmu%5C%5C%5Cbold%7B0%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+-+data%5Cright%29+%2B+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5Cmu%5C%5C%5Cbold%7B0%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D%5Cright%29++&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=2&quot; alt=&quot;\left[\begin{smallmatrix}\mathbb{I} &amp;amp; \bold{0}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}\Sigma &amp;amp; \bold{0}\\\bold{0} &amp;amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}H &amp;amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\Sigma &amp;amp; \bold{0}\\\bold{0} &amp;amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right]\right)^{-1} \left( \left[\begin{smallmatrix}H &amp;amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\mu\\\bold{0}\end{smallmatrix}\right] - data\right) + \left[\begin{smallmatrix}\mu\\\bold{0}\end{smallmatrix}\right]\right)  &quot; class=&quot;latex&quot; title=&quot;\left[\begin{smallmatrix}\mathbb{I} &amp;amp; \bold{0}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}\Sigma &amp;amp; \bold{0}\\\bold{0} &amp;amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}H &amp;amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\Sigma &amp;amp; \bold{0}\\\bold{0} &amp;amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right]\right)^{-1} \left( \left[\begin{smallmatrix}H &amp;amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\mu\\\bold{0}\end{smallmatrix}\right] - data\right) + \left[\begin{smallmatrix}\mu\\\bold{0}\end{smallmatrix}\right]\right)  &quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5Cmathbb%7BI%7D+%26+%5Cbold%7B0%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%28%5Cmathbb%7BI%7D+-+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5CSigma+%26+%5Cbold%7B0%7D%5C%5C%5Cbold%7B0%7D+%26+R%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH%5ET%5C%5C%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%28%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH+%26+%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5CSigma+%26+%5Cbold%7B0%7D%5C%5C%5Cbold%7B0%7D+%26+R%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH%5ET%5C%5C%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D%5Cright%29%5E%7B-1%7D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7DH+%26+%5Cmathbb%7BI%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D%5Cright%29+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5CSigma+%26+%5Cbold%7B0%7D%5C%5C%5Cbold%7B0%7D+%26+R%5Cend%7Bsmallmatrix%7D%5Cright%5D+%5Cleft%5B%5Cbegin%7Bsmallmatrix%7D%5Cmathbb%7BI%7D%5C%5C%5Cbold%7B0%7D%5Cend%7Bsmallmatrix%7D%5Cright%5D++&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=2&quot; alt=&quot;\left[\begin{smallmatrix}\mathbb{I} &amp;amp; \bold{0}\end{smallmatrix}\right] \left(\mathbb{I} - \left[\begin{smallmatrix}\Sigma &amp;amp; \bold{0}\\\bold{0} &amp;amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}H &amp;amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\Sigma &amp;amp; \bold{0}\\\bold{0} &amp;amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right]\right)^{-1} \left[\begin{smallmatrix}H &amp;amp; \mathbb{I}\end{smallmatrix}\right]\right) \left[\begin{smallmatrix}\Sigma &amp;amp; \bold{0}\\\bold{0} &amp;amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}\mathbb{I}\\\bold{0}\end{smallmatrix}\right]  &quot; class=&quot;latex&quot; title=&quot;\left[\begin{smallmatrix}\mathbb{I} &amp;amp; \bold{0}\end{smallmatrix}\right] \left(\mathbb{I} - \left[\begin{smallmatrix}\Sigma &amp;amp; \bold{0}\\\bold{0} &amp;amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right] \left(\left[\begin{smallmatrix}H &amp;amp; \mathbb{I}\end{smallmatrix}\right] \left[\begin{smallmatrix}\Sigma &amp;amp; \bold{0}\\\bold{0} &amp;amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}H^T\\\mathbb{I}\end{smallmatrix}\right]\right)^{-1} \left[\begin{smallmatrix}H &amp;amp; \mathbb{I}\end{smallmatrix}\right]\right) \left[\begin{smallmatrix}\Sigma &amp;amp; \bold{0}\\\bold{0} &amp;amp; R\end{smallmatrix}\right] \left[\begin{smallmatrix}\mathbb{I}\\\bold{0}\end{smallmatrix}\right]  &quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# Again, this block matrix expression can be collapsed to the following
&amp;gt;&amp;gt;&amp;gt; block_collapse(Density(X, Eq(H*X+noise, data) ))
μ + Σ⋅H'⋅(R + H⋅Σ⋅H')^-1⋅(-H⋅μ + -data) ,
(I + -Σ⋅H'⋅(R + H⋅Σ⋅H')^-1⋅H)⋅Σ
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbegin%7Bsmallmatrix%7D%5Cmu+%2B+%5CSigma+H%5ET+%5Cleft%28R+%2B+H+%5CSigma+H%5ET%5Cright%29%5E%7B-1%7D+%5Cleft%28++H+%5Cmu+-+data%5Cright%29%5Cend%7Bsmallmatrix%7D+&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=2&quot; alt=&quot;\begin{smallmatrix}\mu + \Sigma H^T \left(R + H \Sigma H^T\right)^{-1} \left(  H \mu - data\right)\end{smallmatrix} &quot; class=&quot;latex&quot; title=&quot;\begin{smallmatrix}\mu + \Sigma H^T \left(R + H \Sigma H^T\right)^{-1} \left(  H \mu - data\right)\end{smallmatrix} &quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbegin%7Bsmallmatrix%7D%5Cleft%28%5Cmathbb%7BI%7D+-+%5CSigma+H%5ET+%5Cleft%28R+%2B+H+%5CSigma+H%5ET%5Cright%29%5E%7B-1%7D+H%5Cright%29+%5CSigma%5Cend%7Bsmallmatrix%7D+&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=2&quot; alt=&quot;\begin{smallmatrix}\left(\mathbb{I} - \Sigma H^T \left(R + H \Sigma H^T\right)^{-1} H\right) \Sigma\end{smallmatrix} &quot; class=&quot;latex&quot; title=&quot;\begin{smallmatrix}\left(\mathbb{I} - \Sigma H^T \left(R + H \Sigma H^T\right)^{-1} H\right) \Sigma\end{smallmatrix} &quot; /&gt;&lt;/p&gt;
&lt;p&gt;This is the multivariate case of my &lt;a href=&quot;http://sympystats.wordpress.com/2011/07/02/a-lesson-in-data-assimilation-using-sympy/&quot;&gt;previous post on data assimilation&lt;/a&gt;. Effectively all I’ve done here is baked in the logic behind the&lt;a href=&quot;http://en.wikipedia.org/wiki/Kalman_filter&quot;&gt; Kalman Filter&lt;/a&gt; and exposed it through my statistics operators Density, Given, etc… so that it has become more approachable.&lt;/p&gt;
&lt;p&gt;Some disclaimers.&lt;br /&gt;
1) This is all untested. Please let me know if something is wrong. Already I see an error with the latex printing.&lt;br /&gt;
2) For organizational reasons it seems unlikely that Matrix Expressions will make it into SymPy in their current form. As a result this code probably won’t make it into SymPy any time soon.&lt;/p&gt;
&lt;p&gt;My active branch is over here:&lt;br /&gt;
&lt;a href=&quot;https://github.com/mrocklin/sympy/tree/mvn_rv/&quot;&gt;https://github.com/mrocklin/sympy/tree/mvn_rv/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;with the multivariate normal code here:&lt;br /&gt;
&lt;a href=&quot;https://github.com/mrocklin/sympy/tree/mvn_rv/sympy/statistics/mvnrv.py&quot;&gt;https://github.com/mrocklin/sympy/tree/mvn_rv/sympy/statistics/mvnrv.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The matrices live here:&lt;br /&gt;
&lt;a href=&quot;https://github.com/mrocklin/sympy/tree/matrix_expr/sympy/matrices&quot;&gt;https://github.com/mrocklin/sympy/tree/matrix_expr/sympy/matrices&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/193/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/193/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=193&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2011-07-19T23:59:14+00:00</dc:date>
	<dc:creator>mrocklin</dc:creator>
</item>

</rdf:RDF>
