<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://planet.sympy.org/">
	<title>Planet SymPy</title>
	<link>http://planet.sympy.org/</link>
	<description>Planet SymPy - http://planet.sympy.org/</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="http://matthewrocklin.com/blog//work/2012/11/01/Unification" />
			<rdf:li rdf:resource="http://gilbertgede.wordpress.com/2012/10/29/google-summer-of-code-mentor-summit-2012/" />
			<rdf:li rdf:resource="http://matthewrocklin.com/blog//work/2012/10/29/Matrix-Computations" />
			<rdf:li rdf:resource="http://blog.krastanov.org/?p=561" />
			<rdf:li rdf:resource="tag:fseoane.net/blog,2012-10-23:2012/learning-to-rank-with-scikit-learn-the-pairwise-transform/" />
			<rdf:li rdf:resource="http://sympystats.wordpress.com/?p=273" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-2520472460430880330.post-1520965087387896738" />
			<rdf:li rdf:resource="http://brianegranger.com/?p=215" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1160" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=266" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1154" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1122" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=512" />
			<rdf:li rdf:resource="http://www.catchmrbharath.in/programming/2012/08/19/gsoc-last-week" />
			<rdf:li rdf:resource="http://blog.catchmrbharath.in/programming/2012/08/19/gsoc-last-week" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=484" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=251" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=384" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/?p=420" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=555" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=445" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=357" />
			<rdf:li rdf:resource="http://www.catchmrbharath.in/programming/2012/08/05/gsoc-week-11" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/08/05/gsoc-week-11" />
			<rdf:li rdf:resource="http://blog.catchmrbharath.in/programming/2012/08/05/gsoc-week-11" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/2012/08/04/gsoc-blog-post-58/" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=235" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=551" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=429" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=222" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=308" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/?p=305" />
			<rdf:li rdf:resource="http://www.catchmrbharath.in/programming/2012/07/23/gsoc-week-9" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/07/23/gsoc-week-9" />
			<rdf:li rdf:resource="http://blog.catchmrbharath.in/programming/2012/07/23/gsoc-week-9" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=391" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=464" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=475" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=524" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=285" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=208" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=259" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=197" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=302" />
			<rdf:li rdf:resource="http://www.catchmrbharath.in/programming/2012/07/09/gsoc-week-7" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/07/09/gsoc-week-7" />
			<rdf:li rdf:resource="http://blog.catchmrbharath.in/programming/2012/07/09/gsoc-week-7" />
			<rdf:li rdf:resource="http://asmeurersympy.wordpress.com/?p=1112" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=181" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=238" />
			<rdf:li rdf:resource="http://krastanov.wordpress.com/?p=447" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=266" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/2012/07/07/another-week-ha-18/" />
			<rdf:li rdf:resource="http://scolobb.wordpress.com/?p=220" />
			<rdf:li rdf:resource="http://www.catchmrbharath.in/programming/2012/07/02/gsoc-week-6" />
			<rdf:li rdf:resource="http://catchmrbharath.github.com/programming/2012/07/02/gsoc-week-6" />
			<rdf:li rdf:resource="http://blog.catchmrbharath.in/programming/2012/07/02/gsoc-week-6" />
			<rdf:li rdf:resource="http://rhoforsympy.wordpress.com/?p=169" />
			<rdf:li rdf:resource="http://amakelov.wordpress.com/?p=245" />
			<rdf:li rdf:resource="http://angadhsympy.wordpress.com/2012/06/30/gsoc-2012-post-7-22/" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="http://matthewrocklin.com/blog//work/2012/11/01/Unification">
	<title>Matthew Rocklin: Unification in SymPy</title>
	<link>http://matthewrocklin.com/blog//work/2012/11/01/Unification</link>
	<content:encoded>&lt;p&gt;Unification is a way to ask questions by matching expressions against patterns. It is a powerful form of pattern matching found in logical programming languages like Prolog, Maude, and Datalog. It is the computational backbone behind the logical programming paradigm and is now a part of SymPy (in a pull request).&lt;/p&gt;

&lt;p&gt;Consider the following example. Imagine that you want to find the name of the MatrixSymbol within the Transpose in the following expression (i.e. we’re looking for the string &lt;code&gt;'X'&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Traditionally we could solve this toy problem with a simple function&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name_of_symbol_in_transpose_in_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matadd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matadd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We solve this task with unification by setting up a pattern and then unifying that pattern against a target expression&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Look for an expression tree like A.T + B&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Treat the leaves 'name', n, m, B as Wilds&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We get back a matching for each of the wildcards (name, n, m, B) and see that &lt;code&gt;'name'&lt;/code&gt; was matched to the string &lt;code&gt;'X'&lt;/code&gt;. Is this better or worse than the straight Python solution? Given the relative number of users between Python and Prolog it’s a safe bet that the style of Python programs have some significant advantages over the logical programming paradigm. Why would we program in this strange way?&lt;/p&gt;

&lt;p&gt;Unification allows a clean separation between &lt;em&gt;what we’re looking for&lt;/em&gt; and &lt;em&gt;how we find it&lt;/em&gt;. In the Python solution the mathematical definition of what we want is spread among a few lines and is buried inside of control flow.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matadd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In the unification solution the line&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;expresses exactly &lt;em&gt;what&lt;/em&gt; we’re looking for and gives no information on &lt;em&gt;how&lt;/em&gt; it should be found. The how is wrapped up in the call to &lt;code&gt;unify&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This separation of the &lt;em&gt;what&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; is what excites me about declarative programming. I think that this separation is useful when mathematical and algorithmic programmers need to work together to solve a large problem. This is often the case in scientific computing. Mathematical programmers think about &lt;em&gt;what&lt;/em&gt; should be done while algorithmic programmers think about &lt;em&gt;how&lt;/em&gt; it can be efficiently computed. Declarative techniques like unification enables these two groups to work independently.&lt;/p&gt;

&lt;h2 id=&quot;multiple_matches&quot;&gt;Multiple Matches&lt;/h2&gt;

&lt;p&gt;Lets see how unify works on a slightly more interesting expression&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x548cb90&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In this situation because both matrices &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are inside transposes our pattern to match “the name of a symbol in a transpose” could equally well return the strings &lt;code&gt;'X'&lt;/code&gt; or &lt;code&gt;'Y'&lt;/code&gt;. The unification algorithm will give us both of these options&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Because expr is commutative we can match &lt;code&gt;{A: Transpose(X), B: Transpose(Y)}&lt;/code&gt; or &lt;code&gt;{A: Transpose(Y), B: Transpose(X)}&lt;/code&gt; with equal validity. Instead of choosing one &lt;code&gt;unify&lt;/code&gt;, returns an iterable of all possible matches.&lt;/p&gt;

&lt;h2 id=&quot;combinatorial_blowup&quot;&gt;Combinatorial Blowup&lt;/h2&gt;

&lt;p&gt;In how many ways can we match the following pattern&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w + x + y + z&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to the following expression?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a + b + c + d + e + f&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a variant on the standard “N balls in K bins” problem often given in a discrete math course. The answer is “quite a few.” How can we avoid this combinatorial blowup?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;unify&lt;/code&gt; produces matches lazily. It returns a Python generator which yields results only as you ask for them. You can ask for just one match (a common case) very quickly.&lt;/p&gt;

&lt;p&gt;The bigger answer is that if you aren’t satisfied with this and want a better/stronger/faster way to find your desired match you could always &lt;em&gt;rewrite unify&lt;/em&gt;. The &lt;code&gt;unify&lt;/code&gt; function is all about the &lt;em&gt;how&lt;/em&gt; and is disconnected from the &lt;em&gt;what&lt;/em&gt;. Algorithmic programmers can tweak unify without disrupting the mathematical code.&lt;/p&gt;

&lt;h2 id=&quot;rewrites&quot;&gt;Rewrites&lt;/h2&gt;

&lt;p&gt;Unification is commonly used in term rewriting systems. Here is an example&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sincos_to_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rewriterule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sincos_to_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We were able to turn a mathematical identity &lt;code&gt;sin(x)**2 + cos(x)**2 =&amp;gt; 1&lt;/code&gt; into a function very simply using unification. However unification only does exact pattern matching so we can only find the &lt;code&gt;sin(x)**2 + cos(x)**2&lt;/code&gt; pattern if that pattern is at the top node in the tree. As a result we’re not able to apply this simplification within a larger expression tree&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sincos_to_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# no matches&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I will leave the solution of this problem to a future post. Instead, I want to describe why I’m working on all of this.&lt;/p&gt;

&lt;h2 id=&quot;matrix_computations&quot;&gt;Matrix Computations&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://matthewrocklin.com/blog/work/2012/10/29/Matrix-Computations/&quot;&gt;My last post&lt;/a&gt; was about translating Matrix Expressions into high-performance Fortran Code. I ended this post with the following problem:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;So how can we transform a matrix expression like&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Into a graph of &lt;code&gt;BLAS&lt;/code&gt; calls like one of the following?&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;DGEMM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DTRSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DTRMM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DTRSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;hr /&gt;
&lt;p&gt;This problem can be partially solved by unification and rewrite rules. Each &lt;code&gt;BLAS&lt;/code&gt; operation is described by a class&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot; Matrix Multiply &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_inputs&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_outputs&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;_outputs&lt;/code&gt; and &lt;code&gt;_inputs&lt;/code&gt; fields mathematically define when &lt;code&gt;MM&lt;/code&gt; is appropriate. This is all we need to make a transformation&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;pattern_source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pattern_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rewriterule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Unification allows us to describe &lt;code&gt;BLAS&lt;/code&gt; mathematically without thinking about how each individual operation will be detected in an expression. The control flow and the math are completely separated allowing us to think hard about each problem in isolation.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;I learned a great deal from the following sources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://aima.cs.berkeley.edu/&quot;&gt;Artificial Intelligence: A Modern Approach&lt;/a&gt; by Stuart Russel and Peter Norvig (Particularly section 9.2 in the second edition)&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/13092092/algorithms-for-unification-of-list-based-trees&quot;&gt;StackOverflow - Algorithms for Unification of list-based trees&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/13131491/partition-n-items-into-k-bins-in-python-lazily&quot;&gt;StackOverflow - Partition N items into K bins in Python lazily&lt;/a&gt; (Special thanks to &lt;a href=&quot;https://github.com/smichr&quot;&gt;Chris Smith&lt;/a&gt; who provided the best answer)&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Logic_programming&quot;&gt;Logic Programming&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Term_rewriting&quot;&gt;Term Rewriting&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.learnprolognow.org/&quot;&gt;My favorite Prolog tutorial&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://goo.gl/ZqVHJ&quot;&gt;SymPy E-mail thread on this topic&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/1633&quot;&gt;Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2012-11-01T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://gilbertgede.wordpress.com/2012/10/29/google-summer-of-code-mentor-summit-2012/">
	<title>Gilbert Gede: Google Summer of Code, Mentor Summit 2012</title>
	<link>http://gilbertgede.wordpress.com/2012/10/29/google-summer-of-code-mentor-summit-2012/</link>
	<content:encoded>&lt;p&gt;I probably should have written a blog post during the summer, displaying &lt;a href=&quot;http://angadhsympy.wordpress.com/&quot; target=&quot;_blank&quot; title=&quot;Angadh's work&quot;&gt;Angadh’s work&lt;/a&gt; . . . oh well.&lt;/p&gt;
&lt;p&gt;SymPy sent me as one of 3 mentors to the GSoC Mentor Summit this year, at the Googleplex. I was very excited to go, meet some of the other SymPy developers (Matthew and Stefan), and meet others in the open source community. My overall experience was a little mixed though.&lt;/p&gt;
&lt;p&gt;Matthew covered some feelings/conclusions I also share in his &lt;a href=&quot;http://sympystats.wordpress.com/2012/10/22/gsoc-mentor-summit/&quot; target=&quot;_blank&quot; title=&quot;Matthew's Mentor Summit Write-Up&quot;&gt;write-up&lt;/a&gt; on the event, but I have some others.&lt;/p&gt;
&lt;p&gt;Meeting and interacting with people in the open source community was probably the highlight of the trip for me. It was interesting to talk to a few people who had taken projects that were originally academic/research code and translated them into more successful (open source) products. I’m not sure if it will be relevant to SymPy’s future, but it might be to mine. A common thread seemed to be: jumpstart a project with grants, keep improving it for long enough with that money, and then put it in a position where it can join an umbrella organization or can be used by professionals who will pay for support. I certainly don’t speak for any other SymPy developers, but I’ve never got the feeling that this was the intended trajectory of the project (at least the selling support part).&lt;/p&gt;
&lt;p&gt;There was a talk on how to structure student/mentor/organization interactions for future GSoC projects. Some of the organizations have a much more defined structure than SymPy though, and benefit from things like daily group meetings. SymPy seems to have a more distributed organizational structure though – there are a lot of different modules, that all have some independence from each other. Despite this, SymPy’s code base is of very high quality, with credit going to the review-process/reviewers and the high standards that are enforced.&lt;/p&gt;
&lt;p&gt;The talk on forming non-profit organizations was also interesting. One major takeaway was that the IRS would rather you put your project under an existing umbrella, rather than grant you 501(c) status, due to the potential for abuse. Also, a lot of work is involved in managing money properly once a certain amount of cash flowing through. Although there are hurdles, getting to form a board of directors sounded interesting. Scheduling board meetings could also be fun (with the money being spent responsibly, of course…).&lt;/p&gt;
&lt;p&gt;On the less positive side of things: the unconference format. I think that it could have worked a lot better. Again, Matthew touched on this in his post, but all of the sessions (that were not just presentations) were very unfocused, with some more productive than others. The lack of moderation was a serious impediment to keeping the discussions on track. There were definitely a few times were people would hijack a session to try and talk about or show off their project. While I don’t have a problem with people showing off their work, there was limited time for each session.&lt;/p&gt;
&lt;p&gt;The time limitations on the sessions was another issue. Each one was ~45 minutes, and almost always there was another session waiting for you to leave the room so they could start. I think in a few of the talks I went to, people would have been happy to stay in the room and continue to discuss the subject. Perhaps the expectations, of the session initiators (and myself), on what we would accomplish were too high. Perhaps the 45 minutes should have been spent networking with other people thinking about that topic, and then spawning a more detailed discussion in the future? Again, I think moderation would have helped this.&lt;/p&gt;
&lt;p&gt;There were also some talks, with interesting sounding titles, that were just unproductive. There was too much recounting of what one organization did, with little generalization to what others could use. There was also little consideration of what decisions were made which led to important decisions; e.g. the fact that a project was split into parts A and B which were developed separately was recounted, but not what went into making that decision. Perhaps another example of expectations being too high…&lt;/p&gt;
&lt;p&gt;I’m certainly not going to write off the unconference format – I think it could have led to some really cool things. But I don’t think I will attend another one that has sessions which are so short and under-moderated.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/93/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/93/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;amp;blog=22677911&amp;amp;post=93&amp;amp;subd=gilbertgede&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-10-29T22:50:11+00:00</dc:date>
	<dc:creator>gilbertgede</dc:creator>
</item>
<item rdf:about="http://matthewrocklin.com/blog//work/2012/10/29/Matrix-Computations">
	<title>Matthew Rocklin: Matrix Computations in SymPy</title>
	<link>http://matthewrocklin.com/blog//work/2012/10/29/Matrix-Computations</link>
	<content:encoded>&lt;p&gt;I want to translate matrix expressions like this&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Into Fortran code that call BLAS and LAPACK code like this&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;fortran&quot;&gt;    &lt;span class=&quot;k&quot;&gt;subroutine &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;call &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dgemm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'N'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'N'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;call &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dtrsv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'N'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'N'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    END&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And then call it in Python like this&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;nA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Get numpy arrays&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nalpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;what_is_blas&quot;&gt;What is BLAS?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/BLAS&quot;&gt;BLAS&lt;/a&gt; stands for Basic Linear Algebra Subroutines. It is a library of Fortran functions for dense linear algebra first published in 1979.&lt;/p&gt;

&lt;p&gt;The most famous BLAS routine is &lt;a href=&quot;http://www.netlib.org/blas/dgemm.f&quot;&gt;DGEMM&lt;/a&gt; a routine for &lt;strong&gt;D&lt;/strong&gt;ouble precision &lt;strong&gt;GE&lt;/strong&gt;nerally structured &lt;strong&gt;M&lt;/strong&gt;atrix &lt;strong&gt;M&lt;/strong&gt;ultiplication. &lt;code&gt;DGEMM&lt;/code&gt; is very well implemented. &lt;code&gt;DGEMM&lt;/code&gt; traditionally handles blocking for fewer cache misses, autotuning for each individual architecture, and even assembly level code optimization. You should never code up your own matrix multiply, you should always use &lt;code&gt;DGEMM&lt;/code&gt;. Unfortunately, you may not know Fortran, and, even if you did, you might find the function header to be daunting.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SUBROUTINE DGEMM(TRANSA,TRANSB,M,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even if you’re capable of working at this low-level most scientific users are not. &lt;code&gt;DGEMM&lt;/code&gt; is fast but inaccessible. To solve this problem we usually build layers on top of &lt;code&gt;BLAS&lt;/code&gt;. For example &lt;code&gt;numpy.dot&lt;/code&gt; calls &lt;code&gt;DGEMM&lt;/code&gt; if the BLAS library is available on your system.&lt;/p&gt;

&lt;h2 id=&quot;why_not_just_use_numpy&quot;&gt;Why not just use NumPy?&lt;/h2&gt;

&lt;p&gt;If you’re reading this then you’re probably comfortable with NumPy and you’re very happy that it gives you access to highly optimized low-level code like &lt;code&gt;DGEMM&lt;/code&gt;. What else could we desire? NumPy has two flaws&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Each operation occurs at the Python level. This causes sub-optimal operation ordering and lots of unnecessary copies. For example the following code is executed as follows&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# store A*B  -&amp;gt; _1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# store _1*C -&amp;gt; _2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# store _2   -&amp;gt;  D&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It might have been cleaner to multiply &lt;code&gt;A*B*C&lt;/code&gt; as &lt;code&gt;(A*B)*C&lt;/code&gt; or &lt;code&gt;A*(B*C)&lt;/code&gt; depending on the shapes of the matrices. Additionally the temporary matrices &lt;code&gt;_1&lt;/code&gt;, and &lt;code&gt;_2&lt;/code&gt; did not need to be created. If we’re allowed to &lt;em&gt;reason about the computation&lt;/em&gt; before execution then we can make some substantial optimizaitons.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;BLAS contains many special functions for special cases. For example you can use &lt;code&gt;DSYMM&lt;/code&gt; when one of your matrices is &lt;strong&gt;SY&lt;/strong&gt;metric or &lt;code&gt;DTRMM&lt;/code&gt; when one of your matrices is &lt;strong&gt;TR&lt;/strong&gt;iangular. These allow for faster execution time if we are able to reason about our matrices.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;previous_work&quot;&gt;Previous Work&lt;/h2&gt;

&lt;p&gt;In the cases above we argue that we can make substantial gains if we are allowed to reason about the computation before it is executed. This is the job of a compiler. Computation usually happens as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write down code&lt;/li&gt;

&lt;li&gt;Reason about and transform code&lt;/li&gt;

&lt;li&gt;Execute code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step (2) is often removed in scripting languages for programmer simplicity. There has been a lot of activity recently in putting it back in for array computations. The following projects compile array expressions prior to execution&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NumExpr&lt;/li&gt;

&lt;li&gt;Theano&lt;/li&gt;

&lt;li&gt;Numba&lt;/li&gt;

&lt;li&gt;… I’m undoubtedly forgetting many excellent projects. Here is &lt;a href=&quot;https://github.com/Theano/Theano/wiki/Lazy-Matrix-Algebra-Ecosystem&quot;&gt;a more complete list&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;where_does_sympy_fit_in&quot;&gt;Where does SymPy fit in?&lt;/h2&gt;

&lt;p&gt;The projects above are all numerical in nature. They are generally good at solving problems of the first kind (operation ordering, inplace operations, …) but none of them think very clearly about the &lt;em&gt;mathematical&lt;/em&gt; properties of the matrices. This is where SymPy can be useful. Using the assumptions logical programming framework SymPy is able to reason about the properties of matrix expressions. Consider the following situation&lt;/p&gt;

&lt;p&gt;We know that &lt;code&gt;A&lt;/code&gt; is symmetric and positive definite. We know that &lt;code&gt;B&lt;/code&gt; is orthogonal.&lt;/p&gt;

&lt;p&gt;Question: is &lt;code&gt;BAB'&lt;/code&gt; symmetric and positive definite?&lt;/p&gt;

&lt;p&gt;Lets see how we can pose this question in SymPy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symmetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive_definite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orthogonal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symmetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive_definite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Positive-Definiteness is a very important property of matrix expressions. It strongly influences our choice of numerical algorithm. For example the fast &lt;a href=&quot;http://en.wikipedia.org/wiki/Cholesky&quot;&gt;Cholesky algorithm&lt;/a&gt; for LU decomposition may only be used if a matrix is symmetric and positive definite. Expert numerical analysts know this but most scientific programmers do not. NumPy does not know this but SymPy does.&lt;/p&gt;

&lt;h2 id=&quot;describing_blas&quot;&gt;Describing BLAS&lt;/h2&gt;

&lt;p&gt;We describe a new matrix operation in SymPy with code like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'S'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot; LU Decomposition &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_inputs&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_outputs&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view_map&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Both outputs are stored in first input&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# Always valid&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cholesky&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot; Cholesky LU Decomposition &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symmetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive_definite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This description allows us to consisely describe the expert knowledge used by numerical analysts. It allows us to describe the mathematical properties of linear algebraic operations.&lt;/p&gt;

&lt;h2 id=&quot;matrix_computation_graphs&quot;&gt;Matrix Computation Graphs&lt;/h2&gt;

&lt;p&gt;We usually write code in a linear top-down text file. This representation does not allow the full generality of a program. Instead we need to use a graph.&lt;/p&gt;

&lt;p&gt;A computation can be described as a directed acyclic graph (DAG) where each node in the graph is an atomic computation (a function call like &lt;code&gt;DGEMM&lt;/code&gt; or &lt;code&gt;Cholesky&lt;/code&gt;) and each directed edge represents a data dependency between function calls (an edge from &lt;code&gt;DGEMM&lt;/code&gt; to &lt;code&gt;Cholesky&lt;/code&gt; implies that the &lt;code&gt;Cholesky&lt;/code&gt; requires an output of the &lt;code&gt;DGEMM&lt;/code&gt; call in order to run). This graph may not contain cycles - they would imply that some set of jobs all depend on each other; they could never start.&lt;/p&gt;

&lt;p&gt;Graphs must be eventually linearized and turned into code. Before that happens we can think about optimal ordering and, if we feel adventurous, parallel scheduling onto different machines.&lt;/p&gt;

&lt;p&gt;SymPy contains a very simple Computation graph object. Here we localize all of the logic about inplace operations, ordering, and (eventually) parallel scheduling.&lt;/p&gt;

&lt;h2 id=&quot;translating_matrix_expressions_into_matrix_computations&quot;&gt;Translating Matrix Expressions into Matrix Computations&lt;/h2&gt;

&lt;p&gt;So how can we transform a matrix expression like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And a set of predicates like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower_triangular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower_triangular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invertible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Into a graph of &lt;code&gt;BLAS&lt;/code&gt; calls like one of the following?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;DGEMM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DTRSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DTRMM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DTRSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And, once we have this set of valid computations how do we choose the right one? This is the question that this project faces right now. These are both challenging problems.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.netlib.org/blas/&quot;&gt;BLAS&lt;/a&gt; and &lt;a href=&quot;http://www.netlib.org/lapack/&quot;&gt;LAPACK&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;J. Bergstra, O. Breuleux, F. Bastien, P. Lamblin, R. Pascanu, G. Desjardins, J. Turian, D. Warde-Farley and Y. Bengio. &lt;a href=&quot;http://www.iro.umontreal.ca/~lisa/pointeurs/theano_scipy2010.pdf&quot;&gt;&lt;em&gt;Theano: A CPU and GPU Math Expression Compiler&lt;/em&gt;&lt;/a&gt;. Proceedings of the Python for Scientific Computing Conference (SciPy) 2010. June 30 - July 3, Austin, TX]&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.continuum.io/&quot;&gt;Numba at Continuum&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/numexpr/&quot;&gt;NumExpr&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/Theano/Theano/wiki/Lazy-Matrix-Algebra-Ecosystem&quot;&gt;A list of matrix projects in Python&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://matthewrocklin.com/pub/ordering/partial-orders.pdf&quot;&gt;M. Rocklin, &lt;em&gt;Partial Ordering in Theano&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2012-10-29T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://blog.krastanov.org/?p=561">
	<title>Stefan Krastanov: Sage vs SymPy – integration</title>
	<link>http://blog.krastanov.org/2012/10/25/sage-vs-sympy-integration/</link>
	<content:encoded>&lt;p&gt;During the recent GSoC summit I had the chance to participate in many fascinating discussions. One such occasion was while meeting the Sage representative.&lt;/p&gt;
&lt;p&gt;A detail he mentioned, was that during his tests SymPy frequently failed to solve integrals that Sage (using Maxima) was able to solve. An explanation, in which I like to believe, would be that he was testing an old version of SymPy lacking the new integration routines implemented during the last few GSoC projects. Hence my decision the compare the most recent versions of both projects.&lt;/p&gt;
&lt;p&gt;The tested versions are SymPy 0.7.2 and Sage 5.3.&lt;/p&gt;
&lt;p&gt;Depending on screen size and wordpress theme the table might be badly formatted so here is a link to the &lt;a href=&quot;https://raw.github.com/wiki/sympy/sympy/sympy_sage_integration.html&quot; target=&quot;_blank&quot;&gt;wiki html page&lt;/a&gt; and a &lt;a href=&quot;http://krastanov.files.wordpress.com/2012/10/sympy_sage.pdf&quot;&gt;pdf&lt;/a&gt; version.&lt;/p&gt;
&lt;p&gt;It should be noted that Sage is more rigorous about the assumptions on its symbols and so it fails to integrate something like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5En&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;x^n&quot; class=&quot;latex&quot; title=&quot;x^n&quot; /&gt; if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; is not explicitly different than -1. I personally think that this is a feature and not a bug. Due to this difference however the script used to test Sage differs from the one used for SymPy.&lt;/p&gt;
&lt;p&gt;Another minor methodological difference in the tests is the fact that the timeout pattern that I used failed to work for the Sage interpreter. Hence, SymPy integration timeouts at about 120 seconds while Sage integration is manually interrupted when it takes too much time.&lt;/p&gt;
&lt;p&gt;Final methodological difference is that I purge the SymPy cache between each integral as otherwise the RAM usage becomes too great.&lt;/p&gt;
&lt;p&gt;The results show that SymPy is slightly better in using special functions to solve integrals, but there are also a few integrals that Sage solves while SymPy fails to do so. On few occasions Sage fails disgracefully, meaning  that it returns an error instead of unevaluated integral. When both packages fail to evaluate the integral SymPy is much slower to say so (timeout for SymPy compared to 1 or 2 seconds for Sage to return an unevaluated integral). Finally, on some occasions the results by Sage seem better simplified.&lt;/p&gt;
&lt;p&gt;Integrals solved better by SymPy (if you consider special functions “better”):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7Ba+x%5En+%2B+1%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{1}{a x^n + 1}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{a x^n + 1}&quot; /&gt; with the use of a special function while Sage returns unevaluated integrals&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba+x%5En%7D%7Bb+x%5Em+%2B+1%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{a x^n}{b x^m + 1}&quot; class=&quot;latex&quot; title=&quot;\frac{a x^n}{b x^m + 1}&quot; /&gt; with the use of a special function while Sage returns unevaluated integrals&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba+x%5En+%2B+1%7D%7Bb+x%5Em+%2B+1%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{a x^n + 1}{b x^m + 1}&quot; class=&quot;latex&quot; title=&quot;\frac{a x^n + 1}{b x^m + 1}&quot; /&gt; with the use of a special function while Sage returns unevaluated integrals&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba+x%5E5+%2B+x%5E3+%2B+1%7D%7Bb+x%5E5+%2B+x%5E3+%2B+1%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{a x^5 + x^3 + 1}{b x^5 + x^3 + 1}&quot; class=&quot;latex&quot; title=&quot;\frac{a x^5 + x^3 + 1}{b x^5 + x^3 + 1}&quot; /&gt; with the use of a special function while Sage returns unevaluated integrals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Integrals solved better by Sage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba+x%5E2%7D%7Bb+x%5E2+%2B+1%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{a x^2}{b x^2 + 1}&quot; class=&quot;latex&quot; title=&quot;\frac{a x^2}{b x^2 + 1}&quot; /&gt; solved by both but Sage’s result is simpler (it uses arctan instead of log)&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7Bx%5E2+%2B+1%7D%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{1}{\sqrt{x^2 + 1}}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{\sqrt{x^2 + 1}}&quot; /&gt; SymPy fails this simple integral&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Clog%5Cleft%28%5Cfrac%7Ba+x%5E3%7D%7Bb+x%5E3+%2B+1%7D%5Cright%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\log\left(\frac{a x^3}{b x^3 + 1}\right)&quot; class=&quot;latex&quot; title=&quot;\log\left(\frac{a x^3}{b x^3 + 1}\right)&quot; /&gt; solved by both but Sage’s result is much simpler&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Clog%5Cleft%28%5Cfrac%7Ba+x%5E2+%2B+1%7D%7Bb+x%5E2+%2B+1%7D%5Cright%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\log\left(\frac{a x^2 + 1}{b x^2 + 1}\right)&quot; class=&quot;latex&quot; title=&quot;\log\left(\frac{a x^2 + 1}{b x^2 + 1}\right)&quot; /&gt; SymPy fails&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Clog%5Cleft%28%5Cfrac%7Ba+x%5E3+%2B+1%7D%7Bb+x%5E3+%2B+1%7D%5Cright%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\log\left(\frac{a x^3 + 1}{b x^3 + 1}\right)&quot; class=&quot;latex&quot; title=&quot;\log\left(\frac{a x^3 + 1}{b x^3 + 1}\right)&quot; /&gt; SymPy fails&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csin+x+%2B+1%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{1}{\sin x + 1}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{\sin x + 1}&quot; /&gt; SymPy fails&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Ba+%5Csin%5E2+x+%2B+1%7D%7Bb+%5Csin%5E2+x+%2B+1%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{a \sin^2 x + 1}{b \sin^2 x + 1}&quot; class=&quot;latex&quot; title=&quot;\frac{a \sin^2 x + 1}{b \sin^2 x + 1}&quot; /&gt; SymPy fails&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code for the SymPy tests:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;import signal
from time import clock
from sympy import *
from sympy.core.cache import clear_cache

class TimeoutException(Exception):
pass

def timeout_handler(signum, frame):
raise TimeoutException()

a, b, x = symbols('a b x')
n, m = symbols('n m', integer=True)

integrants = [
x,
a*x**n,
a*x**n + 1,
a*x**b + 1,

1/x,
1/(x + 1),
1/(x**2 + 1),
1/(x**3 + 1),
1/(a*x**n),
1/(a*x**n + 1),
1/(a*x**b + 1),

a*x**2/(b*x**2 + 1),
a*x**3/(b*x**3 + 1),
a*x**n/(b*x**m + 1),
(a*x**2 + 1)/(b*x**2 + 1),
(a*x**3 + 1)/(b*x**3 + 1),
(a*x**n + 1)/(b*x**m + 1),
(a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1),

sqrt(1/x),
sqrt(1/(x + 1)),
sqrt(1/(x**2 + 1)),
sqrt(1/(x**3 + 1)),
sqrt(1/(a*x**n)),
sqrt(1/(a*x**n + 1)),
sqrt(1/(a*x**b + 1)),
sqrt(a*x**2/(b*x**2 + 1)),
sqrt(a*x**3/(b*x**3 + 1)),
sqrt(a*x**n/(b*x**m + 1)),
sqrt((a*x**2 + 1)/(b*x**2 + 1)),
sqrt((a*x**3 + 1)/(b*x**3 + 1)),
sqrt((a*x**n + 1)/(b*x**m + 1)),
sqrt((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)),

log(x),
log(1/x),
log(1/(x + 1)),
log(1/(x**2 + 1)),
log(1/(x**3 + 1)),
log(1/(a*x**n)),
log(1/(a*x**n + 1)),
log(1/(a*x**b + 1)),
log(a*x**2/(b*x**2 + 1)),
log(a*x**3/(b*x**3 + 1)),
log(a*x**n/(b*x**m + 1)),
log((a*x**2 + 1)/(b*x**2 + 1)),
log((a*x**3 + 1)/(b*x**3 + 1)),
log((a*x**n + 1)/(b*x**m + 1)),
log((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)),

sin(x),
sin(x)**n*cos(x)**m,
sin(a*x)**n*cos(b*x)**m,
1/sin(x),
1/(sin(x) + 1),
1/(sin(x)**2 + 1),
1/(sin(x)**3 + 1),
1/(a*sin(x)**n),
1/(a*sin(x)**n + 1),
1/(a*sin(x)**b + 1),
a*sin(x)**2/(b*sin(x)**2 + 1),
a*sin(x)**3/(b*sin(x)**3 + 1),
a*sin(x)**n/(b*sin(x)**m + 1),
(a*sin(x)**2 + 1)/(b*sin(x)**2 + 1),
(a*sin(x)**3 + 1)/(b*sin(x)**3 + 1),
(a*sin(x)**n + 1)/(b*sin(x)**m + 1),
(a*sin(x)**5 + sin(x)**3 + 1)/(b*sin(x)**5 + sin(x)**3 + 1),
]

integrated = []
durations = []

f_integrants = open('dump_integrants', 'w')
f_integrated = open('dump_integrated', 'w')
f_durations = open('dump_duration', 'w')

for index, integrant in enumerate(integrants):
clear_cache()
print '====================================='
print index, ' of ', len(integrants)
print '###', integrant
start = clock()
try:
old_handler = signal.signal(signal.SIGALRM, timeout_handler)
signal.alarm(120)
integrated.append(integrate(integrant, x))
signal.alarm(0)
except TimeoutException:
integrated.append(TimeoutException)
finally:
signal.signal(signal.SIGALRM, old_handler)
durations.append(clock() - start)
print '###', integrated[-1]
print 'in %f seconds'%durations[-1]

f_integrants.write(str(integrant))
f_integrated.write(str(integrated[-1]))
f_durations.write(str(durations[-1]))
f_integrants.write('\n')
f_integrated.write('\n')
f_durations.write('\n')
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;And for Sage:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;import signal
from time import clock
from sage.all import *
from sage.symbolic.integration.integral import indefinite_integral

class TimeoutException(Exception):
pass

def timeout_handler(signum, frame):
raise TimeoutException()

a, b, x = var('a b x')
n, m = var('n m')
assume(n, 'integer')
assume(m, 'integer')

assume(n != 1)
assume(n != -1)
assume(n != 2)
assume(n&amp;gt;0)
assume(b != 1)
assume(b != -1)
assume(b&amp;gt;0)
assume(a&amp;gt;0)

integrants = [
x,
a*x**n,
a*x**n + 1,
a*x**b + 1,

1/x,
1/(x + 1),
1/(x**2 + 1),
1/(x**3 + 1),
1/(a*x**n),
1/(a*x**n + 1),
1/(a*x**b + 1),

a*x**2/(b*x**2 + 1),
a*x**3/(b*x**3 + 1),
a*x**n/(b*x**m + 1),
(a*x**2 + 1)/(b*x**2 + 1),
(a*x**3 + 1)/(b*x**3 + 1),
(a*x**n + 1)/(b*x**m + 1),
(a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1),

sqrt(1/x),
sqrt(1/(x + 1)),
sqrt(1/(x**2 + 1)),
sqrt(1/(x**3 + 1)),
sqrt(1/(a*x**n)),
sqrt(1/(a*x**n + 1)),
sqrt(1/(a*x**b + 1)),
sqrt(a*x**2/(b*x**2 + 1)),
sqrt(a*x**3/(b*x**3 + 1)),
sqrt(a*x**n/(b*x**m + 1)),
sqrt((a*x**2 + 1)/(b*x**2 + 1)),
sqrt((a*x**3 + 1)/(b*x**3 + 1)),
sqrt((a*x**n + 1)/(b*x**m + 1)),
sqrt((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)),

log(x),
log(1/x),
log(1/(x + 1)),
log(1/(x**2 + 1)),
log(1/(x**3 + 1)),
log(1/(a*x**n)),
log(1/(a*x**n + 1)),
log(1/(a*x**b + 1)),
log(a*x**2/(b*x**2 + 1)),
log(a*x**3/(b*x**3 + 1)),
log(a*x**n/(b*x**m + 1)),
log((a*x**2 + 1)/(b*x**2 + 1)),
log((a*x**3 + 1)/(b*x**3 + 1)),
log((a*x**n + 1)/(b*x**m + 1)),
log((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)),

sin(x),
sin(x)**n*cos(x)**m,
sin(a*x)**n*cos(b*x)**m,
1/sin(x),
1/(sin(x) + 1),
1/(sin(x)**2 + 1),
1/(sin(x)**3 + 1),
1/(a*sin(x)**n),
1/(a*sin(x)**n + 1),
1/(a*sin(x)**b + 1),
a*sin(x)**2/(b*sin(x)**2 + 1),
a*sin(x)**3/(b*sin(x)**3 + 1),
a*sin(x)**n/(b*sin(x)**m + 1),
(a*sin(x)**2 + 1)/(b*sin(x)**2 + 1),
(a*sin(x)**3 + 1)/(b*sin(x)**3 + 1),
(a*sin(x)**n + 1)/(b*sin(x)**m + 1),
(a*sin(x)**5 + sin(x)**3 + 1)/(b*sin(x)**5 + sin(x)**3 + 1),
]

integrated = []
durations = []

f_integrants = open('dump_integrants', 'w')
f_integrated = open('dump_integrated', 'w')
f_durations = open('dump_duration', 'w')

for index, integrant in enumerate(integrants):
print '====================================='
print index, ' of ', len(integrants)
print '###', integrant
start = clock()
try:
old_handler = signal.signal(signal.SIGALRM, timeout_handler)
signal.alarm(120)
integrated.append(indefinite_integral(integrant, x))
signal.alarm(0)
except Exception, e:
integrated.append(e)
finally:
signal.signal(signal.SIGALRM, old_handler)
durations.append(clock() - start)
print '###', integrated[-1]
print 'in %f seconds'%durations[-1]

f_integrants.write(str(integrant))
f_integrated.write(str(integrated[-1]))
f_durations.write(str(durations[-1]))
f_integrants.write('\n')
f_integrated.write('\n')
f_durations.write('\n')
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Below is the complete table (available as a &lt;a href=&quot;https://raw.github.com/wiki/sympy/sympy/sympy_sage_integration.html&quot; target=&quot;_blank&quot;&gt;wiki html page&lt;/a&gt; and a &lt;a href=&quot;http://krastanov.files.wordpress.com/2012/10/sympy_sage.pdf&quot;&gt;pdf&lt;/a&gt;).&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;Sympy vs Sage integration routines&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Legend:&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Disgraceful failure&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout or manual interupt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Return an unevalued integral&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Asking for assumptions&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Solution with fancy special functions&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;1&quot; style=&quot;font-size: 10pt;&quot; rowspan=&quot;2&quot;&gt;Integrant&lt;/td&gt;
&lt;td colspan=&quot;2&quot; style=&quot;font-size: 10pt;&quot; rowspan=&quot;1&quot;&gt;Sympy `integrate`&lt;/td&gt;
&lt;td colspan=&quot;2&quot; style=&quot;font-size: 10pt;&quot; rowspan=&quot;1&quot;&gt;Sage `indefinite_integral`&lt;/td&gt;
&lt;td colspan=&quot;1&quot; style=&quot;font-size: 10pt;&quot; rowspan=&quot;2&quot;&gt;Comments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Result&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;cpu time&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Result&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;cpu time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x**2/2&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/2*x^2&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x**n&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x**(n + 1)/(n + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x^(n + 1)/(n + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage asks whether the denominator is zero before solving.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x**n + 1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x**(n + 1)/(n + 1) + x&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x^(n + 1)/(n + 1) + x&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage asks whether the denominator is zero before solving.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x**b + 1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x**(b + 1)/(b + 1) + x&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x^(b + 1)/(b + 1) + x&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage asks whether the denominator is zero before solving.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/x&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/(x + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(x + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(x + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/(x**2 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;atan(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;arctan(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/(x**3 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(x + 1)/3 – log(x**2 – x + 1)/6 + sqrt(3)*atan(2*sqrt(3)*x/3 – sqrt(3)/3)/3&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/3*sqrt(3)*arctan(1/3*(2*x – 1)*sqrt(3)) + 1/3*log(x + 1) – 1/6*log(x^2 – x + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x**(-n)/a&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x**(-n + 1)/(a*(-n + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-x^(-n + 1)/((n – 1)*a)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage asks whether the denominator is zero before solving.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/(a*x**n + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x*gamma(1/n)*lerchphi(a*x**n*exp_polar(I*pi), 1, 1/n)/(n**2*gamma(1 + 1/n))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(1/(x^n*a + 1), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sympy solves with special functions an integral that Sage cannot solve.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/(a*x**b + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x*gamma(1/b)*lerchphi(a*x**b*exp_polar(I*pi), 1, 1/b)/(b**2*gamma(1 + 1/b))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(1/(x^b*a + 1), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sympy solves with special functions an integral that Sage cannot solve.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x**2/(b*x**2 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*(sqrt(-1/b**3)*log(-b*sqrt(-1/b**3) + x)/2 – sqrt(-1/b**3)*log(b*sqrt(-1/b**3) + x)/2 + x/b)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(x/b – arctan(sqrt(b)*x)/b^(3/2))*a&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x**3/(b*x**3 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*(RootSum(_t**3 + 1/(27*b**4), Lambda(_t, _t*log(-3*_t*b + x))) + x/b)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-1/6*(2*sqrt(3)*arctan(1/3*(2*b^(2/3)*x – b^(1/3))*sqrt(3)/b^(1/3))/b^(4/3) – 6*x/b – log(b^(2/3)*x^2 – b^(1/3)*x + 1)/b^(4/3) + 2*log((b^(1/3)*x + 1)/b^(1/3))/b^(4/3))*a&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Interesting examples deserving more study as Sympy uses the sum of the roots of a high order polynomial while Sage uses elementary special functions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x**n/(b*x**m + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*(n*x*x**n*gamma(n/m + 1/m)*lerchphi(b*x**m*exp_polar(I*pi), 1, n/m + 1/m)/(m**2*gamma(1 + n/m + 1/m)) + x*x**n*gamma(n/m + 1/m)*lerchphi(b*x**m*exp_polar(I*pi), 1, n/m + 1/m)/(m**2*gamma(1 + n/m + 1/m)))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(m*integrate(x^n/((m – n – 1)*b^2*x^(2*m) + 2*(m – n – 1)*x^m*b + m – n – 1), x) – x^(n + 1)/((m – n – 1)*x^m*b + m – n – 1))*a&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sympy solves with special functions an integral that Sage cannot solve.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(a*x**2 + 1)/(b*x**2 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x/b + sqrt((-a**2 + 2*a*b – b**2)/b**3)*log(-b*sqrt((-a**2 + 2*a*b – b**2)/b**3)/(a – b) + x)/2 – sqrt((-a**2 + 2*a*b – b**2)/b**3)*log(b*sqrt((-a**2 + 2*a*b – b**2)/b**3)/(a – b) + x)/2&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x/b – (a – b)*arctan(sqrt(b)*x)/b^(3/2)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage symplifies better (log-to-trig formulas).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(a*x**3 + 1)/(b*x**3 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x/b + RootSum(_t**3 + (a**3 – 3*a**2*b + 3*a*b**2 – b**3)/(27*b**4), Lambda(_t, _t*log(-3*_t*b/(a – b) + x)))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x/b – 1/3*(a*b – b^2)*sqrt(3)*arctan(1/3*(2*b^(2/3)*x – b^(1/3))*sqrt(3)/b^(1/3))/b^(7/3) + 1/6*(a*b^(2/3) – b^(5/3))*log(b^(2/3)*x^2 – b^(1/3)*x + 1)/b^2 – 1/3*(a*b^(2/3) – b^(5/3))*log((b^(1/3)*x + 1)/b^(1/3))/b^2&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Interesting examples deserving more study as Sympy uses the sum of the roots of a high order polynomial while Sage uses elementary special functions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(a*x**n + 1)/(b*x**m + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*(n*x*x**n*gamma(n/m + 1/m)*lerchphi(b*x**m*exp_polar(I*pi), 1, n/m + 1/m)/(m**2*gamma(1 + n/m + 1/m)) + x*x**n*gamma(n/m + 1/m)*lerchphi(b*x**m*exp_polar(I*pi), 1, n/m + 1/m)/(m**2*gamma(1 + n/m + 1/m))) + x*gamma(1/m)*lerchphi(b*x**m*exp_polar(I*pi), 1, 1/m)/(m**2*gamma(1 + 1/m))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*m*integrate(x^n/((m – n – 1)*b^2*x^(2*m) + 2*(m – n – 1)*x^m*b + m – n – 1), x) – a*x^(n + 1)/((m – n – 1)*x^m*b + m – n – 1) + integrate(1/(x^m*b + 1), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sympy solves with special functions an integral that Sage cannot solve.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x/b + RootSum(_t**5 + _t**3*(500*a**2*b**3 + 27*a**2 – 1000*a*b**4 – 54*a*b + 500*b**5 + 27*b**2)/(3125*b**6 + 108*b**3) + _t**2*(27*a**3 – 81*a**2*b + 81*a*b**2 – 27*b**3)/(3125*b**6 + 108*b**3) + _t*(9*a**4 – 36*a**3*b + 54*a**2*b**2 – 36*a*b**3 + 9*b**4)/(3125*b**6 + 108*b**3) + (a**5 – 5*a**4*b + 10*a**3*b**2 – 10*a**2*b**3 + 5*a*b**4 – b**5)/(3125*b**6 + 108*b**3), Lambda(_t, _t*log(x + (3662109375*_t**4*b**12 + 3986718750*_t**4*b**9 + 242757000*_t**4*b**6 + 3779136*_t**4*b**3 – 1054687500*_t**3*a*b**9 – 72900000*_t**3*a*b**6 – 1259712*_t**3*a*b**3 + 1054687500*_t**3*b**10 + 72900000*_t**3*b**7 + 1259712*_t**3*b**4 + 410156250*_t**2*a**2*b**9 + 655340625*_t**2*a**2*b**6 + 51267654*_t**2*a**2*b**3 + 944784*_t**2*a**2 – 820312500*_t**2*a*b**10 – 1310681250*_t**2*a*b**7 – 102535308*_t**2*a*b**4 – 1889568*_t**2*a*b + 410156250*_t**2*b**11 + 655340625*_t**2*b**8 + 51267654*_t**2*b**5 + 944784*_t**2*b**2 – 48828125*_t*a**3*b**9 – 186046875*_t*a**3*b**6 + 16774290*_t*a**3*b**3 + 629856*_t*a**3 + 146484375*_t*a**2*b**10 + 558140625*_t*a**2*b**7 – 50322870*_t*a**2*b**4 – 1889568*_t*a**2*b – 146484375*_t*a*b**11 – 558140625*_t*a*b**8 + 50322870*_t*a*b**5 + 1889568*_t*a*b**2 + 48828125*_t*b**12 + 186046875*_t*b**9 – 16774290*_t*b**6 – 629856*_t*b**3 – 2812500*a**4*b**6 + 3596400*a**4*b**3 + 104976*a**4 + 11250000*a**3*b**7 – 14385600*a**3*b**4 – 419904*a**3*b – 16875000*a**2*b**8 + 21578400*a**2*b**5 + 629856*a**2*b**2 + 11250000*a*b**9 – 14385600*a*b**6 – 419904*a*b**3 – 2812500*b**10 + 3596400*b**7 + 104976*b**4)/(9765625*a**4*b**8 + 26493750*a**4*b**5 + 746496*a**4*b**2 – 39062500*a**3*b**9 – 105975000*a**3*b**6 – 2985984*a**3*b**3 + 58593750*a**2*b**10 + 158962500*a**2*b**7 + 4478976*a**2*b**4 – 39062500*a*b**11 – 105975000*a*b**8 – 2985984*a*b**5 + 9765625*b**12 + 26493750*b**9 + 746496*b**6))))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;106&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-(a – b)*integrate((x^3 + 1)/(b*x^5 + x^3 + 1), x)/b + a*x/b&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sympy solves with special functions an integral that Sage cannot solve.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(1/x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;2*x*sqrt(1/x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;2*x*sqrt(1/x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(1/(x + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;2*x*sqrt(1/(x + 1)) + 2*sqrt(1/(x + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;2/sqrt(1/(x + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(1/(x**2 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Integral(sqrt(1/(x**2 + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;arcsinh(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sympy cannot solve this simple integral while Sage can.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(1/(x**3 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Integral(sqrt(1/(x**3 + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(sqrt(1/(x^3 + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(x**(-n)/a)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-2*x*sqrt(1/a)*sqrt(x**(-n))/(n – 2)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-2*x*sqrt(x^(-n)/a)/(n-2)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage asks whether the denominator is zero before solving.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(1/(a*x**n + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Integral(sqrt(1/(a*x**n + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;29&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(sqrt(1/(x^n*a + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(1/(a*x**b + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Integral(sqrt(1/(a*x**b + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;35&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(sqrt(1/(x^b*a + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(a*x**2/(b*x**2 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(a)*x*sqrt(x**2)*sqrt(1/(b*x**2 + 1)) + sqrt(a)*sqrt(x**2)*sqrt(1/(b*x**2 + 1))/(b*x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(sqrt(a)*b*x^2 + sqrt(a))/(sqrt(b*x^2 + 1)*b)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(a*x**3/(b*x**3 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Integral(sqrt(a*x**3/(b*x**3 + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;7&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(sqrt(a*x^3/(b*x^3 + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt(a*x**n/(b*x**m + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;115&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(sqrt(x^n*a/(x^m*b + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt((a*x**2 + 1)/(b*x**2 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;110&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(sqrt((a*x^2 + 1)/(b*x^2 + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt((a*x**3 + 1)/(b*x**3 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;109&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(sqrt((a*x^3 + 1)/(b*x^3 + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt((a*x**n + 1)/(b*x**m + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;114&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(sqrt((x^n*a + 1)/(x^m*b + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sqrt((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;104&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;integrate(sqrt((a*x^5 + x^3 + 1)/(b*x^5 + x^3 + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x*log(x) – x&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x*log(x) – x&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(1/x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-x*log(x) + x&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-x*log(x) + x&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(1/(x + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-x*log(x + 1) + x – log(x + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-(x + 1)*log(x + 1) + x + 1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(1/(x**2 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-x*log(x**2 + 1) + 2*x – 2*I*log(x + I) + I*log(x**2 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-x*log(x^2 + 1) + 2*x – 2*arctan(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(1/(x**3 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-x*log(x**3 + 1) + 3*x – 3*log(x + 1)/2 + sqrt(3)*I*log(x + 1)/2 + log(x**3 + 1)/2 – sqrt(3)*I*log(x**3 + 1)/2 + sqrt(3)*I*log(x – 1/2 – sqrt(3)*I/2)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-x*log(x^3 + 1) – sqrt(3)*arctan(1/3*(2*x – 1)*sqrt(3)) + 3*x – log(x + 1) + 1/2*log(x^2 – x + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(x**(-n)/a)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-n*x*log(x) + n*x – x*log(a)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;n*x + x*log(x^(-n)/a)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(1/(a*x**n + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Integral(log(1/(a*x**n + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;68&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;n*x – n*integrate(1/(a*e^(n*log(x)) + 1), x) – x*log(x^n*a + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(1/(a*x**b + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;91&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;b*x – b*integrate(1/(a*e^(b*log(x)) + 1), x) – x*log(a*e^(b*log(x)) + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(a*x**2/(b*x**2 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x*log(a) + 2*x*log(x) – x*log(b*x**2 + 1) + 2*I*log(x – I*sqrt(1/b))/(b*sqrt(1/b)) – I*log(b*x**2 + 1)/(b*sqrt(1/b))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x*log(a*x^2/(b*x^2 + 1)) – 2*arctan(sqrt(b)*x)/sqrt(b)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(a*x**3/(b*x**3 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-216*b**4*x**6*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 216*(-1)**(2/3)*b**4*x**6*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 72*(-1)**(1/6)*sqrt(3)*b**4*x**6*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 72*sqrt(3)*I*b**4*x**6*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 588*b**2*x**5*(1/b)**(2/3)*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 1764*b**2*x**5*(1/b)**(2/3)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 588*b**2*x**5*(1/b)**(2/3)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 630*b**2*x**5*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 420*(-1)**(5/6)*sqrt(3)*b**2*x**5*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 210*sqrt(3)*I*b**2*x**5*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 981*b**2*x**3*(1/b)**(4/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 981*(-1)**(2/3)*b**2*x**3*(1/b)**(4/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 327*(-1)**(1/6)*sqrt(3)*b**2*x**3*(1/b)**(4/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 327*sqrt(3)*I*b**2*x**3*(1/b)**(4/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 135*b**2*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 135*(-1)**(2/3)*b**2*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 45*(-1)**(1/6)*sqrt(3)*b**2*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 45*sqrt(3)*I*b**2*(1/b)**(7/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 147*(-1)**(2/3)*b*x**4*log(a)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 49*(-1)**(1/6)*sqrt(3)*b*x**4*log(a)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 49*(-1)**(5/6)*sqrt(3)*b*x**4*log(a)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 147*(-1)**(1/3)*b*x**4*log(a)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 882*(-1)**(2/3)*b*x**4*log(a)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(1/6)*sqrt(3)*b*x**4*log(a)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(5/6)*sqrt(3)*b*x**4*log(a)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(1/3)*b*x**4*log(a)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(1/3)*b*x**4*log(a)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 98*(-1)**(5/6)*sqrt(3)*b*x**4*log(a)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 98*(-1)**(1/6)*sqrt(3)*b*x**4*log(a)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(2/3)*b*x**4*log(a)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 588*(-1)**(2/3)*b*x**4*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 1323*(-1)**(2/3)*b*x**4*log(x)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 441*(-1)**(1/6)*sqrt(3)*b*x**4*log(x)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 441*(-1)**(5/6)*sqrt(3)*b*x**4*log(x)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 1323*(-1)**(1/3)*b*x**4*log(x)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 882*(-1)**(1/3)*b*x**4*log(x)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(5/6)*sqrt(3)*b*x**4*log(x)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(1/6)*sqrt(3)*b*x**4*log(x)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(2/3)*b*x**4*log(x)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 882*(-1)**(1/3)*b*x**4*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(5/6)*sqrt(3)*b*x**4*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(1/6)*sqrt(3)*b*x**4*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(2/3)*b*x**4*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(5/6)*sqrt(3)*b*x**4*log(x – (-1)**(1/3)*(1/b)**(1/3))/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(1/3)*b*x**4*log(x – (-1)**(1/3)*(1/b)**(1/3))/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 147*(-1)**(2/3)*b*x**4*log(b*x**3 + 1)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 49*(-1)**(1/6)*sqrt(3)*b*x**4*log(b*x**3 + 1)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 49*(-1)**(5/6)*sqrt(3)*b*x**4*log(b*x**3 + 1)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 147*(-1)**(1/3)*b*x**4*log(b*x**3 + 1)**2/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 588*(-1)**(2/3)*b*x**4*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(1/6)*sqrt(3)*b*x**4*log(x – (-1)**(1/3)*sqrt(3)*I*(1/b)**(1/3)/2 + (-1)**(1/3)*(1/b)**(1/3)/2)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(2/3)*b*x**4*log(x – (-1)**(1/3)*sqrt(3)*I*(1/b)**(1/3)/2 + (-1)**(1/3)*(1/b)**(1/3)/2)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(2/3)*b*x**4/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 98*(-1)**(1/6)*sqrt(3)*b*x**4/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 98*(-1)**(5/6)*sqrt(3)*b*x**4/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(1/3)*b*x**4/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 588*b*x**2*(1/b)**(2/3)*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 1764*b*x**2*(1/b)**(2/3)*log(x)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 588*b*x**2*(1/b)**(2/3)*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 945*b*x**2*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 630*(-1)**(5/6)*sqrt(3)*b*x**2*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 315*sqrt(3)*I*b*x**2*(1/b)**(2/3)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 98*(-1)**(1/6)*sqrt(3)*x*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 98*(-1)**(5/6)*sqrt(3)*x*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(2/3)*x*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(1/3)*x*log(a)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 294*(-1)**(5/6)*sqrt(3)*x*log(x – (-1)**(1/3)*(1/b)**(1/3))/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(1/3)*x*log(x – (-1)**(1/3)*(1/b)**(1/3))/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(1/3)*x*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(2/3)*x*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 98*(-1)**(5/6)*sqrt(3)*x*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 98*(-1)**(1/6)*sqrt(3)*x*log(b*x**3 + 1)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) – 294*(-1)**(1/6)*sqrt(3)*x*log(x – (-1)**(1/3)*sqrt(3)*I*(1/b)**(1/3)/2 + (-1)**(1/3)*(1/b)**(1/3)/2)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3)) + 882*(-1)**(2/3)*x*log(x – (-1)**(1/3)*sqrt(3)*I*(1/b)**(1/3)/2 + (-1)**(1/3)*(1/b)**(1/3)/2)/(588*b**2*x**4*(1/b)**(2/3) + 588*b*x*(1/b)**(2/3))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;26&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x*log(a*x^3/(b*x^3 + 1)) – 1/2*(2*sqrt(3)*a*arctan(1/3*(2*b^(2/3)*x – b^(1/3))*sqrt(3)/b^(1/3))/b^(1/3) – a*log(b^(2/3)*x^2 – b^(1/3)*x + 1)/b^(1/3) + 2*a*log((b^(1/3)*x + 1)/b^(1/3))/b^(1/3))/a&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage simplifies better.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(a*x**n/(b*x**m + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;96&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(m – n + log(a))*x – m*integrate(1/(b*e^(m*log(x)) + 1), x) – x*log(x^m*b + 1) + x*log(x^n)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log((a*x**2 + 1)/(b*x**2 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Integral(log((a*x**2 + 1)/(b*x**2 + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;72&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x*log((a*x^2 + 1)/(b*x^2 + 1)) + 2*arctan(sqrt(a)*x)/sqrt(a) – 2*arctan(sqrt(b)*x)/sqrt(b)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage asks whether `a` and `b` are positive and then returns an answer. Sympy fails irrespective of the assumptions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log((a*x**3 + 1)/(b*x**3 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;89&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;x*log((a*x^3 + 1)/(b*x^3 + 1)) + sqrt(3)*arctan(1/3*(2*a^(2/3)*x – a^(1/3))*sqrt(3)/a^(1/3))/a^(1/3) – sqrt(3)*arctan(1/3*(2*b^(2/3)*x – b^(1/3))*sqrt(3)/b^(1/3))/b^(1/3) – 1/2*log(a^(2/3)*x^2 – a^(1/3)*x + 1)/a^(1/3) + log((a^(1/3)*x + 1)/a^(1/3))/a^(1/3) + 1/2*log(b^(2/3)*x^2 – b^(1/3)*x + 1)/b^(1/3) – log((b^(1/3)*x + 1)/b^(1/3))/b^(1/3)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage asks whether `a` and `b` are positive and then returns an answer. Sympy fails irrespective of the assumptions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log((a*x**n + 1)/(b*x**m + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;89&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(m – n)*x – m*integrate(1/(b*e^(m*log(x)) + 1), x) + n*integrate(1/(x^n*a + 1), x) – x*log(x^m*b + 1) + x*log(x^n*a + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Integral(log((a*x**5 + x**3 + 1)/(b*x**5 + x**3 + 1)), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;42&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-x*log(b*x^5 + x^3 + 1) + x*log(a*x^5 + x^3 + 1) – integrate((2*x^3 + 5)/(b*x^5 + x^3 + 1), x) + integrate((2*x^3 + 5)/(a*x^5 + x^3 + 1), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;When both Sage and Sympy fail, Sage is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sin(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-cos(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-cos(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sin(x)**n*cos(x)**m&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;102&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;No result&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;110&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Disgraceful failure by Sage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sin(a*x)**n*cos(b*x)**m&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;81&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;No result&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;112&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Disgraceful failure by Sage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/sin(x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;log(cos(x) – 1)/2 – log(cos(x) + 1)/2&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/2*log(cos(x) – 1) – 1/2*log(cos(x) + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/(sin(x) + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-2/(tan(x/2) + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;-2/(sin(x)/(cos(x) + 1) + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/(sin(x)**2 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;96&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/2*sqrt(2)*arctan(sqrt(2)*tan(x))&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage simply beats Sympy.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/(sin(x)**3 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;87&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Maxima: `quotient’ by `zero’&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;78&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Disgraceful failure by Sage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;sin(x)**(-n)/a&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Integral(sin(x)**(-n)/a, x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;36&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;No result&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;227&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Disgraceful failure by Sage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/(a*sin(x)**n + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;98&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Maxima: expt: undefined: 0 to a negative exponent.&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Disgraceful failure by Sage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1/(a*sin(x)**b + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;83&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;No result&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;140&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Disgraceful failure by Sage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*sin(x)**2/(b*sin(x)**2 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;93&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(x/b – arctan(sqrt(b + 1)*tan(x))/(sqrt(b + 1)*b))*a&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage simply beats Sympy.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*sin(x)**3/(b*sin(x)**3 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;82&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;No result&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;568&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Disgraceful failure by Sage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*sin(x)**n/(b*sin(x)**m + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Integral(a*sin(x)**n/(b*sin(x)**m + 1), x)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;24&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Manual Interupt&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1527&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Both Sage and Sympy fail, however Sympy is quicker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(a*sin(x)**2 + 1)/(b*sin(x)**2 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;98&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;a*x/b – (a – b)*arctan(sqrt(b + 1)*tan(x))/(sqrt(b + 1)*b)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Sage simply beats Sympy.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(a*sin(x)**3 + 1)/(b*sin(x)**3 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;96&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Manual Interupt&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;203&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(a*sin(x)**n + 1)/(b*sin(x)**m + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;83&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Maxima: expt: undefined: 0 to a negative exponent.&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Disgraceful failure by Sage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;(a*sin(x)**5 + sin(x)**3 + 1)/(b*sin(x)**5 + sin(x)**3 + 1)&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Timeout&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;89&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;Manual Interupt&lt;/td&gt;
&lt;td style=&quot;font-size: 10pt;&quot;&gt;142&lt;/td&gt;
&lt;td style=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br /&gt;  &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;amp;blog=15251174&amp;amp;post=561&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-10-24T23:51:52+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="tag:fseoane.net/blog,2012-10-23:2012/learning-to-rank-with-scikit-learn-the-pairwise-transform/">
	<title>Fabian Pedregosa: Learning to rank with scikit-learn: the pairwise transform</title>
	<link>http://fseoane.net/blog/2012/learning-to-rank-with-scikit-learn-the-pairwise-transform/</link>
	<content:encoded>&lt;p&gt;This tutorial introduces the concept of pairwise preference used in most &lt;a href=&quot;http://en.wikipedia.org/wiki/Learning_to_rank&quot;&gt;ranking problems&lt;/a&gt;. I'll use scikit-learn and for learning and matplotlib for visualization.&lt;/p&gt;
&lt;p&gt;In the ranking setting, training data consists of lists of items with some order specified between items in each list. This order is typically induced by giving a numerical or ordinal score or a binary judgment (e.g. &quot;relevant&quot; or &quot;not relevant&quot;) for each item, so that for any two samples &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, either &lt;code&gt;a &amp;lt; b&lt;/code&gt;, &lt;code&gt;b &amp;gt; a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; are not comparable.&lt;/p&gt;
&lt;p&gt;For example, in the case of a search engine, our dataset consists of results that belong to different queries and we would like to only compare the relevance for results coming from the same query.&lt;/p&gt;
&lt;p&gt;This order relation is usually domain-specific. For instance, in information retrieval the set of comparable samples is referred to as a &quot;query id&quot;. The goal behind this is to compare only documents that belong to the same query (&lt;a href=&quot;http://dx.doi.org/10.1145/775047.775067&quot;&gt;Joachims 2002&lt;/a&gt;). In medical imaging on the other hand, the order of the labels usually depend on the subject so the comparable samples is given by the different subjects in the study (&lt;a href=&quot;http://hal.inria.fr/hal-00717990/en&quot;&gt;Pedregosa et al 2012&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pylab&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cross_validation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To start with, we'll create a dataset in which the target values consists of three graded measurements Y = {0, 1, 2} and the input data is a collection of 30 samples, each one with two features.&lt;/p&gt;
&lt;p&gt;The set of comparable elements (queries in information retrieval) will consist of two equally sized blocks, $X = X_1 \cup X_2$, where each block is generated using a normal distribution with different mean and covariance. In the pictures, we represent $X_1$ with round markers and $X_2$ with triangular markers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deg2rad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concatenate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concatenate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# slightly displace data corresponding to our second partition&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# split into train and test set&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cross_validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StratifiedShuffleSplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# plot the result&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'^'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;head_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$w$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;head_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$w$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'equal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://fseoane.net/blog/static/uploads/2012/pairwise_transform_files/pairwise_transform_fig_00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In the plot we clearly see that for both blocks there's a common vector w such that the projection onto w gives a list with the correct ordering.&lt;/p&gt;
&lt;p&gt;However, because linear considers that output labels live in a metric space it will consider that all pairs are comparable. Thus if we fit this model to the problem above it will fit both blocks at the same time, yielding a result that is clearly not optimal. In the following plot we estimate $\hat{w}$ using an l2-regularized linear model.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ridge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coef_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coef_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'^'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;head_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$\hat{w}$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'equal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Estimation by Ridge regression'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://fseoane.net/blog/static/uploads/2012/pairwise_transform_files/pairwise_transform_fig_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To assess the quality of our model we need to define a ranking score. Since we are interesting in a model that &lt;em&gt;orders&lt;/em&gt; the data, it is natural to look for a metric that compares the ordering of our model to the given ordering. For this, we use &lt;a href=&quot;http://en.wikipedia.org/wiki/Kendall_tau_rank_correlation_coefficient&quot;&gt;Kendall's tau correlation coefficient&lt;/a&gt;, which is defined as (P - Q)/(P + Q), being P the number of concordant pairs and Q is the number of discordant pairs. This measure is used extensively in the ranking literature (e.g &lt;a href=&quot;http://www.cs.cornell.edu/people/tj/publications/joachims_02c.pdf&quot;&gt;Optimizing Search Engines using Clickthrough Data&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We thus evaluate this metric on the test set for each block separately.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kendalltau&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Kendall correlation coefficient for block &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%.5f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Kendall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correlation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coefficient&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;71122
&lt;span class=&quot;n&quot;&gt;Kendall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correlation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coefficient&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; 1&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;84387
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The pairwise transform&lt;/h2&gt;
&lt;p&gt;As proved in (&lt;a href=&quot;http://www.mendeley.com/research/support-vector-learning-ordinal-regression/&quot;&gt;Herbrich 1999&lt;/a&gt;), if we consider linear ranking functions, the ranking problem can be transformed into a two-class classification problem. For this, we form the difference of all comparable elements such that our data is transformed into $(x'_k, y'_k) = (x_i - x_j, sign(y_i - y_j))$ for all comparable pairs.&lt;/p&gt;
&lt;p&gt;Of course, this implies generating a quadratic number of samples, something prohibitive for large-class problems where specialized algorithm exists (&lt;a href=&quot;http://research.google.com/pubs/archive/35662.pdf&quot;&gt;Sculley 2009&lt;/a&gt;, &lt;a href=&quot;http://olivier.chapelle.cc/pub/ordinal.pdf&quot;&gt;Chapelle 2010&lt;/a&gt;). Let's suppose however for sake of simplicity that generating n * (n-1) / 2 samples from our original n samples dataset is not an issue.&lt;/p&gt;
&lt;p&gt;This way we transformed our ranking problem into a two-class classification problem. The following plot shows this transformed dataset, and color reflects the difference in labels, and our task is to separate positive samples from negative ones. The hyperplane {x^T w = 0} separates these two classes.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# form pairwise combinations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;comb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itertools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combinations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; \
        &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# skip if same target or different group&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Xp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;yp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# output balanced classes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;yp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asanyarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$\{x^T w = 0\}$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'equal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://fseoane.net/blog/static/uploads/2012/pairwise_transform_files/pairwise_transform_fig_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As we see in the previous plot, the resulting classification problem is separable. This will not always be the case, however, in our training set  there are no order inversions, thus the respective classification problem is separable.&lt;/p&gt;
&lt;p&gt;We will now finally train an Support Vector Machine model on the transformed data. This model is known as RankSVM. We will then plot the training data together with the estimated coefficient $\hat{w}$ by RankSVM.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SVC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'linear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coef_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ravel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coef_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'^'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;head_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;head_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$\hat{w}$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$\hat{w}$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'equal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://fseoane.net/blog/static/uploads/2012/pairwise_transform_files/pairwise_transform_fig_03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Finally we will check that as expected, the ranking score (Kendall tau) increases with the RankSVM model respect to linear regression.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kendalltau&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Kendall correlation coefficient for block &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%.5f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Kendall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correlation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coefficient&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;83627
&lt;span class=&quot;n&quot;&gt;Kendall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correlation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coefficient&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; 1&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;84387
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is indeed higher than the values (0.71122, 0.84387) obtained in the case of linear regression.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Original ipython notebook for this blog post can be found &lt;a href=&quot;https://github.com/fabianp/minirank/blob/master/notebooks/pairwise_transform.ipynb&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2012-10-22T22:00:00+00:00</dc:date>
	<dc:creator>Fabian Pedregosa</dc:creator>
</item>
<item rdf:about="http://sympystats.wordpress.com/?p=273">
	<title>Matthew Rocklin: GSoC Mentor Summit</title>
	<link>http://sympystats.wordpress.com/2012/10/22/gsoc-mentor-summit/</link>
	<content:encoded>&lt;p&gt;I’m in the airport waiting for my flight after finishing the Google Summer of Code Mentor Summit. This event took place this weekend. Two or three mentors from many of the GSoC projects came out to the Google campus to participate in an un-conference about GSoC. Google and SymPy were kind enough to send me and two others (Stefan Krastanov and Gilbert Gede) so I thought I’d slightly repay the favor by reporting my experiences. I’ll list some generated ideas and thoughts below. They range from the application process, to SymPy and scientific Python in general to some meta-thoughts about the conference itself.&lt;/p&gt;
&lt;h3&gt;Application process&lt;/h3&gt;
&lt;p&gt;How should we improve our application process to attract good students, detect good students, and match good students to appropriate mentors?&lt;/p&gt;
&lt;p&gt;We should ask indirect questions to query for curiosity and passion.&lt;/p&gt;
&lt;p&gt;Negative examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do you want to work on SymPy?&lt;/li&gt;
&lt;li&gt;Why do you like Math?&lt;/li&gt;
&lt;li&gt;How long have you been programming?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Positive examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy the favorite snippet of SymPy code you’ve seen here and tell us why you like it.&lt;/li&gt;
&lt;li&gt;What aspects of SymPy do you like the most?&lt;/li&gt;
&lt;li&gt;What editor do you use and why?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Experience was that direct questions tend to have low information content (everyone says the same thing). Indirect questions will be ignored by the lazy but engage the engaged. You often want to test for curiosity and passion more than actual experience in the domain.&lt;/p&gt;
&lt;p&gt;We should match mathematically strong students with strong programmer mentors and strong programmer students with strong mathematical mentors. We often do the opposite due to shared interests but this might result in ideal contributions&lt;/p&gt;
&lt;h3&gt;Funding&lt;/h3&gt;
&lt;p&gt;Other people have funding. Should we? What would we do with it? How would we get it? It might not be as hard as we think. Who uses us? Can we get a grant? Are there companies who might be willing to fund directed work on SymPy?&lt;/p&gt;
&lt;h3&gt;Interactions with SymPians&lt;/h3&gt;
&lt;p&gt;This is my first time physically interacting with SymPy contributors other than my old mentor. It was a really positive experience. As a community we’re pretty distributed, both geographically and in applications/modules. Getting together and talking about SymPy was oddly fascinating. We should do it more. It made us think about SymPy at a bigger scale.&lt;/p&gt;
&lt;p&gt;Some thoughts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do we want to organize a SymPy meetup (perhaps collocated with some other conference like SciPy)? What would this accomplish?&lt;/li&gt;
&lt;li&gt;What is our big plan for SymPy? Do we have one or are we all just a bunch of hobbyists who work on our own projects? Are we actively pursuing a long term vision? I think that we could be more cohesive and generate more forward momentum. I think that this can be created by occasional collocation.&lt;/li&gt;
&lt;li&gt;This could also be accomplished by some sort of digital meetup that’s more intense than the e-mail/IRC list. An easy test version of this could be a monthly video conference.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Broader community&lt;/h3&gt;
&lt;p&gt;I’m accustomed to academic conferences. I recently had a different experience at the SciPy conference which mixed academic research with code. I really liked this mix of theory and application and had a great time at SciPy. GSoC amplified this change, replacing a lot of academics with attendees that were purely interested in code. This was personally very strange for me, I felt like an outsider.&lt;/p&gt;
&lt;p&gt;The scientific/numeric python community doesn’t care as intensely about many of the issues that are religion to a substantial fraction of the open source world. My disinterest in these topics and my interest in more esoteric/academic topics also made me feel foreign. There were still people like me though and they were very fun to find, just a bit rarer.&lt;/p&gt;
&lt;p&gt;This is the first conference I’ve been to where I was one of the better dressed attendees :)&lt;/p&gt;
&lt;h3&gt;Local Community&lt;/h3&gt;
&lt;p&gt;Other projects of our size exist under an umbrella organization like the Apache foundation. I see our local community as the numpy/scipy/matplotlib stack. How can we more tightly integrate ourselves with this community? NumFocus was started up recently. Should we engage/use NumFocus more? How can we make use of and how can we support our local community?&lt;/p&gt;
&lt;h3&gt;Meta-Mentor Summit&lt;/h3&gt;
&lt;p&gt;This section includes my thoughts about the summit itself. It’s distinctly structured. I’ll share my opinions about this structure.&lt;/p&gt;
&lt;p&gt;The informal meeting spaces were excellent. Far better than the average academic conference. I felt very comfortable introducing myself and my project to everyone. It was a very social and outgoing crowd.&lt;/p&gt;
&lt;p&gt;Some of the sessions were really productive and helpful. The unconference structure had a few strong successes.&lt;/p&gt;
&lt;p&gt;There were a lot of sessions that could have been better organized.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frequently we didn’t have a goal in mind; this can be ok but I felt that in many cases a clear goal would have kept conversation on topic.&lt;/li&gt;
&lt;li&gt;People very often wanted to share their experiences from events in their organization. This is good, we need to share experiences, but often people wouldn’t filter out org-specific details. We need to be mindful about holding the floor. We have really diverse groups and I’m pretty sure that the KDE guys don’t want to hear the details of symbolic algebra algorithms.&lt;/li&gt;
&lt;li&gt;Sessions are sometimes dominated by one person&lt;/li&gt;
&lt;li&gt;In general I think that we should use neutral meeting facilitators within the larager sessions. I think that they could be much more productive with some light amount of control.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Specific Interactions with other Orgs&lt;/h3&gt;
&lt;p&gt;It was really cool to associate physical humans to all of the software projects I’ve benefitted from over the years. It’s awesome to realize that it’s all built by people, and not by some abstract force. I had a number of positive experiences with orgs like Sage and SciLab that are strongly related to SymPy as well as orgs that are completely unrelated like OpenIntents, Scala, and Tor.&lt;/p&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;I had a good time and came away with thoughts of the future. We have something pretty cool here and I think that we should think more aggressively about where we want to take it.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/273/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/273/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=273&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-10-22T15:30:03+00:00</dc:date>
	<dc:creator>mrocklin</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-2520472460430880330.post-1520965087387896738">
	<title>Official SymPy blog: SymPy 0.7.2 is released</title>
	<link>http://sympy.blogspot.com/2012/10/sympy-072-is-released.html</link>
	<content:encoded>&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: white; border-bottom-color: rgb(204, 204, 204); border-bottom-style: solid; border-width: 0px 0px 1px; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 10px; line-height: 14px; margin: 14px 0px 5px; overflow: hidden; padding: 5px 0px;&quot; id=&quot;head&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 1.6;&quot;&gt;SymPy 0.7.2 was released on October 16, 2012.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;background-color: white; border: 0px; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 10px; line-height: 14px; margin: 0px; padding: 0px;&quot; id=&quot;wiki-content&quot;&gt;&lt;div style=&quot;border: 0px; margin: 0px; padding: 0px;&quot; class=&quot;wrap&quot;&gt;&lt;div style=&quot;border: 0px; margin: 0px; padding: 0px;&quot; class=&quot;gollum-markdown-content instapaper_body&quot; id=&quot;wiki-body&quot;&gt;&lt;div style=&quot;border: 0px; font-size: 14px; line-height: 1.6; margin: 0px; overflow: hidden; padding: 0px;&quot; class=&quot;markdown-body&quot;&gt;&lt;h2 style=&quot;&quot;&gt;Major Changes&lt;/h2&gt;&lt;h3 style=&quot;&quot;&gt;Python 3 support&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;SymPy now supports Python 3. The officially supported versions are 3.2 and 3.3, but 3.1 should also work in a pinch. The Python 3-compatible tarballs will be provided separately, but it is also possible to download Python 2 code and convert it manually, via the bin/use2to3 utility. See the README for more&lt;/div&gt;&lt;h3 style=&quot;&quot;&gt;PyPy support&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;All SymPy tests pass in recent nightlies of PyPy, and so it should have full support as of the next version after 1.9.&lt;/div&gt;&lt;h3 style=&quot;&quot;&gt;Combinatorics&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A new module called Combinatorics was added which is the result of a successful GSoC project. It attempts to replicate the functionality of Combinatorica and currently has full featured support for Permutations, Subsets, Gray codes and Prufer codes.&lt;/div&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; margin-top: 15px; padding: 0px;&quot;&gt;In another GSoC project, facilities from computational group theory were added to the combinatorics module, mainly following the book &quot;Handbook of computational group theory&quot;. Currently only permutation groups are supported. The main functionalities are: basic properties (orbits, stabilizers, random elements...), the Schreier-Sims algorithm (three implementations, in increasing speed: with Jerrum's filter, incremental, and randomized (Monte Carlo)), backtrack searching for subgroups with certain properties.&lt;/div&gt;&lt;h3 style=&quot;&quot;&gt;Definite Integration&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A new module called meijerint was added, which is also the result of a successful GSoC project. It implements a heuristic algorithm for (mainly) definite integration, similar to the one used in Mathematica. The code is automatically called by the standard integrate() function. This new algorithm allows computation of important integral transforms in many interesting cases, so helper functions for Laplace, Fourier and Mellin transforms were added as well.&lt;/div&gt;&lt;h3 style=&quot;&quot;&gt;Random Variables&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A new module called stats was added. This introduces a RandomSymbol type which can be used to model uncertainty in expressions.&lt;/div&gt;&lt;h3 style=&quot;&quot;&gt;Matrix Expressions&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A new matrix submodule named expressions was added. This introduces a MatrixSymbol type which can be used to describe a matrix without explicitly stating its entries. A new family of expression types were also added: Transpose, Inverse, Trace, and BlockMatrix. ImmutableMatrix was added so that explicitly defined matrices could interact with other SymPy expressions.&lt;/div&gt;&lt;h3 style=&quot;&quot;&gt;Sets&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A number of new sets were added including atomic sets like FiniteSet, Reals, Naturals, Integers, UniversalSet as well as compound sets like ProductSet and TransformationSet. Using these building blocks it is possible to build up a great variety of interesting sets.&lt;/div&gt;&lt;h3 style=&quot;&quot;&gt;Classical Mechanics&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A physics submodule named machanics was added which assists in formation of equations of motion for constrained multi-body systems. It is the result of 3 GSoC projects. Some nontrivial systems can be solved, and examples are provided.&lt;/div&gt;&lt;h3 style=&quot;&quot;&gt;Quantum Mechanics&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;Density operator module has been added. The operator can be initialized with generic Kets or Qubits. The Density operator can also work with TensorProducts as arguments. Global methods are also added that compute entropy and fidelity of states. Trace and partial-trace operations can also be performed on these density operators.&lt;/div&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; margin-top: 15px; padding: 0px;&quot;&gt;To enable partial trace operations a Tr module has been added to the core library. While the functionality should remain same, this module is likely to be relocated to an alternate folder in the future. One can currently also use sympy.core.Tr to work on general trace operations, but this module is what is needed to work on trace and partial-trace operations on any sympy.physics.quantum objects.&lt;/div&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; margin-top: 15px; padding: 0px;&quot;&gt;The Density operators, Tr and Partial trace functionality was implemented as part of student participation in GSoC 2012&lt;/div&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; margin-top: 15px; padding: 0px;&quot;&gt;Expanded angular momentum to include coupled-basis states and product-basis states. Operators can also be treated as acting on the coupled basis (default behavior) or on one component of the tensor product states. The methods for coupling and uncoupling these states can work on an arbitrary number of states. Representing, rewriting and applying states and operators between bases has been improved.&lt;/div&gt;&lt;h3 style=&quot;&quot;&gt;Commutative Algebra&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A new module &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;agca&lt;/code&gt; was started which seeks to support computations in commutative algebra (and eventually algebraic geometry) in the style of Macaulay2 and Singular. Currently there is support for computing Groebner bases of modules over a (generalized) polynomial ring over a field. Based on this, there are algorithms for various standard problems in commutative algebra, e.g., computing intersections of submodules, equality tests in quotient rings, etc....&lt;/div&gt;&lt;h3 style=&quot;&quot;&gt;Plotting Module&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A new plotting module has been added which uses Matplotlib as its back-end. The plotting module has functions to plot the following:&lt;/div&gt;&lt;ul style=&quot;border: 0px; margin: 15px 0px; padding: 0px 0px 0px 30px;&quot;&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;2D line plots&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;2D parametric plots.&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;2D implicit and region plots.&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;3D surface plots.&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;3D parametric surface plots.&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;3D parametric line plots.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot;&quot;&gt;Differential Geometry&lt;/h3&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;Thanks to a GSoC project the beginning of a new module covering the theory of differential geometry was started. It can be imported with&lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;sympy.diffgeom&lt;/code&gt;. It is based on &quot;Functional Differential Geometry&quot; by Sussman and Wisdom. Currently implemented are scalar, vector and form fields over manifolds as well as covariant and other derivatives.&lt;/div&gt;&lt;h2 style=&quot;&quot;&gt;Backwards compatibility breaks&lt;/h2&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;-The KroneckerDelta class was moved from sympy/physics/quantum/kronecker.py to sympy/functions/special/tensor_functions.py.&lt;/div&gt;&lt;ul style=&quot;border: 0px; margin: 15px 0px; padding: 0px 0px 0px 30px;&quot;&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;Merged the KroneckerDelta class in sympy/physics/secondquant.py with the class above.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;The Dij class in sympy/functions/special/tensor_functions.py was replaced with KroneckerDelta.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;The errors raised for invalid &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;float&lt;/code&gt; calls on SymPy objects were changed in order to emulate more closely the errors raised by the standard library. The &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;__float__&lt;/code&gt; and &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;__complex__&lt;/code&gt; methods of &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;Expr&lt;/code&gt; are concerned with that change.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;The &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;solve()&lt;/code&gt; function returns empty lists instead of &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;None&lt;/code&gt; objects if no solutions were found. Idiomatic code of the form&lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;sol = solve(...); if sol:...&lt;/code&gt; will not be affected by this change.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;Piecewise no longer accepts a Set or Interval as a condition. One should explicitly specify a variable using Set().contains(x) to obtain a valid conditional.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;The statistics module has been deprecated in favor of the new stats module.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;sympy/galgebra/GA.py:&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;set_main() is no longer needed&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;make_symbols() is deprecated (use sympy.symbols() instead)&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;the symbols used in this package are no longer broadcast to the main program&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;The classes for Infinity, NegativeInfinity, and NaN no longer subclass from Rational. Creating a Rational with 0 in the denominator will still return one of these classes, however.&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 style=&quot;&quot;&gt;Other Changes&lt;/h2&gt;&lt;ul style=&quot;border: 0px; margin: 15px 0px; padding: 0px 0px 0px 30px;&quot;&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A new module &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;gaussopt&lt;/code&gt; was added supporting the most basic constructions from Gaussian optics (ray tracing matrices, geometric rays and Gaussian beams).&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;New classes were added to represent the following special functions: classical and generalized exponential integrals (Ei, expint), trigonometric (Si, Ci) and hyperbolic integrals (Shi, Chi), the polylogarithm (polylog) and the Lerch transcendent (lerchphi). In addition to providing all the standard sympy functionality (differentiation, numerical evaluation, rewriting ...), they are supported by both the new meijerint module and the existing hypergeometric function simplification module.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;An ImmutableMatrix class was created. It has the same interface and functionality of the old Matrix but is immutable and inherits from Basic.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A new function in geometry.util named &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;centroid&lt;/code&gt; was added which will calculate the centroid of a collection of geometric entities. And the polygon module now allows triangles to be instantiated from combinations of side lengths and angles (using keywords sss, asa, sas) and defines utility functions to convert between degrees and radians.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;In ntheory.modular there is a function (&lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;solve_congruence&lt;/code&gt;) to solve congruences such as &quot;What number is 2 mod 3, 3 mod 5 and 2 mod 7?&quot;&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;A utility function named &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;find_unit&lt;/code&gt; has been added to physcis.units that allows one to find units that match a given pattern or contain a given unit.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;There have been some additions and modifications to Expr's methods:&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;Although the problem of proving that two expressions are equal is in general a difficult one (since whatever algorithm is used, there will always be an expression that will slip through the algorithm) the new method of Expr named &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;equals&lt;/code&gt; will do its best to answer whether A equals B: A.equals(B) might given True, False or None.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;coeff now supports a third argument &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;n&lt;/code&gt; (which comes 2nd now, instead of &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;right&lt;/code&gt;). This &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;n&lt;/code&gt; is used to indicate the exponent on x which one seeks: &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;(x**2 + 3*x + 4).coeff(x, 1)&lt;/code&gt; -&amp;gt; &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;3&lt;/code&gt;. This makes it possible to extract the constant term from a polynomial:&lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;(x**2 + 3*x + 4).coeff(x, 0)&lt;/code&gt; -&amp;gt; &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;4&lt;/code&gt;.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;The method &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;round&lt;/code&gt; has been added to round a SymPy expression to a given a number of decimal places (to the left or right of the decimal point).&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;divmod is now supported for all SymPy numbers.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;In the simplify module, the algorithms for denesting of radicals (sqrtdenest) and simplifying gamma functions (in combsimp) has been significantly improved.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;The mathematica-similar &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;TableForm&lt;/code&gt; function has been added to the printing.tableform module so one can easily generate tables with headings.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;In addition to the more noticeable changes listed above, there have been numerous smaller additions, improvements and bug fixes in the commits in this release. See the git log for a full list of all changes. The command &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;git log sympy-0.7.1..sympy-0.7.2&lt;/code&gt; will show all commits made between this release and the last. You can also see the issues closed since the last release &lt;a style=&quot;border: 0px; color: #4183c4; margin: 0px; padding: 0px; text-decoration: initial;&quot; href=&quot;http://code.google.com/p/sympy/issues/list?can=1&amp;amp;q=closed-after%3A2011%2F7%2F30+closed-before%3A2012%2F8%2F23&amp;amp;sort=-closed&amp;amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary+Stars+Closed&amp;amp;cells=tiles&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;The expand API has been updated. &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;expand()&lt;/code&gt; now officially supports arbitrary &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;_eval_expand_hint()&lt;/code&gt; methods on custom objects.&lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;_eval_expand_hint()&lt;/code&gt; methods are now only responsible for expanding the top-level expression. All &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;deep=True&lt;/code&gt; related logic happens in&lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;expand()&lt;/code&gt; itself. See the &lt;a style=&quot;border: 0px; color: #4183c4; margin: 0px; padding: 0px; text-decoration: initial;&quot; href=&quot;http://docs.sympy.org/0.7.2/modules/core.html#sympy.core.function.expand&quot;&gt;docstring of &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;expand()&lt;/code&gt;&lt;/a&gt; for more information and an example.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;Two options were added to &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;isympy&lt;/code&gt; to aid in interactive usage. &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;isympy -a&lt;/code&gt; automatically creates symbols, so that typing something like&lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;a&lt;/code&gt; will give &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;Symbol('a')&lt;/code&gt;, even if you never typed &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;a = Symbol('a')&lt;/code&gt; or &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;var('a')&lt;/code&gt;. &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;isympy -i&lt;/code&gt; automatically wraps integer literals with Integer, so that &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;1/2&lt;/code&gt; will give &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;Rational(1, 2)&lt;/code&gt; instead of &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;0.5&lt;/code&gt;. &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;isympy -I&lt;/code&gt; is the same as &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;isympy -a -i&lt;/code&gt;. &lt;code style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(234, 234, 234); font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; white-space: nowrap;&quot;&gt;isympy -I&lt;/code&gt; makes isympy act much more like a traditional interactive computer algebra system. These both require IPython.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;The official documentation at &lt;a style=&quot;border: 0px; color: #4183c4; margin: 0px; padding: 0px; text-decoration: initial;&quot; href=&quot;http://docs.sympy.org/&quot;&gt;http://docs.sympy.org&lt;/a&gt; now includes an extension that automatically hooks the documentation examples in to&lt;a style=&quot;border: 0px; color: #4183c4; margin: 0px; padding: 0px; text-decoration: initial;&quot; href=&quot;http://live.sympy.org/&quot;&gt;SymPy Live&lt;/a&gt;.&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 style=&quot;&quot;&gt;Authors&lt;/h2&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; padding: 0px;&quot;&gt;The following people contributed at least one patch to this release (names are given in alphabetical order by last name). A total of 103 people contributed to this release. People with a * by their names contributed a patch for the first time for this release; 77 people contributed for the first time for this release.&lt;/div&gt;&lt;div style=&quot;border: 0px; margin-bottom: 15px; margin-top: 15px; padding: 0px;&quot;&gt;Thanks to everyone who contributed to this release!&lt;/div&gt;&lt;ul style=&quot;border: 0px; margin-bottom: 0px !important; margin-left: 0px; margin-right: 0px; margin-top: 15px; padding: 0px 0px 0px 30px;&quot;&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Sanket Agarwal*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Swapnil Agarwal*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Bilal Akhtar*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Nathan Alison*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Steve Anton*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Takafumi Arakaki*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Chancellor Arkantos*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Manoj Babu K.*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Tom Bachmann&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Oscar Benjamin&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Raoul Bourquin*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Christian Bühler*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Jorge E. Cardona*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Ondřej Čertík&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Puneeth Chaganti*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Roberto Colistete, Jr.*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Renato Coutinho&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Joan Creus*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Addison Cugini&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Guru Devanla*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Joseph Dougherty*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Comer Duncan*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Joachim Durchholz*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Tarun Gaba*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Luis Garcia*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Gilbert Gede&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Arpit Goyal*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Brian E. Granger&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Alexey U. Gudchenko&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Alexandr Gudulin*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Matt Habel*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Tristan Hume*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Kevin Hunter*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Gert-Ludwig Ingold*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Sachin Irukula*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Sergiu Ivanov*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Siddhant Jain*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Saurabh Jha*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Fredrik Johansson&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;David Ju*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Kendhia*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Andreas Kloeckner*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Carsten Knoll*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Piotr Korgul*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Marcin Kostrzewa*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Stefan Krastanov&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Priit Laes&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Tim Lahey*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Ronan Lamy&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Nikolay Lazarov*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Tomo Lazovich&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Tobias Lenz*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;David Li*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Bharath M R*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Sam Magura&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Aleksandar Makelov*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Saptarshi Mandal&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Imran Ahmed Manzoor*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Shruti Mangipudi*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Davy Mao*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Miha Marolt*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;marshall2389*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Michael Mayorov*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Aaron Meurer&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Raphael Michel*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Jason Moore*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Ljubiša Moćić*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Angadh Nanjangud*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Natalia Nawara*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Jens H. Nielsen*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Sai Nikhil*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Ashwini Oruganti*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Prateek Papriwal*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Mateusz Paprocki&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Vladimir Perić&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Mario Pernici&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Luke Peterson&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Alexandr Popov*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Nicolas Pourcelot&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Martin Povišer*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Matt Rajca*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Julien Rioux*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Matthew Rocklin&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Nikhil Sarda&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Siddhanathan Shanmugam*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Stepan Simsa*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Sam Sleight*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Chris Smith&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Geoffry Song*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Andrew Straw&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Alexey Subach*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Grzegorz Świrski*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Prafullkumar P. Tale&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Matthias Toews*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;tsmars15*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Nichita Utiu*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Srinivas Vasudevan*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Sean Vig&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;vishal*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;George Waksman*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Luca Weihs&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Raymond Wong&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Jeremias Yehdegho&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Jim Zhang*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Tiffany Zhu*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;jerryma1121*&lt;/li&gt;&lt;li style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Rom le Clair*&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;background-color: white; border: 0px; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 12px; line-height: 19px; margin: 0px; padding: 0px;&quot; id=&quot;gollum-footer&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/2520472460430880330-1520965087387896738?l=sympy.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2012-10-20T04:26:11+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://brianegranger.com/?p=215">
	<title>Brian Granger: Blogging with the IPython Notebook</title>
	<link>http://brianegranger.com/?p=215</link>
	<content:encoded>&lt;p&gt;The IPython dev team gets a lot of questions about how IPython Notebooks can be used on various blogging platforms. There have been a number of different attempts to use nbconvert to export a notebook to HTML and then embedding that HTML in the blogging platform. With the introduction of &lt;a href=&quot;http://nbviewer.ipython.org&quot; target=&quot;_blank&quot; title=&quot;IPython Notebook Viewer&quot;&gt;nbviewer&lt;/a&gt; it is trivial to embed a Notebook in any web page using iframes.  Here is a simple example:&lt;/p&gt;
&lt;div style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot; class=&quot;codecolorer-container text default&quot;&gt;&lt;div style=&quot;&quot; class=&quot;text codecolorer&quot;&gt;&amp;lt;iframe src=&quot;http://nbviewer.ipython.org/3835181/&quot; width=&quot;800&quot; height=&quot;1500&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Which produces the embedded Notebook shown below.  The only subtle part is that you have to set the width and height attributes manually to avoid having scroll bars on the iframe.&lt;/p&gt;
&lt;p&gt;&amp;lt;iframe height=&quot;1500&quot; src=&quot;http://nbviewer.ipython.org/3835181/&quot; width=&quot;800&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;</content:encoded>
	<dc:date>2012-10-05T02:54:59+00:00</dc:date>
	<dc:creator>admin</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1160">
	<title>Aaron Meurer: Infinitely nested lists in Python</title>
	<link>http://asmeurersympy.wordpress.com/2012/09/19/infinitely-nested-lists-in-python/</link>
	<content:encoded>&lt;p&gt;Readers of this blog know that I sometimes like to write about some &lt;a href=&quot;http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/&quot;&gt;strange&lt;/a&gt;, &lt;a href=&quot;http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here/&quot;&gt;unexpected&lt;/a&gt;, and &lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/03/15/true-is-true-is-false-is-true-is-false/&quot;&gt;unusual&lt;/a&gt; things in Python that I stumble across.  This post is another one of those.&lt;/p&gt;
&lt;p&gt;First, look at this&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a = []
&amp;gt;&amp;gt;&amp;gt; a.append(a)
&amp;gt;&amp;gt;&amp;gt; a
[[...]]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;What am I doing here?  I’m creating a list, &lt;code&gt;a&lt;/code&gt;, and I’m adding it to itself.  What you end up with is an infinitely nested list.  The first interesting thing about this is that Python is smart enough to not explode when printing this list.  The following should convince you that &lt;code&gt;a&lt;/code&gt; does indeed contain itself.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a[0] is a
True
&amp;gt;&amp;gt;&amp;gt; a[0] == a
True
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Now, if you have programmed in C, or a similar language that uses pointers, this should not come as a surprise to you.  Lists in Python, like most things, do not actually contain the items inside them.  Rather, they contain references (in C terminology, “pointers”) to the items inside them.  From this perspective, there is no issue at all with &lt;code&gt;a&lt;/code&gt; containing a pointer to itself.&lt;/p&gt;
&lt;p&gt;The first thing I wondered when I saw this was just how clever the printer was at noticing that the list was infinitely nested.  What if we make the cycle a little more complex?&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a = []
&amp;gt;&amp;gt;&amp;gt; b = []
&amp;gt;&amp;gt;&amp;gt; a.append(b)
&amp;gt;&amp;gt;&amp;gt; b.append(a)
&amp;gt;&amp;gt;&amp;gt; a
[[[...]]]
&amp;gt;&amp;gt;&amp;gt; b
[[[...]]]
&amp;gt;&amp;gt;&amp;gt; a[0] is b
True
&amp;gt;&amp;gt;&amp;gt; b[0] is a
True
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;So it still works.  I had thought that maybe repr just catches &lt;code&gt;RuntimeError&lt;/code&gt; and falls back to printing &lt;code&gt;...&lt;/code&gt; when the list is nested too deeply, but it turns out that is not true:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a = []
&amp;gt;&amp;gt;&amp;gt; for i in range(10000):
...     a = [a]
... 
&amp;gt;&amp;gt;&amp;gt; a
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
RuntimeError: maximum recursion depth exceeded while getting the repr of a list
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;And by the way, in case you were wondering, it is possible to catch a &lt;code&gt;RuntimeError&lt;/code&gt; (using the same &lt;code&gt;a&lt;/code&gt; as the previous code block)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; try:
...     print(a)
... except RuntimeError:
...     print(&quot;no way&quot;)
... 
no way
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;(and you also may notice that this is Python 3. Things behave the same way in Python 2)&lt;/p&gt;
&lt;p&gt;Back to infinitely nested lists, we saw that printing works, but there are some things that don’t work.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a[0] == b
True
&amp;gt;&amp;gt;&amp;gt; a[0] == a
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
RuntimeError: maximum recursion depth exceeded in comparison
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a[0] is b&lt;/code&gt; holds (i.e., they are exactly the same object in memory), so &lt;code&gt;==&lt;/code&gt; is able to short-circuit on them.  But to test &lt;code&gt;a[0] == a&lt;/code&gt; it has to recursively compare the elements of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;a[0]&lt;/code&gt;.  Since it is infinitely nested, this leads to a recursion error.  Now an interesting question: why does this happen?  Is it because &lt;code&gt;==&lt;/code&gt; on lists uses a depth first search?  If it were somehow possible to compare these two objects, would they be equal?&lt;/p&gt;
&lt;p&gt;One is reminded of &lt;a href=&quot;http://en.wikipedia.org/wiki/Russel%27s_paradox&quot;&gt;Russel’s paradox&lt;/a&gt;, and the reason why in &lt;a href=&quot;http://en.wikipedia.org/wiki/Zermelo%E2%80%93Fraenkel_set_theory&quot;&gt;axiomatic set theory&lt;/a&gt;, sets are not allowed to contain themselves. &lt;/p&gt;
&lt;p&gt;Thinking of this brought me to my final question.  Is it possible to make a Python &lt;code&gt;set&lt;/code&gt; that contains itself?  The answer is obviously no, because &lt;code&gt;set&lt;/code&gt; objects can only contain hashable objects, and &lt;code&gt;set&lt;/code&gt; is not hashable.  But &lt;code&gt;frozenset&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;‘s counterpart, is hashable.  So can you create a &lt;code&gt;frozenset&lt;/code&gt; that contains itself?  The same for &lt;code&gt;tuple&lt;/code&gt;.  The method I used for &lt;code&gt;a&lt;/code&gt; above won’t work, because &lt;code&gt;a&lt;/code&gt; must be mutable to append it to itself.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1160/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1160/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1160&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-09-19T04:21:08+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=266">
	<title>Guru Devanla: Ubuntu to Mac – My experience with the new setup</title>
	<link>http://rhoforsympy.wordpress.com/2012/09/09/ubuntu-to-mac-my-experience-with-the-new-setup/</link>
	<content:encoded>&lt;p&gt;Recently I had an opportunity to get my hands dirty on a Mac based development environment. I have done most of my development on Ubuntu and getting to work on Mac was a mixed experience.  As anyone would have guessed the overall UI experience has been great. &lt;/p&gt;
&lt;p&gt;Here are some of the tools I was introduced to during my first week:&lt;/p&gt;
&lt;p&gt;1. SQLPro : This is a nice GUI based MySQL client. I was never impressed with the command line MySql client. I hated it all the more once I started using Postgress and the accompanying client. If you have used Golden for Oracle it is on par with that tool.&lt;/p&gt;
&lt;p&gt;2. iTerm2: This is the tmux equivalent and tuned towards the Mac UI experience. The key bindings are easy to learn and worth spending time getting used to the keyboard shortcuts.&lt;/p&gt;
&lt;p&gt;3. Homebrew: This is the Ubuntu equivalent of apt-get. Other options include MacPorts and Fink. I am yet to familiarize myself with the differences between the options.&lt;/p&gt;
&lt;p&gt;4. Alfred: This is a quick launch app which helps you launch applications using Cmd-Space shortcut. This is equivalent to Alt-F2 on Ubuntu.&lt;/p&gt;
&lt;p&gt;5. PyCharm : This is not Mac specific, but this tool has been handy in helping me step through code and understand the implementation as I debug.&lt;/p&gt;
&lt;p&gt;6. Emacs on Mac : The biggest challenge I had was trying to set up Emacs to reflect my set up on Ubuntu. ‘Monaco’ is the usual font used in most of Mac applications. But, the GUI version of Emacs just does not render Monaco-11 or Monaco-12 in anti-aliased mode.Turning on/off anti-aliasing did not help either. Doing anything in a font bigger than that was very painful. Finally, I settled into to using the non gui-version of Emacs-24. I just had to create an alias called emacs24 and make it point to the Emacs app with the non-Gui option.  Here is the instruction you will need to follow, if you had the same experience.&lt;br /&gt;
a. Install the Emacs-24.x version.&lt;br /&gt;
b. Add this line to your bash_profile.&lt;/p&gt;
&lt;p&gt;alias emacs=”/Applications/Emacs.app/Contents/MacOS/Emacs -nw”&lt;/p&gt;
&lt;p&gt;c. And, happily run Emacs with the beautiful fonts rendered by iTerm2. &lt;/p&gt;
&lt;p&gt;This option also helps you open Emacs within one of the sessions in iTerm2. That way you can remain working on the terminals without the need to switch windows.&lt;/p&gt;
&lt;p&gt;There are some new Python tools I have started working in lately, and that will be the topic of my next post.&lt;/p&gt;
&lt;p&gt;Happy Coding!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/266/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/266/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=266&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-09-09T11:29:19+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1154">
	<title>Aaron Meurer: isympy -I:  A saner interactive environment</title>
	<link>http://asmeurersympy.wordpress.com/2012/08/31/isympy-i-a-saner-interactive-environment/</link>
	<content:encoded>&lt;p&gt;As &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/&quot;&gt;promised&lt;/a&gt;, here is another post describing a new feature in the upcoming &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.2&quot;&gt;SymPy 0.7.2&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Automatic Symbol Definition&lt;/h2&gt;
&lt;p&gt;While not as ground breaking as the feature I described in my &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/&quot;&gt;last post&lt;/a&gt;, this feature is still quite useful. As you may know, SymPy is inherently a Python library, meaning that it lives by the rules of Python. If you want to use any name, whether it be a Symbol or a function (like cos), you need to define it (in the case of Symbols), or import it (in the case of functions that come with SymPy). We provide the script &lt;code&gt;isympy&lt;/code&gt; with SymPy to assist with this. This script automatically runs IPython (if it’s installed), imports all names from sympy (&lt;code&gt;from sympy import *&lt;/code&gt;), and defines common symbol names (like &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But if you want to use a Symbol that is not one of the ones predefined by &lt;code&gt;isympy&lt;/code&gt;, you will get something like&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: r*x
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
 in ()
----&amp;gt; 1 r*x

NameError: name 'r' is not defined
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The best solution for this has been either to type &lt;code&gt;var('r')&lt;/code&gt;, which will create the Symbol &lt;code&gt;r&lt;/code&gt; and inject it into the namespace, or to wrap your text in a string and pass it to &lt;code&gt;sympify()&lt;/code&gt;, like &lt;code&gt;sympify(&quot;r*x&quot;)&lt;/code&gt;. Neither of these are very friendly in interactive mode.&lt;/p&gt;
&lt;p&gt;In SymPy 0.7.2, &lt;code&gt;isympy&lt;/code&gt; has a new command line option, &lt;code&gt;isympy -a&lt;/code&gt;, which will enable a mechanism that will automatically define all undefined names as Symbols for you:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: r*x
Out[1]: r⋅x
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;There are some caveats to be aware of when using this feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Names must be undefined for &lt;code&gt;isympy -a&lt;/code&gt; to work. If you type something like &lt;code&gt;S*x&lt;/code&gt;, you’ll get:&lt;pre class=&quot;brush: python;&quot;&gt;In [3]: S*x
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-3-6656a97ea7b0&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 S*x

TypeError: unsupported operand type(s) for *: 'SingletonRegistry' and 'Symbol'
&lt;/pre&gt;
&lt;p&gt;That’s because &lt;code&gt;S&lt;/code&gt; is already defined (it’s the &lt;code&gt;SingletonRegistry&lt;/code&gt;, and also a shortcut to &lt;code&gt;sympify()&lt;/code&gt;). To use a name that’s already defined, either create it manually with &lt;code&gt;var()&lt;/code&gt; or delete it using &lt;code&gt;del&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;This only works on the top level namespace. If you define a function with an undefined name, it will not automatically define that symbol when run.&lt;/li&gt;
&lt;li&gt;This works by catching NameError, defining the name, and then re-running the expression. If you have a multiline statement, any lines before the undefined name will be run before the NameError will be caught. This usually won’t happen, but it’s a potential side-effect to be aware of. We plan to rewrite it using either ast or tokenize to avoid this issue.&lt;/li&gt;
&lt;li&gt;Obviously, this is intended for interactive use only. If you copy code and put it in a script, or in some other place where someone might be expected to run it, but not necessarily from &lt;code&gt;isympy -a&lt;/code&gt;, you should include symbol definitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Automatic int to Integer Conversion&lt;/h2&gt;
&lt;p&gt;A second thing that is annoying with Python and SymPy is that something like &lt;code&gt;1/2&lt;/code&gt; will be interpreted completely by Python, without any SymPy. This means that something like &lt;code&gt;1/2 + x&lt;/code&gt; will give either &lt;code&gt;0 + x&lt;/code&gt; or &lt;code&gt;0.5 + x&lt;/code&gt;, depending on whether or not &lt;code&gt;__future__.division&lt;/code&gt; has been imported. &lt;code&gt;isympy&lt;/code&gt; has always ran &lt;code&gt;from __future__ import division&lt;/code&gt;, so that you’ll get the latter, but we usually would prefer to get &lt;code&gt;Rational(1, 2)&lt;/code&gt;. Previously, the best way to do this was again to either run it through &lt;code&gt;sympify()&lt;/code&gt; as a string, or to sympify at least one of the numbers (here the &lt;code&gt;S()&lt;/code&gt; shortcut to &lt;code&gt;sympify()&lt;/code&gt; is useful, because you can type just &lt;code&gt;S(1)/2&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;With SymPy 0.7.2, you can run &lt;code&gt;isympy -i&lt;/code&gt;, and it will automatically wrap all integers literals with &lt;code&gt;Integer()&lt;/code&gt;. The result is that &lt;code&gt;1/2&lt;/code&gt; produces &lt;code&gt;Rational(1, 2)&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: 1/2 + x
Out[1]: x + 1/2
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Again, there are a couple of caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to get Python style division, you just need to wrap both arguments in &lt;code&gt;int()&lt;/code&gt;:&lt;pre class=&quot;brush: python;&quot;&gt;In [2]: int(1)/int(2)
Out[2]: 0.5
&lt;/pre&gt;
&lt;p&gt;Of course, if you just want a floating point number, you can just use &lt;code&gt;N()&lt;/code&gt; or &lt;code&gt;.evalf()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;This works by parsing the text and wrapping all integer literals with &lt;code&gt;Integer()&lt;/code&gt;. This means that if you have a variable set to a Python int, it will still act like a Python int:&lt;pre class=&quot;brush: python;&quot;&gt;In [6]: a = int(1)

In [7]: b = int(2)

In [8]: a/b
Out[8]: 0.5
&lt;/pre&gt;
&lt;p&gt;Note that to even do that example, I had to manually make &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; Python ints by wrapping them in &lt;code&gt;int()&lt;/code&gt;. If I had just done &lt;code&gt;a = 1&lt;/code&gt;, it would have been parsed as &lt;code&gt;a = Integer(1)&lt;/code&gt;, and I would have gotten a SymPy Integer. But this can be an issue if you use the result of some function that returns an int (again, note that most functions in SymPy that return integers return Integer, not int).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The same as before: this will only work interactively. If you want to reuse your code outside of &lt;code&gt;isympy -i&lt;/code&gt;, you should take care of any int/int by rewriting it as S(int)/int.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since these are both useful features, we’ve added a way that you can get them both at once: by doing &lt;code&gt;isympy -I&lt;/code&gt; (the “I” stands for “Interactive”). If we add similar features in the future, we will also add them to the &lt;code&gt;-I&lt;/code&gt; shortcut (for example, we may add an option to allow &lt;code&gt;^&lt;/code&gt; to automatically be replaced with &lt;code&gt;**&lt;/code&gt;).&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1154/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1154/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1154&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-31T03:30:08+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1122">
	<title>Aaron Meurer: SymPy Live Sphinx Extension</title>
	<link>http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/</link>
	<content:encoded>&lt;p&gt;I didn’t blog about SymPy all summer, so I thought I would write a post about my favorite feature of the upcoming SymPy 0.7.2 release.  In fact, this feature has got me more excited than any other feature from any version of SymPy.  Yeah, it’s that good.&lt;/p&gt;
&lt;p&gt;The feature is the SymPy Live Sphinx extension.  To start, if you don’t know about it, check out &lt;a href=&quot;http://live.sympy.org/&quot; target=&quot;_blank&quot;&gt;SymPy Live&lt;/a&gt;.  This is a console that runs on the &lt;a href=&quot;https://developers.google.com/appengine/&quot;&gt;App Engine&lt;/a&gt;.  We’ve actually had this for quite some time, but this winter, it got a huge upgrade thanks to the contribution of some &lt;a href=&quot;http://www.google-melange.com/gci/homepage/google/gci2011&quot;&gt;GCI&lt;/a&gt; students.  Basically, SymPy Live lets you try out SymPy in your browser completely for free, because it runs all the code on the App Engine.  Actually, the console is a full Python console, so you can actually run any valid Python command on it.  This past winter, GCI students upgraded the look of the site, added a mobile version (visit live.sympy.org on your phone), and added other neat features like search history and autocompletion.&lt;/p&gt;
&lt;p&gt;Now, &lt;a href=&quot;http://sphinx.pocoo.org/&quot;&gt;Sphinx&lt;/a&gt; is the documentation system that we use to generate &lt;a href=&quot;http://docs.sympy.org/&quot;&gt;SymPy’s html documentation&lt;/a&gt;. Last year, when I was at the &lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/07/17/the-scipy-2011-conference/&quot;&gt;SciPy Conference&lt;/a&gt;, Mateusz had an idea at the sprints to create an extension linking SymPy Live and Sphinx, so that the examples in Sphinx could be easily run in SymPy Live.  He didn’t finish the extension, but I’m happy to report that thanks to David Li, who was also one of the aforementioned GCI students, the extension is now complete, and is running live on our &lt;a href=&quot;http://docs.sympy.org/dev/&quot;&gt;development docs&lt;/a&gt;.  When SymPy 0.7.2 is released (soon I promise), it will be part of the oficial documentation.&lt;/p&gt;
&lt;p&gt;The best way to see how awesome this is is to visit the website and check it out.  You will need a modern browser (the latest version of Firefox, Safari, or Chrome will work, IE might work too).  Go to a page in the development docs with documentation examples, for example, &lt;a href=&quot;http://docs.sympy.org/dev/tutorial.html#algebra&quot;&gt;http://docs.sympy.org/dev/tutorial.html#algebra&lt;/a&gt;, and click on one of the examples (or click on one of the green “Run code block in SymPy Live” buttons). You should see a console pop up from the bottom-right of the screen, and run your code.  For example:&lt;/p&gt;
&lt;div style=&quot;width: 460px;&quot; class=&quot;wp-caption alignnone&quot; id=&quot;attachment_1149&quot;&gt;&lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2012/08/sympy-live-sphinx.png&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2012/08/sympy-live-sphinx.png?w=450&amp;amp;h=317&quot; title=&quot;SymPy-Live-Sphinx&quot; height=&quot;317&quot; width=&quot;450&quot; alt=&quot;&quot; class=&quot;size-full wp-image-1149&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Example of the SymPy Live Sphinx extension at &lt;a href=&quot;http://docs.sympy.org/dev/tutorial.html#algebra&quot;&gt;http://docs.sympy.org/dev/tutorial.html#algebra&lt;/a&gt;. Click for larger image.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;You can access or hide the console at any time by clicking on the green box at the bottom-right of the page.  If you click on “Settings”, you will see that you can change all the same settings as the regular SymPy Live console, such as the printer type, and the keys for execution and autocompletion.  Additionally, there is a new setting, “Evaluation Mode”, which changes how the Sphinx examples are evaluated.  The default is “Evaluate”.  In this mode, if you click on an example, it is executed immediately.  The other option is “Copy”.  In this mode, if you click an example, it is copied to the console, but not executed right away. This way, you can edit the code to try something different.  Remember, this is a full fledged Python console running SymPy, so you can try literally anything&lt;/p&gt;
&lt;p&gt;So play with this and &lt;a href=&quot;http://groups.google.com/group/sympy&quot;&gt;let us know&lt;/a&gt; what you think.  We would love to hear ways that we can improve the experience even further.  In particular, I think we should think about ways to make the “Copy” mode more user-friendly.  Suggestions welcome!  Also, please &lt;a href=&quot;http://code.google.com/p/sympy/issues&quot;&gt;report any bugs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And one word of warning:  even though these are the development docs, SymPy Live is still running SymPy 0.7.1.  So some examples may not work until 0.7.2 is released, at which point we will update SymPy Live.&lt;/p&gt;
&lt;p&gt;I believe that this extension represents the future of interactive documentation. I hope you enjoy.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1122/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1122/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1122&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-21T05:09:13+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=512">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 13</title>
	<link>http://amakelov.wordpress.com/2012/08/20/google-summer-of-code-2012-week-13/</link>
	<content:encoded>&lt;p&gt;Hi all, here’s a brief summary of my 13th (and last) week of GSoC.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I continued my work on centralizers, improving normal closure, derived in lower central series, etc. My most recent pull request containing these additions just got merged and can be found &lt;a href=&quot;https://github.com/sympy/sympy/pull/1495&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. This week I spent a lot of time on writing better tests and developing some new test practices. The group-theoretical algorithms in the combinatorics module are getting more and more complicated, so better, cleverer and more thorough tests are needed. I came up with the following model for verification:&lt;br /&gt;
- since the results of the tests are very hard to compute by hand, some helper functions are needed that find the wanted object in a brute-force manner using only definitions. For example, we often look for a subgroup with certain properties. The most naive and robust approach to this is to:&lt;br /&gt;
- list all group elements, go over the list and check each element for the given property.&lt;br /&gt;
- Then, make a list of all the “good” elements and compare it (as a set) with the list of all elements of the group the function being tested returns.&lt;br /&gt;
Hence, a new file was created, sympy/combinatorics/testutil.py, that will host such functions. (Needless to say, they are exponential in complexity, and for example going over all the elements of SymmetricGroup(n) becomes infeasible for n larger than 10.)&lt;br /&gt;
- The presence of functions being used to test other functions gets us in a bit of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Quis_custodiet_ipsos_custodes%3F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;&lt;em&gt;Quis custodiet ipsos custodes?&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; situation, but this is not fatal: the functions in testutil.py are extremely straightforward compared to the functions in perm_groups.py that they test, and it’s really obvious what they’re doing, so it’ll take less tests to verify &lt;em&gt;them. &lt;/em&gt;&lt;br /&gt;
- In the tests for the new functions from perm_groups.py, I introduced some comments to indicate what (and why) I’m testing. Another practice that seems to be good is to verify the algorithms for small groups (degrees 1, 2, 3) since there are a lot of corner cases there that seem to break them.&lt;/li&gt;
&lt;li&gt;I started work on improving the disjoint cycle notation, namely excluding singleton cycles from the cyclic form; however, there are other changes to handling permutations that are waiting to be merged in the combinatorics module &lt;a href=&quot;https://github.com/sympy/sympy/pull/1498&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, so I guess I’ll first discuss my changes with &lt;a href=&quot;https://github.com/smichr&quot; target=&quot;_blank&quot;&gt;Christopher&lt;/a&gt;. Currently, I see the following two possibilities for handling the singleton cycles:&lt;br /&gt;
- add a &lt;code&gt;_size&lt;/code&gt; attribute to the Permutation class, and then, when faced with something like &lt;code&gt;Permutation([[2, 3], [4, 5, 6], [8]])&lt;/code&gt;, find the maximum index appearing in the permutation (here it’s 8) and assign the size of the permutation to that + 1. Then it remains to adjust some of the other methods in the class (after I adjusted &lt;strong&gt;mul&lt;/strong&gt; so that it treats permutations of different sizes as if they leave all points outside their domain fixed, all the tests passed) so that they make sense with that new approach to cyclic forms.&lt;br /&gt;
- more ambitious: make a new class, &lt;code&gt;ExtendedArrayForm&lt;/code&gt; or something, with a field &lt;code&gt;_array_form&lt;/code&gt; that holds the usual array form of a permutation. Then we overload the &lt;code&gt;__getitem__&lt;/code&gt; method so that if the index is outside the bounds of &lt;code&gt;self._array_form&lt;/code&gt; we return the index unchanged. Of course, we’ll have to overload other things, like the &lt;code&gt;__len__&lt;/code&gt; and &lt;code&gt;__str__&lt;/code&gt; to make it behave like a list. Then instead of using a list to initialize the array form of a permutation, we use the corresponding &lt;code&gt;ExtendedArrayForm&lt;/code&gt;. This will make all permutations behave as if they are acting on a practically infinite domain, and if we do it that way, we won’t have to make any changes to the methods in &lt;code&gt;Permutation&lt;/code&gt; – everything is going to work as expected, no casework like &lt;code&gt;if len(a) &amp;gt; len(b),...&lt;/code&gt; will be needed. So this sounds like a rather elegant approach. On the other hand, I’m not entirely sure if it is possible to make it completely like a list, and also it doesn’t seem like a very performance-efficient decision since &lt;code&gt;ExtendedArrayForm&lt;/code&gt; instances will be created all the time. (&lt;strong&gt;see the discussion &lt;a href=&quot;https://github.com/sympy/sympy/pull/1498&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Still nothing on a database of groups. I looked around the web for a while but didn’t find any resources… the search continues. Perhaps I should ask someone more knowledgeable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it for now, and that’s the end of my series of blog posts for the GSoC, but I don’t really feel that something has ended since it seems that my contributions to the combinatorics module will continue (albeit not that regularly : ) ). After all, it’s a lot of fun, and there are a lot more things to be implemented/fixed there! So, a big “Thank you” to everyone who helped me get through (and to) GSoC, it’s been a pleasure and I learned a lot. Goodbye!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/512/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/512/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=512&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-20T14:38:23+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://www.catchmrbharath.in/programming/2012/08/19/gsoc-last-week">
	<title>Bharath M R: GSoC last week</title>
	<link>http://www.catchmrbharath.in/programming/2012/08/19/gsoc-last-week</link>
	<content:encoded>&lt;p&gt;This happens to be the last week of GSoC. The major things that I accomplished this week are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Got pylab to work interactively.&lt;/li&gt;

&lt;li&gt;Made more changes to the documentation of plotting module.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a pull request for the restructured plotting module at &lt;a href=&quot;https://github.com/sympy/sympy/pull/1468&quot;&gt;here&lt;/a&gt;. There has been lots of discussions on how the new plot API should look like in the pull request. The API as of now has 5 functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot_line&lt;/code&gt; which plots 2D line plots, which I think I will change to &lt;code&gt;plot&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;plot_parametric&lt;/code&gt; which plots 2D parametric plots.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;plot3D&lt;/code&gt; which plots 3D plots.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;plot3D_parametric&lt;/code&gt; which plots 3D parametric line plots. I think I will have to change it into &lt;code&gt;plot_parametric3D&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;plot3D_surface&lt;/code&gt; which plots 3D parametric surfaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The names are slightly confusing, but the alternative to these names are big. If you have any good names for 3D plots, please leave it in the comments.&lt;/p&gt;

&lt;p&gt;I will have another post describing the things I learnt over this GSoC period.&lt;/p&gt;</content:encoded>
	<dc:date>2012-08-19T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://blog.catchmrbharath.in/programming/2012/08/19/gsoc-last-week">
	<title>Bharath M R: GSoC last week</title>
	<link>http://blog.catchmrbharath.in/programming/2012/08/19/gsoc-last-week</link>
	<content:encoded>&lt;p&gt;This happens to be the last week of GSoC. The major things that I accomplished this week are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Got pylab to work interactively.&lt;/li&gt;

&lt;li&gt;Made more changes to the documentation of plotting module.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a pull request for the restructured plotting module at &lt;a href=&quot;https://github.com/sympy/sympy/pull/1468&quot;&gt;here&lt;/a&gt;. There has been lots of discussions on how the new plot API should look like in the pull request. The API as of now has 5 functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot_line&lt;/code&gt; which plots 2D line plots, which I think I will change to &lt;code&gt;plot&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;plot_parametric&lt;/code&gt; which plots 2D parametric plots.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;plot3D&lt;/code&gt; which plots 3D plots.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;plot3D_parametric&lt;/code&gt; which plots 3D parametric line plots. I think I will have to change it into &lt;code&gt;plot_parametric3D&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;plot3D_surface&lt;/code&gt; which plots 3D parametric surfaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The names are slightly confusing, but the alternative to these names are big. If you have any good names for 3D plots, please leave it in the comments.&lt;/p&gt;

&lt;p&gt;I will have another post describing the things I learnt over this GSoC period.&lt;/p&gt;</content:encoded>
	<dc:date>2012-08-19T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=484">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 12</title>
	<link>http://amakelov.wordpress.com/2012/08/13/google-summer-of-code-2012-week-12/</link>
	<content:encoded>&lt;p&gt;Hi all, here’s a brief summary of the 12th week of my GSoC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Centralizers got some more attention since there were several bugs in the implementation from last week; this also exposed a bug in .subgroup_search() as it is on sympy/master right now. Fortunately, I located it and fixed it earlier today, so the fix for .subgroup_search() will be contained in my next pull request. In fact, it is just three more lines that should be added. Namely,&lt;pre class=&quot;brush: python; wrap-lines: false;&quot;&gt;# line 29: set the next element from the current branch and update
# accorndingly
c[l] += 1
element = ~(computed_words[l - 1])
&lt;/pre&gt;
&lt;p&gt;should be replaced with&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python; wrap-lines: false;&quot;&gt;# line 29: set the next element from the current branch and update
# accorndingly
c[l] += 1
if l == 0:
    element = identity
else:
    element = ~(computed_words[l - 1])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;since we might be at the bottom level with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=l%3D0&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;l=0&quot; class=&quot;latex&quot; title=&quot;l=0&quot; /&gt;. In this case, python doesn’t yell at you for looking up computed_words[-1] since negative indices wrap around the list in python. Yet another silly mistake that’s incredibly hard to track down! I hope that it will work properly from now on, and I’ll have to include some more tests to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The description of the algorithm for finding the center in polynomial time given in [1] didn’t really make sense to me, so instead a straightforward one,&lt;br /&gt;
&lt;pre class=&quot;brush: python;&quot;&gt;def center(self):
    return self.centralizer(self)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;was used. This can be updated later when I (or someone else) figures out the polynomial-time algorithm.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;A new, faster algorithm for finding normal closures: this one uses the incremental version of Schreier-Sims, and some randomization. It’s described in [1].&lt;/li&gt;
&lt;li&gt;Some applications of normal closure: the derived series, lower cenral series, the commutator of two subgroups of a group, nilpotency testing. Now we have things like this:&lt;br /&gt;
&lt;pre class=&quot;brush: python; wrap-lines: false;&quot;&gt;In [68]: from sympy.combinatorics.named_groups import *
In [69]: S = SymmetricGroup(4)
In [70]: ds = S.derived_series()
In [71]: len(ds)
Out[71]: 4
In [72]: ds[1] == AlternatingGroup(4)
Out[72]: True
In [73]: ds[2] == DihedralGroup(2)
Out[73]: True
In [74]: ds[3] == PermutationGroup([Permutation([0, 1, 2, 3])])
Out[74]: True
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;demonstrating the well-known normal series of groups &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e+%3C+K_4+%3C+A_4+%3C+S_4&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;e &amp;lt; K_4 &amp;lt; A_4 &amp;lt; S_4&quot; class=&quot;latex&quot; title=&quot;e &amp;lt; K_4 &amp;lt; A_4 &amp;lt; S_4&quot; /&gt; that solves the symmetric group on 4 letters. Note that the normal closure algorithm was already there thanks to the work of &lt;a href=&quot;https://github.com/pernici&quot; target=&quot;_blank&quot;&gt;Mario&lt;/a&gt;, I just improved it a bit and added some applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Moved DirectProduct() to a new file, group_constructs.py, that is planned to hold functions that treat several groups equally (for one other example, the commutator of two groups in the full symmetric group) rather than treating them in some sort of subgroup-supergroup relationship (such as .centralizer()).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wrote docstrings for the new stuff, and my current work can be found on &lt;a href=&quot;https://github.com/amakelov/sympy/tree/week10&quot; target=&quot;_blank&quot;&gt;my week10 branch&lt;/a&gt;. There will be some comprehensive test following the new additions (and I’ll need GAP to verify the results of some of them, probably). It seems that Todd-Coxeter won’t happen during GSoC since there’s just one more week; instead, I plan to focus on improving disjoint cycle notation and group databases.&lt;/p&gt;
&lt;p&gt;[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp;amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/484/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/484/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=484&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-13T15:00:09+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=251">
	<title>Guru Devanla: Week 12 :  Starting work on Shor’s algorithm</title>
	<link>http://rhoforsympy.wordpress.com/2012/08/13/week-12-starting-work-on-shors-algorithm/</link>
	<content:encoded>&lt;p&gt;This has been a great 12 week run filled with learning and valuable experience! I believe I have accomplished most of what I had set out to do.  The only other thing pending as far as proposed tasks goes is to relocate the Tr module. This would be based on decisions that needs to be taken by more experienced folks here! Once, the decision is made, I don’t think this would take too much of my time. (I am estimating this based on the current approaches that have been proposed).  Therefore, I am committed to getting this done even if this goes beyond GSoC pencils down deadline which is this week!&lt;/p&gt;
&lt;p&gt;So, that was all about the wrap up! So, what I am doing now?&lt;/p&gt;
&lt;p&gt;~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.&lt;/p&gt;
&lt;p&gt;Looking forward, I have taken up another interesting task I am excited to work on.  Past week I started working on implementing/completing Shor’s algorithm. The 2 major activities that consumed my time this week were&lt;/p&gt;
&lt;p&gt;a) Understand Shor’s algorithm in more detail to help me understand what is available in the current implementation.&lt;/p&gt;
&lt;p&gt;b) Review the current implementation and plan on next steps.&lt;/p&gt;
&lt;p&gt;After reviewing the current implementation, I have decided to approach this task with the following smaller tasks:&lt;/p&gt;
&lt;p&gt;a) Review and complete the implementation of &lt;strong&gt;&lt;em&gt;QFT gate&lt;/em&gt;&lt;/strong&gt; ( include tests, documentation), so that it can work independent of Shor’s algorithm.&lt;/p&gt;
&lt;p&gt;b) Review and complete the implementation of &lt;strong&gt;&lt;em&gt;CMOD gate&lt;/em&gt;&lt;/strong&gt;. Right now, the implementation is not complete, and needs more tests too. This is the set of gates that would do the  |a mod N&amp;gt; * |state&amp;gt; over 2^j times for j = { 0, 1, ….2^(n-1)}&lt;/p&gt;
&lt;p&gt;c) Put this all together and re-factor the current implementation (especially break down current &lt;strong&gt;&lt;em&gt;period_find&lt;/em&gt;()&lt;/strong&gt; ) to help more detail testing.&lt;/p&gt;
&lt;p&gt;d) Also, I plan to provide a argument to shor() method, to work as a &lt;em&gt;flag&lt;/em&gt; to turn on detail logging as the circuit progresses.&lt;/p&gt;
&lt;p&gt;All the code I am currenly reviewing and planning to work on are available on the master branch even though it is not complete.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/251/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/251/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=251&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-13T06:00:17+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=384">
	<title>Sergiu Ivanov: The Revolution (The Preview)</title>
	<link>http://scolobb.wordpress.com/2012/08/12/the-revolution-the-preview/</link>
	<content:encoded>&lt;p&gt;This week I continued the work on diagram embeddings and, unfortunately, I have discovered that &lt;tt&gt;Diagram&lt;/tt&gt; did not actually work properly.  I have written a status report E-mail to Tom, in which I briefly outine the progess.  This E-mail (with some omissions) will serve as this week’s blog post, because writing a proper blog post would take me at least three hours, and I would rather code right now, given the limited timeframe.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Unfortunately, I’ve got some, well, ambiguous news.&lt;/p&gt;
&lt;p&gt;Remember I told you about hash-randomisation failures in computing&lt;br /&gt;
diagram embeddings?  Well, it turned out that diagram embeddings was&lt;br /&gt;
quite OK, and the problem went as far back as the Diagram class.&lt;br /&gt;
Essentially, I have done a really bad job implementing it at the&lt;br /&gt;
beginning of the summer: I wanted it to directly store all possible&lt;br /&gt;
morphism compositions.  However, in that implementation, I didn’t&lt;br /&gt;
really store all compositions, but just a part of them; which part I&lt;br /&gt;
stored depended on the order in which the morphisms were supplied&lt;br /&gt;
(severe facepalm &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif&quot; alt=&quot;:-(&quot; class=&quot;wp-smiley&quot; /&gt;  )&lt;/p&gt;
&lt;p&gt;I tried thinking of some good fixes, but, as you can easily imagine,&lt;br /&gt;
the whole idea of storing all composites has suffered an epic&lt;br /&gt;
disintegration in the face of diagrams with cycles.  I am really&lt;br /&gt;
_really_ astonished at how this has managed to slip by me for such a&lt;br /&gt;
long time! &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif&quot; alt=&quot;:-(&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;I have spent the first one third of Friday on trying to save the&lt;br /&gt;
existing design somehow, by carefully processing all possible edge&lt;br /&gt;
cases, but this has very quickly started to be abominable, and, of&lt;br /&gt;
course, it didn’t work.  So, I have spent the greater part of Friday&lt;br /&gt;
on thinking out a new Diagram.  I have spent all of yesterday, (all of&lt;br /&gt;
Saturday, that is), on implementing this new concept.  Basically, the&lt;br /&gt;
new Diagram only stores the relevant generator morphisms, but it is&lt;br /&gt;
still able to correctly determine and enumerate the morphisms that&lt;br /&gt;
belong to it.  It is also capable of determining whether it is finite&lt;br /&gt;
or not (i.e., whether there are cycles in the underlying directed&lt;br /&gt;
multigraph).  When asked for all morphisms, the new Diagram yields a&lt;br /&gt;
generator which acts correctly both in the finite and infinite cases.&lt;br /&gt;
In the finite case it produces all the morphisms of the Diagram.  This&lt;br /&gt;
is clearly impossible in the infinite case, but Diagram is&lt;br /&gt;
sufficiently clever in this case to produce the morphisms in a&lt;br /&gt;
BFS-like manner.  Intuitively, it will first yield all length one&lt;br /&gt;
morphisms, then all morphisms of length two, etc.&lt;/p&gt;
&lt;p&gt;I have made some changes to the interface of the Diagram to better&lt;br /&gt;
reflect the new internals.  Nevertheless, the behaviour in the finite&lt;br /&gt;
case is the same as that of the old Diagram (modulo some property&lt;br /&gt;
names and minor changes, of course).&lt;/p&gt;
&lt;p&gt;One bit of good news that deserves standing out in a separate&lt;br /&gt;
paragraph is that I only had to change _one_ line of code in&lt;br /&gt;
diagram_drawing.py to get it to work with the new Diagram.  (Well, I&lt;br /&gt;
did drop three other lines, because they were redundant), so this&lt;br /&gt;
radical swerve with the Diagram has left the larger part of my GSoC&lt;br /&gt;
work unaffected.&lt;/p&gt;
&lt;p&gt;Now, I have started cherry-picking the diagram embeddings code, and I&lt;br /&gt;
have arrived at a conclusion that Diagram has to be further extended.&lt;br /&gt;
(“Extending” means adding something new, not rewriting it again.)&lt;br /&gt;
Namely, it is insufficient to know whether the whole Diagram is finite&lt;br /&gt;
or not; I really need to know whether a certain hom-set is finite or&lt;br /&gt;
not.  It’s not that hard to implement, and I’ve got a cool book on&lt;br /&gt;
graphs; however, it’s going to require some extra time.&lt;/p&gt;
&lt;p&gt;Here comes the most important part of my message: I’m working at the&lt;br /&gt;
fullest possible cruising speed (not sprinting yet; that I’m saving&lt;br /&gt;
for the last 100m).  I won’t obviously have everything done tomorrow,&lt;br /&gt;
on Monday; however, I strongly believe that I only need another couple&lt;br /&gt;
days to finish the bulk of inferencing.  Provided that on Monday we&lt;br /&gt;
have what is referred to as _soft_ pencils-down date, I hope that I’m&lt;br /&gt;
still OK with the GSoC timeframe.  Further, I think I have already&lt;br /&gt;
mentioned a couple times that I’m going to have another couple free&lt;br /&gt;
weeks after GSoC, during which I will be easily able to finalise&lt;br /&gt;
whatever will be unfinished.  Do note, however, that I definitely&lt;br /&gt;
expect to have inferencing done _within_ the GSoC timeframe.&lt;/p&gt;
&lt;p&gt;Conclusion: despite the rather radical direction things have taken in&lt;br /&gt;
the last two days, I’m _still_ more or less fine with the timing.&lt;/p&gt;
&lt;p&gt;At the moment, you will not be able to see the code I’m working on on&lt;br /&gt;
GitHub.  The reason is that I’m juggling branches rather ninja-ily&lt;br /&gt;
right now, so I don’t really have the most relevant one to push&lt;br /&gt;
online, and they are all relatively short-lived.  I do expect to get&lt;br /&gt;
back to working sequentially today, and once I’ve got there, I’ll push&lt;br /&gt;
to ct3-commutativity to reflect the updates.&lt;/p&gt;
&lt;p&gt;I’m documenting everything I do in as minute detail as possible.  I&lt;br /&gt;
think the Diagram class and the embeddings functionality has more&lt;br /&gt;
comments than actual code.  I expect this to make reviewing and later&lt;br /&gt;
maintenance considerably more agreeable.  Further, my commits are&lt;br /&gt;
almost all rather short, with acceptably long commit messages.  There&lt;br /&gt;
is one commit that breaks the rule, however: the commit which adds the&lt;br /&gt;
new Diagram.  It is one relatively large chunk of code, which replaces&lt;br /&gt;
the old Diagram with the new one and shows that the old tests still&lt;br /&gt;
pass modulo minor changes.  I have nevertheless reformatted the&lt;br /&gt;
history a bit to make this commit easier to review and, of course, the&lt;br /&gt;
code itself is just literally stuffed with comments.  All other&lt;br /&gt;
commits are much more like my usual ones.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Whenever I’m done with the core parts of inferencing, I will write a proper blogpost.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/384/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/384/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=384&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-12T19:16:45+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/?p=420">
	<title>Angadh Nanjangud: GSoC blog post</title>
	<link>http://angadhsympy.wordpress.com/2012/08/12/penultimate-wee/</link>
	<content:encoded>&lt;p&gt;Penultimate week of the GSoC period and it has been busy busy busy.&lt;/p&gt;
&lt;p&gt;In my last post I had spoken about opening a PR for LagrangesMethod and about cleaning up the PR on energy functions. (links to both are in last week’s post and I won’t repeat them here.) Much of this week was spent cleaning up both those PRs and quite extensive testing on LagrangesMethod. The testing has been mostly successful. I shall explaing why ‘mostly’ in the a bit. The PR for the renergy functions has been merged and I’m just waiting for approval from ‘the boss’ so that LagrangesMethod can be merged too.&lt;/p&gt;
&lt;p&gt;I would like to direct the reader to my &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud%3A-sympy.physics.mechanics&quot;&gt;proposal&lt;/a&gt;. In it I had said that I would write this class only for unconstrained systems. The idea was to modify this to be a ‘complete’ class post the GSoC period. But as we got into the week to begin working on this class, Gilbert and I decided that we would make it a full fledged Lagrange class; that could handle any kind of constraint on mechanical systems. Constraints on mechanical systems are basically  of 2 types – configuration constraints (or holonomic constraints) and velocity constraints (or non-holonomic constraints). Depending on the methods used (Newton-Euler or Lagrange or Kane’s method and so on) these constraint equations are accounted for differently In the case of Lagrange’s method, there are additional terms due to these constraints that result in the introduction of the Lagrange multipliers. So, basically, repeating myself for the sake of clairty, one can now obtain the equations of motion in sympy.physics.mechanics using LagrangesMethod for any kind of system. I would even like to go out on a limb (quite literally under my current circumstances &lt;img src=&quot;http://s2.wp.com/wp-includes/images/smilies/icon_razz.gif&quot; alt=&quot;:P&quot; class=&quot;wp-smiley&quot; /&gt; ) and claim that it could be made use of for more generic applications involving ‘The Method of Lagrange Multipliers’ provided the user has the Lagrangian and constraint equations. (The documentation will however be limited to the domain of mechanical systems but shouldn’t be too hard to translate into something more generic for a user). The class also handles nonconservative forces thus making it a complete class.&lt;/p&gt;
&lt;p&gt;In terms of testing each of these functionalities, I feel the tests are pretty thorough. I have tested the nonconservative force handling of the class on a simple spring-mass-damper system. I have tested the handling of the constraint equations using the famous ‘disc on an inclined plane’ test problem. Tests on more complex 3d systems have been performed like the rolling disc (more on this later). And then tests on a multibody system have been verified for a double pendulum. All of these work correctly; results have been compared to solutions by ahnd.&lt;/p&gt;
&lt;p&gt;So with all of this down, why did I say it was “mostly successful”? Well, as it turns out, the tests work perfectly well when limited to problems involving planar motion. The results match up to those obtained by hand. But the results from the class get extremely nasty when dealing with more complex systems; I have implemented the rolling disc in two separate cases. In one test, I use the minimal set of generalized coordinates and the correct eoms are generated. But in another case I tried to use the non-minimal set of GCs and the equations generated are near impossible to comprehend (or I haven’t found the best way to deal with them yet). A big contribution of this messiness is due to the way in which Lagranges approach requires the definition of generalized speeds. In his approach, it is erquired for the generlized speeds to be ‘simple’ i.e. the gen. speeds are just derivatives of the gen coords. This is different in Kane’s approach where the generalized speeds can but needn’t necessarily be ‘simple’. From my experience, Kane’s generalized speeds are defined in a manner which make physical sense. This definitely validates why most dynamicists today (or so I have heard) prefer to choose Kane’s method on complex multi-body systems. The only way I can think of circumventing this situation in teh ‘LagrangesMethod’ class right now is using the minimal set of GCs for well known systems like the rolling disc and hope for the best.&lt;/p&gt;
&lt;p&gt;Having all the additional functionality in this class and also playing with the rolling disc in particular has definitely led to a lot of insight but also taken a good chunk of time away from a period I wanted to dedicate to the ‘code output section’ which I have been unable to get started on. It looks like I will be unable to meet that one goal by the ‘hard’ pencils down date as I complete and fine tune the documentation (pending final approval of the Lagrange PR, of course). But I do feel that the time spent on Lagrange has been for the good. The code, I personally feel, is easy to read and appears to be easy to use. With people’s comments I was able to weed out all the unnecessary stuff. It is also ‘complete’ like I previously highlighted. I will continue to work on ‘code output’ post the GSoC period though as it’s usefulness is undeniable and also because of a development of a general sense of interest in coding (surprise surprise!).&lt;/p&gt;
&lt;p&gt;Anyhow, apart from this, the other stuff I got done this week- I wrote up minor functions to compute a Lagrangian, changed how the potential energy function behaves. That’s it for this week. See you next week, one last time.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/420/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/420/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=420&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-12T01:01:57+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=555">
	<title>Stefan Krastanov: Graph of the Relations between Objects in the diffgeom Module</title>
	<link>http://blog.krastanov.org/2012/08/08/graph-of-the-relations-between-objects-in-the-diffgeom-module/</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;http://krastanov.files.wordpress.com/2012/08/painful_christoffel_symbols.png&quot;&gt;&lt;img src=&quot;http://krastanov.files.wordpress.com/2012/08/painful_christoffel_symbols.png?w=600&amp;amp;h=450&quot; title=&quot;painful_christoffel_symbols&quot; height=&quot;450&quot; width=&quot;600&quot; alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-556&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This graph, besides showing naively in a rather simplistic way the structure of the theory of differential geometry (and most of what I have implemented in the diffgeom module), brings attention to the one non-trivial part of the module on which I have spent most of my time lately. Namely, implementing covariant derivatives.&lt;/p&gt;
&lt;p&gt;All directional derivatives are defined as a limiting procedure on a transport operator. Besides the Lie derivatives which use a certain transport operator that is easy to express in a coordinate free way, all other derivatives, called covariant derivatives have to be expressed using something called Christoffel symbols. And these are the ugly coordinate-dependent sources of pain, as the module structure becomes very cumbersome when such dependence must be accounted for. Thankfully, I think I have found a nice way to implement them in a new CovariantDerivativeOperator class on its own, that will contain all the logic in the same way in which the Base*Field classes do it. This will also require rewrite of the LieDerivative into a LieDerivativeOperator class.&lt;/p&gt;
&lt;br /&gt;  &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;amp;blog=15251174&amp;amp;post=555&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-08T11:21:46+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=445">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 11</title>
	<link>http://amakelov.wordpress.com/2012/08/06/google-summer-of-code-2012-week-11/</link>
	<content:encoded>&lt;p&gt;Hi all, here’s a brief summary of the 11th week of my GSoC.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yay! Subgroup searching now works with the use of .stabilizer(), as I discussed in &lt;a href=&quot;http://amakelov.wordpress.com/2012/07/30/google-summer-of-code-2012-week-10/&quot; target=&quot;_blank&quot;&gt;my previous blog post&lt;/a&gt;. Surprisingly, the running time is similar to that of the flawed version using .baseswap() (whenever the one using .baseswap() works), you can play around with the two versions on my &lt;a href=&quot;https://github.com/amakelov/sympy/tree/week6&quot; target=&quot;_blank&quot;&gt;week6&lt;/a&gt; (has a bug, using .baseswap()) and &lt;a href=&quot;https://github.com/amakelov/sympy/tree/week9&quot; target=&quot;_blank&quot;&gt;week9&lt;/a&gt; (seems to work, using .stabilizer()) branches.&lt;/li&gt;
&lt;li&gt;Consequently, I made a &lt;a href=&quot;https://github.com/sympy/sympy/pull/1454&quot; target=&quot;_blank&quot;&gt;new pull request&lt;/a&gt; containing the incremental version of Schreier-Sims, the remove_gens utility for getting rid of redundant generators in a strong generating set, and the new (working) subgroup_search algorithm. You’re most welcome to help with the review!&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;I worked on several applications of subgroup_search() and the incremental Schreier-Sims algorithm. Namely, the pointwise stabilizer of a set of points (via the incremental Schreier-Sims algorithm):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python; wrap-lines: false;&quot;&gt;In [4]: from sympy.combinatorics.named_groups import *
In [5]: A = AlternatingGroup(9)
In [6]: G = A.pointwise_stabilizer([2, 3, 5])
In [7]: G == A.stabilizer(2).stabilizer(3).stabilizer(5)
Out[7]: True
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;(this is much faster than the naive implementation using .stabilizer() repeatedly), and the centralizer of a group &lt;img src=&quot;http://s0.wp.com/latex.php?latex=H&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;H&quot; class=&quot;latex&quot; title=&quot;H&quot; /&gt; inside a group &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python; wrap-lines: false;&quot;&gt;In [11]: from sympy.combinatorics.named_groups import *
In [12]: S = SymmetricGroup(6)
In [13]: A = AlternatingGroup(6)
In [14]: C = CyclicGroup(6)
In [15]: S_els = list(S.generate())
In [16]: G = S.centralizer(A)
In [17]: G.order()
Out[17]: 1
In [18]: temp = [[el*gen for gen in A.generators] == [gen*el for gen in A.generators] for el in S_els]
In [19]: temp.count(False)
Out[19]: 719
In [20]: temp.count(True)
Out[20]: 1
In [21]: G = S.centralizer(C)
In [22]: G == C
Out[22]: True
In [23]: temp = [[el*gen for gen in C.generators] == [gen*el for gen in C.generators] for el in S_els]
In [24]: temp.count(True)
Out[24]: 6
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;(it takes some effort to see that these calculations indeed prove that .centralizer() returned the needed centralizer). The centralizer algorithm uses a pruning criterion described in [1], and even though it’s exponential in complexity, it’s fast for practical purposes. Both of the above functions are available (albeit not documented yet) on &lt;a href=&quot;https://github.com/amakelov/sympy/tree/week10&quot; target=&quot;_blank&quot;&gt;my week10 branch&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The next steps are an algorithm for the centre in polynomial time, and an algorithm to find the intersection of two subgroups! And after that, I hope to be able to implement the Todd-Coxeter algorithm…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it for now!&lt;/p&gt;
&lt;p&gt;[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp;amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/445/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/445/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=445&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-06T14:26:08+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=357">
	<title>Sergiu Ivanov: The Embedding</title>
	<link>http://scolobb.wordpress.com/2012/08/05/the-embedding/</link>
	<content:encoded>&lt;p&gt;This week I have started some actual code of the derivation of commutativity of diagrams and implications.  The first half of the week has gone to splitting &lt;tt&gt;Diagram&lt;/tt&gt; into &lt;tt&gt;Diagram&lt;/tt&gt; and &lt;tt&gt;Implication&lt;/tt&gt;, as outlined in the &lt;a href=&quot;http://scolobb.wordpress.com/2012/07/29/the-reflection-about-inference/&quot;&gt;previous post&lt;/a&gt;.  Nothing really unexpected happened during that part, so there isn’t much to say about it, save for the thing that the code has become clearer and better organised.  Furthermore, I have gained a better understanding of some corner cases, as well as implemented more robust handling for those corner cases.&lt;/p&gt;
&lt;p&gt;The second half of the week was considerably more exciting and thought intensive: it was related to finding diagram embeddings.  As it should be clear from the &lt;a href=&quot;http://scolobb.wordpress.com/2012/07/29/the-reflection-about-inference/&quot;&gt;last post&lt;/a&gt;, this functionality lies at the foundation of deciding the commutativity of diagrams and implications.  In what follows, I will refer to the diagram which we need to embed as to the &lt;em&gt;pattern&lt;/em&gt;, and  to the diagram into which we need to embed as to the &lt;em&gt;model&lt;/em&gt;.  This seems to be an almost universally accepted terminology and comes from the fact that finding subgraph isomorphisms often lies at the base of various pattern matching implementations.&lt;/p&gt;
&lt;p&gt;I have started by selecting and analysing the excellent paper by J. R. Ullman, [Ullm1976], which describes a very clear way of enumerating all possible graph embeddings.  This solution, however, was not exactly what I needed.  First of all, the algorithm described in details in [Ullm1976] is actually meant for &lt;em&gt;undirected&lt;/em&gt; graphs, whereas one can clearly see arrows in diagrams.  Furthermore (a thought that has occurred to me quite late), diagrams, are actually multigraphs, in the sense that there can be more than one morphism between two objects.  Yet further, a diagram embedding must preserve morphism properties, in the sense that the embedding must map a morphism in the pattern to a morphism in the model, which has exactly the same properties as the morphism in the pattern.&lt;/p&gt;
&lt;p&gt;I attempted to find whether someone has addressed the directed multigraph embedding problem before; however, I haven’t managed to find any references on the Internet, so I started thinking on adapting Ullman’s solution to my case.  The first thing I figured out was that I could reduce the directed multigraph embedding problem to a directed graph embedding problem.  Indeed, take a diagram and flatten down all multiple morphisms &lt;em&gt;going in the same direction&lt;/em&gt; between the same to objects to one &lt;em&gt;directed&lt;/em&gt; edge between these two objects.  Then construct directed graph embeddings and, for each such embeddings, for each directed edge &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;e&quot; class=&quot;latex&quot; title=&quot;e&quot; /&gt; of the flattened pattern, construct injective, property-preserving,  mappings from the set of morphisms of the pattern, which were flattened to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;e&quot; class=&quot;latex&quot; title=&quot;e&quot; /&gt;, into the set of morphisms associated with the edge in the flattened model, to which &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;e&quot; class=&quot;latex&quot; title=&quot;e&quot; /&gt; is mapped by the subgraph isomorphism.  (These mappings are actually property-preserving embeddings in their own right, but I won’t call them so, since I’m good and I understand that the blog post has just become a bit unclear, so to say &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:-D&quot; class=&quot;wp-smiley&quot; /&gt;  )&lt;/p&gt;
&lt;p&gt;Let’s see an example.  Consider the diagram comprising two different morphisms: &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f:A\rightarrow B&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;g:A\rightarrow B&quot; /&gt;, where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; has the property &lt;tt&gt;golden&lt;/tt&gt;; this diagram is going to be out pattern.  Now, consider the model: a diagram comprising three morphisms &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Calpha%3AC%5Crightarrow+D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\alpha:C\rightarrow D&quot; class=&quot;latex&quot; title=&quot;\alpha:C\rightarrow D&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta%3AC%5Crightarrow+D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\beta:C\rightarrow D&quot; class=&quot;latex&quot; title=&quot;\beta:C\rightarrow D&quot; /&gt;, and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cgamma%3AC%5Crightarrow+D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\gamma:C\rightarrow D&quot; class=&quot;latex&quot; title=&quot;\gamma:C\rightarrow D&quot; /&gt;, in which &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\beta&quot; class=&quot;latex&quot; title=&quot;\beta&quot; /&gt; has the property &lt;tt&gt;golden&lt;/tt&gt;.  Quite obviously, all of our &lt;em&gt;property-preserving&lt;/em&gt; embeddings should map &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\beta&quot; class=&quot;latex&quot; title=&quot;\beta&quot; /&gt;, while $\latex g$ can be mapped to either &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Calpha&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\alpha&quot; class=&quot;latex&quot; title=&quot;\alpha&quot; /&gt; or &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\beta&quot; class=&quot;latex&quot; title=&quot;\beta&quot; /&gt;.  Also note that the flattened pattern in this case is the graph consisting of a single edge &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28A%2CB%29&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;(A,B)&quot; class=&quot;latex&quot; title=&quot;(A,B)&quot; /&gt;, while the flattened model is another one-edge graph, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28C%2CD%29&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;(C,D)&quot; class=&quot;latex&quot; title=&quot;(C,D)&quot; /&gt;.  More complex diagrams are treated in a similar fashion: flatten the pattern and the model to directed graphs, find directed graph embeddings, and then find the property-preserving morphism mappings.&lt;/p&gt;
&lt;p&gt;There was another slight surprise underway, however.  Ullman does describe some of the modifications which will make the original algorithm capable of constructing directed graph embeddings, however, he has apparently forgot to describe one of them.  I will give some definitions before going into more detail.  Ullman uses &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; to refer to the adjacency matrix of the pattern, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; to refer to the adjacency matrix of the model, and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=M&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;M&quot; class=&quot;latex&quot; title=&quot;M&quot; /&gt; to refer to the matrix representing a mapping of the vertices of the pattern into the vertices of the model; &lt;img src=&quot;http://s0.wp.com/latex.php?latex=M_%7Bij%7D+%3D+1&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;M_{ij} = 1&quot; class=&quot;latex&quot; title=&quot;M_{ij} = 1&quot; /&gt; means that vertex &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;i&quot; class=&quot;latex&quot; title=&quot;i&quot; /&gt; in the pattern is mapped to vertex &lt;img src=&quot;http://s0.wp.com/latex.php?latex=j&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;j&quot; class=&quot;latex&quot; title=&quot;j&quot; /&gt; in the model.&lt;/p&gt;
&lt;p&gt;Now, for given &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt;, and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=M&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;M&quot; class=&quot;latex&quot; title=&quot;M&quot; /&gt;, compute &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C+%3D+M+%28M+B%29%5ET&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C = M (M B)^T&quot; class=&quot;latex&quot; title=&quot;C = M (M B)^T&quot; /&gt;.  Condition (1) in [Ullm1976] states that, if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a_%7Bij%7D+%3D+1%5CRightarrow+c_%7Bij%7D+%3D+1&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;a_{ij} = 1\Rightarrow c_{ij} = 1&quot; class=&quot;latex&quot; title=&quot;a_{ij} = 1\Rightarrow c_{ij} = 1&quot; /&gt;, for any vertices &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;i&quot; class=&quot;latex&quot; title=&quot;i&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=j&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;j&quot; class=&quot;latex&quot; title=&quot;j&quot; /&gt; of the patern, then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=M&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;M&quot; class=&quot;latex&quot; title=&quot;M&quot; /&gt; represents an embedding.  (As usual, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a_%7Bij%7D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;a_{ij}&quot; class=&quot;latex&quot; title=&quot;a_{ij}&quot; /&gt; are elements of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c_%7Bij%7D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;c_{ij}&quot; class=&quot;latex&quot; title=&quot;c_{ij}&quot; /&gt; are elements of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C&quot; class=&quot;latex&quot; title=&quot;C&quot; /&gt;).  When I tried to actually use this criterion for a directed graph, I found that, apparently, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C%5ET&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C^T&quot; class=&quot;latex&quot; title=&quot;C^T&quot; /&gt; should be used, instead of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C&quot; class=&quot;latex&quot; title=&quot;C&quot; /&gt;.  The formal explanation follows.  By abuse of terminology, I will use “pattern” and “model” to refer to the flattened pattern and flattened model as well.&lt;/p&gt;
&lt;p&gt;Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=D+%3D+M+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;D = M B&quot; class=&quot;latex&quot; title=&quot;D = M B&quot; /&gt;.  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=d_%7Bij%7D+%3D+1&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;d_{ij} = 1&quot; class=&quot;latex&quot; title=&quot;d_{ij} = 1&quot; /&gt; means that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cexists%21+k+.+%28m_%7Bik%7D+%3D+1+%5Cmbox%7B+and+%7D+b_%7Bkj%7D+%3D+1%29&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\exists! k . (m_{ik} = 1 \mbox{ and } b_{kj} = 1)&quot; class=&quot;latex&quot; title=&quot;\exists! k . (m_{ik} = 1 \mbox{ and } b_{kj} = 1)&quot; /&gt;, where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; is a vertex of the model.  In other words, this means that the vertex &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;i&quot; class=&quot;latex&quot; title=&quot;i&quot; /&gt; of the pattern is mapped to a unique vertex &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; of the model, such that in the model there exists the (directed) edge &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28k%2C+j%29&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;(k, j)&quot; class=&quot;latex&quot; title=&quot;(k, j)&quot; /&gt;.  Obviously, if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=d%5ET_%7Bij%7D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;d^T_{ij}&quot; class=&quot;latex&quot; title=&quot;d^T_{ij}&quot; /&gt; is an element of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=D%5ET&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;D^T&quot; class=&quot;latex&quot; title=&quot;D^T&quot; /&gt;, the role of the indices is reversed, that is: the vertex &lt;img src=&quot;http://s0.wp.com/latex.php?latex=j&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;j&quot; class=&quot;latex&quot; title=&quot;j&quot; /&gt; of the pattern is mapped to a unique vertex &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; of the model, such that in the model there exists the (directed) edge &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28k%2C+i%29&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;(k, i)&quot; class=&quot;latex&quot; title=&quot;(k, i)&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;Now, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c_%7Bij%7D+%3D+1&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;c_{ij} = 1&quot; class=&quot;latex&quot; title=&quot;c_{ij} = 1&quot; /&gt; means that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cexists%21+t+.+%28m_%7Bit%7D+%3D+1+%5Cmbox%7B+and+%7D+d%5ET_%7Btj%7D+%3D+1%29&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\exists! t . (m_{it} = 1 \mbox{ and } d^T_{tj} = 1)&quot; class=&quot;latex&quot; title=&quot;\exists! t . (m_{it} = 1 \mbox{ and } d^T_{tj} = 1)&quot; /&gt;.  Deciphering the meanings of the values of the elements of these matrices, this means that the vertex &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;i&quot; class=&quot;latex&quot; title=&quot;i&quot; /&gt; of the pattern is mapped to a vertex &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;t&quot; class=&quot;latex&quot; title=&quot;t&quot; /&gt; of the model, vertex &lt;img src=&quot;http://s0.wp.com/latex.php?latex=j&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;j&quot; class=&quot;latex&quot; title=&quot;j&quot; /&gt; of the pattern is mapped to a vertex &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; of the model, such that in the model there is the edge &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28k%2C+t%29&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;(k, t)&quot; class=&quot;latex&quot; title=&quot;(k, t)&quot; /&gt;.  Now, suppose there is an edge &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28i%2C+j%29&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;(i, j)&quot; class=&quot;latex&quot; title=&quot;(i, j)&quot; /&gt; in the pattern.  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c_%7Bij%7D+%3D+1&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;c_{ij} = 1&quot; class=&quot;latex&quot; title=&quot;c_{ij} = 1&quot; /&gt; means &lt;img src=&quot;http://s0.wp.com/latex.php?latex=M&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;M&quot; class=&quot;latex&quot; title=&quot;M&quot; /&gt; maps &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;i&quot; class=&quot;latex&quot; title=&quot;i&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;t&quot; class=&quot;latex&quot; title=&quot;t&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=j&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;j&quot; class=&quot;latex&quot; title=&quot;j&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt;, such that the model contains the edge &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28k%2C+t%29&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;(k, t)&quot; class=&quot;latex&quot; title=&quot;(k, t)&quot; /&gt;.  That is, the condition (1) as stated in [Ullm1976] and applied to directed graphs checks that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=M&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;M&quot; class=&quot;latex&quot; title=&quot;M&quot; /&gt; actually &lt;em&gt;reverses&lt;/em&gt; the direction of edges!  Therefore, one must actually use &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C%5ET&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C^T&quot; class=&quot;latex&quot; title=&quot;C^T&quot; /&gt; to check for embeddings.&lt;/p&gt;
&lt;p&gt;Now, since the original algorithm in [Ullm1976] was designed for &lt;em&gt;undirected&lt;/em&gt; graphs, this extra transposition did not matter, and I think this is the reason why Ullman does not mention it.&lt;/p&gt;
&lt;p&gt;I have implemented all the things I have described so far, so diagram embeddings kinda work &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  I have played with python generators a bit, so the code only produces embeddings on the as-needed basis.  I did that because I thought of the situation when any diagram embedding will suffice, but also because using generators has resulted in what I believe to be more elegant code.  The code abounds in comments, so I think it shouldn’t be a problem to comprehend for someone different from myself.  I don’t have a formal proof for this statement, however, so, I guess, Tom is going to be the test subject for this supposition ^_^&lt;/p&gt;
&lt;p&gt;There are still a couple things to do, though.  First of all Ullman shows a nice optimisation to his algorithm; it looks pretty simple, so I’ll add it.  I will then write a couple more tests, including some crash tests involving complete graphs.  I will also have to rename the function which does all this magic from &lt;tt&gt;subdiagram_embeddings&lt;/tt&gt; to &lt;tt&gt;diagram_embeddings&lt;/tt&gt;, for obvious (I hope &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  ) reasons.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;[Ullm1976] J. R. Ullman, An Algorithm for Subgraph Isomorphism, J. Association of Computing Machinery, March, 1976, 16, 31–42.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/357/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/357/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=357&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-05T11:29:33+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://www.catchmrbharath.in/programming/2012/08/05/gsoc-week-11">
	<title>Bharath M R: GSOC week 11</title>
	<link>http://www.catchmrbharath.in/programming/2012/08/05/gsoc-week-11</link>
	<content:encoded>&lt;p&gt;I got my adaptive sampling branch merged last week. Now the plots are sampled adaptively and is more accurate. I also added a lot of tests to the implicit plotting branch and the coverage now is greater than 90%.&lt;/p&gt;

&lt;p&gt;One of the major things decided in the previous week was to restructure the plot function. Presently &lt;code&gt;plot&lt;/code&gt; is a single function, which depending on its input, renders an 2d or an 3d plot. Though it plots the right kind of plot, the &lt;code&gt;plot&lt;/code&gt; function is quite complex and it was decided to split the plot function into smaller functions that plots a particular type of plot. I tried an approach where all 2D plots are plotted by a &lt;code&gt;plot2d&lt;/code&gt; function, the 3D plots by &lt;code&gt;plot3D&lt;/code&gt; and the existing &lt;code&gt;plot_implicit&lt;/code&gt; plots to plot regions and implicit equations. Aaron mentioned that the API is still very complex as I was using tuples and lists to differentiate between a parametric plot and a 2d line plot and he was right. It is a bit complex and it was decided to have a functions for each kind of plot.&lt;/p&gt;

&lt;p&gt;I think i can have the new plot functions as an PR by next week and I would like to try getting a Mayavi backend ready by the end of my GSoC period.&lt;/p&gt;

&lt;p&gt;I forgot to mention why I deviated from my what I said I would do in my GSoC application. I tried getting a svgfig backend ready for almost one and a half week, and it was quite difficult. svgfig is not being updated and I had a hard time getting the axis ticks labelling to work most of the time. I wrote to the project maintainer many times and he helped me with a lot of things, but the library was not polished enough to use it with Sympy Live. So plotting for SymPy Live should be attempted with a javascript plotting library rather than a python backend. If we get matplotlib support on GAE, then it would be awesome.&lt;/p&gt;</content:encoded>
	<dc:date>2012-08-05T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/08/05/gsoc-week-11">
	<title>Bharath M R: GSOC week 11</title>
	<link>http://catchmrbharath.github.com/programming/2012/08/05/gsoc-week-11</link>
	<content:encoded>&lt;p&gt;I got my adaptive sampling branch merged last week. Now the plots are sampled adaptively and is more accurate. I also added a lot of tests to the implicit plotting branch and the coverage now is greater than 90%.&lt;/p&gt;

&lt;p&gt;One of the major things decided in the previous week was to restructure the plot function. Presently &lt;code&gt;plot&lt;/code&gt; is a single function, which depending on its input, renders an 2d or an 3d plot. Though it plots the right kind of plot, the &lt;code&gt;plot&lt;/code&gt; function is quite complex and it was decided to split the plot function into smaller functions that plots a particular type of plot. I tried an approach where all 2D plots are plotted by a &lt;code&gt;plot2d&lt;/code&gt; function, the 3D plots by &lt;code&gt;plot3D&lt;/code&gt; and the existing &lt;code&gt;plot_implicit&lt;/code&gt; plots to plot regions and implicit equations. Aaron mentioned that the API is still very complex as I was using tuples and lists to differentiate between a parametric plot and a 2d line plot and he was right. It is a bit complex and it was decided to have a functions for each kind of plot.&lt;/p&gt;

&lt;p&gt;I think i can have the new plot functions as an PR by next week and I would like to try getting a Mayavi backend ready by the end of my GSoC period.&lt;/p&gt;

&lt;p&gt;I forgot to mention why I deviated from my what I said I would do in my GSoC application. I tried getting a svgfig backend ready for almost one and a half week, and it was quite difficult. svgfig is not being updated and I had a hard time getting the axis ticks labelling to work most of the time. I wrote to the project maintainer many times and he helped me with a lot of things, but the library was not polished enough to use it with Sympy Live. So plotting for SymPy Live should be attempted with a javascript plotting library rather than a python backend. If we get matplotlib support on GAE, then it would be awesome.&lt;/p&gt;</content:encoded>
	<dc:date>2012-08-05T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://blog.catchmrbharath.in/programming/2012/08/05/gsoc-week-11">
	<title>Bharath M R: GSOC week 11</title>
	<link>http://blog.catchmrbharath.in/programming/2012/08/05/gsoc-week-11</link>
	<content:encoded>&lt;p&gt;I got my adaptive sampling branch merged last week. Now the plots are sampled adaptively and is more accurate. I also added a lot of tests to the implicit plotting branch and the coverage now is greater than 90%.&lt;/p&gt;

&lt;p&gt;One of the major things decided in the previous week was to restructure the plot function. Presently &lt;code&gt;plot&lt;/code&gt; is a single function, which depending on its input, renders an 2d or an 3d plot. Though it plots the right kind of plot, the &lt;code&gt;plot&lt;/code&gt; function is quite complex and it was decided to split the plot function into smaller functions that plots a particular type of plot. I tried an approach where all 2D plots are plotted by a &lt;code&gt;plot2d&lt;/code&gt; function, the 3D plots by &lt;code&gt;plot3D&lt;/code&gt; and the existing &lt;code&gt;plot_implicit&lt;/code&gt; plots to plot regions and implicit equations. Aaron mentioned that the API is still very complex as I was using tuples and lists to differentiate between a parametric plot and a 2d line plot and he was right. It is a bit complex and it was decided to have a functions for each kind of plot.&lt;/p&gt;

&lt;p&gt;I think i can have the new plot functions as an PR by next week and I would like to try getting a Mayavi backend ready by the end of my GSoC period.&lt;/p&gt;

&lt;p&gt;I forgot to mention why I deviated from my what I said I would do in my GSoC application. I tried getting a svgfig backend ready for almost one and a half week, and it was quite difficult. svgfig is not being updated and I had a hard time getting the axis ticks labelling to work most of the time. I wrote to the project maintainer many times and he helped me with a lot of things, but the library was not polished enough to use it with Sympy Live. So plotting for SymPy Live should be attempted with a javascript plotting library rather than a python backend. If we get matplotlib support on GAE, then it would be awesome.&lt;/p&gt;</content:encoded>
	<dc:date>2012-08-05T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/2012/08/04/gsoc-blog-post-58/">
	<title>Angadh Nanjangud: GSoC Blog Post</title>
	<link>http://angadhsympy.wordpress.com/2012/08/04/gsoc-blog-post-58/</link>
	<content:encoded>&lt;p&gt;So, in last week’s post I had said that the Lagrange class had neared completion. By mid-week I had it functional, so I opened a discussion on the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/sympy/LgSJPLgWmik&quot;&gt;mailing list&lt;/a&gt; asking for suggestions to improve the class. Several people in the group suggested that it’d be better to supply all the parameters on initialization. At first I was loath to make this change. This was for the following few reasons-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;My primary concern was that I felt it was taking away from the clarity in generating the equations of motion. I have spoken about that in some detail in the conversation on the group page about how I feel dynamicists would probably prefer typing an extra couple lines as long as the procedure to obtain the equations of motion feel similar to the work done by hand. I’m a a fan of the (possibly false) sense of security that comes from bookkeeping even whilst on a computer. Of course, I had to accede that it made no sense to have so many methods when everything could be passed at initialization. The argument that users would essentially have to memorize a sequence or procedure was a good one.&lt;/li&gt;
&lt;li&gt;The other thing was that I felt was that this was making the structure of the ‘Lagrange’ class tremendously different from the ‘Kane’ class. But after discussions with Luke, Jason and Gilbert it became pretty apparent that even they felt that it might not have been the best way to implement that class. At one point I too felt like it was little weird that I was creating so many little methods which could’ve been merged into the initialization of the class itself. But I was just concentrating on staying true to the current structure of things in the mechanics package.&lt;/li&gt;
&lt;li&gt;And the final reason for my apprehension was that I would have to revamp the whole method after having spent quite some time on it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But it was very clear after a point that things had to change. So, I spent a good chunk of time making the required changes.&lt;/p&gt;
&lt;p&gt;Also, we decided on, what I feel is, a more appropriate name for the class changing it from ‘Lagrange’ to ‘LagrangesMethod’. Most of the equation derivation techniques in dynamics have the ‘Method’ attached to the founder’s name. It made even more sense for this class because Lagrange’s contributions are numerous so just calling a class ‘Lagrange’ could lead to some ambiguity.&lt;/p&gt;
&lt;p&gt;Rewriting the class also helped me hone my Python skills some more. I had come across the keyword arguments construct several times in my preparation for the summer of code but I was a little reluctant to use it. It was probably because it was something that felt so alien to me as I have never seen something like that in my fledgling programming career. But with great explanations on the groups message (linked above), things were made clearer as to how it should be done.&lt;/p&gt;
&lt;p&gt;So having rewritten the class, I added the docstrings for it. I’m not too pleased with that part right now, but I’m confident it will get better with more input on the &lt;a href=&quot;https://github.com/sympy/sympy/pull/1460#issuecomment-7499946&quot;&gt;PR&lt;/a&gt; discussion.&lt;/p&gt;
&lt;p&gt;So having opened that PR, I thought I would get back to working on the documentation as I had planned. But I ended up going off on a tangent with the discussion that was sparked on &lt;a href=&quot;https://github.com/sympy/sympy/pull/1407/files#r1307146&quot;&gt;PR 1407&lt;/a&gt; which is the stuff that I have added on the energy functions. I spent a good chunk of time going through that and almost completely changing the way the ‘kinetic_energy’ function works.&lt;/p&gt;
&lt;p&gt;On that same PR, there was a discussion about how a more readable error should be generated if a user calls the ‘potential_energy’ property for either a Particle or RigidBody without having first set the potential energy using the ‘set_potential_energy’ method. What at the time seemed an innocuous thing to repair became a little interesting challenge for me. Without going into too many more details, I was pleased to have found a relatively simple fix with the ‘callable’ function in Python with the help of the online forum ‘Stack Overflow’.&lt;/p&gt;
&lt;p&gt;Having handled most of the recommendations on PR1407, I decided to skip on the documentation for the time being and returned to “complete” what would be the most important part relatied to the “LagrangesMethod” class- the test! While writing the class, I had written a little dummytest to check for the little tihngs but I hadn’t subjected a real dynamical system to the ultimate test (pun intended). I decided to test the well known ‘disc rolling down an inclined plane’ problem. Not to generate any suspense, but I would like to point out that in my proposal I had said that I would only concentrate on unconstrained systems. But Gilbert and I spent a little more time to make the ‘LagrangesMethod’ class more useful and complete. The class should now be able to handle any system i.e. constrained or unconstrained. A lot of the credit goes to Gilbert for helping me through the numerous confusions I had with the implementation of the constrained systems. But back to the test. I picked that system because it has a configuration constraint and we handle configuration constraints a little unconventionally in this class. I was a little anxious about how the results for this would turn out but ti worked like a charm. With the one test that I have written, which I think is a pretty good system to test, it appears that the ‘LagrangesMethod’ class works like a charm.&lt;/p&gt;
&lt;p&gt;Anyhow, it’s now time to get some shuteye and more importantly rest the leg as I have been a little cavalier with it in the last couple of days. Until next week.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/419/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/419/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=419&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-04T15:24:03+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=235">
	<title>Guru Devanla: Week 11:  Fidelity of quantum states</title>
	<link>http://rhoforsympy.wordpress.com/2012/08/03/week-11-fidelity-of-quantum-states/</link>
	<content:encoded>&lt;p&gt;As discussed in my previous weeks report, this week I started addressing some of the issues in the pending PR’s and all the pending PRs were merged!&lt;/p&gt;
&lt;p&gt;In addition to getting the pending PRs accepted, I have stated working on 2 other tasks. One of them, that was completed is the feature to compute Fidelity (&lt;a href=&quot;https://github.com/sympy/sympy/pull/1459&quot;&gt;PR 1459&lt;/a&gt;) of quantum states.  Some screen-shots follow (taken from notebook examples available with code base). Information regarding fidelity can be found at these 2 wikis: &lt;a href=&quot;http://en.wikipedia.org/wiki/Fidelity_of_quantum_states&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://www.quantiki.org/wiki/Fidelity&quot;&gt;2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the next week, my plan is to finish up work on the implementation of Shor’s algorithm available &lt;a href=&quot;https://github.com/addisonc/sympy/blob/addison-main/sympy/physics/quantum/shor.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some examples of using the fidelity function:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rhoforsympy.files.wordpress.com/2012/08/fidelity_ket.png&quot;&gt;&lt;img src=&quot;http://rhoforsympy.files.wordpress.com/2012/08/fidelity_ket.png?w=500&amp;amp;h=382&quot; title=&quot;fidelity_ket&quot; height=&quot;382&quot; width=&quot;500&quot; alt=&quot;&quot; class=&quot;alignleft size-full wp-image-238&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rhoforsympy.files.wordpress.com/2012/08/fidelity-qubit2.png&quot;&gt;&lt;img src=&quot;http://rhoforsympy.files.wordpress.com/2012/08/fidelity-qubit2.png?w=500&amp;amp;h=369&quot; title=&quot;fidelity-qubit&quot; height=&quot;369&quot; width=&quot;500&quot; alt=&quot;&quot; class=&quot;alignleft size-full wp-image-243&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/235/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/235/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=235&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-03T21:19:25+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=551">
	<title>Stefan Krastanov: The diffgeom Module – Status Report</title>
	<link>http://blog.krastanov.org/2012/08/02/the-diffgeom-module-status-report/</link>
	<content:encoded>&lt;p&gt;I have written already a few posts about the theory behind the module, the structure of the module, etc. However, besides some rare examples, I have not described in much details how the work progresses. So here is a short summary (check the git log for more details):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The basics about coordinate systems and fields are already in. There are numerous issues with all the simplify-like algorithms inside SymPy, however they are slowly ironed out.&lt;/li&gt;
&lt;li&gt;Some simplistic methods for work with integral curves are implemented.&lt;/li&gt;
&lt;li&gt;The basics of tensor/wedge products are in. Many simplification routines can be added. Contraction between tensor products and vectors is possible (special case of “lowering of an index”).&lt;/li&gt;
&lt;li&gt;Over-a-map, pushforwards and pullbacks are not implemented yet.&lt;/li&gt;
&lt;li&gt;Instead of them I have focused my work on derivatives and curvature tensors. For the moment work on these can be done in a limited coordinate-dependent way. A longer post explaining the theory is coming and with it an implementation slightly less dependent on coordinates (working with Christoffel symbols is a pain).&lt;/li&gt;
&lt;li&gt;Hodge star operator – still not implemented.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example that I want to implement is a theorem that in irrotational cosmology isotropy implies homogeneity. Doing this will be the first non-trivial example in this module.&lt;/p&gt;
&lt;p&gt;A serendipitous detour from the project was my work on the differential equations solver. Aaron had implemented a very thorough solver for single equations. I had tried to extend it in a few simple ways in order to work with systems of ODEs and initial conditions. However this led me to Jordan forms of matrices, generalized eigenvectors and a bunch of interesting details on which I work in my free time (especially this week).&lt;/p&gt;
&lt;br /&gt;  &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;amp;blog=15251174&amp;amp;post=551&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-08-01T22:59:47+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=429">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 10</title>
	<link>http://amakelov.wordpress.com/2012/07/30/google-summer-of-code-2012-week-10/</link>
	<content:encoded>&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;here’s a brief summary of what I’ve been doing during the 10th week of my GSoC.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Though I fixed a bug in the SUBGROUPSEARCH function during the week, I ran some more comprehensive tests as I had planned to, and some of them broke the function. If you’re particularly interested, something like that will work:&lt;br /&gt;
&lt;pre class=&quot;brush: python; wrap-lines: false;&quot;&gt;In [87]: S = SymmetricGroup(5)
In [88]: prop_fix_3 = lambda x: x(3) == 3
In [89]: %autoreload
In [90]: S.subgroup_search(prop_fix_3)
---------------------------------------------------------------------------
StopIteration                             Traceback (most recent call last)
&amp;lt;ipython-input-90-6b85aa1285b8&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 S.subgroup_search(prop_fix_3)

/home/alexander/workspace/sympy/sympy/combinatorics/perm_groups.py in subgroup_search(self, prop, base, strong_gens, tests, init_subgroup)
2660
2661                 # this function maintains a partial BSGS structure up to position l
-&amp;gt; 2662                 _insert_point_in_base(res, res_base, res_strong_gens, l, new_point, distr_gens=res_distr_gens, basic_orbits=res_basic_orbits, transversals=res_transversals)
2663                 # find the l+1-th basic stabilizer
2664                 new_stab = PermutationGroup(res_distr_gens[l + 1])

/home/alexander/workspace/sympy/sympy/combinatorics/util.py in _insert_point_in_base(group, base, strong_gens, pos, point, distr_gens, basic_orbits, transversals)
423     # baseswap with the partial BSGS structures. Notice that we need only
424     # the orbit and transversal of the new point under the last stabilizer
--&amp;gt; 425     new_base, new_strong_gens = group.baseswap(partial_base, strong_gens, pos, randomized=False, transversals=partial_transversals, basic_orbits=partial_basic_orbits, distr_gens=partial_distr_gens)
426     # amend the basic orbits and transversals
427     stab_pos = PermutationGroup(distr_gens[pos])

/home/alexander/workspace/sympy/sympy/combinatorics/perm_groups.py in baseswap(self, base, strong_gens, pos, randomized, transversals, basic_orbits, distr_gens)
2472             # ruling out member of the basic orbit of base[pos] along the way
2473             while len(current_group.orbit(base[pos])) != size:
-&amp;gt; 2474                 gamma = iter(Gamma).next()
2475                 x = transversals[pos][gamma]
2476                 x_inverse = ~x

StopIteration:

&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The reason is certainly the change of base performed on line 11 in the pseudocode (this is also indicated in my code on my local week6 branch &lt;a href=&quot;https://github.com/amakelov/sympy/tree/week6&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; ). The use of the function BASESWAP there is what gets us into trouble. It is meant to be applied to  base and a strong generating set relative to it, switch two consecutive base points and change the generating set accordinly.  However, in subgroup_search the goal is to change a base &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%2C+%5Cldots%2C+b_k%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, b_2, \ldots, b_l, \ldots, b_k)&quot; class=&quot;latex&quot; title=&quot;(b_1, b_2, \ldots, b_l, \ldots, b_k)&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%27%2C+%5Cldots%2C+b_k%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, b_2, \ldots, b_l', \ldots, b_k)&quot; class=&quot;latex&quot; title=&quot;(b_1, b_2, \ldots, b_l', \ldots, b_k)&quot; /&gt; where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b_l%27&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;b_l'&quot; class=&quot;latex&quot; title=&quot;b_l'&quot; /&gt; is a new point. The book ([1]) mentions that this is done by using BASESWAP but doesn’t provide any details. My strategy is the following: I cut the base so that it becomes &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_l%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, b_2,\ldots, b_l)&quot; class=&quot;latex&quot; title=&quot;(b_1, b_2,\ldots, b_l)&quot; /&gt; and cut the correponding data structures – the strong generators &lt;strong&gt;strong_gens&lt;/strong&gt;, the &lt;strong&gt;basic_orbits, &lt;/strong&gt; the &lt;strong&gt;transversals&lt;/strong&gt;, and the strong generators distributed according to membership in basic stabilizers &lt;strong&gt;distr_gens &lt;/strong&gt;(I know, I still have to rename this to strong_gens_distr). Then I append the point &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b_l%27&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;b_l'&quot; class=&quot;latex&quot; title=&quot;b_l'&quot; /&gt; so that the base is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%2C+b_l%27%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, b_2, \ldots, b_l, b_l')&quot; class=&quot;latex&quot; title=&quot;(b_1, b_2, \ldots, b_l, b_l')&quot; /&gt; and calculate an orbit and transversal for $b_l’$ under the stabilzier of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b_1%2C+b_2%2C+%5Cldots%2C+b_l&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;b_1, b_2, \ldots, b_l&quot; class=&quot;latex&quot; title=&quot;b_1, b_2, \ldots, b_l&quot; /&gt;. Finally I apply BASESWAP to this new base in order to switch the two rightmost points. Then I go back to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_l%27%2C+%5Cldots%2C+b_k%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, b_2, \ldots, b_l', \ldots, b_k)&quot; class=&quot;latex&quot; title=&quot;(b_1, b_2, \ldots, b_l', \ldots, b_k)&quot; /&gt; by appending what I had cut in the start and calculating a transversal/orbit for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b_%7Bl%2B1%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;b_{l+1}&quot; class=&quot;latex&quot; title=&quot;b_{l+1}&quot; /&gt; under the stabilizer just found, that of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b_1%2C+%5Cldots%2C+b_l%27&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;b_1, \ldots, b_l'&quot; class=&quot;latex&quot; title=&quot;b_1, \ldots, b_l'&quot; /&gt;. Obviously, the resulting BSGS structures are valid only up to position &lt;img src=&quot;http://s0.wp.com/latex.php?latex=l&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;l&quot; class=&quot;latex&quot; title=&quot;l&quot; /&gt;, and that’s all the information we can acquire without another application of baseswap or finding another stabilizer ( and in general, finding a stabilizer is a computationally hard task relative to calculating orbits/transversals). The entire purpose of this use of BASESWAP in SUBGROUPSEARCH is to obtain generators for the stabilizer of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b_1%2C+b_2%2C+%5Cldots%2C+b_l%27&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;b_1, b_2, \ldots, b_l'&quot; class=&quot;latex&quot; title=&quot;b_1, b_2, \ldots, b_l'&quot; /&gt; and maintain a base/strong generating set that are valid up to a certain position. There are many such base changes performed on the same base throughout the course of the function and something goes wrong along the way. I still have to figure out why and where.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The good news&lt;/strong&gt;: There is a straightforward alternative to using BASESWAP: maintain a list of generators for each of the basic stabilizers in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C+%5Cldots%2C+b_k%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, b_2, \ldots, b_k)&quot; class=&quot;latex&quot; title=&quot;(b_1, b_2, \ldots, b_k)&quot; /&gt; and change it accordingly as the base is changed, using the function stabilizer() in sympy/combinatorics/perm_groups.py. For each base change we have to calculate one more stabilizer, so that’s not terrible. It is also sort of suggested in &lt;a href=&quot;http://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CFIQFjAA&amp;amp;url=http%3A%2F%2Fwww.math.colostate.edu%2F~hulpke%2FCGT%2Fcgtnotes.pdf&amp;amp;ei=u48WUN24M4jf4QS2q4GgBg&amp;amp;usg=AFQjCNHasgOmBkx2AetpE0_-92TFjSyU3A&quot; target=&quot;_blank&quot;&gt;“Notes on Computational Group Theory”&lt;/a&gt; by Alexander Hulpke (page 34). The problem with this approach is that stabilizer() tends to return a group with many generators, and repeated applications keep increasing this number. However, using this &lt;strong&gt;removed the bug from SUBGROUPSEARCH. &lt;/strong&gt;As before, more comprehensive tests are on the way : )&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Yet another alternative : &lt;/strong&gt;we can use the incremental Schreier-Sims algorithm with the new base &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+%5Cldots%2C+b_l%27%2C+%5Cldots%2C+b_k%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, \ldots, b_l', \ldots, b_k)&quot; class=&quot;latex&quot; title=&quot;(b_1, \ldots, b_l', \ldots, b_k)&quot; /&gt; and the strong generating set for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+%5Cldots%2C+b_l%2C+%5Cldots%2C+b_k%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, \ldots, b_l, \ldots, b_k)&quot; class=&quot;latex&quot; title=&quot;(b_1, \ldots, b_l, \ldots, b_k)&quot; /&gt;. There will likely be redundant generators after that, and it will probably involve more computation than finding a single stabilizer. However, in the long run (since there are many base changes performed) this might perform faster (due to the increasing number of generators that stabilizer() tends to create). I have not tried that approach yet.&lt;/li&gt;
&lt;li&gt;Other than that, I had &lt;a href=&quot;https://github.com/sympy/sympy/pull/1406&quot; target=&quot;_blank&quot;&gt;my latest major pull request&lt;/a&gt; merged! Thanks a lot to &lt;a href=&quot;https://github.com/Krastanov&quot; target=&quot;_blank&quot;&gt;Stefan&lt;/a&gt; and my mentor &lt;a href=&quot;https://github.com/wdjoyner&quot; target=&quot;_blank&quot;&gt;David&lt;/a&gt; for the review! That was the largest one so far…&lt;/li&gt;
&lt;li&gt;I started reading about some of the applications of subgroup search; subgroup intersection seems to be the easiest to implement, so I’ll probably go for it first.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it for now : )&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/429/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/429/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=429&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-30T13:46:30+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=222">
	<title>Guru Devanla: Week 10: Finishing up density matrices!</title>
	<link>http://rhoforsympy.wordpress.com/2012/07/30/week-10-finishing-up-density-matrices/</link>
	<content:encoded>&lt;p&gt;This week I largely wrapped up most of the items I had listed in the proposal. The current pending PR addresses and completes most of the major features I had proposed to implement. Some minor issues that are still pending should be addressed during the next week.&lt;/p&gt;
&lt;p&gt;1. Adjust qapply() to complete some density based operations more gracefully.&lt;/p&gt;
&lt;p&gt;2. Relocate the trace.py modules from core to another suggested folder. There have been some discussions on this on the mailing thread, which I plan to re-initiate and get a closure on this week.&lt;/p&gt;
&lt;p&gt;Apart from these 2 items, based on some IRC discussions I had with Brian during past week, I have started looking at following 2 items. My plan is to work on the following 2 items during this month.&lt;/p&gt;
&lt;p&gt;1. Finish up implementation of Shor’s algorithm currently available here: &lt;a href=&quot;https://github.com/addisonc/sympy/blob/addison-main/sympy/physics/quantum/shor.py&quot;&gt;git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.  Implement the fidelity and trace distances for density matrices: &lt;a href=&quot;http://en.wikipedia.org/wiki/Fidelity_of_quantum_states&quot;&gt;Ref&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;Happy Coding!&lt;/div&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/222/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/222/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=222&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-30T04:03:39+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=308">
	<title>Sergiu Ivanov: The Reflection about Inference</title>
	<link>http://scolobb.wordpress.com/2012/07/29/the-reflection-about-inference/</link>
	<content:encoded>&lt;p&gt;This week I have been working both on fixing some existing code (including &lt;a href=&quot;https://github.com/sympy/sympy/pull/1429&quot;&gt;diagram layout&lt;/a&gt;) and on better understanding the code that I am going to write next.  As far as the fixes are concerned, I have further polished the diagram layout code, including the addition of some pretty printing for &lt;tt&gt;DiagramGrid&lt;/tt&gt;.  I didn’t initially expect pretty printing to be useful for this class; however, it turned out that being able to quickly glance at the grid itself was very helpful in certain situations.&lt;/p&gt;
&lt;p&gt;Something which makes me very content is that I have finally submitted a fix for the sort key problem for unordered collections.  The essence of the problem is as follows.  With hash randomisation enabled, the order of &lt;tt&gt;Basic.args&lt;/tt&gt; changes on every run.  On the other hand, &lt;tt&gt;Basic.sort_key&lt;/tt&gt; traverses the arguments in the order in which they are stored; therefore, sort keys are dependent on the actual order of the arguments.  This has given me trouble when working on laying out diagrams, specifically, in handling groups.  The thing is that the group handling code relies on &lt;tt&gt;FiniteSet&lt;/tt&gt; (this maybe isn’t the best idea, but that’s a different story, really &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; ): groups are eventually converted to &lt;tt&gt;FiniteSet&lt;/tt&gt;‘s of &lt;tt&gt;FiniteSet&lt;/tt&gt;‘s.  To assure stable output, the collection of &lt;tt&gt;FiniteSet&lt;/tt&gt;‘s is &lt;em&gt;sorted&lt;/em&gt;.  However, due to the influence of hash randomisation on sort keys, this sorting would &lt;em&gt;not&lt;/em&gt; actually produce the desired consequences.  There was a similar problem in the same block of functionality which had to do with sorting &lt;tt&gt;Diagram&lt;/tt&gt;‘s; the issue there was that a &lt;tt&gt;Diagram&lt;/tt&gt; stores &lt;tt&gt;Dict&lt;/tt&gt;‘s which, being unordered collections, were subject to the same sort key trouble.  Pull request &lt;a href=&quot;https://github.com/sympy/sympy/pull/1446&quot;&gt;#1446&lt;/a&gt; fixes all of these issues and, finally, the diagram drawing code almost always passes all of its tests.&lt;/p&gt;
&lt;p&gt;It is worth mentioning that while the fix for the sort key problem was not included in the &lt;a href=&quot;https://github.com/sympy/sympy/pull/1429&quot;&gt;#1429&lt;/a&gt;, I was inclined to classify all problems as related to &lt;tt&gt;FiniteSet.sort_key&lt;/tt&gt;.  With the fix in the branch, it turned out that there were some other subtle sorting issues, which I am still fixing.&lt;/p&gt;
&lt;p&gt;I have also sent pull request &lt;a href=&quot;https://github.com/sympy/sympy/pull/1440&quot;&gt;#1440&lt;/a&gt; which fixes the pretty printing of morphisms and diagrams, introduced by myself in &lt;a href=&quot;https://github.com/sympy/sympy/pull/1338&quot;&gt;#1338&lt;/a&gt;.  Initially, I would use short Unicode arrows for pretty printing morphisms, but Tom and I have arrived at the conclusion that these arrows look too condensed.  I have then chosen to use long Unicode arrows; it turned out however that Unicode characters which span more than one symbol are not rendered consistently across different machines.  On my computer, the longer arrow would overlap with the next character in line; on Tom’s, it would not.  Aaron has suggested building up arrows out of em dashes and black right-pointing triangles, and this seems to work better, although it still looks ugly with some fonts (e.g., the default font in &lt;em&gt;rxvt-unicode&lt;/em&gt;, as reported by Tom).&lt;/p&gt;
&lt;p&gt;I have also promised to implement variable-length horizontal arrows.  I have decided to postpone this for now, however, in order to better focus on my GSoC project.  I will keep that task in mind, however, and will most probably return to it in a couple of days.&lt;/p&gt;
&lt;p&gt;As for deciding the commutativity of diagrams, I have run into an unexpected conceptual problem, arising from the fundamental difference between diagrams with conclusions and without conclusions.  Before explaining the problem, I will remind the description of these two types of constructions.  A commutative diagram is a collection of morphisms (which usually form a connected directed graph) with the property that composing all morphisms along any two paths between any two objects produces the same composite morphism.  While being quite general, in category theory it is customary to produce statements like “if there are such morphisms, there exist such morphisms, and the diagram is commutative”.  This statement is clearly an implication.  The class &lt;tt&gt;Diagram&lt;/tt&gt; is a representation of the second type of statement and contains sets of premise morphisms and conclusion morphisms.  &lt;tt&gt;Diagram&lt;/tt&gt; is also conventionally capable of representing simple commutativity if no conclusions are specified.&lt;/p&gt;
&lt;p&gt;While I was initially quite comfortable with using &lt;tt&gt;Diagram&lt;/tt&gt; for both types of statements, I am really inclined to considering the creation of two separate classes now.  Thus I plan to rename &lt;tt&gt;Diagram&lt;/tt&gt; to &lt;tt&gt;Implication&lt;/tt&gt; and add a different  &lt;tt&gt;Diagram&lt;/tt&gt; which will represent what I used to call “commutative diagram without conclusions”.  That is, &lt;tt&gt;Diagram&lt;/tt&gt; will hold only one collection of morphisms.&lt;/p&gt;
&lt;p&gt;With this separation, it is immediately clear that, in the context of my model, the question “Is this diagram commutative?” actually incorporates two totally different questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is this &lt;tt&gt;Diagram&lt;/tt&gt; commutative?&lt;/li&gt;
&lt;li&gt;Is this &lt;tt&gt;Implication&lt;/tt&gt; true and commutative?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fortunately for me ( &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  ), this newly-discovered separation does not remove the possibility of answering both questions with almost the same algorithm.  I will start with question (1) to further stress the difference between the semantics of diagrams and implications.&lt;/p&gt;
&lt;p&gt;Consider a collection of &lt;tt&gt;Diagram&lt;/tt&gt;‘s and &lt;tt&gt;Implication&lt;/tt&gt;‘s known to be commutative.  (By saying “an &lt;tt&gt;Implication&lt;/tt&gt; is commutative” I will abuse the terminology and mean “an &lt;tt&gt;Implication&lt;/tt&gt; is true and commutative.”)  We need to decide whether the target &lt;tt&gt;Diagram&lt;/tt&gt; is commutative.  The algorithm I will describe is based on &lt;a href=&quot;http://en.wikipedia.org/wiki/Backward_chaining&quot;&gt;backward chaining&lt;/a&gt; and is therefore recursive.  A recursive step consists of two stages: the &lt;em&gt;commutativity&lt;/em&gt; stage and the &lt;em&gt;inference&lt;/em&gt; stage.  The goal of the commutativity stage is to decide whether the current version of the target &lt;tt&gt;Diagram&lt;/tt&gt; is commutative; the goal of the inference stage is to see whether applying one of the &lt;tt&gt;Implication&lt;/tt&gt;‘s will make the target &lt;tt&gt;Diagram&lt;/tt&gt; commutative.&lt;/p&gt;
&lt;p&gt;The commutativity stage starts with taking every morphism of the target &lt;tt&gt;Diagram&lt;/tt&gt; and putting each of them into its own commutative subdiagram.  Now, for each commutative subdiagram, the algorithm will pick a subset of morphisms and will then put the subsets together to form another subdiagram.  This subdiagram will then be compared with each of the &lt;tt&gt;Diagram&lt;/tt&gt;‘s known to be commutative.  If a match is found, the subdiagram is added to the set of commutative subdiagrams.  Then, all possible “absorptions” among the diagrams are performed (i.e., if subdiagram &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; is a subdiagram of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt;, the subdiagram &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; is removed from the collection of subdiagrams (for obvious reasons)) and the iteration returns to its start, where it picks subsets of the new subdiagrams.  Since the number of morphisms in the diagram is finite, this process is finite.  If, in the end, the collection of commutative subdiagrams contains only the target diagram, it is deemed commutative.&lt;/p&gt;
&lt;p&gt;Note that this alrogithm is very similar to one of the methods of finding all prime implicants of a boolean function (we called that Blake-Poretski algorithm at the university, but I cannot find any references on my Internet).  I have considered the possibilities of directly converting the commutativity stage to a boolean function minimisation problem, but I haven’t found a sufficiently elegant way yet.&lt;/p&gt;
&lt;p&gt;The inference stage exactly follows the idea of backward chaining.  For each &lt;tt&gt;Implication&lt;/tt&gt; an attempt is made to find the embedding of the premises into the target &lt;tt&gt;Diagram&lt;/tt&gt;.  If such an embedding is found, the corresponding conclusions are added to a copy of the target &lt;tt&gt;Diagram&lt;/tt&gt; and a recursive examination of the modified &lt;tt&gt;Diagram&lt;/tt&gt; is made.  The found embedding of one of the &lt;tt&gt;Implication&lt;/tt&gt;‘s plus the added conclusions are propagated down the recursion tree as commutative subdiagrams.  The commutative stages of the following recursive calls will take their commutativity for granted.&lt;/p&gt;
&lt;p&gt;If one of these recursive calls returns a positive result, this positive result is propagated up the call stack.  If neither of the recursive calls returned a positive result, or if no embedding of an &lt;tt&gt;Implication&lt;/tt&gt; has been found in a certain recursive call, a negative result is returned from this recursive call.&lt;/p&gt;
&lt;p&gt;Note that it actually was the inference stage that I described in my original GSoC &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;proposal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before showing how to answer question (2), I would like to analyse the algorithm idea I have just presented a little bit.  One can see that the commutativity and inference stages are &lt;em&gt;very&lt;/em&gt; different; so different, in fact, that they are almost independent.  Therefore, these two bits of functionality will live in separate pieces of code, and will be later combined to function together.  I will start by defining two internal classes, &lt;tt&gt;_CommutativityStage&lt;/tt&gt; and &lt;tt&gt;_InferenceStage&lt;/tt&gt; which will host the corresponding functions.  The code that will actually combine the two will either be a global function or a class; this will be clearer later and is not important at the moment.&lt;/p&gt;
&lt;p&gt;Question (2) now: “Is the given &lt;tt&gt;Implication&lt;/tt&gt; true (and commutative)?”.  In this case, one should start from the premises of the given &lt;tt&gt;Implication&lt;/tt&gt; and apply the same strategy as in answering question (1).  Here, however, the terminal criterion is that the target &lt;tt&gt;Diagram&lt;/tt&gt; (obtained from the premises of the original &lt;tt&gt;Implication&lt;/tt&gt;) is commutative &lt;em&gt;and&lt;/em&gt; contains the conclusions of the original &lt;tt&gt;Implication&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;A remark about comparing diagrams is due here: this is nothing but the &lt;a href=&quot;http://en.wikipedia.org/wiki/Subgraph_isomorphism_problem&quot;&gt;subgraph isomorphism problem&lt;/a&gt;.  I have already found &lt;a href=&quot;http://scolobb.wordpress.com/feed/software.nju.edu.cn/lingzong/papers/SGI.pdf&quot;&gt;this paper&lt;/a&gt; (haven’t read it yet), but I’m open to other paper suggestions in this regard &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;EDIT: I have decided to not follow this article and instead focus on a more basic solution.  Should the need occur, I will implement this (apparently) more efficient version.&lt;/p&gt;
&lt;p&gt;It is necessary to keep in mind that, besides finding the subgraph isomporphism proper, the code will have to pay attention to morphism properties as well.&lt;/p&gt;
&lt;p&gt;Now, the most attentive readers might have already remarked that semantically splitting the class &lt;tt&gt;Diagram&lt;/tt&gt; into two will impact diagram drawing.  Yet, the impact will be rather modest, since the drawing code already knows how to deal with something similar to &lt;tt&gt;Implication&lt;/tt&gt;; adding explicit support for new &lt;tt&gt;Diagram&lt;/tt&gt; is going to require minimal effort.&lt;/p&gt;
&lt;p&gt;In this blog post, I recognize that my initial class model was flawed in yet another place.  I try to see this is as a sign of personal progress, though &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/308/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/308/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=308&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-29T19:20:53+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/?p=305">
	<title>Angadh Nanjangud: GSoC Blog post</title>
	<link>http://angadhsympy.wordpress.com/2012/07/28/gsoc-blog-post/</link>
	<content:encoded>&lt;p&gt;In the week accompanying and the weeks following the evaluation, I have been working on the implementation of &lt;a href=&quot;http://en.wikipedia.org/wiki/Lagrangian_mechanics&quot;&gt;Lagrange’s method&lt;/a&gt; to the ‘mechanics’ armory. A lot can be written on the method but  I will spare the details here for now. In terms of progress on the coding itself, I feel like I have made significant strides in completing it. I expect to open a pull request in the middle of the upcoming week on Lagrange’s method, once I have some more of the ‘kinks’ ironed out.&lt;/p&gt;
&lt;p&gt;I’m simultaneously working on the documentation aspect mentioned on my proposal. Currently, I’m working on adding to the theoretical or ‘text-book’ documentation that mechanics has on sympy docs. Specifically, I’m working on the theoretical material of the helper functions that I have added. Ideally, I will be opening a PR for this at the same time as the PR for Lagrange but that may not happen.&lt;/p&gt;
&lt;p&gt;I would also like to apologise for missing out on the blog post last week. There were certain extenuating circumstances with respect to my physical health that I had to deal with coupled with a failure of my internet connection (which my ISP finally resolved on Wednesday). With regards to my health- I have had a troublesome knee problem which needed surgery. I had put off the surgery until the end of August but unfortunately the situation took a turn for the worse in the week following the evaluation. Anyhow it ended with me requiring an ACL reconstruction and meniscus removal. Unexpected but I have tried hard to not let it hamper productivity as best as possible. Nonetheless I apologise for my tardiness.&lt;/p&gt;
&lt;p&gt;In terms of the bigger picture with respect to my GSoC goals, it may look like I’m a little behind schedule but since I’m  simultaneously working on two of my goals right now which will get knocked off, in the worst case scenario, in the next two weeks. I will still have a couple more weeks to work on my final goal which is the addition and improvement of the code output functionality of mechanics. At this time, it looks like I will meet my goals and in the worst case scenario, I will be mid way through my last goal.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/305/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/305/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=305&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-28T10:54:09+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://www.catchmrbharath.in/programming/2012/07/23/gsoc-week-9">
	<title>Bharath M R: Gsoc week 9</title>
	<link>http://www.catchmrbharath.in/programming/2012/07/23/gsoc-week-9</link>
	<content:encoded>&lt;p&gt;This has been a really unproductive week. I was sick with fever for almost three days and could not spend my time on anything. I spent the next days getting the basic svgfig backend for 2d line plots. There are lots of issues with svgfig, and hence I am of the opinion svgfig should be used only for displaying images on the google app engine ie sympy live. First on the list is no support for 3-D graphs. I think this is ok, because there are not many libraries even in javascript which can do 3D plotting. Also, I am having problems with implementing contour plots and surface plots in svgfig. I am experimenting with a way, which would involve using marching squares algorithm to plot contour plots.&lt;/p&gt;

&lt;p&gt;I think I am a little behind my gsoc schedule, and I should speed up things a little in the next few weeks.&lt;/p&gt;

&lt;p&gt;So these are the things that I have to address&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integration of svgfig with sympy live&lt;/li&gt;

&lt;li&gt;Fix the multiple spawning of windows in matplotlib issue.&lt;/li&gt;

&lt;li&gt;Fix the plot tests. As of now, the tests do nothing, as the process_series is not called if show is set to False.&lt;/li&gt;

&lt;li&gt;I have been toying around with ipython to get isympy notebook and qtconsole working. The problem I am facing is, there are 2 instances of qtconsole created, instead of one, when I run it. I will have to figure out the problem.&lt;/li&gt;

&lt;li&gt;Address the issues regarding the adaptive sampling of 2d plots.&lt;/li&gt;

&lt;li&gt;Clean up my branch of implicit plotting (This is almost done).&lt;/li&gt;

&lt;li&gt;Split the plot function into plot, plot3d, implicit_plot functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t think I will be able to do all of these by the end of gsoc period. But my priority will be getting the implicit plotting and svgfig backend working and getting my pull requests merged.&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-23T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/07/23/gsoc-week-9">
	<title>Bharath M R: Gsoc week 9</title>
	<link>http://catchmrbharath.github.com/programming/2012/07/23/gsoc-week-9</link>
	<content:encoded>&lt;p&gt;This has been a really unproductive week. I was sick with fever for almost three days and could not spend my time on anything. I spent the next days getting the basic svgfig backend for 2d line plots. There are lots of issues with svgfig, and hence I am of the opinion svgfig should be used only for displaying images on the google app engine ie sympy live. First on the list is no support for 3-D graphs. I think this is ok, because there are not many libraries even in javascript which can do 3D plotting. Also, I am having problems with implementing contour plots and surface plots in svgfig. I am experimenting with a way, which would involve using marching squares algorithm to plot contour plots.&lt;/p&gt;

&lt;p&gt;I think I am a little behind my gsoc schedule, and I should speed up things a little in the next few weeks.&lt;/p&gt;

&lt;p&gt;So these are the things that I have to address&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integration of svgfig with sympy live&lt;/li&gt;

&lt;li&gt;Fix the multiple spawning of windows in matplotlib issue.&lt;/li&gt;

&lt;li&gt;Fix the plot tests. As of now, the tests do nothing, as the process_series is not called if show is set to False.&lt;/li&gt;

&lt;li&gt;I have been toying around with ipython to get isympy notebook and qtconsole working. The problem I am facing is, there are 2 instances of qtconsole created, instead of one, when I run it. I will have to figure out the problem.&lt;/li&gt;

&lt;li&gt;Address the issues regarding the adaptive sampling of 2d plots.&lt;/li&gt;

&lt;li&gt;Clean up my branch of implicit plotting (This is almost done).&lt;/li&gt;

&lt;li&gt;Split the plot function into plot, plot3d, implicit_plot functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t think I will be able to do all of these by the end of gsoc period. But my priority will be getting the implicit plotting and svgfig backend working and getting my pull requests merged.&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-23T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://blog.catchmrbharath.in/programming/2012/07/23/gsoc-week-9">
	<title>Bharath M R: Gsoc week 9</title>
	<link>http://blog.catchmrbharath.in/programming/2012/07/23/gsoc-week-9</link>
	<content:encoded>&lt;p&gt;This has been a really unproductive week. I was sick with fever for almost three days and could not spend my time on anything. I spent the next days getting the basic svgfig backend for 2d line plots. There are lots of issues with svgfig, and hence I am of the opinion svgfig should be used only for displaying images on the google app engine ie sympy live. First on the list is no support for 3-D graphs. I think this is ok, because there are not many libraries even in javascript which can do 3D plotting. Also, I am having problems with implementing contour plots and surface plots in svgfig. I am experimenting with a way, which would involve using marching squares algorithm to plot contour plots.&lt;/p&gt;

&lt;p&gt;I think I am a little behind my gsoc schedule, and I should speed up things a little in the next few weeks.&lt;/p&gt;

&lt;p&gt;So these are the things that I have to address&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integration of svgfig with sympy live&lt;/li&gt;

&lt;li&gt;Fix the multiple spawning of windows in matplotlib issue.&lt;/li&gt;

&lt;li&gt;Fix the plot tests. As of now, the tests do nothing, as the process_series is not called if show is set to False.&lt;/li&gt;

&lt;li&gt;I have been toying around with ipython to get isympy notebook and qtconsole working. The problem I am facing is, there are 2 instances of qtconsole created, instead of one, when I run it. I will have to figure out the problem.&lt;/li&gt;

&lt;li&gt;Address the issues regarding the adaptive sampling of 2d plots.&lt;/li&gt;

&lt;li&gt;Clean up my branch of implicit plotting (This is almost done).&lt;/li&gt;

&lt;li&gt;Split the plot function into plot, plot3d, implicit_plot functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t think I will be able to do all of these by the end of gsoc period. But my priority will be getting the implicit plotting and svgfig backend working and getting my pull requests merged.&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-23T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=391">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 9</title>
	<link>http://amakelov.wordpress.com/2012/07/23/google-summer-of-code-2012-week-9/</link>
	<content:encoded>&lt;p&gt;Hi all, here’s a brief summary of what I’ve been doing for the 9th week of my GSoC.&lt;/p&gt;
&lt;p&gt;This week saw (and still has to see) some exciting new additions:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;font-size: large;&quot;&gt;I. The incremental Schreier-Sims algorithm.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a version of the Schreier-Sims algorithm that takes a sequence of points &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; and a generating set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=S&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;S&quot; class=&quot;latex&quot; title=&quot;S&quot; /&gt; for a group &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; as input, and extends &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; to a base and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=S&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;S&quot; class=&quot;latex&quot; title=&quot;S&quot; /&gt; to a strong generating set relative to it. It is described in [1], pp.87-93. The default value of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5B%5D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;[]&quot; class=&quot;latex&quot; title=&quot;[]&quot; /&gt;, and that of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=S&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;S&quot; class=&quot;latex&quot; title=&quot;S&quot; /&gt; is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctext%7BG.generators%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\text{G.generators}&quot; class=&quot;latex&quot; title=&quot;\text{G.generators}&quot; /&gt;. Here’s an example:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [41]: S = SymmetricGroup(5)
In [42]: base = [3, 4]
In [43]: gens = S.generators
In [44]: x = S.schreier_sims_incremental(base, gens)
In [45]: x
Out[45]:
([3, 4, 0, 1],
[Permutation([1, 2, 3, 4, 0]),
Permutation([1, 0, 2, 3, 4]),
Permutation([4, 0, 1, 3, 2]),
Permutation([0, 2, 1, 3, 4])])
In [46]: from sympy.combinatorics.util import _verify_bsgs
In [47]: _verify_bsgs(S, x[0], x[1])
Out[47]: True
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The current implementation stores the transversals for the basic orbits explicitly (the alternative is to use Schreier vectors to describe the orbits – this saves a lot of space, but requires more time in order to compute transversal elements whenever they are needed. This feature is still to be implemented, and this probably won’t happen in this GSoC). The current implementation of the Schreier-Sims algorithm on the master branch uses Jerrum’s filter (for more details and comparisons of the incremental version and the one using Jerrum’s filter, go &lt;a href=&quot;http://www.m8j.net/data/List/Files-118/Documentation.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;) as an optimization, and also stores the transversals explicitly. The incremental version seems to be asymptotically faster though. Here’s several comparisons of the current version on the master branch and the incremental one which can be found on a local branch of mine which is somewhat inadequately called &lt;a href=&quot;https://github.com/amakelov/sympy/tree/week6&quot; target=&quot;_blank&quot;&gt;week6&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;For symmetric groups:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [50]: groups = []
In [51]: for i in range(20, 30):
....:     groups.append(SymmetricGroup(i))
....:
In [52]: for group in groups:
....:     %timeit -r1 -n1 group.schreier_sims()
....:
1 loops, best of 1: 590 ms per loop
1 loops, best of 1: 719 ms per loop
1 loops, best of 1: 981 ms per loop
1 loops, best of 1: 1.35 s per loop
1 loops, best of 1: 1.66 s per loop
1 loops, best of 1: 2.19 s per loop
1 loops, best of 1: 2.74 s per loop
1 loops, best of 1: 3.37 s per loop
1 loops, best of 1: 4.28 s per loop
1 loops, best of 1: 5.37 s per loop
In [53]: for group in groups:
....:     %timeit -r1 -n1 group.schreier_sims_incremental()
....:
1 loops, best of 1: 612 ms per loop
1 loops, best of 1: 737 ms per loop
1 loops, best of 1: 927 ms per loop
1 loops, best of 1: 1.15 s per loop
1 loops, best of 1: 1.41 s per loop
1 loops, best of 1: 1.72 s per loop
1 loops, best of 1: 2.1 s per loop
1 loops, best of 1: 2.52 s per loop
1 loops, best of 1: 3.02 s per loop
1 loops, best of 1: 3.58 s per loop
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;For alternating groups:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [54]: groups = []
In [55]: for i in range(20, 40, 2):
....:     groups.append(AlternatingGroup(i))
....:
In [56]: for group in groups:
%timeit -r1 -n1 group.schreier_sims()
....:
1 loops, best of 1: 613 ms per loop
1 loops, best of 1: 1.03 s per loop
1 loops, best of 1: 1.77 s per loop
1 loops, best of 1: 2.65 s per loop
1 loops, best of 1: 3.51 s per loop
1 loops, best of 1: 5.31 s per loop
1 loops, best of 1: 7.71 s per loop
1 loops, best of 1: 11.1 s per loop
1 loops, best of 1: 15.3 s per loop
1 loops, best of 1: 19.1 s per loop
In [57]: for group in groups:
%timeit -r1 -n1 group.schreier_sims_incremental()
....:
1 loops, best of 1: 504 ms per loop
1 loops, best of 1: 787 ms per loop
1 loops, best of 1: 1.23 s per loop
1 loops, best of 1: 1.9 s per loop
1 loops, best of 1: 2.8 s per loop
1 loops, best of 1: 3.99 s per loop
1 loops, best of 1: 5.48 s per loop
1 loops, best of 1: 7.45 s per loop
1 loops, best of 1: 10 s per loop
1 loops, best of 1: 13.2 s per loop
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;And for some dihedral groups of large degree (to illustrate the case of small-base groups of large degrees):&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [58]: groups = []
In [59]: for i in range(100, 2000, 200):
....:     groups.append(DihedralGroup(i))
....:
In [60]: for group in groups:
%timeit -r1 -n1 group.schreier_sims()
....:
1 loops, best of 1: 29.6 ms per loop
1 loops, best of 1: 108 ms per loop
1 loops, best of 1: 278 ms per loop
1 loops, best of 1: 527 ms per loop
1 loops, best of 1: 861 ms per loop
1 loops, best of 1: 1.29 s per loop
1 loops, best of 1: 1.83 s per loop
1 loops, best of 1: 2.39 s per loop
1 loops, best of 1: 3.06 s per loop
1 loops, best of 1: 3.83 s per loop
In [61]: for group in groups:
%timeit -r1 -n1 group.schreier_sims_incremental()
....:
1 loops, best of 1: 20.8 ms per loop
1 loops, best of 1: 52.8 ms per loop
1 loops, best of 1: 121 ms per loop
1 loops, best of 1: 223 ms per loop
1 loops, best of 1: 365 ms per loop
1 loops, best of 1: 548 ms per loop
1 loops, best of 1: 766 ms per loop
1 loops, best of 1: 1 s per loop
1 loops, best of 1: 1.25 s per loop
1 loops, best of 1: 1.51 s per loop
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;In addition to this algorithm I implemented a related function _remove_gens in sympy.combinatorics.util which removes redundant generators from a strong generating set (since there tend to be some redundant ones after schreier_sims_incremental() is run):&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [68]: from sympy.combinatorics.util import _remove_gens
In [69]: S = SymmetricGroup(6)
In [70]: base, strong_gens = S.schreier_sims_incremental()
In [71]: strong_gens
Out[71]:
[Permutation([1, 2, 3, 4, 5, 0]),
Permutation([1, 0, 2, 3, 4, 5]),
Permutation([0, 5, 1, 2, 3, 4]),
Permutation([0, 1, 2, 3, 5, 4]),
Permutation([0, 1, 2, 4, 3, 5]),
Permutation([0, 1, 3, 2, 4, 5]),
Permutation([0, 1, 2, 5, 4, 3]),
Permutation([0, 1, 5, 3, 4, 2])]
In [72]: new_gens = _remove_gens(base, strong_gens)
In [73]: new_gens
Out[73]:
[Permutation([1, 0, 2, 3, 4, 5]),
Permutation([0, 5, 1, 2, 3, 4]),
Permutation([0, 1, 2, 4, 3, 5]),
Permutation([0, 1, 2, 5, 4, 3]),
Permutation([0, 1, 5, 3, 4, 2])]
In [74]: _verify_bsgs(S, base, new_gens)
Out[74]: True
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;font-size: large;&quot;&gt;II. Subgroup search.&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
This is an algorithm used to find the subgroup &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;K&quot; class=&quot;latex&quot; title=&quot;K&quot; /&gt; of a given group &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; of all elements of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; satisfying a given property &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt;. It is described in [1], pp.114-118 and is &lt;strong&gt;quite sophisticated &lt;/strong&gt;(the book is right when it says “The function SUBGROUPSEARCH is rather complicated and will require careful study by the reader.”). On the other hand, it is one of the most interesting additions to the groups module to date since it can do so much. The idea is to do a depth-first search over all group elements and prune large parts of the search tree based on several different criteria. It’s currently about 150 lines of code and works in many cases but still &lt;strong&gt;needs debugging&lt;/strong&gt;. It can currently do some wonderful stuff like this:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [77]: S = SymmetricGroup(6)
In [78]: prop = lambda g: g.is_even
In [79]: G = S.subgroup_search(prop)
In [80]: G == AlternatingGroup(6)
Out[80]: True

&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;to find the alternating group as a subgroup of the full symmetric group by the defining property that all its elements are the even permutations, or this:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [81]: D = DihedralGroup(10)
In [82]: prop_true = lambda g: True
In [83]: G = D.subgroup_search(prop_true)
In [84]: G == D
Out[84]: True
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;to find the dihedral group &lt;img src=&quot;http://s0.wp.com/latex.php?latex=D_%7B10%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;D_{10}&quot; class=&quot;latex&quot; title=&quot;D_{10}&quot; /&gt; as a subgroup of itself using the trivial property that always returns &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctext%7BTrue%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\text{True}&quot; class=&quot;latex&quot; title=&quot;\text{True}&quot; /&gt;; or this:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [106]: A = AlternatingGroup(4)
In [107]: G = A.subgroup_search(prop_fix_23)
In [108]: G == A.stabilizer(2).stabilizer(3)
Out[108]: True
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;to find the pointwise stabilizer of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5C%7B2%2C3%5C%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\{2,3\}&quot; class=&quot;latex&quot; title=&quot;\{2,3\}&quot; /&gt;. And so on and so on. What is more wonderful is that you can specify the base used for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; in advance, and the generating set returned for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;K&quot; class=&quot;latex&quot; title=&quot;K&quot; /&gt; will be a strong generating set with respect to that base!&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [119]: A = AlternatingGroup(5)
In [120]: base, strong_gens = A.schreier_sims_incremental()
In [121]: G = A.subgroup_search(prop_fix_1, base=base, strong_gens=strong_gens)
In [122]: G == A.stabilizer(1)
Out[122]: True
In [123]: _verify_bsgs(G, base, G.generators)
Out[123]: True
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The bad news is that the function breaks somewhere. For example:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [125]: S = SymmetricGroup(7)
In [126]: prop_true = lambda g: True
In [127]: G = S.subgroup_search(prop_true)
In [128]: G == S
Out[128]: False
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This needs some really careful debugging, but overall it looks promising since it works in so many cases – so the bug is hopefully small : ).&lt;/p&gt;
&lt;p&gt;So, that’s it for now!&lt;/p&gt;
&lt;p&gt;[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp;amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/391/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/391/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=391&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-23T00:21:19+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=464">
	<title>Stefan Krastanov: Form Fields and Vector Fields do not form a Vector Space</title>
	<link>http://blog.krastanov.org/2012/07/22/form-fields-and-vector-fields-do-not-form-a-vector-space/</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Tautological_one-form&quot; target=&quot;_blank&quot;&gt;Form fields&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Tangent_bundle#Canonical_vector_field_on_tangent_bundle&quot; target=&quot;_blank&quot;&gt;vector fields&lt;/a&gt; over a &lt;a href=&quot;http://en.wikipedia.org/wiki/Manifold&quot; target=&quot;_blank&quot;&gt;manifold&lt;/a&gt; (as opposed to forms and vectors) do not form a &lt;a href=&quot;http://en.wikipedia.org/wiki/Vector_space&quot; target=&quot;_blank&quot;&gt;vector space&lt;/a&gt;. They form a &lt;a href=&quot;http://en.wikipedia.org/wiki/Module_%28mathematics%29&quot; target=&quot;_blank&quot;&gt;module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The difference is that the scalars of a vector space form an algebraic &lt;a href=&quot;http://en.wikipedia.org/wiki/Field_%28mathematics%29&quot; target=&quot;_blank&quot;&gt;field&lt;/a&gt; while the scalars of a module form a &lt;a href=&quot;http://en.wikipedia.org/wiki/Ring_%28mathematics%29&quot; target=&quot;_blank&quot;&gt;ring&lt;/a&gt;. For us humans (as opposed to “those higher beings that I do not understand (a.k.a. mathematicians)”) this means that the scalars in the vector field can divide each other while the scalars in the spaces spanned by fields (i.e. a module) can not.&lt;/p&gt;
&lt;p&gt;And just so we all can become even more confused: This has nothing to do with the fact that the “components” of each form field or vector field in certain basis are functions, i.e. themselves elements of a vector space with infinite number of dimensions.&lt;/p&gt;
&lt;p&gt;The first way to see this module-not-a-vector-space characteristic is by showing directly that the scalars that form the “coordinate components” of a vector field can not always be divided, even if they are &lt;strong&gt;not&lt;/strong&gt; identically zero. Take, for instance the, manifold &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D%5E2&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\mathbb{R}^2&quot; class=&quot;latex&quot; title=&quot;\mathbb{R}^2&quot; /&gt; with the polar coordinate system and look at the vector &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbegin%7Bbmatrix%7D+r+%5C%5C+r%5Ccos%28%5Ctheta%29+%5Cend%7Bbmatrix%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\begin{bmatrix} r \\ r\cos(\theta) \end{bmatrix}&quot; class=&quot;latex&quot; title=&quot;\begin{bmatrix} r \\ r\cos(\theta) \end{bmatrix}&quot; /&gt;. The “scalars” are &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;r&quot; class=&quot;latex&quot; title=&quot;r&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r%5Ccos%28%5Ctheta%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;r\cos(\theta)&quot; class=&quot;latex&quot; title=&quot;r\cos(\theta)&quot; /&gt;. Obviously we can not divide the former by the latter because it will be undefined at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctheta%3D%5Cfrac%7B%5Cpi%7D%7B2%7D%2Bn%5Cpi&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\theta=\frac{\pi}{2}+n\pi&quot; class=&quot;latex&quot; title=&quot;\theta=\frac{\pi}{2}+n\pi&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;Another, more amusing way to show that the space spanned by these fields is not a vector space is to explicitly show that a property expected from vector spaces is not fulfilled. Namely, that in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; dimensions an &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt;-uple of linearly independent elements forms a basis. However, in the case of fields over a manifold we can easily have a number of fields that are linearly independent over the manifold as a whole, and are at the same time linearly dependent (or simply equal to zero) on a subdomain. Hence, we have an &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt;-uple of linearly independent fields that can not be linearly combined to represent another arbitrary field.&lt;/p&gt;
&lt;br /&gt;  &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;amp;blog=15251174&amp;amp;post=464&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-22T15:11:31+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=475">
	<title>Stefan Krastanov: Objects Implemented in the diffgeom Module</title>
	<link>http://blog.krastanov.org/2012/07/22/objects-implemented-in-the-diffgeom-module/</link>
	<content:encoded>&lt;p&gt;This post provides a summary of all mathematical types of expression implemented in the diffgeom module. I have chosen not to mention any python classes or other implementation details at all. This table shows how an object expected by the user to be of certain mathematical type operates on another object. If the expectations of a user familiar with differential geometry do not meet the actual implementation, this is a bug in the implementation.&lt;/p&gt;
&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; summary=&quot;&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th colspan=&quot;2&quot; rowspan=&quot;2&quot;&gt;&lt;/th&gt;
&lt;th colspan=&quot;5&quot;&gt;The Argument&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;point&lt;/td&gt;
&lt;td&gt;scalar field&lt;/td&gt;
&lt;td&gt;vector field&lt;/td&gt;
&lt;td&gt;1-form field&lt;/td&gt;
&lt;td&gt;higher form field&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th rowspan=&quot;10&quot;&gt;The Operator&lt;/th&gt;
&lt;td&gt;scalar field&lt;/td&gt;
&lt;td&gt;scalar&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vector field&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;scalar field&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1-form field (linear combination of differentials of scalar fields)&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;scalar field&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;higher form field (linear combination of tensor products of lower form fields)&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;it takes a tuple of vector fields and returns a scalar field&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;commutator of vector fields&lt;/td&gt;
&lt;td colspan=&quot;5&quot;&gt;Behaves as a regular vector field.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lie derivative (the argument is “called” on construction time)&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td colspan=&quot;4&quot;&gt;You specify the object to be derived on creation. The Lie derivative of any object is an object of the same type.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br /&gt;  &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;amp;blog=15251174&amp;amp;post=475&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-22T15:05:08+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=524">
	<title>Stefan Krastanov: The Schwarzschild Solution</title>
	<link>http://blog.krastanov.org/2012/07/22/the-schwarzschild-solution/</link>
	<content:encoded>&lt;p&gt;An “easy” solution to the Einstein equation (in free space) is the spherically symmetric Schwarzschild solution. The pdf bellow shows how one can use the diffgeom module in order to get the equations describing this solution.&lt;/p&gt;
&lt;p&gt;One starts with the most general spherically symmetrical metric and by using Einstein equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=R_%7B%5Cmu+%5Cnu%7D%3D0&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;R_{\mu \nu}=0&quot; class=&quot;latex&quot; title=&quot;R_{\mu \nu}=0&quot; /&gt; deduces the equations that must be fulfilled by the components of the metric (in the chosen basis).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://krastanov.files.wordpress.com/2012/07/schwarzschild.pdf&quot;&gt;schwarzschild.pdf&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;amp;blog=15251174&amp;amp;post=524&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-22T13:36:44+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=285">
	<title>Sergiu Ivanov: The Polish and Further Planning</title>
	<link>http://scolobb.wordpress.com/2012/07/22/the-polish-and-further-planning/</link>
	<content:encoded>&lt;p&gt;I am currently working on getting my two pull requests into &lt;tt&gt;master&lt;/tt&gt;.  Right now, the efforts have been concentrated on the first pull request, concerned with diagram layout.  Among the minor fixes, there came a number of more important changes, which I am going to shortly describe in this post, before I get to my further plans.&lt;/p&gt;
&lt;p&gt;Among the changes worth mentioning are some updates to the choice of internal data structures of &lt;tt&gt;DiagramGrid&lt;/tt&gt;.  Previously, &lt;tt&gt;FiniteSet&lt;/tt&gt; was used to store any sets.  Following my mentor’s suggestion, though, I have refactored the code to only use &lt;tt&gt;FiniteSet&lt;/tt&gt; when something needs to be stored in &lt;tt&gt;Basic.args&lt;/tt&gt;.  On all other occasions, the built-ins &lt;tt&gt;set&lt;/tt&gt; and &lt;tt&gt;frozenset&lt;/tt&gt; are used, depending on whether a mutable set or an immutable hashable container is needed.&lt;/p&gt;
&lt;p&gt;The other change bearing no fundamental importance but still worth mentioning is the transition to storing undirected edges as two-element &lt;tt&gt;frozenset&lt;/tt&gt;‘s.  Previously, edges were stored as two-element tuples which caused a bit of hassle in what concerned recognizing the equality of &lt;tt&gt;(A, B)&lt;/tt&gt; and &lt;tt&gt;(B, A)&lt;/tt&gt;.  The choice of &lt;tt&gt;frozenset&lt;/tt&gt; has brought in more elegant code.  In terms of performance, I do not think that this transition has had a really important impact, since I didn’t really keep performance in mind when writing other parts of the code anyway.  (I am mainly referring to the construction of the skeleton of the diagram and splitting it into triangles.)will l&lt;/p&gt;
&lt;p&gt;Among more significant improvements, I will list the support for disconnected diagrams, one-object diagrams, and, the pinnacle, graceful handling of the situations when growing a pseudopod fails.  Before you start thinking abut who the hell would need disconnected or one-object diagrams, I will remind/introduce the process and the necessity of pseudopods in diagram layout (Hey, that did sound like rubbish, did it &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:-D&quot; class=&quot;wp-smiley&quot; /&gt;  )&lt;/p&gt;
&lt;p&gt;The layout algorithm essentially considers the slightly augmented underlying undirected graph of the diagram and splits it into as many triangles as it can.  Then it tries to sort those triangles according to some rather heuristic (i.e., arbitrary) priority metric, picks them one by one, in this order, and tries to place them on the plane, edge to edge.  The strategy being pure greedy, at some point in time it may happen that there are still triangles, but there are no free edges on the plane to which they could be attached.  In this situation, the algorithm attempts to attach one of the remaining triangles by a vertex, that is, it tries to find such a vertex already in the plane, which also belongs to one of the remaining triangles.  Finally, the algorithm adds an edge of the found triangle to the plane and restarts the process of picking triangles and attaching them by edges.  This new added edge is referred to as &lt;em&gt;pseudopod&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, what happens when a pseudopod cannot be grown?  Initially, I was under the impression that it is rather hard to construct such a diagram.  However, it turned out to be rather easy.  Consider the set of objects &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5C%7BA%5C%7D%5Ccup%5C%7BA_i%5Cmid+1%5Cleq+i%5Cleq+10%5C%7D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\{A\}\cup\{A_i\mid 1\leq i\leq 10\}&quot; class=&quot;latex&quot; title=&quot;\{A\}\cup\{A_i\mid 1\leq i\leq 10\}&quot; /&gt; and the set of morphisms &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5C%7Bf_i%3AA%5Crightarrow+A_i%5Cmid+1%5Cleq+i%5Cleq+10%5C%7D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\{f_i:A\rightarrow A_i\mid 1\leq i\leq 10\}&quot; class=&quot;latex&quot; title=&quot;\{f_i:A\rightarrow A_i\mid 1\leq i\leq 10\}&quot; /&gt;.  &lt;tt&gt;DiagramGrid&lt;/tt&gt; will lay out the first 8 of the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A_i&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A_i&quot; class=&quot;latex&quot; title=&quot;A_i&quot; /&gt; quite all right: as one would expect, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; gets to be the center of a 3×3 square, whose borders consist of the 8 &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A_i&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A_i&quot; class=&quot;latex&quot; title=&quot;A_i&quot; /&gt;‘s.  However, the last two &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A_i&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A_i&quot; class=&quot;latex&quot; title=&quot;A_i&quot; /&gt;‘s condition the situation when there are triangles left, but no pseudopods can be grown.&lt;/p&gt;
&lt;p&gt;In an attempt to address this problem, I have considered various possible strategies, and have chosen the following one.  When no pseudopod can be grown, take the set of all objects that have not yet been placed and construct from them a subdiagram of the diagram to plot.  Lay that diagram out recursively and then attach the resulting grid to the initial diagram.&lt;/p&gt;
&lt;p&gt;One important remark is due here.  This strategy is a “oh, gosh, things have gone very bad” strategy, in that is is applied only when all other approaches have failed and in that it does not really guarantee the nice look of the final diagram.  However, it does provide a graceful handling of the specific situations and I do believe that the output is still going to look acceptable.&lt;/p&gt;
&lt;p&gt;While the idea itself is rather simple, it is necessary to pay attention to what subtleties it actually brings around.  First of all, the subdiagram constructed from the remaining objects is &lt;em&gt;not&lt;/em&gt; necessarily connected.  That’s easy to see even in the example I have shown in the previous paragraphs.  Furthermore, the constructed diagrams do not necessarily have non-loop morphisms!  (By abuse of graph theoretic terminology, I call a morphism with the same domain and codomain a &lt;em&gt;loop&lt;/em&gt; morphism).  That is, addressing pseudopod extension failures brings about the necessity to handle disconnected diagrams and one-object diagrams.&lt;/p&gt;
&lt;p&gt;There is not much to say about the support of disconnected diagrams and one-object diagrams, but that I have implemented support for these two cases as well.  The latter case is handled trivially, while the former case employs standard depth-first search of the underlying undirected graph and separate layout of the connected components.  The components are currently dumbly positioned side by side, in a line, and a comment in the source code evokes the possibility of using groups to get a different layout.  I’m open to suggestions of further improvements in this area, though.&lt;/p&gt;
&lt;p&gt;It’s time to speak about my plans.  I have spent more than initially expected on handling pseudopod growth failures.  This means that there are still some suggestions by my mentor waiting to get fixed (I haven’t read them yet; hopefully, nothing fundamental there &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:-D&quot; class=&quot;wp-smiley&quot; /&gt;  ). Further, I absolutely must fix the problem with the sort key of &lt;tt&gt;FiniteSet&lt;/tt&gt;.  I have been talking about fixing it for about two weeks already, and it doesn’t seem to require that much effort.  It is essential that this fix be done, though, since, without it, tests in the &lt;tt&gt;categories&lt;/tt&gt; module fail half of the time.  Finally, I will fix how morphisms are currently pretty printed by removing the use of wide Unicode symbols.  These activities will not hopefully take me more than 2 days, at the very most.&lt;/p&gt;
&lt;p&gt;Next comes the other exciting part of my project, deciding the commutativity of diagrams.  I have provided the general idea of the algorithm in my &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;proposal&lt;/a&gt;.  Given that I am currently about two weeks behind the schedule in my proposal, and that I will still need to spend time on getting the code in the pull requests up to snuff, I’m really feeling very wary about planning my own time.  However, since deciding the algorithm for deciding the commutativity of diagrams I describe in the proposals &lt;em&gt;seems&lt;/em&gt; to be rather straightforward, I think I will have at least a basic working version of it two weeks from now, that is, by August 5.  Allowing another week as buffer time and yet another week for merging the corresponding pull request, I do expect to be in time for the firm pencils-down date.&lt;/p&gt;
&lt;p&gt;One last remark to make is that after the official end of the GSoC timeframe, I will still have at least one week of rather spare time (I actually expect to have about 2.5 to 3 weeks of time), which means that I will bring the code to a sufficiently polished state despite any possible lags.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/285/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/285/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=285&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-21T23:21:49+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=208">
	<title>Guru Devanla: Some examples for latest pull request</title>
	<link>http://rhoforsympy.wordpress.com/2012/07/18/some-examples-for-latest-pull-request/</link>
	<content:encoded>&lt;p&gt;In the latest &lt;a href=&quot;https://github.com/sympy/sympy/pull/1428&quot; target=&quot;_blank&quot; title=&quot;PR 1428&quot;&gt;PR&lt;/a&gt;  2 features have been implemented and relevant examples were added to notebook.   Some examples for the first feature, can be found at this &lt;a href=&quot;http://rhoforsympy.wordpress.com/2012/07/09/week-7-tr-operations-on-qubits/&quot;&gt;post&lt;/a&gt;.  Some updates and test cases were added after I had discussed it there.&lt;/p&gt;
&lt;p&gt;The second is a minor change to qapply() as seen in  the following 2 examples:&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rhoforsympy.files.wordpress.com/2012/07/qapply1.jpg&quot;&gt;&lt;img src=&quot;http://rhoforsympy.files.wordpress.com/2012/07/qapply1.jpg?w=500&amp;amp;h=285&quot; title=&quot;qapply1&quot; height=&quot;285&quot; width=&quot;500&quot; alt=&quot;&quot; class=&quot;alignleft size-full wp-image-209&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rhoforsympy.files.wordpress.com/2012/07/qapply2.jpg&quot;&gt;&lt;img src=&quot;http://rhoforsympy.files.wordpress.com/2012/07/qapply2.jpg?w=500&amp;amp;h=222&quot; title=&quot;qapply2&quot; height=&quot;222&quot; width=&quot;500&quot; alt=&quot;&quot; class=&quot;alignleft size-full wp-image-210&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Happy Coding!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/208/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/208/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=208&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-18T16:25:51+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=259">
	<title>Sergiu Ivanov: The Almost There (Chapter 1)</title>
	<link>http://scolobb.wordpress.com/2012/07/17/the-almost-there-chapter-1/</link>
	<content:encoded>&lt;p&gt;This week I have come ridiculously close to finalising the second major part of my GSoC work: diagram plotting.  Before submitting the two pull requests, I only have to add proper docstrings to a couple classes and to integrate the plotting with &lt;tt&gt;sympy.printing.preview&lt;/tt&gt; for easier use.  (Well, there also is a &lt;tt&gt;FiniteSet&lt;/tt&gt;-related issue, but I hope to be able to fix it more or less swiftly.)  The main functionality is ready, however, and that gives me hopes &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;In terms of material progress, this week has been rather unimpressive: I haven’t written that many lines of code and that which I have written has introduced seemingly inessential changes to the aspect of the diagrams.  Nevertheless, I think this week can be marked as one of the most thought-intensive.&lt;/p&gt;
&lt;p&gt;In the beginning of this week I have extended the drawing of curved morphisms to take into account the situations when there are multiple morphisms between the same two pair of objects.  This allows to automatically typeset diagrams such as Diagram 1.&lt;br /&gt;
&lt;/p&gt;&lt;div style=&quot;width: 210px;&quot; class=&quot;wp-caption alignright&quot; id=&quot;attachment_260&quot;&gt;&lt;a href=&quot;http://scolobb.files.wordpress.com/2012/07/multiple-curved.png&quot;&gt;&lt;img src=&quot;http://scolobb.files.wordpress.com/2012/07/multiple-curved.png?w=300&amp;amp;h=292&quot; title=&quot;Diagram 1&quot; height=&quot;292&quot; width=&quot;300&quot; alt=&quot;A diagram with multiple curved morphisms.&quot; class=&quot;size-medium wp-image-260&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Diagram 1. Multiple curved morphisms.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The next two days I have been smashing my head against the simplest approach to the problem of positioning morphisms labels such that they don’t get intersected by morphisms.  The upsetting part is that, despite the amount of thinking I have done and the amount of code and comments I have written, the actual output hasn’t really got much better.  (It may be considered to be a success, though, that it hasn’t got much worse either &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  ).  Consider Diagram 2.  No special care about the position of the labels is taken.&lt;br /&gt;
&lt;/p&gt;&lt;div style=&quot;width: 168px;&quot; class=&quot;wp-caption alignright&quot; id=&quot;attachment_264&quot;&gt;&lt;a href=&quot;http://scolobb.files.wordpress.com/2012/07/triangle-simple.png&quot;&gt;&lt;img src=&quot;http://scolobb.files.wordpress.com/2012/07/triangle-simple.png?w=549&quot; alt=&quot;Diagram 2.  Arbitrary placement of morphism labels.&quot; class=&quot;size-full wp-image-264&quot; title=&quot;Diagram 2&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Diagram 2.  Arbitrary placement of morphism labels.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Now consider Diagram 3; notice that the labels are now on the outer sides of the diagram.  The trick basically (very basically) consists in detecting those morphisms which form the outer edges of the diagram and then placing their labels on the proper side.  While for vertical and horizontal morphisms the procedure is pretty straightforward, for diagonal morphisms I resolved to apply some basic ideas from analytic geometry and yes, I even do floating-point computations (although I of course try to do them as little as possible).  Nevertheless, the approach I have implemented feels very far from perfect.  I hope though that I have managed to achieve some balance between code that works sufficiently fast and well and code that is intelligible.  Note that the positioning of the labels of the morphsisms which are in the bowels of the visual structure of the diagram remains pretty arbitrary, which may sometimes get ugly.&lt;br /&gt;
&lt;/p&gt;&lt;div style=&quot;width: 154px;&quot; class=&quot;wp-caption alignright&quot; id=&quot;attachment_267&quot;&gt;&lt;a href=&quot;http://scolobb.files.wordpress.com/2012/07/triangle-positioned.png&quot;&gt;&lt;img src=&quot;http://scolobb.files.wordpress.com/2012/07/triangle-positioned.png?w=549&quot; alt=&quot;Diagram 3.  Explicit positioning of labels of outer morphisms.&quot; class=&quot;size-full wp-image-267&quot; title=&quot;Diagram 3&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Diagram 3.  Explicit positioning of labels of outer morphisms.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The next feature I have added is the possibility to draw “loop” morphisms, i.e., morphisms which have the same domains and codomains.  While proper layout of such morphisms is not guaranteed for very crowded diagrams, this functionality is of some use, as can be seen in Diagram 4.&lt;br /&gt;
&lt;/p&gt;&lt;div style=&quot;width: 230px;&quot; class=&quot;wp-caption alignright&quot; id=&quot;attachment_272&quot;&gt;&lt;a href=&quot;http://scolobb.files.wordpress.com/2012/07/many-loops.png&quot;&gt;&lt;img src=&quot;http://scolobb.files.wordpress.com/2012/07/many-loops.png?w=300&amp;amp;h=255&quot; title=&quot;Diagram 4&quot; height=&quot;255&quot; width=&quot;300&quot; alt=&quot;Diagram 4. Typesetting of loop morphisms.&quot; class=&quot;size-medium wp-image-272&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Diagram 4. Typesetting of loop morphisms.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Finally, I have implemented the support for custom arrow formatters.  Arrow formatters are associated to morphisms properties.  Whenever a morphism with some properties is typeset, after the necessary thinking has been carried out, the resulting data is passed to the formatter.  The formatter is free to modify anything it wants in order to influence the appearance of the arrow.  A common usage is shown in Diagram 5.  This effect was achieved with a two-line formatter.&lt;br /&gt;
&lt;/p&gt;&lt;div style=&quot;width: 210px;&quot; class=&quot;wp-caption alignright&quot; id=&quot;attachment_275&quot;&gt;&lt;a href=&quot;http://scolobb.files.wordpress.com/2012/07/formatter.png&quot;&gt;&lt;img src=&quot;http://scolobb.files.wordpress.com/2012/07/formatter.png?w=549&quot; alt=&quot;Diagram 5. Use of formatters&quot; class=&quot;size-full wp-image-275&quot; title=&quot;Diagram 5&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Diagram 5. Use of formatters&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I must confess that dealing with hash randomisation-related issues takes up much more time that I always expect.  I have been constantly getting back to certain bits of my code and adding new and new invocations of &lt;tt&gt;sorted&lt;/tt&gt; to assure stable output.  Working on this, as well as on some obscure tuning of small details of the diagram is actually what has consumed the bulk of my time this week.  The visual input of such modifications is usually minimal; yet, I do believe they bear a rather important role.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/259/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/259/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=259&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-16T21:32:25+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=197">
	<title>Guru Devanla: Week 8: Trace implementation contd. and more Density ops</title>
	<link>http://rhoforsympy.wordpress.com/2012/07/16/week-8-trace-implementation-contd-and-more-density-ops/</link>
	<content:encoded>&lt;p&gt;This week was primarily spent on 2 tasks.  Getting some of the issues addressed in the currently pending &lt;a href=&quot;https://github.com/sympy/sympy/pull/1396/&quot;&gt;PR 1396&lt;/a&gt;. Apart from work on this I have spent some testing some changes I had to make to implement the operations needed when Unitary operations are applied to Density operators.&lt;/p&gt;
&lt;p&gt;Some use cases I am currently working on for this are as follows:&lt;/p&gt;
&lt;p&gt;1. Using basic kets/bras and generic UnitaryOperator&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rhoforsympy.files.wordpress.com/2012/07/basiclandr.jpg&quot;&gt;&lt;img src=&quot;http://rhoforsympy.files.wordpress.com/2012/07/basiclandr.jpg?w=500&amp;amp;h=162&quot; title=&quot;basiclandr&quot; height=&quot;162&quot; width=&quot;500&quot; alt=&quot;&quot; class=&quot;alignleft size-full wp-image-200&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. Apply Gates of Density operators with states as Qubits.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rhoforsympy.files.wordpress.com/2012/07/qapplylandr2.jpg&quot;&gt;&lt;img src=&quot;http://rhoforsympy.files.wordpress.com/2012/07/qapplylandr2.jpg?w=500&amp;amp;h=216&quot; title=&quot;qapplylandr2&quot; height=&quot;216&quot; width=&quot;500&quot; alt=&quot;&quot; class=&quot;alignleft size-full wp-image-199&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently, qapply() works on  UnitaryOpearator*Ket correctly. But, as seen in the second print statement Bra*Dagger(UnitaryOperator) does not expand out fully. I am currently working on fixing this so that the second part of the expression expands out smoothly.&lt;/p&gt;
&lt;p&gt;Therefore, my goal this week is to complete the implementation of UnitaryOperators applied to Density operators, plus address tasks for current PR and another PR ( related to partial trace on qubits)  I plan to submit this week.&lt;/p&gt;
&lt;p&gt;Happy Coding!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/197/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/197/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=197&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-16T04:14:07+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=302">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 8</title>
	<link>http://amakelov.wordpress.com/2012/07/15/google-summer-of-code-2012-week-8/</link>
	<content:encoded>&lt;p&gt;Hi everyone, here’s a brief summary of what I’ve been doing for the 8th week of my GSoC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The issue with the BASESWAP function on page 103 of [1] that I discussed &lt;a href=&quot;http://amakelov.wordpress.com/2012/07/01/google-summer-of-code-2012-week-6/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; is now resolved: one of the authors, Professor Derek Holt at Warwick, replied to me that this is indeed a typo and added it to the errata page &lt;a href=&quot;http://homepages.warwick.ac.uk/~mareg/CGTHandbookErrors&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;I studied the SUBGROUPSEARCH algorithm described in [1] in more depth. It takes as input a group &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; with a BSGS, a subgroup &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K+%3C+G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;K &amp;lt; G&quot; class=&quot;latex&quot; title=&quot;K &amp;lt; G&quot; /&gt; with a BSGS having the same base as that of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt;, a property &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P%28g%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;P(g)&quot; class=&quot;latex&quot; title=&quot;P(g)&quot; /&gt; for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g+%5Cin+G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;g \in G&quot; class=&quot;latex&quot; title=&quot;g \in G&quot; /&gt; is either true or false, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P%28g%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;P(g)&quot; class=&quot;latex&quot; title=&quot;P(g)&quot; /&gt; is always true for $g \in K$, and the elements of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; satisfying &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt; form a subgroup &lt;img src=&quot;http://s0.wp.com/latex.php?latex=H&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;H&quot; class=&quot;latex&quot; title=&quot;H&quot; /&gt;, and tests &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctext%7BTEST%7D%28g%2C+l%29&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\text{TEST}(g, l)&quot; class=&quot;latex&quot; title=&quot;\text{TEST}(g, l)&quot; /&gt; used to rule out group elements (i.e., make sure they don’t satisfy &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt;) based on the image of the first &lt;img src=&quot;http://s0.wp.com/latex.php?latex=l&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;l&quot; class=&quot;latex&quot; title=&quot;l&quot; /&gt; base points of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt;, the so-called partial base image. It modifies &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;K&quot; class=&quot;latex&quot; title=&quot;K&quot; /&gt; by adding generators until &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K+%3D+H&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;K = H&quot; class=&quot;latex&quot; title=&quot;K = H&quot; /&gt;, and returns a strong generating set for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=H&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;H&quot; class=&quot;latex&quot; title=&quot;H&quot; /&gt;. It performs a depth-first search over all possible base images (which by the definition of a base determine uniquely every element of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt;), but uses several conditions to prune the search tree and is said to be fast in practice. This algorithm is the basis for finding normalizers and centralizers and intersections of subgroups, so it’s pretty fundamental. One of its features is the frequent change of base for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;K&quot; class=&quot;latex&quot; title=&quot;K&quot; /&gt;: at level &lt;img src=&quot;http://s0.wp.com/latex.php?latex=l&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;l&quot; class=&quot;latex&quot; title=&quot;l&quot; /&gt; in the search tree we want to make sure that the base for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;K&quot; class=&quot;latex&quot; title=&quot;K&quot; /&gt; starts with the current partial base image (i.e., the image of the first &lt;img src=&quot;http://s0.wp.com/latex.php?latex=l&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;l&quot; class=&quot;latex&quot; title=&quot;l&quot; /&gt; points in the base). In [1] it is said that this requires only one application of BASESWAP (which swaps two neighbouring base points). &lt;strong&gt;This was confusing me for a while.&lt;/strong&gt; However, since we want to only change the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=l&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;l&quot; class=&quot;latex&quot; title=&quot;l&quot; /&gt;-th base point at any base change, and the base after the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=l&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;l&quot; class=&quot;latex&quot; title=&quot;l&quot; /&gt;-th point doesn’t matter at level &lt;img src=&quot;http://s0.wp.com/latex.php?latex=l&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;l&quot; class=&quot;latex&quot; title=&quot;l&quot; /&gt;, it seems that we can do the following. Treat the partial base image, denote it by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c_1+c_2+%5Cldots+c_l&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;c_1 c_2 \ldots c_l&quot; class=&quot;latex&quot; title=&quot;c_1 c_2 \ldots c_l&quot; /&gt;, as a base, and then run BASESWAP on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c_1+c_2+%5Cldots+c_l+c&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;c_1 c_2 \ldots c_l c&quot; class=&quot;latex&quot; title=&quot;c_1 c_2 \ldots c_l c&quot; /&gt;, interchanging the last two elements, where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;c&quot; class=&quot;latex&quot; title=&quot;c&quot; /&gt; is the new &lt;img src=&quot;http://s0.wp.com/latex.php?latex=l&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;l&quot; class=&quot;latex&quot; title=&quot;l&quot; /&gt;-th point in the base. Now I’m more confident that I can implement SUBGROUP search (the other parts of the procedure are easily approachable). But there is one other problem with it:&lt;/li&gt;
&lt;li&gt;We want &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;K&quot; class=&quot;latex&quot; title=&quot;K&quot; /&gt;, the group we initialize &lt;img src=&quot;http://s0.wp.com/latex.php?latex=H&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;H&quot; class=&quot;latex&quot; title=&quot;H&quot; /&gt; with, to have the same base as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt;. The current deterministic implementation of the Schreier-Sims algorithm (using Jerrum’s filther) always produces a BSGS from scratch, and therefore we can’t tell it to make a BSGS for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;K&quot; class=&quot;latex&quot; title=&quot;K&quot; /&gt; with respect to some particular base. Hence we need an implementation of the so-called “incremental” Schreier-Sims algorithm, which takes a sequence of points and a generating set and extends them to a BSGS. This is also described in [1], together with some optimizations, and it won’t be very hard to go through the pseudocode and implement it – so that’ going to be the next step. It would also be a useful addition to the entire group-theoretical module since often in algorithms we want a BSGS with respect to some convenient base.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More or less, that’s it for now. In the next few days I’ll try to write some actual code implementing the above two bullets and get some more reviewing for my &lt;a href=&quot;https://github.com/sympy/sympy/pull/1406&quot; target=&quot;_blank&quot;&gt;most recent pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp;amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/302/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/302/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=302&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-15T23:28:05+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://www.catchmrbharath.in/programming/2012/07/09/gsoc-week-7">
	<title>Bharath M R: GSoC week 7</title>
	<link>http://www.catchmrbharath.in/programming/2012/07/09/gsoc-week-7</link>
	<content:encoded>&lt;p&gt;This week has been quite eventful. The implicit plotting module is almost done. I added the functionality of combining expressions using the &lt;code&gt;And&lt;/code&gt; and &lt;code&gt;Or&lt;/code&gt; statements. Now you can do&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
plot_implicit(And(Eq(y, exp(x)), y - x &amp;gt; 2)
&lt;/code&gt; and get a plot as below. So now you can combine any number of equations / inequalities and plot it. I think its possible to do a lot of cool stuff combining equations / inequalities. &lt;img width=&quot;600&quot; src=&quot;http://www.catchmrbharath.in/images/09072012/fig1.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plotting through interval math is awesome but is also very limited. You cannot add support to &lt;code&gt;re()&lt;/code&gt;, to functions that you cannot characterize as monotonic in certain regions. But we always encounter such functions. So there should be some fall back algorithm to plot such plots. I implemented the fall back algorithm last week. The idea is borrowed from sage implicit plots. We convert an equation / inequality into a function which returns 1 if it satisfies and -1 if it doesn’t satisfy. So if you are plotting an equality then you plot using the &lt;code&gt;contour&lt;/code&gt; command of matplotlib, and instruct it to plot only the zero contour. If its an inequality then plotting the region with two colors gives the plot required.&lt;/p&gt;

&lt;p&gt;These are examples from the fallback algorithm.&lt;/p&gt;

&lt;p&gt;Plot of $y^{2}=x^{3}-x$ &lt;img width=&quot;600&quot; src=&quot;http://www.catchmrbharath.in/images/09072012/fig2.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The plot with interval arithmetic is more precise. &lt;img width=&quot;600&quot; src=&quot;http://www.catchmrbharath.in/images/09072012/fig3.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t finished with the tests. Once I finish the tests I can send a pull request. The pull request will be pretty big, but most of the things have been reviewed in my previous pull request. This is just an extension of the previous pull request.&lt;/p&gt;

&lt;p&gt;There are certain problems with the module though. The line width problem which I mentioned in my previous blog post, cannot be fixed. So you will have to change to the fall back method if the line width becomes large. Also the fall back algorithm cannot plot boolean combinations of equations / inequalities. So the two methods complement each other largely. So the next question would be whether we can choose one of the two intelligently. I guess the answer is No. That decision must be taken by the user. But most of the times the interval math approach works very nicely.&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-09T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/07/09/gsoc-week-7">
	<title>Bharath M R: GSoC week 7</title>
	<link>http://catchmrbharath.github.com/programming/2012/07/09/gsoc-week-7</link>
	<content:encoded>&lt;p&gt;This week has been quite eventful. The implicit plotting module is almost done. I added the functionality of combining expressions using the &lt;code&gt;And&lt;/code&gt; and &lt;code&gt;Or&lt;/code&gt; statements. Now you can do&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
plot_implicit(And(Eq(y, exp(x)), y - x &amp;gt; 2)
&lt;/code&gt; and get a plot as below. So now you can combine any number of equations / inequalities and plot it. I think its possible to do a lot of cool stuff combining equations / inequalities. &lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09072012/fig1.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plotting through interval math is awesome but is also very limited. You cannot add support to &lt;code&gt;re()&lt;/code&gt;, to functions that you cannot characterize as monotonic in certain regions. But we always encounter such functions. So there should be some fall back algorithm to plot such plots. I implemented the fall back algorithm last week. The idea is borrowed from sage implicit plots. We convert an equation / inequality into a function which returns 1 if it satisfies and -1 if it doesn’t satisfy. So if you are plotting an equality then you plot using the &lt;code&gt;contour&lt;/code&gt; command of matplotlib, and instruct it to plot only the zero contour. If its an inequality then plotting the region with two colors gives the plot required.&lt;/p&gt;

&lt;p&gt;These are examples from the fallback algorithm.&lt;/p&gt;

&lt;p&gt;Plot of $y^{2}=x^{3}-x$ &lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09072012/fig2.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The plot with interval arithmetic is more precise. &lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/09072012/fig3.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t finished with the tests. Once I finish the tests I can send a pull request. The pull request will be pretty big, but most of the things have been reviewed in my previous pull request. This is just an extension of the previous pull request.&lt;/p&gt;

&lt;p&gt;There are certain problems with the module though. The line width problem which I mentioned in my previous blog post, cannot be fixed. So you will have to change to the fall back method if the line width becomes large. Also the fall back algorithm cannot plot boolean combinations of equations / inequalities. So the two methods complement each other largely. So the next question would be whether we can choose one of the two intelligently. I guess the answer is No. That decision must be taken by the user. But most of the times the interval math approach works very nicely.&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-09T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://blog.catchmrbharath.in/programming/2012/07/09/gsoc-week-7">
	<title>Bharath M R: GSoC week 7</title>
	<link>http://blog.catchmrbharath.in/programming/2012/07/09/gsoc-week-7</link>
	<content:encoded>&lt;p&gt;This week has been quite eventful. The implicit plotting module is almost done. I added the functionality of combining expressions using the &lt;code&gt;And&lt;/code&gt; and &lt;code&gt;Or&lt;/code&gt; statements. Now you can do&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
plot_implicit(And(Eq(y, exp(x)), y - x &amp;gt; 2)
&lt;/code&gt; and get a plot as below. So now you can combine any number of equations / inequalities and plot it. I think its possible to do a lot of cool stuff combining equations / inequalities. &lt;img width=&quot;600&quot; src=&quot;http://blog.catchmrbharath.in/images/09072012/fig1.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plotting through interval math is awesome but is also very limited. You cannot add support to &lt;code&gt;re()&lt;/code&gt;, to functions that you cannot characterize as monotonic in certain regions. But we always encounter such functions. So there should be some fall back algorithm to plot such plots. I implemented the fall back algorithm last week. The idea is borrowed from sage implicit plots. We convert an equation / inequality into a function which returns 1 if it satisfies and -1 if it doesn’t satisfy. So if you are plotting an equality then you plot using the &lt;code&gt;contour&lt;/code&gt; command of matplotlib, and instruct it to plot only the zero contour. If its an inequality then plotting the region with two colors gives the plot required.&lt;/p&gt;

&lt;p&gt;These are examples from the fallback algorithm.&lt;/p&gt;

&lt;p&gt;Plot of $y^{2}=x^{3}-x$ &lt;img width=&quot;600&quot; src=&quot;http://blog.catchmrbharath.in/images/09072012/fig2.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The plot with interval arithmetic is more precise. &lt;img width=&quot;600&quot; src=&quot;http://blog.catchmrbharath.in/images/09072012/fig3.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t finished with the tests. Once I finish the tests I can send a pull request. The pull request will be pretty big, but most of the things have been reviewed in my previous pull request. This is just an extension of the previous pull request.&lt;/p&gt;

&lt;p&gt;There are certain problems with the module though. The line width problem which I mentioned in my previous blog post, cannot be fixed. So you will have to change to the fall back method if the line width becomes large. Also the fall back algorithm cannot plot boolean combinations of equations / inequalities. So the two methods complement each other largely. So the next question would be whether we can choose one of the two intelligently. I guess the answer is No. That decision must be taken by the user. But most of the times the interval math approach works very nicely.&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-09T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://asmeurersympy.wordpress.com/?p=1112">
	<title>Aaron Meurer: Emacs: 7 months later</title>
	<link>http://asmeurersympy.wordpress.com/2012/07/09/emacs-7-months-later/</link>
	<content:encoded>&lt;p&gt;In my &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/&quot;&gt;final post&lt;/a&gt; about my switching to Emacs, a &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/#comment-544&quot;&gt;commenter&lt;/a&gt;, Scott, asked me, “It has been a while since you started using Emacs. I’m just curious. How is your experience so far now that you have more experience and a more complete configuration?”  My reply was getting quite long, so I figured it would be best suited as a new post.&lt;/p&gt;
&lt;p&gt;The short answer is, mostly the same since I wrote that &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3&quot;&gt;Vim vs. Emacs (part 3)&lt;/a&gt;. Once you use something a lot, you notice all kinds of things that could use improvements. Some of them are just minor annoyances. For example, many interactive commands in Emacs (but not all!) require you to type out “yes” instead of just “y” as a confirmation. Others are more serious, like the need for a real replacement of SuperTab from vim.&lt;/p&gt;
&lt;p&gt;I actually didn’t have much free time to work on configuring Emacs during the school year, and once the summer started, my computer died, and I’ve been working of an old laptop running Linux until I can get a new one. Fortunately, I had the foresight to put all my Emacs configuration &lt;a href=&quot;https://github.com/asmeurer/dotfiles&quot;&gt;online on GitHub&lt;/a&gt;, so it was easy to get my configuration again. I’ve noticed that in Linux, the Alt key (i.e., Meta) is used for other things, so it doesn’t work so well in Emacs (e.g., pressing Alt without any other keys sometimes activates a menu that removes the keyboard focus, and also C-M shortcuts don’t seem to work at all).&lt;/p&gt;
&lt;p&gt;I’ve memorized very few keyboard shortcuts, even ones that might be useful to me (e.g., I don’t remember the shortcut to jump to a matching parenthesis). Usually, if I am using some mode or something and I want to know how to do something, I just Google it, and generally find the answer within a few seconds.&lt;/p&gt;
&lt;p&gt;There are several major configuration issues that I’ve yet to address, either due to lack of time or because I couldn’t find a suitable solution. A SuperTab replacement is one.  This is actually a big one, because scrolling through a file just to see what’s there is getting older and older, as is searching just to jump to a function definition.  If anyone knows of a good way to do this, please let me know.  I mainly need it for Python files, but having it other modes as well would be nice.  Basically, I just want something that shows me all the class and function definitions in the file, in order, that I can easily select one and jump to it.&lt;/p&gt;
&lt;p&gt;Related to searching, searching in Emacs sucks. I’m using isearch+, which is an improvement, but it still bugs me that search does not wrap around by default. Also, for some reason, pressing delete doesn’t delete the last character you typed, but the last character that it matched. That may sound minor, but I use it a lot, so it’s really gotten on my nerves.&lt;/p&gt;
&lt;p&gt;Regular expression searching in Emacs is useless.  I can never get it to work (usually because of differences between () and \(\)).  What I really want is an interactive, user friendly, regular expression search/search and replace tool.  There’s regexp-builder, but that’s useless because once you build the regular expression, you have to manually copy it and paste it into the real regular expression search function to actually use it.  And it doesn’t work with search and replace.&lt;/p&gt;
&lt;p&gt;This last semester I had a semester long project in C.  For that, flymake-mode was a godsend.  It requires a bit of manual configuration (you have to add something to your Makefile, and you have to add some stuff to .emacs as always to enable it by default), but once you do that, it just works.  If you don’t know what this is, basically, it highlights the compiler errors in your source in real time, as you type it.  So instead of doing something stupid twenty times, and then compiling and finding them all, you do something stupid once, see the error, and don’t do make the mistake any more.  It’s also nice to close your editor and know that your code will compile.&lt;/p&gt;
&lt;p&gt;The Python mode I am mixed about.  On the one hand, it’s really awesome how smart it is about indentation.  On the other hand, the syntax highlighting is just shy of what I want (granted, it’s pretty good, but I want better than that).  For example, I want to be able to color docstrings, single quoted strings, and double quoted strings differently.  It would also be awesome to get some coloring in docstrings itself.  I’m thinking markdown mode for any text that’s in a docstring, except for doctests, which are colored in Python mode (or some variant).&lt;/p&gt;
&lt;p&gt;Some things I’ve not really cared much about yet because I haven’t used that type of file yet.  For example, I’m currently writing this post in Emacs, and just now noticing the deficiencies in html-mode (e.g., I want an easy way to select text and turn it into a link, just like in the WordPress editor).&lt;/p&gt;
&lt;p&gt;Finally, I’ve been trying to write my own theme.  That process has been slow and slightly painful.  Emacs is currently in the process of moving to themes, though, so this is to be expected.  When Emacs 24 is actually released I think it will be fair to judge how well this feature works.&lt;/p&gt;
&lt;p&gt;That’s my wishlist (or most of it anyway).  But there are positive things too. auto-complete-mode, which I mentioned at the top of my previous blog post, is absolutely awesome.  I think this extension alone has made me more productive.&lt;/p&gt;
&lt;p&gt;Some things I take for granted, like automatic spell checking of strings and comments in Python (not enabled by default, but not hard to configure either).  Thanks to someone on an Emacs mailing list, I have the perfect automatic clearing of trailing whitespace, that automatically leaves your whitespace before the cursor in the buffer, but still writes the clear to the file (see my .emacs file from my dotfiles repo linked to above for details).&lt;/p&gt;
&lt;p&gt;I’ve been hoping to learn Emacs lisp, so that I could remedy many of these problems on my own, but so far I haven’t really had the free time.  Lisp is a very confusing language, so it’s not easy to jump into (compared to the language vim uses, which I found easy enough to hack on without knowing at all).&lt;/p&gt;
&lt;p&gt;Ultimately, I’m quite pleased with how user friendly Emacs is, and with how easy it is to find out how to do almost anything I want just by Googling it. Configuration is an uphill battle.  Emacs has a ton of great packages, many of which are included, but almost none are enabled by default.  Just today I discovered Ido mode, thanks to &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/#comment-543&quot;&gt; David Li&lt;/a&gt;.  I feel that in the long term, as I learn Emacs Lisp, I can make it do whatever I want.  It provides a good baseline editing experience, and a good framework for configuring it to do whatever you want, and also enough people use it that 99% of the things you want are already done by somebody.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1112/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1112/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1112&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-09T05:24:05+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=181">
	<title>Guru Devanla: Week 7: Tr operations on Qubits</title>
	<link>http://rhoforsympy.wordpress.com/2012/07/09/week-7-tr-operations-on-qubits/</link>
	<content:encoded>&lt;p&gt;This week has been lot less coding and more of understanding some pieces of codes for next set of changes. As far as the implementation goes, the Tr operations ( including partial trace/reduce density operations) for qubits was implemented.&lt;/p&gt;
&lt;p&gt;Some examples of the Tr operations on qubits can be seen here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rhoforsympy.files.wordpress.com/2012/07/tr_qubit_1.jpg&quot;&gt;&lt;img src=&quot;http://rhoforsympy.files.wordpress.com/2012/07/tr_qubit_1.jpg?w=500&quot; alt=&quot;&quot; class=&quot;alignleft size-full wp-image-182&quot; title=&quot;tr_qubit_1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An example of an reduced density operation on a mixed-state is shown below&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rhoforsympy.files.wordpress.com/2012/07/tr_qubit_2.jpg&quot;&gt;&lt;img src=&quot;http://rhoforsympy.files.wordpress.com/2012/07/tr_qubit_2.jpg?w=500&amp;amp;h=199&quot; title=&quot;tr_qubit_2&quot; height=&quot;199&quot; width=&quot;500&quot; alt=&quot;&quot; class=&quot;alignleft size-full wp-image-183&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The changes shown above are currently available in my git branch over &lt;a href=&quot;https://github.com/gdevanla/sympy/tree/trace_qubit&quot;&gt;here&lt;/a&gt;. I plan to submit a PR of this branch as soon as the my current &lt;a href=&quot;https://github.com/sympy/sympy/pull/1396/&quot;&gt;PR 1396&lt;/a&gt; is merged.&lt;/p&gt;
&lt;p&gt;Another task I have been working on this week is figuring changes needed to qapply() to perform the L and R operations of density matrix. I plan to work on this tasks during next week.&lt;/p&gt;
&lt;p&gt;In summary, plan for next week:&lt;/p&gt;
&lt;p&gt;1. Address comments on current &lt;a href=&quot;https://github.com/sympy/sympy/pull/1396/&quot;&gt;PR 1396&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;2. Submit PR for trace_qubit branch and address any reviews on that.&lt;/p&gt;
&lt;p&gt;3. Work on the L and R operations.&lt;/p&gt;
&lt;p&gt;With these activities, the next major task that would remain is to set up trace operations for Time Dependent states.  I will start researching on the current implementation of this code to understand where my changes would have to go.&lt;/p&gt;
&lt;p&gt;On a side note, we are breaking record &lt;a href=&quot;http://www.chicagotribune.com/news/chi-120707chicago-heat-weather,0,3439069.story&quot;&gt;temperatures&lt;/a&gt; in Chicago this week, and it was tough to keep myself cool without an air-conditioner!  Hope other Chicagoan Sympy members are doing just fine by the beach!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/181/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/181/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=181&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-09T01:13:49+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=238">
	<title>Sergiu Ivanov: The First Tangible</title>
	<link>http://scolobb.wordpress.com/2012/07/09/the-first-tangible/</link>
	<content:encoded>&lt;p&gt;I have the preliminary pleasure to announce the first more or less tangible fruits of my work: some real diagram plots.  I will adjourn this part of the show-off until the end of the post, however, so that more people read the whole thing &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;The work I have done this week belongs to two essentially different classes.  In the first half of the week I was still adding new features to the layout functionality; this is mainly about logical groups, which are a way for the user to exercise some control over how the objects are laid out.  The idea behind offering the user some control over the layout is that &lt;tt&gt;DiagramGrid&lt;/tt&gt; cannot always guess which placement of objects would be the best for the user, additional input would be very welcome on such occasions.  It was important though to require this input in such a way as to demand as little effort as possible on the part of the user.&lt;/p&gt;
&lt;p&gt;Take a look at &lt;a href=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/Categorical_pullback_%28expanded%29.svg/225px-Categorical_pullback_%28expanded%29.svg.png&quot;&gt;the definition of a pullback&lt;/a&gt;.  In this diagram, one can easily see that the objects &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=X&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;X&quot; class=&quot;latex&quot; title=&quot;X&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Y&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;Y&quot; class=&quot;latex&quot; title=&quot;Y&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Z&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;Z&quot; class=&quot;latex&quot; title=&quot;Z&quot; /&gt; are distinctly separated from the object &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;Q&quot; class=&quot;latex&quot; title=&quot;Q&quot; /&gt;.  It is easy to note further that many of &lt;a href=&quot;http://en.wikipedia.org/wiki/Universal_property&quot;&gt;universal properties&lt;/a&gt; also rely on such semantic grouping of objects.  Further yet, in a lot of diagrams, logical groups are easily seen, as it happens in the case of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Five_lemma&quot;&gt;five lemma&lt;/a&gt;.  These observations have made me think that allowing logical groups would be a perfect addition to the existing automatic layout functionality.&lt;/p&gt;
&lt;p&gt;In the current implementation, the user specifies the logical groups by supplying a set of sets of objects.  Thus, in the case of the five lemma, the user can supply the set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5C%7B%5C%7BA%2C+B%2C+C%2C+D%2C+E%5C%7D%2C+%5C%7BA%27%2C+B%27%2C+C%27%2C+D%27%2C+E%27%5C%7D%5C%7D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\{\{A, B, C, D, E\}, \{A', B', C', D', E'\}\}&quot; class=&quot;latex&quot; title=&quot;\{\{A, B, C, D, E\}, \{A', B', C', D', E'\}\}&quot; /&gt; as the description of the groups that can be seen in the diagram.  In the case of the pullback, the following set would be a valid specification: &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5C%7BQ%2C+%5C%7BP%2C+X%2C+Y%2C+Z%5C%7D%5C%7D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;\{Q, \{P, X, Y, Z\}\}&quot; class=&quot;latex&quot; title=&quot;\{Q, \{P, X, Y, Z\}\}&quot; /&gt;.  Note how it is not necessary to include separate objects in singleton sets.&lt;/p&gt;
&lt;p&gt;One more detail on how the groups are handled, about which I am not yet very sure, both in the meaning of utility and test completeness, is that groups can be nested to arbitrary depth.  This is because the current procedure of handling groups is as follows: all supplied elements of the supplied set of groups, which are sets, are considered as diagrams in their own right and are laid out.  The algorithm does not really look into the structure of such a group before going into recursion.  After having laid out each of groups, the current implementation constructs a dummy diagram, starting from the original one in the following way.  The new diagram has as objects all objects and groups included in the groups set.  If between the objects of any two groups there exists a morphism, it is added to the new diagram.  Duplicate morphisms of this kind are essentially omitted for efficiency reasons.  This new dummy diagram is laid out.  Then, in the resulting grid, the cells (and the respective rows and columns) which correspond to groups are expanded to hold the grids into which the groups have been laid out.&lt;/p&gt;
&lt;p&gt;The procedure I describe is rather simple, which makes me believe that it is also robust.  Nevertheless, I cannot say I am fully satisfied with how much I have tested it; somewhat pessimistically, I do expect quite a number of bugs.&lt;/p&gt;
&lt;p&gt;While logical groups seems to a be rather powerful feature already, it does not help get the layout of the five lemma just like it is usually laid out.  Moreover, I noticed that the current algorithm would never lay out a line diagram in a line.  To avoid this I have added a hint to the layout functionality which would instruct the usage of a different layout algorithm, and which would result in a more line-like shapes.  This algorithm essentially does a depth-first traversal of the underlying undirected graph of the diagram and places the objects according to their distance from the root.  Now, since I wanted to see such a layout applied to some logical groups as well (cf. the five lemma), I have implemented the possibility to supply separate layout hints for each group.  With these instruments at hand, as well as with the simple hint &lt;tt&gt;transpose&lt;/tt&gt; which instructs the layout engine to eventually flip the grid about its main diagonal, it is possible to give &lt;tt&gt;DiagramGrid&lt;/tt&gt; sufficient information to have the five lemma laid out properly.&lt;/p&gt;
&lt;p&gt;While I think that this result is pretty satisfactory, it would of course be way cooler to have &lt;tt&gt;DiagramGrid&lt;/tt&gt; guess such stuff automatically.  It is a rather nontrivial task, however.  Take the five lemma, again.  It can be laid out in a line, and look not that bad.  It seems very hard to decide automatic criteria to answer such questions.  Yet, I expect that nice results can be achieved by diversifying the controls offered to the user in what concerns the layout.&lt;/p&gt;
&lt;p&gt;I am also considering the possibility of a partially manual layout (and, eventually, a fully manual one), by specifying the exact initial positions of some of the objects.  I believe this would be very useful in the long run, because it would offer a great deal of control, and wouldn’t still require much unnecessary effort on the user side.  The implementation of such a thing is however still a matter of the future.&lt;/p&gt;
&lt;p&gt;I have finished the first half of the week by documenting the layout algorithm in the source itself, as well writing proper docstrings for &lt;tt&gt;DiagramGrid&lt;/tt&gt; and its methods.&lt;/p&gt;
&lt;p&gt;The second half of the week I have spent working on producing actual &lt;a href=&quot;http://www.tug.org/applications/Xy-pic/&quot;&gt;Xy-pic&lt;/a&gt; code.  As expected, the most difficult part lied in drawing bent arrows.  I have implemented some basic routine to solve this question.  The pinnacle of the currently available functionality is shown in the figure.&lt;/p&gt;
&lt;div style=&quot;width: 279px;&quot; class=&quot;wp-caption alignright&quot; id=&quot;attachment_247&quot;&gt;&lt;a href=&quot;http://scolobb.files.wordpress.com/2012/07/cube1.png&quot;&gt;&lt;img src=&quot;http://scolobb.files.wordpress.com/2012/07/cube1.png?w=269&amp;amp;h=300&quot; title=&quot;The automatic plot of a moderately complex diagram&quot; height=&quot;300&quot; width=&quot;269&quot; alt=&quot;&quot; class=&quot;size-medium wp-image-247&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The automatic plot of a moderately complex diagram&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;There is a bit of work left, however.  First of all, notice how the arrow curving from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A_7&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A_7&quot; class=&quot;latex&quot; title=&quot;A_7&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A_8&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A_8&quot; class=&quot;latex&quot; title=&quot;A_8&quot; /&gt; is too close to the objects it passes by.  I plan to solve this by increasing the default amount of curving.  Further, nothing will currently be done if another morphism between these two objects is added, which results in ugly overlaps.  Yet another important problem is positioning of the labels of the morphisms: some of them are too loose in space and it is hard to understand which arrow they belong to.  The label &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f_%7B10%7D&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f_{10}&quot; class=&quot;latex&quot; title=&quot;f_{10}&quot; /&gt; is even crossed by the arrow &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f_7&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f_7&quot; class=&quot;latex&quot; title=&quot;f_7&quot; /&gt;.  Unfortunately, I don’t expect to solve all of these problems with positioning of morphisms labels, because, in many cases, it would be necessary to know the actual graphical information, which is impossible at the current level of abstraction.&lt;/p&gt;
&lt;p&gt;Thus my immediate plans are to fix the problems I have enumerated to as a complete extent as possible, and to then submit the layout functionality and the actual drawing functionality as two pull requests, to facilitate review.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/238/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/238/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=238&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-08T23:03:30+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://krastanov.wordpress.com/?p=447">
	<title>Stefan Krastanov: Tensor vs Tensor Field, Basis vs Coordinate System</title>
	<link>http://blog.krastanov.org/2012/07/09/tensor-vs-tensor-field-basis-vs-coordinate-system/</link>
	<content:encoded>&lt;p&gt;In most of my posts that discuss the SymPy diffgeom module I do not try to make a distinction between a tensor and a tensor field, as it is usually obvious from the context. However, it would be nice to spell it out at least once.&lt;/p&gt;
&lt;p&gt;I have two favorite ways to define a tensor/tensor field: either as an object with a representation (in the form of a multidimensional array) that transforms in a precise way when one switches from one basis to another, or instead as (sum of) tensor products of some vectors and 1-forms (i.e. an element of some tensor product of the vector space and its dual).&lt;/p&gt;
&lt;h3&gt;In Terms of Transformation Rules&lt;/h3&gt;
&lt;p&gt;With regard to the first definition, Wikipedia has this to say:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;A tensor of type (n, m−n) is an assignment of a multidimensional array &lt;img src=&quot;http://s0.wp.com/latex.php?latex=T%5E%7Bi_1%5Cdots+i_n%7D_%7Bi_%7Bn%2B1%7D%5Cdots+i_m%7D%5B%5Cmathbf%7Bf%7D%5D+&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;T^{i_1\dots i_n}_{i_{n+1}\dots i_m}[\mathbf{f}] &quot; class=&quot;latex&quot; title=&quot;T^{i_1\dots i_n}_{i_{n+1}\dots i_m}[\mathbf{f}] &quot; /&gt; to each basis &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%3D+%28e_1%2C...%2Ce_N%29+&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;f = (e_1,...,e_N) &quot; class=&quot;latex&quot; title=&quot;f = (e_1,...,e_N) &quot; /&gt; such that, if we apply the change of basis &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbf%7Bf%7D%5Cmapsto+%5Cmathbf%7Bf%7D%5Ccdot+R+%3D+%5Cleft%28+R_1%5Ei+%5Cmathbf%7Be%7D_i%2C+%5Cdots%2C+R_N%5Ei%5Cmathbf%7Be%7D_i%5Cright%29+&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\mathbf{f}\mapsto \mathbf{f}\cdot R = \left( R_1^i \mathbf{e}_i, \dots, R_N^i\mathbf{e}_i\right) &quot; class=&quot;latex&quot; title=&quot;\mathbf{f}\mapsto \mathbf{f}\cdot R = \left( R_1^i \mathbf{e}_i, \dots, R_N^i\mathbf{e}_i\right) &quot; /&gt; then the multidimensional array obeys the transformation law &lt;img src=&quot;http://s0.wp.com/latex.php?latex=T%5E%7Bi_1%5Cdots+i_n%7D_%7Bi_%7Bn%2B1%7D%5Cdots+i_m%7D%5B%5Cmathbf%7Bf%7D%5Ccdot+R%5D+%3D+%28R%5E%7B-1%7D%29%5E%7Bi_1%7D_%7Bj_1%7D%5Ccdots%28R%5E%7B-1%7D%29%5E%7Bi_n%7D_%7Bj_n%7D+R%5E%7Bj_%7Bn%2B1%7D%7D_%7Bi_%7Bn%2B1%7D%7D%5Ccdots+R%5E%7Bj_%7Bm%7D%7D_%7Bi_%7Bm%7D%7DT%5E%7Bj_1%2C%5Cldots%2Cj_n%7D_%7Bj_%7Bn%2B1%7D%2C%5Cldots%2Cj_m%7D%5B%5Cmathbf%7Bf%7D%5D+&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;T^{i_1\dots i_n}_{i_{n+1}\dots i_m}[\mathbf{f}\cdot R] = (R^{-1})^{i_1}_{j_1}\cdots(R^{-1})^{i_n}_{j_n} R^{j_{n+1}}_{i_{n+1}}\cdots R^{j_{m}}_{i_{m}}T^{j_1,\ldots,j_n}_{j_{n+1},\ldots,j_m}[\mathbf{f}] &quot; class=&quot;latex&quot; title=&quot;T^{i_1\dots i_n}_{i_{n+1}\dots i_m}[\mathbf{f}\cdot R] = (R^{-1})^{i_1}_{j_1}\cdots(R^{-1})^{i_n}_{j_n} R^{j_{n+1}}_{i_{n+1}}\cdots R^{j_{m}}_{i_{m}}T^{j_1,\ldots,j_n}_{j_{n+1},\ldots,j_m}[\mathbf{f}] &quot; /&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;A tensor field then is a way to map a tensor to each point of a manifold (the tensor is wrt the tangent space at that point).&lt;/p&gt;
&lt;p&gt;When we switch from tensors to tensor fields a new object becomes important: the coordinate system. Before proceeding, one must know what a manifold and a tangent space mean. Then we can illuminate the relation between what one calls a “basis” when speaking about tensors and the “coordinate system” in the context of tensor fields. Firstly, a coordinate system gives a way to continuously map a tuple of numbers to a point on the manifold. This continuous map is what physicist love to work with (Cartesian or polar coordinates for instance). The nice thing is that each coordinate system brings with itself a canonical basis for each point of the manifold.&lt;/p&gt;
&lt;p&gt;What can be confusing, is that the basis can change from point to point. For example, one can take the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=R%5E2&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;R^2&quot; class=&quot;latex&quot; title=&quot;R^2&quot; /&gt; manifold that has &lt;img src=&quot;http://s0.wp.com/latex.php?latex=R%5E2&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;R^2&quot; class=&quot;latex&quot; title=&quot;R^2&quot; /&gt; as its tangent space. Take for instance two points &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%3D1%2C+y%3D0%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;(x=1, y=0)&quot; class=&quot;latex&quot; title=&quot;(x=1, y=0)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%3D0%2C+y%3D1%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;(x=0, y=1)&quot; class=&quot;latex&quot; title=&quot;(x=0, y=1)&quot; /&gt;. The basis vectors in the Cartesian coordinate system are the same for both points: &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28e_x%2C+e_y%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;(e_x, e_y)&quot; class=&quot;latex&quot; title=&quot;(e_x, e_y)&quot; /&gt;. However in the polar coordinate system the basis vectors for the first point are &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28e_x%2C+e_y%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;(e_x, e_y)&quot; class=&quot;latex&quot; title=&quot;(e_x, e_y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28e_y%2C+-e_x%29&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;(e_y, -e_x)&quot; class=&quot;latex&quot; title=&quot;(e_y, -e_x)&quot; /&gt; for the second point.&lt;/p&gt;
&lt;p&gt;Anyway, the only thing that changes in the definition, is that the change-of-basis matrix mentioned above now depends on the coordinate systems.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Chat%7BT%7D%5E%7Bi_1%5Cdots+i_n%7D_%7Bi_%7Bn%2B1%7D%5Cdots+i_m%7D%28%5Cbar%7Bx%7D_1%2C%5Cldots%2C%5Cbar%7Bx%7D_k%29+%3D++%5Cfrac%7B%5Cpartial+%5Cbar%7Bx%7D%5E%7Bi_1%7D%7D%7B%5Cpartial+x%5E%7Bj_1%7D%7D++%5Ccdots++%5Cfrac%7B%5Cpartial+%5Cbar%7Bx%7D%5E%7Bi_n%7D%7D%7B%5Cpartial+x%5E%7Bj_n%7D%7D++%5Cfrac%7B%5Cpartial+x%5E%7Bj_%7Bn%2B1%7D%7D%7D%7B%5Cpartial+%5Cbar%7Bx%7D%5E%7Bi_%7Bn%2B1%7D%7D%7D++%5Ccdots++%5Cfrac%7B%5Cpartial+x%5E%7Bj_m%7D%7D%7B%5Cpartial+%5Cbar%7Bx%7D%5E%7Bi_m%7D%7D++T%5E%7Bj_1%5Cdots+j_n%7D_%7Bj_%7Bn%2B1%7D%5Cdots+j_m%7D%28x_1%2C%5Cldots%2Cx_k%29+&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\hat{T}^{i_1\dots i_n}_{i_{n+1}\dots i_m}(\bar{x}_1,\ldots,\bar{x}_k) =  \frac{\partial \bar{x}^{i_1}}{\partial x^{j_1}}  \cdots  \frac{\partial \bar{x}^{i_n}}{\partial x^{j_n}}  \frac{\partial x^{j_{n+1}}}{\partial \bar{x}^{i_{n+1}}}  \cdots  \frac{\partial x^{j_m}}{\partial \bar{x}^{i_m}}  T^{j_1\dots j_n}_{j_{n+1}\dots j_m}(x_1,\ldots,x_k) &quot; class=&quot;latex&quot; title=&quot;\hat{T}^{i_1\dots i_n}_{i_{n+1}\dots i_m}(\bar{x}_1,\ldots,\bar{x}_k) =  \frac{\partial \bar{x}^{i_1}}{\partial x^{j_1}}  \cdots  \frac{\partial \bar{x}^{i_n}}{\partial x^{j_n}}  \frac{\partial x^{j_{n+1}}}{\partial \bar{x}^{i_{n+1}}}  \cdots  \frac{\partial x^{j_m}}{\partial \bar{x}^{i_m}}  T^{j_1\dots j_n}_{j_{n+1}\dots j_m}(x_1,\ldots,x_k) &quot; /&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;In Terms of Tensor Products&lt;/h3&gt;
&lt;p&gt;I prefer this definition, as it relies on the geometrical meaning of vectors and forms. According to Wikipedia, one can express it as:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;A type (n, m) tensor T is defined as a map &lt;img src=&quot;http://s0.wp.com/latex.php?latex=T%3A+%5Cunderbrace%7B+V%5E%2A+%5Ctimes%5Cdots%5Ctimes+V%5E%2A%7D_%7Bn+%5Ctext%7B+copies%7D%7D+%5Ctimes+%5Cunderbrace%7B+V+%5Ctimes%5Cdots%5Ctimes+V%7D_%7Bm+%5Ctext%7B+copies%7D%7D+%5Crightarrow+%5Cmathbf%7BR%7D+&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;T: \underbrace{ V^* \times\dots\times V^*}_{n \text{ copies}} \times \underbrace{ V \times\dots\times V}_{m \text{ copies}} \rightarrow \mathbf{R} &quot; class=&quot;latex&quot; title=&quot;T: \underbrace{ V^* \times\dots\times V^*}_{n \text{ copies}} \times \underbrace{ V \times\dots\times V}_{m \text{ copies}} \rightarrow \mathbf{R} &quot; /&gt;, where V is a vector space and V* is the corresponding dual space of covectors, which is linear in each of its arguments.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;One can again try to translate this to the case of tensor fields. The straightforward way is just to say that this map is parametrized, thus it depends on which point on the manifold it is evaluated.&lt;/p&gt;
&lt;p&gt;However, a more “geometrical” approach would be to keep the part about “a tensor field is the sum of tensor products of vector fields and 1-form fields” but define vector fields and 1-form fields “geometrically”. Vector fields become differential operators over the manifold instead of maps to elements of the tangent space and 1-forms are defined in terms of differentials instead of duals of vectors.&lt;/p&gt;
&lt;h3&gt;The Magic&lt;/h3&gt;
&lt;p&gt;The magic is that this parametrization in terms of tuples of real numbers (a coordinate system) brings automatically a canonical basis and and the transformation matrix for change of basis. Hence defining a coordinate system provides a basis for free. Otherwise the generalization of the first definition would have been clumsier.&lt;/p&gt;
&lt;br /&gt;  &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=blog.krastanov.org&amp;amp;blog=15251174&amp;amp;post=447&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-08T22:50:51+00:00</dc:date>
	<dc:creator>Stefan Krastanov</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=266">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 7</title>
	<link>http://amakelov.wordpress.com/2012/07/08/google-summer-of-code-2012-week-7/</link>
	<content:encoded>&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;here’s a brief summary of what I’ve been doing during the 7th week of my GSoC, as well as a general overview of what’s going on and where things are going with computational group theory in sympy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Things I did during the week.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This week I focused on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;improving the existing code for the functions I recently added – the randomized Schreier-Sims algorithm, the function BASESWAP that changes two points in a base, and the PRINTELEMENTS function (I talk about these &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/18/google-summer-of-code-2012-week-4/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;). I included some comments in the bodies of the functions since these tend to be quite long. Also, I adopted some new naming conventions for handling all the structures related to a base and a strong generating set. It’d be nice if this naming convention is used throughout the combinatorics module (which for now depends mostly on me, as it seems &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt;  ), and it’d be nice if people provide some feedback on the names I chose. So here we go:&lt;/li&gt;
&lt;li&gt;making possible the interaction with the deterministic Schreier-Sims algorithm. After some insights from &lt;a href=&quot;https://github.com/pernici&quot; target=&quot;_blank&quot;&gt;Mario&lt;/a&gt; on the values returned by his implementation, I extracted from it the data necessary to make the algorihtms described in [1] that use a base and strong generating set possible.&lt;/li&gt;
&lt;li&gt;splitting the code further, with the sympy.combinatorics.util file which now holds the internal functions used to handle permutaion groups (this can be later expanded with other internal functions across the combinatorics module).&lt;/li&gt;
&lt;li&gt;Finally, adding docstrings, tests and making a pull request which is available &lt;a href=&quot;https://github.com/sympy/sympy/pull/1406#issuecomment-6812223&quot; target=&quot;_blank&quot;&gt;here &lt;/a&gt;. It’s about 1300 lines of code, which is sort of bad, but I can remove some of the stuff and keep it for a future pull request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here are the &lt;em&gt;&lt;strong&gt;naming conventions for working with a BSGS:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;degree&lt;/strong&gt; – the degree of the permutation group.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;base&lt;/strong&gt; – This is sort of obvious. A base for a permutation group &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; is an ordered tuple of points &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_k%29+&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, b_2,\ldots, b_k) &quot; class=&quot;latex&quot; title=&quot;(b_1, b_2,\ldots, b_k) &quot; /&gt; such that no group element &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g+%5Cin+G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;g \in G&quot; class=&quot;latex&quot; title=&quot;g \in G&quot; /&gt; fixes all the points &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b_1%2C+b_2%2C+%5Cldots%2C+b_k&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;b_1, b_2, \ldots, b_k&quot; class=&quot;latex&quot; title=&quot;b_1, b_2, \ldots, b_k&quot; /&gt; (the significance of the ordering will become apparent later). This is implemented as a list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;base_len&lt;/strong&gt; – the number of elements in a base.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;strong_gens&lt;/strong&gt; – the strong generating set (relative to some base). This is implemented as a list of Perm objects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;basic_stabilizers&lt;/strong&gt; – For a base &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_k%29+&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, b_2,\ldots, b_k) &quot; class=&quot;latex&quot; title=&quot;(b_1, b_2,\ldots, b_k) &quot; /&gt;, the basic stabilizers are defined as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G%5E%7B%28i%29%7D+%3D+G_%7Bb_1%2C+%5Cldots%2C+b_%7Bi-1%7D%7D+%3A%3D+%5C%7B+g+%5Cin+G+%7C+g%28b_1%29+%3D+b_1%2C+%5Cldots%2C+g%28b_%7Bi-1%7D%29+%3D+b_%7Bi-1%7D%5C%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G^{(i)} = G_{b_1, \ldots, b_{i-1}} := \{ g \in G | g(b_1) = b_1, \ldots, g(b_{i-1}) = b_{i-1}\}&quot; class=&quot;latex&quot; title=&quot;G^{(i)} = G_{b_1, \ldots, b_{i-1}} := \{ g \in G | g(b_1) = b_1, \ldots, g(b_{i-1}) = b_{i-1}\}&quot; /&gt; for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+2%2C+%5Cldots%2C+k%5C%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;i \in \{1, 2, \ldots, k\}&quot; class=&quot;latex&quot; title=&quot;i \in \{1, 2, \ldots, k\}&quot; /&gt; so that we have &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G%5E%7B%281%29%7D+%3D+G&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G^{(1)} = G&quot; class=&quot;latex&quot; title=&quot;G^{(1)} = G&quot; /&gt;. This is implemented as a list of permutation groups.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;distr_gens&lt;/strong&gt; – the strong generators distributed according to the basic stabilizers. This means: for a base &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_k%29+&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, b_2,\ldots, b_k) &quot; class=&quot;latex&quot; title=&quot;(b_1, b_2,\ldots, b_k) &quot; /&gt; and a strong generating set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=S%3D+%5C%7B+g_1%2C+g_2%2C+%5Cldots%2C+g_t%5C%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;S= \{ g_1, g_2, \ldots, g_t\}&quot; class=&quot;latex&quot; title=&quot;S= \{ g_1, g_2, \ldots, g_t\}&quot; /&gt;, distribute the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g_i&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;g_i&quot; class=&quot;latex&quot; title=&quot;g_i&quot; /&gt; in sets &lt;img src=&quot;http://s0.wp.com/latex.php?latex=S%5E%7B%28i%29%7D+%3D+G%5E%7B%28i%29%7D+%5Ccap+S&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;S^{(i)} = G^{(i)} \cap S&quot; class=&quot;latex&quot; title=&quot;S^{(i)} = G^{(i)} \cap S&quot; /&gt; for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+2%2C%5Cldots%2C+k%5C%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;i \in \{1, 2,\ldots, k\}&quot; class=&quot;latex&quot; title=&quot;i \in \{1, 2,\ldots, k\}&quot; /&gt; where the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G%5E%7B%28i%29%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G^{(i)}&quot; class=&quot;latex&quot; title=&quot;G^{(i)}&quot; /&gt; are defined as above. This is implemented as a list of lists holding the elements of the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=S%5E%7B%28i%29%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;S^{(i)}&quot; class=&quot;latex&quot; title=&quot;S^{(i)}&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;basic_orbits&lt;/strong&gt; – these are the orbits of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b_i&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;b_i&quot; class=&quot;latex&quot; title=&quot;b_i&quot; /&gt; under &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G%5E%7B%28i%29%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G^{(i)}&quot; class=&quot;latex&quot; title=&quot;G^{(i)}&quot; /&gt;. These are implemented as a list of lists, being the list of lists of keys for the basic transversals, see below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;basic_transversals&lt;/strong&gt; – these are transversals for the basic orbits. Notice that the choice for these may not (and in most cases won’t be) unique. For one thing, it depends on the set of strong generators present (which is also not uniquely determined for a given base). They are implemented as a list of dictionaries indexed according to the base &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28b_1%2C+b_2%2C%5Cldots%2C+b_k%29+&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;(b_1, b_2,\ldots, b_k) &quot; class=&quot;latex&quot; title=&quot;(b_1, b_2,\ldots, b_k) &quot; /&gt;, with keys – the elements of the basic orbits, and values – transversal elements sending the current &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b_i&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;b_i&quot; class=&quot;latex&quot; title=&quot;b_i&quot; /&gt; to the key.&lt;/p&gt;
&lt;p&gt;I wrote functions extracting &lt;strong&gt;basic_orbits, basic_transversals, basic_stabilizers, distr_gens&lt;/strong&gt; from only a base and strong generating set, as well as functions for extracting all of them from a base, strong generating set, and a part of them, so that if any of them is available, it can be supplied in order to avoid recalculations.&lt;/p&gt;
&lt;p&gt;Also, there is a straightforward test _verify_bsgs in sympy.combinatorics.util that tests a sequence of points and group elements for being a base and strong generating set. It simply verifies the definition of a base and strong generating set relative to it. There will likely be other ways to do that in the future – more effective, but surely more complicated and thus error-prone. This will serve as a robust testing tool&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where we are.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, here’s a checklist of what I’ve promised in my &lt;a href=&quot;http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/amakelov/1&quot; target=&quot;_blank&quot;&gt;proposal&lt;/a&gt; on the melange website, and which parts of it have already been implemented. This is reading the optimistic timeline. This all pertains to permutation groups, unless specified:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;handling different representations – NO&lt;/li&gt;
&lt;li&gt;excluding singleton cycles from the cycle decomposition – NO&lt;/li&gt;
&lt;li&gt;powers and orders of elements – YES. This was actually already there for permutations.&lt;/li&gt;
&lt;li&gt;orbits – YES.&lt;/li&gt;
&lt;li&gt;stabilizers – YES.&lt;/li&gt;
&lt;li&gt;schreier vectors – YES.&lt;/li&gt;
&lt;li&gt;randomized Schreier-Sims algorithm – YES&lt;/li&gt;
&lt;li&gt;handling bases and strong generating sets – YES&lt;/li&gt;
&lt;li&gt;membership testing – YES (the function _strip in sympy.combinatorics.util)&lt;/li&gt;
&lt;li&gt;rewriting algorithm – NO.&lt;/li&gt;
&lt;li&gt;actions on cosets – NO.&lt;/li&gt;
&lt;li&gt;quotient groups – NO.&lt;/li&gt;
&lt;li&gt;order of a group – YES. This was already there.&lt;/li&gt;
&lt;li&gt;subgroup testing – NO.&lt;/li&gt;
&lt;li&gt;coset enumeration by the Todd-Coxeter algorithm &amp;amp; consequences – NO.&lt;/li&gt;
&lt;li&gt;primitivity testing – YES.&lt;/li&gt;
&lt;li&gt;finding (minimal) block systems – YES.&lt;/li&gt;
&lt;li&gt;general backtrack search for a certain property – No, however easy to do by modifying PRINTELEMENTS.&lt;/li&gt;
&lt;li&gt;outputting all group elements – YES. This was already there, however PRINTELEMENTS does it in lexicographical order according to a base.&lt;/li&gt;
&lt;li&gt;Sylow subgroups – NO.&lt;/li&gt;
&lt;li&gt;calculating the center – NO.&lt;/li&gt;
&lt;li&gt;pointwise stabilizers (of more than one point, see above) – NO.&lt;/li&gt;
&lt;li&gt;change of base – YES.&lt;/li&gt;
&lt;li&gt;product groups – YES.&lt;/li&gt;
&lt;li&gt;more on finitely presented groups (…) – NO.&lt;/li&gt;
&lt;li&gt;the p-core – NO.&lt;/li&gt;
&lt;li&gt;the solvable radical – NO.&lt;/li&gt;
&lt;li&gt;database of known groups – NO.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Things yet to be done.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apart from the things that got a “NO” on the list above, the following currently come to mind (I’ll update this list periodically):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Work on removing redundant generators from a strong/any generating set, as described in [1].&lt;/li&gt;
&lt;li&gt;Precompute more properties for the groups in the named groups module (transitivity degrees, bases and strong generating sets, etc.)&lt;/li&gt;
&lt;li&gt;Add more groups to the named groups module.&lt;/li&gt;
&lt;li&gt;Fix the issues pointed out in the review of &lt;a href=&quot;https://github.com/sympy/sympy/pull/1377&quot; target=&quot;_blank&quot;&gt;my second pull request&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Finally do something for handling representations of finite groups over vector spaces, like working with character tables. It’d be cool to have a function that computes the conjugacy classes for a given group, but I don’t know right now how possible that is.&lt;/li&gt;
&lt;li&gt;Finally implement the group intersection algorithm… I’m currently starting to work my way through the SUBGROUPSEARCH function which is fundamental for implementing backtracking algorithms for group intersection, centralizers, etc.&lt;/li&gt;
&lt;li&gt;Upgrade the randomized version of Schreier-Sims to Las Vegas type in the case when the order of the group is known.&lt;/li&gt;
&lt;li&gt;Currently, transversal elements for the basic orbits for a stabilizer chain are stored explicitly. This requires too much memory for large groups. An alternative solution (which slows down execution) is to use Schreier vectors to describe the orbits. This means supplying some more arguments and adding code to many of the functions already present, and is a significant challenge by itself. The good news is that it can be carried out without modifying what is already there.&lt;/li&gt;
&lt;li&gt;Come up with a more concise functionality to relate the different structures used to describe a base and strong generating set: the generators for basic stabilizers, the basic orbits, the basic transversals… There are many situations in which some of these are given and we need some of the other ones; sometimes it’s more convenient to get the orbits as sets, and sometimes as lists, and so on… the current approach is to write a new utility function whenever the present ones don’t suffice.&lt;/li&gt;
&lt;li&gt;Handle the case when the identity element is provided as a generator for a permutation group – this can make some algorithms less efficient.&lt;/li&gt;
&lt;li&gt;Optimize the behavior of BASESWAP so that only the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;i&quot; class=&quot;latex&quot; title=&quot;i&quot; /&gt;-th and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i%2B1&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;i+1&quot; class=&quot;latex&quot; title=&quot;i+1&quot; /&gt;-th transversals are calculated.&lt;/li&gt;
&lt;li&gt;Reduce side effects as much as possible (let’s be pythonic!)&lt;/li&gt;
&lt;li&gt;Improve the docstring quality: it might be reasonable to lay out the theory/notation/definitions behind the Schreier-Sims algorithm in one place in some of the files and then simply refer to it as necessary. Otherwise the descriptions get unnecessarily long.&lt;br /&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, that’s it for now it seems. If anything else pops up soon, I’ll add it here!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/266/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/266/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=266&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-08T15:29:12+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/2012/07/07/another-week-ha-18/">
	<title>Angadh Nanjangud: Another week ha…</title>
	<link>http://angadhsympy.wordpress.com/2012/07/07/another-week-ha-18/</link>
	<content:encoded>&lt;p&gt;Another week has gone by and another &lt;a href=&quot;https://github.com/sympy/sympy/pull/1407#issuecomment-6821926&quot;&gt;PR&lt;/a&gt; has been opened. Added the kinetic energy and potential energy methods to the Particle and RigidBody classes. Also added functions to determine the same for a system of bodies. Implementing the kinetic energy method was fairly straightforward. A slightly different approach was used when it came to potential energies. It was decided that the best thing to do would be to let the user specify the potential energy scalar. So there is a set_potential_energy method and a read-only property called potential_energy.&lt;/p&gt;
&lt;p&gt;On a brighter note, the two PRs that I had opened for the momenta functions and partial velocity functions have been merged. Chuffed about that. &lt;/p&gt;
&lt;p&gt;As things stand now, we are set up beautifully to being the implementation of Lagrange’s method. The next week is primarily going to revolve around reading as much literature on the topic as possible because an attempt is going to be made to deal with non-holonomic systems too, unlike what was stated in my proposal i.e. only holonomic systems. I have personally never used Lagrange’s method on non-holonomic systems; instructors in the past have said it’s a messy affair and have stressed on the superiority of Kane’s method especially for this class of systems. I don’t doubt the superiority of Kane’s method but unfortunately, it’s not something that every dynamicist is aware of. So, it is definitely going to be a useful addition; a natural progression in the learning of dynamical methods starts at Newton’s method and is typically followed by Lagrange’s method and then to Kane’s method.&lt;/p&gt;
&lt;p&gt;With the partial velocities helper functions and energy methods and functions, we are in a very good place in terms of implementing this method. Until next week then! (It’s 7am and I haven’t gotten any sleep last night. Over caffeinated. This post may not have made for pretty reading consequently)&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/303/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/303/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=303&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-07T14:00:31+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>
<item rdf:about="http://scolobb.wordpress.com/?p=220">
	<title>Sergiu Ivanov: The Layout</title>
	<link>http://scolobb.wordpress.com/2012/07/02/the-layout/</link>
	<content:encoded>&lt;p&gt;I haven’t posted in quite some time, because I have been totally absorbed by implementing the functionality to lay out diagrams.  I am painfully close to having finished it; however, I’ve been that close to it for a couple days already, and that’s something which drives me crazy &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;OK, it’s time to take a general look over what has been done.  In the end, I will describe my short-term further plans a bit.&lt;/p&gt;
&lt;p&gt;First of all, the goal.  When you want to lay out a (commutative) diagram, you should really aim at grid layout.  This is how people normally typeset diagrams in articles, and this is the thing the semblance of which I would be happy to achieve.  The resulting grid layout is one of the traits of diagrams which make the task of automatically drawing them different from the task of automatically drawing a graph.  The other specific feature is that, when you get a diagram, you can (and you should) actually throw away those morphisms which are not really interesting.  In the following sections, I will try to describe the philosophy behind the functionality I have implemented, for each bit in part.&lt;/p&gt;
&lt;p&gt;The first stage of the algorithm is to remove the &lt;b&gt;uninteresting morphisms&lt;/b&gt;.  At this stage, those composite morphisms which have no properties are discarded; identity morphisms without properties are discarded as well.  In fact, this corresponds pretty well to how people draw diagrams.  This first stage ends by merging the premises and the conclusions of the diagram into a single container.  This is because, at drawing, the distinction between premises and conclusions is not important at all, since all interesting morphisms should make their way into the final picture.&lt;/p&gt;
&lt;p&gt;At the second stage, the algorithm abstracts morphisms away, in favour of unoriented edges between objects.  The code builds the so-called &lt;b&gt;skeleton&lt;/b&gt; of the diagram (that’s an ad-hoc name).  The skeleton is a graph which has all objects of the diagram as vertices.  Between two vertices of the skeleton there is an &lt;em&gt;undirected&lt;/em&gt; edge, if these objects are connected by an (interesting) morphism.  Notice how we discard the direction of the connection.  After all edges corresponding to morphisms have been added, the skeleton is further completed in the following way.  An edge is added between any two objects &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C&quot; class=&quot;latex&quot; title=&quot;C&quot; /&gt; for which there exists and object &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; are connected with an interesting morphism and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;C&quot; class=&quot;latex&quot; title=&quot;C&quot; /&gt; are connected with an interesting morphism.  This is &lt;em&gt;not&lt;/em&gt; the transitive closure of the graph, it is only the first step of it.  The new edges are dummy edges, in the sense that they may not correspond to interesting morphisms.&lt;/p&gt;
&lt;p&gt;The next stage is the first key stage of the algorithm.  The skeleton is tesselated into triangles, which will eventually be used to get as many right angles in the layout as possible.  Here is when the dummy edges come into play.  Their presence assures that the diagram can be completely split into triangles.  For those who have read my &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;proposal&lt;/a&gt;, I will remark that all the stages of diagram analysis I described &lt;em&gt;after&lt;/em&gt; laying out the triangles are actually unnecessary, namely because of these dummy edges, which guarantee that we have sufficiently many triangles.  Yet, dummy edges are indeed dummy, in the sense that most of them will not appear in the final diagram.  This makes the triangles we find in the skeleton unevenly interesting to us.  Triangles which have more than one dummy edge are totally extra, because they would distract the attention of the code from  triangles with more meaningful edges and would mess things up, generally.  Therefore, such triangles are immediately dropped.&lt;/p&gt;
&lt;p&gt;Once the “triangulating” stage is complete, the core of the algorithm comes into play.  Basically, the idea is to pick one of the triangles, pick one of its edges and put it on a grid, horizontally, remembering that it is in the fringe.  Then, iteratively, “&lt;b&gt;weld&lt;/b&gt;” interesting triangles to the fringe, eventually placing all objects of the diagram on the grid.  This part is the trickiest part of the whole algorithm, so prepare to hear a talk about a lot of magic &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  &lt;/p&gt;
&lt;p&gt;Any triangle is placed on the grid as a right-angled triangle, with the perpendicular edges being horizontal and vertical.  This assures that we keep “quite” close to the desired grid layout.  Whenever a triangle is placed on the grid, the objects which form its vertices are recorded as already placed.  Then, those triangles which only contain objects which have already been placed (uninteresting triangles) are dropped.  That is, once the places of some objects are decided, those objects are never considered again.  This may constitute a point of future improvement, of course, because objects are often drawn in several copies to make the diagram look clearer.&lt;/p&gt;
&lt;p&gt;When placing the triangle on the grid, the code attempts to assure that as many interesting (not dummy) edges as possible will be drawn horizontally or vertically.  There is some dark magic in the code which detects such situations, but I hope that after following the trail of comments and just reading the code itself, the whole thing should become rather clear.&lt;/p&gt;
&lt;p&gt;Now, since the algorithm is essentially greedy, there can be situations when all edges to which the remaining triangles could have been welded, have already been positioned inside the structure and it is now impossible to find the welding edge.  In this case, the algorithm attempts to attach a triangle to the existing structure by a vertex only.  If such a possibility is found, an edge (the &lt;b&gt;pseudopod&lt;/b&gt;) of the triangle is placed as vertically (or horizontally) as possible and then the welding process can be continued, since there already is a welding edge.&lt;/p&gt;
&lt;p&gt;Let’s now focus on what happens to the fringe.  When a new triangle is welded, the two new edges are added to the fringe.  No edges are deleted however, because the welding edge might still have some free space to its other part.  Edges are deleted from the fringe only when they are detected as possible welding edges, but when the algorithm finds that there is no space around them actually.  I have considered several possibilities of correcting the fringe on different occasions; my conclusions so far have been that it’s not generally worth it, performance-wise.  This question however should be better investigated, including doing some complexity analysis.&lt;/p&gt;
&lt;p&gt;You might have noticed that I do not in any way treat the situation when a pseudopod cannot be grown.  I have not encountered such situations during the testing yet, so I decided not to attempt to handle them before I have actually seen an example.  Taking into consideration that I am going to work with diagrams rather intensively later, if such situations are possible, I will indeed run into them.  I must confess that I haven’t considered the problem theoretically yet, though &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;The description of the essential parts of the algorithm is complete here, so I’m passing over to the overview of the remaining problems and further short-term plans.&lt;/p&gt;
&lt;p&gt;Tom Bachmann, my mentor, has suggested that I describe the steps of the algorithm in the docs which come with the source code.  I will do this shortly.  I believe it is essential to write such documentation as soon as possible, despite the abundant (hopefully) comments in the code.&lt;/p&gt;
&lt;p&gt;My immediately next task is, however, producing the actual &lt;a href=&quot;http://www.tug.org/applications/Xy-pic/&quot;&gt;Xy-pic&lt;/a&gt; code.  I expect that getting this done at a basic level shouldn’t be hard.  However, drawing longer morphisms and avoiding intersections for as much as possible may prove a rather hard task to achieve.&lt;/p&gt;
&lt;p&gt;Oh, and the almost forgotten conclusion: I now essentially have the core of the automatic diagram plotting functionality, since laying out objects is the most difficult part of the affair.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/220/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/220/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=220&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-02T20:42:12+00:00</dc:date>
	<dc:creator>scolobb</dc:creator>
</item>
<item rdf:about="http://www.catchmrbharath.in/programming/2012/07/02/gsoc-week-6">
	<title>Bharath M R: GSoC Week 6</title>
	<link>http://www.catchmrbharath.in/programming/2012/07/02/gsoc-week-6</link>
	<content:encoded>&lt;p&gt;I have been trying to improve the implicit plotting module during this week. But I have hit a road block. I almost ran out of ideas to solve the problem.&lt;/p&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;p&gt;The implicit plotting algorithm I implemented works something like below:&lt;/p&gt;

&lt;p&gt;1) Get x and y interval. If it satisfies the expression throughout the interval, then plot it.&lt;/p&gt;

&lt;p&gt;2) If it does not satisfy, throw away the intervals.&lt;/p&gt;

&lt;p&gt;3) If it partially satisfies, then recursively subdivide into four intervals, and try again.&lt;/p&gt;

&lt;p&gt;For cases of equality, the first point never holds true due to floating point errors. So we go on eliminating regions, and after a certain depth, plot the remaining region. These are the regions where there is at least one solution. This is the reason why the plots are rasterized. But there is an inherent bigger problem here. In the cases of expressions like $x^{3}$ even if the x interval is small, the resulting interval after computation will be large. Sometimes, due to these large intervals, there might be lots of y and x intervals which satisfy because of these errors. Even if we make x interval really small, the corresponding y interval will be large, ie the line widths become large. The explanation is more of a guess rather than the right explanation.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;Plot of $x^{y}=y^{x}$ &lt;img width=&quot;600&quot; src=&quot;http://www.catchmrbharath.in/images/02072012/fig1.png&quot; height=&quot;400&quot; /&gt; Even if I increase my depth of recursion to higher values, the thickness becomes less, but doesn’t vanish. The plot actually should have been two separate curves.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://www.catchmrbharath.in/images/02072012/fig3.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;The Mac OSX’s Grapher uses a similar algorithm(A guess because they have similar rasterization) but takes care of the line widths.&lt;/p&gt;

&lt;p&gt;If you feel you know where the problem is, please comment or email me. :)&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-02T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://catchmrbharath.github.com/programming/2012/07/02/gsoc-week-6">
	<title>Bharath M R: GSoC Week 6</title>
	<link>http://catchmrbharath.github.com/programming/2012/07/02/gsoc-week-6</link>
	<content:encoded>&lt;p&gt;I have been trying to improve the implicit plotting module during this week. But I have hit a road block. I almost ran out of ideas to solve the problem.&lt;/p&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;p&gt;The implicit plotting algorithm I implemented works something like below:&lt;/p&gt;

&lt;p&gt;1) Get x and y interval. If it satisfies the expression throughout the interval, then plot it.&lt;/p&gt;

&lt;p&gt;2) If it does not satisfy, throw away the intervals.&lt;/p&gt;

&lt;p&gt;3) If it partially satisfies, then recursively subdivide into four intervals, and try again.&lt;/p&gt;

&lt;p&gt;For cases of equality, the first point never holds true due to floating point errors. So we go on eliminating regions, and after a certain depth, plot the remaining region. These are the regions where there is at least one solution. This is the reason why the plots are rasterized. But there is an inherent bigger problem here. In the cases of expressions like $x^{3}$ even if the x interval is small, the resulting interval after computation will be large. Sometimes, due to these large intervals, there might be lots of y and x intervals which satisfy because of these errors. Even if we make x interval really small, the corresponding y interval will be large, ie the line widths become large. The explanation is more of a guess rather than the right explanation.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;Plot of $x^{y}=y^{x}$ &lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/02072012/fig1.png&quot; height=&quot;400&quot; /&gt; Even if I increase my depth of recursion to higher values, the thickness becomes less, but doesn’t vanish. The plot actually should have been two separate curves.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/02072012/fig3.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;The Mac OSX’s Grapher uses a similar algorithm(A guess because they have similar rasterization) but takes care of the line widths.&lt;/p&gt;

&lt;p&gt;If you feel you know where the problem is, please comment or email me. :)&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-02T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://blog.catchmrbharath.in/programming/2012/07/02/gsoc-week-6">
	<title>Bharath M R: GSoC Week 6</title>
	<link>http://blog.catchmrbharath.in/programming/2012/07/02/gsoc-week-6</link>
	<content:encoded>&lt;p&gt;I have been trying to improve the implicit plotting module during this week. But I have hit a road block. I almost ran out of ideas to solve the problem.&lt;/p&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;p&gt;The implicit plotting algorithm I implemented works something like below:&lt;/p&gt;

&lt;p&gt;1) Get x and y interval. If it satisfies the expression throughout the interval, then plot it.&lt;/p&gt;

&lt;p&gt;2) If it does not satisfy, throw away the intervals.&lt;/p&gt;

&lt;p&gt;3) If it partially satisfies, then recursively subdivide into four intervals, and try again.&lt;/p&gt;

&lt;p&gt;For cases of equality, the first point never holds true due to floating point errors. So we go on eliminating regions, and after a certain depth, plot the remaining region. These are the regions where there is at least one solution. This is the reason why the plots are rasterized. But there is an inherent bigger problem here. In the cases of expressions like $x^{3}$ even if the x interval is small, the resulting interval after computation will be large. Sometimes, due to these large intervals, there might be lots of y and x intervals which satisfy because of these errors. Even if we make x interval really small, the corresponding y interval will be large, ie the line widths become large. The explanation is more of a guess rather than the right explanation.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;Plot of $x^{y}=y^{x}$ &lt;img width=&quot;600&quot; src=&quot;http://blog.catchmrbharath.in/images/02072012/fig1.png&quot; height=&quot;400&quot; /&gt; Even if I increase my depth of recursion to higher values, the thickness becomes less, but doesn’t vanish. The plot actually should have been two separate curves.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://blog.catchmrbharath.in/images/02072012/fig3.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;The Mac OSX’s Grapher uses a similar algorithm(A guess because they have similar rasterization) but takes care of the line widths.&lt;/p&gt;

&lt;p&gt;If you feel you know where the problem is, please comment or email me. :)&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-02T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://rhoforsympy.wordpress.com/?p=169">
	<title>Guru Devanla: Week 6 : Tr implementation contd…</title>
	<link>http://rhoforsympy.wordpress.com/2012/07/01/week-6-tr-implementation-contd/</link>
	<content:encoded>&lt;p&gt;This week I continued to work on the Tr operator and the related code needed for partial trace operations.  Following up with the list of tasks I had listed out for this week, I got the following items accomplished this week.&lt;/p&gt;
&lt;p&gt;1. PR 1333 merged&lt;/p&gt;
&lt;p&gt;2. Submitted &lt;a href=&quot;https://github.com/sympy/sympy/pull/1396&quot;&gt;PR 1396&lt;/a&gt;  for review :&lt;/p&gt;
&lt;p&gt;This PR has the following changes:&lt;/p&gt;
&lt;p&gt;1. Printing ( default, latex and pretty).  The current output does not display the indices.  I would like some input on this from the reviewers on how to incorporate the information on indices into the output.&lt;/p&gt;
&lt;p&gt;2. Handles indices in the constructor of Density class and related methods.&lt;/p&gt;
&lt;p&gt;3. Handle partial trace operations especially wrt to Density operators.&lt;/p&gt;
&lt;p&gt;4. Notebook example, some of which are listed below:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rhoforsympy.files.wordpress.com/2012/07/tr_examp1.jpg&quot;&gt;&lt;img src=&quot;http://rhoforsympy.files.wordpress.com/2012/07/tr_examp1.jpg?w=500&amp;amp;h=396&quot; title=&quot;tr_examp&quot; height=&quot;396&quot; width=&quot;500&quot; alt=&quot;&quot; class=&quot;alignleft size-full wp-image-174&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The activities I have in mind for next week are as follows.&lt;/p&gt;
&lt;p&gt;1.  Address review comments on latest PR.&lt;/p&gt;
&lt;p&gt;2.  Complete the test cases for existing partial trace implementation for Qubits. My plan is to get this changes merged with the current PR. This should happen by Tuesday.&lt;/p&gt;
&lt;p&gt;With these 2 activities, I believe most of what is needed for Tr and density matrices could be considered complete. Again, I expect  &lt;a href=&quot;https://github.com/ellisonbg&quot;&gt;@ellisonbg&lt;/a&gt; and &lt;a href=&quot;https://github.com/flacjacket&quot;&gt;@flacjacket&lt;/a&gt; to provide some input on this.   Assuming, this is true, then I plan to start looking at&lt;/p&gt;
&lt;p&gt;3. qapply() method to incorporate density op L and R operations.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Aside:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;BTW, for Emacs lovers and who love IPython Notebook, there is &lt;a href=&quot;http://tkf.github.com/emacs-ipython-notebook/&quot;&gt;IPython notebook for Emacs&lt;/a&gt; now. I have not tried this yet,  but I plan to try this out this week and post my experience.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/169/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/169/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=169&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-01T23:39:33+00:00</dc:date>
	<dc:creator>grdvnl</dc:creator>
</item>
<item rdf:about="http://amakelov.wordpress.com/?p=245">
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 6</title>
	<link>http://amakelov.wordpress.com/2012/07/01/google-summer-of-code-2012-week-6/</link>
	<content:encoded>&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;here’s a brief summary of what I’ve been doing for the sixth week of my GSoC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Submitting, fixing and finally getting merged my &lt;a href=&quot;https://github.com/sympy/sympy/pull/1377&quot; target=&quot;_blank&quot;&gt;second pull request&lt;/a&gt;. Thanks a lot to &lt;a href=&quot;https://github.com/Krastanov&quot; target=&quot;_blank&quot;&gt;Stefan&lt;/a&gt; and my mentor &lt;a href=&quot;https://github.com/wdjoyner&quot; target=&quot;_blank&quot;&gt;David&lt;/a&gt; for reviewing it! now we have a lot more functionality for handling permutation groups.&lt;/li&gt;
&lt;li&gt;Some more debugging on PRINTELEMENTS (I was talking about it in the third bullet of &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/&quot; target=&quot;_blank&quot;&gt;my post from last week&lt;/a&gt;). It turned out that it was still doing something slightly wrong but now it’s the way it should be. Apart from that, its speed was optimized by a different means of storing computed subwords of the group element being computed as a word in elements from the basic transversals (this assumes some knowledge of the theory of bases and strong generating sets; for a discussion, see [1],  pp.87-88,  pp.108-110)&lt;/li&gt;
&lt;li&gt;In the &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/#comments&quot; target=&quot;_blank&quot;&gt;comments&lt;/a&gt; on &lt;a href=&quot;http://amakelov.wordpress.com/2012/06/24/google-summer-of-code-2012-week-5/&quot; target=&quot;_blank&quot;&gt;my post from last week&lt;/a&gt;, I got a clarification from &lt;a href=&quot;https://github.com/pernici&quot; target=&quot;_blank&quot;&gt;Mario&lt;/a&gt; on the struggles with _coset_repr that I discussed in the third bullet of last week’s post. Now I’ll be able to use the current deterministic implementation of the Schreier-Sims algorithm whenever a BSGS is needed (after some minor modifications to the attributes of a PermutationGroup that are assigned after running Schreier-Sims).&lt;/li&gt;
&lt;li&gt;Finally, the implementation of the algorithm BASESWAP ([1],  pp.102-103). This function is necessary for SUBGROUPSEARCH ([1], p.117) which in turn is necessary for the group intersection algorithm. &lt;strong&gt;This deserves some special attention – I have strong reasons to believe that the pseudocode &amp;amp; its discussion in [1], pp. 102-103 contain the same mistake repeated several times.&lt;/strong&gt; Namely, I think that line 3 of the pseudocode for BASESWAP should read &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7C%5Cbeta_i%5E%7B%5Cleft%5Clangle+T%5Cright%5Crangle%7D%7C%5Cneq+s&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|\beta_i^{\left\langle T\right\rangle}|\neq s&quot; class=&quot;latex&quot; title=&quot;|\beta_i^{\left\langle T\right\rangle}|\neq s&quot; /&gt; instead of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7C%5Cbeta_%7Bi%2B1%7D%5E%7B%5Cleft%5Clangle+T%5Cright%5Crangle%7D%7C%5Cneq+s&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|\beta_{i+1}^{\left\langle T\right\rangle}|\neq s&quot; class=&quot;latex&quot; title=&quot;|\beta_{i+1}^{\left\langle T\right\rangle}|\neq s&quot; /&gt;. At first I implemented the algorithm the way it was given is pseudocode, and lost many hours (it wasn’t working) until I discovered that this little detail might be wrong. Now, I shall assume the notation used in [1] in order to follow their argument as closely as possible. My reasoning is as follows: as we change the set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=T&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;T&quot; class=&quot;latex&quot; title=&quot;T&quot; /&gt; during the run of BASESWAP, we finally want to have &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cleft%5Clangle+T%5Cright%5Crangle+%3D+H+%3A%3D+G%5E%7B%28i%29%7D_%7B%5Cbeta_%7Bi%2B1%7D%7D%3DG_%7B%5Cbeta_1%2C+%5Cbeta_2%2C+%5Cldots%2C+%5Cbeta_%7Bi-1%7D%2C+%5Cbeta_%7Bi%2B1%7D%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\left\langle T\right\rangle = H := G^{(i)}_{\beta_{i+1}}=G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}&quot; class=&quot;latex&quot; title=&quot;\left\langle T\right\rangle = H := G^{(i)}_{\beta_{i+1}}=G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}&quot; /&gt;. The last line &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7CG%5E%7B%28i%29%7D%7C+%3D+%7C%5CDelta%5E%7B%28i%29%7D%7C%7C%5CDelta%5E%7B%28i%2B1%29%7D%7C%7CG%5E%7B%28i%2B2%29%7D%7C+%3D+%7C%5Cbeta_%7Bi%2B1%7D%5E%7BG%5E%7B%28i%29%7D%7D%7C%7CH%7C&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|G^{(i)}| = |\Delta^{(i)}||\Delta^{(i+1)}||G^{(i+2)}| = |\beta_{i+1}^{G^{(i)}}||H|&quot; class=&quot;latex&quot; title=&quot;|G^{(i)}| = |\Delta^{(i)}||\Delta^{(i+1)}||G^{(i+2)}| = |\beta_{i+1}^{G^{(i)}}||H|&quot; /&gt; on page 102 of [1] is indeed correct by a straightforward application of the orbit-stabilizer theorem; so if we put &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s+%3D+%5Cfrac%7B%7C%5CDelta%5E%7B%28i%29%7D%7C%7C%5CDelta%5E%7B%28i%2B1%29%7D%7C%7D%7B+%7C%5Cbeta_%7Bi%2B1%7D%5E%7BG%5E%7B%28i%29%7D%7D%7C%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;s = \frac{|\Delta^{(i)}||\Delta^{(i+1)}|}{ |\beta_{i+1}^{G^{(i)}}|}&quot; class=&quot;latex&quot; title=&quot;s = \frac{|\Delta^{(i)}||\Delta^{(i+1)}|}{ |\beta_{i+1}^{G^{(i)}}|}&quot; /&gt; we indeed have &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7CH%7C+%3D+s%7CG%5E%7B%28i%2B2%29%7D%7C&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|H| = s|G^{(i+2)}|&quot; class=&quot;latex&quot; title=&quot;|H| = s|G^{(i+2)}|&quot; /&gt;. Up to this point, I believe the book. However, after that &lt;strong&gt;they say&lt;/strong&gt; that the last equation implies that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s+%3D+%7C%5Cbeta_%7Bi%2B1%7D%5EH%7C&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;s = |\beta_{i+1}^H|&quot; class=&quot;latex&quot; title=&quot;s = |\beta_{i+1}^H|&quot; /&gt;. Looking more closely, by definitions we recall that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=H+%3D+G_%7B%5Cbeta_1%2C+%5Cbeta_2%2C+%5Cldots%2C+%5Cbeta_%7Bi-1%7D%2C+%5Cbeta_%7Bi%2B1%7D%7D%2C+G%5E%7B%28i%2B2%29%7D+%3D+G_%7B%5Cbeta_1%2C+%5Cbeta_2%2C%5Cldots%2C+%5Cbeta_%7Bi%2B1%7D%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;H = G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}, G^{(i+2)} = G_{\beta_1, \beta_2,\ldots, \beta_{i+1}}&quot; class=&quot;latex&quot; title=&quot;H = G_{\beta_1, \beta_2, \ldots, \beta_{i-1}, \beta_{i+1}}, G^{(i+2)} = G_{\beta_1, \beta_2,\ldots, \beta_{i+1}}&quot; /&gt;. Hence, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G%5E%7B%28i%2B2%29%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;G^{(i+2)}&quot; class=&quot;latex&quot; title=&quot;G^{(i+2)}&quot; /&gt; is the stabilizer of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta_i&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\beta_i&quot; class=&quot;latex&quot; title=&quot;\beta_i&quot; /&gt; in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=H&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;H&quot; class=&quot;latex&quot; title=&quot;H&quot; /&gt;, thus by the orbit-stabilizer theorem we have &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7CH%7C+%3D+%7C%5Cbeta_i%5EH%7C%7CG%5E%7B%28i%2B2%29%7D%7C&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|H| = |\beta_i^H||G^{(i+2)}|&quot; class=&quot;latex&quot; title=&quot;|H| = |\beta_i^H||G^{(i+2)}|&quot; /&gt;, hence we must have &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7C%5Cbeta_i%5EH%7C+%3D+s&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|\beta_i^H| = s&quot; class=&quot;latex&quot; title=&quot;|\beta_i^H| = s&quot; /&gt;, not &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7C%5Cbeta_%7Bi%2B1%7D%5EH%7C%3Ds&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;|\beta_{i+1}^H|=s&quot; class=&quot;latex&quot; title=&quot;|\beta_{i+1}^H|=s&quot; /&gt;. This same mistake (&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta_%7Bi%2B1%7D&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\beta_{i+1}&quot; class=&quot;latex&quot; title=&quot;\beta_{i+1}&quot; /&gt; instead of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta_i&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\beta_i&quot; class=&quot;latex&quot; title=&quot;\beta_i&quot; /&gt;) appears several other times (in fact, all the times) in the discussion of BASESWAP and once in the pseudocode. Now that I changed it to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbeta_i&amp;amp;bg=fafad3&amp;amp;fg=6f5e4e&amp;amp;s=0&quot; alt=&quot;\beta_i&quot; class=&quot;latex&quot; title=&quot;\beta_i&quot; /&gt;, the implementation doesn’t break and behaves as expected. I also implemented the randomized version described in [1], p.103 and [2], p.98, and it also behaves as expected. I’d be extremely happy if anyone else is willing to go over this and check whether what I’m saying is true; I’m pretty sure it is, but I didn’t expect to find such a serious mistake in that book. I’m willing to provide their argument in its entirety or clarify the notation, just shoot me a comment below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, that’s it for now. I’m in the process of furnishing my code for the next pull request (which will hopefully be submitted tomorrow), and then I’ll resume my work on subgroup intersections.&lt;/p&gt;
&lt;p&gt;Edit: My pull request has not been submitted yet since writing the docstrings and tests took me longer than expected. The current state of it is available &lt;a href=&quot;https://github.com/amakelov/sympy/tree/week4&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, if anyone wants to take a look at how things are going. I still have to write some more tests, and hopefully will push it today for review.&lt;/p&gt;
&lt;p&gt;Edit#2: &lt;a href=&quot;https://github.com/sympy/sympy/pull/1406&quot; target=&quot;_blank&quot;&gt;The pull request&lt;/a&gt; is finally out. It is some 1300 lines of code, so if people object I can remove some of the stuff and save them for a future pull request.&lt;/p&gt;
&lt;p&gt;[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp;amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3&lt;/p&gt;
&lt;p&gt;[2] Permutation Group Algorithms, Ákos Seress, Cambridge University Press&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/245/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/245/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=245&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-07-01T22:45:03+00:00</dc:date>
	<dc:creator>amakelov</dc:creator>
</item>
<item rdf:about="http://angadhsympy.wordpress.com/2012/06/30/gsoc-2012-post-7-22/">
	<title>Angadh Nanjangud: GSoC 2012 Post 7</title>
	<link>http://angadhsympy.wordpress.com/2012/06/30/gsoc-2012-post-7-22/</link>
	<content:encoded>&lt;p&gt;Another week and more things learned. A new functionality was added this week to mechanics- the partial velocities function. This function basically spits out a list of lists of partial velocities.&lt;/p&gt;
&lt;p&gt;A little background on the use of partial velocities in determining equations of motion- Partial velocities are used in Kane’s method to determine, what Kane calls, generalized active force and generalized inertia force. A partial velocity is defined as the partial derivative of a velocity (or angular velocity) vector with respect to an independent generalized speed, which is a scalar. The outcome of these partial velocities is thus a vector. As many of these can be computed as may be relevant to the system. Then these partial velocities of the points are dotted with the appropriate active and inertial forces at those points.&lt;/p&gt;
&lt;p&gt;As easy and straightforward as that may sound in terms of implementation, I found it a bit of a tedious task to decide what was the best way for implementing it. It’s one thing to write code that is for stand alone purposes and where you have creative reign but it is another when it comes to writing code that must replace chunks of existing code.&lt;/p&gt;
&lt;p&gt;At first, when I wrote out this function, it was just spitting out a list of partial velocities. That wasn’t too hard. But then Jason in the comment on last week’s post suggested that changes be made into the Kane class so that the partial velocities function be incorporated into it. So as it stood, my function was useless for anything else but looking at partial velocities. So back to the drawing board!&lt;/p&gt;
&lt;p&gt;In the mechanics package, the scalar equations that are computed are stored in a matrix. So, I thought what would be ideal is to get a matrix of partial velocities that would mimic the partial velocities table that we get when we try to derive equations of motion by hand. So I went about doing that. Finally when I tested my code, I was getting an error message I couldn’t figure out. Now it was time to debug the code but with an error message that I couldn’t really grasp. I guess I went about trying to decipher the error in an unconventional way, where I went and rewrote each line of my code into the test file. But this was good because I finally figured out the issue with the function- The Matrix package in sympy doesn’t accept objects which are of the Vector class type that we typically use to represent vectors in mechanics.&lt;/p&gt;
&lt;p&gt;Speaking about this with Gilbert finally led to the conclusion that nested lists would be best in this case. So after having written the same function several times, I was finally able to rewrite the function successfully and a pertinent &lt;a href=&quot;https://github.com/sympy/sympy/pull/1391&quot;&gt;PR&lt;/a&gt; opened. (I should add that in all this hoopla of writing and rewriting this function, I completely forgot about python list indexing beginning at 0. In hindsight it was hilarious to see myslef struggle with debugging my function one last time when I forgot one of Python’s quirks. I was up until the wee hours of the morning trying to figure that one out and then it hit me! Hah!). Currently I have been looking at the Kane.py module to see how to incorporate this function into it. In theory it shouldn’t be hard because the math that needs to be done fits right in, but it could be a bit more tedious than I recognize. But I’m confident that the function itself will not have to be tweaked to be used which is a good sign.&lt;/p&gt;
&lt;p&gt;So this upcoming week, I will find a way to use this functionality in the Kane class. I will also be meeting with Gilbert and we will determine a plan in terms of how to implement a Lagrange class which is one of the major goals for this summer.&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/263/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/263/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=263&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2012-06-30T09:17:23+00:00</dc:date>
	<dc:creator>angadhn</dc:creator>
</item>

</rdf:RDF>
