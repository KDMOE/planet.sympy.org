<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet SymPy</title>
	<link>http://planet.sympy.org/</link>
	<language>en</language>
	<description>Planet SymPy - http://planet.sympy.org/</description>

<item>
	<title>Guru Devanla: Week 2: Activity Summary</title>
	<guid isPermaLink="false">http://rhoforsympy.wordpress.com/?p=116</guid>
	<link>http://rhoforsympy.wordpress.com/2012/06/02/week-2-activity-summary/</link>
	<description>&lt;p&gt;This week there was fewer lines of code than last week. But, with this week I have almost(except partial trace) merged all changes from @ellisonbg’s densityop branch and ready to extend the implementation to incorporate other features.  Most of the time I spent this week is to review and structure my work for the coming weeks and address comments on previous PR . I have provided a detailed plan below.&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Tasks performed this week&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;1.  Responded to and completed all comments on last weeks pull &lt;a href=&quot;https://github.com/sympy/sympy/pull/1312&quot; title=&quot;PR 1312&quot;&gt;PR1312.&lt;/a&gt;&lt;br /&gt;
2.  Pushed a minor code change branch to my git account. This change handles &lt;strong&gt;entropy for general density operators&lt;/strong&gt;.  (&lt;em&gt;I am still waiting for the previous pull request to get merged, since this pull request was branched off that.)&lt;br /&gt;
&lt;/em&gt;3.  Review and understand the partial trace operations and qubit related implementation.  Further notes will be prepared for the discussion.&lt;br /&gt;
4. Understand current implementation of tensor products to plan work for coming weeks.&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;My plan for weeks 3,4,5,6 ( based on design discussion we have had regarding partial trace )&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(Note, the detailed plan here still meets the timeline outlined in the proposal. The only change is I will be working fewer hours during Week 4(June 10-16), since I am at the summer school. Hopefully, I can contain the work to not flow into later weeks). &lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Week 3/4&lt;/h3&gt;
&lt;p&gt;Implement/test partial trace methods [ &lt;strong&gt;_eval_partial_trace&lt;/strong&gt; ] and other required methods for following classes:&lt;/p&gt;
&lt;p&gt;QubitDensity (&lt;span style=&quot;color: #800000;&quot;&gt;&lt;em&gt;name suggestion needed!&lt;/em&gt;)&lt;/span&gt; : for this I will use the current bit-twiddling algorithm but add detailed test cases.&lt;br /&gt;
TensorProduct : Code to handle density operators ( both qubit based, and generic) during expand, mul operations.&lt;br /&gt;
TensorProduct : _eval_partial_trace method will split the sub-system to trace. and then based on states inside Tr(|i&amp;gt;&amp;lt;k|).  [ &lt;em&gt;This needs more discussions during the next few days and during IRC session.&lt;/em&gt;]&lt;br /&gt;
Sub-classes of ‘State’ : Need to decide which subclasses need and how it should be done.&lt;/p&gt;
&lt;h3&gt;Week 5&lt;/h3&gt;
&lt;p&gt;Symbolic Trace operations and Partial Trace operations.&lt;/p&gt;
&lt;h3&gt;Week 6&lt;/h3&gt;
&lt;p&gt;Changes to qapply for L and R operations and any operations that would be needed based on changes so far. (will also fix the bug identified in PR 1312)&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Other related learning activities this week.&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I tried &lt;a href=&quot;http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html&quot;&gt;IPython Notebook&lt;/a&gt; and I absolutely love it. Now, I am using that as my command line interface for running sympy commands and understanding current implementation.  The best thing Notebook has done to my workflow is help me save my scratch work and go back whenever I need it. Thanks&lt;a href=&quot;https://github.com/ellisonbg&quot; title=&quot;Brian's github&quot;&gt; @ellisonbg&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I did have to jump some hoops to set up Notebook on Ubuntu 11.04, since I had to build a lot of dependencies myself. I plan to blog about it as part of another post.  A minor pain point with it is, I need to drag/drop files I want to work on. Wish it gave me an option to type in the URL to a saved notebook rather than forcing me to open a FileManager window to find file to drag and drop.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=116&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 02 Jun 2012 13:30:41 +0000</pubDate>
</item>
<item>
	<title>Angadh Nanjangud: GSoC 2012 Post 3</title>
	<guid isPermaLink="true">http://angadhsympy.wordpress.com/2012/06/02/gsoc-2012-post-3-4/</guid>
	<link>http://angadhsympy.wordpress.com/2012/06/02/gsoc-2012-post-3-4/</link>
	<description>&lt;p&gt;It’s the last week of school so things are a little crazy. I haven’t had time to look into much for the summer of code this week as a result. I will have my responsibilities for the quarter wrapped by noon on the 5th (Tuesday) so it appears that I will be on schedule as predicted.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/65/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/65/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=65&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 02 Jun 2012 00:34:15 +0000</pubDate>
</item>
<item>
	<title>Sergiu Ivanov: The Prologue</title>
	<guid isPermaLink="true">http://scolobb.wordpress.com/2012/06/02/the-prologue-37/</guid>
	<link>http://scolobb.wordpress.com/2012/06/02/the-prologue-37/</link>
	<description>&lt;p&gt;And yeah, the last exam in this semester is a matter of the past &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  In my opinion, this is so important a thing, that it deserves standing in a separate paragraph &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Since I’ve only had a couple hours of work today, because of the exam, there’s not much that I can say about my progress this week.  I’d like to explicitly note, though, that this delay was allowed for in the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov%3A-Category-Theory-Module/&quot;&gt;proposal&lt;/a&gt;, so I’m still good with my timing.&lt;/p&gt;
&lt;p&gt;Nevertheless, I have started setting up the basic infrastructure (view &lt;a href=&quot;https://github.com/scolobb/sympy/tree/ct0-base-classes&quot;&gt;branch&lt;/a&gt; on GitHub).  While I did contribute bits of code to SymPy before, I’ve never lived through the experience of adding a new module, and this has immediately posed a number of important questions which I think I have succeeded find an answer for by looking at other parts of SymPy, but also by asking the Knowledgeable.  In the next paragraphs I will summarise the most important of the problems I have run into and the solutions I have subsequently adopted.&lt;/p&gt;
&lt;p&gt;My first problem was about docstrings.  While it is clear that a docstring should briefly describe the class, I wasn’t sure as to how much information about the mathematical concept itself to introduce.  The central thing to realise here is that category theoretical notions aren’t among the best known; moreover, they tend to bear names which may be quite misleading for people familiar with notions with similar names, introduced in other domains.  Therefore, I decided to also briefly describe the concept itself in the docstring of the class which is meant to represent this concept.&lt;/p&gt;
&lt;p&gt;My other point of uncertainty was about producing string representations of morphisms.  My being unsure arose from the fact that my knowledge about string representations and pretty printing in SymPy had been rather vague.  Now, however, it has been &lt;a href=&quot;https://groups.google.com/d/topic/sympy/6zBUN2OzmpA/discussion&quot;&gt;decided&lt;/a&gt; that the string representation of a morphism &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f:A\rightarrow B&quot; /&gt; should be&lt;/p&gt;
&lt;pre&gt;Morphism(Object(&quot;A&quot;), Object(&quot;B&quot;), &quot;f&quot;)&lt;/pre&gt;
&lt;p&gt;while in its pretty-printed version it should be something like&lt;/p&gt;
&lt;pre&gt;  f
A---&amp;gt;B&lt;/pre&gt;
&lt;p&gt;With morphism composition things should be done similarly.  For example, given two morphisms &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%3AA%5Crightarrow+B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;f:A\rightarrow B&quot; class=&quot;latex&quot; title=&quot;f:A\rightarrow B&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%3AB%5Crightarrow+C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g:B\rightarrow C&quot; class=&quot;latex&quot; title=&quot;g:B\rightarrow C&quot; /&gt;, the morphism &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%5Ccirc+f%3AA%5Crightarrow+C&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;g\circ f:A\rightarrow C&quot; class=&quot;latex&quot; title=&quot;g\circ f:A\rightarrow C&quot; /&gt; should look like&lt;/p&gt;
&lt;pre&gt;[Morphism(Object(&quot;A&quot;), Object(&quot;B&quot;), &quot;f&quot;),
 Morphism(Object(&quot;B&quot;), Object(&quot;C&quot;), &quot;g&quot;)]&lt;/pre&gt;
&lt;p&gt;in string representation, and like&lt;/p&gt;
&lt;pre&gt;  g∘f
A-----&amp;gt;C&lt;/pre&gt;
&lt;p&gt;in pretty-printed version.  Note that the object &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=000000&amp;amp;fg=b8babb&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; is not shown in this representation.  I think this better fits the notion of composition of morphisms, but I am totally open to suggestions in this regard.  I will also take care that the composition symbol is rendered properly and is substituted with an asterisk on non-unicode terminals.&lt;/p&gt;
&lt;p&gt;And the latest problem I am currently at is writing tests &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;  I have once read in good book on Smalltalk (no link, since I don’t remember its name &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif&quot; alt=&quot;:-(&quot; class=&quot;wp-smiley&quot; /&gt;  ) that writing tests &lt;em&gt;before&lt;/em&gt; the actual functionality is a Good Thing™.  I’ll try to apply this approach right now, especially since I’ve heard some of the SymPy developers confirm the goodness of the Thing. Thus, the methods I now have in &lt;em&gt;Morphism&lt;/em&gt; only have docstrings mostly and do nothing.  I plan to write some tests which should feature the desired behaviour and then to actually implement this behaviour.  Afterwards, I’ll extend the tests to cover the corner cases.  I guess it’s going to take a while to actually do all this, but I think it’s going to be worthwhile.  Also, I’d like to suppose that I will get faster at it with time &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;On the overall, I feel that I haven’t yet fully adapted to my current “job”, but I expect to free myself from this feeling over the next couple of days &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/106/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/106/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=106&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 01 Jun 2012 21:41:39 +0000</pubDate>
</item>
<item>
	<title>Stefan Krastanov: Scalar and Vector Fields in SymPy – First Steps</title>
	<guid isPermaLink="false">http://krastanov.wordpress.com/?p=307</guid>
	<link>http://krastanov.wordpress.com/2012/05/27/scalar-and-vector-fields-in-sympy-first-steps/</link>
	<description>&lt;p&gt;The Differential Geometry module for SymPy already supports some interesting basic operations. However, it would be appropriate to describe its structure before giving any examples.&lt;/p&gt;
&lt;p&gt;First of all, there are the &lt;code&gt;Manifold&lt;/code&gt; and &lt;code&gt;Patch&lt;/code&gt; classes which are just placeholders. They contain all the coordinate charts that are defined on the patch and do not provide, for instance, any topological information. This leads us to the &lt;code&gt;CoordSystem&lt;/code&gt; class which contains all the coordinate transformation logic. For example, if I want to define the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D%5E2+&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\mathbb{R}^2 &quot; class=&quot;latex&quot; title=&quot;\mathbb{R}^2 &quot; /&gt; euclidean manifold together with the polar and Cartesian coordinate systems I would do:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;R2 = Manifold('R^2', 2)
# Patch and coordinate systems.
R2_origin = Patch('R^2_o', R2)
R2_r = CoordSystem('R^2_r', R2_origin)
R2_p = CoordSystem('R^2_p', R2_origin)

# Connecting the coordinate charts.
x, y, r, theta = [Dummy(s) for s in ['x', 'y', 'r', 'theta']]
R2_r.connect_to(R2_p, [x, y],
                      [sqrt(x**2 + y**2), atan2(y, x)],
                inverse=False, fill_in_gaps=False)
R2_p.connect_to(R2_r, [r, theta],
                      [r*cos(theta), r*sin(theta)],
                inverse=False, fill_in_gaps=False)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;All following examples will be about the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D%5E2+&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\mathbb{R}^2 &quot; class=&quot;latex&quot; title=&quot;\mathbb{R}^2 &quot; /&gt; manifold which is already implemented in the code for the module. Also, notice the use of the &lt;code&gt;inverse&lt;/code&gt; and &lt;code&gt;fill_in_gaps&lt;/code&gt; flags. When they are set to &lt;code&gt;True&lt;/code&gt; the &lt;code&gt;CoordSystem&lt;/code&gt; classes try to automatically deduce the inverse transformations using SymPy’s &lt;code&gt;solve&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Now that we have a manifold we would like to create some fields on it and define some points that belong to the manifold. The points are implemented in the &lt;code&gt;Point&lt;/code&gt; class. You need to specify some coordinates when you define the point, however after that the object is completely coordinate-system-idependent.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# You need to specify coordinates in some coordinate system
p = Point(R2_p, [r0, theta0])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Then one can define fields. &lt;code&gt;ScalarField&lt;/code&gt; takes points to real numbers and &lt;code&gt;VectorField&lt;/code&gt; is an operator on &lt;code&gt;ScalarField&lt;/code&gt; taking a scalar field to another scalar field by applying a directional derivative. For example, here &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the scalar fields taking a point and returning it’s coordinate and &lt;code&gt;d_dx&lt;/code&gt; and &lt;code&gt;d_dy&lt;/code&gt; are the vector fields &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial+x%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{\partial}{\partial x}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial}{\partial x}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial+y%7D&amp;amp;bg=f3f3f3&amp;amp;fg=888888&amp;amp;s=0&quot; alt=&quot;\frac{\partial}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial}{\partial y}&quot; /&gt;. &lt;code&gt;R2_r&lt;/code&gt; is the Cartesian coordinate system and &lt;code&gt;R2_p&lt;/code&gt; is the polar one.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;R2_r.x(p) == r0*cos(theta0)
# R2_r.d_dx(R2_r.x) is a also scalar field
R2_r.d_dx(R2_r.x)(p) == 1
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Looking at how can these fields be defined:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# For a ScalarField you provide the transformation in some coordinate system
R2_r.x = ScalarField(R2_r, [x0, y0], x0)
#                     /      |        ^-------- the result
#     the coord system     the coordinates

# For a VectorField you provide the components in some coordinate system
R2_r.d_dx = VectorField(R2_r, [x0, y0], [1, 0])
#                        /      |         ^-------- the components
#         the coord system     the coordinates
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Obviously one can define much more interesting fields. For instance the potential due to a point charge at the origin is:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;potential = ScalarField(R2_p, [r0, thata0], -1/r0)
# And to reiterate, the definition does not limit you
# to use it only in this coordinate system. For instance:
potential(R2_r.point([x0, y0])) == 1/sqrt(x0**2 + y0**2)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;However there is another more intuitive way to do it:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# R2_p.r is the scalar field that takes a point and returns the r coordinate
potential2 = 1/R2_p.r
potential2(R2_r.point([x0, y0])) == 1/sqrt(x0**2 + y0**2))
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;And this new object &lt;code&gt;potential2&lt;/code&gt; is not an instance of &lt;code&gt;ScalarField&lt;/code&gt;. It is actually a normal SymPy expression tree that contains a &lt;code&gt;ScalarField&lt;/code&gt; somewhere in its leafs (namely in this case it is &lt;code&gt;Pow(R2_p.r, -1)&lt;/code&gt;). However, due to the change to one of the base classes of SymPy that I did in this &lt;a href=&quot;https://github.com/sympy/sympy/pull/1299&quot; target=&quot;_blank&quot; title=&quot;Make Expr recursively callable&quot;&gt;pull request&lt;/a&gt; it is now possible for such tree to be a python callable, by recursively applying the argument to each callable leaf in the tree. This change is still debated and it may be reverted.&lt;/p&gt;
&lt;p&gt;Vector fields can also be build in this manner. However, they pose a problem. What happens when you multiply a vector field and a scalar field? This operation should give another vector field. And here is a possible problem with the approach of recursively callable expressions trees:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;# Naively this operation will call a scalar field on
# another scalar field which is nonsense:
(R2_r.x * R2_r.d_dx)(R2_r.x) == R2_r.x(R2_r.x) * R2_r.d_dx(R2_r.x)
#                         nonsense----^
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The current solution is for &lt;code&gt;scalar_field(not_point)&lt;/code&gt; to return the callable itself. Thus we have:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;(R2_r.x * R2_r.d_dx)(R2_r.x) == R2_r.x * R2_r.d_dx(R2_r.x)
#\________________/ \______/    \_______________________/
#   vector field        ^---scalar fields---^
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This way there is no need for complicated logic in &lt;code&gt;__mul__ nor is there need for addition subclasses of &lt;/code&gt;&lt;code&gt;Expr&lt;/code&gt; in order to accommodate this behavior.&lt;/p&gt;
&lt;p&gt;There is not much more to be said about the structure of the module. There are some other nice things already implemented like integral curves, however I will discuss these in a later post.&lt;/p&gt;
&lt;p&gt;Among the things that should be done at some point:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should vector fields be callable on points? If yes, what the result should be? An abstract vector, a tuple of coordinates in a certain coordinate system, something else?&lt;/li&gt;
&lt;li&gt;There are many expressions generated by this code that are not simple enough. I should work on the simplification routines and on the differential geometry module itself in order to get more canonical expressions.&lt;/li&gt;
&lt;li&gt;The last point is also valid about the solvers: some coordinate transformations are too complicated for the solvers to find the inverse transformation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Manifold&lt;/code&gt; and &lt;code&gt;Patch&lt;/code&gt; have &lt;code&gt;name&lt;/code&gt; attributes. Are these necessary? What is the role of &lt;code&gt;name&lt;/code&gt; attributes in SymPy besides printing?&lt;/li&gt;
&lt;li&gt;Start using &lt;code&gt;Lambda&lt;/code&gt; where applicable.&lt;/li&gt;
&lt;li&gt;Follow better the class structure of SymPy.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/307/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/307/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;amp;blog=15251174&amp;amp;post=307&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 27 May 2012 13:04:42 +0000</pubDate>
</item>
<item>
	<title>Aleksandar Makelov: Google Summer of Code 2012: Week 1</title>
	<guid isPermaLink="false">http://amakelov.wordpress.com/?p=9</guid>
	<link>http://amakelov.wordpress.com/2012/05/26/google-summer-of-code-2012-week-1/</link>
	<description>&lt;p&gt;Hi everyone,&lt;/p&gt;
&lt;p&gt;Here is a brief summary of what I’ve been doing for the first six days of my GSoC.&lt;/p&gt;
&lt;p&gt;Since there was already some work done on computational group theory in the module sympy.combinatorics, mainly in the files perm_groups.py and permutations.py, I got to know what the code is doing and made some minor improvements (improved docstrings, removed some duplicate functionality.) In particular, the implementation of the Schreier-Sims algorithm took most of my time, and I still have to analyze its complexity (it seems a bit slow). Anyway, I found the following &lt;a href=&quot;http://www.m8j.net/%28All%29Schreier%20Sims%20Algorithm&quot; target=&quot;_blank&quot;&gt;files&lt;/a&gt; particularly useful in making my way through the code.&lt;/p&gt;
&lt;p&gt;Since there were already a lot of things implemented, this interfered with the &lt;a href=&quot;http://google-melange.appspot.com/gsoc/proposal/review/google/gsoc2012/amakelov/1&quot; target=&quot;_blank&quot;&gt;schedule&lt;/a&gt; I had set for myself on my GSoC application. So after a quick change of plans, I decided to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implement constructors for four of the basic types of groups (symmetric, cyclic, dihedral, alternating) in order to be able to use groups of fairly large size for testing and comparing the complexity of the different algorithms for computation with groups&lt;/li&gt;
&lt;li&gt;Evaluate the more basic functionality already implemented (read: all but Schreier-Sims), in particular at orbits and stabilizers. It turned out that the implementations currently in sympy are slower than the ones suggested in [1], so I rewrote these and added implementations for the Schreier vector and some other orbit-related computations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the near future (today and tomorrow), I’ll implement a procedure for taking direct products of several groups (so that I can have even more examples of groups for testing and playing around) and Monte Carlo testing if a given permutation group is large (the symmetric or the alternating group). You’re welcome to take a look at my branch labeled &lt;a href=&quot;https://github.com/amakelov/sympy/tree/week1&quot; target=&quot;_blank&quot;&gt;week1&lt;/a&gt;, and I’ll do a pull request in the next couple of days.&lt;/p&gt;
&lt;p&gt;In the more distant future, I’ll dive into Schreier-Sims and take a look at the implementation offered in [1] (and maybe [2]?) in order to try to compare it with the existing one. Also, the randomized version of Schreier-Sims (the output of which can then be quickly tested with the deterministic version, [1] says) is promised to be significantly faster so it is a must-have. And I feel that there is some more optimization that can be done in permutations.py and perm_groups.py.&lt;/p&gt;
&lt;p&gt;And about the changes in the interface I wanted to implement – my main pain right now is that singleton cycles have to be included in the cyclic form of a permutation. But the cyclic form itself is not heavily used in the rest of the functionality, so it is not such a pressing issue. Also, I feel that possible changes in the interface need some more careful thinking on my part… Do we want our group action to be on the left or on the right (GAP and MAGMA do it on the right, as I gather from [1])? Do we want to label the underlying set for a permutation by 0,1,…, n-1 or 1,2,…,n?…&lt;/p&gt;
&lt;p&gt;Anyway, I’m really enthusiastic about my project and hope that we’ll have some nice and reasonably fast algorithms in CGT by the end of the summer!&lt;/p&gt;
&lt;p&gt;[1] Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O’Brien, “Handbook of computational group theory”, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp;amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-58488-372-3&lt;/p&gt;
&lt;p&gt;[2] Permutation Group Algorithms, Ákos Seress, Cambridge University Press&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/9/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/9/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=9&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 26 May 2012 13:10:22 +0000</pubDate>
</item>
<item>
	<title>Bharath M R: Adaptive sampling for 2D plots</title>
	<guid isPermaLink="true">http://catchmrbharath.github.com/programming/2012/05/26/adaptive-sampling-for-2d-plots</guid>
	<link>http://catchmrbharath.github.com/programming/2012/05/26/adaptive-sampling-for-2d-plots</link>
	<description>&lt;p&gt;This was my first week of GSoC and I spent time on experimenting with adaptive sampling. The major idea explored were what constitutes a condition for which we need not sample more to obtain an accurate plot. I started with the idea of the area of the triangle formed by the three consecutive points to be less than a tolerance value. This worked nicely but did oversampling unnecessarily. The problem with it was the area of the triangle was dependent on the distance between the points which made the condition dependent on the lengths and hence oversampled even though the line formed by the three points was almost collinear. So the obvious next idea was to check the angle formed by the three points and see whether it forms an angle near to 180 degree. There were three versions of the above algorithm implemented, out of which one was the iterative version of a recursive solution. The iterative version is &lt;a href=&quot;https://github.com/Krastanov/sympy/pull/5&quot;&gt;here&lt;/a&gt;. Considering Stefan Krastanov’s suggestion, I implemented a recursive solution which samples 5 additional points between two points instead of a single point. The idea was to use numpy’s quick evaluations of an array and also arrive at the straight line condition faster. Also, this reuses most of the code written before. The code for the following can be found &lt;a href=&quot;https://github.com/catchmrbharath/sympy/tree/adaptnew&quot;&gt;here&lt;/a&gt;. The snippet of the code is as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_adapt_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorized_lambdify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list_segments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;list_segments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_sampling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_sampling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_sampling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]):&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;list_segments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;#sample the last segment&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;list_segments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;yvalues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;segments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_segments&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vectorA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vectorB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;costheta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costheta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The major problem with the above approach is the way that the rightmost point / segment is handled. The rightmost segment does not have another right segment to decide whether it forms a 180 degree angle or not. Hence it is assumed straight if the previous segment and the present segment forms a straight line. Most of the time this fails to sample further for the end segment thought it should have sampled. The problem can be seen in an plot of &lt;span&gt; $y = sin(x^{2})$ &lt;/span&gt;&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/26052012/plot.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;The last method used is symmetric and gives better results, but it is quite ugly. The branch is &lt;a href=&quot;https://github.com/catchmrbharath/sympy/tree/complexplot&quot;&gt;here&lt;/a&gt;.(EDIT: changed the link). It uses some amount of random sampling to avoid aliased results. The plot of &lt;span&gt; $y = sin(x^{2})$ &lt;/span&gt; renders very accurately. Feel free to experiment with it and if there is a better method, you can comment below :).&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/26052012/betterplot.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;I think I will get an non - ugly code ready by the tomorrow and wait for Stefan’s branch to get merged before submitting this method as pull request. This week has been lots of experimentation. I think I will spend the next week getting a basic version of Interval Arithmetic ready using numpy.&lt;/p&gt;</description>
	<pubDate>Sat, 26 May 2012 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Angadh Nanjangud: GSoC 2012 Post 2</title>
	<guid isPermaLink="true">http://angadhsympy.wordpress.com/2012/05/26/gsoc-2012-post-2-18/</guid>
	<link>http://angadhsympy.wordpress.com/2012/05/26/gsoc-2012-post-2-18/</link>
	<description>&lt;p&gt;As I’m nearing the end of my quarter, I haven’t been able to afford myself the time to make any tangible contributions yet. I had expected this to happen as mentioned in my proposal. Nonetheless, I have spent more time delving into the ‘mechanics’ of sympy.physics.mechanics and improve my understanding of python in the little free time that I do get.&lt;/p&gt;
&lt;p&gt;That is not to say that not much has been thought up as to what must be addressed first and how it should be addressed. After conversations with Gilbert, Luke, and Jason, I have a clearer idea about how to go about implementing the first helper function. This is going to be the momentum function. We debated whether there should be separate functions for linear and angular momenta. More importantly, we addressed an issue for the end user; should these momenta functions be implemented as stand alone functions or as methods. It was concluded that the easiest and ‘cleanest’ implementation with regards to an end user would be a method. With that, the user wouldn’t have to concern himself with entering the arguments. At the same time, it would also not compromise readability for a dynamicist. I will be posting a message in the groups sometime before the end of the long weekend about this as I can definitely use more input. I think this writing this function will be great because I feel like I get the theory of classes pretty well but this will be the real test of that. I’m very excited by this prospect.&lt;/p&gt;
&lt;p&gt;I think that is all for now. I’m working a little overtime with school to get my duties as a TA finished so that I can dedicate begin working on the Summer of Code by my proposed start date of June 5th. See you next week!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/55/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/55/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=55&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 26 May 2012 04:44:11 +0000</pubDate>
</item>
<item>
	<title>Guru Devanla: Week 1 Report : Initial set of routines for Density Operators</title>
	<guid isPermaLink="false">http://rhoforsympy.wordpress.com/?p=76</guid>
	<link>http://rhoforsympy.wordpress.com/2012/05/25/week-1-report-initial-set-of-routines-for-density-operators/</link>
	<description>&lt;p&gt;Today I submitted a &lt;a href=&quot;https://github.com/sympy/sympy/pull/1312&quot; target=&quot;_blank&quot;&gt;pull&lt;/a&gt; request&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;What went into this weeks pull request&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The framework and routines were inherited from Brian’s github branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The  _eval_args function was added.  I went back-and-forth on deciding if we needed strong checks to make sure the states used to build density objects should be strictly &lt;strong&gt;KetBase&lt;/strong&gt; and &lt;strong&gt;Qubits&lt;/strong&gt;. But, there were scenarios where just symbols could be used for states, or even QExpr could be used. So, discarded that check.   But, this would mean Density objects could have arbitrary objects for states.  &lt;em&gt;Flip side to this is,  represent() on density objects which do not have a KetBase object does not work very well. &lt;/em&gt;For example, having ‘mul’ expressions for ‘state’ creates problems in represent functions. But, my assumption is represent function need not handle such scenarios.                                                                                                                                    Similarly, I went back and forth regarding checking for valid values for probabilities. Then, I dropped those validations as well.&lt;/li&gt;
&lt;li&gt;Added test routines for all public facing methods in density.py. Some methods from original DensityOp branch are not in this pull request. I will add them back in future requests.&lt;/li&gt;
&lt;li&gt;I also created a minor &lt;a href=&quot;https://github.com/sympy/sympy/pull/1311&quot; target=&quot;_blank&quot;&gt;pull&lt;/a&gt; request for minor printing changes that were in the original densityOp branch. This takes care of changes to the latex() in operator.py. I will add checks for density operator after this pull request is accepted.&lt;/li&gt;
&lt;li&gt;Added test routines for changes related to density in qapply.py. These checks will have to be extended after I make density operators work well with Qubits.&lt;/li&gt;
&lt;li&gt;Added doc strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Where I spent a my time while trying to accomplish this weeks tasks:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understanding the process-function call flow of _eval_args,   _print methods.&lt;/li&gt;
&lt;li&gt;Getting familiarized with operator.py , represent(), and qapply().&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(The following point is also a question for my next task)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The way  &lt;em&gt;_qsympify_sequence(seq)&lt;/em&gt; method is implemented, it treats any Qubit() passed as state to Density as a sequence object. Therefore, the Qubit object is lost and a tuple is replaced instead of the Qubit object. This needs to a fixed or a work around decided so that Qubits can be provided as states to Density objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;My next steps ( plan for next week’s pull request):&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discuss with the mentor team and see how to approach the problem with Qubits being converted to sequence. ( in next 2 days )&lt;/li&gt;
&lt;li&gt;Add remaining functionality into density.py ( entropy, reduced trace operations ) ( should be completed by middle of next week )&lt;/li&gt;
&lt;li&gt;Blog about the implementation details of changes to tensorproduct.py with respect to what we would need for density operators.  I hope to also have this part implemented by end of next week.&lt;/li&gt;
&lt;li&gt;Address issues with the current pull request. I plan to have this as the top priority task and work on this every time it comes back to me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Misc:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I gave a lightening talk at Google Chicago office this week regarding my GSoC 2012 project and there was lot of interest in Sympy. Particularly, folks were very excited to know about  &lt;a href=&quot;http://live.sympy.org&quot; target=&quot;_blank&quot;&gt;Sympy Live&lt;/a&gt; website which I spoke about in the presentation.&lt;/p&gt;
&lt;p&gt;Also, met one of our Sympy contributors &lt;a href=&quot;https://github.com/mrocklin&quot;&gt;Matthew Rocklin&lt;/a&gt;  at the meeting. Nice to meet someone you know only as an email-id, in person!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/76/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/76/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=76&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 25 May 2012 19:06:15 +0000</pubDate>
</item>
<item>
	<title>Sergiu Ivanov: Smelling the GSoC Adventure</title>
	<guid isPermaLink="false">http://scolobb.wordpress.com/?p=26</guid>
	<link>http://scolobb.wordpress.com/2012/05/24/smelling-the-gsoc-adventure/</link>
	<description>&lt;p&gt;I seem to be finally able to afford more time to work for SymPy every day, so I am hastily working through a simulacrum of a community bonding period.  The official coding period has already begun, but I have afforded for a week of delay with my own start in the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;proposal&lt;/a&gt;.  I am currently working on fixing a couple important issues with &lt;em&gt;re, im&lt;/em&gt;, and their interaction with &lt;em&gt;as_real_imag()&lt;/em&gt; functions (Pull Request &lt;a href=&quot;https://github.com/sympy/sympy/pull/1304&quot;&gt;1304&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The good news pertaining to my own project is that we seem to have settled on a name for the module which I am going to add: c&lt;em&gt;ategories&lt;/em&gt;.  I am very enthusiastic about starting my work on it; this event is going to happen within a day or two, and that’s very cool &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/26/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/26/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=26&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 24 May 2012 20:24:47 +0000</pubDate>
</item>
<item>
	<title>Guru Devanla: Plan for first 4 weeks : Post 1</title>
	<guid isPermaLink="false">http://rhoforsympy.wordpress.com/?p=16</guid>
	<link>http://rhoforsympy.wordpress.com/2012/05/15/plan-for-first-4-weeks-post-1/</link>
	<description>&lt;p&gt;As part of first set of steps (first 4 weeks) in the project plan, my initial proposal was to achieve the following specific goals:&lt;br /&gt;
(These goals are listed also with respect using the current implementation of density operators at this branch: &lt;a href=&quot;https://github.com/ellisonbg/sympy/commit/d43f10bd899b5e4dcd75876a1b6a9e82333e0f57&quot; target=&quot;_blank&quot; title=&quot;densityop&quot;&gt;densityOp branch at ellisongb@github&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start with density.py&lt;br /&gt;
Make it work with different bases by aligning the current implementation with representation logic.&lt;/li&gt;
&lt;li&gt;Come up with an proposal/implementation for density matrices specific to qubits. ( Do we need a specific version for qubits? )&lt;/li&gt;
&lt;li&gt;Update TensorProduct.py for multi-qubit states.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above tasks currently has been planned for the first 4 weeks of the project. For each of the above tasks, I will provide 2 sections in this blog and subsequent blog posts. In the first section, I describe my understanding of current implementation and in the second section I list out what is needed (kind of list out requirements, and then propose the implementation idea).&lt;/p&gt;
&lt;h3&gt;What is currently available in Density.py? ( from the above git branch)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Currently, density.py has the basic function prototypes. &lt;br /&gt;
The current density object accepts any kind of input. That is, there is no restriction on objects to be strictly of type ‘State’ or ‘Ket’.&lt;/li&gt;
&lt;li&gt;Also, when we use Qubit’s as argument to the density object, what gets printed is not accurate. For example,
&lt;/li&gt;&lt;li&gt;
&lt;img src=&quot;https://rhoforsympy.files.wordpress.com/2012/05/screenshot-2.png?w=500&quot; alt=&quot;Example of output for Density&quot; /&gt;&lt;p&gt;&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;The doit() method and represent() method do not execute successfully.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Next steps for density.py&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt; Add eval() function &lt;br /&gt;
     Validate the arguments passed to the constructor. Only instances of type ‘State’ will be accepted.&lt;br /&gt; If any QExpr is passed as argument, then QExpr will have to be simplified and checked if final QExpr object is an instance of type ‘State’. Alternatively, we could just check if passed states are of type ‘Ket’. This step takes care of creation of density matrices.&lt;/li&gt;
&lt;li&gt; Update doit() : The current implementation currently errors out. We will work on this to fix it.&lt;/li&gt;
&lt;li&gt; Update _represent() : The current implementation errors out. Also, the current implementation expands the density operator (thus producing the matrix) before the original represent() method is invoked. The approach, we plan to take is call the represent method for each of the states in the density op.&lt;br /&gt;
Say, Density([ ket1,p1 ] , [ket2, p2], [ket3,p3] ), then would way do change of basis using represent would be to do the following:&lt;br /&gt;
(the following code, is just pseudo-code) &lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;_represent(self, **options)
  states = []
  for each state in density matrix
   states.append(represent(state, **options)
  return Density(states, probabilities )
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;(My understanding is the probabilities of each state should not get affected during change of basis. Is this correct?)&lt;/i&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt; Add test cases. Of course, this step will be step 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
My next blog post will have similar structure of discussion for the next 2  topics. My hope is by end of this week, these details are spec’d out enough so that I can exactly say what I will deliver at end of each of the first 4 weeks.&lt;/p&gt;
&lt;p&gt;
P.S: I plan to provide detailed plan for remaining tasks as we approach the specific week for corresponding task.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/16/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/16/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=16&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 15 May 2012 23:42:39 +0000</pubDate>
</item>
<item>
	<title>Bharath M R: Region Plots with Interval Arithmetic</title>
	<guid isPermaLink="true">http://catchmrbharath.github.com/programming/2012/05/14/region-plots-with-interval-arithmetic</guid>
	<link>http://catchmrbharath.github.com/programming/2012/05/14/region-plots-with-interval-arithmetic</link>
	<description>&lt;p&gt;My GSoC project is to provide support for implicit plotting using interval arithmetic. As mpmath already has a very good interval arithmetic library, I wanted to try out how efficient the algorithm is going to be using the mpmath interval arithmetic library. I wanted to get an idea on the time required for plotting and also wanted to decide whether to write my own interval arithmetic library or use the existing mpmath library and add additional things to it. I have a basic implementation which supports only the mpmath interval arithmetic functions. The results look promising and I am guessing a separate implementation for plotting will be faster and I will be able to add features more easily.I have an image of &lt;span&gt; $y &amp;gt; 1/x$ &lt;/span&gt; with the interval edges below. The image below was plotted so with a resolution of 1024x1024. It is possible to see how the intervals are subdivided more and more when it reaches the edge of a region.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/14052012/figwithedge.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;It took 1.57 seconds to render this image which is decently fast. I observed that if the independent regions are less and large, then the time take for the plot to be rendered is high. I tried &lt;span&gt; $cos(y) &amp;gt; sin(x)$ &lt;/span&gt; which took about 5.3 seconds to render.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/14052012/cosysinx.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;I wanted to try what the maximum time it takes to render something. So I tried plotting &lt;span&gt; $sin^{2}x+cos^{2}x$ &lt;/span&gt;less than 1. As the arithmetic is done on intervals, it is not possible for the algorithm to decide that the expression is not true throughout the interval. So it goes on subdividing more and more, until it reaches a dimension of 1 pixel. For a resolution of 512X512, it took 120 seconds to render. If there are a lot of evaluations in the expression, then it might increase, but we should be expecting times around 120 seconds.&lt;/p&gt;

&lt;p&gt;Another problem that I have to address is rasterization. I am really not getting any ideas on how to avoid rasterization. One way is to handle the zoom event in matplotlib and change the data to match the zoom. But for complicated graphs, revaluating might take a lot of time, which is bad.&lt;/p&gt;
&lt;img width=&quot;600&quot; src=&quot;http://catchmrbharath.github.com/images/14052012/figraster.png&quot; height=&quot;400&quot; /&gt;
&lt;p&gt;We can see that if there is a way of interpolating over the rectangular edges, then we will have a plot without rasterization. I haven’t got any foolproof idea to implement this interpolation as there will be many independent regions. So if you have any idea, then please comment or mail me :). The code for plotting can be found &lt;a href=&quot;https://gist.github.com/2695079&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 14 May 2012 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Stefan Krastanov: Differential Geometry in SymPy – my GSoC project</title>
	<guid isPermaLink="false">http://krastanov.wordpress.com/?p=298</guid>
	<link>http://krastanov.wordpress.com/2012/05/14/differential-geometry-in-sympy-my-gsoc-project/</link>
	<description>&lt;p&gt;The next few moths will be interesting. I got accepted in the Google Summer of Code program and I am already starting to worry (irrationally) about the project and the schedule. I will be working on a differential geometry module for SymPy (and time permitting, some more advanced tensor algebra).&lt;/p&gt;
&lt;p&gt;Basically, I want to create the boilerplate that will permit defining some scalar/vector/form/tensor field in an arbitrary coordinate system, then doing some coordinate-system-independent operations on the field (with hopefully coordinate-system-independent simplifications) and, finally, getting the equations describing the final result in another arbitrary coordinate system.&lt;/p&gt;
&lt;p&gt;With this in mind, the details about the project can be seen on &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Stefan-Krastanov%3A-Vector-Analysis&quot; target=&quot;_blank&quot;&gt;the proposal page&lt;/a&gt;. Most of it (all except the tensor algebra that I may work on at the end) is based on the work of &lt;a href=&quot;http://groups.csail.mit.edu/mac/users/gjs/&quot; target=&quot;_blank&quot;&gt;Gerald Jay Sussman&lt;/a&gt; and &lt;a href=&quot;http://groups.csail.mit.edu/mac/users/wisdom/&quot; target=&quot;_blank&quot;&gt;Jack Wisdom&lt;/a&gt; on &lt;a href=&quot;http://dspace.mit.edu/handle/1721.1/30520&quot; target=&quot;_blank&quot;&gt;“Functional Differential Geometry”&lt;/a&gt;. I suppose that this project started as a part of their superb book &lt;a href=&quot;http://mitpress.mit.edu/sicm/&quot; target=&quot;_blank&quot;&gt;“Structure and Interpretation of Classical Mechanics”&lt;/a&gt; (I really have to read this book if I am to call myself a physicist) and the accompanying &lt;a href=&quot;http://groups.csail.mit.edu/mac/users/gjs/6946/linux-install.htm&quot; target=&quot;_blank&quot;&gt;“Scheme Mechanics”&lt;/a&gt; software. By the way, reading the Scheme code is a wonderful experience. This language is beautiful! The authors are also actively updating their code and a newer, more detailed paper on the project can be found &lt;a href=&quot;http://krastanov.wordpress.com/category/sympy-2/feed/groups.csail.mit.edu/mac/users/gjs/6946/calculus-indexed.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most of my work will be reading the Scheme code and tracing corner cases in SymPy. My workflow will probably consist of implementing some notion from “Functional Differential Geometry” in SymPy and only when I get to semi-working state comparing with the original Scheme code for ideas, then repeating the process on the next part of the system. This way I will be less susceptible to implementing Scheme idioms in Python.&lt;/p&gt;
&lt;p&gt;Writing the final version of each function/class of my module will probably take very little time. Most of the time will be dedicated to removing/studying corner cases and assumptions in SymPy’s codebase (more about these later) and experimenting with different approaches for the module structure (and of course reading/deciphering the work of Wisdom and Sussman).&lt;/p&gt;
&lt;p&gt;Finally, I will speak a bit about the aforementioned corner cases and assumptions in the SymPy’s codebase. There are the obvious things like having to derive from Expr if you want to be able to have your class as a part of a symbolic expression. Then there is the fact that Basic (and its subclasses like Expr) do some magic with the arguments for the constructor (saved in &lt;code&gt;expr._args&lt;/code&gt;) in order to automagically have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rebuildable expression with &lt;code&gt;eval(srepr(expr))==expr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rebuildable expression with &lt;code&gt;type(expr)(*expr._args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;some magic with the &lt;code&gt;_hashable_content()&lt;/code&gt; method in order to (presumably) have efficient cashing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These details make it a bit unclear how to implement things like &lt;code&gt;CoordinateSystem&lt;/code&gt; objects which learn during their existence how to transform to other coordinate systems (thus their implementation in code is a mutable object) but at the same time they are the same mathematical object. Anyway, from what I have seen just having a persistent hash and a correct &lt;code&gt;srepr&lt;/code&gt; should be enough. I wonder how tabu it is to change your &lt;code&gt;_args&lt;/code&gt; after the creation of the class. Why I need to worry about caching (thus the hash) and rebuilding (thus the &lt;code&gt;srepr&lt;/code&gt;) is still unclear to me, but I will dedicate whole posts to them later on when I have the explanation. The caching is presumably for performance. It is the need for all that fancy magic that does not permit duck typing in SymPy. If you do not subclass Basic, you can not be part of SymPy, no matter the interfaces that you support.&lt;/p&gt;
&lt;p&gt;Then there is the question of using the container subclasses of &lt;code&gt;Expr&lt;/code&gt;. Things like &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Mul&lt;/code&gt;, which I would have expected to be just containers. However, they are not. They also do some partial canonicalization, but at the moment their exact role (and more importantly, what they &lt;strong&gt;don’t&lt;/strong&gt; do) is very unclear to me. There was much discussion about AST trees and canonicalization on the mailing list, if you are interested, and how exactly to separate the different duties that &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Mul&lt;/code&gt; have, but as this is enough work for another GSoC I decided to just stop thinking about that and use them in the simples way possible: just as containers.&lt;/p&gt;
&lt;p&gt;There is one drawback to this approach. The sum of two vector fields for example is still a vector field and the object that represents the sum should have all the methods of the object representing one of the fields, however &lt;code&gt;Add&lt;/code&gt; does not have the same methods as &lt;code&gt;VectorField&lt;/code&gt;. The solution that was already used in the matrix module was to create classes like &lt;code&gt;MatrixAdd&lt;/code&gt;, and the same was done in the quantum physics module. However, I fear such proliferation of classes for it becomes unsustainable as the number of different modules grows. What happens when I want to combine two objects from the disjoint modules? This is why I simply use &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Mul&lt;/code&gt; and implement helper functions that are not part of the class. These helper functions will ideally be merged in some future canonicalizer that comes about from separating the container and canonicalization parts of &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Mul&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One last remark is that I will probably have to work on sympify and the sympification of matrices, as I will use coordinate tuples (column vectors) quite often. Then there is the distinction between Application and Function and all the magic with metaclasses that seems very hard to justify. But probably I will write entire posts in which I try to understand why the metaclasses in the core are necessary.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/krastanov.wordpress.com/298/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/krastanov.wordpress.com/298/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=krastanov.wordpress.com&amp;amp;blog=15251174&amp;amp;post=298&amp;amp;subd=krastanov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 13 May 2012 23:15:15 +0000</pubDate>
</item>
<item>
	<title>Angadh Nanjangud: GSoC 2012 Post 1</title>
	<guid isPermaLink="false">http://angadhsympy.wordpress.com/?p=7</guid>
	<link>http://angadhsympy.wordpress.com/2012/05/12/gsoc-2012-post-1/</link>
	<description>&lt;p&gt;A first (and cursory) blog post.&lt;/p&gt;
&lt;p&gt;Having been given the opportunity to code for SymPy this year is extremely flattering so I would like to thank everyone associated with SymPy for the same.&lt;/p&gt;
&lt;p&gt;The last month and a half has been extremely hectic yet, it has been perversely gratifying. School and GSoC preparations have really helped me maximize my productivity by giving me multiple things to focus on. Every day is proving to be enlightening and challenging so far. I should be sufficiently armed by my intended start date. Also, here is a &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud%3A-sympy.physics.mechanics&quot;&gt;link&lt;/a&gt; to my proposal. Special mention to the folks (you know who you are) for guiding me through everything.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/angadhsympy.wordpress.com/7/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/angadhsympy.wordpress.com/7/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=angadhsympy.wordpress.com&amp;amp;blog=35620584&amp;amp;post=7&amp;amp;subd=angadhsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 12 May 2012 07:16:06 +0000</pubDate>
</item>
<item>
	<title>Aleksandar Makelov: GSoC 2012: Computational Group Theory</title>
	<guid isPermaLink="false">http://amakelov.wordpress.com/?p=4</guid>
	<link>http://amakelov.wordpress.com/2012/05/11/gsoc-2012-computational-group-theory/</link>
	<description>&lt;p&gt;And so it happened that by some weird accident I was accepted into GSoC 2012 to implement CGT – and Group Theory is a part of mathematics that I particularly enjoy. Until a few days ago I was pretty busy working for my exams, but in the next few weeks I should be able to start preparing for my project.&lt;/p&gt;
&lt;p&gt;I hope that the timeline I’ve set to myself is not too impossible to do, and that I’ll be able to implement everything I promised in it.&lt;/p&gt;
&lt;p&gt;Finally, I’d like to thank all the people that make sympy possible, and all the people that liked my application, and especially my mentor – David Joyner, and my co-mentor – Aaron Meurer, for their enthusiasm!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/4/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/4/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=4&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 11 May 2012 00:52:19 +0000</pubDate>
</item>
<item>
	<title>Aleksandar Makelov: Hello world!</title>
	<guid isPermaLink="false">http://amakelov.wordpress.com/?p=1</guid>
	<link>http://amakelov.wordpress.com/2012/05/11/hello-world/</link>
	<description>&lt;p&gt;Welcome to &lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress.com&lt;/a&gt;! This is your very first post. Click the Edit link to modify or delete it, or &lt;a href=&quot;http://amakelov.wordpress.com/wp-admin/post-new.php&quot; title=&quot;Direct link to Add New in the Admin Dashboard&quot;&gt;start a new post&lt;/a&gt;. If you like, use this post to tell readers why you started this blog and what you plan to do with it.&lt;/p&gt;
&lt;p&gt;Happy blogging!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/amakelov.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/amakelov.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=amakelov.wordpress.com&amp;amp;blog=35896871&amp;amp;post=1&amp;amp;subd=amakelov&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 11 May 2012 00:12:55 +0000</pubDate>
</item>
<item>
	<title>Bharath M R: GSoC 2012 Sympy</title>
	<guid isPermaLink="true">http://catchmrbharath.github.com/programming/2012/05/08/gsoc-2012-sympy</guid>
	<link>http://catchmrbharath.github.com/programming/2012/05/08/gsoc-2012-sympy</link>
	<description>&lt;p&gt;I was selected by &lt;a href=&quot;http://sympy.org&quot;&gt;SymPy&lt;/a&gt; to work on their plotting module as part of GSoC2012. So I will be spending the next three months working on a plotting module to plot implicit functions. Implicit functions are difficult to plot by simple meshing. Though we might get a good result with simple meshing for most of the functions, it can be quite erroneous for some of the functions. So I will be using interval arithmetic to provide a way to plot implicit functions. My GSoC application can be found &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Bharath-M-R%3A-Plotting-Module&quot;&gt;here&lt;/a&gt;. I will be atlast making a lasting contribution to an open - source software.&lt;/p&gt;

&lt;p&gt;There are a lot of posts on how contributing to a open source software is the best way to sharpen your programming skills. But lot of people are too afraid to approach an organization and start contributing. There is an impending fear that people working on these projects are very stud(intelligent) people and they might get annoyed at your ignorance. Well, let me tell you this, people in an open source project are really nice. They don’t get annoyed very easily and they are ready to help you with everything. They correct all your mistakes with lots of patience and help you with improving your code. I think getting your code reviewed is the best way to improve your programming skills after you have reached a certain stage.&lt;/p&gt;

&lt;p&gt;I was pretty much amazed with SymPy’s code base. Its so neat and clean that any newcomer can just look at the docstrings and can deduce the functionality of every function. Though my experience is limited, I haven’t seen a better codebase than SymPy’s. I am still looking at their codebase and the amount of modularity continues to amaze me. So if anybody is interested in contributing to a python open source project, then consider contributing to &lt;a href=&quot;http://sympy.org&quot;&gt;SymPy&lt;/a&gt;, for you will learn a lot on how a python project has to be structured.&lt;/p&gt;

&lt;p&gt;I will be using this blog to update about my GSoC project and hopefully I will learn a lot during this period.&lt;/p&gt;</description>
	<pubDate>Tue, 08 May 2012 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Official SymPy blog: GSoC 2012 Results Announced</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2520472460430880330.post-1283583601392089559</guid>
	<link>http://sympy.blogspot.com/2012/04/google-has-announced-theresults-for.html</link>
	<description>Google has announced the results for Google Summer of Code.  I am proud to announce that we got six slots from Google.  The following projects have been accepted: &lt;br /&gt;&lt;br /&gt;(Project, Student, Mentor)&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot;&gt;Category Theory Module&lt;/a&gt;, Sergiu Ivanov, Tom Bachmann&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Guru-Devanla:-Density-Operators-for-Quantum-Module&quot;&gt;Density Operators for Quantum Module in sympy.physics.quantum&lt;/a&gt;, Guru Devanla, Brian Granger (co-mentor Sean Vig)&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Angadh-Nanjangud:-sympy.physics.mechanics&quot;&gt;Enhancements to sympy.physics.mechanics&lt;/a&gt;, Angadh Nanjangud, Gilbert Gede&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Aleksandar-Makelov:-Group-theory&quot;&gt;Group Theory&lt;/a&gt;, Aleksandar Makelov, David Joyner (co-mentor Aaron Meurer)&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Bharath-M-R:-Plotting-Module&quot;&gt;Implicit Plotting Module&lt;/a&gt;, Bharath M R, Aaron Meurer&lt;br /&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Stefan-Krastanov:-Vector-Analysis&quot;&gt;Vector Analysis&lt;/a&gt;, Stefan Krastanov, Matthew Rocklin&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Join me in congratulating these students on their acceptance. &lt;br /&gt;&lt;br /&gt;In case you don't know, Google Summer of Code is a program where Google pays students to write code for open source projects.  SymPy was accepted as a mentoring organization this year.  The goal of the program is to help the students learn new skills, in particular in our case: &lt;br /&gt;&lt;br /&gt;* contributing to opensource * working with the community * learn git, pull requests, reviews * teach them how to review other's people patches * do useful work for SymPy * have fun, and encourage the students to stay around &lt;br /&gt;&lt;br /&gt;To all the students who are accepted, you should be receiving an email from your mentor soon to discuss how you will be communicating over the summer about your project.  You should meet with your mentor about once a week during the summer to go over your progress.  You should either meet on a public channel (like IRC), or else post minutes of your meeting in some public channel, so that the whole community can see your progress too. &lt;br /&gt;&lt;br /&gt;Some of you may also be assigned a backup mentor or co-mentor.  These people will also help out in mentoring your project.  If you have two mentors and one is not available for something, or does not know the answer, you can ask your co-mentor. &lt;br /&gt;&lt;br /&gt;I would like all of us to strongly encourage students this summer to submit pull requests early and often.  This will go a long ways towards making sure that you don't end the summer with a ton of code written that never gets merged.  Students should help review pull requests by other students, so that we don't get bogged down reviewing so much code. &lt;br /&gt;&lt;br /&gt;We also require that all students keep a weekly blog of their work over the summer.  If you don't already have a blog, you should start one.  I recommend using either Wordpress or Blogger (I personally use and prefer Wordpress because it has a cleaner interface and lets you do $latex math$, but I recommend you test out both).  You can also use some other service too if you like.  The only requirement is that it has an RSS feed, so we can put it on planet.sympy.org.  Once you have set up your blog, send me the url so I can add it there. &lt;br /&gt;&lt;br /&gt;Starting on the week of May 21 (when the GSoC period officially begins), We will expect you to have at least one blog post a week, describing your progress for that week, or something interesting about your project.  If you don't have a post by the beginning of the day on Saturday, your mentor or I will email you to remind you about it. &lt;br /&gt;&lt;br /&gt;I invite other mentors who have blogs to blog as well.  And I encourage all community members to follow the student blogs, so you can see their progress. &lt;br /&gt;&lt;br /&gt;I would like to thank all the students who applied this year and everyone who submitted a patch.  We received way more feedback this year than we ever have before.  I would also like to thank all the mentors for helping review patches and proposals. &lt;br /&gt;&lt;br /&gt;This summer is looking to be another very productive one for SymPy, and I look forward to it!&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/2520472460430880330-1283583601392089559?l=sympy.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 27 Apr 2012 21:52:26 +0000</pubDate>
	<author>noreply@blogger.com (Aaron Meurer)</author>
</item>
<item>
	<title>Sergiu Ivanov: GSoC 2012 with SymPy in the Nearest Future</title>
	<guid isPermaLink="true">http://scolobb.wordpress.com/2012/04/27/gsoc-2012-with-sympy-in-the-nearest-future-9/</guid>
	<link>http://scolobb.wordpress.com/2012/04/27/gsoc-2012-with-sympy-in-the-nearest-future-9/</link>
	<description>&lt;p&gt;So, I have been accepted as a &lt;a href=&quot;http://www.google-melange.com/gsoc/homepage/google/gsoc2012&quot; target=&quot;_blank&quot;&gt;Google Summer of Code&lt;/a&gt; student to &lt;a href=&quot;http://sympy.org/en/index.html&quot; target=&quot;_blank&quot;&gt;SymPy&lt;/a&gt;.  The coolest part is that I have been accepted with a very experimental project concerned with category theory (the proposal is &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2012-Application-Sergiu-Ivanov:-Category-Theory-Module&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;), for which I am very thankfull to all mentors of SymPy and, in particular, to the project leader &lt;a href=&quot;http://asmeurersympy.wordpress.com/&quot; target=&quot;_blank&quot;&gt;Aaron Meurer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am still busy with my university affairs now, so I’ll only be doing minor fixes while my the semester hasn’t finished at the end of May.  However, I plan to become more active in about a week, when a lot of deadlines which I have now will have expired.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=21&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 27 Apr 2012 18:30:08 +0000</pubDate>
</item>
<item>
	<title>Sergiu Ivanov: Hello world!</title>
	<guid isPermaLink="false">http://scolobb.wordpress.com/?p=1</guid>
	<link>http://scolobb.wordpress.com/2012/04/27/hello-world/</link>
	<description>&lt;p&gt;Welcome to &lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress.com&lt;/a&gt;! This is your very first post. Click the Edit link to modify or delete it, or &lt;a href=&quot;http://scolobb.wordpress.com/wp-admin/post-new.php&quot; title=&quot;Direct link to Add New in the Admin Dashboard&quot;&gt;start a new post&lt;/a&gt;. If you like, use this post to tell readers why you started this blog and what you plan to do with it.&lt;/p&gt;
&lt;p&gt;Happy blogging!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/scolobb.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/scolobb.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=scolobb.wordpress.com&amp;amp;blog=35433045&amp;amp;post=1&amp;amp;subd=scolobb&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 27 Apr 2012 17:47:24 +0000</pubDate>
</item>
<item>
	<title>Guru Devanla: Selected for GSOC 2012</title>
	<guid isPermaLink="true">http://rhoforsympy.wordpress.com/2012/04/24/selected-for-gsoc-2012/</guid>
	<link>http://rhoforsympy.wordpress.com/2012/04/24/selected-for-gsoc-2012/</link>
	<description>&lt;p&gt;It feels great to be one of the participants chosen to participate in this year’s GSOC.  This blog will continue to have updates regarding my progress through the summer.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/14/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/14/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=14&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 24 Apr 2012 22:18:14 +0000</pubDate>
</item>
<item>
	<title>Fabian Pedregosa: line-by-line memory usage of a Python program</title>
	<guid isPermaLink="false">http://fseoane.net/blog/?p=1164</guid>
	<link>http://fseoane.net/blog/2012/line-by-line-report-of-memory-usage/</link>
	<description>&lt;p&gt;My newest project is a Python library for monitoring memory consumption of arbitrary process, and one of its most useful features is the line-by-line analysis of memory usage for Python code.&lt;/p&gt;
&lt;p&gt;I wrote a basic prototype six months ago after being surprised by the lack of related tools. I wanted to  &lt;a href=&quot;http://fseoane.net/blog/2011/qr_multiply-function-in-scipy-linalg/&quot;&gt;plot memory consumption&lt;/a&gt; of a couple of Python functions but did not find a python module to do the job. I came to the conclusion that there is no standard way to get the memory usage of the Python interpreter from within Python, so I resorted to reading for from &lt;code&gt;/proc/$PID/statm&lt;/code&gt;. From there on I realized that one the fetching of memory is done, making a line-by-line report wouldn’t be hard. &lt;/p&gt;
&lt;p&gt;Back to today. I’ve been using the line-by-line memory monitoring to diagnose poor memory management (hidden temporaries, unused allocation, etc.) for some time. It seems to work on two different computers, so full of confidence as I am, I’ll write a blog post about it …&lt;/p&gt;
&lt;h2&gt;How to use it?&lt;/h2&gt;
&lt;p&gt;The easiest way to get it is to install from the Python Package Index:&lt;/p&gt;
&lt;div style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot; class=&quot;codecolorer-container bash default&quot;&gt;&lt;div style=&quot;&quot; class=&quot;bash codecolorer&quot;&gt;    $ easy_install &lt;span style=&quot;color: #660033;&quot;&gt;-U&lt;/span&gt; memory_profiler &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# pip install -U memory_profiler&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but other options include fetching the latests from &lt;a href=&quot;https://github.com/fabianp/memory_profiler&quot;&gt;github&lt;/a&gt; or dropping it on your current working directory or somewhere else on your PYTHONPATH since it consist of a single file.&lt;/p&gt;
&lt;p&gt;Then next step is to write some python code to profile. It can be just about any function, but for the purpose of this blog post I’ll create a function my_func() with mostly memory allocations and save it to a file named example.py:&lt;/p&gt;
&lt;div style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot; class=&quot;codecolorer-container python default&quot;&gt;&lt;div style=&quot;&quot; class=&quot;python codecolorer&quot;&gt;&lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;import&lt;/span&gt; numpy &lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;as&lt;/span&gt; np&lt;br /&gt;
&lt;br /&gt;
@&lt;span style=&quot;color: #dc143c;&quot;&gt;profile&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;def&lt;/span&gt; my_func&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;:&lt;br /&gt;
    a = np.&lt;span style=&quot;color: black;&quot;&gt;zeros&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;100&lt;/span&gt;, &lt;span style=&quot;color: #ff4500;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
    b = np.&lt;span style=&quot;color: black;&quot;&gt;zeros&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;1000&lt;/span&gt;, &lt;span style=&quot;color: #ff4500;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
    c = np.&lt;span style=&quot;color: black;&quot;&gt;zeros&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;10000&lt;/span&gt;, &lt;span style=&quot;color: #ff4500;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;return&lt;/span&gt; a, b, c&lt;br /&gt;
&lt;br /&gt;
&lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;if&lt;/span&gt; __name__ == &lt;span style=&quot;color: #483d8b;&quot;&gt;'__main__'&lt;/span&gt;:&lt;br /&gt;
    my_func&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that I’ve decorated the function with @profile. This tells the profiler to look into function my_func and gather the memory consumption for each line.&lt;/p&gt;
&lt;h2&gt;Wake up the cookie monster&lt;/h2&gt;
&lt;p&gt;To start profiling and output the result to stdout, run the script as usual and append the options “-m memory_profiler -l -v” to the python interpreter.&lt;/p&gt;
&lt;div style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot; class=&quot;codecolorer-container bash default&quot;&gt;&lt;div style=&quot;&quot; class=&quot;bash codecolorer&quot;&gt;$ python &lt;span style=&quot;color: #660033;&quot;&gt;-m&lt;/span&gt; memory_profiler &lt;span style=&quot;color: #660033;&quot;&gt;-l&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-v&lt;/span&gt; example.py&lt;br /&gt;
Line &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;#    Mem usage   Line Contents&lt;/span&gt;&lt;br /&gt;
===================================&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;3&lt;/span&gt;                &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;@&lt;/span&gt;profile&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;4&lt;/span&gt;     &lt;span style=&quot;color: #000000;&quot;&gt;13.68&lt;/span&gt; MB   def my_func&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;:&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;5&lt;/span&gt;     &lt;span style=&quot;color: #000000;&quot;&gt;13.77&lt;/span&gt; MB       a = np.zeros&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;100&lt;/span&gt;, &lt;span style=&quot;color: #000000;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;6&lt;/span&gt;     &lt;span style=&quot;color: #000000;&quot;&gt;21.40&lt;/span&gt; MB       b = np.zeros&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;1000&lt;/span&gt;, &lt;span style=&quot;color: #000000;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;7&lt;/span&gt;     &lt;span style=&quot;color: #000000;&quot;&gt;97.70&lt;/span&gt; MB       c = np.zeros&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;10000&lt;/span&gt;, &lt;span style=&quot;color: #000000;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
     &lt;span style=&quot;color: #000000;&quot;&gt;8&lt;/span&gt;     &lt;span style=&quot;color: #000000;&quot;&gt;97.70&lt;/span&gt; MB       &lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;return&lt;/span&gt; a, b, c&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;voilá! Each line is prefixed by the memory usage in MB of the Python interpreter after that line has been executed.&lt;/p&gt;</description>
	<pubDate>Tue, 24 Apr 2012 05:04:46 +0000</pubDate>
</item>
<item>
	<title>David Joyner: SymPy and the GSoC</title>
	<guid isPermaLink="false">http://wdjoyner.wordpress.com/?p=369</guid>
	<link>http://wdjoyner.wordpress.com/2012/04/23/sympy-and-the-gsoc/</link>
	<description>&lt;p&gt;Google has announced the results for Google Summer of Code.  The following projects have been accepted for &lt;a href=&quot;http://sympy.org/&quot; target=&quot;_blank&quot;&gt;SymPy&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;(Project, Student, Mentor, Link to proposal on the wiki)&lt;br /&gt;
- Category Theory Module, Sergiu Ivanov, Tom Bachmann&lt;br /&gt;
- Density Operators for Quantum Module in sympy.physics.quantum, Guru&lt;br /&gt;
Devanla, Brian Granger (co-mentor Sean Vig)&lt;br /&gt;
- Enhancements to sympy.physics.mechanics, Angadh Nanjangud, Gilbert Gede&lt;br /&gt;
- Group Theory, Aleksandar Makelov, David Joyner (Aaron Meurer co-mentor)&lt;br /&gt;
- Implicit Plotting Module, Bharath M R, Aaron Meurer&lt;br /&gt;
- Vector Analysis, Stefan Krastanov, Matthew Rocklin&lt;/p&gt;
&lt;p&gt;I will help mentor Aleksandar Makelov’s work on group theory. He is a freshman at Harvard.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/wdjoyner.wordpress.com/369/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/wdjoyner.wordpress.com/369/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=wdjoyner.wordpress.com&amp;amp;blog=3527098&amp;amp;post=369&amp;amp;subd=wdjoyner&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 23 Apr 2012 22:04:07 +0000</pubDate>
</item>
<item>
	<title>Guru Devanla: Hello GSOC Reviewers!</title>
	<guid isPermaLink="false">http://rhoforsympy.wordpress.com/?p=1</guid>
	<link>http://rhoforsympy.wordpress.com/2012/04/05/gsocintro/</link>
	<description>&lt;p&gt;Hello there!  I plan to use this blog to communicate with the Sympy community regarding the progress I make on the project. I plan to update this blog atleast on a weekly basis, and sometime more frequently if I find something interesting and important to share!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/rhoforsympy.wordpress.com/1/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/rhoforsympy.wordpress.com/1/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=rhoforsympy.wordpress.com&amp;amp;blog=34650270&amp;amp;post=1&amp;amp;subd=rhoforsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 05 Apr 2012 19:28:27 +0000</pubDate>
</item>
<item>
	<title>Matthew Rocklin: Simplifying Sets</title>
	<guid isPermaLink="false">http://sympystats.wordpress.com/?p=257</guid>
	<link>http://sympystats.wordpress.com/2012/03/30/simplifying-sets/</link>
	<description>&lt;p&gt;SymPy’s sets module is a pleasure to work on. The math is approachable well structured. There are basic sets (Intervals, FiniteSets) compound sets (Unions, Intersections, Cartesian Products) and operations (contains, complement, measure, subset). Because the problem is easy to understand and intrinsically simple, sets is a great project to practice coding. Can we write code that is as simple as the problem we’re solving?&lt;/p&gt;
&lt;p&gt;Historically I have been bad at this. I am guilty of writing needlessly complex code. A friend recently sent me &lt;a href=&quot;http://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;a talk by Rich Hickey&lt;/a&gt;, the creator of &lt;a href=&quot;http://en.wikipedia.org/wiki/Clojure&quot;&gt;Clojure&lt;/a&gt;, about simplicity versus ease. I decided to try to make the SymPy.Sets code simpler as an educational project. &lt;/p&gt;
&lt;p&gt;The current issue with sets is that many classes contain code to interact with every other type of class. I.e. we have code that looks like this:&lt;/p&gt;
&lt;pre&gt;def operation(self, other):
    if other.is_FiniteSet:
        ...
    if other.is_Interval:
        ...
    if other.is_ProductSet:
        ...
&lt;/pre&gt;
&lt;p&gt;This is because the rules to, say join the FiniteSet &lt;code&gt;{1,2,3,4}&lt;/code&gt; with the Interval &lt;code&gt;[2, 3)&lt;/code&gt; can be complex. The sets module handles this all marvelously well and produces &lt;code&gt;[2, 3] U {1, 4}&lt;/code&gt;, a nice answer. The code to do it however is atrocious and filled with nests of rules and special cases. Much of this code is in the Union and RealUnion classes but some of it is in FiniteSet, some of it is in Interval as well. Everything works, it’s just complex. &lt;/p&gt;
&lt;p&gt;This is similar to the situation in &lt;code&gt;Mul.flatten&lt;/code&gt; and friends. &lt;/p&gt;
&lt;p&gt;So what is the solution for Sets? How do we simplify Union and Intersection? &lt;/p&gt;
&lt;p&gt;First, lets acknowledge that Union/Intersection serve two purposes&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; They serve as a container of sets
&lt;/li&gt;&lt;li&gt; They simplify these sets using known rules
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;We separate these two aspects and solve them independently. &lt;/p&gt;
&lt;p&gt;We separate these two in the same way Mul and Add handle it. We create a reduce/flatten method and, while we call it by default, it is now separate from the construction logic. There has been talk about separating these two parts of our container classes even further by having container classes that only contain and simplifyers/canonicalizers that only simplify/canonicalize. &lt;/p&gt;
&lt;p&gt;We need a simple way to manage all of the special rules we know for simplifying collections of sets. The issue is that there are a lot of special cases; FiniteSets can do some things, Intervals others, and how do we anticipate not-yet-defined sets? Our solution is as follows. &lt;/p&gt;
&lt;p&gt;Every set class has methods &lt;code&gt;_union(self, other)&lt;/code&gt; and &lt;code&gt;_intersect(self, other)&lt;/code&gt;. These methods contain local simplification rules. I.e. if &lt;code&gt;self&lt;/code&gt; knows how to interact with &lt;code&gt;other&lt;/code&gt; it returns a new, simplified set, otherwise it returns &lt;code&gt;None&lt;/code&gt; for “I don’t know what to do in this situation”. For example &lt;code&gt;Intervals&lt;/code&gt; know how to intersect themselves with other &lt;code&gt;Intervals&lt;/code&gt; but they don’t know how to interact with &lt;code&gt;FiniteSets&lt;/code&gt;, luckily &lt;code&gt;FiniteSets&lt;/code&gt; know how to do this. Together they know how to handle any situation between them. &lt;/p&gt;
&lt;p&gt;Here are the local interaction methods for &lt;code&gt;EmptySet&lt;/code&gt;. &lt;/p&gt;
&lt;pre&gt;def _union(self, other):
    return other
def _intersect(self, other):
    return S.EmptySet
&lt;/pre&gt;
&lt;p&gt;These are particularly simple, are known only by EmptySet, and yet produce proper behavior in any interaction. When we add EmptySet to the family of Sets we don’t need to add code to Union or Intersection. Everything is nicely contained. &lt;/p&gt;
&lt;p&gt;When they simplify, the Union and Intersection classes do two things. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; They walk over the collection of sets and use local rules to perform simplifications
&lt;/li&gt;&lt;li&gt; They also contain a few “global rules” that can accelerate the process by looking at the entire collection of sets at once.
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;In this way it is very easy to extend the Sets module with new classes without breaking Union and Intersection. Additionally, the old nest of code has been cleanly separated and placed into the relevant classes. Unions and Intersections no longer need to know every possible interaction between every possible Set. Instead they manage interactions and let Sets simplify themselves. &lt;/p&gt;
&lt;p&gt;A final note. I like this idea of managing many small simplification rules. I stole this idea from &lt;a href=&quot;http://deeplearning.net/software/theano/&quot;&gt;Theano&lt;/a&gt;, a symbolic/numeric python library. They go one step further though and separate the rule from the container class. I.e. rather than telling Intervals how to interact with Intervals they make a separate rule and include it in some separate simplifying manager. If this idea interests you I suggest you look at their &lt;a href=&quot;http://deeplearning.net/software/theano/optimizations.html#optimizations&quot;&gt;documentation on optimizations&lt;/a&gt;.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/257/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/257/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=257&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 30 Mar 2012 20:14:16 +0000</pubDate>
</item>
<item>
	<title>Official SymPy blog: Google Summer of Code 2012</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2520472460430880330.post-798629723236480051</guid>
	<link>http://sympy.blogspot.com/2012/03/google-summer-of-code-2012.html</link>
	<description>SymPy was accepted by Google once again to participate in Google Summer of Code for 2012.  Please go to &lt;a href=&quot;http://www.google-melange.com/gsoc/org/google/gsoc2012/sympy&quot;&gt;http://www.google-melange.com/gsoc/org/google/gsoc2012/sympy&lt;/a&gt; for more information about how to apply and get started.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/2520472460430880330-798629723236480051?l=sympy.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 16 Mar 2012 20:55:25 +0000</pubDate>
	<author>noreply@blogger.com (Aaron Meurer)</author>
</item>
<item>
	<title>Vladimir Perić: Thoughts on Google Code-in 2011</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8814696591561172392.post-4829631852742579231</guid>
	<link>http://vperic.blogspot.com/2012/02/thoughts-on-google-code-in-2011.html</link>
	<description>Google Code-in is the high-school equivalent of the Google Summer of Code. The program ran from Nov 21st to Jan 16th, though we've only now gotten around to sending &lt;a href=&quot;https://groups.google.com/group/sympy/browse_thread/thread/fde434aa771fd5eb/c3220755357b032a&quot;&gt;a &quot;summary&quot; mail to the list about it&lt;/a&gt;. As Aaron noted, we've had some translation work, some work on SymPy Live and a bevy of documentation and code improvements. With 176 tasks completed, I'd say the whole project was a success for SymPy. I was involved as a mentor, so here are some general thoughts and observations about the process. &lt;br /&gt; &lt;br /&gt;&lt;b&gt;E-mail spam.&lt;/b&gt; In SymPy we didn't have a clean separation of mentor duties (eg. KDE only allowed tasks for which someone volunteered to mentor), so the initial idea was to add all (most) mentors to all tasks. This meant a lot of mails, an effect worsened by the fact that each commenter to the issue starts another &quot;conversation&quot; when viewed from Gmail (which I even &lt;a href=&quot;https://code.google.com/p/soc/issues/detail?id=1388&quot;&gt;reported to Melange&lt;/a&gt; as a feature request/bug). At the height of activity, I could get upwards of 30-40 mails (&quot;conversations&quot;) daily, which by far dwarfed my other mail traffic. Then, because each comment is basically a separate mail, I wasted a lot of time looking at issue that someone already addressed (again, most mentors could handle most tasks). For the second round of tasks I didn't add myself to each task, otherwise I'm sure I'd have gotten even more spam. The bug I reported in Melange was fixed, so hopefully this will be less of an issue next year. &lt;br /&gt; &lt;br /&gt;&lt;b&gt;Being a mentor takes a lot of time.&lt;/b&gt; Partly a consequence of above, partly due to all the work being done, but being a mentor took a lot of time. Many students were unfamiliar with git (and didn't want to read the instructions on development workflow on our excellently-written (in my opinion) &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GCI-2011-Landing&quot;&gt;GCI Landing Page&lt;/a&gt;) and solving issues with them was a constant topic on IRC. Students also lacked follow-through with comments (or, occasionally, expected the work handed down to them) which didn't help. Finally, many students were very anxious, and didn't appreciate that we are all volunteers and cannot be around 24/7. All of this resulted in a process that was frustrating at times and stressful for mentors.  &lt;br /&gt; &lt;br /&gt;Regardless of all of the above, &lt;b&gt;a lot of work was done&lt;/b&gt; for SymPy. While I didn't look at the stats, my feeling is that the biggest improvement could be seen in our SymPy Live interface (and our webpage) and our documentation. Yes, we also saw some code improvements, but they were probably a smaller part of the overall contribution (though by no means less important). Interestingly, I think this exposes the two types of tasks the GCI contest is well-suited to: tasks where there is no &quot;in-house&quot; expertise (anything web related in our case) and uninteresting tasks/chores (writing documentation, in our case and probably for most projects). In the first case, we managed to attract experienced developers who could improve our webpage much faster and better than any of the core developers. Writing documentation is also an important task, but one that is shunned by most developers. Still, it is mostly simple work and (more importantly) doesn't usually require in-depth understanding of the code. This made it ideally suited for new contributors. The financial award (100$ for every 3 completed tasks, up to 500$) was enough of a motivation for students. The all-around improvements to our documentation are probably the single biggest advantage of our participation in GCI. &lt;br /&gt; &lt;br /&gt;&lt;b&gt;Translations.&lt;/b&gt; In GCI, tasks were divided into categories and we needed to have at least 5 tasks in every category. While we managed to &quot;fill-up&quot; most categories, Translation was probably the biggest problem. As a, basically, command-line library, it does not make a lot of sense for SymPy to be translated in other languages. In the end, we created tasks for translating our webpage and tutorial to the languages covered by the development team and some of these were done, but I consider this a waste of time. Though this issue is &quot;near and dear&quot; to me (I'm not a native speaker of English), I'm of the opinion that it would be impossible for someone without at least a basic knowledge of English to program with SymPy. Simply, however much effort we put into translating, the class and method names will remain in English and there's no helping that. I very much doubt the newly translated documents will be even used and they're bound to fall behind as the original document changes. We also had to start using gettext to manage the translations, which is a non-trivial amount of work (and there are still some issues). In my opinion, it adds another layer of complexity (however small) for very little gain. &lt;br /&gt; &lt;br /&gt;In &lt;b&gt;conclusion&lt;/b&gt;: did we get stuff done? Yes, without a doubt. Would we have gotten more if the mentors used their mentoring time for coding? Perhaps, but not necessarily. Are some of the students going to keep contributing? Most likely not. Still, I would consider the whole program, and our participation in it, a &lt;b&gt;success&lt;/b&gt;. Ideas for next year could be focusing more on stuff none of the core developers can do (eg. the website work), but we can't really say how far along will SymPy development progress during this year or which tasks might be available to students. Hopefully, more people will volunteer to mentor next year, which would help with most issues I raised here. It is interesting, though, that even with our normally very fast development process we couldn't handle the influx of student work. It'd be interesting to see how other organizations coped. &lt;br /&gt; &lt;br /&gt;Here's to another GCI this year!&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8814696591561172392-4829631852742579231?l=vperic.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 10 Feb 2012 16:27:46 +0000</pubDate>
	<author>noreply@blogger.com (Vladimir Perić)</author>
</item>
<item>
	<title>Matthew Rocklin: sympy.stats is in</title>
	<guid isPermaLink="false">http://sympystats.wordpress.com/?p=241</guid>
	<link>http://sympystats.wordpress.com/2012/02/06/sympy-stats-is-in/</link>
	<description>&lt;h3&gt;Development&lt;/h3&gt;
&lt;p&gt;It seems there was a flurry of development over the winter holidays.&lt;/p&gt;
&lt;p&gt;Tom’s Meijer-G integration code was merged into master giving SymPy an incredibly powerful definite integration engine. This encouraged me to finish up the pull request for random variables.&lt;/p&gt;
&lt;p&gt;Earlier this morning we finally merged it in and sympy.stats is now in master. If you’re interested please play with it and generate feedback. At the very least it should be able to solve many of your introductory stats homework problems :)&lt;/p&gt;
&lt;p&gt;Actually, I tried using it for a non-trivial example last month and generated an integral which killed the integration engine (mostly this was due to a combination of trigonometric and delta functions). However, I still really wanted the result. The standard solution to analytically intractable statistics problems is to sample. This pushed me to build a monte carlo engine into sympy stats.&lt;/p&gt;
&lt;h3&gt;Sampling&lt;/h3&gt;
&lt;p&gt;The family of stats functions P, E, Var, Density, Given, now have a new member, Sample. You can generate a random sample of any random expression as follows&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.stats import *
&amp;gt;&amp;gt;&amp;gt; X, Y = Die(6), Die(6)
&amp;gt;&amp;gt;&amp;gt; roll = X+Y
&amp;gt;&amp;gt;&amp;gt; Sample(roll)
10
&amp;gt;&amp;gt;&amp;gt; Sample(roll)
5
&amp;gt;&amp;gt;&amp;gt; Sample(X, roll&amp;gt;10) # Sample X given that X+Y&amp;gt;10
6
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Sampling is of course more fail-proof than solving integrals and so expressions can be made arbitrarily complex without issue. This sampling mechanism is also built into the probability and expectation functions using the keyword “numsamples”&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.stats import *
&amp;gt;&amp;gt;&amp;gt; X, Y = Normal(0, 1), Normal(0, 1)
&amp;gt;&amp;gt;&amp;gt; P(X&amp;gt;Y)
1/2
&amp;gt;&amp;gt;&amp;gt; P(X&amp;gt;Y, numsamples = 1000)
499 
────
1000
&amp;gt;&amp;gt;&amp;gt; E(X+Y)
0
&amp;gt;&amp;gt;&amp;gt; E(X+Y, numsamples = 1000)
-0.0334982435603208
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Future&lt;/h3&gt;
&lt;p&gt;GSoC 2012 was announced a couple days ago. I’m excited to see what projects are proposed. &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/241/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/241/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=241&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 07 Feb 2012 04:03:22 +0000</pubDate>
</item>
<item>
	<title>Ondřej Čertík: When double precision is not enough</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-6568744196982634289.post-7881611169286097799</guid>
	<link>http://ondrejcertik.blogspot.com/2012/01/when-double-precision-is-not-enough.html</link>
	<description>I was doing some finite element (FE) calculation and I needed the sum of the lowest 7 eigenvalues of a symmetric matrix (that comes from the FE assembly) to converge to at least 1e-8 accuracy (so that I can check calculation done by some other solver of mine, that calculates the same but doesn't use FE). In reality I wanted the rounded value to 8 decimal digits to be correct, so I really needed 1e-9 accuracy (but it's ok if it is let's say 2e-9, but not ok if it is 9e-9). With my FE solver, I couldn't get it to converge more than to roughly 5e-7 no matter how hard I tried. Now what?&lt;br /&gt;&lt;br /&gt;When doing the convergence, I take a good mesh and keep increasing &quot;p&quot; (the polynomial order) until it converges. For my particular problem, it is fully converged for about p=25 (the solver supports the order up to 64). Increasing &quot;p&quot; further will not increase the accuracy anymore, and the accuracy stays at the level 5e-7 for the sum of the lowest 7 eigenvalues. For optimal meshes, it converges at p=25, for not optimal meshes, it converges for higher &quot;p&quot;, but in all cases, it doesn't get below 5e-7.&lt;br /&gt;&lt;br /&gt;I know from experience, that for simpler problems, the FE solver can easily converge to 1e-10 or more using double precision. So I know it is doable, now the question is what the problem is: there&lt;br /&gt;are a few possible reasons:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The FE quadrature is not accurate enough&lt;/li&gt;&lt;li&gt;The condition number of the matrix is high, thus LAPACK doesn't return very accurate eigenvalues&lt;/li&gt;&lt;li&gt;Bug in the assembly/solver (like single/double corruption in Fortran, or some other subtle bug)&lt;/li&gt;&lt;/ul&gt;When using the same solver for simpler potential, it converged nicely to 1e-10. So this suggests there is no bug in the assembly or solver itself. It is possible that the quadrature is not accurate enough, but again, if it converges for simple problem, it's probably not it. So it seems it is the ill conditioned matrix, that causes this. So I printed the residuals (that I simply calculated in Fortran using the matrix and the eigenvectors returned by LAPACK), and it only showed 1e-9. For simpler problems, it can go to 1e-14 easily. So that must be it. How do we fix it?&lt;br /&gt;&lt;br /&gt;Obviously by making the matrix less ill conditioned, which is caused by the mesh for the problem (the ratio of the longest/shortest elements is 1e9) but for my problem I really needed such a mesh. So the other option is to increase the real number accuracy.&lt;br /&gt;&lt;br /&gt;In Fortran all real variables are defined as real(dp), where dp is an integer defined at a single place in the project. There are several ways to define it, but it's value is 8 for gfortran and it means double precision. So I increased it to 16 (quadruple precision), recompiled. Now the whole program calculates in quadruple precision (more than 30 significant digits). I had to recompile LAPACK using the &quot;-fdefault-real-8&quot; gfortran option, that promotes all double precision numbers to quadruple precision, and I used the &quot;d&quot; versions (double precision, now promoted to quadruple) of LAPACK routines. &lt;br /&gt;&lt;br /&gt;I rerun the calculation ---- and suddenly LAPACK residuals are around 1e-13, and the solver converges to 1e-10 easily (for the sum of the lowest 7 eigenvalues). Problem solved. &lt;br /&gt;&lt;br /&gt;Turning my Fortran program to quadruple precision is as easy as changing one variable and recompiling. Turning LAPACK to quadruple precision is easy with a single gfortran flag (LAPACK uses the old f77 syntax for double precision, if it used real(dp), then I would simply change it as for my program). The whole calculation got at least 10x slower with quadruple. The reason is that gfortran runtime uses the libquadmath library, that simulates quadruple precision (as current CPUs only support double precision natively). &lt;br /&gt;&lt;br /&gt;I actually discovered a few bugs in my program (typically some constants in older code didn't use the &quot;dp&quot; syntax, but had the double precision hardwired). Fortran warns about all such cases, when the real variables have incompatible precision. &lt;br /&gt;&lt;br /&gt;It is amazing how easy it is to work with different precision in Fortran (literally just one change and recompile). How could this be done with C++? This wikipedia &lt;a href=&quot;http://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format&quot;&gt;page&lt;/a&gt; suggests, that &quot;long double&quot; is only 80bit in most cases (quadruple is 128bit), but gcc offers __float128, so it seems I would have to manually change all &quot;double&quot; to &quot;__float128&quot; in the whole C++ program (this could be done with a single &quot;sed&quot; command).&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/6568744196982634289-7881611169286097799?l=ondrejcertik.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 26 Jan 2012 18:51:28 +0000</pubDate>
	<author>noreply@blogger.com (Ondřej Čertík)</author>
</item>
<item>
	<title>Sean Vig: Finishing what I started</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8510171342300140296.post-5238790680519906319</guid>
	<link>http://seanvig.blogspot.com/2012/01/finishing-what-i-started.html</link>
	<description>As of today, I'm happy to report that my last pull request for angular momentum coupling was merged into master (see &lt;a href=&quot;http://here/&quot;&gt;here&lt;/a&gt;). The master branch now has the capability to do arbitrary angular momentum coupling and uncoupling. I ended up writing a summary of the algorithm I used to write this, which I briefly described (or more accurately, brushed over) in the previous blog post, the write up for which is currently hosted on github &lt;a href=&quot;https://github.com/flacjacket/coupling_algorithm&quot;&gt;here&lt;/a&gt;. This should be all of the big changes for the angular momentum algebra I can foresee in the near future.&lt;br /&gt;&lt;br /&gt;At this point, school is starting back up again and especially since I have joined a research group I won't be doing anything big in the near future. That said, I do have a couple things I've started in on that I will try to finish up if I can get some time. First, I started working on some changes to the quantum printing framework. I have a pull request open for some new tests to the quantum printing framework, so if that can get finished up I'll try to work on getting those changes in. This was an issue that had been brought up before (around the time I started the GSoC project) and even the work I've done so far, I've dug up a couple issues with the printing framework. The current pull for the tests are &lt;a href=&quot;https://github.com/sympy/sympy/pull/908&quot;&gt;here&lt;/a&gt; and the changes to the printing framework which are to follow are &lt;a href=&quot;https://github.com/flacjacket/sympy/tree/quantum_printing&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In addition, over winter break, I dug into some related issues with Piecewise, particularly with the treatment of the otherwise parameter. Just today I opened a pull request for collecting feedback on the changes I made &lt;a href=&quot;https://github.com/sympy/sympy/pull/1009&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Now that the spin stuff is finished, I've been thinking about going back and looking at the stuff I did at the beginning of the GSoC project, particularly some of the stuff with CG coefficients and simplification of these terms. From what I remember, there should be some quick changes to make some stuff run much better, so if I get time, I'll take a look back at that.&lt;br /&gt;&lt;br /&gt;Last, while I am quite happy with how the current angular momentum coupling and uncoupling methods treat numerical cases, there's nothing really there for treating symbolic cases and any symbolic arguments cause the methods to return a very general summation. I put some thought into modifying the current algorithm to allow for some forms of symbolic coupling and uncoupling, but I wasn't able to come up with any. If I can sit down and find something that could do symbolic coupling and uncoupling, that would be the icing on the cake of the current algorithm.&lt;br /&gt;&lt;br /&gt;With the merging of this pull request, everything that I set out to do for my GSoC project last summer has been completed in some form. There may be some things to refine or work on, but for the most part, I have accomplished everything I set out to do. Unless I make some big changes to the coupling algorithm, like working out something with symbolic cases, or make some other big change to the angular momentum algebra, this will likely be my last post here, at least until something else comes up that I'd like to document.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-5238790680519906319?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 22 Jan 2012 06:57:37 +0000</pubDate>
	<author>noreply@blogger.com (Sean Vig)</author>
</item>
<item>
	<title>Aaron Meurer: Vim vs. Emacs (Part 3)</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1077</guid>
	<link>http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/</link>
	<description>&lt;p&gt;See parts &lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/&quot;&gt;1&lt;/a&gt; and &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/&quot;&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some more comments after using emacs for a while:&lt;/p&gt;
&lt;li&gt;I finally found the perfect tab completion solution. It took way too much searching for how awesome it is.  It’s called &lt;a href=&quot;http://cx4a.org/software/auto-complete/manual.html&quot;&gt;auto-complete-mode&lt;/a&gt;.  The best way to get an idea of what this is is to watch &lt;a href=&quot;http://www.youtube.com/watch?v=rGVVnDxwJYE&quot;&gt;this screencast&lt;/a&gt;.  Basically, it shows you a completion list automatically.  It uses the &lt;em&gt;TAB&lt;/em&gt; key to do completion (to me, this is a no brainer, but for some reason, no other completion extension that I found did this, requiring you to do all kinds of nonsense in your .emacs file).  It’s got cool features like simple fuzzy matching and intelligent matching (so the first completion is what you tend to use, instead of just the first one that matches).  To quote the author, “a goal of auto-complete-mode is to provide a system that does what users want without any command.” I couldn’t agree with that goal more. If you install it, I recommend adding &lt;code&gt;(define-key ac-mode-map (kbd &quot;M-TAB&quot;) 'auto-complete)&lt;/code&gt; to your .emacs, so that you can use M-TAB to force the completion menu to come up.  This generally happens automatically, but I think this is the only way to get fuzzy matching, for example. Actually, you can also just use &lt;code&gt;(ac-set-trigger-key &quot;TAB&quot;)&lt;/code&gt;, which intelligently sets TAB to complete or indent, based on which one you more likely want.  This seems to work pretty well to me.&lt;/li&gt;
&lt;li&gt;Speaking of indenting, emacs has a pretty nice indentation feature for Python.  You just press &lt;code&gt;TAB&lt;/code&gt; repeatedly, and it cycles through all the syntactically legal indentations.  I find this to be more useful than the usual &lt;code&gt;TAB&lt;/code&gt; indents behavior of most editors. Note that by default, it won’t automatically indent, even with trivial indentations (i.e., keeping the previous indentation).  This is easy to fix, though.  Just add &lt;code&gt;(define-key global-map (kbd &quot;RET&quot;) 'newline-and-indent)&lt;/code&gt; to your .emacs file.  This will make &lt;code&gt;RET&lt;/code&gt; do the same thing as &lt;code&gt;C-j&lt;/code&gt;, i.e., basically the equivalent of &lt;code&gt;RET TAB&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;emacs comes with an extension that lets you work with version control systems, called VC.  I don’t use it.  I don’t like stuff messing with my git stuff behind my back (sounds like a good way to lose data to me), and I’m good enough with git commands straight that I don’t need the help.
&lt;p&gt;But unlike all the other hundreds of emacs features that I don’t use, this one was seriously slowing down my workflow.  It adds three or four seconds to the startup time of emacs when loading from within a git repository.  So I did some Googling and added this to my .emacs file:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;;; Disable all the version control stuff         
;; Makes emacs load much faster inside git repos 

(setq vc-handled-backends nil)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;unrelated: Why doesn’t WordPress support lisp as a language for syntax highlighting?&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;This disables the version control stuff, making emacs load fast again (virtually as fast as vim, actually).
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Speaking of making emacs go faster, make sure you compile all your extensions into byte code.  For whatever reason, emacs doesn’t do this automatically, even though compiled files run much faster, and it doesn’t take very long.  The easiest way is to use &lt;code&gt;M-x byte-compile-file&lt;/code&gt; from within emacs.  Just make sure that if you modify the .el file that you recompile the byte code, or it will continue to use the old version.&lt;/li&gt;
&lt;li&gt;I finally figured out how to enable mouse support.  For whatever reason, Googling got me nowhere with this, so I ended up asking on the &lt;a href=&quot;https://lists.gnu.org/mailman/listinfo/help-gnu-emacs&quot;&gt;help-gnu-emacs&lt;/a&gt; list, which was very helpful.  The solution is to put
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;;; ===== Enable mouse support ====
                                      
(require 'xt-mouse)                   
(xterm-mouse-mode)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;in your .emacs file.  And then it just works.  It needs some tweaking (e.g., it doesn’t play so well with momentum scrolling), but at least it works. I thought I was going to hang myself without mouse support. Because frankly, as good as the movement commands are, moving with the mouse is so much easier sometimes (the same is true for vim too, btw).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;I compiled the git version of emacs (it’s not very hard btw).  I did this to see if the mouse suport “bug” was fixed there, but I’ve gone ahead and kept using it, as it’s nicer.  But I didn’t figure out how to configure it to not load in an X window. So for now, I’ve aliased &lt;code&gt;emacs&lt;/code&gt; to &lt;code&gt;emacs -nw&lt;/code&gt;. I’m sure I just need to add some flag to &lt;code&gt;configure&lt;/code&gt;, but I haven’t gotten around to looking it up yet.&lt;/li&gt;
&lt;li&gt;I found out how to allow editing in the Isearch mode (again, thanks to the help-gnu-emacs list).  You need to install the &lt;a href=&quot;https://github.com/asmeurer/dotfiles/blob/master/.emacs.d/lisp/isearch%2B.el&quot;&gt;isearch+&lt;/a&gt; extension, add the following to your .emacs,
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;;; ===== isearch+ =====         

(require 'isearch+)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;and most importantly, you need to edit the file and uncomment all the commmands you want to allow.  If you follow my link above, it goes to my personal dotfiles repo, where I’ve already done that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;On a related note, this is the first of several emacs extensions I’ve installed that I’ve edited the extension file itself for.  The rest, I just had to add some code to .emacs.  In most cases, there was already a variable or suggested code snippet to add to .emacs to get what I wanted.
&lt;p&gt;On the other hand, with vim, I had to edit virtually every extension I installed to make it do what I want.  I’m not sure what this means, though.  It could be a statement about one of many things: how the emacs community provides nicer defaults, how the vim language is easier to use, and hence more inviting for me to edit the files, or how I haven’t gotten around to messing with certain things yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;If you do a lot of work with LaTeX, check out &lt;a href=&quot;http://www.gnu.org/software/auctex/&quot;&gt;AUCTeX&lt;/a&gt;. I haven’t used it enough yet to say much about it, but from what I’ve played around with, it’s pretty awesome.  And if you use a windowed version of emacs, it’s got a really awesome preview mode.&lt;/li&gt;
&lt;li&gt;If you’re bored, check out the &lt;a href=&quot;http://www.dr-qubit.org/predictive/predictive-user-manual/html/index.php&quot;&gt;predictive&lt;/a&gt; extension.  It’s actually not as helpful as you’d think (unlike the very similar auto-complete-mode module mentioned above).  But it’s kind of cool to turn on and play around with when you’re typing something.  Maybe you’ll learn new words or something.&lt;/li&gt;
&lt;li&gt;I could go on and on.  I haven’t mentioned the most basic customizations (like how to setup four-space tabs).  If you are starting to use emacs, I recommend going through &lt;code&gt;M-x customize&lt;/code&gt;, and reading my &lt;a href=&quot;https://github.com/asmeurer/dotfiles/blob/master/.emacs&quot;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file.  And my best advice: if you want emacs to do something, first do &lt;code&gt;M-x customize&lt;/code&gt; and search for what you want (EDIT: apparently searching customize requires emacs 24, i.e., the development version).  If you don’t find what you want there (and you will surprisingly often), search Google.  There are so many emacs users, that the chances of someone else wanting what you want are very likely. I’ve found the results from the &lt;a href=&quot;http://www.emacswiki.org/&quot;&gt;emacs wiki&lt;/a&gt; to be particularly helpful. And one more thing: if you find an extension you like, double check first to see if it’s not already included in emacs. Emacs seems to like including good extensions in future releases, so an older extension has a good chance of already being included.&lt;/li&gt;
&lt;p&gt;Some emacs questions:&lt;/p&gt;
&lt;li&gt;I tried &lt;code&gt;(define-abbrev global-abbrev-table &quot;Ondrej&quot; &quot;Ondřej&quot;)&lt;/code&gt;, so that when I type Ondrej it give me Ondřej.  But it doesn’t work.  Is this a bug or what? If I do &lt;code&gt;(define-abbrev global-abbrev-table &quot;foo&quot; &quot;bar&quot;)&lt;/code&gt; and type “foo”, it turns into “bar”, but the above leaves Ondrej alone. &lt;em&gt;EDIT: I guess this was an emacs bug.  It doesn’t seem to be there any more (perhaps it was fixed with the git version or something).&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Is there a way to reload .emacs without closing emacs? I’m doing that a lot these days. &lt;em&gt;EDIT: I found it. Do &lt;code&gt;M-x load-file RET ~/.emacs&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Is there a good emacs equivalent of the vim &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=273&quot;&gt;tag list plugin&lt;/a&gt;  (thanks for commenter Scott for pointing me to that in the first place)?  I just want something that lists all the class and function definitions in a Python file in order, so I can easily jump to the one I want, or just get an overview of the file.  &lt;/li&gt;
&lt;p&gt;This Tuesday will mark the point where I will have spend as long using emacs as I did using vim. But already, I feel more competent with emacs.  I won’t repeat what I said in my last post, but I just want to say that the ability to edit and write at the same time makes me way more productive.  The fact that it uses keyboard shortcuts that I’m already used to probably helps a lot too.  Even so, I’ve not used any kind of cheat sheet for emacs (since I never really found any that were any good), and yet I feel like I’ve memorized more key commands now than I ever did with vim, for which I did use a &lt;a href=&quot;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&quot;&gt;cheat sheet&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;So I really don’t see myself going back to vim at this point.&lt;/p&gt;
&lt;p&gt;I’m actually surprised.  Virtually everyone I know who uses a command line editor uses vim.  It’s definitely the more popular of the two.  But having tried both, I can only speculate as to why.  Vim has a much higher learning curve than emacs.  Everybody grows up learning how to write text in editors like Microsoft Word, TextEdit, Notepad, etc., that all work fundamentally like emacs: if you type text, it enters the text.  If you want to do advanced editing with the keyboard, you hold down some meta keys and type chorded keyboard shortcuts.  The vim modal editing methodology is so different from this, that it surprises me that so many people go to the trouble of learning it (I mean, to the point that they are more efficient with it).  I can see the benefit over GUI editors, which have nothing on either vim or emacs with regards to customization, or just the plain editing power that is really necessary for coding. My guesses why people use vim:&lt;/p&gt;
&lt;li&gt;They are shown vim first, so just use it.
&lt;/li&gt;
&lt;li&gt;They are turned off by the massiveness of emacs (it seems contradictory to me, since the whole point of using a command line editor is to get more power, but I could see it).
&lt;/li&gt;
&lt;li&gt;They are turned off by emacs lisp.
&lt;/li&gt;
&lt;li&gt;Some combination of those.&lt;/li&gt;
&lt;p&gt;Maybe the vim users out there could comment why they use vim.  Am I missing something?  Or are your heads just wired differently from mine? And if you use emacs (or anything else), I’d love to hear from you too?&lt;/p&gt;
&lt;p&gt;At any rate, I recommend that anyone who wants to give command line editors a chance do what I did: learn both vim and emacs.  My blog posts should be enough to give you some good advice.  I went cold-turkey, and I recommend that you do too, but only do it if you won’t have any important editing to do for a few weeks, as your editing rate will slow down a lot as you are learning for both editors.  And even though I think I am going to stick with emacs, learning vim was still valuable.  Unlike emacs, vi is part of the POSIX standard, so it’s included in pretty much every UNIX distribution.  I’ll be glad when I find myself on a minimal command line and know how to use a decent text editor.  And anyway, you can’t really know which one will be your way until you try them both.  I really thought I would end up using vim, as it was so popular among all the people I know who use command line editors. But I guess there is only &lt;a href=&quot;http://www.dina.dk/~abraham/religion/&quot;&gt;One True Editor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; I found out how to make emacs really fast.  The key is to run one process of emacs in daemon mode, and have the rest connect to that.  Then you only have to wait for the startup once (per computer session).  To do it, just set your &lt;code&gt;EDITOR&lt;/code&gt; to &lt;code&gt;'emacsclient -a &quot;&quot; -nw'&lt;/code&gt; (and you might also want to alias &lt;code&gt;emacs&lt;/code&gt; to that as well).  What this does is connect to the emacs daemon.  The &lt;code&gt;-a &quot;&quot;&lt;/code&gt; starts one if it isn’t already started (you can also do this yourself with &lt;code&gt;emacs --daemon&lt;/code&gt;.  If you only want to use the daemon version if you’ve specifically started it, replace &lt;code&gt;&quot;&quot;&lt;/code&gt; with &lt;code&gt;emacs&lt;/code&gt;.  This will connect to the daemon if it’s running, and otherwise just start a new emacs process.  &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-nw&lt;/code&gt; keeps it from running in window mode.  Remove this if you use the GUI version of emacs.  This is necessary to make it work correctly with multiple tabs.  This is so fast that you should never really even need to use &lt;code&gt;C-z&lt;/code&gt; to quickly exit emacs.  &lt;code&gt;C-x C-c&lt;/code&gt; is just fine, because reopening will be instantaneous.  I like this because I was starting to accumulate background emacs processes that I forgot about.&lt;/p&gt;
&lt;p&gt;This probably requires a fairly new version of emacs, possibly even the development version.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1077/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1077&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 13 Jan 2012 23:01:39 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer: Vim vs. Emacs (Part 2)</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1070</guid>
	<link>http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/</link>
	<description>&lt;p&gt;As I noted in &lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/&quot;&gt;part 1&lt;/a&gt;, I have decided to switch to a command line text editor.  I decided that, to be fair, I would try both vim and emacs.  And to force myself to learn them, I decided to use them cold-turkey.  &lt;/p&gt;
&lt;p&gt;Since I’m going cold-turkey, I am doing this over my break from classes, so that I can weed out any difficulties during a period when I can live with slow text editing if necessary.  This is a one month break.  I have reached (roughly) the half way point.  For the first half, I used nothing but vim to edit text.  Now, I will use nothing but emacs.&lt;/p&gt;
&lt;p&gt;Now that I’ve stopped using vim (for now anyway), my view of it isn’t much different from what I wrote in the first part.  A lot of things there were addressed by commenters (or rather commenter).  I still feel that it’s not an a method of text editing that fits my head.  My entire life, I’ve used text editors where typing inserts text, and various control characters do things like move around faster.  &lt;/p&gt;
&lt;p&gt;Enter emacs. It does exactly this.  Also a ton more.&lt;/p&gt;
&lt;p&gt;I’ve only been using emacs for two days, but here are my impressions so far:&lt;/p&gt;
&lt;li&gt;&lt;strong&gt;The tutorial is better.&lt;/strong&gt;  When you start emacs, it tells you how to start the tutorial.  Just type &lt;code&gt;C-h t&lt;/code&gt; (if you don’t already know, in emacs &lt;code&gt;C-&lt;/code&gt; means &lt;code&gt;CTRL-&lt;/code&gt; and &lt;code&gt;M-&lt;/code&gt; means &lt;code&gt;ALT-&lt;/code&gt;).  Like I said last time, the very first thing you learn is how to scroll by more than one line at a time.  That turns out to be a very useful thing to do.  Also, the emacs tutorial did a better job of explaining how to use multiple files at once in emacs, which is something that I still don’t really know how to do very well in vim.
&lt;p&gt;I have to give the vim tutorial some credit for one thing, though.  It has better interactive examples.  For example, in the vim tutorial, you have stuff like &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;  1. Move the cursor to the second line in the phrase below.
  2. Type  dd  to delete the line.
  3. Now move to the fourth line.
  4. Type   2dd   to delete two lines.

---&amp;gt;  1)  Roses are red,
---&amp;gt;  2)  Mud is fun,
---&amp;gt;  3)  Violets are blue,
---&amp;gt;  4)  I have a car,
---&amp;gt;  5)  Clocks tell time,
---&amp;gt;  6)  Sugar is sweet
---&amp;gt;  7)  And so are you.
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;whereas in the emacs tutorial, you just have&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: plain;&quot;&gt;&amp;gt;&amp;gt; Kill a line, move around, kill another line.
   Then do C-y to get back the second killed line.
   Then do M-y and it will be replaced by the first killed line.
   Do more M-y's and see what you get.  Keep doing them until
   the second kill line comes back, and then a few more.
   If you like, you can try giving M-y positive and negative
   arguments.
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;which is a little more vague.  So I have to give vim credit for that.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everything’s a buffer.&lt;/strong&gt; This line from the emacs tutorial really stuck with me: “ANY text you see in an Emacs window is always part of some buffer.”  Emacs has really a awesome editing model, even simple things like &lt;code&gt;M-f&lt;/code&gt; and &lt;code&gt;M-b&lt;/code&gt; to move around words at a time, or &lt;code&gt;M-DEL&lt;/code&gt; to delete whole words make things &lt;strong&gt;way&lt;/strong&gt; faster.  Vim of course has all of these too, albiet in a different way, but they aren’t everywhere.  In emacs, everything is a buffer, which just means that everything supports all the standard emacs commands.  So if you type &lt;code&gt;M-x&lt;/code&gt; (roughly the equivalent of vim’s &lt;code&gt;:&lt;/code&gt;) and start typing a command, you can move around and edit your command with emacs commands.  One of the things that bothered me about vim was that when I was typing something with &lt;code&gt;:&lt;/code&gt;, I couldn’t use vim’s text moving/modifying commands to manipulate the text.  Typing ESC just canceled the command.
&lt;p&gt;Exceptions: There are at least two exceptions I’ve found to this rule.  First, if you do a search with &lt;code&gt;C-s&lt;/code&gt; or &lt;code&gt;C-r&lt;/code&gt;, no control commands work.  If you type a search string, and then type &lt;code&gt;M-DEL&lt;/code&gt; to try to delete the last word in your search string, you will instead delete the word where the cursor is!  The solution I think is to use something like &lt;code&gt;M-x re-builder&lt;/code&gt; instead.  This was a little slow in my tests.&lt;/p&gt;
&lt;p&gt;Second, the emacs manual is presented in the &lt;code&gt;info&lt;/code&gt; program, which uses completely different key commands from every other program.  This irked me quite a bit, because as soon as I finished the emacs tutorial, it pointed me to the manual, which was in &lt;code&gt;info&lt;/code&gt;.  Then, the first thing in &lt;code&gt;info&lt;/code&gt; is a tutorial on how to use &lt;code&gt;info&lt;/code&gt;!  I opted to skip this.  If I need any information on emacs, I’ll just do a Google search anyway, so I found this to be a waste of time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s a little slower.&lt;/strong&gt; I do notice a speed difference between emacs and vim.  vim is much more lightweight, and it shows.  Starting up emacs takes a second or two.  Also, since a lot of the features are more interactive, they suffer from a speed delay.  It’s not nearly slow enough to be a serious issue, though, and it’s still way faster than the GUI program I was using before (start up time).
&lt;p&gt;The emacs tutorial suggests using &lt;code&gt;C-z&lt;/code&gt; whenever you want to only temporarily close emacs.  This seems like a good idea, and has worked pretty well for me so far (though I still usually close the whole thing with &lt;code&gt;C-x C-c&lt;/code&gt; out of habit).&lt;/p&gt;
&lt;p&gt;On a related note, I noticed that doing type-ahead while waiting for emacs to start up didn’t always work, whereas it always worked in vim (I do this, e.g., when waiting for the editor to start up when writing commit messages).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s way more user-friendly.&lt;/strong&gt; Note that this is of course a relative term.  I mean more user-friendly than vim, and pretty user-friendly for a command line program.  Obviously, the most user-friendly text editors are the GUI ones used by the majority of the population (for that very reason).  Actually, both vim and emacs are user-unfriendly in that if you accidentally open them and don’t know what they are or how to use them, you have no idea how to close them.  But even &lt;code&gt;less&lt;/code&gt; (i.e., &lt;code&gt;man&lt;/code&gt;) is technically like this.
&lt;p&gt;I’m not even referring to the different editing “modes” of the two editors, though you could easily argue that emacs style editing is more user-friendly than vim style editing. What I mean here is that emacs interaction is nice. When you type &lt;code&gt;:&lt;/code&gt; in vim, start typing a command, and type &lt;code&gt;TAB&lt;/code&gt;, it enters the first completion, regardless if it’s unique.  Pressing &lt;code&gt;TAB&lt;/code&gt; multiple times give the rest.  In emacs, if you type &lt;code&gt;M-x&lt;/code&gt; and start typing a command and type &lt;code&gt;TAB&lt;/code&gt;, it pops up a temporary window with the list of all completions.  It even colors the next character, so you can easily see what to type next to get what you want.  As soon as you enter the command, the window disappears. (yes, I know about &lt;code&gt;CTRL-D&lt;/code&gt; in vim, but to me tab completion should &lt;em&gt;always&lt;/em&gt; work like it does in bash: complete characters if and only if they are unique in the list of completions)&lt;/p&gt;
&lt;p&gt;By the way, when I said everything’s a buffer, I mean everything.  If you want, you can exit the &lt;code&gt;M-x&lt;/code&gt; entry (type &lt;code&gt;C-g&lt;/code&gt;), type &lt;code&gt;C-x C-b&lt;/code&gt; to show the list of buffers, &lt;code&gt;C-x o&lt;/code&gt; to switch to it, scroll down to “Completions”, press Enter, and actually get in the completion list, as a buffer (there’s probably a less complicated way to get to it, by the way).  You can then do whatever your heart fancies with it (save it to a file, copy it, whatever).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customization is harder.&lt;/strong&gt; This was expected, since I already knew that emacs used lisp.  vim uses a language that is really easy to understand.  I was able to modify all the vim plugins I installed very easily.  If you want to change a setting globally in vim, just Google it and add one line to your .vimrc.   In emacs, everything is in Emacs Lisp.  I suppose prior experience with Lisp would probably help here.
&lt;p&gt;In the vim tutorial, near the end, it told how to create a .vimrc file, and even gave a very useful sample one as a starter.  In emacs, it took me a while to figure out how to do the equivalent (it took me a few Google searches just to figure out that the name of the configuration file in emacs is .emacs).  &lt;/p&gt;
&lt;p&gt;Actually, the emacs equivalent is way better than in vim, but it isn’t really mentioned anywhere. It took me probably a dozen Google searches before I learned about it (granted, I was looking for things in the same way I did for vim, lines to add to .emacs). What you have to do is type &lt;code&gt;M-x configure&lt;/code&gt;.  This opens what is basically a huge preferences dialog for emacs.  You can then go through and set just about every settable emacs setting from there.  The interface is very nice, as it’s interactive and tells you all about each setting.  And you never have to touch Lisp.  I’m still going through it, so I can’t comment more on it yet.  But I recommend doing &lt;code&gt;M-x configure&lt;/code&gt; as soon as you have finished the tutorial and have gotten used to editing with emacs, as you are invariably going to want to change some things (though I should note that emacs generally has nicer defaults than vim).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better text editing methodology?&lt;/strong&gt; Like I’ve already mentioned a bunch of times, the emacs editing model seems to fit my head better than the vim model.  In emacs, you type text, and it inserts the text.  If you want to do some advanced modification or move around, you type a control sequence.  In vim, you type characters, and it does modifications or moves around.  If you want to type text, you type &lt;code&gt;i&lt;/code&gt; (or one of a few other characters) and type it.  Then, if you want to move around or modify the text, you have to press &lt;code&gt;ESC&lt;/code&gt;.  This so-called “modular editing” doesn’t seem to work for me.  For one thing, I like to rapidly switch back and forth between these two “modes” (editing and inserting) when I write things.  I type too fast and write something wrong, and have to delete some stuff. The &lt;code&gt;M-DEL&lt;/code&gt; emacs command is probably my most used (this also works in Mac OS X text dialogs, so I’m used to it already).  In vim, there is &lt;code&gt;CTRL-w&lt;/code&gt; and a few others, but if I want to do something more advanced, like rearranging a sentence, then half of my key presses would be &lt;code&gt;ESC&lt;/code&gt; or &lt;code&gt;i&lt;/code&gt;, i.e., just moving between the modes.  In emacs, I can always have my pinky by Control and Alt (especially as soon as I remap CAPS-LOCK to Control).
&lt;p&gt;Also, it really irks me how in vim, if you are at the end of a line and press &lt;code&gt;l&lt;/code&gt; (or right-arrow), instead of moving to the beginning of the next line, it beeps!  In emacs, if you are at the end of a the line and type &lt;code&gt;C-f&lt;/code&gt;, it moves to the beginning of the next line (actually, it technically moves just beyond the line, in case you want to append, which is another annoying thing about vim: you have to use &lt;code&gt;A&lt;/code&gt;, not &lt;code&gt;i&lt;/code&gt;,  to add text to the end of a line). &lt;/p&gt;&lt;/li&gt;
&lt;p&gt;Well, that’s it for now.  I will hold off on the questions until after I go through all the customizations, as it seems that, unlike vim, emacs has many things already built-in (but we already knew that, didn’t we :).  So I have just one question for readers: does anyone know of a really good emacs cheatsheet?  The &lt;a href=&quot;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&quot;&gt;one I used for vim&lt;/a&gt; was really awesome, but I haven’t found anything equal for emacs.  I find myself searching the tutorial whenever I forget something, which is not very efficient, so I would appreciate something better. Otherwise, I’ll just find something decent and print it out, as it would be better than nothing.&lt;/p&gt;
&lt;p&gt;And if anyone cares, you can see what I’ve got for my .emacs file so far at &lt;a href=&quot;https://github.com/asmeurer/dotfiles/blob/master/.emacs&quot;&gt;https://github.com/asmeurer/dotfiles/blob/master/.emacs&lt;/a&gt;.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1070/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1070/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1070&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 03 Jan 2012 07:30:37 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer: 2011 in review</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1068</guid>
	<link>http://asmeurersympy.wordpress.com/2012/01/01/2011-in-review/</link>
	<description>&lt;p&gt;The WordPress.com stats helper monkeys prepared a 2011 annual report for this blog.&lt;/p&gt;
&lt;div style=&quot;height: 300px;&quot;&gt;&lt;/div&gt;
&lt;p&gt;Here’s an excerpt:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The concert hall at the Syndey Opera House holds 2,700 people.  This blog was viewed about &lt;strong&gt;11,000&lt;/strong&gt; times in 2011.  If it were a concert at Sydney Opera House, it would take about 4 sold-out performances for that many people to see it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://asmeurersympy.wordpress.com/2011/annual-report/&quot;&gt;Click here to see the complete report.&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1068/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1068/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1068&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 01 Jan 2012 00:00:49 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer: Vim vs. Emacs (Part 1)</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1059</guid>
	<link>http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/</link>
	<description>&lt;p&gt;So about a month or so ago, I decided that I needed to start learning a command line text editor.  XCode, the editor I had been using for Python files, didn’t work very well with the new version (in particular, the &lt;a href=&quot;http://asmeurersympy.wordpress.com/2009/12/29/automatically-remove-trailing-whitespace-in-xcode/&quot;&gt;essential plugin&lt;/a&gt; that I’d been using to clear trailing whitespace on save doesn’t yet work in XCode 4).  I’d been using TextWrangler for other things, and started to switch to it for Python editing too.  As far as free GUI text editors on the Mac go, TextWrangler is the best.  &lt;/p&gt;
&lt;p&gt;But I’d seen some of the nice features that vim has, like automatically keeping all lines under 80 characters, on a friend’s computer, and I decided that I should try it.&lt;/p&gt;
&lt;p&gt;Now, I had had a little prior experience with both vim and emacs, but all that I remembered was for vim that &lt;code&gt;i&lt;/code&gt; inserts and &lt;code&gt;ZZ&lt;/code&gt; quits (for when I accidentally open it) and for emacs, that &lt;code&gt;M-X doctor&lt;/code&gt; starts the psychiatrist. &lt;/p&gt;
&lt;p&gt;So I’ve decided to try them out, doing it cold turkey.  To make sure that I choose the better one, I’ve decided to try both.  So, starting about a week ago, I’ve been using nothing but vim for all my text editing.  Starting in January, I will try using emacs, and after two weeks, I will see what I like better.&lt;/p&gt;
&lt;p&gt;My opinions so far on vim:&lt;/p&gt;
&lt;li&gt;The tutorials suck.  The best tutorial is &lt;code&gt;vimtutor&lt;/code&gt; (type that in the command line), which I think comes with vim.  It’s not bad, but it leaves out a few things that I would consider to be essential to a tutorial, for example, how to scroll (answer: use CTRL-D and CTRL-U).  I started the emacs tutorial a while back, and while I never finished it, from what I remember, it was much better (and I also remember that the first thing it talked about was how to scroll by more than one line at a time). It also left out the &lt;code&gt;.&lt;/code&gt; command, which I think is rather useful.  I did print out &lt;a href=&quot;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&quot;&gt;this cheatsheet&lt;/a&gt; and have it sitting next to me on my desk.  That has helped a lot.  I hope I can find something similar for emacs when I get to it.&lt;/li&gt;
&lt;li&gt;vim is too line oriented.  vi started out as an extension to ed, the line editor, so this is not surprising.  But I still can’t understand why pressing &lt;code&gt;l&lt;/code&gt; at the end of a line can’t bring me to the beginning of the next line.  Maybe I’m just still doing it wrong (supposedly, you should rarely use &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt; over more efficient moving commands).  &lt;/li&gt;
&lt;li&gt;Somewhat related to the last point, vim really likes to ring the terminal bell a lot. To quote &lt;a href=&quot;http://en.wikipedia.org/wiki/Editor_war&quot;&gt;Wikipedia&lt;/a&gt;, “vi has two modes – ‘beep repeatedly’ and ‘break everything’”&lt;/li&gt;
&lt;li&gt;I managed to customize it to the point of usability (there are still several things I need to go in and figure out how to fix).  See https://github.com/asmeurer/dotfiles for my .vimrc and .vim/ files.  I found a decent Python syntax file, but it’s actually not that great.  I modified it to color single quoted strings different from double quoted strings (a feature I missed from Xcode). I still need to make a better color scheme (preferably the same as Xcode’s midnight), but this is enough work that I’ve put it off.&lt;/li&gt;
&lt;li&gt;Pressing ESC all the time is really annoying.  Sometimes, I just arrow over, even though I know you’re not “supposed to”, just because my fingers don’t want to reach over and press ESC.  I’m also really used to using control sequences to move around while typing, which of course doesn’t work in vim.  In fact, so far, I’m suspecting that I’ll like emacs better.  But I’ve vowed to give both a fair chance.  But so far, my impression is that vim is a great for text &lt;em&gt;editing&lt;/em&gt;, but not so hot for text &lt;em&gt;writing&lt;/em&gt; (unless you always write text perfectly, so that you never need to leave insert mode until you are done typing).  Just the simple act of deleting a mistyped word (yes, word, that happens a lot when you are decently fast touch typist) takes several keystrokes, when it should in my opinion only take one (two if you count the meta-key).&lt;/li&gt;
&lt;li&gt;The customizability is really nice.  So far, everything that I’ve thought of to change has been changeable.  Also, language is easy enough to understand that I was able to modify the Python syntax file without any difficulty.  &lt;/li&gt;
&lt;li&gt;I like how it syntax highlights virtually everything I throw at it. &lt;/li&gt;
&lt;p&gt;If there are any vim experts out there reading this, I have some questions:&lt;/p&gt;
&lt;li&gt;Is there an easy way to get a list of and jump to a function/class definition in a Python file?  In Xcode and TextWrangler, there was a nice popup at the top of the window that I could access these from.  In vim, so far the best I’ve found is searching for it, which isn’t very efficient.&lt;/li&gt;
&lt;li&gt;I got TAB to indent 4 spaces in Python, but for some reason, when I create a new line after a &lt;code&gt;:&lt;/code&gt;, it puts 8 extra spaces. I wouldn’t be surprised if this is the result of some mismatch/error in &lt;a href=&quot;https://github.com/asmeurer/dotfiles&quot;&gt;my .vimrc or .vim/ files&lt;/a&gt;, but I don’t know how to fix it&lt;/li&gt;
&lt;li&gt;Any useful tricks to share?  Especially for editing Python files.&lt;/li&gt;
&lt;li&gt;How long did it take you to become reasonably efficient with vim?&lt;/li&gt;
&lt;p&gt;&lt;strong&gt;EDIT: I thought of some more questions:&lt;/strong&gt;&lt;/p&gt;
&lt;li&gt;Is there a way to make vim consider camelCase to be word boundaries?&lt;/li&gt;
&lt;p&gt;Finally, if anyone else is thinking of starting vim, I have some useful things I’ve already found in my .vimrc. So you might take a look at that, and add the ones that you like to your .vimrc.  Finally, if you are on Mac OS X, you should use &lt;a href=&quot;http://www.iterm2.com/#/section/home&quot;&gt;iTerm2&lt;/a&gt;.  Actually, you should use this regardless of what text editor you use.  It’s a very good Terminal.app replacement that has virtually all the features (with a couple of exceptions) as Terminal.app, and a ton of extra ones.  The one I want to mention here is mouse reporting support, so you can use your mouse to do things in vim.  This is very useful, as sometimes, e.g., when selecting text, using the mouse is just more efficient.  Also, if you get frustrated trying to remember the commands that will move around you faster than &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, and &lt;code&gt;l&lt;/code&gt;, you can just click on where you want to go.&lt;/p&gt;
&lt;p&gt;:wq&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1059/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1059/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1059&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 20 Dec 2011 08:17:43 +0000</pubDate>
</item>
<item>
	<title>Official SymPy blog: Google Summer of Code 2011 Wrap-Up</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2520472460430880330.post-84564291301844126</guid>
	<link>http://sympy.blogspot.com/2011/12/google-summer-of-code-2011-wrap-up.html</link>
	<description>&lt;span style=&quot;font-style: italic;&quot;&gt;(Cross-posted on the &lt;a href=&quot;http://google-opensource.blogspot.com/2011/12/students-add-to-sympy.html&quot;&gt;Google Open Source Blog&lt;/a&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://sympy.org/&quot;&gt;SymPy&lt;/a&gt; is a computer algebra system (CAS) written in pure Python. The core allows basic manipulation of expressions (like differentiation or expansion) and it contains many modules for common tasks (limits, integrals, differential equations, series, matrices, quantum physics, geometry, plotting, and code generation).&lt;br /&gt;&lt;br /&gt;SymPy has participated in the &lt;span style=&quot;font-style: italic;&quot;&gt;&lt;a href=&quot;http://code.google.com/soc/&quot;&gt;Google Summer of Code&lt;/a&gt;&lt;/span&gt; program in previous years under the umbrellas of &lt;a href=&quot;http://www.python.org/psf/&quot;&gt;Python Software Foundation&lt;/a&gt;, Portland State University, and the &lt;a href=&quot;http://www.stsci.edu/portal/&quot;&gt;Space Telescope Science Institute&lt;/a&gt;, where we were very successful. In fact, several of our core developers, including four of the mentors from this year, started working with SymPy as Google Summer of Code students. This was our first year participating as a standalone organization, and we would like to share our experience.&lt;br /&gt;&lt;br /&gt;As part of the application process we required each student to submit a patch (as a GitHub pull request) that had to be reviewed and accepted. This allowed us to see that each applicant knew how to use git as well as communicate effectively during the review process.This also encouraged only serious applicants to apply. We had over 10 mentors available and we ended up with 9 students, all of whom were successful at final evaluations.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://nessgrh.wordpress.com/&quot;&gt;Tom Bachmann&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Tom-Bachmann%3A-Definite-Integration&quot;&gt;Definite Integration using Meijer G-functions&lt;/a&gt;, mentored by Aaron Meurer&lt;br /&gt; Tom implemented an algorithm for computing symbolic definite integrals that uses so-called &lt;a href=&quot;http://en.wikipedia.org/wiki/Meijer_g-function&quot;&gt;Meijer G-functions&lt;/a&gt;. This is the state-of-the-art algorithm for computing definite integrals, and indeed the results of his project are very impressive. This project has pushed SymPy forward a long way to becoming the strongest open source computer algebra system with respect to symbolic definite integration.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://vperic.blogspot.com/&quot;&gt;Vladimir Peric&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Application%3A-Vladimir-Peri%C4%87%3A-Porting-to-Python-3&quot;&gt;Porting to Python 3&lt;/a&gt;, mentored by Ronan Lamy&lt;br /&gt; Vladimir ported SymPy to work on Python 3 and ported all testing infrastructure so that SymPy gets regularly tested in Python 2.x, 3.2 and PyPy. Thanks to Vladimir’s work, the next version of SymPy, 0.7.2, which will hopefully be released later this year, will work in both Python 2 and Python 3, and it may support PyPy as well.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://gilbertgede.wordpress.com/&quot;&gt;Gilbert Gede&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Gilbert-Gede%3A-PyDy&quot;&gt;PyDy&lt;/a&gt;, mentored by Luke Peterson&lt;br /&gt; Gilbert implemented a physics module to assist in generating symbolic equations of motion for complex multibody systems using Kane's Method. He expanded on the code written by his mentor, Luke, in 2009, and the module can now generate equations of motion for a bicycle. Gilbert also wrote very thorough documentation both for the Kane’s Method and the module in SymPy.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://lazovichsympy.wordpress.com/&quot;&gt;Tomo Lazovich&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Tomo-Lazovich%3A-Position-and-Momentum-Bases-for-QM&quot;&gt;Position and Momentum Bases for Quantum Mechanics&lt;/a&gt;, mentored by Brian Granger&lt;br /&gt; Tomo has greatly improved the quantum mechanics module by implementing position/momentum representations for operators and eigenstates in various coordinate systems (including cartesian, cylindrical, and spherical) that allows you to easily represent many of the &quot;textbook&quot; quantum mechanics systems, including particle in a box, simple harmonic oscillator, hydrogen atom, etc.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://saptman.wordpress.com/&quot;&gt;Saptarshi Mandal&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Gsoc-2011-report-saptarshi-mandal%3A-combinatorics-package-for-sympy&quot;&gt;Combinatorics package for Sympy&lt;/a&gt;, mentored by Christian Muise&lt;br /&gt; Saptarshi’s project was to mimic the various capabilities of Combinatorica, a Mathematica package for combinatorics. Most of the functionality involving elementary combinatorial objects such as Permutations, Partitions, Subsets, Gray codes and Prufer codes are complete.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://sherjilozair.wordpress.com/&quot;&gt;Sherjil Ozair&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sherjil-Ozair%3A-Symbolic-Linear-Algebra&quot;&gt;Symbolic Linear Algebra&lt;/a&gt;, mentored by Vinzent Steinberg&lt;br /&gt; Sherjil improved the speed of the linear algebra module by using efficient coefficient types for values of entries of matrices. Previously, SymPy used generic expressions in this place, which slowed down computations considerably and caused trouble with solving of the zero equivalence problem. He also implemented sparse matrix representation and unified the API with dense matrices. In addition, Sherjil also added a few linear algebra related algorithms (e.g. Cholesky decomposition).&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://sympystats.wordpress.com/&quot;&gt;Matthew Rocklin&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Matthew-Rocklin%3A-Random-Variables&quot;&gt;SymPy Stats: Random Variables&lt;/a&gt;, mentored by Andy Terrel&lt;br /&gt; Matthew improved the statistics module to use symbolics and introduced a Random Variable type, with support for finite, continuous, and multivariable normal random variables. With these you can symbolically compute things like probabilities of a given condition, conditional spaces, and expectation values. As a side consequence of this project, he also improved some of our Sets classes and implemented a MatrixExpr class, which allows you to compute with matrices symbolically, including computing with block matrices.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://seanvig.blogspot.com/&quot;&gt;Sean Vig &lt;/a&gt;- &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig-Symbolic-Clebsch-Gordon-coefficients%3AWigner-symbols-and-Implementing-Addition-of-Spin-Angular-Momenta&quot;&gt;Symbolic Clebsch-Gordon coefficients/Wigner symbols and Implementing Addition of Spin Angular Momenta&lt;/a&gt;, mentored by Ondřej Čertík&lt;br /&gt; Sean was working on the quantum mechanics module and has implemented symbolic Clebsch-Gordan coefficients, Wigner D function, and related mathematical concepts that are used very often in quantum physics when dealing with angular momentum and then the necessary classes to support coupled spin algebra.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://f1728.wordpress.com/&quot;&gt;Jeremias Yehdegho&lt;/a&gt; - &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Jeremias-Yehdegho%3A-Implementing-F5&quot;&gt;Implementing F5&lt;/a&gt;, mentored by Mateusz Paprocki&lt;br /&gt; Jeremias worked on implementing algorithms related to &lt;a href=&quot;http://en.wikipedia.org/wiki/Groebner_bases&quot;&gt;Groebner bases&lt;/a&gt;. Groebner bases are a useful tool in many areas of computer algebra. He implemented the F5B algorithm, which is an improved version of the classical Buchberger’s algorithm that was previously implemented in SymPy, and an algorithm for converting Groebner bases between different orders of monomials and worked on applications of Groebner bases. This allowed for handling problems of much larger size in SymPy.&lt;br /&gt;&lt;br /&gt;The full report can be found &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Gsoc-2011-report&quot;&gt;here&lt;/a&gt;, where each student wrote a wiki page about their experience during the summer and you can also find their blogs and links to applications. Each student was required to blog about their progress each week and all blogs were synchronized at &lt;a href=&quot;http://planet.sympy.org/&quot;&gt;planet.sympy.org&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In previous years, there was usually one student from each summer who became a regular contributor and also a mentor for the next year. It has been a rewarding experience for the whole SymPy community.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/2520472460430880330-84564291301844126?l=sympy.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 13 Dec 2011 00:10:28 +0000</pubDate>
	<author>noreply@blogger.com (Aaron Meurer)</author>
</item>
<item>
	<title>Dale Peterson: Mode shapes and modal decomposition</title>
	<guid isPermaLink="true">http://dlpeterson.com/blog/?p=193</guid>
	<link>http://dlpeterson.com/blog/?p=193</link>
	<description>&lt;p&gt;I recently did a lecture in a mechanical vibrations course on mode shapes and modal decomposition.  I made a &lt;a href=&quot;http://dlpeterson.com/blog/wp-content/uploads/2011/12/handout.pdf&quot;&gt;handout&lt;/a&gt; for the material to summarize the main ideas.&lt;/p&gt;</description>
	<pubDate>Wed, 07 Dec 2011 08:55:40 +0000</pubDate>
</item>
<item>
	<title>Sean Vig: Finalizing arbitrary spin coupling</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8510171342300140296.post-7586073962705778071</guid>
	<link>http://seanvig.blogspot.com/2011/11/finalizing-arbitrary-spin-coupling.html</link>
	<description>As expected, my work with Sympy slowed drastically once school started, but nevertheless, I have found enough time to polish off the coupling of arbitrary number of spin spaces that I started over the summer. I'll probably wait until after school is done (and the initial Google Code-In traffic dies down) before opening a pull request, but it has neared the state of conclusion, but I will outline the work done on the branch &lt;a href=&quot;https://github.com/flacjacket/sympy/tree/multi_coupled&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;A notable change from the summer is the coupling and uncoupling code is now &lt;i&gt;much&lt;/i&gt; cleaner. The old methods used messy &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;while True:&lt;/span&gt; loops  which would increment some parameters and check if some end condition was reached, which I found very unsatisfactory and open to some weird use case throwing it into complete disarray. The new methods utilize the notion that any coupling or uncoupling will occur such that there is a well defined change in either the j (in the case of coupling) or m (in the case of uncoupling) values from their maximal values, and this change can be applied over the (un)couplings in the same way you can distribute n balls in m boxes, then it is just matching an integer to a given state and check that the given state is physically feasible.&lt;br /&gt;&lt;br /&gt;In addition, I have added all necessary documentation for the new functionality and fixed a few other minor issues with other parts of the new code. I may yet change some of the handling of the j_coupling parameter, but I will reevaluate that when I have more time to look at the code after I finish the semester.&lt;br /&gt;&lt;br /&gt;The passing of quantum numbers to define the couplings and un-couplings is still quite verbose, but I see no better way of passing the parameters, hopefully in review someone will see a better way of defining states and couplings.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-7586073962705778071?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 28 Nov 2011 05:58:52 +0000</pubDate>
	<author>noreply@blogger.com (Sean Vig)</author>
</item>
<item>
	<title>Dale Peterson: Sad</title>
	<guid isPermaLink="true">http://dlpeterson.com/blog/?p=190</guid>
	<link>http://dlpeterson.com/blog/?p=190</link>
	<description>&lt;p&gt;&lt;a href=&quot;http://dlpeterson.com/blog/wp-content/uploads/2011/11/Screenshot-11252011-082207-PM.png&quot;&gt;&lt;img src=&quot;http://dlpeterson.com/blog/wp-content/uploads/2011/11/Screenshot-11252011-082207-PM.png&quot; alt=&quot;&quot; width=&quot;221&quot; class=&quot;aligncenter size-full wp-image-191&quot; height=&quot;359&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Sat, 26 Nov 2011 04:28:29 +0000</pubDate>
</item>
<item>
	<title>Dale Peterson: Success in court</title>
	<guid isPermaLink="true">http://dlpeterson.com/blog/?p=187</guid>
	<link>http://dlpeterson.com/blog/?p=187</link>
	<description>&lt;p&gt;I pleaded not guilty to a bicycle stop sign violation in Yolo county today.  The judge found there to be reasonable doubt, and I was found not guilty.&lt;/p&gt;
&lt;p&gt;I was cited for failure to stop at the stop sign while headed eastbound at the intersection of East 8th street and J street, Davis, CA.  The citation occurred at 9:05am on a weekday.  The officer stated the indisputable facts of the case, and the key to my argument was that he was on the west side of J street, about 100 feet north of E 8th street, facing south.  I was coming to the intersection from the officers right, but I was in the bike lane next to the cars, so his view of me would be obstructed by automobile traffic had there been any.  I asked him if he recalled there being traffic at the intersection at the time of the incident.  He responded that he didn’t recall there being any.  I asked him also whether he would be able to see through the cars to see whether I stopped.  He responded that he couldn’t testify whether or not he could.  I then presented my case, which is as follows.&lt;/p&gt;
&lt;p&gt;I commute by bicycle and pass through this intersection 2-4 times per day.  I know the stop signs are there and I know that I stop for them.  In the particular day in question, I recall there being traffic and being adjacent to cars (on the south side of eastbound traffic) as I approached the intersection.  I recall stopping, as I always do at that intersection.  I disputed the officer’s testimony that he could see me approach the intersection without slowing down and that I went through the intersection without stopping.  I argued that he couldn’t have seen me not stop because there were cars in between him and I.  I also reemphasized that I frequent this intersection a lot and that I always stop.  The officer responded by repeating his original statements but didn’t really add anything new to what he originally testified.  I responded by emphasizing that I know for a fact that there was traffic since it was 9:05am, and that there was no way he could have seen whether or not I stopped from his position, and that I pass through that intersection frequently and always stop.&lt;/p&gt;
&lt;p&gt;The judge stated that he found there to be reasonable doubt of my guilt and that since there was no further evidence, I was found not guilty.&lt;/p&gt;
&lt;p&gt;So, it was worth making 2 trips to the Yolo courthouse because I saved myself $200 and also avoided points being added to my DMV record.&lt;/p&gt;</description>
	<pubDate>Wed, 23 Nov 2011 22:08:16 +0000</pubDate>
</item>
<item>
	<title>Dale Peterson: Feynman Lectures Exercise Challenge</title>
	<guid isPermaLink="true">http://dlpeterson.com/blog/?p=177</guid>
	<link>http://dlpeterson.com/blog/?p=177</link>
	<description>&lt;p&gt;I noticed that the editors/publshers of the revised Feynman Lectures on Physics posted a &lt;a href=&quot;http://feynmanlectures.info/forum/index.php?topic=47.0&quot; target=&quot;_blank&quot; title=&quot;Feynman Lectures Exercise Challenge&quot;&gt;challenge problem&lt;/a&gt;, so  I decided to work out a solution.  In doing so, I took the time to learn &lt;a href=&quot;http://www.texample.net/tikz/&quot; target=&quot;_blank&quot; title=&quot;TikZ&quot;&gt;TikZ&lt;/a&gt;.  The result was a pretty nice (I think) drawing of the pendulum system described in that problem.  My solution is available &lt;a href=&quot;http://dlpeterson.com/FLP_Exercise_Challenge/solution.pdf&quot; target=&quot;_blank&quot; title=&quot;Solution to Feynman Lectures Exercise Challenge&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 14 Nov 2011 10:17:06 +0000</pubDate>
</item>
<item>
	<title>Fabian Pedregosa: Low rank approximation</title>
	<guid isPermaLink="false">http://fseoane.net/blog/?p=1128</guid>
	<link>http://fseoane.net/blog/2011/low-rank-approximation/</link>
	<description>&lt;p&gt;A little experiment to see what low rank approximation looks like. These are the best rank-k approximations (in the Frobenius norm) to the a natural image for increasing values of k and an original image of rank 512.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/11/animation1.gif&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/11/animation1.gif&quot; title=&quot;Low-rank approximation for the Lena Image&quot; height=&quot;400&quot; width=&quot;600&quot; alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1156&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python code can be found &lt;a href=&quot;https://gist.github.com/1342033&quot;&gt;here&lt;/a&gt;. GIF animation made using ImageMagic’s convert script.&lt;/p&gt;</description>
	<pubDate>Sun, 06 Nov 2011 10:05:09 +0000</pubDate>
</item>
<item>
	<title>Vladimir Perić: GSoC: Final Report</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8814696591561172392.post-7396657487035470347</guid>
	<link>http://vperic.blogspot.com/2011/11/gsoc-final-report.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;My project, officially named just &quot;Porting to Python 3&quot;, is actually divided into two separate (albeit mutually complimentary) parts: my first goal was to set up a testing framework, to ensure continuous testing of SymPy across different versions of Python. SymPy used to have a server that ran buildbot, but it stopped working some time ago. This was to provide a solid base for working on my main project, making the code Python 3 compatible. As this was to be done with a single code-base, I estimated (correctly) that these could lead to subtle incompatibilities between various Python versions. Time permitting, I also intended to leverage this framework and my knowledge to get SymPy compatible with PyPy, too. The original application can be seen at the SymPy Wiki, &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Application%3A-Vladimir-Peri%C4%87%3A-Porting-to-Python-3&quot;&gt;here&lt;/a&gt;. More details about my progress can also be found in &lt;a href=&quot;http://vperic.blogspot.com/&quot;&gt;my blog&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;Testing framework&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;As mentioned above, SymPy used to use buildbot, so this was my first choice. I also read about Tox, a tool that is written for the sole purpose of testing Python programs under various conditions (different interpreters, presence or lack of certain dependencies), which also provides good integration with Jenkins, a well known server for continuous integration. My initial thoughts on this are in &lt;a href=&quot;http://vperic.blogspot.com/2011/05/continuous-integration-and-sympy.html&quot;&gt;one of my first blog posts&lt;/a&gt;, where I had decided to use Tox and then later try to integrate it with Jenkins, to form a fully functioning CI server. While Tox was immediately useful (here's &lt;a href=&quot;http://vperic.blogspot.com/2011/06/setting-up-and-using-tox-in-sympy.html&quot;&gt;a post on setting up and using it&lt;/a&gt;), the integration with Jenkins proved to be more arduous than my initial tests showed. In retrospect, perhaps I should have given buildbot a more thorough look later, rather than eliminate it so early. Furthermore, while I saw Tox as a great tool, the uptake among other developers has been.. less than stellar (other than Aaron, I'm not aware of anyone using it regularly).&lt;br /&gt;&lt;br /&gt;Fortunately, parallel to me setting up Tox/Jenkins, work was progressing on &lt;a href=&quot;https://github.com/sympy/sympy-bot&quot;&gt;sympy-bot&lt;/a&gt;. The main need for continuous integration came from a desire to review all pull requests and test them for errors - while bigger companies and projects might need real CI, all of SymPy's code gets in through the GitHub pull request system, so theoretically it should be enough to just thoroughly test every pull request; sympy-bot was developed with this purpose in mind. Designed to be ran manually, it still has the basic functionality which I couldn't manage to replicate in Jenkins: run the test suite and post the results back. Work on it has also quickened somewhat in the last couple of months, and &lt;i&gt;I now consider further development of sympy-bot a better idea than working more with Jenkins.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;Python 3 porting&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Even with the relative failure of setting up a robust testing framework, my main project was also progressing. Due to the nature of the issue, progress was somewhat sporadic and didn't proceed at a steady pace. This was particularly apparent during the start - I was simply stumped by some of the errors I was getting and couldn't get around them; once I made a key breakthrough, I was quickly able to get SymPy importable under Python 3, though this only happened &lt;a href=&quot;http://vperic.blogspot.com/2011/06/gsoc-week-5-sympy-now-runs-in-python-3.html&quot;&gt;by week five&lt;/a&gt;. The rest of my summer was spent hunting down the remaining errors, which was interesting at first but got very tiresome by the end. In fact, at the end Mateusz had to step in and fix the remaining few failures as I simply couldn't bring myself to look at them &lt;i&gt;yet again&lt;/i&gt;. Thanks Mateusz! [Mateusz also did a lot of work on improving PyPy support, something for which I simply didn't find the time, so double thanks to Mateusz!]&lt;br /&gt;&lt;br /&gt;One issue that arose early during the porting process was the (un)bundling of libraries with SymPy. SymPy bundled Pyglet and mpmath. Bundling the first was probably a bad idea at the start, and it was finally removed by Stefan Krastanov sometime early in the summer to unanimous approval. Unbundling mpmath was a more contentious issue, it sparked &lt;a href=&quot;https://code.google.com/p/sympy/issues/detail?id=2482&quot;&gt;a very lively discussion on the issue tracker&lt;/a&gt;. I won't rephrase it here, but in the end it was decided &lt;b&gt;not&lt;/b&gt; to unbudle it. This meant that I had to write a custom tool to handle calling 2to3: we needed to avoid calling it on the mpmath/ directories, because mpmath is already py3k compatible (and running 2to3 on such code produces bad code).&lt;br /&gt;&lt;br /&gt;It was ultimately decided that this tool will live in bin/use2to3 and work by creating a Python 3-compatible version of the source code in a py3k-sympy/ subdirectory (originally sympy-py3k/ but that interfered too much with tab-completion!), from which SymPy could then be ran normally under Python 3. While I initially had misgivings about the script, I now think it's quite powerful. It's not the most ideal solution, but it does work and was the last missing link in seamless Python 3 support (eg. it also corrects shebangs and fixes some whitespace issues caused by 2to3).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Officially, my project was a success, but I really couldn't have done it without the help of other developers working on SymPy, in particular Ronan, Aaron and Mateusz. Beyond the GSoC period, I've got every intention to continue working with SymPy, as I think I've already shown with the few pull requests I've submitted since; I have also decided to take a more active role in helping with the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GCI-2011-Organization-Application&quot;&gt;Google Code-In project&lt;/a&gt; (assuming SymPy is accepted). As for my project, I intend to focus more on the infrastructure needed to support SymPy, rather than the math issues. Still, as my knowledge of math and SymPy internals increases, I'm sure I'll find other places to contribute as well.&lt;br /&gt;&lt;br /&gt;To future GSoC students, I suggest maintaining good communication links and trying to be involved with the project as much as possible. Good communication with the core developers and general awareness of the current state of SymPy helped me a lot. While this was arguably more important for my project than others, at least &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig-Symbolic-Clebsch-Gordon-coefficients%3AWigner-symbols-and-Implementing-Addition-of-Spin-Angular-Momenta&quot;&gt;Sean Vig&lt;/a&gt; has also expressed regret at not being more involved. The second most important bit of advice is to try and split your work into multiple pull requests and try to get them merged as fast as possible. SymPy has a very rapid pace of development, and as such it is &lt;i&gt;always&lt;/i&gt; better to integrate sooner rather than later. This ties in to making good, atomic commits, but means more than that: your work should be clearly separated into small, logical chunks (&amp;lt;= 20 commits is my suggestion). A lot of the work done this summer has still to be integrated, or there were many troubles getting it finally in (eg. the physics.mechanics module). Finally, try to budget a lot of extra time in your project application - most of us are not experienced developers and cannot estimate the amount of work needed for something correctly. Plus, when some additional problems arise (and they &lt;i&gt;will&lt;/i&gt;), it's always better to have time set aside to deal with them.&lt;br /&gt; &lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8814696591561172392-7396657487035470347?l=vperic.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 31 Oct 2011 23:02:24 +0000</pubDate>
	<author>noreply@blogger.com (Vladimir Perić)</author>
</item>
<item>
	<title>Dale Peterson: The price of a single stitch</title>
	<guid isPermaLink="true">http://dlpeterson.com/blog/?p=175</guid>
	<link>http://dlpeterson.com/blog/?p=175</link>
	<description>&lt;p&gt;About 2 months ago on a Saturday evening, I was working on my bike and cut the middle joint of my index finger.  The cut was deep enough, and the hacksaw was dirty enough, that I knew that I needed get it looked by a doctor.  I looked up my health benefits on my insurance card and tried to find a clinic that was open at 9pm on a Saturday night.  Nothing was open anywhere.  So, my options were to wait until Monday, or go to the ER.  I choose to go to the ER.  They weren’t busy and I was in and out in less than 45 minutes.  They cleaned the wound and put a single stitch in it, then put a bit of neosporin on it and put a band aid on it.&lt;/p&gt;
&lt;p&gt;The total cost?  $1060.71.  Seriously?  Luckily I am insured, and I am only responsible for $100 of that.  I don’t know what the cost would have been if I had gone to a clinic during normal business hours (8am-5pm on a weekday).  &lt;/p&gt;
&lt;p&gt;If I didn’t have insurance, would I have gone?  I don’t think so.  With national unemployment at 9.1% it is a safe bet that at least 1 in 10, probably 1 in 5, either don’t have health insurance or have insurance that wouldn’t cover enough for them to be able to afford such a trip to the hospital to get a relatively minor finger injury taken care of properly.  So 1 in 5 wouldn’t get such a serious injury taken care of.  Imagine if it were a more serious injury.  This system is broken.&lt;/p&gt;</description>
	<pubDate>Sun, 30 Oct 2011 18:26:18 +0000</pubDate>
</item>
<item>
	<title>Fabian Pedregosa: qr_multiply function in scipy.linalg</title>
	<guid isPermaLink="false">http://fseoane.net/blog/?p=1062</guid>
	<link>http://fseoane.net/blog/2011/qr_multiply-function-in-scipy-linalg/</link>
	<description>&lt;p&gt;In scipy’s development version there’s a new function closely related to the &lt;a href=&quot;http://en.wikipedia.org/wiki/QR_decomposition&quot;&gt;QR-decomposition&lt;/a&gt; of a matrix and to the least-squares solution of a linear system.&lt;/p&gt;
&lt;p&gt;What this function does is to compute the QR-decomposition of a matrix and then multiply the resulting orthogonal factor by another arbitrary matrix. In pseudocode:&lt;/p&gt;
&lt;div style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot; class=&quot;codecolorer-container python default&quot;&gt;&lt;div style=&quot;&quot; class=&quot;python codecolorer&quot;&gt;&lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;def&lt;/span&gt; qr_multiply&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;X, Y&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;:&lt;br /&gt;
    Q, R = qr&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;X&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #ff7700; font-weight: bold;&quot;&gt;return&lt;/span&gt; dot&lt;span style=&quot;color: black;&quot;&gt;(&lt;/span&gt;Q.&lt;span style=&quot;color: black;&quot;&gt;T&lt;/span&gt;, Y&lt;span style=&quot;color: black;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but unlike this naive implementation, &lt;code&gt;qr_multiply&lt;/code&gt; is able to do all this &lt;b&gt;without&lt;/b&gt; explicitly computing the orthogonal Q matrix, resulting both in memory and time saving. In the following picture I measured the memory consumption as a function of time of running this computation on a 1.000 x 1.000 matrix X and a vector Y (full code can be found &lt;a href=&quot;https://gist.github.com/1287168&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/10/qr_multiply1.png&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/10/qr_multiply1-300x225.png&quot; title=&quot;Memory usage for a QR multiplication&quot; height=&quot;225&quot; width=&quot;300&quot; alt=&quot;&quot; class=&quot;aligncenter size-medium wp-image-1076&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It can be seen that not only &lt;code&gt;qr_multiply&lt;/code&gt; is almost twice as fast as the naive approach, but also that the memory consumption is significantly reduced, since the orthogonal factor is never explicitly computed.&lt;/p&gt;
&lt;p&gt;Credit for implementing the qr_multiply function goes to &lt;a href=&quot;https://github.com/tecki&quot;&gt;Martin Teichmann&lt;/a&gt;. &lt;/p&gt;</description>
	<pubDate>Fri, 14 Oct 2011 14:44:10 +0000</pubDate>
</item>
<item>
	<title>Dale Peterson: Matlab function syntax is abysmal</title>
	<guid isPermaLink="true">http://dlpeterson.com/blog/?p=172</guid>
	<link>http://dlpeterson.com/blog/?p=172</link>
	<description>&lt;p&gt;Today I was helping some undergraduates in a mechanical vibrations course to use ode45.  The way you specify the right hand side of the ode’s must fit Matlab’s particular form (using an @ before the function name, which must be contained in a file of the same name, with a ‘.m’ extension).  Looking at the documentation, I found this gem that really made me want to suck start a shotgun:&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
One way to provide additional parameters to a functional argument of a function function is to write a file that:&lt;br /&gt;
  -- Accepts the additional parameters as inputs&lt;br /&gt;
  -- Invokes the function function&lt;br /&gt;
  -- Contains the function called by the function function as a nested function&lt;br /&gt;
&lt;/code&gt;&lt;br /&gt;
That last one is a real doozy.  Try saying that 5 times real fast, then explain what the hell it means to an undergrad.  I’d rather explain what a pointer to pointer to char is, personally.&lt;/p&gt;</description>
	<pubDate>Wed, 12 Oct 2011 00:40:14 +0000</pubDate>
</item>
<item>
	<title>Fabian Pedregosa: scikit-learn 0.9</title>
	<guid isPermaLink="false">http://fseoane.net/blog/?p=1048</guid>
	<link>http://fseoane.net/blog/2011/scikit-learn-0-9/</link>
	<description>&lt;p&gt;Last week we released a new version of scikit-learn. The &lt;a href=&quot;http://scikit-learn.sourceforge.net/stable/whats_new.html&quot;&gt;Changelog is particularly impressive&lt;/a&gt;, yet personally this release is important for other reasons. &lt;/p&gt;
&lt;p&gt;This will probably be my last release as a paid engineer. I’m starting a PhD next month, and although I plan to continue contributing to the project and make a few more releases, I will certainly have less time to devote to it. Luckily, I received a lot of help from the community while preparing the release, from Changelog writing to build of Windows binaries, thus I expect the transition to go smoothly.&lt;/p&gt;
&lt;p&gt;Almost two years have elapsed since the first 0.1 release. During this time, we did a lot of refactoring and broke the API several times. However, I’ve seen some concerns about API stability both at the EuroScipy conference and in the mailing list where I’ve realized we need to provide an API that does not break in every release, and do this in a way that the project remains fun for developers.&lt;/p&gt;
&lt;p&gt; That’s why I’m extremely glad to see that although this release is big in changes, these have been made in a more organized manner. Yes, we’ve broken the API once again, but now there’s a compatibility layer that ensures that code written for 0.8 will continue working with the new release. &lt;/p&gt;</description>
	<pubDate>Sun, 02 Oct 2011 09:19:57 +0000</pubDate>
</item>
<item>
	<title>Fabian Pedregosa: Reworked example gallery for scikit-learn</title>
	<guid isPermaLink="false">http://fseoane.net/blog/?p=1017</guid>
	<link>http://fseoane.net/blog/2011/reworked-example-gallery-for-scikit-learn/</link>
	<description>&lt;p&gt;I’ve been working lately in improving the scikit-learn example gallery to show also a small thumbnail of the plotted result. Here is what the gallery looks like now&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://scikit-learn.sourceforge.net/dev/auto_examples/index.html&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/09/Screenshot-Examples-—-scikit-learn-v0.9-git-documentation-Google-Chrome.png&quot; alt=&quot;&quot; width=&quot;600&quot; title=&quot;Screenshot-Examples&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;And the real thing should be already displayed in the &lt;a href=&quot;http://scikit-learn.sourceforge.net/dev/auto_examples/index.html&quot;&gt;development documentation&lt;/a&gt;. The next thing is to add a static image to those that don’t generate any result, examples such as the &lt;a href=&quot;http://scikit-learn.sourceforge.net/dev/auto_examples/applications/svm_gui.html&quot;&gt;SVM GUI&lt;/a&gt; should have an image to display.&lt;/p&gt;</description>
	<pubDate>Sun, 04 Sep 2011 18:09:02 +0000</pubDate>
</item>
<item>
	<title>Fabian Pedregosa: scikit-learn’s EuroScipy 2011 coding sprint — day two</title>
	<guid isPermaLink="false">http://fseoane.net/blog/?p=999</guid>
	<link>http://fseoane.net/blog/2011/scikit-learn%e2%80%99s-euroscipy-2011-coding-sprint-day-two/</link>
	<description>&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/all.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/all-300x225.jpg&quot; title=&quot;scikit-learn coding sprint&quot; height=&quot;225&quot; width=&quot;300&quot; alt=&quot;&quot; class=&quot;aligncenter size-medium wp-image-1001&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today’s coding sprint was a bit more crowded, with some notable scipy hackers such as Ralph Gommers, &lt;a href=&quot;http://mentat.za.net/&quot;&gt;Stefan van der Walt&lt;/a&gt;, &lt;a href=&quot;http://cournape.wordpress.com/&quot;&gt;David Cournapeau&lt;/a&gt; or &lt;a href=&quot;http://blog.fperez.org/&quot;&gt;Fernando Perez&lt;/a&gt; from Ipython joining in. On what got done:&lt;/p&gt;
&lt;p&gt;  – We merged &lt;a href=&quot;http://www.astro.washington.edu/users/vanderplas/&quot;&gt;Jake&lt;/a&gt;‘s new BallTree code. This is a pure Cython implementation of a nearest-neighbor search similar to the KDTree class in scipy.spatial, but much faster. The code looks awesome and it’s a big speedup compared to the older code.&lt;/p&gt;
&lt;p&gt;  – Vlad is ready to merge his&lt;a href=&quot;https://github.com/scikit-learn/scikit-learn/pull/221&quot;&gt; dictionary learning code&lt;/a&gt;, something that should happen in the upcoming days.&lt;/p&gt;
&lt;p&gt;  – Initial support for Python 3. scikit-learn should now at least build and import cleanly under Python 3.&lt;/p&gt;
&lt;p&gt;  – some bugfixes in the Pipeline object and in docstrings.&lt;/p&gt;
&lt;p&gt;So this was the end of the scikit-learn sprint, but EuroScipy has just begun. See you tomorrow at the conference (follow the signs)!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0093.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0093-202x300.jpg&quot; title=&quot;IMG_0093&quot; height=&quot;300&quot; width=&quot;202&quot; alt=&quot;&quot; class=&quot;alignleft size-medium wp-image-1003&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0092.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0092-189x300.jpg&quot; title=&quot;yannick&quot; height=&quot;300&quot; width=&quot;189&quot; alt=&quot;&quot; class=&quot;alignleft size-medium wp-image-1004&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
–
&lt;/div&gt;</description>
	<pubDate>Wed, 24 Aug 2011 22:33:10 +0000</pubDate>
</item>
<item>
	<title>Fabian Pedregosa: scikit-learn’s EuroScipy 2011 coding sprint  — day one</title>
	<guid isPermaLink="false">http://fseoane.net/blog/?p=974</guid>
	<link>http://fseoane.net/blog/2011/scikit-learns-euroscipy-2011-coding-sprint-day-one/</link>
	<description>&lt;p&gt;As a warm-up for the upcoming &lt;a href=&quot;http://www.euroscipy.org/conference/euroscipy2011&quot;&gt;EuroScipy conference&lt;/a&gt;, some of the &lt;a href=&quot;http://scikit-learn.sf.net&quot;&gt;scikit-learn&lt;/a&gt; developers decided to gather and work together for a couple of days.&lt;/p&gt;
&lt;p&gt;Today was the first day and there was only a handfull of us, as the real kickoff is expected tomorrow. Some interesting coding happened, although most of us where still preparing material for the EuroScipy tutorials …&lt;/p&gt;
&lt;p&gt;    – API changes: remove of keyword parameters to &lt;i&gt;fit&lt;/i&gt; method, added method &lt;i&gt;set_params&lt;/i&gt;  (&lt;a href=&quot;https://github.com/scikit-learn/scikit-learn/pull/306&quot;&gt;pull request&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;    – Some bugfixing in NuSVR (&lt;a href=&quot;https://github.com/scikit-learn/scikit-learn/pull/315&quot;&gt;pull request&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;    – Review of &lt;a href=&quot;http://vene.ro&quot;&gt;Vlad&lt;/a&gt;‘s code, developed during his Summer of Code program.&lt;/p&gt;
&lt;p&gt;    – A lot of discussion about algorithm, code, APIs and buildbot dance !&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0076.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0076-150x150.jpg&quot; title=&quot;varokoo&quot; height=&quot;150&quot; width=&quot;150&quot; alt=&quot;&quot; class=&quot;alignleft size-thumbnail wp-image-977&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-3.png&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-3-150x150.png&quot; title=&quot;Olivier Grisel&quot; height=&quot;150&quot; width=&quot;150&quot; alt=&quot;&quot; class=&quot;alignleft size-thumbnail wp-image-979&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0074.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/IMG_0074-150x150.jpg&quot; title=&quot;Vlad&quot; height=&quot;150&quot; width=&quot;150&quot; alt=&quot;&quot; class=&quot;alignleft size-thumbnail wp-image-982&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-5.png&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/Picture-5-150x150.png&quot; title=&quot;Me and Jean&quot; height=&quot;150&quot; width=&quot;150&quot; alt=&quot;&quot; class=&quot;alignleft size-thumbnail wp-image-986&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/emanuelle.jpg&quot;&gt;&lt;img src=&quot;http://fseoane.net/blog/wp-content/uploads/2011/08/emanuelle-150x150.jpg&quot; title=&quot;emanuelle&quot; height=&quot;150&quot; width=&quot;150&quot; alt=&quot;&quot; class=&quot;alignleft size-thumbnail wp-image-990&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
–
&lt;/div&gt;</description>
	<pubDate>Tue, 23 Aug 2011 19:38:09 +0000</pubDate>
</item>
<item>
	<title>Sean Vig: Finishing GSoC</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8510171342300140296.post-4221049810717497721</guid>
	<link>http://seanvig.blogspot.com/2011/08/finishing-gsoc.html</link>
	<description>So this is the last week of the GSoC program. I'll be writing up a full report on what I've done over the summer &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Sean-Vig&quot;&gt;here&lt;/a&gt; and it will be updated over this next week. This blog post will be recapping this last week of progress and looking forward past the GSoC.&lt;br /&gt;&lt;br /&gt;The main thing to report with this last week was the finishing the work on the spin coupling work that was laid out last week and the writing of the code for Coupled spin states, the last pull request I'll get in during the GSoC project is currently open and should only need a last bit of code review to get pulled.&lt;br /&gt;&lt;br /&gt;The main thing now is moving beyond the work that will be done during the GSoC project. While I'll be starting classes this next week and I have my qual the next week, so work will definitely slow down. However, this last week, I worked on the multi_coupling branch, which takes the coupling work that is in the current pull and expands it to allow for an arbitrary number of spin bases. The first thing to implement with this was a means of representing the coupling between the spin bases, since the order in which spaces are coupled matters. To do this, I added a jcoupling option to the functions that deal with coupled states. It currently seems pretty messy, but I'm not sure of a better way to do it, as coupling multiple spaces will just pick up a bunch of additional quantum numbers that need to be represented somehow. Basically, this parameter is passed as a list of lists, where each element of the outermost list represents a coupling between two spin spaces. These inner lists have 3 elements, 2 giving the number of the space that is being coupled and the third being the j value of these spaces coupled together. For example, if we wanted to represent a state |j,m,j1,j2,(j12),j3&amp;gt;, the jcoupling would be ( (1,2,j12), ). If this option is not set, then the methods default to coupling the spaces in numerical order, i.e. 1 and 2, then 1,2 and 3, etc. Using this, I have been able to rewrite the uncouple code. The results do not yet have tests, and I'll definitely need to do some calculations by hand to make sure this is working properly, but looking at it, I am pretty confident in the results, tho the code could use some cleaning up.&lt;br /&gt;&lt;br /&gt;Moving forward from this would be to get the couple method working with arbitrary spin spaces and run through all of the functions that deal with spin coupling and make sure nothing is still hard coded to use two spin bases. Other than that, the project that I'd set out to work on has been basically completed. I'll continue to work with and develop sympy when I have some spare and hopefully continue to add features and functionality to the quantum module.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-4221049810717497721?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 20 Aug 2011 04:37:48 +0000</pubDate>
	<author>noreply@blogger.com (Sean Vig)</author>
</item>
<item>
	<title>Vladimir Perić: GSoC: final week</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8814696591561172392.post-3859482934470016015</guid>
	<link>http://vperic.blogspot.com/2011/08/gsoc-final-week.html</link>
	<description>Well, I obviously haven't kept up with my blogging. Partly this is because there wasn't too much to report - I've been stuck at the few remaining bugs for a couple of weeks now and just couldn't make myself go at them for real. Still, I've now tentatively submitted &lt;a href=&quot;https://github.com/sympy/sympy/pull/558&quot;&gt;a &quot;final&quot; pull request&lt;/a&gt;, which has some misc fixes and more importantly adds the &quot;use2to3&quot; script that will form the basis of our Python 3 support. The idea is to run the script, which will create a &quot;sympy-py3k&quot; directory, which is a copy of the SymPy directory structure but with 2to3 ran where required. It should then be possible to use SymPy normally under Python 3 from that folder (even installing it). Now, this script could do with some improvements (looking at &quot;git ls-files&quot; instead of traversing the whole dir structure for one), but most importantly it is &lt;i&gt;not really well tested&lt;/i&gt;. I've only tested it on my computer and while it should be sound there have already been some problems reported (in the pull request). Still, the script should hopefully be robust and so, if you have the time and/or care about Python 3 support at all: &lt;i&gt;please&lt;/i&gt; try out the script and see if it breaks. You can get it in my &quot;porting4&quot; branch.&lt;br /&gt;&lt;br /&gt;Now, there are some issues remaining (Ronan is working on &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2574&quot;&gt;the LambertW issue&lt;/a&gt; and the other two, &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2609&quot;&gt;test_priority error&lt;/a&gt; and &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2611&quot;&gt;tensor doctest failures&lt;/a&gt; are on the issue tracker), but I still consider my project as successful. Python 3 support is a moving target anyway (all new code that gets in is another potential error, at least until people start actively testing it) and I also expect issues to crop up that just aren't covered by the test suite. For the moment, Python 3 support can be considered an experimental, dev feature and I'd like to keep it that way for a few weeks before considering a release. Again, if you are interested in Python 3 support, please try it out, start using it for your normal work and note if something unexpected comes up. &lt;br /&gt;&lt;br /&gt;For the foreseeable future, I definitely intend to stay with SymPy. I found the hacking genuinely interesting and would like to finish my stated goals of achieving both Python 3 and PyPy compatibility. Part of my reasoning is completely selfish - I expect these skills to be quite valuable in the near future and hacking one a code base as large as SymPy is bound to teach me a few tricks. Mostly, though, I'd just like to make SymPy better - my line of thought being, if I can do the mundane infrastructure work, then that will enable the mathematicians and physicists among us to implement more cool algorithms. &lt;br /&gt;&lt;br /&gt;I'd also like to extend my thanks to Ronan Lamy, my mentor, who was kind enough to solve a few issues for me and for generally always being around to point me in the right direction; to Aaron Meurer, the maintainer of SymPy, who always had the time for a detailed review of my code, even if our views didn't always coincide :) (&lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2482&quot;&gt;mpmath, anyone?&lt;/a&gt;); and finally, to all the other devs in SymPy who've helped me by reviewing my code and for making such a great program in the first place! &lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8814696591561172392-3859482934470016015?l=vperic.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 19 Aug 2011 19:39:38 +0000</pubDate>
	<author>noreply@blogger.com (Vladimir Perić)</author>
</item>
<item>
	<title>Aaron Meurer: sqrt(x) now prints as &quot;sqrt(x)&quot;</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1042</guid>
	<link>http://asmeurersympy.wordpress.com/2011/08/18/sqrtx-now-prints-as-sqrtx/</link>
	<description>&lt;p&gt;Just a few moments ago, &lt;a href=&quot;https://github.com/sympy/sympy/pull/548&quot; target=&quot;_blank&quot;&gt;a branch&lt;/a&gt; was pushed in that fixed one of my biggest grievances in SymPy, if not the biggest.  Previously we had this behavior:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: sqrt(x)
Out[1]: x**(1/2)

In [2]: solve(x**2 - 2, x)
Out[2]: [-2**(1/2), 2**(1/2)]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Now suppose you took the output of those expressions and pasted them into isympy:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [3]: x**(1/2)
Out[3]: x**0.5

In [4]: [-2**(1/2), 2**(1/2)]
Out[4]: [-1.41421356237, 1.41421356237]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;That’s with &lt;code&gt;__future__.division&lt;/code&gt;.  Here’s what would happen with old division:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [2]: x**(1/2)
Out[2]: 1

In [3]: [-2**(1/2), 2**(1/2)]
Out[3]: [-1, 1]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This is because with old division, &lt;code&gt;1/2&lt;/code&gt; evaluates to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem is that Python evaluates &lt;code&gt;1/2&lt;/code&gt; to &lt;code&gt;0.5&lt;/code&gt; (or &lt;code&gt;0&lt;/code&gt;) before SymPy has a change to convert it to a Rational.  There were several ways that people got around this.  If you copy an expression with number division in it and want to paste it into a SymPy session, the easiest way to do this was to pass it as a string to &lt;code&gt;sympify()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: sympify(&quot;x**(1/2)&quot;)
Out[1]: x**(1/2)

In [2]: sympify(&quot;[-2**(1/2), 2**(1/2)]&quot;)
Out[2]: [-2**(1/2), 2**(1/2)]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;If that was too much typing for you, you could use the &lt;code&gt;S()&lt;/code&gt; shortcut to &lt;code&gt;sympify()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [3]: S(&quot;x**(1/2)&quot;)
Out[3]: x**(1/2)

In [4]: S(&quot;[-2**(1/2), 2**(1/2)]&quot;)
Out[4]: [-2**(1/2), 2**(1/2)]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This solution is fine if you want to paste an expression into a SymPy session, but it’s not a very clean one if you want to paste code into a script. For that, you need to modify the code so that it no longer contains Python int/Python int.  The easiest way to do this is to sympify one of the ints.  So you would do something like&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [5]: x**(S(1)/2)
Out[5]: x**(1/2)

In [6]: [-2**(S(1)/2), 2**(S(1)/2)]
Out[6]: [-2**(1/2), 2**(1/2)]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This wasn’t terribly readable, though.  The &lt;em&gt;best&lt;/em&gt; way to fix the problem when you had a power of one half was to use &lt;code&gt;sqrt()&lt;/code&gt;, which is a shortcut to &lt;code&gt;Pow(…, Rational(1, 2))&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Well, this last item should make you think.  If &lt;code&gt;sqrt(x)&lt;/code&gt; is more readable than &lt;code&gt;x**(S(1)/2)&lt;/code&gt; or even &lt;code&gt;x**(1/2)&lt;/code&gt;, why not print it like that in the first place.  Well, I thought so, so I changed the string printer, and now this is the way that SymPy works.  So 90% of the time, you can just paste the result of &lt;code&gt;str()&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt;, and it will just work, because there won’t be any &lt;code&gt;**(1/2)&lt;/code&gt;, which was by far the most common problem of “Python evaluating the expression to something before we can.”  In the git master, SymPy now behaves like&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: sqrt(x)
Out[1]: sqrt(x)

In [2]: solve(x**2 - 2, x)
Out[2]: [-sqrt(2), sqrt(2)]
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;You can obviously just copy and paste these results, and you get the exact same thing back.  Not only does this make expressions more copy-and-pastable, but the output is &lt;em&gt;much&lt;/em&gt; nicer in terms of readability.  Here are some before and afters that come from actual SymPy doctests that I had to change after fixing the printer:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;Before:
&amp;gt;&amp;gt;&amp;gt; e = ((2+2*sqrt(2))*x+(2+sqrt(8))*y)/(2+sqrt(2))
&amp;gt;&amp;gt;&amp;gt; radsimp(e)
2**(1/2)*x + 2**(1/2)*y

After:
&amp;gt;&amp;gt;&amp;gt; radsimp(e)
sqrt(2)*x + sqrt(2)*y
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;Before:
&amp;gt;&amp;gt;&amp;gt; b = besselj(n, z)
&amp;gt;&amp;gt;&amp;gt; b.rewrite(jn)
2**(1/2)*z**(1/2)*jn(n - 1/2, z)/pi**(1/2)

After:
&amp;gt;&amp;gt;&amp;gt; b.rewrite(jn)
sqrt(2)*sqrt(z)*jn(n - 1/2, z)/sqrt(pi)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;Before:
&amp;gt;&amp;gt;&amp;gt; x = sympify('-1/(-3/2+(1/2)*sqrt(5))*sqrt(3/2-1/2*sqrt(5))')
&amp;gt;&amp;gt;&amp;gt; x
(3/2 - 5**(1/2)/2)**(-1/2)

After
&amp;gt;&amp;gt;&amp;gt; x
1/sqrt(3/2 - sqrt(5)/2)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;And not only is &lt;code&gt;sqrt(x)&lt;/code&gt; easier to read than &lt;code&gt;x**(1/2)&lt;/code&gt; but it’s fewer characters.&lt;/p&gt;
&lt;p&gt;In the course of changing this, I went ahead and did some greps of the repository to get rid of all &lt;code&gt;**(S(1)/2)&lt;/code&gt;, &lt;code&gt;**Rational(1, 2)&lt;/code&gt; and similar throughout the code base (not just in the output of doctests where the change had to be made), replacing them with just &lt;code&gt;sqrt&lt;/code&gt;.  Big thanks to Chris Smith for helping me catch all instances of this.  Now the code should be a little easier to read and maintain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future Work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a big change, and I believe it will fix the copy-paste problem for 90% of expressions. But it does not solve it completely.  It is still possible to get int/int in the string form of an expression.  Only powers of 1/2 and -1/2 are converted to sqrt, so any other rational power will still print as a/b, like&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [1]: x**Rational(3, 2)
Out[1]: x**(3/2)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Also, as you may have noticed in the last example above, a rational number that sits by itself will still be printed as int/int, like&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [2]: (1 + x)/2
Out[2]: x/2 + 1/2
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Therefore, I’m leaving the &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2359&quot; target=&quot;_blank&quot;&gt;issue for this&lt;/a&gt; open to discuss potential future fixes to the string printer.  One idea is to create a &lt;code&gt;root&lt;/code&gt; function that is a shortcut to &lt;code&gt;root(x, a) == x**(1/a)&lt;/code&gt;. This would work for rational powers where the numerator is 1.  For other rational powers, we could then denest these with an integer power.  It’s important to do this in the right order, though, as they are not equivalent.  You can see that SymPy auto-simplifies it when it is mathematically correct in all cases, and not when it is not:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;In [3]: sqrt(x**3)
Out[3]: sqrt(x**3)

In [4]: sqrt(x)**3
Out[4]: x**(3/2)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Thus &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cleft%28%5Csqrt%7Bx%7D%5Cright%29%5E3+%3D+x%5E%7B%5Cfrac%7B3%7D%7B2%7D%7D&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\left(\sqrt{x}\right)^3 = x^{\frac{3}{2}}&quot; class=&quot;latex&quot; title=&quot;\left(\sqrt{x}\right)^3 = x^{\frac{3}{2}}&quot; /&gt; but &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csqrt%7Bx%5E3%7D+%5Cneq+x%5E%7B%5Cfrac%7B3%7D%7B2%7D%7D&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\sqrt{x^3} \neq x^{\frac{3}{2}}&quot; class=&quot;latex&quot; title=&quot;\sqrt{x^3} \neq x^{\frac{3}{2}}&quot; /&gt; (to see this, replace &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; with -1).&lt;/p&gt;
&lt;p&gt;So the idea would be to print &lt;code&gt;Pow(expr, Rational(a, b))&lt;/code&gt; as &lt;code&gt;root(expr, b)**a&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;The merits of this are debatable, but anyway I think we should have this &lt;code&gt;root()&lt;/code&gt; function in any case (see &lt;a href=&quot;http://code.google.com/p/sympy/issues/detail?id=2643&quot; target=&quot;_blank&quot;&gt;issue 2643&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Another idea, which is probably not a good one, is to always print &lt;code&gt;int/int&lt;/code&gt; as &lt;code&gt;S(int)/int&lt;/code&gt;.  So we would get&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Rational(1, 2)
S(1)/2
&amp;gt;&amp;gt;&amp;gt; x**Rational(4, 5)
x**(S(4)/5)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This is probably a bad idea because even though expressions would always be copy-pastable, they would be slightly less readable.  &lt;/p&gt;
&lt;p&gt;By the way, in case you didn’t catch it, all of these changes only affect the string printer.  The pretty printer remained unaffected, and would under any additional changes, as it isn’t copy-pastable anyway, and already does a superb job of printing roots.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1042/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1042/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1042&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 18 Aug 2011 03:11:32 +0000</pubDate>
</item>
<item>
	<title>Saptarshi Mandal: Summer is ending :(</title>
	<guid isPermaLink="false">http://saptman.wordpress.com/?p=32</guid>
	<link>http://saptman.wordpress.com/2011/08/14/summer-is-ending/</link>
	<description>&lt;p&gt;A beautiful summer is coming to an end and I am at the last leg of my Gsoc. I must apologize for the erratic posts but its mostly because I was “busy” with other things (mostly enjoying myself in the US of A, eating steaks, going out for barbecues, and enjoying the beautiful Maryland summer weather.)&lt;/p&gt;
&lt;p&gt;In the last few weeks I spent a bit of time cleaning up Gray code. It went through a few API changes and I hope to have the subsets and partitions branches merged in within this week. I also implemented a demo of the Permutations branch that involves Polyhedron rotations. I hope to show one involving a Rubik’s cube when I have the Permutation group module in (more on that in a while). I also implemented a residue class and a residue group module as that was missing in the number theory branch of Sympy. That branch needs an overhaul both in terms of functionality as well as the code that is already there and I hope I can get some momentum going in that direction with the code I have written. I also wrote some generators for Permutation groups. This is fairly easy to do now, the basic algorithm is to generate all permutations and filter out those that do not fit the criteria. Of course, generating all permutations is inefficient, and some generators have certain special properties that we can use. For example, the Cyclic group can be generated in linear time as that simply involves a single rotation. Alternating group however requires the generation of all even permutations. Some group generators will probably make use of the specialized algorithms that have been implemented in the iterables section of Sympy.&lt;/p&gt;
&lt;p&gt;I have also managed to implement the Schreier sims algorithm but its extremely ugly and unpythonic for now. Algorithms for generating orbits and stabilizer chains are also there but they are fairly inefficient. I hope to clean them up and submit them for a pull request in this week before the hard pencils down date.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/saptman.wordpress.com/32/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/saptman.wordpress.com/32/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=saptman.wordpress.com&amp;amp;blog=23040289&amp;amp;post=32&amp;amp;subd=saptman&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 14 Aug 2011 21:25:54 +0000</pubDate>
</item>
<item>
	<title>Tomo Lazovich: Cool results in represent</title>
	<guid isPermaLink="false">http://lazovichsympy.wordpress.com/?p=91</guid>
	<link>http://lazovichsympy.wordpress.com/2011/08/13/cool-results-in-represent/</link>
	<description>&lt;p&gt;This post right now is just a quick update with an example python session showing the cool things we can do in represent now, after a very hectic week of code writing. I’m currently in the process of finalizing things in the way that represent works, so I will post a &lt;em&gt;much&lt;/em&gt; more detailed post at some point later, but right now I just want to show that we can actually do quantum mechanics in continuous bases! (In this case, with the particle in a box system).&lt;/p&gt;
&lt;p&gt;Here is an example python session with notes on the output:&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.quantum import *
&amp;gt;&amp;gt;&amp;gt; from sympy.physics.quantum.piab import *
&amp;gt;&amp;gt;&amp;gt; wf = represent(PIABKet())
&amp;gt;&amp;gt;&amp;gt; wf
Wavefunction(2**(1/2)*(1/L)**(1/2)*sin(pi*n*x_1/L), (x_1, 0, L))
&amp;gt;&amp;gt;&amp;gt; wf.norm
1&lt;/pre&gt;
&lt;div id=&quot;:2qo&quot;&gt;
&lt;p&gt;We get a particle-in-the-box Wavefunction when it is represented and it’s properly normalized.&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; represent(XOp()*PIABKet())
Wavefunction(2**(1/2)*x_2*(1/L)**(1/2)*sin(pi*n*x_2/L), x_2)&lt;/pre&gt;
&lt;p&gt;We now get a wavefunction with an extra factor of x!&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; represent(PxOp()*PIABKet(), basis=XKet)
Wavefunction(-2**(1/2)*hbar*I*pi*n*(1/L)**(1/2)*cos(pi*n*x_2/L)/L, x_2)&lt;/pre&gt;
&lt;p&gt;The PxOp actually takes the derivative of the wavefunction correctly! (Momentum operators in the position basis are differential operators).&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; represent(PIABBra()*XOp()*PIABKet(), basis=XKet)
0&lt;/pre&gt;
&lt;p&gt;Here, we insert two unities. The first one integrated collapses a delta function, but the second one integrated actually computes the expectation value of x for the particle-in-a-box wavefunction (which is what you expect from representing &amp;lt;psi|X|psi&amp;gt;).&lt;/p&gt;
&lt;p&gt;EDIT: As you’ll see in the comments, Raoul pointed out that this is actually incorrect, and I will be looking into it!&lt;/p&gt;
&lt;p&gt;There are still a few kinks being worked out, but we’re very close to having a nice finished product which is why I am reserving a longer post for tomorrow. I am quite pleased with the results we’re seeing so far though!&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/lazovichsympy.wordpress.com/91/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/lazovichsympy.wordpress.com/91/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;amp;blog=22774068&amp;amp;post=91&amp;amp;subd=lazovichsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 14 Aug 2011 03:39:06 +0000</pubDate>
</item>
<item>
	<title>Gilbert Gede: GSoC, Week 12</title>
	<guid isPermaLink="false">http://gilbertgede.wordpress.com/?p=82</guid>
	<link>http://gilbertgede.wordpress.com/2011/08/13/gsoc-week-12/</link>
	<description>&lt;p&gt;Well, this past week was the final “full” week of the 2011 Google Summer of Code. The ‘soft’ pencils down date is Monday.&lt;/p&gt;
&lt;p&gt;This week, I mostly rewrote interfaces to some functions and classes. I should probably go back through previous blog posts and update those to show how they are different, so if anyone comes across this in the future, there won’t be example code which doesn’t work. I also tried to finish up the documentation this week. I decided a little late in the week to add another page, a “advanced/future interfaces” page, to describe how some functions/classes have different interfaces (and their advantages/disadvantages) as well as some discussed extensions to the current interface (that probably won’t be implemented right now). Some of these things were: more ways to access basis vectors, more printing options, and more ways to initialize the Kane object. Like I said, I don’t think I’ll be able to implement these now. I think I’ll try and do those three things this Fall though.&lt;/p&gt;
&lt;p&gt;I also went through an example of bringing non-contributing forces into evidence (I discussed this topic a little in last week’s blog post). With the changes to the Kane interface it has ended up working out quite nicely. I put some code for this into the examples section, so hopefully it will be relatively easy for others to figure out. I didn’t make as much progress as I’d like with the code output function, but I think it can do an adequate job at the moment. I also spent most of a day rebasing all of my code of the latest master. I’m not sure what I did wrong, but somehow, I managed to get double commits again, so I took care of this. I think it might have been how I branched, rebased on one branch, then merged? It took some time to sort out.&lt;/p&gt;
&lt;p&gt;I see there being two more things to do. The first is updating the images I have in the documentation; they’re all hand-drawn and of low quality. I plan on spending a little time this weekend on that, as well as Monday. The other thing is updating my pull request, getting others to look at it, and making necessary changes (and hopefully during this time, I’ll be able to check out other people’s pull requests and help them). Working with the pull request will probably take longer than updating the images…&lt;/p&gt;
&lt;p&gt;Anyways, this is the last required blog post, but I think I’ll do at least one more as part of the Summer of Code, to wrap things up, and maybe introduce one more example.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/gilbertgede.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/gilbertgede.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=gilbertgede.wordpress.com&amp;amp;blog=22677911&amp;amp;post=82&amp;amp;subd=gilbertgede&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy sd-like-enabled&quot;&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 13 Aug 2011 15:46:15 +0000</pubDate>
</item>
<item>
	<title>Matthew Rocklin: Week 12: Pull Requests</title>
	<guid isPermaLink="false">http://sympystats.wordpress.com/?p=239</guid>
	<link>http://sympystats.wordpress.com/2011/08/13/week-12-pull-requests/</link>
	<description>&lt;p&gt;As before, not much to report. Slow plodding through testing, bug fixing, etc….&lt;/p&gt;
&lt;p&gt;I have a pull request here for Matrix Expressions&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/532&quot;&gt;https://github.com/sympy/sympy/pull/532&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My branch for Finite and Continuous Random Variables is below. It doesn’t have a pull request yet (I’m waiting for Tom’s code to get in) but I’d be thrilled if anyone wanted to look it over in the meantime.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mrocklin/sympy/tree/rv2&quot;&gt;https://github.com/mrocklin/sympy/tree/rv2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is another branch for Multivariate Random Normals that depends on the previous two. I suspect that it might have to change based on feedback from the previous two branches. It’s probably not worth reviewing at this point but, if you’re interested, here it is.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mrocklin/sympy/tree/mvn_rv&quot;&gt;https://github.com/mrocklin/sympy/tree/mvn_rv&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/sympystats.wordpress.com/239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/sympystats.wordpress.com/239/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sympystats.wordpress.com&amp;amp;blog=22550280&amp;amp;post=239&amp;amp;subd=sympystats&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 13 Aug 2011 15:04:26 +0000</pubDate>
</item>
<item>
	<title>Sean Vig: Getting coupled_spin merged</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8510171342300140296.post-984850516976455252</guid>
	<link>http://seanvig.blogspot.com/2011/08/getting-coupledspin-merged.html</link>
	<description>The biggest development this week was working out what is needed to get the coupled_spin which implements spin coupling merged back into master. There were some things to clean up with non-spin modules and a few minor things to address, but in cleaning this up, there will be some big changes to the way spin coupling works. First, with respect to things that have been implemented, rewrite and represent will no longer handle the coupling and uncoupling of states. To do coupling and uncoupling, instead, a couple and uncouple method will be created to handle the coupling and uncoupling of states. In addition, coupled states will now be represented by new classes, J?KetCoupled for the Cartesian directions. These will be returned by rewrite when a TensorProduct is coupled and will return the proper vector for the coupled space when it is represented and can be uncoupled when an uncoupled operator acts on it.&lt;br /&gt;&lt;br /&gt;Most of these new changes have been implemented to varying degrees. There is some functionality lacking, but much of what remains for this is to implement tests for the new functions and make sure everything is working properly.&lt;br /&gt;&lt;br /&gt;The coupling of arbitrary number of spin spaces had made slow progress due to some ambiguity when coupled states were created using normal states, but with the new Coupled classes, specifying the coupling should be possible, thus making the computations easier.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/tracker/8510171342300140296-984850516976455252?l=seanvig.blogspot.com&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 13 Aug 2011 01:50:40 +0000</pubDate>
	<author>noreply@blogger.com (Sean Vig)</author>
</item>
<item>
	<title>Tom Bachmann: Last Status Update (Probably)</title>
	<guid isPermaLink="false">http://nessgrh.wordpress.com/?p=366</guid>
	<link>http://nessgrh.wordpress.com/2011/08/12/last-status-update-probably/</link>
	<description>&lt;p&gt;Time flies by … I feel like I just started hyperexpand() yesterday (not quite actually; but you get the idea *g*). I’ve been moving around this week, so I wasn’t terribly productive so far. I did, however, compute (reasonably) neat representations for all the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7B%7D_pF_%7Bp-1%7D&amp;amp;bg=FFFFFF&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;{}_pF_{p-1}&quot; class=&quot;latex&quot; title=&quot;{}_pF_{p-1}&quot; /&gt; in the hyperexpand() table. These &lt;a href=&quot;http://pastebin.com/raw.php?i=fv9BNEMe&quot;&gt;examples&lt;/a&gt; demonstrate the kind of neat answers this can yield (compare to some of the examples from last week) [actually the tables contain some much more complicated functions, but I was not yet able to come up with interesting integrals that yield these answers *g*].&lt;/p&gt;
&lt;p&gt;My final plan, beyond mere cleanup and bugfixing, is to do something along the way of simplifying convergence conditions. This won’t be anything fancy (I’m thinking of peep-hole optimisation); my goal is to make mess like the &lt;a href=&quot;http://pastebin.com/raw.php?i=dYdgefP9&quot;&gt;following&lt;/a&gt; somewhat less horrific. I hope to have a final pull request ready by sunday night. Then I will finally slow down and relax; work towards merging my branches; perhaps review some other GSOC pull requests.&lt;/p&gt;
&lt;p&gt;Quite a summer.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/nessgrh.wordpress.com/366/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/nessgrh.wordpress.com/366/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=nessgrh.wordpress.com&amp;amp;blog=22546379&amp;amp;post=366&amp;amp;subd=nessgrh&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 12 Aug 2011 18:22:27 +0000</pubDate>
</item>
<item>
	<title>Jeremias Yehdegho: Week 12</title>
	<guid isPermaLink="false">http://f1728.wordpress.com/?p=234</guid>
	<link>http://f1728.wordpress.com/2011/08/12/week-12/</link>
	<description>&lt;p&gt;Hi everyone, welcome to one of the last updates. This week I finally finished FGLM without having to use &lt;code&gt;solve&lt;/code&gt;, which makes it quite fast. The problem I had was the following:&lt;/p&gt;
&lt;p&gt;Suppose you’re given a sequence of non-zero vectors &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v_1+%3D+%281%2C+0%2C+%5Cldots%2C+0%29%5Et%2C+%5Cldots%2C+v_r&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v_1 = (1, 0, \ldots, 0)^t, \ldots, v_r&quot; class=&quot;latex&quot; title=&quot;v_1 = (1, 0, \ldots, 0)^t, \ldots, v_r&quot; /&gt; one after the other. You know &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%3C+r&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n &amp;lt; r&quot; class=&quot;latex&quot; title=&quot;n &amp;lt; r&quot; /&gt; of them are linearly independant and thus you consider them to be a basis of the spanned space. Now you would like to iteratively determine of a new vector &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v_s&quot; class=&quot;latex&quot; title=&quot;v_s&quot; /&gt; is linearly dependant on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v_1%2C+%5Cldots%2C+v_%7Bs-1%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v_1, \ldots, v_{s-1}&quot; class=&quot;latex&quot; title=&quot;v_1, \ldots, v_{s-1}&quot; /&gt; and if not, add it to your basis.&lt;br /&gt;
You could do this by solving the following system &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bs-1%7D+%5Clambda_i+v_i+%3D+v_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\sum_{i=1}^{s-1} \lambda_i v_i = v_s&quot; class=&quot;latex&quot; title=&quot;\sum_{i=1}^{s-1} \lambda_i v_i = v_s&quot; /&gt; but this will be a relatively expensive operation and it can be done better:&lt;/p&gt;
&lt;p&gt;Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt; be the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%5Ctimes+n&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n \times n&quot; class=&quot;latex&quot; title=&quot;n \times n&quot; /&gt; identity matrix. At the beginning, it maps &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v_1&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v_1&quot; class=&quot;latex&quot; title=&quot;v_1&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+v_1+%3D+v_1+%3D+e_1&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P v_1 = v_1 = e_1&quot; class=&quot;latex&quot; title=&quot;P v_1 = v_1 = e_1&quot; /&gt;, which is correct.&lt;/p&gt;
&lt;p&gt;Suppose now, that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+%5Ctilde%7Bv%7D_i+%3D+e_i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P \tilde{v}_i = e_i&quot; class=&quot;latex&quot; title=&quot;P \tilde{v}_i = e_i&quot; /&gt; for all &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+%5Cldots%2C+s-1%5C%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i \in \{1, \ldots, s-1\}&quot; class=&quot;latex&quot; title=&quot;i \in \{1, \ldots, s-1\}&quot; /&gt;, then the following can occur: Either &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+%5Ctilde%7Bv%7D_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P \tilde{v}_s&quot; class=&quot;latex&quot; title=&quot;P \tilde{v}_s&quot; /&gt; has no non-zero entries after the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s-1&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;s-1&quot; class=&quot;latex&quot; title=&quot;s-1&quot; /&gt;-th, which means that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde%7Bv%7D_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\tilde{v}_s&quot; class=&quot;latex&quot; title=&quot;\tilde{v}_s&quot; /&gt; is an element of the vector space spanned by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5C%7B%5Ctilde%7Bv%7D_1%2C+%5Cldots%2C+%5Ctilde%7Bv%7D_%7Bs-1%7D%5C%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\{\tilde{v}_1, \ldots, \tilde{v}_{s-1}\}&quot; class=&quot;latex&quot; title=&quot;\{\tilde{v}_1, \ldots, \tilde{v}_{s-1}\}&quot; /&gt; and thus can be discarded, or it has a non-zero entry after the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s-1&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;s-1&quot; class=&quot;latex&quot; title=&quot;s-1&quot; /&gt;-th and is thus linearly independant from the previous vectors.&lt;br /&gt;
Now I’d like to update &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt;, such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P+%5Ctilde%7Bv%7D_i+%3D+e_i&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P \tilde{v}_i = e_i&quot; class=&quot;latex&quot; title=&quot;P \tilde{v}_i = e_i&quot; /&gt; for all &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i+%5Cin+%5C%7B1%2C+%5Cldots%2C+s%5C%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i \in \{1, \ldots, s\}&quot; class=&quot;latex&quot; title=&quot;i \in \{1, \ldots, s\}&quot; /&gt;. Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; be the smallest index greater than &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;s&quot; class=&quot;latex&quot; title=&quot;s&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28P+%5Ctilde%7Bv%7D_s%29_k&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(P \tilde{v}_s)_k&quot; class=&quot;latex&quot; title=&quot;(P \tilde{v}_s)_k&quot; /&gt; is non-zero and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Clambda+%3D+P+%5Ctilde%7Bv%7D_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\lambda = P \tilde{v}_s&quot; class=&quot;latex&quot; title=&quot;\lambda = P \tilde{v}_s&quot; /&gt;. Then&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=P_%7Bi%2Cj%7D+%3D+%5Cbegin%7Bcases%7D+%5Cfrac%7BP_%7Bk%2C+j%7D%7D%7B%5Clambda_k%7D++%26+%5Cmbox%7Bif+%7D+i+%3D+s%5C%5C+P_%7Bs%2Cj%7D+-+%5Cfrac%7BP_%7Bk%2Cj%7D%7D%7B%5Clambda_k%7D+%5Clambda_i++%26+%5Cmbox%7Bif+%7D+i+%3D+k%5C%5C+P_%7Bi%2Cj%7D+-+%5Cfrac%7BP_%7Bk%2Cj%7D%7D%7B%5Clambda_k%7D+%5Clambda%7Bi%7D++%26+%5Cmbox%7Botherwise%7D%5Cend%7Bcases%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P_{i,j} = \begin{cases} \frac{P_{k, j}}{\lambda_k}  &amp;amp; \mbox{if } i = s\\ P_{s,j} - \frac{P_{k,j}}{\lambda_k} \lambda_i  &amp;amp; \mbox{if } i = k\\ P_{i,j} - \frac{P_{k,j}}{\lambda_k} \lambda{i}  &amp;amp; \mbox{otherwise}\end{cases}&quot; class=&quot;latex&quot; title=&quot;P_{i,j} = \begin{cases} \frac{P_{k, j}}{\lambda_k}  &amp;amp; \mbox{if } i = s\\ P_{s,j} - \frac{P_{k,j}}{\lambda_k} \lambda_i  &amp;amp; \mbox{if } i = k\\ P_{i,j} - \frac{P_{k,j}}{\lambda_k} \lambda{i}  &amp;amp; \mbox{otherwise}\end{cases}&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This new &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt; has the desired properties (just multiply it with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde%7Bv%7D_1%2C+%5Cldots%2C+%5Ctilde%7Bv%7D_s&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\tilde{v}_1, \ldots, \tilde{v}_s&quot; class=&quot;latex&quot; title=&quot;\tilde{v}_1, \ldots, \tilde{v}_s&quot; /&gt;). Instead of having to use &lt;code&gt;solve&lt;/code&gt;, multiply with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt; and look if enough coefficients at the end are &lt;img src=&quot;http://s0.wp.com/latex.php?latex=0&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;0&quot; class=&quot;latex&quot; title=&quot;0&quot; /&gt;, if so, the vector is linearly dependant on the previous, if not, add it to the basis and update the matrix &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;P&quot; class=&quot;latex&quot; title=&quot;P&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;Being reluctant and not thinking about this thoroughly before trying to write code cost a lot of time. :/&lt;/p&gt;
&lt;p&gt;Anyway, other than FGLM I wrote some documentation (which was overdue… sorry) and tried to improve rational simplification a bit (without much success).&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/f1728.wordpress.com/234/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/f1728.wordpress.com/234/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=f1728.wordpress.com&amp;amp;blog=22515617&amp;amp;post=234&amp;amp;subd=f1728&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;div class=&quot;sharedaddy&quot;&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 12 Aug 2011 15:40:02 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer: Hacking PuDB: Now an even better Python debugger</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1020</guid>
	<link>http://asmeurersympy.wordpress.com/2011/08/08/hacking-pudb-now-an-even-better-python-debugger/</link>
	<description>&lt;p&gt;Readers of this blog may remember last year when I &lt;a href=&quot;http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger/&quot; target=&quot;_blank&quot;&gt;wrote&lt;/a&gt; about this awesome visual console Python debugger called &lt;a href=&quot;http://pypi.python.org/pypi/pudb&quot; target=&quot;_blank&quot;&gt;PuDB&lt;/a&gt;.  I suggest you read that post if you haven’t.&lt;/p&gt;
&lt;p&gt;At the end of that post, I noted that Ondřej and I had hacked it to make the colors more livable.  Well, a couple of weeks ago, GitHub user &lt;a href=&quot;https://github.com/jtriley&quot; target=&quot;_blank&quot;&gt;jtriley&lt;/a&gt; sent me an email asking me to back port my changes.&lt;/p&gt;
&lt;p&gt;A lot has changed since I wrote my blog post last year.  PuDB now has an official &lt;a href=&quot;http://lists.tiker.net/listinfo/pudb&quot; target=&quot;_blank&quot;&gt;mailing list&lt;/a&gt; and an official &lt;a href=&quot;https://github.com/inducer/pudb&quot; target=&quot;_blank&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I deleted my &lt;a href=&quot;https://github.com/asmeurer/pudb&quot; target=&quot;_blank&quot;&gt;GitHub clone&lt;/a&gt; and reforked from the official version.  &lt;/p&gt;
&lt;p&gt;A lot has also changed in the official code.  Andreas had added config support, including a built-in prefs dialog that lets you set a few settings:  the ability to turn on or off line numbers and the ability to change themes.&lt;/p&gt;
&lt;p&gt;So I took the new code and added my theme as an official theme.  This was pretty straight forward to do.&lt;/p&gt;
&lt;p&gt;But then, I got a little carried away.  &lt;/p&gt;
&lt;p&gt;I noticed that it was difficult to choose a theme with the built-in prefs window because you had to close and reopen the window each time you made a change.  So I added code to make it auto-update your changes as you made them.&lt;/p&gt;
&lt;p&gt;Then I went back and looked at my original blog post and looked at the things that I didn’t like.  There were two things.  First, the default stringifier for variables is &lt;code&gt;type&lt;/code&gt;, which is completely useless.  This is because &lt;code&gt;type&lt;/code&gt; is very fast and stable to compute.  I had previously hacked this to be &lt;code&gt;str&lt;/code&gt;, but now that there was an official config file with a prefs dialog, I figured it should go there. &lt;/p&gt;
&lt;p&gt;So I added support to change this setting.  But this wasn’t enough for me.  I also added the ability to define your own custom stringifier.  You just create a Python file that defines a function called &lt;code&gt;pudb_stringifier(obj)&lt;/code&gt;, which converts &lt;code&gt;obj&lt;/code&gt; into the desired string representation.  I included an &lt;a href=&quot;https://github.com/inducer/pudb/blob/master/example-stringifier.py&quot; target=&quot;_blank&quot;&gt;example file&lt;/a&gt; that gives a fancy example that uses signals to compute the string value, but times out after one second and falls back to the type.  This alleviates one of the problems of using &lt;code&gt;str&lt;/code&gt;, which is that it can be slow for objects with large string expressions, especially SymPy objects, where sometimes the printer can be slow.&lt;/p&gt;
&lt;p&gt;The second thing I didn’t like was that although you can change the width of the right-hand side bar, you could not change the relative heights of the variables, stack, and breakpoints boxes.  I never use breakpoints, and rarely use the stack, so I would prefer to have those smaller and the variables larger.  So I implemented it so that the &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; keys make the selected view smaller or larger.  This information is all saved in the config file, so it’s remembered when you close and reopen PuDB.&lt;/p&gt;
&lt;p&gt;There was one other thing that I didn’t like, which a change since my last blog post that reversed the order of the stack variables from what it was.  It used to be most recent at the bottom, but it was changed to most recent at the top.  This perhaps makes more sense, but the buttons to move around the stack, &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;, were still the same: &lt;code&gt;u&lt;/code&gt; moves down the stack (i.e., less recent), and &lt;code&gt;d&lt;/code&gt; moves up.  These keys were already well established—indeed, these are the same keys used in Python’s built-in debugger pdb—so I added a setting to change the stack order.  This was an easy change to make at this point, as I was already well aquatinted with the settings code, and only two lines of code needed to be changed when the setting changed.  Like all other settings, this uses the cool magic that changes the setting in real time, so you can see the effect without closing the settings window.&lt;/p&gt;
&lt;p&gt;Then someone on the mailing list requested a feature that I realized I also wanted, the ability to wrap variables.  Previously, any variable that was longer than the variable view would just be cut off.  You could make it wider, but that only helped a little bit.  Otherwise, if you wanted to see the whole variable, you had to open IPython by pressing &lt;code&gt;!&lt;/code&gt; and view it there.&lt;/p&gt;
&lt;p&gt;So, I implemented this.  This was definitely the hardest thing to implement.  I found out that it’s ironically very difficult to debug PuDB itself.  You can’t run PuDB inside of PuDB if PuDB crashes, as both instances will just crash.  Also, PuDB eats any print statements.  The solution, suggested by PuDB author Andreas Klöckner, was to get the ttys file of another terminal (e.g., &lt;code&gt;/dev/ttys012&lt;/code&gt;) and write the output to that.&lt;/p&gt;
&lt;p&gt;I also made it so that non-wrapped variables show &lt;code&gt;...&lt;/code&gt; at the end, at Andreas’s suggestion.  I wanted to use the unicode &lt;code&gt;…&lt;/code&gt;, but this was not working at all.  I discovered how much unicode really is a mess in Python 2.  The problem has something to do with … being a three byte character, and I think it also has to do with the color codes that urwid uses.  I’ll try it again once PuDB is ported to Python 3, but for now,  we are going to have to do with the three ascii dots.&lt;/p&gt;
&lt;p&gt;The wrapping code is waiting for merge, but the rest are already in.  Here is a screen shot demonstrating some of the things I did:&lt;/p&gt;
&lt;div style=&quot;width: 310px;&quot; class=&quot;wp-caption alignnone&quot; id=&quot;attachment_1021&quot;&gt;&lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm.png&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm.png?w=300&amp;amp;h=245&quot; title=&quot;Improved PuDB&quot; height=&quot;245&quot; width=&quot;300&quot; alt=&quot;&quot; class=&quot;size-medium wp-image-1021&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Click for full size image&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Things that I implemented to notice here:&lt;/p&gt;
&lt;p&gt;- The midnight theme.&lt;br /&gt;
- The stack and breakpoints views have been shrunken.&lt;br /&gt;
- The variables are wrapped.&lt;br /&gt;
- Wrapping for the variable &lt;code&gt;fourhundred&lt;/code&gt; has been turned off (you can turn wrapping on or off on a per-variable basis by selecting the variable and pressing &lt;code&gt;w&lt;/code&gt;).   Notice that there is an ellipsis at the end to note it has been cut off.&lt;br /&gt;
- Nested variables now have &lt;code&gt;|&lt;/code&gt; before them, to distinguish them from wrapped variables, which are also indented.  This change may or may not be accepted by Andreas.&lt;/p&gt;
&lt;p&gt;Here’s a screen shot showing the prefs window.  I did not implement this, but I did implement all but the first two preferences in the window. I’ve made my window tall so you can see all the options.  You really have to get the code and try it to see the auto-update awesomeness.  You can open the prefs window by pressing &lt;code&gt;Ctrl-p&lt;/code&gt; (this was not at all obvious to me the first time I used it, so I also submitted a patch that makes it open the first time you use PuDB).&lt;/p&gt;
&lt;div style=&quot;width: 253px;&quot; class=&quot;wp-caption alignnone&quot; id=&quot;attachment_1023&quot;&gt;&lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-41-30-pm.png&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-41-30-pm.png?w=243&amp;amp;h=300&quot; title=&quot;PuDB Prefs Window&quot; height=&quot;300&quot; width=&quot;243&quot; alt=&quot;&quot; class=&quot;size-medium wp-image-1023&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Click to see full size image&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;So if you’re not already using this awesome Python debugger, you should.  You can &lt;code&gt;pip install pudb&lt;/code&gt;, or &lt;a href=&quot;https://github.com/inducer/pudb&quot; target=&quot;_blank&quot;&gt;fork it&lt;/a&gt; at GitHub.&lt;/p&gt;
&lt;p&gt;Running it in your code is very easy.  Just add&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;brush: python;&quot;&gt;import pudb;pudb.set_trace()
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;in your code wherever you want to set a break point, or you can do &lt;code&gt;python -m pudb.run script.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This awesome tool has increased my productivity tenfold since I discovered it, and has helped me track down bugs that would have otherwise extremely difficult if not impossible to find.  And now, it’s just better.&lt;/p&gt;
&lt;p&gt;PuDB uses the &lt;a href=&quot;http://excess.org/urwid/&quot; target=&quot;_blank&quot;&gt;urwid library&lt;/a&gt; to do all its console GUI magic.  This library makes it pretty easy to do a lot of stuff. For example, it automatically does relative sizing of widgets, so, for example, when you resize the variables, stack, or breakpoints views, you are actually increasing the relative size of each, not the size in characters.  This makes it portable against any terminal size.  The library also made coding the prefs window autoupdate magic very easy.&lt;/p&gt;
&lt;p&gt;Also, I just want to note that git and GitHub make collaboration like this very easy.  I just forked his project, made some improvements, and submitted them as pull requests.  Then it was easy to discuss the changes.  If the code had not been on GitHub and especially if it had not been in git, I probably would have never bothered to submit my contributions upstream.  I highly recommend that every open source project use git and GitHub.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/asmeurersympy.wordpress.com/1020/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/asmeurersympy.wordpress.com/1020/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1020&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 08 Aug 2011 03:16:10 +0000</pubDate>
</item>
<item>
	<title>Tomo Lazovich: An altered internal API for default representations and fun with Wavefunctions</title>
	<guid isPermaLink="false">http://lazovichsympy.wordpress.com/?p=86</guid>
	<link>http://lazovichsympy.wordpress.com/2011/08/06/an-altered-internal-api-for-default-representations-and-fun-with-wavefunctions/</link>
	<description>&lt;p&gt;This week was a very, very busy week. While there were only a handful of commits, they were probably some of the most crucial ones yet in bringing this home and being able to start writing example systems. With pencils down only two weeks away, it is seriously crunchtime.&lt;/p&gt;
&lt;p&gt;A very nice development was the incorporation of Wavefunctions (Wf) and Differential Operators (DO) into the main represent logic. If you now try to represent anything in cartesian.py, you will get expressions that actually include Wf and have the DO applied appropriately! (I will soon be adding support for a qapply flag, which if set to false will leave all DOs intact without applying them.) Support for this included adding calls to qapply as well a function which unwraps all Wf around expressions before integrating over unities, then rewrapping the final result in a single Wf object.&lt;/p&gt;
&lt;p&gt;With this done, I moved on to another quite important task in the represent logic that I discussed with Brian. This involves dealing with the ambiguous case in represent where no basis is specified in the initial call to represent. The current way that the quantum modules are set up to handle this logic involves the states having an internal _represent_default_basis method, which simply calls the appropriate _represent_FOO method internally in the class. This entire process is basically a black box to the outer represent logic. This becomes a problem in continuous bases, where we actually need to know which basis was chosen for representing (in order to know if there were any unities inserted and integrate appropriately). This is also a more general problem in that if you have an arbitrary expression, you don’t know if all of the internal _represent_default_basis calls actually represent the individual QExprs in the same basis! You could, in fact, have one QExpr represented in a different basis than another and end up with some very weird things.&lt;/p&gt;
&lt;p&gt;So, there are really two problems exposed by this API weakness, and we need to address them both. First, the main represent logic needs to know what the default basis for a given QExpr is. Second, in the case of arbitrary quantum expressions, we need to choose one basis to represent all of the individual QExprs in.&lt;/p&gt;
&lt;p&gt;Brian and I have discussed strategies to address both of these issues. The first is a change in the internal API for default representations. Rather than using the current _represent_default_basis, classes should now contain an internal _get_default_basis, which simply returns  the class which is meant to be the default basis for that QExpr. This way, we can still replicate the previous behavior, but the main represent logic now knows which basis is the default for that class. Because this involves changing an already quite large base of classes in the spin and quantum computing modules, this was quite an arduous task. After much testing and grappling with errors, the spin and cartesian classes now follow the new represent conventions for this, with the quantum computing classes soon to follow. (I should note, that as these changes were made, the spin classes were also changed to follow additional new conventions for represent. The first is that internally, the basis option is converted to a basis state rather than left as an operator in represent. This means that all _represent_Op methods had to be changed to _represent_Ket methods. Second, rather than being able to specify a single operator, you must now specify the complete commuting set of operators for a given eigenket. This means, for the spin classes, rather than being able to pass basis=Jx, you now pass basis=set([J2, Jx]).)&lt;/p&gt;
&lt;p&gt;The second change is to have represent choose which basis to represent in during the first step of the recursion. With the current algorithm, _represent_default_basis was simply called at the lowest level of the recursion, on the individual QExpr. Now, the basis is chosen based on the default basis of the first QExpr in the expression, and all QExprs in the arbitrary expression are represented in this basis. This means all the representations will be consistent and we aren’t left with any strange final expressions. This change in the represent logic is next on my TODO list.&lt;/p&gt;
&lt;p&gt;It is really nice to see all of the pieces of a now very robust representation logic coming together. The schedule I have been following is not quite what I initially planned, but the changes to represent logic for continuous bases ended up being &lt;strong&gt;way&lt;/strong&gt; more subtle than what I initially anticipated. With all the possibilities for different quantum systems out there, I really envision that at the end of the day this revamped represent will be able to handle what is thrown at it. By GSoC pencils down, I will have at least a few different nice example systems implemented and some very clear documentation. Documenting this is very important to me because I’ve put a ton of time into making sure it will work in very general cases (with Brian’s amazing help and discussion), so making sure users know how it works and how to use its full power is the most important thing to me.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/delicious/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/facebook/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/twitter/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/stumble/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/digg/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/lazovichsympy.wordpress.com/86/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/reddit/lazovichsympy.wordpress.com/86/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=lazovichsympy.wordpress.com&amp;amp;blog=22774068&amp;amp;post=86&amp;amp;subd=lazovichsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 06 Aug 2011 22:54:00 +0000</pubDate>
</item>

</channel>
</rss>
