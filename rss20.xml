<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet SymPy</title>
	<link>http://planet.sympy.org/</link>
	<language>en</language>
	<description>Planet SymPy - http://planet.sympy.org/</description>

<item>
	<title>Saurabh Jha: Profile of new  rref function and some comparative profiles for addition</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-4476450566660748829</guid>
	<link>http://sympymatrix.blogspot.com/2013/07/profile-of-new-rref-function-and-some.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;For a new rref given in last commit of [1],  here is the profile for a 200 by 200 matrix--&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;rref(m, ZZ)&quot;)&lt;br /&gt;         119411 function calls in 3.140 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    3.140    3.140 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 densetools.py:108(rowdiv)&lt;br /&gt;    39800    3.067    0.000    3.115    0.000 densetools.py:115(rowadd)&lt;br /&gt;        1    0.025    0.025    3.140    3.140 densetools.py:82(rref)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {gmpy.mpq}&lt;br /&gt;    39803    0.003    0.000    0.003    0.000 {len}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;    39801    0.045    0.000    0.045    0.000 {range}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In contrast the older rref is &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt; cProfile.run(&quot;a.rref()&quot;)&lt;/div&gt;&lt;div&gt;         766832 function calls in 0.514 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.514    0.514 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;    40401    0.027    0.000    0.050    0.000 compatibility.py:19(iterable)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;/div&gt;&lt;div&gt;    40401    0.025    0.000    0.084    0.000 compatibility.py:64(is_sequence)&lt;/div&gt;&lt;div&gt;    40400    0.067    0.000    0.427    0.000 dense.py:33(__getitem__)&lt;/div&gt;&lt;div&gt;        2    0.001    0.000    0.039    0.020 dense.py:588(_new)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.039    0.039 dense.py:600(as_mutable)&lt;/div&gt;&lt;div&gt;    40000    0.017    0.000    0.030    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;/div&gt;&lt;div&gt;    40400    0.008    0.000    0.008    0.000 matrices.py:23(_iszero)&lt;/div&gt;&lt;div&gt;        1    0.040    0.040    0.514    0.514 matrices.py:2414(rref)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.039    0.039 matrices.py:283(copy)&lt;/div&gt;&lt;div&gt;    80800    0.076    0.000    0.094    0.000 matrices.py:3571(a2idx)&lt;/div&gt;&lt;div&gt;    40400    0.012    0.000    0.012    0.000 matrices.py:390(shape)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.039    0.019 matrices.py:81(_handle_creation_inputs)&lt;/div&gt;&lt;div&gt;    40400    0.125    0.000    0.359    0.000 matrices.py:977(key2ij)&lt;/div&gt;&lt;div&gt;    40000    0.013    0.000    0.013    0.000 sympify.py:50(sympify)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10894b248}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;/div&gt;&lt;div&gt;    40401    0.009    0.000    0.009    0.000 {hasattr}&lt;/div&gt;&lt;div&gt;   202004    0.056    0.000    0.056    0.000 {isinstance}&lt;/div&gt;&lt;div&gt;    40401    0.006    0.000    0.006    0.000 {iter}&lt;/div&gt;&lt;div&gt;    40409    0.004    0.000    0.004    0.000 {len}&lt;/div&gt;&lt;div&gt;        1    0.009    0.009    0.039    0.039 {map}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;    40400    0.020    0.000    0.020    0.000 {zip}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So, we have a slowing down of the rref operation. Most of the time is taken by the rowadd.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I also realized earlier this week that if I have a 2000 by 2000 matrix like this--&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;m, n = [], []&lt;/div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(1000, 3000):&lt;/div&gt;&lt;div&gt;...     n.append(i)&lt;/div&gt;&lt;div&gt;... &lt;/div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(1000, 3000):&lt;/div&gt;&lt;div&gt;...     m.append(n)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I get this profile&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;cProfile.run(&quot;add(m, m, ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         4008005 function calls in 1.657 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.030    0.030    1.657    1.657 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;     2000    1.335    0.001    1.625    0.001 densetools.py:11(addrow)&lt;/div&gt;&lt;div&gt;        1    0.002    0.002    1.627    1.627 densetools.py:4(add)&lt;/div&gt;&lt;div&gt;     2001    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;  4002000    0.271    0.000    0.271    0.000 {method 'append' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;     2001    0.019    0.000    0.019    0.000 {range}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But surprisingly, if I have a matrix like this&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; m, n = [], []&lt;/div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(1000, 3000):&lt;/div&gt;&lt;div&gt;...     n.append(ZZ(i))&lt;/div&gt;&lt;div&gt;... &lt;/div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(1000, 3000):&lt;/div&gt;&lt;div&gt;...     m.append(n)&lt;/div&gt;&lt;div&gt;... &lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I get this--&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;cProfile.run(&quot;add(m, m, ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         4008005 function calls in 2.855 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.402    0.402    2.855    2.855 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;     2000    2.142    0.001    2.450    0.001 densetools.py:11(addrow)&lt;/div&gt;&lt;div&gt;        1    0.002    0.002    2.452    2.452 densetools.py:4(add)&lt;/div&gt;&lt;div&gt;     2001    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;  4002000    0.287    0.000    0.287    0.000 {method 'append' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;     2001    0.021    0.000    0.021    0.000 {range}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Maybe I am doing this in a wrong way.  I should have speed up because of coercion.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] https://github.com/sympy/sympy/pull/2248&lt;/div&gt;</description>
	<pubDate>Mon, 15 Jul 2013 07:45:59 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Official SymPy blog: SymPy 0.7.3 is released</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2520472460430880330.post-7920297498163589526</guid>
	<link>http://sympy.blogspot.com/2013/07/sympy-073-is-released.html</link>
	<description>&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;I'm happy to announce the release of SymPy 0.7.3.  It can be&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;downloaded from&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;a style=&quot;background-color: white; color: #1155cc; font-family: arial, sans-serif; font-size: 13px;&quot; href=&quot;https://github.com/sympy/sympy/releases/tag/sympy-0.7.3&quot; target=&quot;_blank&quot;&gt;https://github.com/sympy/&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;sympy/releases/tag/sympy-0.7.3&lt;/a&gt;&amp;lt;wbr style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&amp;gt;&amp;lt;/wbr&amp;gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;. The release&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;notes for this release are at&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;a style=&quot;background-color: white; color: #1155cc; font-family: arial, sans-serif; font-size: 13px;&quot; href=&quot;https://github.com/sympy/sympy/wiki/release-notes-for-0.7.3&quot; target=&quot;_blank&quot;&gt;https://github.com/sympy/&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;sympy/wiki/release-notes-for-&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;0.7.3&lt;/a&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;.&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;To update SymPy, you can use pip install sympy --upgrade or download&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;the source and use setup.py install. SymPy has no dependencies.&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Some highlights:&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Improved integrate() with the Risch algorithm, and it now splits &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;integrals into Piecewise more often. Support for more special &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;functions.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Basic infrastructure for the PDE module.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Many improvements to the matrix expressions, and assumptions relating to them.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;New context manager for the new assumptions (with assuming(...)).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;This will be the last version of SymPy to support Python 2.5.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Many bug fixes.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Note: I suspect that these release notes are still not complete. If&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;you know of any new major change in this release that is not there,&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;please edit the wiki page and add it.&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;The following people contributed at least one patch to this release&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;(names are given in alphabetical order by last name). A total of 85&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;people contributed to this release. People with a * by their names&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;contributed a patch for the first time for this release; 56 people&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;contributed for the first time for this release.&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;I particularly want to thank Ondrej, who helped set up an&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;infrastructure for automating this release, without with this release&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;would not have been possible.&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Thanks to everyone who contributed to this release!&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Acebulf*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Akshit Agarwal*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Ankit Agrawal*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Tom Bachmann&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Madeleine Ball*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Raoul Bourquin&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Christian Bühler&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;CJ Carey*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Ondřej Čertík&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Mary Clark*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Chris Conley*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Renato Coutinho&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Björn Dahlgren*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Christopher Dembia*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Guru Devanla&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Rishabh Dixit*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Alexander Eberspächer*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Pavel Fedotov&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Benjamin Fishbein*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sean Ge*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Gilbert Gede&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Brian E. Granger&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Angus Griffith*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Chetna Gupta*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Ananya H*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Randy Heydon*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Alexander Hirzel*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Thomas Hisch*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;hm*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Matthew Hoff*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Case Van Horsen*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Katja Sophie Hotz*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Max Hutchinson*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sachin Irukula&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sergiu Ivanov&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Amit Jamadagni*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Saurabh Jha&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sachin Joglekar*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Varun Joshi*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Robert Kern&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sergey B Kirpichev*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Stefan Krastanov&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Manoj Kumar*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Patrick Lacasse*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Ronan Lamy&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Colleen Lee*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Oliver Lee*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;David Li&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Stephen Loo*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Huijun Mai*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Aaron Meurer&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Angadh Nanjangud&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Eric Nelson*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sherjil Ozair&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Mateusz Paprocki&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Tarang Patel*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Khagesh Patel*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Mario Pernici&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Luke Peterson&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Tyler Pirtle*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Vasily Povalyaev*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Seshagiri Prabhu*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Pradyumna*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Roland Puntaier*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Bharath M R&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Shravas K Rao*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Thilina Rathnayake*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Timothy Reluga*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Julien Rioux&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Matthew Rocklin&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Christophe Saint-Jean*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Prasoon Shukla*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Chris Smith&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Cristóvão Sousa&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Brian Stephanik*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Marek Šuppa*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Tim Swast*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Grzegorz Świrski&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Matthew Tadd*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Niklas Thörne*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Ramana Venkata*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sean Vig&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Demian Wassermann*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Erik Welch*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Stefen Yin*&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;</description>
	<pubDate>Sun, 14 Jul 2013 19:48:50 +0000</pubDate>
	<author>noreply@blogger.com (Aaron Meurer)</author>
</item>
<item>
	<title>Katja Sophie Hotz: Fourth week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=174</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/07/14/fourth-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;This week I finalized my work on the modular GCD algorithms for integer polynomials and submitted a &lt;a href=&quot;https://github.com/sympy/sympy/pull/2281&quot;&gt;PR&lt;/a&gt; on github!&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;I spent my time writing documentation and additional tests and cleaning up my code. Since the &lt;a href=&quot;https://github.com/sympy/sympy/pull/2126&quot;&gt;new-polys&lt;/a&gt; branch was merged a few days ago, I could rewrite some parts of my algorithms to make the code more consistent and elegant. In particular, some of the conversions to dense representation are now being avoided.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Mateusz showed me the very useful tool &lt;code&gt;coverage_report&lt;/code&gt;, which finds untested lines of code. There was quite a lot untested, so I spent some time with the construction of tests. Sometimes finding the right examples was not as easy as it seemed and there are still some lines untested, but I did reach 97% coverage.&lt;br /&gt;
Another new tool I learned to use this week was Sphinx. I like the html documentation very much, since it is a lot more readable than plain text and even supports LaTeX.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Next week I will start with the modular GCD algorithm for polynomials over algebraic domains.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/174/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/174/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=174&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 14 Jul 2013 16:52:07 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: GSoC Week4: Improvements</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-1263476314884744181</guid>
	<link>http://codesachin.blogspot.com/2013/07/gsoc-week4-improvements.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This has been a slow week, with a lot of ups and downs, work-wise.&lt;br /&gt;Firstly, my laptop's LAN card decided to stop working properly, keeping me busy talking to the Dell customer service and convincing them that something &lt;i&gt;is &lt;/i&gt;wrong with the thing. After a lot of troubleshooting and failed tests on their part (they even tried remote desktop connection to see what was going wrong), they finally agreed that something needs to be done. I hope it gets fixed before I go back to campus.&lt;br /&gt;&lt;br /&gt;As far as the GSoC work is concerned, firstly, I got the Particle code finalised on Tuesday after a review by Gilbert.&lt;br /&gt;Next, I spent the whole of Wednesday hacking the old mechanics framework to act as the base to test my own code on. I felt the need to do this, as I was anxious to see whether my own work was functioning as I thought it would, and it would take some time before Prasoon could get his framework in a completely consistent state (thats natural, considering the complexity of the work involved). It took a lot of time, as I had to tweak the old framework to support coordinate variables, use substitution on them during re-expression and time-differentiation, and so on...&lt;br /&gt;Finally, I got it to work and tested my own code. It worked perfectly! There were a few errors that had to be rectified for the tuple-args format to function, but the rest of it went smoothly.&lt;br /&gt;&lt;br /&gt;This is a &lt;i&gt;real &lt;/i&gt;SymPy session using the hacked module and my own work-&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;1:  &amp;gt;&amp;gt;&amp;gt; O = MovingRefFrame('O')  &lt;br /&gt;2:  &amp;gt;&amp;gt;&amp;gt; F1 = MovingRefFrame('F1', trans_vel = 3 * O.x + 4 * O.y,  &lt;br /&gt;3:                    pos_vector_b = O.x + O.y + O.z, parentframe = O)  &lt;br /&gt;4:  &amp;gt;&amp;gt;&amp;gt; F1.pos_vector_in(O)  &lt;br /&gt;5:  (3*t + 1)*O.x + (4*t + 1)*O.y + O.z  &lt;br /&gt;6:  &amp;gt;&amp;gt;&amp;gt; Q = Symbol('Q', positive = True)  &lt;br /&gt;7:  &amp;gt;&amp;gt;&amp;gt; F2 = MovingRefFrame('F2', ang_vel = Q * O.z, parentframe = O)  &lt;br /&gt;8:  &amp;gt;&amp;gt;&amp;gt; F3 = MovingRefFrame('F3', pos_vector = F2.x, parentframe = F2)  &lt;br /&gt;9:  &amp;gt;&amp;gt;&amp;gt; F3.pos_vector_in(O)  &lt;br /&gt;10:  F2.x  &lt;br /&gt;11:  &amp;gt;&amp;gt;&amp;gt; O.express(F3.trans_acc_in(O))  &lt;br /&gt;12:  - Q**2*cos(Q*t)*O.x - Q**2*sin(Q*t)*O.y  &lt;br /&gt;13:  &amp;gt;&amp;gt;&amp;gt; P = Symbol('P')  &lt;br /&gt;14:  &amp;gt;&amp;gt;&amp;gt; F4 = MovingRefFrame('F4', orient_type = 'Axis', orient_amount = [P * t, F1.x], \  &lt;br /&gt;15:                    parentframe = F1)  &lt;br /&gt;16:  &amp;gt;&amp;gt;&amp;gt; F4.ang_vel_in(F3)  &lt;br /&gt;17:  P*F1.x - Q*O.z  &lt;br /&gt;18:  &amp;gt;&amp;gt;&amp;gt; F5 = MovingRefFrame('F5', orient_type = 'Axis', orient_amount = [Q, F1.x], \  &lt;br /&gt;19:                    trans_vel = ((0, 0, 1), 0), parentframe = F4)  &lt;br /&gt;20:  &amp;gt;&amp;gt;&amp;gt; F3.express(F5.pos_vector_in(O))  &lt;br /&gt;21:  (-t*sin(Q*t)*sin(P*t + Q) + 4*t*sin(Q*t) + 3*t*cos(Q*t) + sqrt(2)*sin(Q*t + pi/4))*F3.x + (-3*t*sin(Q*t) - t*sin(P*t + Q)*cos(Q*t) + 4*t*cos(Q*t) + sqrt(2)*cos(Q*t + pi/4))*F3.y + (t*cos(P*t + Q) + 1)*F3.z  &lt;br /&gt;22:  &amp;gt;&amp;gt;&amp;gt; F5.pos_vector_in(F4)  &lt;br /&gt;23:  - t*sin(Q)*F4.y + t*cos(Q)*F4.z  &lt;br /&gt;24:  &amp;gt;&amp;gt;&amp;gt; F5.trans_vel_in(O)  &lt;br /&gt;25:  (-P*t*cos(Q) - sin(Q))*F4.y + (-P*t*sin(Q) + cos(Q))*F4.z + 3*O.x + 4*O.y  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Line 3 means that frame F1 should have an initial position of O.x + O.y + O.z wrt O. Substituting t = 0 in the output at line 5 will confirm this. To put in the boundary conditions at some other value of time, user just has to enter the keyword arg 't'.&lt;br /&gt;Line 21 adequately shows how complicated things can get after a while.&lt;br /&gt;Line 19 is an example how a tuple argument can be used in the new framework to position/orient new frames wrt their parents. Line 19 essentially means that F5 will have a translational velocity of 1 * F5.z after being oriented as per the user's conditions.&lt;br /&gt;(All these things are adequately explained in the docs)&lt;br /&gt;&lt;br /&gt;This work with the old module convinced me that dynamicsymbols should also be a part of my own work, since it makes handling of time variables &lt;i&gt;considerably&lt;/i&gt; simpler. Hence, I added the function in my last commit to the PR.&lt;br /&gt;&lt;br /&gt;Last but not the least, I planned out some basic vector/scalar field functions for my E-M module. But more on that later.&lt;br /&gt;&lt;br /&gt;Now that I have my entire workspace up and running on my old laptop (temporarily), I will continue with the following work in the coming time-&lt;br /&gt;1) Enable users to enter initial orientation in the same way they enter the time-dependent orientation. As of now, they get to do so only by entering the initial rotation in terms of a vector. Awkward, I agree.&lt;br /&gt;2) Write tests for the MovingRefFrame and Particle classes as well as all the helper functions. Now that I have a system to test these things on, it will be much easier to do so.&lt;br /&gt;3) Start working on the last part of the new framework - dyadics.&lt;br /&gt;&lt;br /&gt;Thats all for now.&lt;br /&gt;Have a great week ahead :-)&lt;/div&gt;</description>
	<pubDate>Sat, 13 Jul 2013 13:26:18 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Chetna Gupta: Coupled Differential System</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=290</guid>
	<link>http://geekiology.wordpress.com/2013/07/13/coupled-differential-system/</link>
	<description>&lt;p&gt;Pseudo-Code for the coupled_differential_system in cds.py (Marked things differently to increase readability of the code snippets required in the method to solve coupled_differential_system)&lt;/p&gt;
&lt;p&gt;Q, M = prde_linear_constraints(A, B, G, DE)&amp;lt;/span&amp;gt;&lt;br /&gt;
M, _ = constant_system(M, zeros(M.rows, 1), DE)&amp;lt;/span&amp;gt;&lt;br /&gt;
n = bound_degree(A, B, C, DE)&amp;lt;/span&amp;gt;&lt;br /&gt;
b, c, m, alpha, beta = spde(A, B, C, n, DE)&amp;lt;/span&amp;gt;&lt;br /&gt;
# either proved that there exists y such that&amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;&lt;br /&gt;
# y = (alpha*q + beta)/m &amp;amp;&amp;amp; Dq + bq = c&amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;&lt;br /&gt;
# else return &quot;No Solution&quot;&amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;&lt;br /&gt;
/non-cancellation cases&amp;lt;/strong&amp;gt;&lt;br /&gt;
if deg(b) &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cle+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\le &quot; class=&quot;latex&quot; title=&quot;\le &quot; /&gt; DE.d.degree(DE.t) – 1 and (derivation(DE.t, DE)==1or DE.d.degree(DE.t) &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%3E%3D+2%29+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;&amp;gt;= 2) &quot; class=&quot;latex&quot; title=&quot;&amp;gt;= 2) &quot; /&gt; :&amp;lt;/span&amp;gt;&lt;br /&gt;
H, A = prde_no_cancel_b_small(b, Q, n, DE)&lt;br /&gt;
else if b!=0 and (derivation(DE.t, DE)==1 or DE.d.degree(DE.t) &amp;gt; max(0, derivation(DE.t, DE) – 1 )):&amp;lt;/span&amp;gt;&lt;br /&gt;
H, A = prde_no_cancel_b_large(b, Q, n, DE)&amp;lt;/span&amp;gt;&lt;br /&gt;
# A = (c1…cm, d1.. dr)T q = &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum+d_i%2Ah_i+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\sum d_i*h_i &quot; class=&quot;latex&quot; title=&quot;\sum d_i*h_i &quot; /&gt;&amp;lt;/strong&amp;gt;&amp;lt;/em&amp;gt;&lt;br /&gt;
return y&lt;br /&gt;
/cancellation cases&lt;br /&gt;
case = DE.case&amp;lt;/span&amp;gt;&lt;br /&gt;
else if case == &amp;lt;span style=&quot;color: #3366ff;&quot;&amp;gt;’primitive’:&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&lt;br /&gt;
(q1, q2) = cds_cancel_prim(a, b1, b2, c1, c2, DE, n)&lt;br /&gt;
else if case == ‘&amp;lt;span style=&quot;color: #3366ff;&quot;&amp;gt;exp&amp;lt;/span&amp;gt;’:&amp;lt;/span&amp;gt;&lt;br /&gt;
(q1, q2) = cds_cancel_exp(a, b1, b2, c1, c2, DE, n)&lt;br /&gt;
else if case == ‘&amp;lt;span style=&quot;color: #3366ff;&quot;&amp;gt;tan&amp;lt;/span&amp;gt;’ :&amp;lt;/span&amp;gt;&lt;br /&gt;
(q1, q2) = cds_cancel_tan(b1, b2, c1, c2, DE, )&amp;lt;/span&amp;gt;&lt;br /&gt;
else if case == ‘&amp;lt;span style=&quot;color: #3366ff;&quot;&amp;gt;other non linear&amp;lt;/span&amp;gt;’:&lt;br /&gt;
(q1, q2) = cds_cancel_non_linear(b1, b2, c1, c2, DE, n)&amp;lt;/span&amp;gt;&lt;br /&gt;
return y &lt;/p&gt;
&lt;p&gt;&amp;lt;em&amp;gt;&amp;lt;strong&amp;gt;Where Y = &amp;lt;code&amp;gt;(alpha*q + beta)/m&amp;lt;/code&amp;gt; &amp;lt;/strong&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;&amp;lt;strong&amp;gt;q = q1 +  sqrt(-1)*q2&amp;lt;/strong&amp;gt;&amp;lt;/em&amp;gt;&lt;/p&gt;
&lt;p&gt;There have been a lot of changes in the above code (which shows how the files would integrate to get the cds working)&lt;/p&gt;
&lt;p&gt;————So here is Version 1.1 for the above —————–&lt;br /&gt;
 1&lt;br /&gt;
def coupled_DE_System()&lt;br /&gt;
    from sympy.integrals.rde import (no_cancel_b_large,&lt;br /&gt;
    no_cancel_b_small, no_cancel_equal)&lt;br /&gt;
    b1a, b1d = frac_in(b1, DE.t)&lt;br /&gt;
    b2a, b2d = frac_in(b2, DE.t)&lt;br /&gt;
    c1a, c1d = frac_in(c1, DE.t)&lt;br /&gt;
    c2a, c2d = frac_in(c2, DE.t)&lt;br /&gt;
    fa = b1a*b2d + b1d*b2a*sqrt(-1)&lt;br /&gt;
    fd = b1d*b2d&lt;br /&gt;
    ga = c1a*c2d + c1d*c2a*sqrt(-1)&lt;br /&gt;
    gd = c1d*c2d&lt;br /&gt;
    _, (fa, fd) = weak_normalizer(fa, fd, DE)&lt;br /&gt;
    a, (ba, bd), (ca, cd), hn = normal_denom(fa, fd, ga, gd, DE)&lt;br /&gt;
    A, B, C, hs = special_denom(a, ba, bd, ca, cd, DE)&lt;br /&gt;
    n = bound_degree(A, B, C, DE)&lt;br /&gt;
    b, c, m, alpha, beta = spde(A, B, C, n, DE)&lt;br /&gt;
    # non cancellation cases solve for q&lt;br /&gt;
    if not b.is_zero and (DE.case == 'base' or b.degree(DE.t) &amp;gt; max(0, DE.d.degree(DE.t) - 1)):&lt;br /&gt;
        try:&lt;br /&gt;
           q = no_cancel_b_large(b, c, n, DE)&lt;br /&gt;
           return Poly(cancel((alpha*q + beta)/m) , DE.t)&lt;br /&gt;
        except NonElementaryIntegralException:&lt;br /&gt;
           return None&lt;br /&gt;
    elif (b.is_zero or b.degree(DE.t) &amp;lt; DE.d.degree(DE.t) - 1) and (DE.case == 'base' or DE.d.degree(DE.t) &amp;gt;= 2):&lt;br /&gt;
        try:&lt;br /&gt;
           q = no_cancel_b_small(b, c, n, DE)&lt;br /&gt;
           return Poly(cancel((alpha*q + beta)/m) , DE.t)&lt;br /&gt;
        except NonElementaryIntegralException:&lt;br /&gt;
           return None&lt;br /&gt;
    elif DE.d.degree(DE.t) &amp;gt;= 2 and b.degree(DE.t) == DE.d.degree(DE.t) - 1 and n &amp;gt; -b.as_poly(DE.t).LC()/DE.d.as_poly(DE.t).LC():&lt;br /&gt;
        try:&lt;br /&gt;
           q = no_cancel_equal(b, c, n, DE)&lt;br /&gt;
           return Poly(cancel((alpha*q + beta)/m) , DE.t)&lt;br /&gt;
        except NonElementaryIntegralException:&lt;br /&gt;
           return None&lt;br /&gt;
    # Does not fall in non cancellation&lt;br /&gt;
    # Hence cancellation cases&lt;br /&gt;
    case = DE.case&lt;br /&gt;
    a = Poly(sqrt(-1) , DE.t)&lt;br /&gt;
    if case == 'primtive':&lt;br /&gt;
       (q1, q2) = cds_cancel_prim(a, b1, b2, c1, c2, DE, n)&lt;br /&gt;
    if case == 'exp':&lt;br /&gt;
       (q1, q2) = cds_cancel_exp(a, b1, b2, c1, c2, DE, n)&lt;br /&gt;
    if case == 'tan':&lt;br /&gt;
       (q1, q2) = cds_cancel_tan(a, b1, b2, c1, c2, DE, n)&lt;br /&gt;
    return Poly(cancel(((q1 + sqrt(-1)*q2)*alpha + beta)/m), DE.t)&lt;/p&gt;
&lt;p&gt;I have written this code here due to unavailability of pseudo code and not-working test-cases. So don't want anything to be left as my guess work. Comments/Reviews about the code or the style of implementation are most welcome&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/290/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/290/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=290&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 13 Jul 2013 08:16:37 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: Stuck in the guessing game</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=596</guid>
	<link>http://manojbits.wordpress.com/2013/07/13/stuck-in-the-guessing-game/</link>
	<description>&lt;p&gt;Hello. I had thought that at the time of writing this post, I would have comfortably finished the sixth heuristic. However the Maple paper hasn’t been kind to me, because not knowing how to implement an algorithm is tough enough, but not knowing what the algorithm is, is hell. The good part (?)  is that Sean too had no idea, when he had a quick look (though he said he may help me get some insight later on), when I talked to him on GTalk and Aaron too when I met on IRC. I’ve also not written anything for ten days, so I’m trying to write, a detailed post here, so that if anyone at Planet SymPy stumble upon this, they could comment here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The fifth heuristic:&lt;/strong&gt;&lt;br /&gt;
The Maple paper has been giving me mixed signals, and half of my time goes in interpreting what the authors are trying to say, and most of the time I get it wrong, and so the other half goes in trying to interpret it the right way. So these are the two steps, as described by the paper.&lt;br /&gt;
1. A basis of functions and algebraic objects is built by taking, from the given ODE, all the known functions and composite algebraic objects, together with their derivatives, as well as all the unknown functions&lt;br /&gt;
2. A polynomial of degree 2 in such objects is built; its coefficients, in turn, are polynomials of degree d in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So what does this mean? This is what even I was trying to figure out. Let us now look at the single example that they managed to provide.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%2A%5Cfrac%7Bdy%7D%7Bdx%7D%2Alog%28x%29%2Asin%28x%29+%2B+cos%28y%29%2A%281+-+x%2Acosy%29+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x*\frac{dy}{dx}*log(x)*sin(x) + cos(y)*(1 - x*cosy) = 0&quot; class=&quot;latex&quot; title=&quot;x*\frac{dy}{dx}*log(x)*sin(x) + cos(y)*(1 - x*cosy) = 0&quot; /&gt;. Rearranging this gives me &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bcos%28y%29%2A%281+-+x%2Acosy%29%7D%7Bx%2Alog%28x%29%2Asin%28x%29%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{cos(y)*(1 - x*cosy)}{x*log(x)*sin(x)}&quot; class=&quot;latex&quot; title=&quot;\frac{cos(y)*(1 - x*cosy)}{x*log(x)*sin(x)}&quot; /&gt;. Fair enough.&lt;/p&gt;
&lt;p&gt;My first impression was that I had to take all algebraic objects from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=cos%28y%29%2Fx%2C+x%2Acos%28y%29%5E%7B2%7D%2C+cos%28y%29%2Flog%28x%29%2C+cos%28y%29%2Fsin%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;cos(y)/x, x*cos(y)^{2}, cos(y)/log(x), cos(y)/sin(x)&quot; class=&quot;latex&quot; title=&quot;cos(y)/x, x*cos(y)^{2}, cos(y)/log(x), cos(y)/sin(x)&quot; /&gt;, and I wrote a bit of optimised &lt;a href=&quot;https://github.com/Manoj-Kumar-S/sympy/commit/66362477f8779a9f00ab9bd30b73c99ae966a7e9&quot;&gt;code&lt;/a&gt;, (atleast I think), I found out that there are 19 possible factors, and according to the step 2, including the derivatives, and the second degree terms I would get a maximum of 19 + 19(derivatives) + 19*&lt;img src=&quot;http://s0.wp.com/latex.php?latex=C_%7B2%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;C_{2}&quot; class=&quot;latex&quot; title=&quot;C_{2}&quot; /&gt;(second degree terms of power one) + 19(terms of power 2) from which I can built the polynomial. Obviously, substituting it in the PDE, grouping terms, and using solve, would be computationally expensive for SymPy. Sean then told me its since the paper tells only ‘composite algebraic objects’  it is enough to limit to three algebraic objects, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=cos%28y%29%2C+x%2Acos%28y%29%5E%7B2%7D%2C+x%2Alog%28x%29%2Asin%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;cos(y), x*cos(y)^{2}, x*log(x)*sin(y)&quot; class=&quot;latex&quot; title=&quot;cos(y), x*cos(y)^{2}, x*log(x)*sin(y)&quot; /&gt;. So this is the approach, that I used.&lt;/p&gt;
&lt;p&gt;1. Use &lt;strong&gt;as_numer_denom&lt;/strong&gt;() to extract the numerator, denominator of unsimplified &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt;,  expand the numerator and denominator,  which would give the list of factors. Obviously suppose I have something like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=2%2Asiny&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;2*siny&quot; class=&quot;latex&quot; title=&quot;2*siny&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-+siny&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;- siny&quot; class=&quot;latex&quot; title=&quot;- siny&quot; /&gt;, they should be treated as same, I wrote a helper function called _rem_num, which would remove the numeric arguments from &lt;strong&gt;Mul &lt;/strong&gt;and &lt;strong&gt;Pow.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2. Iterate over the list and add derivatives, From this add the second degree terms, and first terms. This gives the basis with which I can build the polynomial. For the given differential equation, I get the following basis, &lt;a href=&quot;https://gist.github.com/Manoj-Kumar-S/5989623&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/Manoj-Kumar-S/5989623&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;3. Now, since instead of taking the factors, one at a time, two at a time, three at a time and so on, I thought it would be better to build a general polynomial, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum_%7Bk%3D1%7D%5EnCk%2Atermk&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\sum_{k=1}^nCk*termk&quot; class=&quot;latex&quot; title=&quot;\sum_{k=1}^nCk*termk&quot; /&gt; and substitute it in the PDE, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Cchi%7D%7B%5Cpartial+x%7D+%2B+h%2A%5Cfrac%7B%5Cpartial+%5Cchi%7D%7B%5Cpartial+y%7D+-+%5Cchi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \chi}{\partial x} + h*\frac{\partial \chi}{\partial y} - \chi*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \chi}{\partial x} + h*\frac{\partial \chi}{\partial y} - \chi*\frac{\partial h}{\partial y}&quot; /&gt;. If it is a single term polynomial, then the coefficients of the other terms become zero. So the first sub-step is done.&lt;/p&gt;
&lt;p&gt;4. For the second step, Maple says I need bivariate coefficients in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;, for the terms in the polynomial, So to sum up this is the pseudocode I used,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize a coefficient dict to {}&lt;/li&gt;
&lt;li&gt;Take the first term in the basis, substitute it in the PDE, if it simplifies to zero, great you’ve got your infinitesimal, If it doesn’t group the like terms and store it in the coefficient_dict&lt;/li&gt;
&lt;li&gt;Repeat the above mentioned process for all the terms in the basis&lt;/li&gt;
&lt;li&gt;Once, it is done for all the terms in the basis, use solve to find if the coefficients, give a non-trivial solution.&lt;/li&gt;
&lt;li&gt;If it doesn’t then start from beginning, however use &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28a%2Ax+%2B+b%2Ay%29%2Aterm&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(a*x + b*y)*term&quot; class=&quot;latex&quot; title=&quot;(a*x + b*y)*term&quot; /&gt;, and then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%2Ax%5E%7B2%7D+%2B+b%2Ax%2Ay+%2B+c%2Ay%5E%7B2%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a*x^{2} + b*x*y + c*y^{2}&quot; class=&quot;latex&quot; title=&quot;a*x^{2} + b*x*y + c*y^{2}&quot; /&gt; till it reaches a maximum limit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the most optimized way that I could think of,  and the code works well for the example given. But I am facing weird test failures, for the tests that I have added, For example when I do&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;eq3 = (1 + 2*x)*f(x).diff(x) + 2 - 4*exp(-f(x))
infinitesimals(eq3)
[{eta(x, f(x)): 0, xi(x, f(x)): 2*x + 1},
{eta(x, f(x)): 0, xi(x, f(x)): 1/(exp(f(x)) - 2)}]
&lt;/pre&gt;
&lt;p&gt;However, when I try to print it while running tests, I get an extra term. I have no idea how I get this difference.&lt;br /&gt;
&lt;strong&gt;The sixth heuristic:&lt;/strong&gt;&lt;br /&gt;
Okay, so this is where I had no idea what to implement and how, and I am in this position for about three days, and that isn’t promising. Let us take the PDE again, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D+%2B+%28%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+y%7D+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+x%7D%29%2Ah+-+%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D%2Ah%5E%7B2%7D+-+%5Cxi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%5Ceta%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x})*h - \frac{\partial \eta}{\partial x}*h^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y} = 0&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x})*h - \frac{\partial \eta}{\partial x}*h^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y} = 0&quot; /&gt; . So I make the following four assumptions on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt;&lt;/p&gt;
&lt;p&gt;1. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+f%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = f(x)&quot; class=&quot;latex&quot; title=&quot;\eta = f(x)&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi+%3D+g%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi = g(y)&quot; class=&quot;latex&quot; title=&quot;\xi = g(y)&quot; /&gt;&lt;br /&gt;
2. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+f%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = f(x)&quot; class=&quot;latex&quot; title=&quot;\eta = f(x)&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi+%3D+g%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi = g(x)&quot; class=&quot;latex&quot; title=&quot;\xi = g(x)&quot; /&gt;&lt;br /&gt;
3. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+f%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = f(y)&quot; class=&quot;latex&quot; title=&quot;\eta = f(y)&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi+%3D+g%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi = g(y)&quot; class=&quot;latex&quot; title=&quot;\xi = g(y)&quot; /&gt;&lt;br /&gt;
4. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+f%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = f(y)&quot; class=&quot;latex&quot; title=&quot;\eta = f(y)&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi+%3D+g%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi = g(x)&quot; class=&quot;latex&quot; title=&quot;\xi = g(x)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let us take the fourth assumption, the PDE reduces to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28%5Cfrac%7Bdf%7D%7Bdy%7D+-+%5Cfrac%7Bdg%7D%7Bdx%7D%29%2Ah+-+f%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+g%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(\frac{df}{dy} - \frac{dg}{dx})*h - f*\frac{\partial h}{\partial x} - g*\frac{\partial h}{\partial y} = 0&quot; class=&quot;latex&quot; title=&quot;(\frac{df}{dy} - \frac{dg}{dx})*h - f*\frac{\partial h}{\partial x} - g*\frac{\partial h}{\partial y} = 0&quot; /&gt;. The Maple paper says:&lt;br /&gt;
1. subdivide the equation into subexpressions involving only one of {f, g};&lt;br /&gt;
2. build a list of candidates for f and for g with the solutions to these subexpressions;&lt;br /&gt;
3. build a list of pairs of candidates by taking one candidate from each list.&lt;/p&gt;
&lt;p&gt;Now what on earth, the first step is supposed to mean, I have no idea. My first impression, when I was writing my proposal and a few days back, was that I had to split it into,  two different ODE’s so that I should solve &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdf%7D%7Bdy%7D+-+f%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{df}{dy} - f*\frac{\partial h}{\partial x}= 0&quot; class=&quot;latex&quot; title=&quot;\frac{df}{dy} - f*\frac{\partial h}{\partial x}= 0&quot; /&gt;and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdg%7D%7Bdx%7D%2Ah+%2B+g%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{dg}{dx}*h + g*\frac{\partial h}{\partial y} = 0&quot; class=&quot;latex&quot; title=&quot;\frac{dg}{dx}*h + g*\frac{\partial h}{\partial y} = 0&quot; /&gt; individually. However I can never be more wrong, since it then is a sub-part of the first heuristic, and also according to the example given that is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+%5Cfrac%7Be%5E%7Bx%7D%7D%7B%5Csqrt%7By%7D%7D%2AF%28%5Csqrt%5B3%5D%7By%7D+-+%5Cfrac%7B3%2Ae%5E%7Bx%7D%7D%7B2%7D%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx} = \frac{e^{x}}{\sqrt{y}}*F(\sqrt[3]{y} - \frac{3*e^{x}}{2})&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx} = \frac{e^{x}}{\sqrt{y}}*F(\sqrt[3]{y} - \frac{3*e^{x}}{2})&quot; /&gt; , the infinitesimals found out are &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7Be%5E%7Bx%7D%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{1}{e^{x}}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{e^{x}}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7By%7D%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{1}{\sqrt{y}}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{\sqrt{y}}&quot; /&gt; , there seems to be a term that is common to both &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;g&quot; class=&quot;latex&quot; title=&quot;g&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;So that sums up, my last ten days coding or trying to code rather. I know Maple is not open-source and all that, but it would have been really nice if they had provided a few more examples on each of the heuristics, instead of just giving a single line which can be comprehended in a thousand different ways.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/596/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/596/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=596&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 13 Jul 2013 07:46:04 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: From Euclid To Gauss via Pell</title>
	<guid isPermaLink="false">http://theperceptiveway.wordpress.com/?p=92</guid>
	<link>http://theperceptiveway.wordpress.com/2013/07/12/to-gauss-from-euclid-via-pell/</link>
	<description>&lt;div class=&quot;markdown-here-wrapper&quot; id=&quot;markdown-here-wrapper-947996&quot;&gt;
&lt;p style=&quot;&quot;&gt;While the fourth week of GSoC is coming to an end, I managed to finish two of the five deliverables of my project proposal. So the fourth week is more of a transition week for me as I had to correct few bugs associated with current implementation of QDEs (Quadratic Diophantine Equation) and LDEs (Linear Diophantine Equation) and find new resources for the future work, solving Ternary Quadratic Forms.&lt;/p&gt;
&lt;p style=&quot;&quot;&gt;In QDE I had a little problem dealing with the case where &lt;code style=&quot;font-size: .85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0 .15em; padding: 0 .3em; white-space: pre-wrap; border: 1px solid #eaeaea; background-color: #f8f8f8; border-radius: 3px 3px 3px 3px; display: inline;&quot;&gt;B**2 - 4*A*C&lt;/code&gt; is a perfect square. General solution procedure for this case is to use a transformation which converts this case to the Simple Hyperbolic case which I had solved previously. Then the original solutions can be recovered from the solutions of the transformed equation using two divisible criteria which should be satisfied to honour the transformation. Things went wrong when the solutions of the transformed equation involved parameters because I had to check finitely many equivalence classes with respect to modulo &lt;code style=&quot;font-size: .85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0 .15em; padding: 0 .3em; white-space: pre-wrap; border: 1px solid #eaeaea; background-color: #f8f8f8; border-radius: 3px 3px 3px 3px; display: inline;&quot;&gt;4*A*sqrt(B**2 - 4*A*C&lt;/code&gt; in that case and find whether there are any classes satisfying the criteria and find a nice representation for the solutions if at least one such class exist. I found this hard going but finally managed to implement it. Work related to the QDEs are almost finished and there are a few optimization steps to be carried out. For example I use brute force to solve the congruence equation &lt;code style=&quot;font-size: .85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0 .15em; padding: 0 .3em; white-space: pre-wrap; border: 1px solid #eaeaea; background-color: #f8f8f8; border-radius: 3px 3px 3px 3px; display: inline;&quot;&gt;x**2 = D (mod a)&lt;/code&gt; and there is an algorithm which is more efficient. I hope to implement it since this equation will come up in my future work too. Several extensions can also be carried out like finding the rational solutions satisfying a given QDE and implementing other algorithms like the cyclic method which also solves QDEs.&lt;/p&gt;
&lt;p style=&quot;&quot;&gt;I also corrected an error I had done in linear Diophantine equations due to which the solutions returned by the solver were only a subset of the exact solutions. I corrected this and checked the results with the Wolfram Alpha. Now, the solutions returned by the solver can be made identical to that returned by the Wolfram Alpha by a single shift or by inverting the parameter. Since the parameters returned in solutions for linear Diophantine equations has no boundary conditions and can be an any integer, this does not make the two solution sets different.&lt;/p&gt;
&lt;p style=&quot;&quot;&gt;During the week, I also studied the ternary quadratic forms, on which I plan to work in the weeks to come. A ternary quadratic form is a homogeneous equation in three variables and having a degree two, i.e. a equation of the form &lt;code style=&quot;font-size: .85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0 .15em; padding: 0 .3em; white-space: pre-wrap; border: 1px solid #eaeaea; background-color: #f8f8f8; border-radius: 3px 3px 3px 3px; display: inline;&quot;&gt;Ax**2 + By**2 + Cz**2 + Dyz + Exz + Fxy = 0&lt;/code&gt;. I found a good resource on this, “Algorithmic resolution of Diophantine equations” by Nigel P. Smart.&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/theperceptiveway.wordpress.com/92/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/theperceptiveway.wordpress.com/92/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=theperceptiveway.wordpress.com&amp;amp;blog=52956410&amp;amp;post=92&amp;amp;subd=theperceptiveway&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 12 Jul 2013 20:45:21 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: On Semisimple Lie Algebras (Part 2)</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=54</guid>
	<link>http://meclark256.wordpress.com/2013/07/11/on-semisimple-lie-algebras-part-2/</link>
	<description>&lt;p&gt;Let’s continue on from last week.  So, we have a Lie algebra g, with a root system.  Specifically, we want to consider the simple roots of g.  We can define the Cartan matrix A of g as the matrix whose elements a_{i,j} are defined by&lt;/p&gt;
&lt;p&gt;a_{i,j} = 2 (alpha_i, alpha_j)/(alpha_i, alpha_i) = &amp;lt;alpha_i, alpha_j&amp;gt;&lt;/p&gt;
&lt;p&gt;where the inner product (a, b) is the Killing form: (a, b) = Tr (ad a) (ad b) where ad denotes the adjoint action.  Effectively, the Cartan matrix is one way of encoding the simple roots (and by extension, the entire root system) of the Lie algebra.&lt;/p&gt;
&lt;p&gt;Next we want to understand a bit more about Dynkin diagrams.   Given g and its simple roots, we may construct its Dynkin diagram as follows.&lt;/p&gt;
&lt;p&gt;For every simple root, draw a dot.  Join the ith dot to the jth dot with &amp;lt;alpha_i, alpha_j&amp;gt;&amp;lt;alpha_j, alpha_i&amp;gt; edges.  If the two simple roots alpha_i and alpha_j have different length, add an arrow pointing to the shorter root.  Now, it can be shown that one can classify the irreducible root systems by classifying the connected Dynkin diagrams.  Thus, if we have an irreducible root system Φ of rank l, then its Dynkin diagram is one of the following:&lt;/p&gt;
&lt;div style=&quot;width: 330px;&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Finite_Dynkin_diagrams.svg/320px-Finite_Dynkin_diagrams.svg.png&quot; alt=&quot;&quot; width=&quot;320&quot; height=&quot;112&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;(From wikipedia)&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;So again, Dynkin diagrams are another way of classifying simple and semisimple Lie algebras.  I think that more or less covers the basics of simple and semisimple Lie algebras, so I’ll leave things there.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;On the coding front, I’ve finished writing and commenting type_A.py, type_B.py, type_C.py, type_D.py, type_E.py, type_F.py, and type_G.py as well as writing tests.  I’ve got pull requests up for type_A and type_B, and I’ll do the rest this weekend. I’m about to write start writing tests for cartan_type.py.  That will be tomorrow’s project.&lt;/p&gt;
&lt;p&gt;I’ve realised that implementing the commutation relations is a huge undertaking (I’d need to first implement matrix representations of every Lie algebra, the adjoint action, actual physical bases and so on) so I’m going to leave that until the end of the project, if I have time.    I’m currently right on schedule, if perhaps a bit ahead, and I want to accomplish everything I listed in my project proposal, and I fear I’d be derailed from that if I were to focus so specifically on commutation relations.&lt;/p&gt;
&lt;p&gt;So…that about sums things up.  Til next week!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/54/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/54/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=54&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 11 Jul 2013 19:19:04 +0000</pubDate>
</item>
<item>
	<title>Saurabh Jha: Some improved profiles of dense matrix</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-1967164123336361963</guid>
	<link>http://sympymatrix.blogspot.com/2013/07/some-improved-profiles-of-dense-matrix.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;br /&gt;I have some improved profiles of dense addition and multiplication, the fundamental operators of dense matrix. For all the description of various functions I use, please see this &lt;a href=&quot;https://github.com/SaurabhJha/sympy/commit/395cefeb1dd70940cc5ee674c09ec60031aaff76&quot;&gt;commit.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;I diden't use gmpy now, because I was not able to get these to work. I was not able to see how can I use it. So here the focus is only on the data structures of Dense Matrix.&lt;br /&gt;&lt;br /&gt;I am not posting full profiles but only those operations that comparatively cost more.&lt;br /&gt;&lt;br /&gt;========================================================================&lt;br /&gt;First of all we will look at the creation of matrices itself.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;generate_matrix(1000, ZZ)&quot;)&lt;br /&gt;         4009035 function calls in 2.915 seconds&lt;br /&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;      1        0.673    0.673    2.901    2.901 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;1000000  0.741    0.000    0.985    0.000 numbers.py:1522(__new__)&lt;br /&gt;1000000  1.159    0.000    2.144    0.000 sympify.py:50(sympify)&lt;br /&gt;1001005  0.244    0.000    0.244    0.000 {isinstance}&lt;br /&gt;1003000  0.079    0.000    0.079    0.000 {method 'append' of 'list' objects}&lt;span style=&quot;white-space: pre;&quot; class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;generate_matrix2(1000, ZZ)&quot;)&lt;br /&gt;         4005 function calls in 0.003 seconds&lt;br /&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;     1    0.002    0.002    0.003    0.003 densetools.py:157(generate_matrix2)&lt;br /&gt;    &lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;generate_matrix(2000, ZZ)&quot;)&lt;br /&gt;         16018035 function calls in 11.980 seconds&lt;br /&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;           1    2.769    2.769   11.933   11.933 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;4000000   3.046    0.000    4.055    0.000 numbers.py:1522(__new__)   &lt;br /&gt;4000000   4.763    0.000    8.818    0.000 sympify.py:50(sympify)&lt;br /&gt;4002005   1.010    0.000    1.010    0.000 {isinstance}&lt;br /&gt;4006000   0.325    0.000    0.325    0.000 {method 'append' of 'list' objects}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;generate_matrix2(2000, ZZ)&quot;)&lt;br /&gt;         8005 function calls in 0.006 seconds&lt;br /&gt;&lt;br /&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;     1    0.003    0.003    0.006    0.006 densetools.py:157(generate_matrix2)&lt;br /&gt;  2000    0.001    0.000    0.002    0.000 domain.py:67(__call__)&lt;br /&gt;&lt;br /&gt;Bottlenecks: sympify, numbers, isinstance.&lt;br /&gt;&lt;br /&gt;Will sympify and numbers problems get solved if we use gmpy.&lt;br /&gt;========================================================================&lt;br /&gt;&lt;br /&gt;Let's look at addition now.&lt;br /&gt;&lt;br /&gt;&lt;span id=&quot;goog_1615297234&quot;&gt;&lt;/span&gt;&lt;span id=&quot;goog_1615297235&quot;&gt;&lt;/span&gt;a = generate_matrix(1000, ZZ)&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;a + a&quot;)&lt;br /&gt;         10006072 function calls in 6.123 seconds&lt;br /&gt;ncalls    tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;1000000    0.423    0.000    0.739    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;br /&gt;1000000    0.666    0.000    3.566    0.000 matrices.py:519(&amp;lt;lambda&amp;gt;)&lt;br /&gt;            2    0.667    0.334    2.078    1.039 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;1000000    0.831    0.000    1.079    0.000 numbers.py:1522(__new__)&lt;br /&gt;1000000    1.256    0.000    2.900    0.000 numbers.py:1588(__add__)&lt;br /&gt;2000000    0.663    0.000    0.663    0.000 sympify.py:50(sympify)&lt;br /&gt;3001006    0.814    0.000    0.814    0.000 {isinstance}&lt;br /&gt;      1001    0.622    0.001    4.927    0.005 {map}&lt;span style=&quot;white-space: pre;&quot; class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_add(a, a, ZZ)&quot;)&lt;br /&gt;         11010042 function calls in 7.284 seconds&lt;br /&gt;&lt;br /&gt; ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;      1000    1.286    0.001    3.805    0.004 densetools.py:27(_addr)&lt;br /&gt;2000000    1.295    0.000    1.592    0.000 domain.py:64(new)&lt;br /&gt;2000000    0.849    0.000    2.440    0.000 domain.py:67(__call__)&lt;br /&gt;            1    0.789    0.789    3.425    3.425 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;1000000    0.889    0.000    1.181    0.000 numbers.py:1522(__new__)&lt;br /&gt;2000000    0.297    0.000    0.297    0.000 numbers.py:1552(__int__)&lt;br /&gt;1000000    1.349    0.000    2.530    0.000 sympify.py:50(sympify)&lt;br /&gt;1001005    0.292    0.000    0.292    0.000 {isinstance}&lt;br /&gt;2002000    0.178    0.000    0.178    0.000 {method 'append' of 'list' objects}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_add2(a, a, ZZ)&quot;)&lt;br /&gt;         7005012 function calls in 3.870 seconds&lt;br /&gt; ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;   1000    1.293    0.001    3.830    0.004 densetools.py:27(_addr)&lt;br /&gt;2000000    1.303    0.000    1.600    0.000 domain.py:64(new)&lt;br /&gt;2000000    0.857    0.000    2.458    0.000 domain.py:67(__call__)&lt;br /&gt;2000000    0.298    0.000    0.298    0.000 numbers.py:1552(__int__)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Bottlenecks: lambda, numbers, simplify, is instance in original implementation and domains in second one.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;========================================================================&lt;br /&gt;&lt;br /&gt;Let's look at multiplication now.&lt;br /&gt;&lt;br /&gt;a = generate_matrix(100, ZZ)&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;a*a&quot;)&lt;br /&gt;         11060373 function calls in 7.685 seconds&lt;br /&gt;&lt;br /&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt; 10000    0.781    0.000    7.611    0.001 matrices.py:463(&amp;lt;lambda&amp;gt;)&lt;br /&gt;990000    0.669    0.000    3.597    0.000 matrices.py:464(&amp;lt;lambda&amp;gt;)&lt;br /&gt;2000000   1.790    0.000    2.274    0.000 numbers.py:1522(__new__)&lt;br /&gt;990000    1.223    0.000    2.928    0.000 numbers.py:1588(__add__)&lt;br /&gt;1000000   1.257    0.000    2.916    0.000 numbers.py:1612(__mul__)&lt;br /&gt;  10000   0.268    0.000    3.865    0.000 {_functools.reduce}&lt;br /&gt;5980002    1.585    0.000    1.585    0.000 {isinstance}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_mulmatmat(a, a, ZZ)&quot;)&lt;br /&gt;         6070642 function calls in 3.732 seconds&lt;br /&gt; ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;  10000    1.159    0.000    3.688    0.000 densetools.py:112(_mulrc)&lt;br /&gt;2000000    1.339    0.000    1.639    0.000 domain.py:64(new)&lt;br /&gt;2000000    0.889    0.000    2.527    0.000 domain.py:67(__call__)&lt;br /&gt;2000000    0.300    0.000    0.300    0.000 numbers.py:1552(__int__)&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_mulmatmat2(a, a, ZZ)&quot;)&lt;br /&gt;         6030112 function calls in 3.526 seconds&lt;br /&gt;&lt;br /&gt; ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;  10000    1.106    0.000    3.517    0.000 densetools.py:112(_mulrc)&lt;br /&gt;2000000    1.279    0.000    1.564    0.000 domain.py:64(new)&lt;br /&gt;2000000    0.846    0.000    2.411    0.000 domain.py:67(__call__)&lt;br /&gt;2000000    0.286    0.000    0.286    0.000 numbers.py:1552(__int__)&lt;br /&gt;&lt;br /&gt;This seems promising,  but the domains itself consume a lot of space. So will gmpy boost this up?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Conclusion:&lt;br /&gt;&lt;br /&gt;For addition, we _add2 &amp;gt;&amp;gt; _add but for multiplication, we have _mulmatmat2 ~ _mulmatmat2. So, the situation is somewhat more interesting. A new data structure alone will not fix it. How about making a new basic dense matrix again focssing just on arithmetics, slicing operations and solving equations using rref?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Can we make reductions to lambda calls?&lt;/li&gt;&lt;li&gt;Can numbers.py bottleneck be solved by gmpy?&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 09 Jul 2013 10:14:42 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Tarun Gaba: GSoC Report Week 3</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7526836182390500993.post-2448841775059804252</guid>
	<link>http://tarun-gaba.blogspot.com/2013/07/gsoc-report-week-3.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;So, week three has also came to an end.&lt;br /&gt;Main considerations for this week were to write some unit tests, which would be determining the way main coding is to be done.&lt;br /&gt;As per the timeline,  all tests for Python side, should be complete by the coming week, i.e. which has started from today.&lt;br /&gt;&lt;br /&gt;As for now, I have almost completed tests for Shape class, and I have written some tests for VisualizationFrame. After that I would focus on tests for Scene class, which would act as a manager class, for holding and manipulating JSON data from the Python side, as well as be able to display output in IPython output cells, as well as fire up a server in case of Python interpreter.&lt;br /&gt;&lt;br /&gt;Scene and VisualizationFrame are very important classes for this package. They make up the majority of the API for the visualization implementations.&lt;br /&gt;Also there has been a little confusion on the extent of modularity the package would/should provide.&lt;br /&gt;&lt;br /&gt;Hopefully in a few days things would be more clear, so that I would be able to write tests more exhaustively according to the same.&lt;br /&gt;&lt;br /&gt;Anyways regarding general stuff, the summer period is amazing, and I am getting good responses from my mentor, and also huge support from the community people. So, it makes things easier to do, when we have so much people to help out there, which is also one of the perks of the open source environment.&lt;br /&gt;&lt;br /&gt;Cheers&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 08 Jul 2013 17:34:47 +0000</pubDate>
	<author>noreply@blogger.com (TARUN GABA)</author>
</item>
<item>
	<title>Chetna Gupta: Parametric Lograthimic Derivative</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=292</guid>
	<link>http://geekiology.wordpress.com/2013/07/08/parametric-lograthimic-derivative/</link>
	<description>&lt;p&gt;“Sometimes you have to give up the fight and walk away, and move on to something that’s more productive”. This Week has been full of moments of happiness and sorrow, ecstasy and blues, chaos and system which have all undergone a “git-rebase” to fit into this blog post&lt;br /&gt;
There have been moments when I have felt that things would start working just to realize that there is a lot of heuristic code-snippets, awaiting me to fix their failures. Here is another one “The Great Parametric Log Derivative Problem” which looks like the last problem to me at the moment (hoping it is the last).&lt;br /&gt;
Okay so let me put the important things before I let any of them go unsaid.&lt;br /&gt;
Parametric Lograthimic Derivative which is currently implemented in prde.py has a heuristic code working ie is given a differntial field K of characterstic 0, a hyperexponential monomial &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctheta+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\theta &quot; class=&quot;latex&quot; title=&quot;\theta &quot; /&gt; over K for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%5Cin+K+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f \in K &quot; class=&quot;latex&quot; title=&quot;f \in K &quot; /&gt; to decide whether there are integers &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%2C+m+%5Cin+Z+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n, m \in Z &quot; class=&quot;latex&quot; title=&quot;n, m \in Z &quot; /&gt; with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%5Cne+0+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n \ne 0 &quot; class=&quot;latex&quot; title=&quot;n \ne 0 &quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=nf+%3D+%5Cfrac%7BDv%7D%7Bv%7D+%2B+m%5Cfrac%7BD%5Ctheta%7D%7B%5Ctheta%7D+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; class=&quot;latex&quot; title=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; /&gt;&lt;br /&gt;
has a solution &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v+%5Cin+K+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v \in K &quot; class=&quot;latex&quot; title=&quot;v \in K &quot; /&gt; and to find one such solution if there are solutions.&lt;/p&gt;
&lt;p&gt;This problem arises from determining wheteher elements of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K%28%5Ctheta%29+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K(\theta) &quot; class=&quot;latex&quot; title=&quot;K(\theta) &quot; /&gt; are log-derivative of elements of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K%28%5Ctheta%29+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K(\theta) &quot; class=&quot;latex&quot; title=&quot;K(\theta) &quot; /&gt; or log derivative of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K%28%5Ctheta%29+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K(\theta) &quot; class=&quot;latex&quot; title=&quot;K(\theta) &quot; /&gt; -radical&lt;br /&gt;
Though as mentioned above we have a heuristic but not a complete solution Or if I  put this correctly the parametric log derivative heuristics would fail for most of the cases that are required to be tested in integrate_hypertangent (added in risch.py)&lt;br /&gt;
So here is what needs to be done or probably what looks like the rescue system for now. Yes you gussed it right! Structure theorem has been completely awesome through out, trying to rescue this risch_integrate from each tide of NotImplementedError(though they don’t do it very easily).&lt;/p&gt;
&lt;p&gt;According to structure theorem, f satisfying the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=nf+%3D+%5Cfrac%7BDv%7D%7Bv%7D+%2B+m%5Cfrac%7BD%5Ctheta%7D%7B%5Ctheta%7D+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; class=&quot;latex&quot; title=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; /&gt; equation has an elementary integral over K, which turns out always to be the case in the parametric log derivative problem that arise from the integration of elemetary functions. Let F be an elementary extension of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K%28%5Ctheta%29+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K(\theta) &quot; class=&quot;latex&quot; title=&quot;K(\theta) &quot; /&gt; and g &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cin+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\in &quot; class=&quot;latex&quot; title=&quot;\in &quot; /&gt; F be such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%3D+Dg+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f = Dg &quot; class=&quot;latex&quot; title=&quot;f = Dg &quot; /&gt;. Then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=nf+%3D+%5Cfrac%7BDv%7D%7Bv%7D+%2B+m%5Cfrac%7BD%5Ctheta%7D%7B%5Ctheta%7D+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; class=&quot;latex&quot; title=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; /&gt; has a solution with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%5Cne+0+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n \ne 0 &quot; class=&quot;latex&quot; title=&quot;n \ne 0 &quot; /&gt; we get &lt;img src=&quot;http://s0.wp.com/latex.php?latex=nf+%3D+%5Cfrac%7BDv%7D%7Bv%7D+%2B+m%5Cfrac%7BD%28%5Ctheta%29%7D%7B%5Ctheta%7D+%3D+%5Cfrac%7BD%28v%5Ctheta+%5Em%29%7D%7Bv%5Ctheta+%5Em%7D+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;nf = \frac{Dv}{v} + m\frac{D(\theta)}{\theta} = \frac{D(v\theta ^m)}{v\theta ^m} &quot; class=&quot;latex&quot; title=&quot;nf = \frac{Dv}{v} + m\frac{D(\theta)}{\theta} = \frac{D(v\theta ^m)}{v\theta ^m} &quot; /&gt; which implies that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%3D+Dq+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f = Dq &quot; class=&quot;latex&quot; title=&quot;f = Dq &quot; /&gt; is a log derivative of an F-radical, which ultimately turn outs to be &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum+r_i+Dt_i+%2B+%5Csum+r_i+%5Cfrac%7BDt_i%7D%7Bt_i%7D+%3D+f+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\sum r_i Dt_i + \sum r_i \frac{Dt_i}{t_i} = f &quot; class=&quot;latex&quot; title=&quot;\sum r_i Dt_i + \sum r_i \frac{Dt_i}{t_i} = f &quot; /&gt;&lt;br /&gt;
Finding the rational solutions for all &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r_i+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;r_i &quot; class=&quot;latex&quot; title=&quot;r_i &quot; /&gt; can be done by considering it a system of one linear equation for the r,’s with coefficients in F, then applying constant_system (in prde.py) to obtain a system with coefficients in C and the same constant solutions. Assuming that we have a vector space basis containing 1 for C over Q, projecting that system on 1 yields a system with coefficients in Q and the same rational solutions for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r_i+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;r_i &quot; class=&quot;latex&quot; title=&quot;r_i &quot; /&gt;.&lt;br /&gt;
I know this is a lot of talking and nothing like psudeo code, though we can draw some sort of code out of this, but that is actually the major concern for now. We don’t really have psudeo codes for the rest of the sections and it takes a bit longer to actually see how the implementation should be planned to fit into all the conditions. I cannot assure that everything would start working because there are thin lines which would probbaly now start connecting rde.py , prde.py and cds.py together and if any of them have some failures which bottlenecks the test-cases of other, I would have to redraw the dots to get better interconnections&lt;/p&gt;
&lt;p&gt;…. (Hope we get them connected soon)&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/292/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/292/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=292&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 08 Jul 2013 01:01:32 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer: Automating the SymPy release process</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1348</guid>
	<link>http://asmeurersympy.wordpress.com/2013/07/07/automating-the-sympy-release-process/</link>
	<description>&lt;p&gt;So I have just published &lt;a href=&quot;https://github.com/sympy/sympy/releases/sympy-0.7.3.rc1&quot;&gt;SymPy 0.7.3.rc1&lt;/a&gt;. I’ll write a blog post about the release itself when we release 0.7.3 final, but for now, I wanted to write about how we managed to automate our release process.&lt;/p&gt;
&lt;p&gt;Our story begins back in October of 2012, when I wrote a long winded &lt;a href=&quot;https://groups.google.com/d/msg/sympy/UfNhyFv-oMg/PkwIz32K-lsJ&quot;&gt;rant&lt;/a&gt; to the mailing list about how long it was taking to get the 0.7.2 release out (it took over a month from the time the release branch was created). &lt;/p&gt;
&lt;p&gt;The rant is fun, and I recommend reading it. Here are some quotes&lt;/p&gt;
&lt;p&gt;The intro:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Now here’s a timeline: 0.7.1 was released July 29, 2011, more than a year and two months ago.  0.7.0 was released just over a month before that, on June 28.  0.6.7 was released March 18, 2010, again over a year before 0.7.0.  In almost two year’s time, we’ve had three releases, and are struggling to get out a fourth.  And it’s not like there were no changes; quite the opposite in fact.  If you look at SymPy 0.6.6 compared to the current master, it’s unbelievable the amount of changes that have gone forward in that time.  We’ve had&lt;br /&gt;
since then the new polys, at least four completely new submodules (combinatorics, sets, differential geometry, and stats), massive improvements to integration and special functions, a ton of new stuff in the physics module, literally thousands of bug fixes, and the list goes on.  Each of these changes on it’s own was enough to warrant a release. &lt;/p&gt;
&lt;p&gt;So in case I didn’t make my point, le me state it explicitly: we need to release more often.  We need to release *way* more often.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My views on some of the fundamental (non-technical) issues:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
I think that one other thing that has held back many releases is the feeling of “wait, we should put this in the release”. The use of a release branch has helped keep master moving along independently, but there still seems to be the feeling with many branches of, “this is a nice feature, it ought to go in the release.”  My hope is that by making the release process smoother, we can release more often, and this feeling will go away, because it won’t be a big deal if something waits until the next release.  As far as deprecations go, the real issue with them is time, not release numbers.  So if we deprecate a feature today vs. one month from today, it’s not a big deal (as opposed to today vs. a year from today), regardless of how many versions are in between. &lt;/p&gt;
&lt;p&gt;I read about what GitHub does for their Windows product regarding releasing often on their blog: &lt;a href=&quot;https://github.com/blog/1271-how-we-ship-github-for-windows&quot; rel=&quot;nofollow&quot;&gt;https://github.com/blog/1271-how-we-ship-github-for-windows&lt;/a&gt; (they actually have this philosophy for all their products).  One thing that they said is, “And by shipping updates so often, there is less anxiety about getting a particular feature ready for a particular release. If your pull request isn’t ready to be merged in time for today’s release, relax. There will be another one soon, so make that code shine!”  I think that is exactly the point here.  Another thing that they noted is that automation is the key to doing this, which is what I am aiming for with the above point.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My vision:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Once we start releasing very often (and believe me, this is way down the road, but I’m trying to be forward looking here), we can do away with release candidates.  A release candidate lives in the wild for a week before the full release.  But if we are capable of releasing literally every week, then having release candidates is pointless.  If a bug slips into a release, we just fix it and it will be in the next release.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
We should release *at least* once a month.  I think that if the process is automated enough, that this will be very possible (as opposed to the current situation, where the release branch lasts longer than a month).  In times of high activity, we can release more often than that (e.g., after a big pull request is merged, we can release).
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That was October. Today is July. Basically, our release process was way too long. Half of it was testing stuff, half of it was tedious releasing stuff (like making tarballs and so on), and half of it was updating websites. &lt;/p&gt;
&lt;p&gt;We have moved all our testing to Travis CI. So now every pull request is tested, and we can be pretty much assured that master is always passing the tests.  There is still some work to do here (currently Travis CI doesn’t test with external dependencies), but it’s mostly a solved problem.&lt;/p&gt;
&lt;p&gt;For updating websites, we conceded that we are not going to update anything that we don’t own. That means no attempting to make Debian or Sage packages, or updating Wikipedia or Freshmeat. Someone else will do that (and does anyone even use Freshmeat any more?). &lt;/p&gt;
&lt;p&gt;That leaves the releasing itself. It’s still a pain, because we have to make a source tarball, Windows installer, html docs, and pdf docs, and do them all for both Python 2 and Python 3. &lt;/p&gt;
&lt;p&gt;So Ondrej suggested moving to fabric/vagrant. At the SciPy 2013 sprints, he started working on a fabfile that automates the whole process. Basically vagrant is a predefined Linux virtual machine that makes it easy to make everything completely reproducible. Fabric is a tool that makes it easy to write commands (in Python) that are run on that machine. &lt;/p&gt;
&lt;p&gt;Building the basic stuff was easy, but I want to automate &lt;em&gt;everything&lt;/em&gt;. So far, not everything is done yet, but we’re getting close. For example, in addition to building the tarballs, the fabric script checks the contents of the tarball against &lt;code&gt;git ls-files&lt;/code&gt; to make sure that nothing is included that shouldn’t be or left out accidentally (and, indeed, we caught some missing files that weren’t included in the tarball, including the README). &lt;/p&gt;
&lt;p&gt;You can run all this yourself. Checkout the 0.7.3 branch from SymPy, then cd into the release directory, and read the README. Basically, you just install Fabric and Vagrant if you don’t have them already, then run&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;vagrant up
fab vagrant prepare
fab vagrant release
&lt;/pre&gt;
&lt;p&gt;Note that this downloads a 280 MB virtual machine, so it will take some time to run for the first time. When you do this, the releases are in the `release` directory. &lt;/p&gt;
&lt;p&gt;Finally, I uploaded 0.7.3.rc1 to GitHub using the new releases feature. This is what the release looks like on GitHub, from the user point of view&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-05-31.png&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-05-31.png?w=450&amp;amp;h=260&quot; alt=&quot;SymPy 0.7.3.rc1&quot; width=&quot;450&quot; class=&quot;alignnone size-full wp-image-1352&quot; height=&quot;260&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is what it looks like to me&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-08-19.png&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-08-19.png?w=450&amp;amp;h=470&quot; alt=&quot;SymPy 0.7.3.rc1 Edit&quot; width=&quot;450&quot; class=&quot;alignnone size-full wp-image-1353&quot; height=&quot;470&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub has (obviously) the best interface I’ve ever seen for this. Of course, even better would be if there were an API, so that I could automate this too.  But since Google’s &lt;a href=&quot;http://google-opensource.blogspot.com/2013/05/a-change-to-google-code-download-service.html&quot;&gt;announcement&lt;/a&gt; that they are discontinuing downloads, we can no longer upload to Google Code. Our plan was to just use PyPI, but I am glad that we can have at least one other location, especially since PyPI is so buggy and unreliable (I can’t even log in, I get a 502).&lt;/p&gt;
&lt;p&gt;So please download this release candidate and test it. We espeically need people to test the Windows installer, since we haven’t automated that part yet (actually, we are considering not making them any more, especailly given the existence of people like Christoph Gohlke who &lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/#sympy&quot;&gt;make them&lt;/a&gt; for SymPy anyway, but we’ll see). The only thing that remains to be done is to finish writing the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/release-notes-for-0.7.3&quot;&gt;release notes&lt;/a&gt;. If you made any contributions to SymPy since the last release, please add them there. Or if you want to help out, you can go through our pull requests and make sure that nothing is missing.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1348/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1348/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1348&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 07 Jul 2013 03:13:57 +0000</pubDate>
</item>
<item>
	<title>Saurabh Jha: Profile results of Dense Matrix</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-83592426202169687</guid>
	<link>http://sympymatrix.blogspot.com/2013/07/profile-results-of-dense-matrix.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Seems Planet is now fine. Anyways, here are some profiling results of arithmetic operations of dense matrix. I am working on level 0 currently. [1]&lt;br /&gt;&lt;br /&gt;The profile results will be like this- for each operation, the first one is the profile of previous implementation, the second is the profile of new ones and the third is the profile of new one *with last call to Matrix removed*.&lt;br /&gt;For example, I am doing manipulations by first converting matrices to lists. Suppose &quot;result&quot; is the resultant list of the matrix. Then second profiles will be the implementations with returns Matrix(result) and the third ones will return just result.&lt;br /&gt;&lt;br /&gt;All the third profiles will be discussed later.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;a = Matrix([[3, 4, 5], [6, 7, 8], [9, 10, 11]])&lt;br /&gt;b = Matrix([[4, 5, 6], [7, 8, 9], [10, 11, 12]])&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;For addition:&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;cProfile.run(&quot;a + b&quot;)&lt;br /&gt;         180 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 decorators.py:105(binary_op_wrapper)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:532(__add__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:573(_force_mutable)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:600(as_mutable)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:283(copy)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:3537(classof)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 matrices.py:390(shape)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:508(__add__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 matrices.py:519(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1588(__add__)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10b8fc248}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {getattr}&lt;br /&gt;        5    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;       36    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;       22    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        4    0.000    0.000    0.000    0.000 {map}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}&lt;br /&gt;       12    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}&lt;br /&gt;        7    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_add(a, b, ZZ)&quot;)&lt;br /&gt;         171 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:597(__new__)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 densetools.py:15(_addr)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 densetools.py:3(_add)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10b8fc248}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;       17    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;       25    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}&lt;br /&gt;       24    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_add(a, b, ZZ)&quot;)&lt;br /&gt;         90 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 densetools.py:15(_addr)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 densetools.py:3(_add)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;       12    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;       12    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Conclusion: Improvement is zilch.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;For Negation:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;-a&quot;)&lt;br /&gt;         104 function calls (103 primitive calls) in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;      2/1    0.000    0.000    0.000    0.000 decorators.py:105(binary_op_wrapper)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:548(__mul__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:552(__rmul__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 dense.py:573(_force_mutable)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:414(__mul__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 matrices.py:468(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:470(__rmul__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:532(__neg__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1612(__mul__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10a1d9248}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;        4    0.000    0.000    0.000    0.000 {getattr}&lt;br /&gt;        5    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;       21    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;        7    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {map}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_neg(a, ZZ)&quot;)&lt;br /&gt;         130 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:597(__new__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 densetools.py:34(_neg)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 densetools.py:42(_negr)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10a1d9248}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;       17    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;       14    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}&lt;br /&gt;       24    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}&lt;br /&gt;        5    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_neg(a, ZZ)&quot;)&lt;br /&gt;         49 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 densetools.py:34(_neg)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 densetools.py:42(_negr)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;       12    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Conclusion: slightly slower.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;For Multiplication Matrix * Matrix:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;cProfile.run(&quot;a*b&quot;)&lt;/div&gt;&lt;div&gt;         491 function calls in 0.001 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.001    0.001 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;       29    0.000    0.000    0.000    0.000 basic.py:81(__new__)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;/div&gt;&lt;div&gt;        6    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.001    0.001 decorators.py:105(binary_op_wrapper)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:210(_eval_transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.001    0.001 dense.py:548(__mul__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:573(_force_mutable)&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.001    0.000 dense.py:588(_new)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:600(as_mutable)&lt;/div&gt;&lt;div&gt;       18    0.000    0.000    0.000    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:283(copy)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:298(transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:3537(classof)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.001    0.001 matrices.py:414(__mul__)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 matrices.py:463(&amp;lt;lambda&amp;gt;)&lt;/div&gt;&lt;div&gt;       18    0.000    0.000    0.000    0.000 matrices.py:464(&amp;lt;lambda&amp;gt;)&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.001    0.000 matrices.py:81(_handle_creation_inputs)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;/div&gt;&lt;div&gt;       18    0.000    0.000    0.000    0.000 numbers.py:1588(__add__)&lt;/div&gt;&lt;div&gt;       27    0.000    0.000    0.000    0.000 numbers.py:1612(__mul__)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1679(__index__)&lt;/div&gt;&lt;div&gt;       36    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 {_functools.reduce}&lt;/div&gt;&lt;div&gt;       32    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10ded7248}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {callable}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {getattr}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;/div&gt;&lt;div&gt;      146    0.000    0.000    0.000    0.000 {isinstance}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {iter}&lt;/div&gt;&lt;div&gt;       21    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {map}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        6    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}&lt;/div&gt;&lt;div&gt;        7    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 {zip}&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;cProfile.run(&quot;_mulmatmat(a, b, ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         285 function calls in 0.000 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:597(__new__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 densetools.py:49(_mulmatmat)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 densetools.py:69(_mulrc)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10ded7248}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;/div&gt;&lt;div&gt;       17    0.000    0.000    0.000    0.000 {isinstance}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {iter}&lt;/div&gt;&lt;div&gt;       24    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}&lt;/div&gt;&lt;div&gt;       24    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}&lt;/div&gt;&lt;div&gt;        6    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {zip}&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;cProfile.run(&quot;_mulmatmat(a, b ,ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         204 function calls in 0.000 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 densetools.py:49(_mulmatmat)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 densetools.py:69(_mulrc)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;/div&gt;&lt;div&gt;       11    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;       12    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {zip}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Conclusion: Definitely some improvement.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;For Transpose: &lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;cProfile.run(&quot;a.transpose()&quot;)&lt;/div&gt;&lt;div&gt;         45 function calls in 0.000 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:210(_eval_transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:298(transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x107365248}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {hasattr}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {isinstance}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {iter}&lt;/div&gt;&lt;div&gt;        7    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {map}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;cProfile.run(&quot;_transpose(a, ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         71 function calls in 0.000 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:597(__new__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 densetools.py:86(_transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x107365248}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;/div&gt;&lt;div&gt;        8    0.000    0.000    0.000    0.000 {isinstance}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {iter}&lt;/div&gt;&lt;div&gt;       14    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}&lt;/div&gt;&lt;div&gt;       12    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}&lt;/div&gt;&lt;div&gt;        5    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {zip}&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;cProfile.run(&quot;_transpose(a, ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         8 function calls in 0.000 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 densetools.py:86(_transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {zip}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Conclusion : Not worth it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What is really interesting now is that the third profiles are outperforming others by a huge margin. It turns out that _handle_creation_matrix is takes quite a lot of calls to execute itself. This I think is one of the significant bottlenecks in the current matrix code. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It turns out that if we somehow manage to make a more efficient data structure for dense matrix, we can speed up things significantly.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;[1] https://github.com/sympy/sympy/pull/2248&lt;/div&gt;</description>
	<pubDate>Sat, 06 Jul 2013 18:35:33 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Sachin Joglekar: Singletons in Python (and GSoC update)</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-2643645454030390642</guid>
	<link>http://codesachin.blogspot.com/2013/07/singletons-in-python-and-gsoc-update.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This week, there isn't any interesting stuff to write about as far as the project is concerned, as I pretty much cleaned up what I had done in the previous two weeks. By 'clean up', I mean PEP-8 modifications to the existing code and rectification of some tiny(but serious) conceptual errors in the MovingRefFrame methods. I also spent quite some time reviewing, or rather, trying to understand Prasoon's code. I pulled his vector branch on my machine and started executing some tests on it. I have left some comments on his &lt;a href=&quot;https://github.com/sympy/sympy/pull/2208&quot;&gt;PR&lt;/a&gt;, and hopefully they will get sorted out soon. One good thing is, I also wrote the first draft of my code for Particle class-including methods for angular momentum, translational motion calculation, etc. This wasnt much of a problem, as I 'attached' a dedicated reference frame to each Particle that would be initialized. Hence, all of Particle's methods would call the relevant methods in MovingRefFrame.&lt;br /&gt;&lt;br /&gt;I got to learn about a pretty neat method of implementing Singleton classes in Python. How? I saw the __new__ method being called in Prasoon's code, and after an hour of going from website to website, I somehow ended up learning this.&lt;br /&gt;&lt;br /&gt;Have a look at the following code-&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;1:  class MutableSingletonClass(object):  &lt;br /&gt;2:    instance = None  &lt;br /&gt;3:      &lt;br /&gt;4:    def __new__(cls, *args, **kwargs):  &lt;br /&gt;5:      print (&quot;In __new__&quot;)  &lt;br /&gt;6:      instance = cls.instance  &lt;br /&gt;7:      if instance is None:  &lt;br /&gt;8:        print (&quot;No instance found&quot;)  &lt;br /&gt;9:        instance = cls.instance = \  &lt;br /&gt;10:              object.__new__(cls)  &lt;br /&gt;11:      else:  &lt;br /&gt;12:        print (&quot;Instance found&quot;)  &lt;br /&gt;13:      return instance  &lt;br /&gt;14:      &lt;br /&gt;15:    def __init__(self, *args, **kwargs):  &lt;br /&gt;16:      print (&quot;In __init__&quot;)  &lt;br /&gt;17:      pass  &lt;br /&gt;18:    &lt;br /&gt;19:  class Class1(MutableSingletonClass):  &lt;br /&gt;20:    def __init__(self, x):  &lt;br /&gt;21:      print (&quot;In Class1 __init__&quot;)  &lt;br /&gt;22:      self.x = x  &lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;MutableSingletonClass's subclasses (and that class itself) will have &lt;i&gt;only &lt;/i&gt;one instance being generated per session (the first time, that is). The next time you try to initialize a new instance of Class1, that &lt;i&gt;same &lt;/i&gt;instance that was created earlier will be modified. Mind you, that one common instance WILL be modified everytime you call the constructor with new arguments. The reason this happens is, every time __new__ returns an object (which __new__ ensures is only one per session in this case), the __init__method is called. You cannot avoid that.&lt;br /&gt;To get a better idea, look at the output-&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;1:  &amp;gt;&amp;gt;&amp;gt; c1 = Class1(3)  &lt;br /&gt;2:  In __new__  &lt;br /&gt;3:  No instance found  &lt;br /&gt;4:  In Class1 __init__  &lt;br /&gt;5:  &amp;gt;&amp;gt;&amp;gt; c2 = Class1(4)  &lt;br /&gt;6:  In __new__  &lt;br /&gt;7:  Instance found  &lt;br /&gt;8:  In Class1 __init__  &lt;br /&gt;9:  &amp;gt;&amp;gt;&amp;gt; c1.x  &lt;br /&gt;10:  4  &lt;br /&gt;11:  &amp;gt;&amp;gt;&amp;gt;c1 == c2  &lt;br /&gt;12:  True  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Now, if we want to implement a &lt;b style=&quot;font-style: italic;&quot;&gt;real &lt;/b&gt;Singleton type, the &lt;a href=&quot;http://www.python.org/download/releases/2.2/descrintro/#__new__&quot;&gt;Python docs&lt;/a&gt; show a nice method-&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;1:  class FixedSingletonClass(object):  &lt;br /&gt;2:    instance = None  &lt;br /&gt;3:      &lt;br /&gt;4:    def __new__(cls, *args, **kwargs):  &lt;br /&gt;5:      print (&quot;In __new__&quot;)  &lt;br /&gt;6:      instance = cls.instance  &lt;br /&gt;7:      if instance is not None:  &lt;br /&gt;8:        print (&quot;Instance found&quot;)  &lt;br /&gt;9:      else:  &lt;br /&gt;10:        print (&quot;No instance found&quot;)  &lt;br /&gt;11:        instance = cls.instance = \  &lt;br /&gt;12:              object.__new__(cls)  &lt;br /&gt;13:        instance.init(*args, **kwargs)  &lt;br /&gt;14:      return instance  &lt;br /&gt;15:    &lt;br /&gt;16:    def init(self, *args, **kwargs):  &lt;br /&gt;17:      #This is where the subclasses should implement their  &lt;br /&gt;18:      #initialization  &lt;br /&gt;19:      pass  &lt;br /&gt;20:      &lt;br /&gt;21:    def __init__(self, *args, **kwargs):  &lt;br /&gt;22:      #Subclasses should only define this as a dummy so users no which  &lt;br /&gt;23:      #arguments to pass for initialization  &lt;br /&gt;24:      print (&quot;In __init__&quot;)  &lt;br /&gt;25:      pass  &lt;br /&gt;26:    &lt;br /&gt;27:  class Class2(FixedSingletonClass):  &lt;br /&gt;28:    def init(self, x):  &lt;br /&gt;29:      print (&quot;In Class2 init&quot;)  &lt;br /&gt;30:      self.x = x  &lt;br /&gt;31:    &lt;br /&gt;32:    def __init__(self, x):  &lt;br /&gt;33:      print(&quot;In Class2 __init__&quot;)  &lt;br /&gt;34:      pass  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;As you can see here, this implementation reduces the __init__ method to a mere formality/dummy (just to tell the users which values to enter for initialization, in the shell). Actually speaking, all the work is done by the 'init' method, which can now be controlled by the program. Hence, this real initializer (not __init__) is called &lt;i&gt;only &lt;/i&gt;once..the first time an instance of Class2 is created. The rest of the times, __init__ &lt;i&gt;is &lt;/i&gt;called, but it makes no changes to the existing instance. This ensures all references of Class2 point to a common instance.&lt;br /&gt;Hence, the output-&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;1:  &amp;gt;&amp;gt;&amp;gt; d1 = Class2(5)  &lt;br /&gt;2:  In __new__  &lt;br /&gt;3:  No instance found  &lt;br /&gt;4:  In Class2 init  &lt;br /&gt;5:  In Class2 init  &lt;br /&gt;6:  &amp;gt;&amp;gt;&amp;gt; d2 = Class2(10)  &lt;br /&gt;7:  In __new__  &lt;br /&gt;8:  Instance found  &lt;br /&gt;9:  In Class2 init  &lt;br /&gt;10:  &amp;gt;&amp;gt;&amp;gt; d1.x  &lt;br /&gt;11:  5  &lt;br /&gt;12:  &amp;gt;&amp;gt;&amp;gt; assert d1 is d2  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;I hope this was useful.&lt;br /&gt;That's all for now.&lt;br /&gt;Have a great week ahead :-)&lt;/div&gt;</description>
	<pubDate>Sat, 06 Jul 2013 13:16:27 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Prasoon Shukla: GSoC Week 3 : SymPy Development – Finishing the basic structure</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=185</guid>
	<link>http://musingsofafriend.wordpress.com/2013/07/06/gsoc-week-3-sympy-development-finishing-the-basic-structure/</link>
	<description>&lt;p&gt;In the last two weeks, I made the classes on top of which the whole module will be based – namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BaseScalar&lt;/li&gt;
&lt;li&gt;Vector&lt;/li&gt;
&lt;li&gt;VectMul&lt;/li&gt;
&lt;li&gt;VectAdd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Until then, I had been writing code for these classes which required several unwritten methods from different classes. But, I left writing of these methods for later. So finally in this week, I started with writing those methods. This I did so as to have a basic level of functionality working. This part of the functionality will allow be to build the rest of the code on top of it.&lt;/p&gt;
&lt;p&gt;Now, these methods were generally for the basic vector operations – addition, multiplication etc. Also, because of the way we are handling the design, we require many helper methods that would allow the vectors to be handled. One such method is the ‘separate’ method about which I talked about in the last blog. Another important method is the ‘express_in’ method which takes a vector represented in a given coordinate system and returns a vector in any specified coordinate system.&lt;/p&gt;
&lt;p&gt;There are actually several problems I faced this week. The first one was regarding the implementation of special methods – such as __add__ and __mul__ – which would overload the corresponding operators. The problem (and its solution) has been discussed &lt;a href=&quot;https://groups.google.com/d/topic/sympy/QV6m9Nfp9kw/discussion&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next problem I faced was more ingrained in the design than I’d like it to be.&lt;/p&gt;
&lt;p&gt;Consider declaring a base scalar and a base vector:&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;&amp;gt;&amp;gt;&amp;gt; C = CoordSysRect('C')
&amp;gt;&amp;gt;&amp;gt; x = BaseScalar('x', C)
&amp;gt;&amp;gt;&amp;gt; e_x = Vector('e_x', C)

&lt;/pre&gt;
&lt;p&gt;Okay. Now, it should be clear that while both BaseScalar and Vector store a reference to CoordSysRect object C, the opposite it not true. Now, this is the basis for the problem I am facing. For example, if I have a vector object, say ‘v’, then:&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;&amp;gt;&amp;gt;&amp;gt; v.express_in(N)
&lt;/pre&gt;
&lt;p&gt;where N is a different coordinate system. Now, since we have to return a vector, therefore, we need to know the base scalars and base vectors in that coordinate system. But here, we don’t. Also, because all objects are immutable, therefore, we cannot change the object ‘C’ to include the base scalars and the base vectors – infact, we shouldn’t do it. The coordinate system object provides just the methods to express vectors in – it shouldn’t store base vectors or base scalars. This way, the same coordinate system object can be used with for many different base scalars and base vectors. Nevertheless, that doesn’t solve our problem. So, I decided that the express_in method should work in two ways – first, if the user provides the base scalars and base vectors to use, then we can return the result using those. Second, if the user provides only a CoordSys object – then we generate base scalars and base vectors on the fly and return a vector composed of those objects. Then, if the user wants, he can convert the returned vector to a vector formed by base scalars and base vectors provided by the user.&lt;/p&gt;
&lt;p&gt;This is of course, just one solution to this problem. The other way that we can extend this is using a separate cache object that would hold these relationships between these objects. But, that still needs to be discussed.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/185/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/185/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=185&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 06 Jul 2013 10:41:59 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: Solving the generalized Pell equation</title>
	<guid isPermaLink="false">http://theperceptiveway.wordpress.com/?p=74</guid>
	<link>http://theperceptiveway.wordpress.com/2013/07/06/solving-the-generalized-pell-equation/</link>
	<description>&lt;p&gt;Continuing the work from last week, I was aiming to solve quadratic Diophantine equations with delta = B**2 – 4*A*C &amp;gt; 0. I found two better references on this case which can be found in [1] and [2]. These two papers describe all the necessary algorithms for solving the generalized Pell equation, to which the quadratic Diophantine equation reduces in the case delta &amp;gt; 0. So let’s take a look at the generalized Pell equation and methods I used to solve the equation.&lt;/p&gt;
&lt;p&gt;The generalized Pell equation is an equation of the form x**2 – D * y**2 = N. The main case of the equation is D &amp;gt; 0, D is not a perfect square and abs(N) &amp;gt; 0. Other cases are fairly easy and solutions are straightforward.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case D &amp;lt; 0&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Since D &amp;lt; 0,  equation becomes x**2 + |D| * y**2 = N, which is always positive or zero. So there are no solutions when  N &amp;lt; 0 and only the trivial solution x = 0 and y = 0 when N = 0. If N &amp;gt; 0, we can note that |D| * y**2 &amp;lt;= N which implies y &amp;lt;= sqrt(N/|D|), so a brute force search on this interval would find us all the solutions. That’s what I did in this case. But there are more better ways like using methods of binary quadratic forms for positive definite forms. I hope to implement it in the near future.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case D = 0&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Equation reduces to x**2 = N, solution procedure is straight forward and no solutions exist if N &amp;lt; 0 or N is not a perfect square.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case D &amp;gt; 0&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;If D is a square, then let D = r**2 for some integer r. Then the LHS is x**2 – r**2 * y**2 = N –&amp;gt; (x – r*y) (x + r*y) = N. Now if N = 0 either x – r*y = 0 or x+ r*y = 0 and the parametric solutions for the above two cases are (r*t, t) and (-r*t, t) respectively. If N does not equal zero, then both x – r*y and x + r*y should be factors of N. We should find an upper bound M for y so that we can search through the solutions in the range 0 &amp;lt;= y &amp;lt;= M (We don’t have to consider negative solutions, reason is explained later in the article).  Let x – r*y = a and x + r*y = b. Solving for y we get y = (b – a)/(2*r). Now N = (x – r*y) * (x + r*y) = a * b so b &amp;lt;= N and a &amp;gt;= 1 since a is a positive factor o f N. which implies b &amp;lt;= N and -a &amp;lt;= -1. Now adding up the two inequalities gives b – a &amp;lt;= N – 1 which gives y &amp;lt;= (N – 1)/ (2*r) which is the required upper bound.&lt;/p&gt;
&lt;p&gt;Now suppose D is not a perfect square. If  N = 0, x**2 – D*y**2 = 0 –&amp;gt; x**2 = D * y**2.  Suppose y is non zero. Then y should divide x (Otherwise y**2 can’t divide x**2 which is the case here). Putting x = k*y on the LHS one can see that D = k**2 which is in contradiction to the fact that D is not a perfect square. So y = 0 and consequently x = 0. Hence if N = 0 we will have only the trivial solution x = 0 and y = 0. Now if N is non zero comes our main case.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PQa Algorithm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This algorithm computes the continued fraction expansion of the quadratic irrational (P + sqrt(D))/Q and some auxiliary variables, i.e of numbers like (2 + sqrt(3))/5 and (-34 + sqrt(19))/24. Note that D should not be perfect square otherwise the expression (P + sqrt(D))/Q will not be a quadratic irrational. For more details on algorithm refer [2]. Algorithm takes three variables P, Q, D as input and output six quantities P_i, Q_i, a_i, A_i, B_i and G_i for each time it’s called for a given set of initial values (This is implemented as a generator, please see python documentation). a_i is the ith term of continued fraction expansion of (P + sqrt(D))/Q and others are required in the LMM algorithm described below. Here i &amp;gt;= 0.&lt;/p&gt;
&lt;p&gt;It is also important to know that continued fraction representation of a quadratic irrationality is periodic (most of the time) after a few terms. In the solution we need to know the sum of the lengths of the aperiodic part and the periodic part. I implemented a separate function, length() to find this.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;LMM Algorithm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;LMM algorithm finds primitive solutions of the each equivalence class of the solution set of x**2 – D * y**2 = N. We have to construct the general solution of each class afterwards. Here is a rough description how the algorithm works.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Make a list of f &amp;gt; 0 such that f**2 divides N&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; Set m = N / f**2 and find all z such that z**2 ≡ D( mod |m|) and |m|/2 &amp;lt; z &amp;lt;= |m|/2&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; Apply PQa algorithm with P = z, Q = |m| and D = D&lt;br /&gt;
&lt;strong&gt;4.&lt;/strong&gt; Continue till there is an i &amp;gt;= 1 such that |Q_i| = 1 or reach the end of first period of continued fraction expansion without such a &lt;em&gt;i&lt;/em&gt;, i.e continue till i exceeds the value returned by length()&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;&lt;/em&gt;5&lt;em&gt;.&lt;/em&gt;&lt;/strong&gt; If you reached an i with |Q_i| = 1 then set r = G_i-1 and s = B_i-1. if r**2 – D * s**2 = m, then add x = f*r and y = f*s to the list of solutions. Otherwise r**2 – D * s**2 = -m. Now if x**2 – D * y**2 = -1 has solutions, find it’s minimal positive solution (u, v) and add x = f*(r*u+ s*v*d) and y = f*(r*v + s*u) to the list of solutions. If x**2 – D * y**2 = -1 does not have solution, continue with next z&lt;br /&gt;
&lt;strong&gt;6.&lt;/strong&gt;Repeat this for every z for corresponding f, and then for every f corresponding to N&lt;/p&gt;
&lt;p&gt;We can solve the x**2 – D * y**2 = -1 by reapplying LMM algorithm but in the Diophantine module I separately solved the equation for |N| = 1 and used the solutions returned by them in the LMM algorithm.&lt;/p&gt;
&lt;p&gt;If you are interested, a lot of cool information about solving process and the history of the Pell equation can be found in [3].&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;[1] Solving the equation ax^2 + bxy + cy^2 + dx + ey + f = 0, John P.Robertson, May 8, 2003. &lt;a href=&quot;http://www.jpr2718.org/ax2p.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.jpr2718.org/ax2p.pdf&lt;/a&gt;&lt;br /&gt;
[2] Solving the generalized Pell equation x**2 – D*y**2 = N, John P. Robertson, July 31, 2004. &lt;a href=&quot;http://www.jpr2718.org/pell.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.jpr2718.org/pell.pdf&lt;/a&gt;&lt;br /&gt;
[3] H.W Lenstra, Jr. &lt;a href=&quot;http://www.ams.org/notices/200202/fea-lenstra.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.ams.org/notices/200202/fea-lenstra.pdf&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/theperceptiveway.wordpress.com/74/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/theperceptiveway.wordpress.com/74/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=theperceptiveway.wordpress.com&amp;amp;blog=52956410&amp;amp;post=74&amp;amp;subd=theperceptiveway&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 06 Jul 2013 07:52:58 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: Third week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=147</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/07/05/third-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;This week I finished implementing a working version of the modular GCD algorithm for multivariate integer polynomials. As I mentioned last week, Monagan and Wittkopf [1] only described their algorithm for bivariate integer polynomials, so figuring out the right generalization was the main obstacle. This took more time than expected, but I am very happy to report that it seems to have worked out.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;To help me understand the multivariate case, I implemented parts of Brown’s original algorithm [2]. Brown uses a recursive subroutine (Algorithm P) to compute the GCD in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bx_0%2C+%5Cldots%2C+x_%7Bk-1%7D%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[x_0, \ldots, x_{k-1}]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[x_0, \ldots, x_{k-1}]&quot; /&gt;. It reduces the problem step by step by evaluating the polynomials at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7Bk-1%7D+%3D+a&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x_{k-1} = a&quot; class=&quot;latex&quot; title=&quot;x_{k-1} = a&quot; /&gt; for suitable &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%5Cin+%5Cmathbb+Z_p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;a \in \mathbb Z_p&quot; class=&quot;latex&quot; title=&quot;a \in \mathbb Z_p&quot; /&gt; and then calling Algorithm P recursively to compute the GCD in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bx_0%2C+%5Cldots%2C+x_%7Bk-2%7D%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[x_0, \ldots, x_{k-2}]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[x_0, \ldots, x_{k-2}]&quot; /&gt;. Each time a GCD in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k-1&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;k-1&quot; class=&quot;latex&quot; title=&quot;k-1&quot; /&gt; variables has been computed, it uses a version of the Chinese Remainder Theorem for polynomial rings to interpolate the GCD in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; variables. At the deepest recursion level the problem is reduced to a univariate one, in which case we can just use the Euclidean Algorithm to compute the GCD.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In the bivariate case, however, there is no need for this recursive subroutine, because the problem is reduced to a univariate one after evaluating in only one variable. This made it harder to figure out which ideas used in [1] could be generalized to the multivariate case.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;There are two major improvements in the algorithm from [1] compared to Brown’s original one. First, it tries to detect unlucky primes and evaluation points, i.e. ones where we get a wrong result, as soon as possible. This is done by successively calculating tight degree bounds during the recursion and comparing them with the degrees of the computed GCDs. In addition, those bounds provide a much better estimate for the number of needed evaluation points.&lt;br /&gt;
Another improvement is to wait until enough evaluation points are found and then interpolate in one go. This has the advantage that interpolation is only done if enough (lucky) evaluation points can be found. It also avoids creating a lot of intermediate polynomials.&lt;br /&gt;
I was able to make use of both of them in my implementation for the multivariate case.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Next week I will complete the documentation, write additional tests and tidy up the code. If everything goes well, I should be able to make a pull request by the end of next week.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;[1] &lt;a href=&quot;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&lt;/a&gt;&lt;br /&gt;
[2] &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=321664&quot; rel=&quot;nofollow&quot;&gt;http://dl.acm.org/citation.cfm?id=321664&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/147/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/147/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=147&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 05 Jul 2013 22:26:34 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: On Semisimple Lie Algebras (Part 1)</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=44</guid>
	<link>http://meclark256.wordpress.com/2013/07/03/on-semisimple-lie-algebras-part-1/</link>
	<description>&lt;p&gt;So, belatedly, here is the promised introductory post about semisimple Lie algebras.  Firstly, what is a Lie algebra?&lt;/p&gt;
&lt;p&gt;A Lie algebra, g, is a vector space over a field F with a binary operator (the bracket) [· , · ] : g × g → g .  The bracket must satisfy the following three relations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bilinearity: [ax + by, z] = a[x, z] + b[y,z] and [x, ay + bz] = a[x, y] + b[x, z] for scalars a, b in F and x, y, and z in g&lt;/li&gt;
&lt;li&gt;Alternating: [x, x] = 0 for all x in g&lt;/li&gt;
&lt;li&gt;The Jacobi identity: [x, [y, z]] + [z, [x, y]] + [y, [z, x]] = 0 for all x, y, and z in g&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A Lie algebra is simple if it is non-zero and has no nontrivial ideals.  The simple Lie algebras fall into two categories: Classical and Exceptional.  The classical Lie algebras are the four series A_n, B_n, C_n and D_n.  The exceptional Lie algebras are E_6, E_7, E_8, F_4, and G_2.  These Lie algebras are classified via their Dynkin diagrams (or equivalently their root systems):&lt;/p&gt;
&lt;div style=&quot;width: 370px;&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Connected_Dynkin_Diagrams.svg/360px-Connected_Dynkin_Diagrams.svg.png&quot; alt=&quot;&quot; width=&quot;360&quot; height=&quot;600&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Dynkin diagrams (from wikipedia)&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;To find the root system, we first consider the Cartan subalgebra of g, which is the maximal abelian subalgebra, and consider the adjoint action of g on this subalgebra.  There is a root system associated with this action.  Now, a root system over a vector space V is a set of finite vectors Φ(called roots), which satisfy&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The roots span V&lt;/li&gt;
&lt;li&gt;The only scalar multiples of x in Φ are x and -x&lt;/li&gt;
&lt;li&gt;For every x in Φ, the set Φ is closed under reflection through the hyperplane perpendicular to x.&lt;/li&gt;
&lt;li&gt;If &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; are roots in Φ, then the projection of &lt;i&gt;y&lt;/i&gt; onto the line through &lt;i&gt;x&lt;/i&gt; is a half-integral multiple of &lt;i&gt;x&lt;/i&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, there is a subset of Φ, which we will call Δ, such that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Δ is a basis of V&lt;/li&gt;
&lt;li&gt;Each root x in Φ can be written x = Σ k_y y for y in Δ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The elements of Δ are called the simple roots.&lt;/p&gt;
&lt;p&gt;So, basically, for each simple Lie algebra, there is a unique Dynkin diagram, which can be reached from the root system (which I’ll cover in a second post).  The simple Lie algebras are totally classified by their Dynkin diagrams.  Next time I’ll cover the Dynkin diagrams and Cartan matrices.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In terms of work this week, I’m currently writing tests for my code to see if things actually work.  I’ve written tests so far for type_A.py and things seem to be working out well.  I’ve also created a pull request (&lt;a href=&quot;https://github.com/sympy/sympy/pull/2237&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2237&lt;/a&gt;) for type_A.py.  I’m hoping to also get type_B.py up tomorrow evening.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/44/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/44/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=44&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 03 Jul 2013 20:51:02 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: The guessing game (still) continues</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=560</guid>
	<link>http://manojbits.wordpress.com/2013/07/03/the-guessing-game-still-continues/</link>
	<description>&lt;p&gt;Hello, before I go on with my weekly update, I would like to say that I’m really struggling to find good names for each of my blog posts. As you know, I’m not a really creative person, and Week 1, Week 2 and so sound so mainstream, so I decided to add a “still” , in between the title of my previous blog post in a sudden fit of creative exuberance. After all if movies can have sequels, blog posts can have them too. [Oh and please don't say I did not read this blog post because I had missed the prequel]&lt;/p&gt;
&lt;p&gt;So this is what I was upto the previous week, with respect to my GSoC project and SymPy&lt;/p&gt;
&lt;p&gt;1. &lt;strong&gt;Get the third heuristic PR merged:&lt;br /&gt;
&lt;/strong&gt;I had described the algorithm that I followed in my previous blog post.  &lt;a href=&quot;http://manojbits.wordpress.com/2013/06/26/the-guessing-game-continues/&quot; rel=&quot;nofollow&quot;&gt;http://manojbits.wordpress.com/2013/06/26/the-guessing-game-continues/&lt;/a&gt; .  I made few minor changes, to the algorithm, as advised by Sean.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of substituting, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; in the PDE &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D+%2B+%28%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+y%7D+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+x%7D%29+%2A+h%28x%2C+y%29+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+y%7D%2Ah%28x%2Cy%29%5E%7B2%7D+-+%5Cxi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%5Ceta%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; /&gt; and using dummy symbols, to find the maximum degree upto which I need to iterate &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt;, one can simply &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%2C+%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D%2C+%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D%2C+h%2A%2A2&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h, \frac{\partial h}{\partial x}, \frac{\partial h}{\partial y}, h**2&quot; class=&quot;latex&quot; title=&quot;h, \frac{\partial h}{\partial x}, \frac{\partial h}{\partial y}, h**2&quot; /&gt;. If all of them are positive, then the degree limit would be the maximum among these, Otherwise, the degree limit would be the difference between the maximum degree and the minimum degree&lt;/li&gt;
&lt;li&gt;I hadn’t read the documentation pretty well. There already was a function in SymPy called Poly().as_dict(), which would give the power of the respective variables, and the coefficients in dict form. Great, that just reduced my 15 line separatevars code into one line.
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;from sympy import *
from sympy.abc import x, y
Poly(3*x*y + x**2).as_dict()
{(1, 1): 3, (2, 0): 1}
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Also, it was agreed that If I find an infinitesimal, by this method that is already there, still the for loop would break, and the code would no more look for bivariates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The merged source code can be found here: &lt;a href=&quot;https://github.com/sympy/sympy/pull/2196&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2196&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.  &lt;strong&gt;The fourth heuristic: &lt;/strong&gt;If you had read my rant on the previous post, regarding the inability of anyone to give me any insight onto how to solve the PDE for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Cchi%7D%7B%5Cpartial+x%7D+%2B+h%2A%5Cfrac%7B%5Cpartial+%5Cchi%7D%7B%5Cpartial+y%7D+-+%5Cchi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \chi}{\partial x} + h*\frac{\partial \chi}{\partial y} - \chi*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \chi}{\partial x} + h*\frac{\partial \chi}{\partial y} - \chi*\frac{\partial h}{\partial y}&quot; /&gt;. I finally though that I would follow the same algorithm as I had mentioned in the third heuristic, since &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\chi&quot; class=&quot;latex&quot; title=&quot;\chi&quot; /&gt; is a bivariate polynomial in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt; . A minor difference would be that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\chi&quot; class=&quot;latex&quot; title=&quot;\chi&quot; /&gt; cannot be a constant since it gives a trivial solution. Also after finding &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\chi&quot; class=&quot;latex&quot; title=&quot;\chi&quot; /&gt;, by this method, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; can be found by this &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+%5Cxi%2Ah+%2B+%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = \xi*h + \chi&quot; class=&quot;latex&quot; title=&quot;\eta = \xi*h + \chi&quot; /&gt;. An interesting way, as suggested by mentor would be to simply rearrange the equation, which would give &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cchi%7D%7Bh%7D+%3D+-%5Cxi+%2B+%5Cfrac%7B%5Ceta%7D%7Bh%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\chi}{h} = -\xi + \frac{\eta}{h}&quot; class=&quot;latex&quot; title=&quot;\frac{\chi}{h} = -\xi + \frac{\eta}{h}&quot; /&gt; , which would mean when I divide &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\chi&quot; class=&quot;latex&quot; title=&quot;\chi&quot; /&gt; with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt;, it would give me &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;-\xi&quot; class=&quot;latex&quot; title=&quot;-\xi&quot; /&gt; as the quotient and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; as the remainder.&lt;/p&gt;
&lt;p&gt;The unmerged source code can be found here: &lt;a href=&quot;https://github.com/sympy/sympy/pull/2214&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2214&lt;/a&gt; . (Sean is yet to give his comments)&lt;/p&gt;
&lt;p&gt;I had a very brief look, at the fifth heuristic yesterday , it looks pretty scary, but of course I’ve survived through scarier things in life. Also I tried to review two other Pull Requests, &lt;a href=&quot;https://github.com/sympy/sympy/pull/2207&quot; title=&quot;https://github.com/sympy/sympy/pull/2207&quot;&gt;https://github.com/sympy/sympy/pull/2207&lt;/a&gt; , &lt;a href=&quot;https://github.com/sympy/sympy/pull/2207&quot; title=&quot;https://github.com/sympy/sympy/pull/2207&quot;&gt;https://github.com/sympy/sympy/pull/2010&lt;/a&gt; . I have to admit I didn’t do a really good job, but then I at least tried.&lt;/p&gt;
&lt;p&gt;I guess that it for the previous week.&lt;/p&gt;
&lt;p&gt;P.S : I think I am a freelancer now.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/560/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/560/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=560&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 03 Jul 2013 13:26:19 +0000</pubDate>
</item>
<item>
	<title>Ondřej Čertík: My impressions from the SciPy 2013 conference</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-6568744196982634289.post-1968760474047261373</guid>
	<link>http://ondrejcertik.blogspot.com/2013/07/my-impressions-from-scipy-2013.html</link>
	<description>I have attended the &lt;a href=&quot;https://conference.scipy.org/scipy2013/&quot;&gt;SciPy 2013 conference&lt;/a&gt; in Austin, Texas. Here are my impressions.&lt;br /&gt;&lt;br /&gt;Number one is the fact that the &lt;a href=&quot;http://ipython.org/notebook.html&quot;&gt;IPython notebook&lt;/a&gt; was used by pretty much everyone. I use it a lot myself, but I didn't realize how ubiquitous it has become. It is quickly becoming the standard now. The IPython notebook is using Markdown and in fact it is better than Rest. The way to remember the &quot;[]()&quot; syntax for links is that in regular text you put links into () parentheses, so you do the same in Markdown, and append [] for the text of the link. The other way to remember is that [] feel more serious and thus are used for the text of the link. I stressed several times to &lt;a href=&quot;http://plus.google.com/105051551851350439748&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Fernando Perez&lt;/a&gt; and &lt;a href=&quot;http://plus.google.com/110706953761515533762&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Brian Granger&lt;/a&gt; how awesome it would be to have interactive widgets in the notebook. Fortunately that was pretty much preaching to the choir, as that's one of the first things they plan to implement good foundations for and I just can't wait to use that.&lt;br /&gt;&lt;br /&gt;It is now clear, that the IPython notebook is &lt;i&gt;the&lt;/i&gt; way to store computations that I want to share with other people, or to use it as a &quot;lab notebook&quot; for myself, so that I can remember what exactly I did to obtain the results (for example how exactly I obtained some figures from raw data). In other words --- instead of having sets of scripts and manual bash commands that have to be executed in particular order to do what I want, just use IPython notebook and put everything in there.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Number two is that how big the conference has become since the last time I attended (couple years ago), yet it still has the friendly feeling. Unfortunately, I had to miss a lot of talks, due to scheduling conflicts (there were three parallel sessions), so I look forward to seeing them on video.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://plus.google.com/111657756858197263626&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Aaron Meurer&lt;/a&gt; and I have done the &lt;a href=&quot;https://conference.scipy.org/scipy2013/tutorial_detail.php?id=101&quot;&gt;SymPy tutorial&lt;/a&gt; (see the link for videos and other tutorial materials). It's been nice to finally meet &lt;a href=&quot;http://plus.google.com/109882876523836932473&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Matthew Rocklin&lt;/a&gt; (very active SymPy contributor) in person. He also had an interesting presentation&lt;br /&gt;about symbolic matrices + Lapack code generation. &lt;a href=&quot;http://plus.google.com/110966557175293116547&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Jason Moore&lt;/a&gt; presented PyDy.&lt;br /&gt;It's been a great pleasure for us to invite &lt;a href=&quot;http://plus.google.com/112898427768461421869&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+David Li&lt;/a&gt; (still a high school student) to attend the conference and give a presentation about his work on &lt;a href=&quot;http://sympygamma.com/&quot;&gt;sympygamma.com&lt;/a&gt; and &lt;a href=&quot;http://live.sympy.org/&quot;&gt;live.sympy.org&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;It was nice to meet the Julia guys, &lt;a href=&quot;http://plus.google.com/104556984762576706263&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Jeff Bezanson&lt;/a&gt; and &lt;a href=&quot;http://plus.google.com/106011176106265292073&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Stefan Karpinski&lt;/a&gt;. I contributed the Fortran benchmarks on the Julia's website some time ago, but I had the feeling that a lot of them are quite artificial and not very meaningful. I think Jeff and Stefan confirmed my feeling. Julia seems to have quite interesting type system and multiple dispatch, that SymPy should learn from.&lt;br /&gt;&lt;br /&gt;I met the VTK guys &lt;a href=&quot;http://plus.google.com/117876587154330177046&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Matthew McCormick&lt;/a&gt; and &lt;a href=&quot;http://plus.google.com/101821293118663904053&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Pat Marion&lt;/a&gt;. One of the keynotes was given by &lt;a href=&quot;http://plus.google.com/105850319012996814544&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Will Schroeder&lt;/a&gt; from Kitware about publishing. I remember him stressing to manage dependencies well as well as to use BSD like license (as opposed to viral licenses like GPL or LGPL). That opensource has pretty much won (i.e. it is now clear that that is the way to go).&lt;br /&gt;&lt;br /&gt;I had great discussions with &lt;a href=&quot;http://plus.google.com/110321315348047026192&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Francesc Alted&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/106486100774697058597&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Andy Terrel&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/101681894269884323551&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Brett Murphy&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/106311201257953729437&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Jonathan Rocher&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/104443012252347946160&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Eric Jones&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/110081663265512493333&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Travis Oliphant&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/113023052893273684980&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Mark Wiebe&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/111480164393314519931&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Ilan Schnell&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/104831275312843762750&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Stéfan van der Walt&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/108585099026155174191&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+David Cournapeau&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/116439624339414215461&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Anthony Scopatz&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/105656345164808608690&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Paul Ivanov&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/105753151742916635749&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Michael Droettboom&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/102862681530523589739&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Wes McKinney&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/101985752635828670051&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Jake Vanderplas&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/115993532093165217430&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Kurt Smith&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/105827017409315158569&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Aron Ahmadia&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/110786793649177800375&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Kyle Mandli&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/103293634823298090368&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Benjamin Root&lt;/a&gt; and others. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;It's also been nice to have a chat with &lt;a href=&quot;http://plus.google.com/105603936345485877784&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Jason Vertrees&lt;/a&gt; and other guys from &lt;a href=&quot;https://www.schrodinger.com/&quot;&gt;Schrödinger&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;One other thing that I realized last week at the conference is that pretty much everyone agreed on the fact that NumPy should act as the default way to represent memory (no matter if the array was created in Fortran or other code) and allow manipulations on it. Faster libraries like &lt;a href=&quot;http://blaze.pydata.org/&quot;&gt;Blaze&lt;/a&gt; or &lt;a href=&quot;http://blog.enthought.com/general/enthought-awarded-1m-doe-sbir-grant-to-develop-open-source-python-hpc-framework/&quot;&gt;ODIN&lt;/a&gt; should then hook themselves up into NumPy using &lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_dispatch&quot;&gt;multiple dispatch&lt;/a&gt;. Also SymPy would then hook itself up so that it can be used with array operations natively. Currently SymPy does work with NumPy (see our &lt;a href=&quot;https://github.com/sympy/sympy/blob/master/sympy/external/tests/test_numpy.py&quot;&gt;tests&lt;/a&gt; for some examples what works), but the solution is a bit fragile (it is not possible to override NumPy behavior, but because NumPy supports general objects, we simply give it SymPy objects and things mostly work).&lt;br /&gt;&lt;br /&gt;Similar to this, I would like to create multiple dispatch in SymPy core itself, so that other (faster) libraries for symbolic manipulation can hook themselves up, so that their own (faster) multiplication, expansion or series expansion would get called instead of the SymPy default one implemented in pure Python.&lt;br /&gt;&lt;br /&gt;Other blog posts from the conference:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Aaron's &lt;a href=&quot;http://asmeurersympy.wordpress.com/2013/07/02/scipy-2013/&quot;&gt;post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Fernando's &lt;a href=&quot;http://blog.fperez.org/2013/07/in-memoriam-john-d-hunter-iii-1968-2012.html&quot;&gt;post&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
	<pubDate>Tue, 02 Jul 2013 18:05:05 +0000</pubDate>
	<author>noreply@blogger.com (Ondřej Čertík)</author>
</item>
<item>
	<title>Tarun Gaba: GSoC Report Week 2</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7526836182390500993.post-8131354423549423501</guid>
	<link>http://tarun-gaba.blogspot.com/2013/07/gsoc-report-week-2.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;So, week two has also ended.&lt;br /&gt;&lt;br /&gt;I have found several ideas and new features to implement from various people in the community.&lt;br /&gt;We have finished fleshing out the API, although a few things need to be fleshed out.&lt;br /&gt;&lt;br /&gt;As recommended from my mentor, I would be doing test-driven development for the project.&lt;br /&gt;&lt;br /&gt;We have discussed the base classes , and the coming two weeks would be dedicated to writing sole tests for the classes, related to python part of the project.&lt;br /&gt;As a part of improvised timeline, we have decided to keep this month of July, for coding the python side of the project, and after midterm evaluations,. I would be working on the Javascripts.&lt;br /&gt;&lt;br /&gt;The interaction between the Python and Javascripts would take place with the JSON objects, either written in the form of JSON Objects or as written to files.&lt;br /&gt;&lt;br /&gt;This approach would help to provide required level of modularity to the project.&lt;br /&gt;Another major approach to modularity is to make the visualization module(from python side) independent of the mechanics package, i.e. it need not know whether the visualization data comes from sympy.physics.mechanics, or from any other software which could provide the output in the form desired tby the module.&lt;br /&gt;Although the focus is to make the project as mechanics friendly as possible, but still trying to maintain the modularity, and every major API decision is being taken with this point in view.&lt;br /&gt;&lt;br /&gt;This week, I will focus on writing some tests, and commit them to the repo.&lt;br /&gt;&lt;br /&gt;Cheers &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &lt;/div&gt;</description>
	<pubDate>Tue, 02 Jul 2013 09:01:56 +0000</pubDate>
	<author>noreply@blogger.com (TARUN GABA)</author>
</item>
<item>
	<title>Aaron Meurer: SciPy 2013</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1287</guid>
	<link>http://asmeurersympy.wordpress.com/2013/07/02/scipy-2013/</link>
	<description>&lt;p&gt;This past week was the 2013 SciPy conference. It was an exciting time, and a lot of interesting things happened. &lt;/p&gt;
&lt;p&gt;First, a background. This summer, I have been doing an internship with &lt;a href=&quot;http://continuum.io/&quot;&gt;Continuum Analytics&lt;/a&gt;. There I have been working mainly on Anaconda and conda. Anaconda is Continuum’s free (to everyone) Python distribution, which makes it really easy to get bootstrapped with all the scientific software (including SymPy). Conda is Anaconda’s package manager, which, I think, solves many if not all of the main issues with the Python packaging tools like pip, easy_install, PyPI, and virtualenv. &lt;/p&gt;
&lt;p&gt;I may write more about that later, but for now, I want to write about my experiences at the conference. The main point there is that I have already been in Austin for about a month, so getting to the conference this year was pretty easy.&lt;/p&gt;
&lt;p&gt;On the first day of the conference, on Monday morning, Ondrej Certik and I had our tutorial for SymPy. For the past couple of months, I have been rewriting the official SymPy tutorial from scratch. The official tutorial for SymPy was very old, and had many issues. It only went over features that were good at the time of its writing, so while nothing in the tutorial was wrong, it didn’t really represent the latest and greatest of the library. Also, it was written just like a list of examples, which is not much more than the API docs. In my new tutorial, I aimed to give a narrative style documentation, which starts from the very beginning of what symbolics are and works its way up to the basic functionality of things like solving and simplifying expressions. My goal was also to lead by example, and in particular, to avoid teaching things that I think either are antipatterns, or lead to antipatterns. In Python, there is one– and preferably only one –way to do it. In SymPy, by the nature of the library, there are about seven different ways to create a Symbol, for example (see &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Idioms-and-Antipatterns&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/wiki/Idioms-and-Antipatterns&lt;/a&gt;, the section, “Creating Symbols”). But there is one &lt;em&gt;best&lt;/em&gt; way to do it: by using symbols(). So all throughout the tutorial, I just use symbols(), even if I am creating a single Symbol. I avoid messy things like var. &lt;/p&gt;
&lt;p&gt;The final tutorial is at &lt;a href=&quot;http://docs.sympy.org/tutorial/tutorial/&quot; rel=&quot;nofollow&quot;&gt;http://docs.sympy.org/tutorial/tutorial/&lt;/a&gt;. This was the basis for the tutorial that Ondrej and I gave at SciPy. The site for our tutorial is at &lt;a href=&quot;http://certik.github.io/scipy-2013-tutorial/html/index.html&quot; rel=&quot;nofollow&quot;&gt;http://certik.github.io/scipy-2013-tutorial/html/index.html&lt;/a&gt;. There are links to videos, slides, and exercise notebooks there. &lt;/p&gt;
&lt;p&gt;I think our tutorial was a great success. People liked (I think) the introduction from nothing to SymPy. For our exercises, we used the &lt;a href=&quot;https://pypi.python.org/pypi/ipython_doctester&quot;&gt;IPython Doctester&lt;/a&gt;. I think that people really liked this way of doing exercises, but there were some issues getting it to work on everyone’s machine. &lt;/p&gt;
&lt;p&gt;In addition to my stuff, Ondrej presented some notebooks of examples of work that he has used in his work at LANL. I think this worked well. There were several physicists in the audience, who understood most of the content, but even for those who weren’t (including me!), it really showed that SymPy is a useful tool. In a beginner tutorial, it is easy to get lost in the easy details, and forget that in the end, you can actually use SymPy to compute some powerful things.  SymPy has in the past year or two really passed the barrier of toy to tool. &lt;/p&gt;
&lt;p&gt;After our tutorial, I attended the IPython tutorial, and the two-part Scikit-Learn tutorial. The most awesome part of this was just getting to meet people. Fernando Perez, Thomas Kluyver, and Brian Granger of IPython were at the conference. Brain is also a SymPy developer, who has spearheaded the quantum module. From SymPy, in addition to Ondrej (who created SymPy), I met Matthew Rocklin, one of the top contributors, Jason Moore, one of the developers of PyDy, which uses SymPy’s mechanics module, and David Li, who works on SymPy Gamma and SymPy Live (more on these people later). &lt;/p&gt;
&lt;p&gt;After the tutorials, Wednesday and Thursday were the talks. There were a lot of good ones. Here are the ones that I remember the most&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fernando’s keynote. If you’ve ever seen one of Fernando’s talks, you know that he is a great speaker. &lt;/li&gt;
&lt;li&gt;Matthew’s talk. His talk was about his work on using SymPy’s matrix expressions to compile expressions for BLAS/LAPACK. This talk excited many people in the audience. I think this is great, because it shows people some of the real power of things you can only do with symbolics.&lt;/li&gt;
&lt;li&gt;Jason Moore’s talk about PyDy and the mechanics module. He ran out of time, but there is a nice example of using SymPy to generate a controller for an inverted triple pendulum, which seems impossible, but then he shows a video of an actual thing that can do it.&lt;/li&gt;
&lt;li&gt;William Schroeder’s keynote. The message was that the academic model is broken, and doesn’t lead to reproducible research. While they are fixing things, the message is that we are the new publishers. There was also mention at the end that we should stop using noncommercial licenses, and stop using viral licenses like the GPL and LGPL. I was a little surprised to hear such a controversial statement, but it’s actually very true, and I agree with him that if people don’t stop using the GPL, then we will never achieve openness in science. &lt;/li&gt;
&lt;li&gt;David Li’s talk. David Li is a high school student (starting his senior year in the fall), who started with SymPy two years ago with Google Code-In. He has continued working on &lt;a href=&quot;http://live.sympy.org/&quot;&gt;SymPy Live&lt;/a&gt;, and &lt;a href=&quot;http://gamma.sympy.org/&quot;&gt;SymPy Gamma&lt;/a&gt; since. He is the reason that we have &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/&quot;&gt;SymPy Live in our docs&lt;/a&gt;. His talk was also well received.  David is a good speaker, and SymPy Gamma and SymPy Live are pretty cool (for those of you who don’t know, SymPy Live is an online shell where you can run a Python session with SymPy in the browser, and SymPy Gamma is the SymPy version of WolframAlpha).&lt;/li&gt;
&lt;li&gt;Brian Granger’s talk. His talk is entitled “&lt;strong&gt;&lt;a href=&quot;http://conference.scipy.org/scipy2013/presentation_detail.php?id=195&quot;&gt;Why you should write buggy software with as few features as possible&lt;/a&gt;“. &lt;/strong&gt;I think he had some good messages in there. You have to reduce the scope of your project, or it will get out of hand. As for bugs, getting bug reports is a good thing, because it shows that people are using the software, and what parts of it they are using. &lt;/li&gt;
&lt;li&gt;The lightning talks. Especially Matthew Rocklin’s lightning talk. His talk was about splitting things up into very small packages, so that you don’t have to get a huge package just for one function. He went a little far with it, and I think his ideas aren’t really usable in the current Python packaging ecosystem, but, taken in moderation, I agree with him. At any rate, it was very entertaining (I don’t have any video links here because they aren’t posted yet, but I encourage you to watch the lightning talks once they are posted). &lt;/li&gt;
&lt;li&gt;I heard the matplotlib talk was good, but I haven’t seen it because it was at the same time as Matthew’s talk. I plan to watch it when the videos come out. If you saw it, I encourage you to watch Matthew’s talk, especially if you’ve ever used BLAS/LAPACK.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topping off the week were the sprints on Friday and Saturday. My goal was to get out a release of SymPy. We didn’t quite get that far, but we got close. We are only blocking on a few small things to get out a release candidate, so expect one before the end of the week. We did introduce a lot of people to SymPy at the sprints, though, and got some first time contributions. Definitely I think we made a lot more people aware of SymPy at this conference than we ever have before. &lt;/p&gt;
&lt;p&gt;Another interesting thing at the sprints: before the conference, I was telling David Li that we should switch to Dill for SymPy Live (the way SymPy Live works on the App Engine, it has to pickle the session between runs, because there is a 60 time limit on each execution). Dill is a library that extends Python’s pickle so that it can pickle just about anything. At the end of David’s talk, the guy who wrote Dill, Mike McKerns raised his hand and asked him about it! At the sprints, David and he worked together to get it working in SymPy Live (and coincidentally, he also uses SymPy in another package, mystic). There were some fixes needed for Dill. He also moved Dill out of a larger project (in the spirit of Matthew’s lightning talk), and over to &lt;a href=&quot;https://github.com/uqfoundation/dill&quot;&gt;GitHub&lt;/a&gt;. Now all they need is a logo (Paul Ivanov suggested a variation on “we can pickle that!”). &lt;/p&gt;
&lt;p&gt;In all, it was a fun conference. The best part, as always, was meeting people in person, and talking to them. To conclude, I want to mention two other interesting things that happened.&lt;/p&gt;
&lt;p&gt;The first is that Matthew and I talked seriously about how to go about fixing the assumptions in SymPy. I will write to the list about this soon, but the basic idea is to just get in there and hack things together, so that we can get something that works. The work there is started at &lt;a href=&quot;https://github.com/sympy/sympy/pull/2210&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2210&lt;/a&gt;, where I am seeing if we can merge the old and new assumptions, so that something assumed in one can be asked in the old one.&lt;/p&gt;
&lt;p&gt;The second thing is that Ondrej got a new hat: &lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2013/07/2013-06-26-08-02-40-hdr.jpg&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2013/07/2013-06-26-08-02-40-hdr.jpg?w=450&amp;amp;h=602&quot; alt=&quot;Ondrej's Hat&quot; width=&quot;450&quot; class=&quot;alignnone size-full wp-image-1344&quot; height=&quot;602&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1287/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1287/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1287&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 02 Jul 2013 01:42:08 +0000</pubDate>
</item>
<item>
	<title>Saurabh Jha: Week3</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-4981516222455411508</guid>
	<link>http://sympymatrix.blogspot.com/2013/06/week3.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;I am done with level 0 and level 1 of sparse matrix. I am going to push the last bits of code of level 0 today. I am also almost done with the level 1 of sparse matrix and open the PR as soon as the level 0 gets merged in the code.&lt;br /&gt;&lt;br /&gt;For level 0, I need to implement a version of Cholesky decomposition. I am still not sure that I use CSR or DOK. I am not able to find any CSR Cholesky algorithms, so maybe I'll use CSR.&lt;br /&gt;&lt;br /&gt;I am thinking about changing my plan now. Earlier, it was  first implement level 0 completely, then level 1,  then level 2 and then level 3. Now I am going to implement the whole sparse structure from level 0 to level 3. The reason I am doing this is--&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;The level 1 cannot be used as it is in the rest of Sympy.&lt;/li&gt;&lt;li&gt;I am still not sure about the whole design. I have mostly been planning about it on the fly.&lt;/li&gt;&lt;li&gt;Others can see the advantages/disadvantages of the proposed architecture right away&lt;/li&gt;&lt;li&gt;Sparse are not as much used so I can test my ideas before moving on to dense&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;I have realised now that most of the code will be in level 0. Level 1 is really about having the functions of level 0 in the methods of the classes.  Level 1, 2, 3 would be just interface to the real code in level 0.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I hope dense matrix will not take me as much time as sparse matrices since they are comparatively straightforward and less esoteric for me. Plus I would have the concrete design in front of my eyes (in sparse matrix), so hopefully there would be less detours.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;[1] https://github.com/sympy/sympy/pull/2206&lt;/div&gt;</description>
	<pubDate>Mon, 01 Jul 2013 01:58:15 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Sachin Joglekar: GSoC: Week 2 : Reference Frames</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-8215975183868191855</guid>
	<link>http://codesachin.blogspot.com/2013/06/gsoc-week-2-reference-frames.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This is an update for the second week of my GSoC coding period. Its been long and quite tedious (though very interesting at times), as far as the code was concerned. Got a lot of stuff done in the commits this week, and I guess the major components of the reference frame class are now in place. Well, I can't be sure whether its perfect till Gilbert reviews it, but all that we discussed is more or less there. The things that got done this week-&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;The initializer for the MovingRefFrame class. Its huge and dense as I had said earlier, but it gets the job done well, and prevents any 'special cases' from wreaking havoc while at the same time giving all the needed functionality. As mentioned in the last week, the functions for boundary conditions have now been implemented in a file of their own, and they get called in this class' 'init' function. There were some other issues as well, like allowing velocities to be defined in frames that don't 'exist' yet, etc. But thankfully, they got solved after some thinking(read: thinking hard).&lt;/li&gt;&lt;li&gt;I rewrote the tree algorithm for finding relative motion parameters, since the one I had implemented earlier went via the global frame everytime- something that made the whole process very inefficient(and computationally impractical) at times. To get an idea of what I am talking about, imagine a 100 reference frames, each defined at some orientation/position wrt its predecessor. Now I want to know the motion of the 98th frame wrt the 96th. Earlier, I would find the motion of the 98th wrt the first(global) frame, do the same for 96th, and then 'process' the info to get the required motion params. Some tests with the current framework made me realise how stupid that was. So now, it just goes this way - 98th-&amp;gt;97th-&amp;gt;96th, the way its supposed to be.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;A small mock SymPy session with the use of this class is shown below-&lt;/div&gt;&lt;div&gt;The conditions are-&lt;/div&gt;&lt;div&gt;1) A frame R1&lt;/div&gt;&lt;div&gt;2) A frame R2 defined wrt R1, such that it initially coincides with R1, but has angular velocity of &lt;span style=&quot;background-color: white; font-family: arial, sans-serif; font-size: x-small; line-height: 16px;&quot;&gt;&lt;b&gt;k̂&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; font-family: sans-serif; font-size: 13px; line-height: 19.1875px;&quot;&gt; &lt;/span&gt;wrt it&lt;/div&gt;&lt;div&gt;3) A frame R3 defined wrt R2, such that it has a constant position vector of &lt;span style=&quot;background-color: white; color: #444444; font-family: arial, sans-serif; font-size: x-small; line-height: 16px;&quot;&gt;&lt;b&gt; î&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;background-color: #f9f9f9; font-family: sans-serif; line-height: 31px; text-align: center;&quot;&gt; &lt;/span&gt;&lt;/span&gt; wrt it.&lt;/div&gt;&lt;div&gt;Since R2 is rotating wrt R1, R3's position vector wrt R1 will be a function of time, as expected. Heres the working-&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt; &amp;gt;&amp;gt;&amp;gt; from sympy.physics.mechanics import MovingRefFrame  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; R1 = MovingRefFrame('R1', parentframe=None)  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; R2 = MovingRefFrame('R2', parentframe = R1, ang_vel = R1.basis(2))  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; R3 = MovingRefFrame('R3', parentframe = R2, pos_vector = R2.basis(0))&lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; R1.express(R3.pos_vector_in(R1))  &lt;br /&gt; - cos(t)*R1.basis(0) - sin(t)*R1.basis(1)  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;Thats all for now. You can have a look at the &lt;a href=&quot;https://github.com/sympy/sympy/pull/2187&quot;&gt;PR&lt;/a&gt; if you wish. The coming week will majorly be spent fine-tuning my current code and making it perfectly compatible with Prasoon's API, adding a few other helper functions if needed, and writing unit tests/example docs for all that's implemented so far.&lt;br /&gt;Have a great week :-)&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 29 Jun 2013 19:36:40 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Thilina Rathnayake: Quadratic Diophantine equation – I</title>
	<guid isPermaLink="false">http://theperceptiveway.wordpress.com/?p=61</guid>
	<link>http://theperceptiveway.wordpress.com/2013/06/29/quadratic-diophantine-equation-i/</link>
	<description>&lt;p&gt;Quadratic Diophantine equation is an equation of the form &lt;em&gt;Ax**2 + Bxy + Cy**2 + Dx + Ey + F = 0&lt;/em&gt; where&lt;em&gt; A, B, C, D, E,&lt;/em&gt; and &lt;em&gt;F&lt;/em&gt; are integer constants and x and y being integer variables. Study of this equation has always been an interesting area among number theorists. The famous pell equation is a special case of the above with&lt;em&gt; delta = B**2-4AC &amp;gt; 0&lt;/em&gt; and delta not being a perfect square. Normally, this equation is broken down into five cases for analytical purposes.&lt;/p&gt;
&lt;p&gt;1)&lt;em&gt; A = B = C = 0&lt;/em&gt; (Linear case): Reduces to a linear Diophantine equation of two variables.&lt;/p&gt;
&lt;p&gt;2) &lt;em&gt;A = B = 0&lt;/em&gt; and&lt;em&gt; C != 0 &lt;/em&gt; (Simple hyperbolic case): Equation reduces to &lt;em&gt;(Bx + E) (By + D) = DE – BF, &lt;/em&gt;which can be solved by considering the factors of &lt;em&gt;DE – BF&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;3) &lt;em&gt;B**2 – 4AC &amp;lt; 0 &lt;/em&gt;(Elliptical case): In this case, values of the x should lie between the roots of the equation &lt;em&gt;(B**2-4AC)x**2 + 2(BE – 2CD)x + E**2 – 4CF = 0. &lt;/em&gt;Values for x should be selected so that y is an integer.&lt;/p&gt;
&lt;p&gt;4) &lt;em&gt;B**2 – 4AC = 0 &lt;/em&gt;(Parabolic case): Solution procedure is rather complex in this case.&lt;/p&gt;
&lt;p&gt;I will describe these cases in detail in the future posts. I had almost completed the above cases at the start of Week 2.&lt;/p&gt;
&lt;p&gt;5) &lt;em&gt;delta = B**2 – 4AC &amp;gt; 0&lt;/em&gt;: This is split into several subcases.&lt;em&gt; &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case &lt;em&gt;delta = B**2 – 4AC &amp;gt; 0&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Subcase 1:&lt;em&gt; D = E = 0&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;This is the homogeneous case and again considered under two cases &lt;em&gt;F = 0&lt;/em&gt; and &lt;em&gt;F != 0&lt;/em&gt;. If&lt;em&gt; F = 0&lt;/em&gt;, then &lt;em&gt;x = 0&lt;/em&gt; and &lt;em&gt;y = 0&lt;/em&gt; are solutions. More solutions may exist if&lt;em&gt; B**2 – 4AC&lt;/em&gt; is a perfect square. Otherwise&lt;em&gt; x = 0&lt;/em&gt; and &lt;em&gt;y = 0&lt;/em&gt; is the only solution. I implemented this case in the module. If &lt;em&gt;F != 0&lt;/em&gt; the solution procedure is rather complex and involves continued fractions. I am currently working on this.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/theperceptiveway.wordpress.com/61/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/theperceptiveway.wordpress.com/61/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=theperceptiveway.wordpress.com&amp;amp;blog=52956410&amp;amp;post=61&amp;amp;subd=theperceptiveway&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 29 Jun 2013 19:17:39 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: Second week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=109</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/06/29/second-week-2/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;I started this week with writing documentation and more tests for the univariate GCD. I originally planned to do this later right before making a pull request, but it felt more right to do it now.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;After that I made some progress on the multivariate GCD implementation. What is working at the moment is the bivariate case, i.e. for polynomials in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bx%2Cy%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z[x,y]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z[x,y]&quot; /&gt;. This is what is described in the article by Monagan and Wittkopf [1]. Sadly, they do not talk about general multivariate polynomials. That is why I looked into Brown’s original article [2] on the modular GCD algorithm. My plan now is to create a mixture of the two algorithms to cover multivariate polynomials but also take advantage of the ideas in [1].&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;I am writing everything for the new &lt;code&gt;PolyElement&lt;/code&gt; module, which is both an advantage and a disadvantage at the same time. On the one hand, the design of the new module is very nice, but on the other hand there are still a lot of functions which are not yet ported. This means that for a lot of calculations I have to convert to the old representation and back. Therefore, speed comparisons with the heuristic GCD algorithm do not make much sense at this point.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Next week I plan to finish a working version for multivariate polynomials and maybe try to reduce the number of needed conversions.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;[1] &lt;a href=&quot;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&lt;/a&gt;&lt;br /&gt;
[2] &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=321664&quot; rel=&quot;nofollow&quot;&gt;http://dl.acm.org/citation.cfm?id=321664&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/109/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/109/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=109&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 29 Jun 2013 16:34:54 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: The modular GCD algorithm for univariate integer polynomials</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=113</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/06/29/the-modular-gcd-algorithm-for-univariate-integer-polynomials/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;In this post I will briefly describe the algorithm from [1], which I implemented for computing the greatest common divisor of two univariate integer polynomials.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;strong&gt;Input:&lt;/strong&gt; two polynomials &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29%2C+g%28x%29+%5Cin+%5Cmathbb+Z%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x), g(x) \in \mathbb Z[x]&quot; class=&quot;latex&quot; title=&quot;f(x), g(x) \in \mathbb Z[x]&quot; /&gt;&lt;br /&gt; &lt;strong&gt;Output:&lt;/strong&gt; their GCD &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x)&quot; class=&quot;latex&quot; title=&quot;h(x)&quot; /&gt; and cofactors, i.e. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29%2Fh%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x)/h(x)&quot; class=&quot;latex&quot; title=&quot;f(x)/h(x)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%28x%29%2Fh%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g(x)/h(x)&quot; class=&quot;latex&quot; title=&quot;g(x)/h(x)&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The main loop iterates over all primes &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; does not divide the leading coefficients of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x)&quot; class=&quot;latex&quot; title=&quot;f(x)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g(x)&quot; class=&quot;latex&quot; title=&quot;g(x)&quot; /&gt; at the same time. This has the effect that the degree of the GCD of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29+%5C%2C+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x) \, \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;f(x) \, \mathrm{mod} \, p&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%28x%29+%5C%2C+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g(x) \, \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;g(x) \, \mathrm{mod} \, p&quot; /&gt; in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[x]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[x]&quot; /&gt; is not smaller than the degree of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x)&quot; class=&quot;latex&quot; title=&quot;h(x)&quot; /&gt;. If the degree is the same, we call the prime &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; &lt;em&gt;lucky,&lt;/em&gt; otherwise we call it &lt;em&gt;unlucky. &lt;/em&gt;The efficiency of the algorithm relies on the fact that unlucky primes are rare.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;For a lucky prime &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; the GCD of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29+%5C%2C+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x) \, \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;f(x) \, \mathrm{mod} \, p&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%28x%29+%5C%2C+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g(x) \, \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;g(x) \, \mathrm{mod} \, p&quot; /&gt; in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[x]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[x]&quot; /&gt; differs only by a constant factor from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29+%5C%2C+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x) \, \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;h(x) \, \mathrm{mod} \, p&quot; /&gt;. Therefore the strategy is to calculate the former for enough lucky primes and then reconstruct &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x)&quot; class=&quot;latex&quot; title=&quot;h(x)&quot; /&gt; with the Chinese Remainder Theorem. The tricky part is to decide which primes are lucky and how many primes are enough.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The algorithm detects unlucky primes by comparing the degrees of the GCDs for different primes. It assumes that the first prime is lucky. If the GCD for the next prime has higher degree, we know that it is unlucky and skip it. If the degree is the same, we assume that it is also lucky. We continue in this way. If at some point we encounter a prime where the degree is lower, we know all previous primes were unlucky and have to start over. For each (presumably) lucky prime we reconstruct a polynomial in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z[x]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z[x]&quot; /&gt; from the previously reconstructed polynomial and the GCD in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[x]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[x]&quot; /&gt; using the Chinese Remainder Theorem. (For the first prime we just take the GCD itself.) When there is no change to the previous one it is very likely &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x)&quot; class=&quot;latex&quot; title=&quot;h(x)&quot; /&gt; and we do a trial division to verify the result. If this is successful we have found &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x)&quot; class=&quot;latex&quot; title=&quot;h(x)&quot; /&gt; (and the cofactors), otherwise we need more primes and have to continue.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;[1] &lt;a href=&quot;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/113/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/113/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=113&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 29 Jun 2013 14:53:07 +0000</pubDate>
</item>
<item>
	<title>Prasoon Shukla: GSoC Week 2 : SymPy Development</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=177</guid>
	<link>http://musingsofafriend.wordpress.com/2013/06/29/gsoc-week-2-sympy-development/</link>
	<description>&lt;p&gt;This is the summary of the work done and problems faced by me during my second week of development.&lt;/p&gt;
&lt;p&gt;Okay, so this week, I had planned to add some code that would work more on the structural part of the project. So, first I added support for cylindrical coordinate systems as well as the spherical coordinate system (along with the already present Rectangular coordinates). That was added without any problems.&lt;/p&gt;
&lt;p&gt;The next thing to do was to begin with the classes that will handle the vectors. There are 3 such classes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Vector&lt;/strong&gt; : This class is designed to hold just the base vectors. Initially, this class was supposed to hold the complete vector field but now we have changed that.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VectMul&lt;/strong&gt; : This class is made to hold product of type &lt;em&gt;scalar * Vector&lt;/em&gt;. Also, this can hold items of type &lt;em&gt;scalar * VectAdd (see point 3).&lt;/em&gt; This class is subclassed from &lt;strong&gt;Mul&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VectAdd &lt;/strong&gt;: This is a class subclassed from &lt;strong&gt;Add&lt;/strong&gt;. Just like Add, this will hold the sum of Vector and VectMul objects.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of these classes initialize a variable&lt;em&gt; is_Vector =True &lt;/em&gt;that is used for determining whether the an object is a vectors.&lt;/p&gt;
&lt;p&gt;I have implemented these class in their basic form. Once I had some structure to build on top of,  I started implementing basic functionality on these three classes. Here’s where the problem came. Let us take an example of VectAdd. A VectAdd stores many vector objects added together. Now, there is no requirement for the all the vector objects to be in the same frame. As an example, take this:&lt;i&gt;&lt;br /&gt;
&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cvec%7Bv%7D+%3D+%5Chat%7Bx%7D+%2B+%5Chat%7B%5Cvarphi%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\vec{v} = \hat{x} + \hat{\varphi}&quot; class=&quot;latex&quot; title=&quot;\vec{v} = \hat{x} + \hat{\varphi}&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Then clearly, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cvec%7Bv%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\vec{v}&quot; class=&quot;latex&quot; title=&quot;\vec{v}&quot; /&gt; has vectors in different coordinate systems. Therefore, implementing even the basic vector operations like the dot product becomes difficult because we need to have components of each vector in every coordinate system.&lt;/p&gt;
&lt;p&gt;Now for this problem, I have tried a couple of things. I still haven’t been able to successfully win over this problem but here’s an approach that I think will work. First, we need to have methods that will take a vector (VectAdd/VectMul/Vector) and output a list of vectors – only this time, each vector will be in different coordinate system. To implement such a method (which I’ll call &lt;em&gt;separate&lt;/em&gt;), we need to proceed as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loop over the &lt;em&gt;args&lt;/em&gt; of the vector and for every different coordinate system you encounter, add that to a dictionary.&lt;/li&gt;
&lt;li&gt;Then, for that dictionary key, the value will be a list that contains the &lt;em&gt;args&lt;/em&gt; for which have been defined in that particular coordinate system.&lt;/li&gt;
&lt;li&gt;Now, just take the args and construct a vector from those args – if there’s just one arg, we return it as is; if there are more than one, we return a VectAdd constructed with those args.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, the problem doesn’t end there. The Vector/VectAdd/VectMul can each represent vectors. Now, we will need to have methods that do a certain operation (for example the dot product) defined for every such class. A better way would be to make a generic function for each such functionality and indeed, that is what I have tried out with the dot product. But this won’t work until we have completed the separate method.&lt;/p&gt;
&lt;p&gt;I’ll be working on finishing the ‘separate’ method next. Then, if it works as expected, we can move and implement various other vector operators. Also, finishing this method (separate) will give me the opportunity to finally finish the helper methods and have something working – right now, I ‘m just writing the code without knowing how it would work. Anyway, that’s the plan for the next few days.&lt;/p&gt;
&lt;p&gt;And by the way, I just switched to &lt;a href=&quot;http://www.gnu.org/s/emacs/&quot; target=&quot;_blank&quot; title=&quot;Emacs!&quot;&gt;Emacs&lt;/a&gt; and it’s just great! ^__^ I can finally see what all the buzz was about &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/177/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/177/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=177&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 29 Jun 2013 11:09:44 +0000</pubDate>
</item>
<item>
	<title>Saurabh Jha: Week 2.5 Profiling of different implementations of sparse</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-212141304695696653</guid>
	<link>http://sympymatrix.blogspot.com/2013/06/week-25-profiling-of-different.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;br /&gt;I spent the last couple of days experimenting with alternate implementation of various algorithms. Here are the results--&lt;br /&gt;&lt;br /&gt;for three implementations of sparse*sparse-- _mulspsp, _mulspsp2, _mulspsp3, on two matrices&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;a = SparseMatrix(3, 4, {(0, 0): 1, (0, 1): 2, (2, 2): 3})&lt;br /&gt;b = SparseMatrix(4, 3, {(0, 0): 2, (0, 2): 4, (1, 2): 5})&lt;br /&gt;&lt;br /&gt;The profile results are&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_mulspsp(a, b, ZZ)&quot;)&lt;br /&gt;         709 function calls (691 primitive calls) in 0.001 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;       38    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;       39    0.000    0.000    0.000    0.000 matrices.py:3571(a2idx)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 matrices.py:390(shape)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 matrices.py:947(key2bounds)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 matrices.py:977(key2ij)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1595(__radd__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1619(__rmul__)&lt;br /&gt;       10    0.000    0.000    0.000    0.000 numbers.py:1873(__nonzero__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sparse.py:1046(_new)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sparse.py:163(col)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparse.py:182(row_list)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 sparse.py:201(&amp;lt;lambda&amp;gt;)&lt;br /&gt;       19    0.000    0.000    0.000    0.000 sparse.py:34(__init__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sparse.py:476(submatrix)&lt;br /&gt;       33    0.000    0.000    0.001    0.000 sparse.py:83(__getitem__)&lt;br /&gt;    33/15    0.000    0.000    0.000    0.000 sparsetools.py:116(_binsearch)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 sparsetools.py:43(_mulspsp)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparsetools.py:5(_doktocsr)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sparsetools.py:95(_mulspvec)&lt;br /&gt;       19    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;       18    0.000    0.000    0.000    0.000 {divmod}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;      158    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;      103    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        8    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}&lt;br /&gt;       24    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}&lt;br /&gt;        9    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}&lt;br /&gt;       21    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}&lt;br /&gt;        9    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {sorted}&lt;br /&gt;       17    0.000    0.000    0.000    0.000 {zip}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; cProfile.run(&quot;_mulspsp2(a, b, ZZ)&quot;)&lt;br /&gt;         585 function calls in 0.001 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;       40    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;       31    0.000    0.000    0.000    0.000 matrices.py:3571(a2idx)&lt;br /&gt;       10    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 matrices.py:390(shape)&lt;br /&gt;       15    0.000    0.000    0.000    0.000 matrices.py:947(key2bounds)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 matrices.py:977(key2ij)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 numbers.py:1595(__radd__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 numbers.py:1619(__rmul__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1873(__nonzero__)&lt;br /&gt;       15    0.000    0.000    0.000    0.000 sparse.py:1046(_new)&lt;br /&gt;        5    0.000    0.000    0.000    0.000 sparse.py:145(row)&lt;br /&gt;       10    0.000    0.000    0.000    0.000 sparse.py:163(col)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparse.py:182(row_list)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 sparse.py:201(&amp;lt;lambda&amp;gt;)&lt;br /&gt;       20    0.000    0.000    0.000    0.000 sparse.py:34(__init__)&lt;br /&gt;       15    0.000    0.000    0.000    0.000 sparse.py:476(submatrix)&lt;br /&gt;       28    0.000    0.000    0.001    0.000 sparse.py:83(__getitem__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparsetools.py:5(_doktocsr)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 sparsetools.py:62(_mulspsp2)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 sparsetools.py:95(_mulspvec)&lt;br /&gt;       20    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;       10    0.000    0.000    0.000    0.000 {divmod}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;      154    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;       85    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        5    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}&lt;br /&gt;       13    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}&lt;br /&gt;       15    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}&lt;br /&gt;       22    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}&lt;br /&gt;        4    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {sorted}&lt;br /&gt;        9    0.000    0.000    0.000    0.000 {zip}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; cProfile.run(&quot;_mulspsp3(a, b, ZZ)&quot;)&lt;br /&gt;         159 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        7    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;       12    0.000    0.000    0.000    0.000 matrices.py:3571(a2idx)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 matrices.py:390(shape)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 matrices.py:977(key2ij)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:1019(zeros)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparse.py:182(row_list)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 sparse.py:201(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:34(__init__)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 sparse.py:83(__getitem__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparsetools.py:78(_mulspsp3)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;        7    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;       43    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;        8    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'iteritems' of 'dict' objects}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {sorted}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {zip}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;It turns out that the fastest implementation is _mulspsp3 (which is the same as the one used in sparse.py) is fastest.&lt;br /&gt;&lt;br /&gt;However, great improvement is shown in sparse*vec. I will just take a single example as I have earlier written that new algorithm is O(nnz) asymptotically in any case.&lt;br /&gt;&lt;br /&gt;m =                              &lt;br /&gt;&lt;br /&gt;[1, 2, 0, 0, 0, 0]&lt;br /&gt;[0, 3, 0, 4, 0, 0]&lt;br /&gt;[0, 0, 5, 6, 7, 0]&lt;br /&gt;[0, 0, 0, 0, 0, 8]&lt;br /&gt;&lt;br /&gt;and equivalent csr= [[ZZ(1), ZZ(2), ZZ(3), ZZ(4), ZZ(5), ZZ(6), ZZ(7), ZZ(8)], [0, 1, 1, 3, 2, 3, 4, 5], [0, 2, 4, 7, 8], [4, 6]]&lt;br /&gt;&lt;br /&gt;n = Matrix([[ZZ(4)], [ZZ(7)], [ZZ(12)], [ZZ(14)], [ZZ(17)], [ZZ(2)]]) (vector)&lt;br /&gt;&lt;br /&gt;Profile results are given below&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; cProfile.run(&quot;m*n&quot;)&lt;br /&gt;         545 function calls (540 primitive calls) in 0.001 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;       22    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;       27    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;br /&gt;      5/1    0.000    0.000    0.000    0.000 iterables.py:16(flatten)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 iterables.py:62(&amp;lt;lambda&amp;gt;)&lt;br /&gt;       36    0.000    0.000    0.000    0.000 matrices.py:3571(a2idx)&lt;br /&gt;       19    0.000    0.000    0.000    0.000 matrices.py:390(shape)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 matrices.py:977(key2ij)&lt;br /&gt;       16    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1588(__add__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1595(__radd__)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 numbers.py:1619(__rmul__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:1019(zeros)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:1046(_new)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:120(tolist)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparse.py:182(row_list)&lt;br /&gt;       14    0.000    0.000    0.000    0.000 sparse.py:201(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 sparse.py:295(multiply)&lt;br /&gt;      2/1    0.000    0.000    0.001    0.001 sparse.py:338(__mul__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparse.py:34(__init__)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 sparse.py:83(__getitem__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10a127248}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;       31    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;      178    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;       22    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;       25    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;       10    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        4    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}&lt;br /&gt;       18    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'iteritems' of 'dict' objects}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}&lt;br /&gt;       13    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {sorted}&lt;br /&gt;       18    0.000    0.000    0.000    0.000 {zip}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; cProfile.run(&quot;_mulspvec(csr, n, ZZ)&quot;)&lt;br /&gt;         104 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 dense.py:33(__getitem__)&lt;br /&gt;       12    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;       12    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 matrices.py:3571(a2idx)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        7    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1595(__radd__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1619(__rmul__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:34(__init__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparsetools.py:95(_mulspvec)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;       25    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;        4    0.000    0.000    0.000    0.000 {zip}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The new implementations of _applyfunc and scaler*sparse give little improvements but the code is simpler and thus less chances for error.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;All the code can be found at the latest commit of https://github.com/sympy/sympy/pull/2206. Also written there is the rationale of using csr internally.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 27 Jun 2013 09:40:11 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Mary Clark: Week 2</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=22</guid>
	<link>http://meclark256.wordpress.com/2013/06/26/week-2/</link>
	<description>&lt;p&gt;This week, I have more or less finished up the Type_B class.  The Lie algebra B_n corresponds to the Lie algebra so(2n + 1).  A fair amount of this work was more or less a copy/paste from the Type_A class, but there was additional work, since the root system is more complicated, and the Cartan matrix is different.&lt;/p&gt;
&lt;p&gt;I also decided that it would be good to add more functionality than I had talked about in my GSOC proposal.  I specifically wanted to add a function which tells a Sympy user the total number of roots a given Lie algebra has.  While only the simple roots of a Lie algebra are the most important/worked with, the total number of roots can be useful for calculations.  &lt;/p&gt;
&lt;p&gt;Having successfully (I hope) finished Type_A and Type_B, I think that I want to pause work in this direction for the moment, and begin properly building CartanType.  I want to make sure that I have this basic functionality working early, so that everything doesn’t go to hell in a handbasket later from not having a solid foundation.  I hope that I can have this working by the beginning of next week.&lt;/p&gt;
&lt;p&gt;After I finish that, I need to sit down and learn and concentrate and understand the algorithm for generating the commutation relations of a given Lie algebra.  From Cahn’s notes on semisimple Lie algebras (&lt;a href=&quot;http://phyweb.lbl.gov/~rncahn/www/liealgebras/texall.pdf&quot; rel=&quot;nofollow&quot;&gt;http://phyweb.lbl.gov/~rncahn/www/liealgebras/texall.pdf&lt;/a&gt;) all the commutations relations are determined by the Cartan matrix of a Lie algebra.   However, at this point I don’t really understand the mathematics behind this, since I’ve only looked at it somewhat cursorily.   I’m not sure how long this will take, in the end, but hopefully not too long.&lt;/p&gt;
&lt;p&gt;Later this week or this weekend I’m going to write a brief post on Lie algebras in general, so that anyone who isn’t familiar with them can get an introduction to root systems, Cartan matrices, etc.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/22/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/22/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=22&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 26 Jun 2013 19:13:54 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: The guessing game continues</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=536</guid>
	<link>http://manojbits.wordpress.com/2013/06/26/the-guessing-game-continues/</link>
	<description>&lt;p&gt;So, I started my week trying my best to figure out how to implement the third heuristic, given the fact that the Maple paper gave me no clue, on how do to it. I had also posted these questions on Math Stack and Math Overflow.&lt;/p&gt;
&lt;p&gt;1.&lt;a href=&quot;http://mathoverflow.net/questions/134011/best-approach-to-solve-this-pde&quot; rel=&quot;nofollow&quot;&gt;http://mathoverflow.net/questions/134011/best-approach-to-solve-this-pde&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&quot;http://math.stackexchange.com/questions/423334/method-of-characteristics-a-general-doubt&quot; rel=&quot;nofollow&quot;&gt;http://math.stackexchange.com/questions/423334/method-of-characteristics-a-general-doubt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The answer to the first question [1] was highly misleading, and I again wasted time trying to find the fallacy in the answer. (By the way, if anyone is able to find where the answer is supposedly wrong, please do add a comment) . Also to add fuel to the fire, the Math Overflow guys gave me a so called &lt;a href=&quot;http://math.stackexchange.com/help/badges/40/tumbleweed&quot;&gt;Tumbleweed&lt;/a&gt; badge, which is given to a person who asks a question with no votes, no answers, no comments, and low views for a week. Sigh.&lt;/p&gt;
&lt;p&gt;Then Sean, gave me a &lt;a href=&quot;http://www.google.co.in/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=3&amp;amp;ved=0CDsQFjAC&amp;amp;url=http%3A%2F%2Fwww.physics.drexel.edu%2F~bob%2FLieGroups%2FLG_16.pdf&amp;amp;ei=M-nKUcyRKMuqkgWyzYGgAg&amp;amp;usg=AFQjCNGkleRIkesil88wTDOlvErLjYBUMQ&amp;amp;sig2=iNN4uk09kOTV5CkB-1WCng&amp;amp;bvm=bv.48340889,d.dGI&amp;amp;cad=rja&quot;&gt;paper&lt;/a&gt; which had a heuristic, that follows a logic that I intelligently(?) used in my eleventh and twelfth entrance examinations, assume one of the four answers given in the options, substitute it back and see which one satisfies the question best (Umm. Did I mention this somewhere before?). Okay,now more seriously,let us once again examine the PDE in question,&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D+%2B+%28%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+y%7D+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+x%7D%29+%2A+h%28x%2C+y%29+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+y%7D%2Ah%28x%2Cy%29%5E%7B2%7D+-+%5Cxi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%5Ceta%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;The algorithm is as follows:&lt;/p&gt;
&lt;p&gt;1. Since &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x, y)&quot; class=&quot;latex&quot; title=&quot;\eta(x, y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x, y)&quot; class=&quot;latex&quot; title=&quot;\xi(x, y)&quot; /&gt; ,  are assumed to be bi-variate polynomials in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;, by intuition &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h(x, y)&quot; class=&quot;latex&quot; title=&quot;h(x, y)&quot; /&gt; should be a rational function in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt;  and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;. There could also be cases like when &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%2C+y%29+%3D+sin%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h(x, y) = sin(x)&quot; class=&quot;latex&quot; title=&quot;h(x, y) = sin(x)&quot; /&gt; and there could be a series expansion on both sides. But its best that things are kept simple and hence those cases are left alone.&lt;/p&gt;
&lt;p&gt;2. Then we substitute &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; it in the equation,  reduce it into a (numerator / denominator) form, throw away the denominator,  and find the degree of the numerator. By intuition again, this is the maximum limit upto which &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x, y)&quot; class=&quot;latex&quot; title=&quot;\eta(x, y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y)&quot; class=&quot;latex&quot; title=&quot;\xi(x,y)&quot; /&gt; can reach.&lt;/p&gt;
&lt;p&gt;3. First &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x, y)&quot; class=&quot;latex&quot; title=&quot;\eta(x, y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y)&quot; class=&quot;latex&quot; title=&quot;\xi(x,y)&quot; /&gt; are assumed to be constants and substituted in the PDE. Terms that are monomials in y are grouped together, for example &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y%2C+1%2C+y%2Ax%2C+y%2Ax%7B2%7D%2C+y%5E%7B2%7D%2Ax&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y, 1, y*x, y*x{2}, y^{2}*x&quot; class=&quot;latex&quot; title=&quot;y, 1, y*x, y*x{2}, y^{2}*x&quot; /&gt; and the coefficients are equated to zero, this gives us a set of linear equations in the coefficients which are tried to solve for using solve(). If it gives a non-trivial solution, those are the infinitesimals.  If it doesn’t&lt;/p&gt;
&lt;p&gt;4. Then keep iterating &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x,y)&quot; class=&quot;latex&quot; title=&quot;\eta(x,y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y)&quot; class=&quot;latex&quot; title=&quot;\xi(x,y)&quot; /&gt; . The next step would be to assume the infinitesimals to be &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%2B+b%2Ax+%2B+c%2Ay&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a + b*x + c*y&quot; class=&quot;latex&quot; title=&quot;a + b*x + c*y&quot; /&gt; , and follow step 3 again. If it doesn’t work out then, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%2B+b%2Ax+%2B+c%2Ay+%2B+d%2Ax%5E%7B2%7D+%2B+e%2Ax%2Ay+%2B+f%2Ay%7B2%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a + b*x + c*y + d*x^{2} + e*x*y + f*y{2}&quot; class=&quot;latex&quot; title=&quot;a + b*x + c*y + d*x^{2} + e*x*y + f*y{2}&quot; /&gt; and step 3 and so on, till the max limit given by step 2 is reached.&lt;/p&gt;
&lt;p&gt;5. It should be understood that non-trivial solutions for a homogeneous set of equations always return a set of equations, with arbitrary constants. For now, I’ve assumed all these constants to be one. I still don’t know how effective this is.&lt;/p&gt;
&lt;p&gt;The source code can be seen here: &lt;a href=&quot;https://github.com/sympy/sympy/pull/2196&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2196&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Towards the end of the week, my mentor Sean Vig went out for a bike race, so I took this to my advantage, and went for a movie marathon (race) as well, for four days and did not do any work. I also learnt not to be overly-dependent on your mentor, and you can do stuff like thinking about algos, even when your mentor is taking time to review your pull requests. But for now I’ve just started work on another heuristic, and have to respond to his comments on my previous Pull Request. Till then bye.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/536/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/536/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=536&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 26 Jun 2013 14:10:01 +0000</pubDate>
</item>
<item>
	<title>Chetna Gupta: Week-1</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=284</guid>
	<link>http://geekiology.wordpress.com/2013/06/26/outset-week-1/</link>
	<description>&lt;p&gt;This June 17th marked the beginning of my term as a GSoC intern at Sympy. Thanks Aaron for being the constant support while I was taking my tender first-steps towards the world of open source.&lt;/p&gt;
&lt;p&gt;Here I am to possibly discuss what I did in the first week but I would like to open this by not just rushing to the recent three PRs, I issued but to some of the most amazing things I have learned before and after the proposal phase.&lt;/p&gt;
&lt;p&gt;Firslty &lt;strong&gt;Indentation is God&lt;/strong&gt;!! I am serious, it is God. I am today aware of the number of spaces I put. (4 for a long lost tab) , a space after an if, no spaces before and after ‘=’.. and so on . I hate trailing space errors and my savior is (:%s/\s\+$//) , we all love vim dont we &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Secondly &lt;strong&gt;Design is important&lt;/strong&gt;!! Last couple of weeks taught me how important it is to follow the mockups , respect the well thought of designs, each precision and detail.&lt;/p&gt;
&lt;p&gt;I realized it is completely “logit” to spend couple of hours nudging a few pixels here and there..Following are the hours I spent nudging pixels .. some reaped commits, while many still lie to be put in&lt;/p&gt;
&lt;p&gt;Thirdly &lt;strong&gt;Learn about your Rescue tools&lt;/strong&gt; .. Last but not the least, I learned that life is not so daunting &lt;img src=&quot;http://s2.wp.com/wp-includes/images/smilies/icon_razz.gif&quot; alt=&quot;:P&quot; class=&quot;wp-smiley&quot; /&gt;  , we have a lot of rescue tools which work only if we know about them. “./bin/test sympy/utilities” comes in most frequent use out of all. Apart from this I also realized that git can become your best friend, it just needs sometime to bond with new people&lt;/p&gt;
&lt;p&gt;All this wouldn’t have been possible without having amazing people, guiding me on the IRC channel of Sympy&lt;/p&gt;
&lt;p&gt;Reverting back to my 3 PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/2191&quot;&gt;2191&lt;/a&gt;:
&lt;p&gt;Determines if for a given function f in k(t) there exists u in k(t) such that Du = f. Returns q such that i = h + r – Dq; Output -&amp;gt; tuple (q, i ) if there exists a derivative for given function in k(t) else returns None &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/2185&quot;&gt;2185&lt;/a&gt;:
&lt;p&gt;This method is used for solving Coupled Differntial System.&lt;br /&gt;
Given a differntial field K of characterstic 0 and f1, f2, g1, g2&lt;br /&gt;
in K, it decides whether the system of equations&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbegin%7Bpmatrix%7D+Dy1+%5C%5C+Dy2+%5Cend%7Bpmatrix%7D+%2B+%5Cbegin%7Bpmatrix%7D+f1+%26%26+af2+%5C%5C+f2+%26%26+f1+%5Cend%7Bpmatrix%7D+%5Cbegin%7Bpmatrix%7D+y1+%5C%5C+y2+%5Cend%7Bpmatrix%7D+%3D+%5Cbegin%7Bpmatrix%7D+g1+%5C%5C+g2+%5Cend%7Bpmatrix%7D+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\begin{pmatrix} Dy1 \\ Dy2 \end{pmatrix} + \begin{pmatrix} f1 &amp;amp;&amp;amp; af2 \\ f2 &amp;amp;&amp;amp; f1 \end{pmatrix} \begin{pmatrix} y1 \\ y2 \end{pmatrix} = \begin{pmatrix} g1 \\ g2 \end{pmatrix} &quot; class=&quot;latex&quot; title=&quot;\begin{pmatrix} Dy1 \\ Dy2 \end{pmatrix} + \begin{pmatrix} f1 &amp;amp;&amp;amp; af2 \\ f2 &amp;amp;&amp;amp; f1 \end{pmatrix} \begin{pmatrix} y1 \\ y2 \end{pmatrix} = \begin{pmatrix} g1 \\ g2 \end{pmatrix} &quot; /&gt;&lt;br /&gt;
has a solution. Hence returning (y1, y2) if a solution exist, None otherwise&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/2184&quot;&gt;2184&lt;/a&gt;:
&lt;p&gt;This is still in implementation phase, In this Pr i have tried adding simple trigonometric functions of the form tan(x), which would call integrate_hypertangent_reduce and integrate_hypertangent_polynomial under method risch_integrate&lt;/p&gt;
&lt;p&gt;To get this working i need coupledDifferntialSystem which still stands TODO&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Three PRs within a week, adding completely new code to the codebase, is a fairy tale in itself, still with a missing ending. So here I am to put down what has been achieved and what still needs to be done urgently to get things operational&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;&lt;code&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; risch_integrate((tan(x)**5 + tan(x)**3 + x**2*tan(x) + 1)/(tan(x)**2 + 1)**3, x)&lt;/p&gt;
&lt;p&gt;raise NotImplementedError(&quot;Trigonometric extensions are not &quot;&lt;/p&gt;
&lt;p&gt;NotImplementedError: Trigonometric extensions are not supported (yet!)&lt;/p&gt;
&lt;/code&gt;&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So it all started with the aim to support structure theorem for trigonometric extensions, things did start working with addition of functions tan_part, atan_part added in the risch.py as can be seen in the PR 2184 referenced above. But this lead to an urgent call for a module to support coupled differential system as the integrate_hypertangent function which was supposed to work on the new expression &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28t_0%5E5+%2B+t_0%5E3+%2B+t_0%2Ax%5E2+%2B+1%29%2F%28t_0%5E2+%2B+1%29%5E3+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(t_0^5 + t_0^3 + t_0*x^2 + 1)/(t_0^2 + 1)^3 &quot; class=&quot;latex&quot; title=&quot;(t_0^5 + t_0^3 + t_0*x^2 + 1)/(t_0^2 + 1)^3 &quot; /&gt; , produced after run through tan_part, did not seem to work without CDS.&lt;/p&gt;
&lt;p&gt;On the other hand cases like risch_integrate(x*tan(x)**2 – tan(x)**3 + x, x) (even without the CDS) would now be able to see a clean &amp;amp; bug free screen with no error traces, once we have is_deriv repo pushed in. Wondering Why ? I was doing that too a couple of days back, before Aaron put forth the very fact that “ALL CASES don’t tread the same path, PATH in an algorithmic sense though”. The above case can be thought of as independent of CDS, not because it is actually independent but because CDS returns “No Solution” for the equation system referenced in the description of PR 2185 above.&lt;/p&gt;
&lt;p&gt;Though things may not look as smooth as a choco-pie for now, but pushing is_deriv repo (which includes functions to support hypertangent cases) would definitely act as feast for the brainstorming FIRST WEEK. Though not all the cases, but YES! we would have an optimistic outlook for some of the cases which could be hooked back to the risch_integrate function and could be added as initial cases which would support the risch_integrate calls for trigonometric extensions&lt;/p&gt;
&lt;p&gt;The is_deriv repo would also enable me to make CDS worth testing and pushing.&lt;/p&gt;
&lt;p&gt;Looking forward to work with things at a fast enough pace for now, I intend to put in all possible test cases for all the open pull requests as and when required for the next couple of days from now. Also apart from the above 3 PRS &lt;a href=&quot;https://github.com/sympy/sympy/pull/2049&quot;&gt;2049&lt;/a&gt; could be soon looked into as I am possibly done with the tasks allocated by Aaron for the same.&lt;/p&gt;
&lt;p&gt;There is another PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/2034&quot;&gt;2034&lt;/a&gt;, which I am not very sure for now, interms of TODO, hope to get all the PRs merged quickly without bothering Aaron much.&lt;/p&gt;
&lt;p&gt;Signing off ~ Life is a roller-coaster (or well right now it is &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:D&quot; class=&quot;wp-smiley&quot; /&gt;  )&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/284/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/284/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=284&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 26 Jun 2013 07:24:09 +0000</pubDate>
</item>
<item>
	<title>Tarun Gaba</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7526836182390500993.post-434358419365808792</guid>
	<link>http://tarun-gaba.blogspot.com/2013/06/gsoc-report-week-1-finally-much-awaited.html</link>
	<description>&lt;h2&gt;&lt;b&gt;GSoC Report Week 1:&lt;/b&gt;&lt;/h2&gt;&lt;b&gt; &lt;/b&gt;Finally, the much awaited summer coding period has started. I am already feeling very enthusiastic about it.&lt;br /&gt;For the first week&lt;b&gt;&lt;/b&gt;&lt;b&gt;, &lt;/b&gt;I have been working on an detailed API, alongwith functions(their arguments and return values). Everything is being fleshed out.&lt;br /&gt;&lt;br /&gt;Also we(other PyDy members) have been holding discussions on various facets of implementations, how and what would be done for effective visualizations.&lt;br /&gt;&lt;br /&gt;An illustrative example has also been made, which utilizes different methods from the new API, to demonstrate the complete workflow.&lt;br /&gt;The illustrative example can be checked here:&lt;br /&gt;https://github.com/PythonDynamics/pydy_examples/pull/11&lt;br /&gt;&lt;br /&gt;And the API is in development form and can be checked here:&lt;br /&gt;http://pydy.org/visualization_temp_api&lt;br /&gt;&lt;br /&gt;Once the API is in a more finished form it can be ported to a more relevant location(link).&lt;br /&gt;In the coming week I hope to write some functions following the API, and related documentation and tests too.&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;&lt;h2&gt;&lt;b&gt; &lt;/b&gt;&lt;/h2&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Mon, 24 Jun 2013 09:14:48 +0000</pubDate>
	<author>noreply@blogger.com (TARUN GABA)</author>
</item>
<item>
	<title>Saurabh Jha: Week 2</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-7871624797346734784</guid>
	<link>http://sympymatrix.blogspot.com/2013/06/week-2.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;It took me a long time to get the CSR to DOK conversion and vice-versa PR[1] to get merged, but it seems fine now. I am thankful to Christopher Smith for helpful discussions and his pushes. Here is my progress in previous two weeks--&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Reliable CSR to DOK and inverse conversion[1]&lt;/li&gt;&lt;li&gt;Efficient implementation of sparsematrix-vector product. The running time of the program is O(nnz), where nnz is number of non-zero elements of sparse matrix[2]&lt;/li&gt;&lt;li&gt;Trying to support domains here. I tried some methods and ultimately chose the one that is similar to one done in polys module.[2]&lt;/li&gt;&lt;li&gt;Realisation that CSR is not appropriate for CSR + CSR, CSR - CSR and CSR*CSR. This is slower than other dictionary based implementation so I dropped the ideas&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;I was poking around with the current sparse code since I want to try my ideas on sparse before getting to dense. I think I have a clear direction for at least the next week.&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Improving sparse*sparse, I want to play with this idea tomorrow as I suspect I can improve the existing multiplication implementation. The implementation will use dictionaries, not CSR.&lt;/li&gt;&lt;li&gt;get sparse to support domains. My model would be to have procedural implementation in the new file sparsetools.py and then having these functions &quot;powering&quot; methods of sparse.py&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The current matrix can vaguely be considered as having Level 1 only. My strategy is to get Level 0 up. I don't want to plan more ahead since I think I should just plan on the fly as time comes and not putting any detail plan. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One problem I was having last two weeks is I  was not iterating fast enough. Ideally, I should push commits daily so that the code can be reviewed and discussed. It is a good boost for morale. It also makes sure that the project can be done piecemeal. &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] &lt;a href=&quot;https://github.com/sympy/sympy/pull/2169&quot;&gt;PR 2169&lt;/a&gt;&lt;br /&gt;[2] &lt;a href=&quot;https://github.com/sympy/sympy/pull/2190&quot;&gt;PR 2190&lt;/a&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 23 Jun 2013 17:07:54 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Sachin Joglekar: Hello World!</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-8317629035648079156</guid>
	<link>http://codesachin.blogspot.com/2013/05/hello-world.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Aha. My first ever blog post. The inspiration for this blog came from the Google Summer of Code program, which will be my primary focus till September.&lt;br /&gt;&lt;div&gt;I came to know that I was selected only yesterday night, and what a day that was! Phew... I was going round in circles thinking about my chances, what I had done right, what I had done wrong, blah blah. Never has been a wait of 24 hours been so torturous. I have to give credit to Gilbert Gede, Sean Vig, Jason Moore, DL Peterson, Angadh and all the other SymPy physics community mentors who helped me shape my proposal to a presentable, well-thought out condition. Earlier it was just one haphazard list of things that I intended to do over the summer(mainly monsoon, due to the late arrival of GSoC), and my chances wouldn't have been half as good without these people giving their input time and again.&lt;/div&gt;&lt;div&gt;Gilbert Gede, from UC-Davis, will be my mentor throughout the whole GSoC period, and I hope to learn a lot from him....not just physics, but also coding and coding styles in general. He is one of the authors of sympy.physics.mechanics (PyDy).&lt;/div&gt;&lt;div&gt;My co-mentor will be Stefan Krastanov, who has done awesome work for SymPy during his GSoC project last year. Considering both my mentors are former GSoCers, their experiences with the program will go a long way in making sure I don't stumble around too much.&lt;/div&gt;&lt;div&gt;I will be working alongside Prasoon Shukla, a student of IIT-R, as his project is closely related to mine in terms of dealing with vector fields.&lt;/div&gt;&lt;div&gt;Some others I need to thank are Christopher Smith, who helped me immensely during my first PRs for SymPy, Aaron, the SymPy head, who took the pains to comment on all my stupid coding mistakes in my initial work, Manoj Kumar, Priyans Murarka, Jay Rambhia and Divyansh Khanna who were great supports during my application period. Thanks to all of you, I am penning my first ever blog post :-)&lt;/div&gt;&lt;div&gt;I hope I have a great 3 months coding for GSoC. I do realise it's not gonna be very easy, and I am bound to get stuck at times, but I hope to live up to my proposal(&lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSOC-2013-Application:-Sachin-Joglekar:-Electromagnetism-module&quot;&gt;https://github.com/sympy/sympy/wiki/GSOC-2013-Application:-Sachin-Joglekar:-Electromagnetism-module&lt;/a&gt;) and finish well what I intend to do, to begin with.&lt;br /&gt;The past few months have been very eventful and anxious at the same time, I hope I can work in peace now. &lt;/div&gt;&lt;div&gt;A lot more blog posts are going to come, mostly about my GSoC work, but some also about the other interesting coding things I do here and there. Hope I live up to the expectations of the SymPy community :-).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 23 Jun 2013 10:58:36 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Sachin Joglekar: GSoC: Week 1</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-2806702897904585570</guid>
	<link>http://codesachin.blogspot.com/2013/06/gsoc-week-1.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Hmm. Week 1 of GSoC ends today. Its been a bit of a confused week, with most of my time spent thinking and  trying to determine how I am going to code the initialization of reference frames in the new mechanics core. Its going to be a little dense, with all the motion parameters being checked, analysed and stored, and the constraint of immutability making things a little difficult, implementation-wise. But I guess its better to make the classes immutable to gel well with the rest of SymPy, as the whole point of this part of my GSoC work would be to make sympy.physics.mechanics seem 'friendlier' to the rest of the codebase.&lt;br /&gt;&lt;br /&gt;What was gained? Well, I did finish (today) determining how exactly I am going to go the whole initialization procedure, after a &lt;i&gt;lot&lt;/i&gt; of brain-racking (its quite true when they say that programmers do most of their thinking not at their desk, but while doing things like eating and showering :-) ). A lot of math was involved, along with considerable thinking given to the exact implementation details. What did I learn? - &lt;i&gt;Always&lt;/i&gt; plan out what you are going to implement, on paper, before you start typing code(especially if math is involved). Taking time and understanding what you are going to do, and then doing it, is much better than constantly changing your code as you keep finding faults. Anyways, I did finish coding the rough API and some elementary functions like those of time derivatives, relative motion etc., but all this will be useful only once I finish the __init__ method.&lt;br /&gt;&lt;br /&gt;One good thing we decided to do was to code helper functions in the a separate file in the core to calculate motion parameters given differential equations and boundary conditions- using SymPy's &lt;a href=&quot;http://docs.sympy.org/0.7.1/modules/integrals.html&quot;&gt;integration&lt;/a&gt; and &lt;a href=&quot;http://docs.sympy.org/dev/modules/solvers/solvers.html&quot;&gt;equation-solving &lt;/a&gt;functions, ofcourse. I proposed this way of doing things since having this in the reference frame code would be confusing and chaotic, not to mention unnecessary. At the same time, a user would want to create a new frame instance based on a velocity vector and initial position boundary values-or something on those lines. So this we felt was a good middle ground to enable both. This is going to take time, but I guess having a good foundation is always good.&lt;br /&gt;&lt;br /&gt;In terms of code and API, I will have something concrete in my &lt;a href=&quot;https://github.com/sympy/sympy/pull/2187&quot;&gt;PR&lt;/a&gt; by the end of this week. Will try and show a mock SymPy session in my next post :-). Anyways, thats all for now. I wont be able to do much tomorrow, since I have to travel to a relative's place for lunch..though I guess I could work at night for an hour or two. A long week ahead, wish me luck :-D&lt;/div&gt;</description>
	<pubDate>Sat, 22 Jun 2013 20:19:30 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Katja Sophie Hotz: First week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=57</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/06/21/first-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;This week I started coding for my GSoC project. My aim for this week and the next is the implementation of a modular GCD algorithm for integer polynomials, both univariate and multivariate. Until now I implemented the univariate case and all tests already pass. I have not gotten to compare the runtime with the existing heuristic GCD algorithm, but I will do so in a future blog post.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The algorithm in the paper of Monagan and Wittkopf is described for bivariate polynomials, so the first thing I had to do was adapting it to the univariate case. Since dropping a variable is a simplification and the paper is written nicely, this didn’t cause &lt;span style=&quot;color: #000000;&quot;&gt;much problems. What did cause some difficulties was the fact that t&lt;/span&gt;he polys module is currently under a rewrite, so it is very easy to get a little confused. Thankfully, Mateusz (my mentor) helped me sort out the confusions. I think this consumed the biggest amount of time this week, because the code went through a few rewrites, but getting there helped me understand both the old and the new module a lot better.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/57/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/57/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=57&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 21 Jun 2013 14:13:04 +0000</pubDate>
</item>
<item>
	<title>Prasoon Shukla: GSoC Week 1: Getting started with SymPy</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=174</guid>
	<link>http://musingsofafriend.wordpress.com/2013/06/21/gsoc-week-1-getting-started-with-sympy/</link>
	<description>&lt;p&gt;This is the first blog post regarding my work on &lt;a href=&quot;http://sympy.org&quot; target=&quot;_blank&quot; title=&quot;SymPy&quot;&gt;SymPy&lt;/a&gt; under the Google Summer of Code 2013.&lt;/p&gt;
&lt;p&gt;So, to begin, I had proposed the addition of a new vector calculus module to the existing SymPy codebase. During the community bonding period (28th May – 16th June), the four people that are related with this project – &lt;a href=&quot;http://www.github.com/prasoon2211&quot; target=&quot;_blank&quot;&gt;I&lt;/a&gt;, &lt;a href=&quot;https://github.com/srjoglekar246&quot; target=&quot;_blank&quot;&gt;Sachin&lt;/a&gt;, &lt;a href=&quot;https://github.com/gilbertgede&quot; target=&quot;_blank&quot;&gt;Gilbert&lt;/a&gt; and &lt;a href=&quot;https://github.com/krastanov&quot; target=&quot;_blank&quot;&gt;Stefan&lt;/a&gt; (with the latter two being mentors) – discussed in detail the project structure, the API, the UI etc. After much discussion, we finalized the path we’re going to take.&lt;/p&gt;
&lt;p&gt;In the three days that I have worked (Monday, Wednesday and Thursday), the first thing that I did was write the skeleton of an API and got started with the code.&lt;/p&gt;
&lt;p&gt;So, first was the API. As I wrote before, the API was decided during the community bonding period. Obviously, writing the whole API before any of the code has been written is quite impossible. Therefore, the API only contains the stuff that we need &lt;em&gt;right now&lt;/em&gt;. That includes that elementary methods of the Vector, VectAdd, VectMul, CoordSys classes.&lt;/p&gt;
&lt;p&gt;After the API, I began with the code. The code started with the basic structure. The first was to make a CoordSys class. This class holds all the proper code to represent a coordinate system that can be oriented and position in space relative to a zero reference. While writing the __init__ function for the class, I faced some problems like where to put the code that actually initialized the direction cosine matrix (dcm, for short). Also, initially it was decided that we will store the dcm matrix whenever a frame was initialized that would be essentially the conversion matrix from the global frame to the frame that was created. But, this approach had problem – suppose we create a new frame (B) from a pre-existing frame (A) by rotating/positioning B wrt A. Then, the resulting DCM should ideally just contain the angle used for rotation wrt A. But, because we are storing only the DCM wrt to the global frame. Therefore, the DCM wrt global frame would go something like: DCM(B -&amp;gt; A) == DCM(global -&amp;gt; A) *  DCM(B -&amp;gt;global). The entries of this resultant matrix do not get simplified automatically. For example, sin(a) cos(a – b) + cos(a) sin(a -b) do not automatically simplify to -sin(b).&lt;/p&gt;
&lt;p&gt;Now, to tackle this problem, we can use trigsimp with the newly incorporated ‘fu’ algorithm. The other thing that can be done is finding out what terms shouldn’t be in the result and then setting those variables to zero ( ‘b’ in the example). For the second approach, we need no know which variables shouldn’t be there. For this, we need to keep tract of the angles by which we are rotating wrt to the a parent frame (in this case, A). So, for that, the solution I came up with was this: We will have two dcm matrices in the class definition. The first one is _dcm_global which stores the DCM that converts global coordinates into coordinates of the frame. This matrix will be there for every object. The other matrix is _dcm_parent. As the name suggests, this matrix stores the dcm, only wrt to the parent frame. This helps us in two ways – first, we get to know exactly which variables should be there in the DCM(B -&amp;gt; A) and second, we do not need to explicitly calculate dcm via multiplication of two DCM matrices whenever we process wrt to the parent frame.&lt;/p&gt;
&lt;p&gt;I have added the methods on the CoordSys class that would calculate the DCM for both the global as well as the local frame. Also, I have began working on the CoordSysRect class that would represent the Cartesian coordinate system. In this class, we need a list (which I’ll call h_list) that is used for expressing generalized formulas for vector calculus operations. For the rectangular system, all the h values are just unity. Then, we need to have a conversion formulas between different systems. That I want to store as a dictionary with the key as the name of the class and the values as a matrix that represents the coordinate transformation.&lt;/p&gt;
&lt;p&gt;That’s the summary of the work done in three days – excluding Friday. And the week isn’t over yet. I hope to finish the rectangular coordinate system by the before the next Monday.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/174/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/174/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=174&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 21 Jun 2013 12:12:36 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: Solving linear Diophantine equation</title>
	<guid isPermaLink="false">http://theperceptiveway.wordpress.com/?p=33</guid>
	<link>http://theperceptiveway.wordpress.com/2013/06/21/solving-linear-diophantine-equation/</link>
	<description>&lt;p&gt;When the first week of the GSoC comes to an end, I was able to finish implementing solver for the linear Diophantine equations. A linear Diophantine equation is an equation of the form,&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://theperceptiveway.files.wordpress.com/2013/06/linear.gif&quot;&gt;&lt;img src=&quot;http://theperceptiveway.files.wordpress.com/2013/06/linear.gif?w=585&quot; alt=&quot;linear&quot; class=&quot;alignnone size-full wp-image-41&quot; /&gt;&lt;/a&gt; where &lt;a href=&quot;http://theperceptiveway.files.wordpress.com/2013/06/codecogseqn.gif&quot;&gt;&lt;img src=&quot;http://theperceptiveway.files.wordpress.com/2013/06/codecogseqn.gif?w=585&quot; alt=&quot;CodeCogsEqn&quot; class=&quot;alignnone size-full wp-image-43&quot; /&gt;&lt;/a&gt; and  &lt;em&gt;c&lt;/em&gt; are all integers and&lt;a href=&quot;http://theperceptiveway.files.wordpress.com/2013/06/codecogseqn1.gif&quot;&gt;&lt;img src=&quot;http://theperceptiveway.files.wordpress.com/2013/06/codecogseqn1.gif?w=585&quot; alt=&quot;CodeCogsEqn(1)&quot; class=&quot;alignnone size-full wp-image-44&quot; /&gt;&lt;/a&gt; are integer variables.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case 1: &lt;em&gt;n = 2&lt;/em&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p dir=&quot;ltr&quot;&gt;If the linear Diophantine equations has only two variables (&lt;em&gt;n = 2&lt;/em&gt;), &lt;a href=&quot;http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm&quot;&gt;extended Euclid’s algorithm&lt;/a&gt; can be used to find the solutions. If solvable, we will have to introduce one parameter. The general form of the equation when&lt;em&gt; n = 2&lt;/em&gt; can be expressed as &lt;em&gt;ax + by = c. &lt;/em&gt;This is solvable if and only if gcd(a, b) divides c. i.e &lt;em&gt;gcd(c, gcd(a, b)) = gcd(a, b)&lt;/em&gt;. Here gcd stands for &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Greatest_common_divisor&quot;&gt;greatest common divisor&lt;/a&gt;.&lt;/em&gt; Let&lt;em&gt; x0&lt;/em&gt; and&lt;em&gt; y0&lt;/em&gt; be a solution, then it can be easily noticed that,&lt;em&gt; x0 + bt&lt;/em&gt; and &lt;em&gt;y0 -at&lt;/em&gt; are also solutions. We can use this fact to find all the solutions when an initial solution has been found.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Solution of 10x + 14y = 10&lt;/em&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We start by dividing both sides of the equation by&lt;em&gt; gcd(a, b)&lt;/em&gt;. If &lt;em&gt;gcd(a, b)&lt;/em&gt; does not divide &lt;em&gt;c&lt;/em&gt;, then there are no solutions.&lt;em&gt; gcd(4, 6) = 2&lt;/em&gt; and&lt;em&gt; 2&lt;/em&gt; divides &lt;em&gt;10&lt;/em&gt; so this is solvable and dividing by 2 yields,&lt;em&gt; 5x + 7y = 5.&lt;/em&gt; Now we should apply extended Euclid’s algorithm. What the algorithm does is finding three values &lt;em&gt;x0, y0&lt;/em&gt; and &lt;em&gt;d&lt;/em&gt; such that &lt;em&gt;ax0 + by0 = d&lt;/em&gt;. Here &lt;em&gt;d = gcd(a, b)&lt;/em&gt;. Since we divided the equation by &lt;em&gt;gcd(a, b)&lt;/em&gt; at the very beginning,&lt;em&gt; d&lt;/em&gt; will always be &lt;em&gt;1&lt;/em&gt; in our case. Below is a simplified version of the algorithm used in the solver.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;def extended_euclid(a, b):&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;if b == 0:&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;    return (1, 0, a)&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;else:&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;    x0, y0, d = extended_euclid(b, a%b)&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;    x, y = y0, x0 – (a//b) * y0&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;    return x, y, d&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;extended_euclid(5, 7) returns (3, -2 , 1), i.e &lt;em&gt;5*3 – 7*2 = 1&lt;/em&gt;. Following is the procedure if you were work this out manually.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;7 = 5*1 + 2&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;5 = 2*2 + 1&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;2 = 1*2 + 0&lt;/em&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Now starting from the line before the last one we can start going back, &lt;em&gt;1 = 5 – 2*2 = 5 – 2*(7 – 5*1) = 3*5 – 2*7&lt;/em&gt; which gives the desired result. Multiplying&lt;em&gt; 5*3 +7*(-2) = 1 &lt;/em&gt;by &lt;em&gt;5&lt;/em&gt; we get &lt;em&gt;5*15 +7*(-10) = 5&lt;/em&gt; which implies that&lt;em&gt; 15&lt;/em&gt; and&lt;em&gt; -10&lt;/em&gt; are solutions of the initial equation. So all the solutions can be expressed as&lt;em&gt;, x = 15+7t, y = -10-5t&lt;/em&gt; where &lt;em&gt;t&lt;/em&gt; is an integer.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case 2:&lt;em&gt; n &amp;gt; 2&lt;/em&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p dir=&quot;ltr&quot;&gt;If &lt;em&gt;n &amp;gt; 2&lt;/em&gt;, we can express two of the variables using the rest of the variables and a parameter. Below is an example for this case.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Solution of 2x + 3y + 4z = 5&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let’s set&lt;em&gt; x = x&lt;/em&gt; and assume&lt;em&gt; y = ax + bm + c&lt;/em&gt; and&lt;em&gt; z = dx + em + f&lt;/em&gt; where &lt;em&gt;a, b, c, d, e, f&lt;/em&gt; are constants to be found. &lt;em&gt;m&lt;/em&gt; is the introduced parameter. Plug in these in original equation,&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2x + 3(ax + bm + c) + 4(dx + em + f) = 5&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;By comparing the two sides we get the set of equations&lt;em&gt;, 3c + 4f = 5&lt;/em&gt;, &lt;em&gt; 2 + 3a + 4d = 0&lt;/em&gt; and &lt;em&gt;3b + 4e = 0&lt;/em&gt; all of which are two variable linear DEs. If these can be solved, these will yield infinite number of solutions and any pair of values will be acceptable for&lt;em&gt; (a, d), (b, e)&lt;/em&gt; and &lt;em&gt;(c, f)&lt;/em&gt;. In this example all three equations are solvable and&lt;em&gt; (a, d) = (2, -2) , (b, e) = (4, -3)&lt;/em&gt; and &lt;em&gt;(e, f) = (3, -1)&lt;/em&gt; would do the trick. Then the general solution is,&lt;em&gt; x = x, y = 2x + 4m + 3&lt;/em&gt; and&lt;em&gt; z = -2x – 3m – 1&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the solver module when more than two variables are involved it is rearranged leaving two variable in one side and all the other variables and constant term in the other side. For example &lt;em&gt;2x + 3y + 4z = 5&lt;/em&gt; is assumed to be in the form&lt;em&gt; 2x + 3y = 5 – 4z&lt;/em&gt;. Then it finds a separate solution for each of the two equations &lt;em&gt;2x + 3y = 5  –&amp;gt;(1)&lt;/em&gt; and&lt;em&gt; 2x + 3y = -4z  –&amp;gt;(2)&lt;/em&gt;. First equation returns a parametric solution as discussed in case 1 and the solutions for second one can be found by finding a basic solution(not parametric) for&lt;em&gt; 2x + 3y = -4&lt;/em&gt; and multiplying it by&lt;em&gt; z. &lt;/em&gt;Adding the two solutions for&lt;em&gt; (1)&lt;/em&gt; and&lt;em&gt; (2)&lt;/em&gt; yields the solution of the original equation.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/theperceptiveway.wordpress.com/33/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/theperceptiveway.wordpress.com/33/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=theperceptiveway.wordpress.com&amp;amp;blog=52956410&amp;amp;post=33&amp;amp;subd=theperceptiveway&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 21 Jun 2013 12:01:54 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: Smart caching in Python</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-7592896544614799854</guid>
	<link>http://codesachin.blogspot.com/2013/06/smart-caching-in-python.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Prasoon and I are currently looking for ways to reduce the computational load of calculating the DCM(Direction Cosine Matrice) of one frame with respect to another. This DCM is useful to mathematically understand how one reference frame is oriented with respect to another. The reason why we need to find a way is, if we are talking about something like a 100 frames each oriented in some random way with respect to one of its predecessors, it gets &lt;i&gt;pretty &lt;/i&gt;messy- for your computer AND you.&lt;br /&gt;&lt;div&gt;We thought of various ways, but apart from some &lt;i&gt;very &lt;/i&gt;inefficient methods like 'World' frames (to store these DCMs for a particular run of the program) and using a global frame as an intermediate, we really couldn't find anything much. Then Gilbert suggested looking at the way SymPy does caching of some of its methods.&lt;/div&gt;&lt;div&gt;We may or may not use this technique eventually, but I learnt a cool way to implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_(computing)&quot;&gt;caching&lt;/a&gt; in Python-using dictionaries and method decorators. If you don't know what method decorators are, have a look at &lt;a href=&quot;http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/&quot;&gt;this&lt;/a&gt; - decorators are essentially ways to mutilate(or rather, add to) the functioning of a function/class.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I am going to try and show a simplified version of what I found in the SymPy source, their original method is close but much more detailed- for purposes of immutability and debugging and stuff.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The components involved in this technique are these - &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;1) CACHE = {}&lt;/div&gt;&lt;div&gt;This is a Python dictionary (empty intially). This is what we will use as our cache.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;2) The caching decorator -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;def globalcached(function):&lt;/div&gt;&lt;div&gt;    @wraps(function)&lt;/div&gt;&lt;div&gt;    def wrapper(*args):&lt;/div&gt;&lt;div&gt;        tup = tuple([function] + [args])&lt;/div&gt;&lt;div&gt;        if tup in CACHE:&lt;/div&gt;&lt;div&gt;            print('In cache')&lt;/div&gt;&lt;div&gt;            return CACHE[tup]&lt;/div&gt;&lt;div&gt;        else:&lt;/div&gt;&lt;div&gt;            print('Not in cache')&lt;/div&gt;&lt;div&gt;            temp = function(*args)&lt;/div&gt;&lt;div&gt;            CACHE[tup] = temp&lt;/div&gt;&lt;div&gt;            return temp&lt;/div&gt;&lt;div&gt;    return wrapper&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Understand what the above will do. &lt;i&gt;&lt;b&gt;wraps&lt;/b&gt;&lt;/i&gt; is a decorator from the functools Python library- its there by default. It enables the 'decorated' function to retain the docstring of the original function- we would probably want to retain the docs.&lt;/div&gt;&lt;div&gt;As you might have understood, 'wrapper' is the modified function that will get executed in place of the original one.&lt;/div&gt;&lt;div&gt;Now, &lt;i&gt;&lt;b&gt;tup&lt;/b&gt; &lt;/i&gt;is a tuple (tuple is immutable in python and hence hashable. You can only use hashable objects as dictionary keys) containing info about the following-&lt;/div&gt;&lt;div&gt;i. The function being called&lt;/div&gt;&lt;div&gt;ii. The arguments of the function&lt;/div&gt;&lt;div&gt;Thus, I know exactly what function it is, and what it is going to work on. Hence, the code will not directly let the original function go computing again- that may be a waste of resources. It first checks in CACHE, whether it has that particular &lt;i&gt;tup &lt;/i&gt;as one its keys. If its not there, then this is the first time that function is being called &lt;i&gt;with those arguments. &lt;/i&gt;So, I will calculate the needed quantity, but before returning it, I will store the calculated stuff &lt;i&gt;with tup as the key. &lt;/i&gt;Hence, the next time the same function gets called with the very same arguments, the decorator will have a 'deja vu' and return the value- from CACHE. Ingenious, isnt it?&lt;/div&gt;&lt;div&gt;I don't know how many other projects use this method, or something similar. But its quite cool, it you want speed and you know the computation is going to be intensive.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Anyways, here is a snippet using the above decorator-&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt; CACHE = {}  &lt;br /&gt; def globalcached(function):  &lt;br /&gt;   @wraps(function)  &lt;br /&gt;   def wrapper(*args):  &lt;br /&gt;     tup = tuple([function] + [args])  &lt;br /&gt;     if tup in CACHE:  &lt;br /&gt;       print('In cache')  &lt;br /&gt;       return CACHE[tup]  &lt;br /&gt;     else:  &lt;br /&gt;       print('Not in cache')  &lt;br /&gt;       temp = function(*args)  &lt;br /&gt;       CACHE[tup] = temp  &lt;br /&gt;       return temp  &lt;br /&gt;   return wrapper  &lt;br /&gt; def printcache():  &lt;br /&gt;   for x in CACHE:  &lt;br /&gt;     print 'Function: ' + str(x[0])  &lt;br /&gt;     print 'Arguments: ' + str(x[1:])  &lt;br /&gt;     print 'Value: ' + str(CACHE[x])  &lt;br /&gt;     print()  &lt;br /&gt; @globalcached  &lt;br /&gt; def myfunction(x, y):  &lt;br /&gt;   &quot;&quot;&quot; myfunction docs&quot;&quot;&quot;  &lt;br /&gt;   return x ** 2 - y ** 2  &lt;br /&gt; class SomeClass(object):  &lt;br /&gt;   def __init__(self, x):  &lt;br /&gt;     self.x = x  &lt;br /&gt;   @globalcached  &lt;br /&gt;   def function1(self, otherinstance):  &lt;br /&gt;     &quot;&quot;&quot;function1 docs&quot;&quot;&quot;  &lt;br /&gt;     return otherinstance.x ** 2 - self.x ** 2  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Using it in a Python IDLE session-&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt; &amp;gt;&amp;gt;&amp;gt; myfunction(8, 3)  &lt;br /&gt; Not in cache  &lt;br /&gt; 55  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; myfunction(8, 3)  &lt;br /&gt; In cache  &lt;br /&gt; 55  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; i1 = SomeClass(4)  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; i2 = SomeClass(7)  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; i1.function1(i2)  &lt;br /&gt; Not in cache  &lt;br /&gt; 33  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; i1.function1(i2)  &lt;br /&gt; In cache  &lt;br /&gt; 33  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; myfunction(6, 7)  &lt;br /&gt; Not in cache  &lt;br /&gt; -13  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; printcache()  &lt;br /&gt; Function: &amp;lt;function myfunction at 0x026B38B0&amp;gt;  &lt;br /&gt; Arguments: ((8, 3),)  &lt;br /&gt; Value: 55  &lt;br /&gt; ()  &lt;br /&gt; Function: &amp;lt;function function1 at 0x026CD330&amp;gt;  &lt;br /&gt; Arguments: ((&amp;lt;__main__.SomeClass object at 0x026C9B10&amp;gt;, &amp;lt;__main__.SomeClass object at 0x026C9B50&amp;gt;),)  &lt;br /&gt; Value: 33  &lt;br /&gt; ()  &lt;br /&gt; Function: &amp;lt;function myfunction at 0x026B38B0&amp;gt;  &lt;br /&gt; Arguments: ((6, 7),)  &lt;br /&gt; Value: -13  &lt;br /&gt; ()  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt;   &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;I hope its clear now. Its not rocket science, but its a clever way of doing things.&lt;br /&gt;&lt;br /&gt;Anyways, that's all for now. And btw, thanks to Google for giving us a free membership to ACM for one year. The GSoC welcome package will also be arriving soon, and I am excited :-D&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 20 Jun 2013 15:31:52 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Mary Clark: On the A series of Lie algebras</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=5</guid>
	<link>http://meclark256.wordpress.com/2013/06/19/on-the-a-series-of-lie-algebras/</link>
	<description>&lt;p&gt;So this week I’m working on the A series of Lie algebras.  The Lie algebra A_n corresponds to the special unitary algebra su(n+1).&lt;/p&gt;
&lt;p&gt;Much of this work is pretty basic, the A series is the simplest and easiest; the roots are easy to generate, which is something that can be quite tricky for C and D, and some of the exceptional Lie algebras, like F_4 or E_7.   I have written code to generate the roots and the Cartan matrix, as well as to define the dimension of the Lie algebra and the size of its basis.&lt;/p&gt;
&lt;p&gt;I have also been just been thinking, about how everything is going to actually work together.  I’ve been taking some inspiration from Sage’s Lie algebra module, but I think in the end my work will end up being implemented rather differently.&lt;/p&gt;
&lt;p&gt;What I am, however, running into difficulties about is generating the commutation relations for su(n) in general.  With the somewhat cursory look I did into this specific issue when I was writing my application, I rather thought that there was a well-defined relation or algorithm to generate the commutation relations which I would then just implement.   However, upon really researching this, I’ve realised that there is no such algorithm.  So, while I could have my code dispense the commutation relations for su(2) and su(3) (which are probably the only cases when you would /really/ want the actual, physical commuation relations between the basis elements) I don’t know if this would be worthwhile.&lt;/p&gt;
&lt;p&gt;Seeing as how I’ve more or less finished what I wanted to have accomplished with the A series at this point in GSOC, I think that I will start work on some of the exceptional cases this week (specifically F_4 and G_2).&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/5/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/5/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=5&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 19 Jun 2013 19:27:29 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: Algebraicity, dsolve and core SymPy</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=513</guid>
	<link>http://manojbits.wordpress.com/2013/06/18/algebraicity-dsolve-and-core-sympy/</link>
	<description>&lt;p&gt;Hello, the previous week I had learnt a lot, especially the fact that contributing to an open source project is lot more than just coding. Also the fact that Summer of Code is full of ups and downs, just one week into the program and I’ve experienced both. As usual, a short(?) summary about what I’ve accomplished or at-least tried to over the past week.&lt;/p&gt;
&lt;p&gt;My work started with trying to implement the second heuristic as given in the Maple paper to solve this PDE &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D+%2B+%28%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+y%7D+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+x%7D%29+%2A+h%28x%2C+y%29+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+y%7D%2Ah%28x%2Cy%29%5E%7B2%7D+-+%5Cxi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%5Ceta%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; /&gt; . The heuristic is as follows, we make the following assumptions for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y)&quot; class=&quot;latex&quot; title=&quot;\xi(x,y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x,y)&quot; class=&quot;latex&quot; title=&quot;\eta(x,y)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;1. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y) = 0&quot; class=&quot;latex&quot; title=&quot;\xi(x,y) = 0&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2Cy%29+%3D+f%28x%29%2Ag%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x,y) = f(x)*g(y)&quot; class=&quot;latex&quot; title=&quot;\eta(x,y) = f(x)*g(y)&quot; /&gt;&lt;br /&gt;
2. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y) = 0&quot; class=&quot;latex&quot; title=&quot;\xi(x,y) = 0&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2Cy%29+%3D+f%28y%29%2Ag%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x,y) = f(y)*g(x)&quot; class=&quot;latex&quot; title=&quot;\eta(x,y) = f(y)*g(x)&quot; /&gt;&lt;br /&gt;
3. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2Cy%29+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x,y) = 0&quot; class=&quot;latex&quot; title=&quot;\eta(x,y) = 0&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29+%3D+f%28x%29%2Ag%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y) = f(x)*g(y)&quot; class=&quot;latex&quot; title=&quot;\xi(x,y) = f(x)*g(y)&quot; /&gt;&lt;br /&gt;
4. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2Cy%29+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x,y) = 0&quot; class=&quot;latex&quot; title=&quot;\eta(x,y) = 0&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29+%3D+f%28x%29%2Ag%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y) = f(x)*g(y)&quot; class=&quot;latex&quot; title=&quot;\xi(x,y) = f(x)*g(y)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;These were the problems that I had faced while trying to implement the heuristic.&lt;/p&gt;
&lt;p&gt;1.  &lt;strong&gt;Algebraicity: &lt;/strong&gt;In the above mentioned assumptions, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;g&quot; class=&quot;latex&quot; title=&quot;g&quot; /&gt; is a function, that is built by extracting algebraic factors from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h(x, y)&quot; class=&quot;latex&quot; title=&quot;h(x, y)&quot; /&gt;, where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D%3Dh%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx}=h(x,y)&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx}=h(x,y)&quot; /&gt;  . For some strange reason, I chose to ignore, the term algebraic and implemented it by extracting all factors. And then I realized my mistake and had to rewrite some part of the code again. I also found out that there are functions to find out if a function is rational, or a polynomial but not if an expression is algebraic. I had to implement it on my own. (By the way, this was my function in core SymPy or anything outside the differential equation area.) The difference between an algebraic and a rational function is that in a rational function, exponentiation is an integer, however in an algebraic expression, exponentiation can be rational. The source code can be found here. Sample this example SymPy session:&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.abc import x
&amp;gt;&amp;gt;&amp;gt; eq = ((1 - x**2)/(1 + x**2))**(S(1)/2)
&amp;gt;&amp;gt;&amp;gt; eq.is_rational_function()
False
&amp;gt;&amp;gt;&amp;gt; eq.is_algebraic_expr()
True
&lt;/pre&gt;
&lt;p&gt;It can be seen that eq, is algebraic but not a rational function, due to the fact that it is raised to a rational power&lt;br /&gt;
The source can be found here. &lt;a href=&quot;https://github.com/sympy/sympy/pull/2176&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2176&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;2. &lt;strong&gt;To dsolve or not to dsolve: &lt;/strong&gt;The second ‘problem’ that I was facing was whether or not to use dsolve to simplify the&lt;br /&gt;
auxiliary ODE after making the substituting the function &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;g&quot; class=&quot;latex&quot; title=&quot;g&quot; /&gt; in the PDE. Sample the first assumption, after making&lt;br /&gt;
the substitution, it reduces to this ODE, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdf%7D%7Bdx%7D%2Ag+%2B+f%28x%29%2A%5Cfrac%7Bdg%7D%7Bdy%7D%2Ah+-+f%2Ag%2A%5Cfrac%7B%5Cpartial+h%7D++%7B%5Cpartial+y%7D%3D0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{df}{dx}*g + f(x)*\frac{dg}{dy}*h - f*g*\frac{\partial h}  {\partial y}=0&quot; class=&quot;latex&quot; title=&quot;\frac{df}{dx}*g + f(x)*\frac{dg}{dy}*h - f*g*\frac{\partial h}  {\partial y}=0&quot; /&gt; . The question was whether to use dsolve again or assume that the heuristic works only if the ODE is&lt;br /&gt;
variable separable in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt;. After a lot of discussion, and the fact that this ODE might be more&lt;br /&gt;
complicated then the initial ODE and a test was hanging, it was agreed to do away with dsolve internally.&lt;br /&gt;
By the way, I had written this small script to scrape the ODE’s from this page &lt;a href=&quot;http://12000.org/my_notes/kamek/KERNEL/index.htm&quot; rel=&quot;nofollow&quot;&gt;http://12000.org/my_notes/kamek/KERNEL/index.htm&lt;/a&gt;&lt;br /&gt;
into a text file. For those interested, however I made a few changes manually even after using the script.&lt;br /&gt;
&lt;a href=&quot;https://gist.github.com/Manoj-Kumar-S/5804909&quot;&gt;https://gist.github.com/Manoj-Kumar-S/5804909&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The source for the second heuristic can be found here. At the time of writing, it hasn’t been merged yet.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/2156&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2156&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Well regarding, the downs that I mentioned in the beginning of the post, I tried starting work on the third heuristic. The research paper (Maple )is very vague, and I have no idea how I’m going to implement it as of now after thinking for a day (well almost). I have also asked on sites like math stack and math overflow, but there has no reply till now. However lets see what can be done. Hoping for the best!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/513/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/513/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=513&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 18 Jun 2013 12:31:57 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: Lie Algebras</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=3</guid>
	<link>http://meclark256.wordpress.com/2013/06/14/lie-algebras/</link>
	<description>&lt;p&gt;So I thought my first post could be, basically, a summary of my project proposal for GSOC.&lt;/p&gt;
&lt;p&gt;Lie algebras (and by extension) Lie groups are an integral part of mathematics. Lie groups allow for expressing continuous symmetries for geometric objects; Lie algebras are the linearisation of Lie groups, and are much easier objects with which to work. Furthermore, Lie algebras come up all over mathematics. My research currently makes use of Lie algebras and Weyl groups, and is to do with lattice paths. Another example is the correspondence between finite cluster algebras and Cartan-Killing classification of semisimple Lie algebras and finite root systems.&lt;/p&gt;
&lt;p&gt;Unfortunately, for higher dimensions, (i.e. &amp;gt; n = 3 or so) working with Lie algebras can be computationally difficult. Computation of the root system, the simple roots, reflections, and working with the Cartan matrix can all be computationally intensive when you get into the higher dimensions.&lt;/p&gt;
&lt;p&gt;Have a Lie algebra module in Sympy will make it attractive for mathematicians working in research, as well as attractive to students and others who need to do computations involving these objects. This module will also have applications to other areas of sympy, such as the quantum mechanics module, since working with symmetries will be easier using this module, because the most common symmetry groups are covered with the classical Lie algebras.&lt;/p&gt;
&lt;p&gt;My Lie Algebra module will allow SymPy users to work with the root systems, Cartan matrices, and Dynkin diagrams of the Classical and Exceptional Lie algebras.    The deliverables I’d like to have working by the end of the summer are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Output the root system of the Classical and Exception Lie algebras for a given dimension $n$&lt;/li&gt;
&lt;li&gt;Allow basic operations on the roots: addition, subtraction, etc&lt;/li&gt;
&lt;li&gt;Output the simple roots&lt;/li&gt;
&lt;li&gt;Return the Weyl group of the Lie algebra&lt;/li&gt;
&lt;li&gt;Output the Cartan matrix and the Dynkin diagram&lt;/li&gt;
&lt;li&gt;Return the rank of a given Lie algebra, and whether or not it is finite&lt;/li&gt;
&lt;li&gt;Return the Coxeter matrix&lt;/li&gt;
&lt;li&gt;Return the commutation relations of the basis of the algebra&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These functions are all intrinsic properties of the simple Lie algebras. The classical algebras I want to implement are the A, B, C, and D series. I will also implement the Exception Lie algebras, which are G2, F4, and E6, E7, and E8. The A (n &amp;gt;=1) series corresponds for a given n to the special unitary group SU(n+1). The B (n &amp;gt;= 2) series corresponds to the special orthogonal group, SO(2n+1). The C (n &amp;gt;= 2) series corresponds to the symplectic group, Sp(2n). The D (n &amp;gt;= 4) series corresponds to the special orthogonal group SO(2n).&lt;/p&gt;
&lt;p&gt;So, yeah.  Monday is the start of GSOC, and I’ll be working on the A series!  More about that later.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/3/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/3/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=3&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 14 Jun 2013 23:07:36 +0000</pubDate>
</item>
<item>
	<title>Tarun Gaba</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7526836182390500993.post-2578217944502238651</guid>
	<link>http://tarun-gaba.blogspot.com/2013/06/first-step-summer-is-coming-coding.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;b&gt;&lt;u&gt;First Step(&lt;/u&gt;&lt;/b&gt;&lt;u&gt;Summer is Coming!!&lt;/u&gt;&lt;b&gt;&lt;u&gt;)&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Coding Season is starting from 17 June, and community bonding period has been a good time, to connect with the people from the organization, and some brainstorming sessions on IRC on when and how things should be done.&lt;br /&gt; Some things have been sort out, and  some remains to be, but hopefully those will be sorted soon too.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Meanwhile I have been able to write a example, in the form of an IPython notebook, which although loosely implemented, describes the workflow we intend to accomplish in this coding season.&lt;br /&gt;&lt;br /&gt;The example is based on the simulation of a simple mass spring system.&lt;br /&gt;&lt;br /&gt;The workflow comprises of following steps:&lt;br /&gt;&lt;br /&gt;1) Defining basic symbols (mass,gravity,stiffness etc.)&lt;br /&gt;&lt;br /&gt; 2) Generate a Particle object, using built in mechanics Particle class.(sympy.physics.mechanics.Particle)&lt;br /&gt;&lt;br /&gt;3)Define forces on particle.&lt;br /&gt;&lt;br /&gt;4)Generate a Kane object for the particle.&lt;br /&gt;&lt;br /&gt;5)Utilizing Kane object to generate symbolic equations of motion.&lt;br /&gt;&lt;br /&gt;6) Using partially implemented code generation methods to generate numerical solutions to the equation of motion of the particle.&lt;br /&gt;&lt;br /&gt;7) Passing the numerical values to the roughly implemented Javascript methods to simulate the motion in the output cell of IPython notebook.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Looks good so far. Feeling excited to start the coding session, writing some codes!! ..&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 14 Jun 2013 18:41:55 +0000</pubDate>
	<author>noreply@blogger.com (TARUN GABA)</author>
</item>
<item>
	<title>Thilina Rathnayake: Structure of the Diophantine equation module</title>
	<guid isPermaLink="false">http://theperceptiveway.wordpress.com/?p=22</guid>
	<link>http://theperceptiveway.wordpress.com/2013/06/13/structure-of-the-diophantine-equation-module/</link>
	<description>&lt;p&gt;The structure of the module is going to be essentially the same as SymPy’s &lt;a href=&quot;http://docs.sympy.org/0.7.2/modules/solvers/ode.html&quot;&gt;ODE&lt;/a&gt; module. ODE module and Diophantine equations (DE) module both need to pattern match a given equation to identify which category it falls and carry out solution procedure accordingly. Below is a pseudo-code representation of the rough structure I wish to follow in the DE module.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;diop_solve(eq):&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; dir=&quot;ltr&quot;&gt;type = classify_diop(eq)&lt;br /&gt;
# The required solution routine will be called based on the type&lt;br /&gt;
# returned by classify_diop(). The types returned will be linear,&lt;br /&gt;
# quadratic, pell, and so on.&lt;br /&gt;
diop_&amp;lt;type&amp;gt;(eq)&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;classify_diop(eq):&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; dir=&quot;ltr&quot;&gt;# Matching “eq” with currently solved equations takes place here.&lt;br /&gt;
# This will return the type of DE and information that was found during&lt;br /&gt;
# matching which will be helpful in solving equation.&lt;br /&gt;
# eg: linear, quadratic, pell … etc.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;diop_linear(eq):&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; dir=&quot;ltr&quot;&gt;# This will solve linear DEs.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;diop_pell(eq):&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; dir=&quot;ltr&quot;&gt;# This will solve Pell’s equations.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;:&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;:&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;A separate method will be implemented for each “type” returned by classify_diop(). This structure provide a convenient interface for adding solutions for new type of equations. We just need to implement a solver function for that method and add a line in diop_solve() to call that function if the type returned by classify_diop() is the same.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/theperceptiveway.wordpress.com/22/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/theperceptiveway.wordpress.com/22/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=theperceptiveway.wordpress.com&amp;amp;blog=52956410&amp;amp;post=22&amp;amp;subd=theperceptiveway&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 13 Jun 2013 10:02:28 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: The first heuristic</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=487</guid>
	<link>http://manojbits.wordpress.com/2013/06/11/the-first-heuristic-3/</link>
	<description>&lt;p&gt;My GSoC work had been on and off, and I’m nowhere near the required 40 hours for the past one week, due to various reasons. However this is a report of what I had accomplished during the past week.&lt;/p&gt;
&lt;p&gt;The lie group solver for solving Ordinary Differential Equations of the first order, requires as one of the steps, (the major actually, in fact the first six weeks of my project) to solve the following Partial Differential Equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D+%2B+%28%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+y%7D+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+x%7D%29+%2A+h%28x%2C+y%29+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+y%7D%2Ah%28x%2Cy%29%5E%7B2%7D+-+%5Cxi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%5Ceta%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; /&gt; for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x, y)&quot; class=&quot;latex&quot; title=&quot;\xi(x, y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x, y)&quot; class=&quot;latex&quot; title=&quot;\eta(x, y)&quot; /&gt;where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+h%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx} = h(x, y)&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx} = h(x, y)&quot; /&gt;. It is pretty strange (atleast I find it) that solving a first order ODE requires solving a much complicated Partial Differential Equation , having two functions in two variables. However that is how things are, and as for how this PDE helps in solving a first order ODE, my blog posts would slowly lead up to that, much like how seemingly unrelated events lead to an awesome climax in a Hollywood thriller flick.&lt;/p&gt;
&lt;p&gt;For now the focus remains on solving the huge PDE that I had mentioned. It looks almost impossible to do so at first sight. However an intelligent method to solve it, would be to guess solutions for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x, y)&quot; class=&quot;latex&quot; title=&quot;\xi(x, y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x, y)&quot; class=&quot;latex&quot; title=&quot;\eta(x, y)&quot; /&gt; and substitute it back in the PDE and check how much it simplifies (almost like how I used to ‘intelligently’ guess solutions to my Organic Chemistry objective examinations).&lt;/p&gt;
&lt;p&gt;The first heuristic and the easiest (according to Maple) involves assuming one of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y)&quot; class=&quot;latex&quot; title=&quot;\xi(x,y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x,y)&quot; class=&quot;latex&quot; title=&quot;\eta(x,y)&quot; /&gt; to be zero and the other to be a function of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; or &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;. This gives us four possibilities&lt;/p&gt;
&lt;p&gt;1.  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29%3D0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y)=0&quot; class=&quot;latex&quot; title=&quot;\xi(x,y)=0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2C+y%29%3Df%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x, y)=f(x)&quot; class=&quot;latex&quot; title=&quot;\eta(x, y)=f(x)&quot; /&gt;&lt;br /&gt;
2.  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29%3D0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y)=0&quot; class=&quot;latex&quot; title=&quot;\xi(x,y)=0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2C+y%29%3Df%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x, y)=f(y)&quot; class=&quot;latex&quot; title=&quot;\eta(x, y)=f(y)&quot; /&gt;&lt;br /&gt;
3.  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2Cy%29%3D0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x,y)=0&quot; class=&quot;latex&quot; title=&quot;\eta(x,y)=0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2C+y%29%3Df%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x, y)=f(x)&quot; class=&quot;latex&quot; title=&quot;\xi(x, y)=f(x)&quot; /&gt;&lt;br /&gt;
4. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2Cy%29%3D0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x,y)=0&quot; class=&quot;latex&quot; title=&quot;\eta(x,y)=0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2C+y%29%3Df%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x, y)=f(y)&quot; class=&quot;latex&quot; title=&quot;\xi(x, y)=f(y)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I would explain how the first case works and the remaining would be self-inferred. Putting &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; as 0 and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f(x)&quot; class=&quot;latex&quot; title=&quot;f(x)&quot; /&gt; , the PDE reduces to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdf%7D%7Bdx%7D+-+f%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{df}{dx} - f*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{df}{dx} - f*\frac{\partial h}{\partial y}&quot; /&gt; . Clearly to solve for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; easily, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial h}{\partial y}&quot; /&gt; should be a function of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; for the ODE to be solved easily , since &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt; is dependent on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt;. The same logic applies to the other four assumptions. I also wrote a small function called &lt;strong&gt;checkinfosol &lt;/strong&gt;that checks if the infinitesimals actually satisfy the PDE. Works fine for now!. On a side note, I just began working on the second heuristic and it seems that they are getting more challenging and I cannot afford to slack any more.&lt;/p&gt;
&lt;p&gt;For those who are interested in the source-code, &lt;a href=&quot;https://github.com/sympy/sympy/pull/2143&quot; title=&quot;https://github.com/sympy/sympy/pull/2143&quot;&gt;https://github.com/sympy/sympy/pull/2143&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;P.S : Sorry, my posts are getting really TL;DR. Too much of this and I’ll consider renaming my blog TL;DR&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/487/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/487/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=487&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 11 Jun 2013 15:19:23 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: Some basic math</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-1891387405387454939</guid>
	<link>http://codesachin.blogspot.com/2013/06/some-basic-math.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;As suggested by Gilbert, I am uploading some hand-written notes I made about the entry-level math involved in coding framework Prasoon and I are talking of building. This DID help to some extent as a form of revision and cleared up some basics in my own brain.&lt;br /&gt;I guess I should do this more often. I have practically lost the skill of writing things down since my tenth grade.&lt;br /&gt;(By the way, &lt;a href=&quot;http://en.wikipedia.org/wiki/Frame_of_reference#Different_aspects_of_.22frame_of_reference.22&quot;&gt;this&lt;/a&gt; is a good article to refer to, if you are interested in knowing the conceptual differences between Reference Frames and Coordinate Systems)&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;margin-left: 1em; margin-right: 1em;&quot; href=&quot;http://3.bp.blogspot.com/-UbyDmfew4gc/UbXd4k80nhI/AAAAAAAAABU/DYG6jcInnHA/s1600/page1.jpg&quot;&gt;&lt;img width=&quot;232&quot; src=&quot;http://3.bp.blogspot.com/-UbyDmfew4gc/UbXd4k80nhI/AAAAAAAAABU/DYG6jcInnHA/s320/page1.jpg&quot; border=&quot;0&quot; height=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;margin-left: 1em; margin-right: 1em;&quot; href=&quot;http://1.bp.blogspot.com/-ftX8-2PjV8c/UbXd2yqhQLI/AAAAAAAAABM/jAUYiVu1ckA/s1600/page2.jpg&quot;&gt;&lt;img width=&quot;232&quot; src=&quot;http://1.bp.blogspot.com/-ftX8-2PjV8c/UbXd2yqhQLI/AAAAAAAAABM/jAUYiVu1ckA/s320/page2.jpg&quot; border=&quot;0&quot; height=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;margin-left: 1em; margin-right: 1em;&quot; href=&quot;http://2.bp.blogspot.com/-mquqpPiUYkE/UbXd5Fw76sI/AAAAAAAAABc/ljiv3tyNyQE/s1600/page3.jpg&quot;&gt;&lt;img width=&quot;232&quot; src=&quot;http://2.bp.blogspot.com/-mquqpPiUYkE/UbXd5Fw76sI/AAAAAAAAABc/ljiv3tyNyQE/s320/page3.jpg&quot; border=&quot;0&quot; height=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;margin-left: 1em; margin-right: 1em;&quot; href=&quot;http://4.bp.blogspot.com/-qD-iOfp8qm4/UbXd9FQeGcI/AAAAAAAAABk/eCghnefSzw0/s1600/page4.jpg&quot;&gt;&lt;img width=&quot;232&quot; src=&quot;http://4.bp.blogspot.com/-qD-iOfp8qm4/UbXd9FQeGcI/AAAAAAAAABk/eCghnefSzw0/s320/page4.jpg&quot; border=&quot;0&quot; height=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;margin-left: 1em; margin-right: 1em;&quot; href=&quot;http://2.bp.blogspot.com/-Ya_PyvlPME0/UbXeAO8QPKI/AAAAAAAAAB0/O8dxsXKglcE/s1600/page5.jpg&quot;&gt;&lt;img width=&quot;232&quot; src=&quot;http://2.bp.blogspot.com/-Ya_PyvlPME0/UbXeAO8QPKI/AAAAAAAAAB0/O8dxsXKglcE/s320/page5.jpg&quot; border=&quot;0&quot; height=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;margin-left: 1em; margin-right: 1em;&quot; href=&quot;http://4.bp.blogspot.com/-e0h5mPrEln8/UbXd_cUxyCI/AAAAAAAAABs/wgpwHfZfQCw/s1600/page6.jpg&quot;&gt;&lt;img width=&quot;232&quot; src=&quot;http://4.bp.blogspot.com/-e0h5mPrEln8/UbXd_cUxyCI/AAAAAAAAABs/wgpwHfZfQCw/s320/page6.jpg&quot; border=&quot;0&quot; height=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;background-color: white; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 15px; line-height: 25px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 10 Jun 2013 14:11:47 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Saurabh Jha: Introduction and Week 1 progress</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-7082268022627225306</guid>
	<link>http://sympymatrix.blogspot.com/2013/06/introduction-and-week-1-progress.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;b&gt;Introduction:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;My name is Saurabh Jha. I am working on making Sympy matrix module fast. My plan is described in [1].  More broadly, the objectives of my work are--&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;To add support of domains to matrix module so that it achieves speed up in algorithm.&lt;/li&gt;&lt;li&gt;To make a better and more uniform interface of matrix module. &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;b&gt;Progress this week:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Fixed row and column methods of SparseMatrix class. Earlier it was giving wrong answers.[2]&lt;/li&gt;&lt;li&gt;Made row_list and col_list more efficient. Earlier the running time of these operations for an m*n matrix with nnz non-zero elements was theta(m*n). I replaced that with the new code whose running time is theta(nnz). This way we can avoid redundant look ups of all rows and columns.[2]&lt;/li&gt;&lt;li&gt;Added a new method nnz in sparse matrix which returns the number of non-zero elements of sparse matrix[3]&lt;/li&gt;&lt;li&gt;Added a function for converting Dictionary Representation of sparse matrices to Compressed Sparse Row(CSR).[3]&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;I learned some key lessons from last week's work. I may be wrong here, but you can afford to be wrong when there are people around to correct you :) :&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;SparseMatrix methods should depend upon number of non-zero elements and not on number of rows and columns.  For a matrix of low sparsity, this will be way more efficient than alternative row/column based algorithms.&lt;/li&gt;&lt;li&gt;Coding in this phase should be done keeping in mind that from top level they are not supposed to be use. Work should be done keeping speed in mind and not usability.&lt;/li&gt;&lt;li&gt;Work should be done such that it is reusable in other parts of sympy, like I am using domains of Polys module.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Next week, I am going to bite the bullet and work on incorporating domains in the operations of matrices. The operations will be implemented as functions first and then these functions will be used in the methods of matrices.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;[1] http://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/saurabh_jha/11001&lt;/div&gt;&lt;div&gt;[2] https://github.com/sympy/sympy/pull/2157&lt;/div&gt;&lt;div&gt;[3] https://github.com/sympy/sympy/pull/2162&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 09 Jun 2013 17:11:42 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Sachin Joglekar: sympy.logic - Part 2</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-1456269826368465167</guid>
	<link>http://codesachin.blogspot.com/2013/06/sympylogic-part-2.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;(contd from last post)&lt;br /&gt;Ok. A little late on this one. As promised, the part-2 about the features of sympy.logic, one of the lesser-used modules of sympy.logic. Today's post contains information about some stuff that was there before I worked on the module, and some stuff that we worked in. Anyways, here goes-&lt;br /&gt;&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;IV) Equality of boolean expressions&lt;/h4&gt;This is a function that became quite a headache for us while were trying to implement it. We thought of many algorithms and kept refuting them, until we settled on a good one. I coded it, and Christopher improved it (based on the SymPy architecture) considerably. It may still have a few bugs (one is right &lt;a href=&quot;https://code.google.com/p/sympy/issues/detail?id=3499&amp;amp;q=bool_equal&amp;amp;colspec=ID%20Type%20Status%20Priority%20Milestone%20Reporter%20Summary%20Stars&quot;&gt;here&lt;/a&gt;), but it gets the job done nonetheless.&lt;br /&gt;&lt;br /&gt;Lets take an example to see how it works&lt;br /&gt;Take the function that I discussed in part I) of last post. Its SOP form was -&lt;br /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px;&quot;&gt;&lt;i&gt;Or(And(Not(a), d), And(c, d))&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: x-small;&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;and its POS form was-&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px;&quot;&gt;&lt;i&gt;And(Or(Not(a), c), d)&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;Lets take the POS form to be &lt;i&gt;And(Or(Not(x), y), z), &lt;/i&gt;just to get a change of variables.&lt;br /&gt;&lt;br /&gt;So, function1 = &lt;i style=&quot;color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px;&quot;&gt;Or(And(Not(a), d), And(c, d)) &lt;/i&gt;&lt;span style=&quot;color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px;&quot;&gt;and function2 = &lt;/span&gt;&lt;i&gt;And(Or(Not(x), y), z)&lt;/i&gt;&lt;br /&gt;According to the docstring of the bool_equal function, it &quot;Returns True if the two expressions represent the same logical behavior for some correspondence between the variables of each (which may be different)&quot;&lt;br /&gt;In the above functions, the mapping a : x, c : y, d : z will give the SAME outputs for every input for the variables (a,c,d) or (x,y,z). How do we check this equality?&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.logic import *&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; from sympy import symbols&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; a, c, d, x, y, z = symbols('a c d x y z')      &amp;lt;- Remember all SymPy variables are called Symbols?&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; function1 = Or(And(Not(a), d), And(c, d))&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; function2 = And(Or(Not(x), y), z)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; bool_equal(function1, function2)&lt;br /&gt;&lt;br /&gt;Output - True&lt;br /&gt;&lt;br /&gt;Want to check the mapping?&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; bool_equal(function1, function2, info = True)&lt;br /&gt;(And(Or(Not(a), c), d), {c: y, a: x, d: z})&lt;br /&gt;&lt;br /&gt;If there is more than one mapping which may make the expressions equal, any ONE is returned. The function that is returned as the first return is the simplified version of the functions (in terms of one set of variables). As the function is already the simplest here, it gets returned as it is.&lt;br /&gt;&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;V) Inferences from knowledge bases&lt;/h4&gt;&lt;div&gt;This is a very handy feature of sympy.logic. It basically lets you 'tell it' a set of True boolean expressions, and then 'ask' it if a given input is True based on the 'knowledge' it has. First, let me introduce to two other logic classes in sympy.logic-&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Implies&lt;/div&gt;&lt;div&gt;&lt;i&gt;Implies(some expression, some expression)&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Equivalent&lt;/div&gt;&lt;div&gt;&lt;i&gt;Equivalent(some expression, some expression)&lt;/i&gt;&lt;/div&gt;&lt;br /&gt;They behave exactly like the corresponding operators in logic theory. VERY useful when converting natural language statements to logic ones. They also let you convert them to And, Or and Not instances using &lt;i&gt;simplify_logic&lt;/i&gt; or &lt;i&gt;to_dnf&lt;/i&gt; or &lt;i&gt;to_cnf&lt;/i&gt; functions.Ok, now about KBs-&lt;br /&gt;The API is as follows-&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.logic.inference import PropKB&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.abc import x, y&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; l = PropKB()&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; l.tell(x &amp;amp; ~y)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; l.ask(x)&lt;br /&gt; True&lt;br /&gt;&lt;br /&gt;Did you see what it did there? It returns True for any statement thats satisfiable given the statements it is 'told'.&lt;br /&gt;&lt;br /&gt;One more thing.&lt;br /&gt;&lt;br /&gt;One inefficient way to check if a statement y is &lt;i&gt;valid&lt;/i&gt; given a set of statements x1, x2, ... xn is using the Implies class and simplify_logic.&lt;br /&gt;Just use the following function -&lt;br /&gt;&lt;br /&gt;def check_validity(statements, check):&lt;br /&gt;      statements = simplify_logic(And(*statements))&lt;br /&gt;&lt;span style=&quot;white-space: pre;&quot; class=&quot;Apple-tab-span&quot;&gt;      &lt;/span&gt;output = simplify_logic(Implies(statements, check))&lt;br /&gt;&lt;span style=&quot;white-space: pre;&quot; class=&quot;Apple-tab-span&quot;&gt;      &lt;/span&gt;if output != True:&lt;br /&gt;&lt;span style=&quot;white-space: pre;&quot; class=&quot;Apple-tab-span&quot;&gt;            &lt;/span&gt;output = False&lt;br /&gt;&lt;span style=&quot;white-space: pre;&quot; class=&quot;Apple-tab-span&quot;&gt;      &lt;/span&gt;return statements, output&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; check_validity([x|y], x)&lt;br /&gt;(Or(x, y), False)&lt;br /&gt;&lt;br /&gt;It will return the simplified version of the ANDing of all the statements in the first input, and the validity of the 'check' statement.&lt;br /&gt;&lt;br /&gt;How did I use the above function in Database Systems? Put all the known functional dependencies in the 'statements' input and the dependency to be checked in the 'check' input (in the form of &lt;i&gt;Implies&lt;/i&gt; objects). If the second output was not True, that would mean the functional dependency does not hold. Ofcourse there are better ways of doing this, but well, I had little time and I wanted to check some stuff pronto.&lt;br /&gt;&lt;br /&gt;Anyways, thats all I have about sympy.logic. If you want to know more, the source is &lt;a href=&quot;https://github.com/sympy/sympy/tree/master/sympy/logic&quot;&gt;here&lt;/a&gt;. Do have a look.&lt;br /&gt;&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;GSoC update - &lt;/h4&gt;&lt;div&gt;The whole of last week was spent deciding the API of our work on frames, coordinate systems and vectors with Stefan, Prasoon and Gilbert. We have a consensus on some things now, and I am likely to start working this week on a new class to depict ScalarFields in n-dimensional space. I will post the progress by the end of next week, and I hope I will have substantial stuff to write about. Excited. Definitely. Cheers!&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 08 Jun 2013 13:09:01 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Sachin Joglekar: sympy.logic - Part 1</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-4236705420325481102</guid>
	<link>http://codesachin.blogspot.com/2013/06/sympylogic-part-1.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;As I have mentioned before, my first work for SymPy was for its logic module. Most of it took inspiration from the digital design and CS-Logic classes I took in my 3rd semester at college. In this post and the next I will try to explain some of the cool features of this module that I have used applied in useful ways.&lt;br /&gt;&lt;br /&gt;Note - Quite a bit of this work was done just a few months back by Christopher Smith(&lt;a href=&quot;https://github.com/smichr&quot;&gt;smichr&lt;/a&gt;) and me, and hence is NOT included in the lastest version of SymPy(0.7.2), but will find its way into SymPy 0.7.3. Therefore, there is no documentation on the official website also. However, interested people can fork the SymPy source from its &lt;a href=&quot;https://github.com/sympy/sympy&quot;&gt;github repo&lt;/a&gt; - There is enough of in-code docs to help you.&lt;br /&gt;&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;I) Using the truth table to find SOP/POS form &lt;/h4&gt;This is quite useful in digital design, and I myself used this quite a few number of times during my course.&lt;br /&gt;Suppose you have to find the SOP (sum of products) form of a boolean function that has the following specs-&lt;br /&gt;1. &lt;i&gt;The variables (literals) are a,b,c and d&lt;/i&gt;.&lt;br /&gt;2. &lt;i&gt;The function MUST return True for the following combinations (in order-a,b,c,d)&lt;/i&gt;-&lt;br /&gt;0,0,0,1&lt;br /&gt;0,0,1,1&lt;br /&gt;0,1,1,1&lt;br /&gt;1,0,1,1&lt;br /&gt;1,1,1,1&lt;br /&gt; where 0-false and 1-true&lt;br /&gt;3. &lt;i&gt;The function may give True or False (a dont-care) for the following combinations&lt;/i&gt;-&lt;br /&gt;0,0,0,0&lt;br /&gt;0,0,1,0&lt;br /&gt;0,1,0,1&lt;br /&gt;&lt;br /&gt;For those of you who may ask WHY we won't care. Simple- These combinations will never occur in our application if used rightly, OR we dont' care about the output even if they do. For example, a function that deals with binary representations of digits from 0-9 will not care about the inputs from 1001, as they will not occur in operation.&lt;br /&gt;4. &lt;i&gt;All the rest of the combinations must return False&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Python session for this? Here it is -&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.logic import SOPform&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; minterms = [[0, 0, 0, 1], [0, 0, 1, 1], [0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 1, 1]]&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; dontcares = [[0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1]]&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; SOPform(['a','b','c','d'], minterms, dontcares)&lt;br /&gt;&lt;br /&gt;Output - Or(And(Not(a), d), And(c, d))&lt;br /&gt;&lt;br /&gt;POS form?&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.logic import POSform&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; POSform(['a','b','c','d'], minterms, dontcares)&lt;br /&gt;&lt;br /&gt;Output - And(Or(Not(a), c), d)&lt;br /&gt;&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;II) Simplification of boolean expressions&lt;/h4&gt;&lt;div&gt;Suppose you want to simplify a cumbersome boolean expression to something simple. How?&lt;/div&gt;&lt;div&gt;Use simplify_logic.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Example expression&lt;/i&gt; --&amp;gt; &quot;&lt;span style=&quot;background-color: #efefff; padding-left: 1pt; padding-right: 1pt; text-decoration: overline; white-space: nowrap;&quot; class=&quot;invert&quot;&gt;AB&lt;/span&gt;&lt;span style=&quot;background-color: #efefff; white-space: nowrap;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #efefff; padding-left: 1pt; padding-right: 1pt; text-decoration: overline; white-space: nowrap;&quot; class=&quot;invert&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;background-color: #efefff; white-space: nowrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #efefff; white-space: nowrap;&quot;&gt;+ B)&lt;/span&gt;&quot; [Symbols take their usual meaning]&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;On paper, you will have to take the following steps-&lt;/div&gt;&lt;div&gt;&lt;table style=&quot;background-color: #efefff; margin: 10pt;&quot; class=&quot;simex&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding-right: 20pt; vertical-align: baseline; white-space: nowrap;&quot; class=&quot;step&quot;&gt;&lt;span style=&quot;padding-left: 1pt; padding-right: 1pt; text-decoration: overline;&quot; class=&quot;invert&quot;&gt;AB&lt;/span&gt;(&lt;span style=&quot;padding-left: 1pt; padding-right: 1pt; text-decoration: overline;&quot; class=&quot;invert&quot;&gt;A&lt;/span&gt; + B)&lt;/td&gt;&lt;td style=&quot;vertical-align: baseline;&quot; class=&quot;just&quot;&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;padding-right: 20pt; vertical-align: baseline; white-space: nowrap;&quot; class=&quot;step&quot;&gt;(&lt;span style=&quot;padding-left: 1pt; padding-right: 1pt; text-decoration: overline;&quot; class=&quot;invert&quot;&gt;A&lt;/span&gt; + &lt;span style=&quot;padding-left: 1pt; padding-right: 1pt; text-decoration: overline;&quot; class=&quot;invert&quot;&gt;B&lt;/span&gt;)(&lt;span style=&quot;padding-left: 1pt; padding-right: 1pt; text-decoration: overline;&quot; class=&quot;invert&quot;&gt;A&lt;/span&gt; + B)&lt;/td&gt;&lt;td style=&quot;vertical-align: baseline;&quot; class=&quot;just&quot;&gt;DeMorgan's Law&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;padding-right: 20pt; vertical-align: baseline; white-space: nowrap;&quot; class=&quot;step&quot;&gt;&lt;span style=&quot;padding-left: 1pt; padding-right: 1pt; text-decoration: overline;&quot; class=&quot;invert&quot;&gt;A&lt;/span&gt; + &lt;span style=&quot;padding-left: 1pt; padding-right: 1pt; text-decoration: overline;&quot; class=&quot;invert&quot;&gt;B&lt;/span&gt;B&lt;/td&gt;&lt;td style=&quot;vertical-align: baseline;&quot; class=&quot;just&quot;&gt;Distributive law. This step uses the fact that or distributes over and. It can look a bit strange since addition does not distribute over multiplication.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;padding-right: 20pt; vertical-align: baseline; white-space: nowrap;&quot; class=&quot;step&quot;&gt;&lt;span style=&quot;padding-left: 1pt; padding-right: 1pt; text-decoration: overline;&quot; class=&quot;invert&quot;&gt;A&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align: baseline;&quot; class=&quot;just&quot;&gt;Complement, Identity.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;SymPy console session?&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.logic import simplify_logic&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; to_be_simplified = '~(A &amp;amp; B) &amp;amp; (~A | B)'&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; simplify_logic(to_be_simplified)&lt;br /&gt;Output - Not(A)&lt;br /&gt;&lt;br /&gt;Period.&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;III) Conversion between cnf and dnf forms&lt;/h4&gt;&lt;div&gt;Conversion of boolean expressions to CNF or DNF forms is also possible.&lt;/div&gt;&lt;div&gt;The code to do this is quite simple -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.logic.boolalg import to_dnf&lt;/div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.abc import A, B, C, D&lt;/div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; to_dnf(B &amp;amp; (A | C))&lt;/div&gt;&lt;div&gt;    &lt;/div&gt;&lt;div&gt;Output - Or(And(A, B), And(B, C))&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;sympy.abc generates 'symbols' - Variables that can be used to denote any value. The entire framework of SymPy is based on the concept of Symbols (hence, Symbolic-Py)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Thats all for now. In the next post, I will continue with some other features like boolean equality mapping and checking for true-ness of a statement given a set of statements (and using it to find redundancies in databases).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 07 Jun 2013 14:22:39 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Manoj Kumar: Solving general PDE’s in SymPy</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=438</guid>
	<link>http://manojbits.wordpress.com/2013/06/03/solving-general-pdes-in-sympy/</link>
	<description>&lt;p&gt;Hello, I have decided to start my official work for my GSoC project. This post would be slightly TL;DR , so please bear with me.&lt;/p&gt;
&lt;p&gt;1. The first step was to wrap up the work on my previous PR, I had added a hint such that SymPy can now solve general partial differential equations with constant coefficients.  The mentioned Partial Differential Equation is of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+x%7D+%2B+b%2A%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+y%7D+%2B+c%2Af+%3DG%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial f}{\partial x} + b*\frac{\partial f}{\partial y} + c*f =G(x,y)&quot; class=&quot;latex&quot; title=&quot;\frac{\partial f}{\partial x} + b*\frac{\partial f}{\partial y} + c*f =G(x,y)&quot; /&gt; where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; is a function of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;G&quot; class=&quot;latex&quot; title=&quot;G&quot; /&gt; can be any arbitrary function in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;The implementation is discussed as follows, it can be separated into a general part and homogeneous part. The homogeneous part of course is  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%2A%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+x%7D+%2B+b%2A%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+y%7D+%2B+c%2Af+&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a*\frac{\partial f}{\partial x} + b*\frac{\partial f}{\partial y} + c*f &quot; class=&quot;latex&quot; title=&quot;a*\frac{\partial f}{\partial x} + b*\frac{\partial f}{\partial y} + c*f &quot; /&gt;and the general part is when you add the function &lt;img src=&quot;http://s0.wp.com/latex.php?latex=G%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;G(x,y)&quot; class=&quot;latex&quot; title=&quot;G(x,y)&quot; /&gt; and the solution would be when you add the general part and homogeneous part.&lt;/p&gt;
&lt;p&gt;So how does one solve the homogeneous part. It beats me too. I had referred this book “Partial Differential Equations by Viktor Grigoryan” and this is what he says in the book.  Before I go into the details of the implementation, it is important to review a few concepts that I had studied in my Math-1 Course in college.&lt;/p&gt;
&lt;p&gt;a] &lt;strong&gt;Directional Derivatives&lt;/strong&gt; -  All of us know that a derivative is the rate of change of  a function. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+x%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial f}{\partial x}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial f}{\partial x}&quot; /&gt; is the rate of change in the x direction, similarly &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial f}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial f}{\partial y}&quot; /&gt;  is the rate of change in the y direction. Suppose one wants to find the rate of change in an arbitrary direction say , this is the way to proceed. We find the dot product between the unit vector which gives the direction , and the gradient of the function, which would give the rate of change of function in the direction &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bv%7D%7B%7Cv%7C%7D.%28%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+x%7D%5Chat%7Bi%7D+%2B+%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+y%7D%5Chat%7Bj%7D%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{v}{|v|}.(\frac{\partial f}{\partial x}\hat{i} + \frac{\partial f}{\partial y}\hat{j})&quot; class=&quot;latex&quot; title=&quot;\frac{v}{|v|}.(\frac{\partial f}{\partial x}\hat{i} + \frac{\partial f}{\partial y}\hat{j})&quot; /&gt; . The reasoning behind it? Well I’ll leave it to someday else.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solving the homogeneous part&lt;/strong&gt; : Now take the Partial Differential Equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%2A%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+x%7D+%2B+b%2A%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+y%7D+%2B+c%2Af&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a*\frac{\partial f}{\partial x} + b*\frac{\partial f}{\partial y} + c*f&quot; class=&quot;latex&quot; title=&quot;a*\frac{\partial f}{\partial x} + b*\frac{\partial f}{\partial y} + c*f&quot; /&gt; . Our goal is to convert it this PDE in two variables into an ordinary differential equation, the first additive part can be written as directional derivative of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; in the direction of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%5Chat%7Bi%7D+%2B+b%5Chat%7Bj%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a\hat{i} + b\hat{j}&quot; class=&quot;latex&quot; title=&quot;a\hat{i} + b\hat{j}&quot; /&gt; . It can be also seen the third part &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c%2Af%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c*f(x,y)&quot; class=&quot;latex&quot; title=&quot;c*f(x,y)&quot; /&gt; is independent of the derivative term. Just ignoring the third term for a moment, the first part becomes zero, which tells us that it would be convenient to change the co-ordinates from the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt; to a system parallel to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%5Chat%7Bi%7D+%2B+b%5Chat%7Bj%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a\hat{i} + b\hat{j}&quot; class=&quot;latex&quot; title=&quot;a\hat{i} + b\hat{j}&quot; /&gt; and perpendicular to it. So we make the following substitutions&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%3Da%2Ax%2Bby&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi=a*x+by&quot; class=&quot;latex&quot; title=&quot;\xi=a*x+by&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%3Db%2Ax-a%2Ay&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta=b*x-a*y&quot; class=&quot;latex&quot; title=&quot;\eta=b*x-a*y&quot; /&gt; and yay the homogeneous PDE reduces to, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28a%5E%7B2%7D+%2B+b%5E%7B2%7D%29%2A%5Cfrac%7B%5Cpartial+u%7D%7B%5Cpartial+%5Cxi%7D+%2B+u%3D0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(a^{2} + b^{2})*\frac{\partial u}{\partial \xi} + u=0&quot; class=&quot;latex&quot; title=&quot;(a^{2} + b^{2})*\frac{\partial u}{\partial \xi} + u=0&quot; /&gt; . Do the substitutions yourself. It isn’t that difficult, and the ODE is variable separable and the solution is given by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7B-c%2F%28a%5E%7B2%7D+%2B+b%5E%7B2%7D%29%2A%28a%2Ax+%2B+b%2Ay%29%7D%2Af%28b%2Ax+-+a%2Ay%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;e^{-c/(a^{2} + b^{2})*(a*x + b*y)}*f(b*x - a*y)&quot; class=&quot;latex&quot; title=&quot;e^{-c/(a^{2} + b^{2})*(a*x + b*y)}*f(b*x - a*y)&quot; /&gt; . This solves the homogeneous part of the Partial Differential Equation&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solving the general part : &lt;/strong&gt;The general Partial Differential Equation reduces to the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+u%7D%7B%5Cpartial+%5Cxi%7D+%2B%5Cfrac%7Bc%2Au%7D%7Ba%5E%7B2%7D+%2B+b%5E%7B2%7D%7D%3D+%5Cfrac%7BG%28%5Cxi+%2C+%5Ceta%29%7D%7Ba%5E%7B2%7D+%2B+b%5E%7B2%7D%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial u}{\partial \xi} +\frac{c*u}{a^{2} + b^{2}}= \frac{G(\xi , \eta)}{a^{2} + b^{2}}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial u}{\partial \xi} +\frac{c*u}{a^{2} + b^{2}}= \frac{G(\xi , \eta)}{a^{2} + b^{2}}&quot; /&gt; , which is a linear differential equation. The solution is given by,  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7B-c%2F%28a%5E%7B2%7D+%2B+b%5E%7B2%7D%29%2A%28a%2Ax+%2B+b%2Ay%29%7D%2A%5Cint%5Cfrac%7Be%5E%5Cfrac%7Bc%2A%5Cxi%7D%7Ba%5E%7B2%7D+%2B+b%5E%7B2%7D%7D%2AG%28%5Cxi+%2C+%5Ceta%29%7D%7Ba%5E%7B2%7D+%2B+b%5E%7B2%7D%7D%5C%2Cd%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;e^{-c/(a^{2} + b^{2})*(a*x + b*y)}*\int\frac{e^\frac{c*\xi}{a^{2} + b^{2}}*G(\xi , \eta)}{a^{2} + b^{2}}\,d\xi&quot; class=&quot;latex&quot; title=&quot;e^{-c/(a^{2} + b^{2})*(a*x + b*y)}*\int\frac{e^\frac{c*\xi}{a^{2} + b^{2}}*G(\xi , \eta)}{a^{2} + b^{2}}\,d\xi&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;The corresponding source code can be found here, for those who are interested &lt;a href=&quot;https://github.com/sympy/sympy/pull/2109&quot;&gt;https://github.com/sympy/sympy/pull/2109&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ve also finished work on implementing the first heuristic, however I did not want to squeeze it here, as the post is already going too big, I have to admit that the code was completely straightforward and formatting this post was a tougher task. So till next time.&lt;/p&gt;
&lt;p&gt;P.S : Going through emotional lows now which I wouldn’t want to mention here , just hoping tomorrow is better than today.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/438/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/438/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=438&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Jun 2013 14:36:30 +0000</pubDate>
</item>
<item>
	<title>Chetna Gupta: Structure Theorem to Support Trignomentric Extensions</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=49</guid>
	<link>http://geekiology.wordpress.com/2013/06/03/structure-theorem-to-support-trignomentric-extensions/</link>
	<description>&lt;p&gt;As I have already started working on my google summer of code project that is Risch Algorithm in sympy’s codebase. Here I am to quick-start my work by drafting a theory which I need to implement in risch.py so as to complete my work in the pull request&lt;a href=&quot;https://github.com/sympy/sympy/pull/2049&quot; title=&quot;2049&quot;&gt;2049&lt;/a&gt;. Mostly my blog posts would be an extension to &lt;a href=&quot;http://asmeurersympy.wordpress.com&quot;&gt;Aaron’s blog&lt;/a&gt;, who has not only nicely implemented the risch algorithm in sympy but has also drafted and posted all the required updates and features currently available in the same. Risch gave a theorem and an algorithm that can find explicitly all the algebraic relations among a set of logarithms and exponentials over K(x) where K &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csubset&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\subset&quot; class=&quot;latex&quot; title=&quot;\subset&quot; /&gt; C is finitely generated extension of Q. Applying this algorithm to the exponential and logarithmic functions ease the process of calculating integrals, by indefinitely manifolds. But inorder to support trigonometric extensions, trigonometric functions need to be converted to complex exponentials and logarithms, which yields complex algebraic relations among real elementary functions and indeed buggy and complex outputs, this is what i have already added to the code-base.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;A suitable example to show the complexity of the above situation is: &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cint+%5Cfrac%7B%5Ctan%28%5Cfrac%7B%5Carctan%28x%7D%7B3%7D%29%5E2+%2B+1+%7D%7Bx%5E2%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\int \frac{\tan(\frac{\arctan(x}{3})^2 + 1 }{x^2}&quot; class=&quot;latex&quot; title=&quot;\int \frac{\tan(\frac{\arctan(x}{3})^2 + 1 }{x^2}&quot; /&gt;&lt;br /&gt; if converted to an integrand using complex exponentials and logs the above integral would be &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cint+%5Cfrac%7B4a%7D%7B%28x%5E2+%2B+1%29%28a+%2B+1%29%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\int \frac{4a}{(x^2 + 1)(a + 1)}&quot; class=&quot;latex&quot; title=&quot;\int \frac{4a}{(x^2 + 1)(a + 1)}&quot; /&gt; where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%3D+e%5E-log%28%5Cfrac%7B%5Csqrt%28-1%29+%2B+x%7D%7B%5Csqrt%28-1%29+-x%7D%29%2F3&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a = e^-log(\frac{\sqrt(-1) + x}{\sqrt(-1) -x})/3&quot; class=&quot;latex&quot; title=&quot;a = e^-log(\frac{\sqrt(-1) + x}{\sqrt(-1) -x})/3&quot; /&gt; that is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%3D+%5Cfrac%7B%28%5Csqrt%28-1%29+%2B+x%29%7D%7B%28%5Csqrt%28-1%29+-+x%29%7D%5E-1%2F3+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a = \frac{(\sqrt(-1) + x)}{(\sqrt(-1) - x)}^-1/3 &quot; class=&quot;latex&quot; title=&quot;a = \frac{(\sqrt(-1) + x)}{(\sqrt(-1) - x)}^-1/3 &quot; /&gt;, applying Risch algorithm, would indeed return complex algebraic function. While y = &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctan%28%5Cfrac%7Barctan%28x%29%7D%7B3%7D%29&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\tan(\frac{arctan(x)}{3})&quot; class=&quot;latex&quot; title=&quot;\tan(\frac{arctan(x)}{3})&quot; /&gt; is a real algebraic function satisfying  y^3 – 3xy^2 – 3y + x = 0 and the integrals is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=3%5Ctan%28%5Cfrac%7B%5Carctan%28x%29%7D%7B3%7D%29&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;3\tan(\frac{\arctan(x)}{3})&quot; class=&quot;latex&quot; title=&quot;3\tan(\frac{\arctan(x)}{3})&quot; /&gt; Inorder to prevent the above and to come up with successful outputs for trigonometric extensions, we have &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=74566&quot; title=&quot;Simplification of Real Elementary function Manuel Bronstien&quot;&gt;Simplification of Real Elementary function Manuel Bronstien&lt;/a&gt; to our rescue. Note this algorithm may fail if the constants introduced at various stages cause the structure of the constant field over Q to become unknown. In addition if a non-real complex constant is introduced then the theorem stated by Risch becomes invalid and we may have to revert back to its complex version. Such considerations do not appear as a limitation in practice , so we may not bother for them for now.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;As I would be looking into the implementation of core algorithm for the first time it may take me sometime to get in handy with all the awesome features of poly module that ease the work therefore I plan to start prior to the timeline, I would probably like to spend a week on implementation of the above. If this gets merged in the codebase I would be much ahead of the proposed timeline as in &lt;a href=&quot;http://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/chetna/1&quot; title=&quot;Risch Algorithm Proposal&quot;&gt;Risch Algorithm Proposal&lt;/a&gt; Also I would start looking into the recognizing derivative part of the implementation which hinders the progress of most of the subsequent work by th next week.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;This is just the beginning so let me keep this short and put more details about the same as I progress in the implementation. See you soon&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/49/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/49/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=49&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Jun 2013 14:09:20 +0000</pubDate>
</item>
<item>
	<title>Varun Joshi: The Falling Ladder Problem using Kanes Method</title>
	<guid isPermaLink="false">https://sites.google.com/feeds/content/site/v9joshi/4285074273330833971</guid>
	<link>https://sites.google.com/site/v9joshi/gsoc-blog/thefallingladderproblemusingkanesmethod</link>
	<description>&lt;table cellspacing=&quot;0&quot; class=&quot;sites-layout-name-one-column sites-layout-hbox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sites-layout-tile sites-tile-name-content-1&quot;&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;The problem stateme&lt;font size=&quot;3&quot;&gt;nt:&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;A ladder is resting against a frictionless wall and a frictionless floor.&lt;font size=&quot;3&quot;&gt; It falls under the influence of gravity.&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;a href=&quot;https://sites.google.com/site/v9joshi/gsoc-blog/thefallingladderproblemusingkanesmethod/Ladder%20Drawing.png?attredirects=0&quot;&gt;&lt;img src=&quot;https://sites.google.com/site/v9joshi/_/rsrc/1370057527357/gsoc-blog/thefallingladderproblemusingkanesmethod/Ladder%20Drawing.png&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;The length of the ladder, it's moment of inertia and it's mass are given to us. We need to find it's angular acceleration. I solved this using sympy.physics.mechanics in Python&lt;font size=&quot;3&quot;&gt; using &lt;font size=&quot;3&quot;&gt;Kane&lt;font size=&quot;3&quot;&gt;'s Method.&lt;/font&gt;&lt;/font&gt;&lt;/font&gt; First we need to import the relevant functions from sympy and sympy.physics.mechanics&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt; &lt;/font&gt;from sympy import cos, expand, Matrix, sin, symbols&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt; from sympy.physics.mechanics import dynamicsymbols, ReferenceFrame, Point, RigidBody, KanesMethod, inertia, Particle&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;Then we need to define the variables of interest. These are the angle of the ladder &lt;font size=&quot;3&quot;&gt;from the X-axis and the Angular velocity of th&lt;font size=&quot;3&quot;&gt;e ladder.&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;theta&lt;/font&gt;, &lt;font size=&quot;3&quot;&gt;omega&lt;/font&gt; = dynamicsymbols('&lt;font size=&quot;3&quot;&gt;theta&lt;/font&gt; &lt;font size=&quot;3&quot;&gt;omega&lt;/font&gt;')&lt;br /&gt;&lt;br /&gt;N&lt;font size=&quot;3&quot;&gt;ext &lt;font size=&quot;3&quot;&gt;we define variable for the derivatives of these quantities.&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;theta&lt;/font&gt;dot, &lt;font size=&quot;3&quot;&gt;omega&lt;/font&gt;dot = dynamicsymbols('&lt;font size=&quot;3&quot;&gt;thetadot&lt;/font&gt; &lt;font size=&quot;3&quot;&gt;omegadot&lt;/font&gt;', 1)&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;and &lt;font size=&quot;3&quot;&gt;define &lt;/font&gt;symbols for the known quantities, mass&lt;font size=&quot;3&quot;&gt;, length, gravitational acceleration&lt;/font&gt;&lt;/font&gt; and moment of Inertia.&lt;br /&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt;m, l, g, I = symbols('m l g I')&lt;br /&gt;&lt;br /&gt;We define the inertial frame and a lean frame for the ladder&lt;br /&gt; &amp;gt;&amp;gt;N = ReferenceFrame('N')&lt;br /&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt;L = N.orientnew('L', 'Axis', [&lt;font size=&quot;3&quot;&gt;theta&lt;/font&gt;, N.z])&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;and set the angular velocity and acceleration of the lean frame&lt;font size=&quot;3&quot;&gt;.&lt;/font&gt;&lt;/font&gt;&lt;br /&gt; &amp;gt;&amp;gt;L.set_ang_vel(N, &lt;font size=&quot;3&quot;&gt;omega&lt;/font&gt;*N.z)&lt;br /&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt;L.set_ang_acc(N, L.ang_vel_in(N).dt(N)) # This line isn't necessary. The default value of angular acceleration is ang_vel_in(N).dt(N)&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;After this, we need to define some points&lt;font size=&quot;3&quot;&gt;, namely the origin of the system and the center of mass of the ladder&lt;font size=&quot;3&quot;&gt;,&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt; &amp;gt;&amp;gt;O = Point('O')&lt;br /&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt;A = Point('A')&lt;br /&gt;&lt;br /&gt;and set their position and velocity. All positions here are relative, so we&lt;font size=&quot;3&quot;&gt; use O as the reference point. The velo&lt;font size=&quot;3&quot;&gt;city needs a frame of re&lt;font size=&quot;3&quot;&gt;ference &lt;font size=&quot;3&quot;&gt;to be completely de&lt;font size=&quot;3&quot;&gt;fine&lt;font size=&quot;3&quot;&gt;d.&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt; &amp;gt;&amp;gt;A.set_pos(O, -l/2*cos(&lt;font size=&quot;3&quot;&gt;theta&lt;/font&gt;)*N.x + l/2*sin(&lt;font size=&quot;3&quot;&gt;theta&lt;/font&gt;)*N.y)&lt;br /&gt;&lt;br /&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt;O.set_vel(N, 0)&lt;br /&gt; &amp;gt;&amp;gt;A.set_vel(N, l/2*u*sin(&lt;font size=&quot;3&quot;&gt;theta&lt;/font&gt;)*N.x + l/2*u*cos(&lt;font size=&quot;3&quot;&gt;theta&lt;/font&gt;)*N.y)&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;No&lt;font size=&quot;3&quot;&gt;w that we have all the details of the system, we can define the ladder as a rigid body.&lt;/font&gt;&lt;/font&gt;&lt;br /&gt; &amp;gt;&amp;gt;ladder = RigidBody('ladder', A, L, m, (inertia(L, 0, 0, I), A))&lt;br /&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;br /&gt;The inputs here are the &lt;font size=&quot;3&quot;&gt;name of the &lt;font size=&quot;3&quot;&gt;body, it's center of mass, &lt;font size=&quot;3&quot;&gt;the frame of reference it's fixed in, the mass of the body and a in&lt;font size=&quot;3&quot;&gt;ertia didactic. The inertia didactic can be crea&lt;font size=&quot;3&quot;&gt;ted using the inertia function. This needs the &lt;font size=&quot;3&quot;&gt;frame of reference where the inertia is being defined and the &lt;font size=&quot;3&quot;&gt;diagonal terms of the in&lt;font size=&quot;3&quot;&gt;ertia tensor. The inertia itse&lt;font size=&quot;3&quot;&gt;lf needs to be placed in a tuple &lt;font size=&quot;3&quot;&gt;alon&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;g with the point about which the&lt;font size=&quot;3&quot;&gt; in&lt;font size=&quot;3&quot;&gt;ertia&lt;/font&gt;&lt;/font&gt; is &lt;font size=&quot;3&quot;&gt;defined (the center of mass here).&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;br /&gt;&lt;/font&gt;The only external for&lt;font size=&quot;3&quot;&gt;ce on the system is &lt;font size=&quot;3&quot;&gt;the weight of the ladder, and it acts at the center of &lt;font size=&quot;3&quot;&gt;mass.&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt; &lt;span&gt;&lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt;&lt;/span&gt;forceList = [(A, -m*g*N.y)]&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size=&quot;3&quot;&gt;The &lt;font size=&quot;3&quot;&gt;rest of the problem is based on the inputs &lt;font size=&quot;3&quot;&gt;to Kanes meth&lt;font size=&quot;3&quot;&gt;o&lt;font size=&quot;3&quot;&gt;d&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;. We need the kinematic differential equations and a&lt;font size=&quot;3&quot;&gt; list of the bodies.&lt;/font&gt;&lt;br /&gt; &amp;gt;&amp;gt;kin&lt;font size=&quot;3&quot;&gt;Diffs&lt;/font&gt; = [&lt;font size=&quot;3&quot;&gt;omega&lt;/font&gt; - &lt;font size=&quot;3&quot;&gt;the&lt;font size=&quot;3&quot;&gt;tadot&lt;/font&gt;&lt;/font&gt;]&lt;br /&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt;bodyList = [ladder]&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;Finally we solve the dynamics.&lt;/font&gt;&lt;br /&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;kane&lt;/font&gt; = KanesMethod(N, q_ind = [&lt;font size=&quot;3&quot;&gt;theta&lt;/font&gt;], u_ind = [&lt;font size=&quot;3&quot;&gt;omega&lt;/font&gt;], kd_eqs = kin&lt;font size=&quot;3&quot;&gt;Diffs&lt;/font&gt;)&lt;br /&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;kane.&lt;/font&gt;kanes_equations(forceList, bodyList)&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;KM now contains all the information needed to &lt;font size=&quot;3&quot;&gt;solve the syste&lt;font size=&quot;3&quot;&gt;m. These are the mass matri&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;x,&lt;/font&gt; the forcing function&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt; and a &lt;font size=&quot;3&quot;&gt;dictionary that &lt;font size=&quot;3&quot;&gt;translates terms like d(&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;theta&lt;/font&gt;)/dt &lt;font size=&quot;3&quot;&gt;to&lt;/font&gt; omega&lt;/font&gt;&lt;/font&gt;&lt;/font&gt; and vice versa.&lt;br /&gt;&lt;br /&gt; &amp;gt;&amp;gt;MM = &lt;font size=&quot;3&quot;&gt;kane&lt;/font&gt;.mass_matrix&lt;br /&gt; &amp;gt;&amp;gt;forcing = &lt;font size=&quot;3&quot;&gt;kane.&lt;/font&gt;forcing&lt;br /&gt;&lt;/font&gt;&lt;span&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt;&lt;/span&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;kdd = &lt;font size=&quot;3&quot;&gt;k&lt;font size=&quot;3&quot;&gt;ane&lt;/font&gt;&lt;/font&gt;.kindiffdict()&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;The &lt;font size=&quot;3&quot;&gt;ODE can be written as MM*d(omega)/dt) = forcingfunction. Thi&lt;font size=&quot;3&quot;&gt;s means we can find &lt;font size=&quot;3&quot;&gt;d(omega)/dt as -&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt;rhs = MM.inv()*forcing&lt;br /&gt; &amp;gt;&amp;gt;rhs = rhs.subs(kdd)&lt;br /&gt;&lt;span&gt;    &lt;/span&gt;&lt;br /&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;Finally, we ex&lt;font size=&quot;3&quot;&gt;pand the equation&lt;/font&gt; &lt;font size=&quot;3&quot;&gt;to get &lt;/font&gt;the r&lt;font size=&quot;3&quot;&gt;esult&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span&gt; &lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt;&lt;/span&gt;rhs.ex&lt;font size=&quot;3&quot;&gt;pand()&lt;/font&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;font size=&quot;3&quot;&gt;-&lt;/font&gt;g*l*m*cos(&lt;font size=&quot;3&quot;&gt;theta&lt;/font&gt;)/(2*(I - l**2*m/4))&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;This problem was one of the questions in my Advanced Dynamics cl&lt;font size=&quot;3&quot;&gt;ass, so I know th&lt;font size=&quot;3&quot;&gt;at this solution is correct. We can integra&lt;font size=&quot;3&quot;&gt;te this in Matlab using the ode suite. &lt;font size=&quot;3&quot;&gt;For e.g. we can use &lt;font size=&quot;3&quot;&gt;ode45. Fo&lt;font size=&quot;3&quot;&gt;r this, we need to define the numbers for the &lt;font size=&quot;3&quot;&gt;problem&lt;font size=&quot;3&quot;&gt; and pack them so that we can pass them to the ODE file.&lt;/font&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt; &lt;/font&gt;m = 1; L = 1; g = 10; I = m*L^2/12;&lt;/font&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt; params.m = m; params.I = I; params.L = L; params.g = g;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;Then we need to define the initial conditions of the system&lt;font size=&quot;3&quot;&gt; and the timespa&lt;font size=&quot;3&quot;&gt;n for integration.&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt; StateVar0 = [3*pi/4; 0];&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt;&lt;/font&gt; tmax  = &lt;font size=&quot;3&quot;&gt;10&lt;/font&gt;;&lt;br /&gt;&amp;gt;&amp;gt; tlist = linspace(0,tmax,1000);&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;I'm &lt;font size=&quot;3&quot;&gt;solving the system from 0 to 10 seconds with 1000 points of output. The 1000 is just a number I picked&lt;font size=&quot;3&quot;&gt;. Smaller numbers work just as well&lt;font size=&quot;3&quot;&gt; and w&lt;font size=&quot;3&quot;&gt;on&lt;font size=&quot;3&quot;&gt;'t affect the outp&lt;font size=&quot;3&quot;&gt;ut plots&lt;font size=&quot;3&quot;&gt; sin&lt;font size=&quot;3&quot;&gt;g&lt;font size=&quot;3&quot;&gt;nificantly.&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;Next, set up the options &lt;font size=&quot;3&quot;&gt;for &lt;font size=&quot;3&quot;&gt;ode45 to fix the tolerances&lt;font size=&quot;3&quot;&gt;.&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt; options = odeset('reltol',1e-9,'abstol',1e-9);&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;I &lt;font size=&quot;3&quot;&gt;prefer using the anonymous functions to pass extra pa&lt;font size=&quot;3&quot;&gt;rameters to th&lt;font size=&quot;3&quot;&gt;e system.&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&amp;gt;&amp;gt;&lt;font size=&quot;3&quot;&gt; &lt;/font&gt;TargetODE = @(t,statevars) SlidingLadder_ODE(t,statevars,params);&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;Finally we execute the code to get output.&lt;/font&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt; &lt;/font&gt;[tlist,statevars] = ode45(TargetODE,tlist,StateVar0,options);&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;The ODE file i&lt;font size=&quot;3&quot;&gt;tself&lt;font size=&quot;3&quot;&gt; is pretty easy to write in Matlab. We need to make it a function.&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;div style=&quot;margin-left: 80px;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;function [dstatevar] =SlidingLadder_ODE(t,statevar,params)&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;% Unpack params and statevars&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;m = params.m; g = params.g; I = params.I; L = params.L;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;theta = statevar(1);&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;dtheta = statevar(2);&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;% Determine derivatives&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;thetadot = dtheta;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;thetadotdot = -(g*L*cos(theta)/2)/(I + (m*(L^2)/4)); &lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;% Pack derivatives&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;dstatevar = [thetadot; thetadotdot];&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;end&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;This can also be done using anonymous functions&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&amp;gt;&amp;gt; &lt;font size=&quot;3&quot;&gt;SlidingLadder_ODE = &lt;font size=&quot;3&quot;&gt;@(t,statevar,params) [statevar(2); -(params.g*params.L*cos(statevar(1))/(2*(params.I + params&lt;font size=&quot;3&quot;&gt;.m*params.L^2/4))];&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;I've plotted the&lt;font size=&quot;3&quot;&gt; angle vs time in Matlab. Th&lt;font size=&quot;3&quot;&gt;is &lt;font size=&quot;3&quot;&gt;is&lt;/font&gt;&lt;/font&gt;&lt;font size=&quot;3&quot;&gt; &lt;font size=&quot;3&quot;&gt;shown below.&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt; I've limited the output here using event detection to find when th&lt;font size=&quot;3&quot;&gt;e ladder &lt;font size=&quot;3&quot;&gt;hits the floor&lt;font size=&quot;3&quot;&gt;, i.e. when theta equals 180 degre&lt;font size=&quot;3&quot;&gt;es.&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;a href=&quot;https://sites.google.com/site/v9joshi/gsoc-blog/thefallingladderproblemusingkanesmethod/Theta_vs_Time.png?attredirects=0&quot;&gt;&lt;img src=&quot;https://sites.google.com/site/v9joshi/_/rsrc/1367488313189/gsoc-blog/thefallingladderproblemusingkanesmethod/Theta_vs_Time.png&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;display: block; text-align: left;&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
	<pubDate>Sat, 01 Jun 2013 03:32:24 +0000</pubDate>
	<author>v9joshi@gmail.com (Varun Joshi)</author>
</item>
<item>
	<title>Varun Joshi: GSoC Application</title>
	<guid isPermaLink="false">https://sites.google.com/feeds/content/site/v9joshi/7226438567555829334</guid>
	<link>https://sites.google.com/site/v9joshi/gsoc-blog/gsocapplication</link>
	<description>&lt;table cellspacing=&quot;0&quot; class=&quot;sites-layout-name-one-column sites-layout-hbox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sites-layout-tile sites-tile-name-content-1&quot;&gt;&lt;div dir=&quot;ltr&quot;&gt;This is my application for GSoC. I have it up on Melange as well: &lt;a href=&quot;http://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/v9joshi/1&quot;&gt;http://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/v9joshi/1&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;font size=&quot;3&quot;&gt;&lt;b&gt;&lt;br /&gt;Title:&lt;font size=&quot;3&quot;&gt; &lt;/font&gt;&lt;/b&gt;&lt;font size=&quot;3&quot;&gt;Code Generation for sympy.physics.mechanics
&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;/font&gt;&lt;font size=&quot;3&quot;&gt;&lt;b&gt;Short Project Description&lt;/b&gt;&lt;/font&gt;:&lt;br /&gt;&lt;br /&gt;This feature would allow users to use ODE equations derived in sympy.physics.mechanics to generate files that work with numerical integration functions in Matlab, Python and other languages.&lt;br /&gt;&lt;br /&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;About Me&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;b&gt;Short Bio&lt;/b&gt;&lt;/span&gt;:
 I'm Varun Joshi, a first year Masters student in the Department of 
Mechanical and Aerospace Engineering at the Ohio State Univerity. I work
 in the Movement Lab at OSU where we study human movement in general and
 Human locomotion in specific, trying to answer questions about how and 
why we move the way we do.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;Over
 the course of my 5 year combined Bachelor's and Masters degree at the 
Indian Institute of Technology Madras I studied and worked on the 
kinematics of mechanisms with some minor application to the design of 
orthotic devices (passive splint like devices which help correcting 
errors in limb function).&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;During
 the first year of my Masters degree at OSU I've taken courses on 
Robotics, Biomechanics, Compliant Mechanisms, Advanced Dynamics and the 
Dynamics and Control of Human and Animal movement. Most of these courses
 involved project work simulating the dynamics of systems in Matlab.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;b&gt;Communications&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;b&gt;Email&lt;/b&gt;: &lt;a href=&quot;mailto:v9joshi@gmail.vom&quot;&gt;v9joshi@gmail.com&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;b&gt;Github&lt;/b&gt;: v9joshi&lt;/p&gt;&lt;p&gt;&lt;b&gt;IRC:&lt;/b&gt; v9joshi on freenode (Though I don't use IRC much) &lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;b&gt;Google Code&lt;/b&gt;: v9joshi&lt;/p&gt;&lt;p&gt;&lt;b&gt;Personal Website and Future Documentation site for GSoC&lt;/b&gt;: &lt;a href=&quot;https://sites.google.com/site/v9joshi/&quot; rel=&quot;nofollow&quot;&gt;https://sites.google.com/site/v9joshi/&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;A
 blog for GSoC has already been set up, with an example of the work I 
did this week to show the level of detail I would like to put into my 
documentation.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;b&gt;Coding Platform: &lt;/b&gt;&lt;/span&gt;I
 use Ubuntu and Windows, but I mostly work in the Windows Environment 
because commercial software packages for Mechanical Engineering are 
usually built for it. I have spent a lot of time programming in Matlab, 
though I am familiar with Python, Mathematica and C, with my proficiency
 in these languages decreasing in the same order.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;For
 editor's, I use the inbuilt Matlab editor in most of my work. For 
Python, I started using IEP recently because of it's similarities with 
the Matlab editor.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: small;&quot;&gt;Favorite Feature of SymPy: &lt;/span&gt;&lt;/b&gt;I
 really like the Reference Frame class in sympy.physics.mechanics. I've derived the equations for the dynamics of a lot of systems by hand and using the Matlab 
symbolic toolbox. Using symbolic variables to represent rotations makes 
writing code and even thinking about systems a lot easier.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;Programming Experience&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: small;&quot;&gt;Matlab: &lt;/span&gt;&lt;/b&gt;I
 wrote a 4-bar mechanism synthesis and analysis program for my Masters 
project. The code isn't hosted online and is a bit dated since Mathworks
 changed the behavior of the atan2 function.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;I
 have also written several programs that solve and animate things like 
n-link pendulums, spinning tops and most recently a Slinky in 1-D.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;b&gt;Python: &lt;/b&gt;&lt;/span&gt;I
 took a couple of Udacity courses last year to pick up Python and learn 
so more about AI. I these courses I have written a program that makes a 
self-driving car move around a given path, and one that simulates the 
dynamics of a spacecraft moving around the Earth using Eulers method for
 integration amongst others. &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;I
 opened Pull request #2033 to fix a bug and add a test to the acos class
 in the SymPy trigonometric functions. This has been merged into sympy.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;I also opened Pull request #2067 to add an example/test for the kanes method in sympy.physics.mechanics.&lt;br /&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;Project&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;I
 would like to build features that produces numerically solvable ODE 
files for systems that have been derived symbolically using the sympy mechanics codes. Currently sympy generates diffrential equations for the system, but actually using these to model a system requires the user to manually input the equations into a numerical solver. This task is extremely common and would be a good addition to the current code generation methods in sympy.  &lt;br /&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;b&gt;Goals:&lt;/b&gt;&lt;/span&gt;&lt;b&gt; &lt;/b&gt;There
 are many numerical integrators written in Python, Matlab, C and 
Fortran. The primary goal is to be able to create code to work with 
these numerical integrators that can be executed by the user to analyze 
and animate the dynamical system they are solving.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt; As an example, if we have equations generated using the Lagrange's method in sympy.physics.mechanics&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt; lagrange_ode = LagrangesMethod(Lag, q)&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt; lagrange_ode.form_lagranges_equations()&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;Where
 lagrange_ode now holds the equations for the system, say a Double 
Pendulum. Now, we want to make a Matlab files named DoublePendulum_root 
and DoublePendulum_ode to numerically integrate these equations using 
ode45. We would execute this as-&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;# Generate files for the Double Pendulum equations&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;odeFile = CodeGenerate.Write(lagrange_ode, 'DoublePendulum', 'matlab','ode45')&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;Where odeFile contains the name of the output files as well as the method being used.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;The
 secondary goal for this project is to use features based on Autowrap to
 execute this code from within Python and output the results&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;## Enter initial conditions in the order of the state variables given to LagrangeMethod&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;initialconditions = [0, 0, 0, 0]&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;## Enter extra variables like mass, gravitational acceleration and link lengths.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;othervariables = ['m', 1, 'g', 9.81, 'l1', 1, 'l2', 1]&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;## Define the time span of integration through some method&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;timespan = numpy.linspace(0,1,10) # No equivalent Python function I could find&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;## Generate outputs&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;time, stateslist = odeFile.Execute(timespan, initialconditions, othervariables)&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;Where time contains a list of times and stateslist is a list that contains a list of states corresponding to each statevariable.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: small;&quot;&gt;Why did I choose to do this project&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;b&gt; &lt;/b&gt;While
 solving dynamics equations symbolically is very useful, it serves no 
purpose unless these solutions are then put through numerical 
integration to generate a motion given a set of initial conditions. 
Having spent a lot of time working these problems in Matlab, I would 
really like to see an implementation of this in Python. Being able to do
 it myself is an added bonus.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;&lt;b&gt;Proposed Schedule of work&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;Before
 Summer: Use different ODE solvers and learn the basic structure for 
codes. Implement some of the examples from PyDy in these solvers and 
upload their results to the PyDy documentation.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;Week 1 - Week 2: Write code generation methods for Matlab (since it is the language I am most familiar with) and test them.&lt;br /&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;Week 3 - Week 4: Write Code generation functions for the Python ODE solvers.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;Week 5 - Week 6: Write Code generation for C/Fortran ODE solvers&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;Week 7 – Week 8: Polish up code, add test cases and integrate into SymPy.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;Week 9 – Week 11: Work on adding Autowrap based features with some basic plotting tools to generate output.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Week 12: Write examples for the Code Generation programs.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;I am completely open to changing the order of these segments especially since Python might be a better target for the first output class as it is easy to test in.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;b&gt;Times I cannot work:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 0cm;&quot;&gt;I
 will be unable to work on this for 4-5 days while I attend the Dynamic 
Walking Conference at CMU from the 10 -13 of June. I should be able to 
stick to this schedule during the summer. If I am running behind, the 
Primary goal of Code Generation will take precedence over the Autowrap 
based features.&lt;/p&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
	<pubDate>Fri, 31 May 2013 21:36:56 +0000</pubDate>
	<author>v9joshi@gmail.com (Varun Joshi)</author>
</item>
<item>
	<title>Katja Sophie Hotz: Hello everybody!</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=33</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/05/30/hello-everybody/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;My name is Katja Sophie Hotz and I am studying Technical Mathematics at the Vienna University of Technology in Austria. I am in the final year of my master’s and have specialized in Mathematics in Computer Science.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In this blog I will document the progress on my Google summer of Code 2013 project with the title “Faster Algorithms for Polynomials over Algebraic Number Fields”.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The goal of this project is the implementation of faster greatest common divisor and factorization algorithms for univariate and multivariate polynomials over algebraic number fields. This is important for symbolic integration of rational functions and simplification of expressions among other things.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;For more information you can take a look at &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2013-Application-Katja-Sophie-Hotz:-Faster-Algorithms-for-Polynomials-over-Algebraic-Number-Fields&quot;&gt;my proposal&lt;/a&gt; on the SymPy Wiki.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/33/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/33/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=33&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 30 May 2013 16:42:18 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: Diophantine equations module for SymPy</title>
	<guid isPermaLink="false">http://theperceptiveway.wordpress.com/?p=2</guid>
	<link>http://theperceptiveway.wordpress.com/2013/05/29/diophantine-equations-module-for-sympy/</link>
	<description>&lt;p&gt;Hi Everyone !!! I am going to spend this summer doing my first open source project with &lt;a href=&quot;http://sympy.org/en/index.html&quot; target=&quot;_blank&quot; title=&quot;SymPy&quot;&gt;SymPy&lt;/a&gt;. I will work on creating a &lt;a href=&quot;http://en.wikipedia.org/wiki/Diophantine_equation&quot; target=&quot;_blank&quot;&gt;Diophantine Equation&lt;/a&gt; module. I hope this will be a nice and a very useful enhancement.&lt;/p&gt;
&lt;p&gt;The word “Diophantine” comes with the name Diophantus, a mathematician lived in the great city of Alexandria sometime around 250 AD. Often referred to as the “father of Algebra”, Diophantus in his famous work “Arithmetica” presented 150 problems that marked the early beginnings of number theory, the field of study about integers and their properties.&lt;/p&gt;
&lt;p&gt;We call a “Diophantine equation” to an equation of the form,&lt;br /&gt;
f(x1, x2, …. xn) = 0 where n &amp;gt;= 2 and x1, x2, … xn are integer variables. If we can find “n” integers a1, a2, … an which satisfy the above equation, we say that the equation is solvable. Three basic problems arise concerning Diophantine equations.&lt;/p&gt;
&lt;p&gt;1. Is the equation solvable?&lt;br /&gt;
2. In case of solvability, is the number of solutions finite or infinite?&lt;br /&gt;
3. If solvable can we find all of it’s solutions?&lt;/p&gt;
&lt;p&gt;I plan to implement following classical Diophantine equations which are found most often in number theory.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;1. a1x1 + a2x2 + a3x3  + …+ anxn = b (Linear Diophantine equation)&lt;br /&gt;
Here a1, a2, … an and b are constants. This solvable if gcd(a1, a2, …, an) divides b. Here gcd stands for greatest common divisor.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;2.  x1**2 +  x2**2 +  x3**2 + … xn**2 = k&lt;br /&gt;
Here k is an non negative integer. There will be a number of solutions depending on n and k.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;3. x1**2 + x2**2 + x3**2 + … xn**2 = xn+1**2 (Extension of Pythogorean equation)&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;4. x**2 + axy + y**2 = z**2&lt;br /&gt;
Here a is an integer constant.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;5. x**2 – Dy**2 = 1  (Simplified Pell’s equation)&lt;br /&gt;
Here D is a non square positive integer.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;If time permits, I hope to start on exponential Diophantine equations too.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/theperceptiveway.wordpress.com/2/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/theperceptiveway.wordpress.com/2/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=theperceptiveway.wordpress.com&amp;amp;blog=52956410&amp;amp;post=2&amp;amp;subd=theperceptiveway&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 29 May 2013 06:59:22 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: GSoC 2013 with SymPy</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=429</guid>
	<link>http://manojbits.wordpress.com/2013/05/28/gsoc-2013-with-sympy/</link>
	<description>&lt;p&gt;Hello. I’ve been lucky enough to be selected to do a project this summer for Sympy. This would be the project proposal that I would be working on, &lt;a href=&quot;https://google-melange.appspot.com/gsoc/proposal/review/google/gsoc2013/manojkumar/1&quot;&gt;Improved ODE Solver in SymPy&lt;/a&gt; and my mentor would be Sean Vig. The application process itself was a good learning experience for me, fixing bugs and adding enhancements and was probably one of the reasons I got selected. I hope to increase my programming abilities and contribute in a much bigger way this summer and work toward the development of SymPy. This would be my SymPy blog too, and I would posting atleast one update every week.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/429/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/429/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=429&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 28 May 2013 15:22:30 +0000</pubDate>
</item>
<item>
	<title>Tarun Gaba</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7526836182390500993.post-8278928756892309073</guid>
	<link>http://tarun-gaba.blogspot.com/2013/05/hello-world-this-is-my-first-attempt-to.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;h2 style=&quot;text-align: left;&quot;&gt;Hello World&lt;/h2&gt;&lt;div style=&quot;text-align: left;&quot;&gt;This is my first attempt to blogging. My blogging career(so as to say) marks with the selection in the Google Summer Of Code 2013, where I would be working in Python Software Foundation.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;This blog will serve to provide an insight, and updates related to progress of my project, which would commence on 17th June.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Till then, waiting from my Google T-Shirt ...&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Cheers. &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 28 May 2013 08:45:34 +0000</pubDate>
	<author>noreply@blogger.com (TARUN GABA)</author>
</item>
<item>
	<title>Brian Granger: Will we ever get past classical physics?</title>
	<guid isPermaLink="false">http://www.brianegranger.com/?p=65</guid>
	<link>http://brianegranger.com/?p=65</link>
	<description>&lt;p&gt;As a university physics professor, I regularly teach introductory physics courses (both calculus and algebra based).  Most introductory physics textbooks cover the same set of topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Newtonian mechanics&lt;/li&gt;
&lt;li&gt;Waves and sound&lt;/li&gt;
&lt;li&gt;Thermodynamics&lt;/li&gt;
&lt;li&gt;Electromagnetism&lt;/li&gt;
&lt;li&gt;Optics&lt;/li&gt;
&lt;li&gt;Modern physics (relativity, atomic, nuclear, particle)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is something puzzling but profound about this list of topics.  Why do I say this?  &lt;strong&gt;Most of this material is hundreds of years old. &lt;/strong&gt; Let’s think about this.&lt;/p&gt;
&lt;p&gt;Newton’s &lt;strong&gt;Principia&lt;/strong&gt; was published in 1687.  Maxwell’s &lt;strong&gt;On Physical Lines of Force&lt;/strong&gt; was published in 1861.  While there have been many advances in mechanics and electromagnetism since the 17th and 19th centuries, the material covered in introductory physics has been essentially unchanged for hundreds of years.  The same is largely true of thermodynamics and optics.&lt;/p&gt;
&lt;p&gt;What about the small number of topics listed under the heading “modern physics?”  As covered in the introductory physics textbooks and courses, most of this material is still about one hundred years old.  Thus, even though many of he most exciting discoveries in physics have taken place more recently (I am using “recently” very loosely here = the last 100 years) we don’t cover any of these things in our introductory physics classes.&lt;/p&gt;
&lt;p&gt;This has bothered me for a long time and I even feel like a bit of a heretic in bringing this up.  But I think this is a real problem.  Imagine introductory Astronomy without any images from the Hubble Space Telescope.  Imagine introductory Biology without a thorough treatment of DNA and genetics?  These things are laughable. You are probably thinking something like “that would be crazy, it would be so boring and students would be left with a horribly inaccurate impression of the subject.” What is so special about physics that we completely omit all of the spectacular discoveries of the last 100 years? Are students not suffering under this arrangement.&lt;/p&gt;
&lt;p&gt;Here are some of the reasons I have heard for not covering “more recent physics”:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 14px;&quot;&gt;All of those engineering, chemistry, biology majors really, really need to know all of this classical physics.  The faculty in these other departments would protest loudly if we made any change.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;These same majors don’t need to know anything about more recent physics.&lt;/li&gt;
&lt;li&gt;All of the more recent physics is horribly difficult and mathematical, beyond what is realistic to cover in an introductory class.&lt;/li&gt;
&lt;li&gt;To understand more recent physics, you first have to completely understand classical physics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do we really believe all of these reasons? Does this bother anyone else? What would it look like to begin to change our introductory physics courses to address this problem?&lt;/p&gt;</description>
	<pubDate>Thu, 23 May 2013 22:04:19 +0000</pubDate>
</item>
<item>
	<title>Fabian Pedregosa: Numerical optimizers for Logistic Regression</title>
	<guid isPermaLink="false">tag:fabianp.net/blog,2013-05-20:2013/numerical-optimizers-for-logistic-regression/</guid>
	<link>http://fabianp.net/blog/2013/numerical-optimizers-for-logistic-regression/</link>
	<description>&lt;p&gt;Following a challenge proposed by &lt;a href=&quot;http://gael-varoquaux.info&quot;&gt;Gael&lt;/a&gt; to &lt;a href=&quot;https://team.inria.fr/parietal/&quot;&gt;my
group&lt;/a&gt; I compared several implementations of
Logistic Regression. The task was to implement a Logistic Regression model
using standard optimization tools from &lt;code&gt;scipy.optimize&lt;/code&gt; and compare
them against state of the art implementations such as
&lt;a href=&quot;http://www.csie.ntu.edu.tw/~cjlin/liblinear/&quot;&gt;LIBLINEAR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this blog post I'll write down all the implementation details of this
model, in the hope that not only the conclusions but also the process would be
useful for future comparisons and benchmarks.&lt;/p&gt;
&lt;h2&gt;Function evaluation&lt;/h2&gt;
&lt;p&gt;The loss function for the $\ell_2$-regularized logistic regression, i.e. the
function to be minimized is&lt;/p&gt;
&lt;p&gt;$$
\mathcal{L}(w, \lambda, X, y) = - \sum_{i=1}^n \log(\phi(y_i w^T X_i)) + \lambda w^T w
$$&lt;/p&gt;
&lt;p&gt;where $\phi(t) = 1. / (1 + \exp(-t))$ is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Logistic_function&quot;&gt;logistic
function&lt;/a&gt;, $\lambda w^T w$ is
the regularization term and $X, y$ is the input data, with $X \in
\mathbb{R}^{n \times p}$ and $y \in \{-1, 1\}^n$. However, this formulation is
not great from a practical standpoint. Even for not unlikely values of $t$
such as $t = -100$, $\exp(100)$ will overflow, assigning the loss an
(erroneous) value of $+\infty$. For this reason &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;http://fa.bianp.net/blog/feed/#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, we evaluate
$\log(\phi(t))$ as&lt;/p&gt;
&lt;p&gt;$$
\log(\phi(t)) = 
\begin{cases}
- \log(1 + \exp(-t)) \text{ if } t &amp;gt; 0 \\
t - \log(1 + \exp(t)) \text{ if } t \leq 0\\
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;The gradient of the loss function is given by&lt;/p&gt;
&lt;p&gt;$$
\nabla_w \mathcal{L} = \sum_{i=1}^n y_i X_i (\phi(y_i w^T X_i) - 1) + \lambda w
$$&lt;/p&gt;
&lt;p&gt;Similarly, the logistic function $\phi$ used here can be computed in a more
stable way using the formula&lt;/p&gt;
&lt;p&gt;$$
\phi(t) = \begin{cases}
1 / (1 + \exp(-t)) \text{ if } t &amp;gt; 0 \\
\exp(t) / (1 + \exp(t)) \text{ if } t \leq 0\\
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;Finally, we will also need the Hessian for some second-order methods, which is given by&lt;/p&gt;
&lt;p&gt;$$
\nabla_w ^2 \mathcal{L} = X^T D X + \lambda I
$$&lt;/p&gt;
&lt;p&gt;where $I$ is the identity matrix and $D$ is a diagonal matrix given by $D_{ii} = \phi(y_i w^T X_i)(1 - \phi(y_i w^T X_i))$.&lt;/p&gt;
&lt;p&gt;In Python, these function can be written as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# logistic function, returns 1 / (1 + exp(-t))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exp_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# logistic loss function, returns Sum{-log(phi(t))}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;yz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# gradient of the logistic loss&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;grad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grad&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hessian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# hessian of the logistic loss&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Hs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Benchmarks&lt;/h2&gt;
&lt;p&gt;I tried several methods to estimate this $\ell_2$-regularized logistic regression. There is
one first-order method (that is, it only makes use of the gradient and not of
the Hessian), &lt;a href=&quot;http://en.wikipedia.org/wiki/Nonlinear_conjugate_gradient_method&quot;&gt;Conjugate
Gradient&lt;/a&gt;
whereas all the others are &lt;a href=&quot;http://en.wikipedia.org/wiki /Quasi-Newton_methods&quot;&gt;Quasi-Newton methods&lt;/a&gt;. The method I tested are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CG&lt;/strong&gt; = Conjugate Gradient as implemented in &lt;code&gt;scipy.optimize.fmin_cg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TNC&lt;/strong&gt; = Truncated Newton as implemented in &lt;code&gt;scipy.optimize.fmin_tnc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BFGS&lt;/strong&gt; = Broyden–Fletcher–Goldfarb–Shanno method, as implemented in &lt;code&gt;scipy.optimize.fmin_bfgs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L-BFGS&lt;/strong&gt; = Limited-memory &lt;a href=&quot;http://en.wikipedia.org/wiki/BFGS_method&quot;&gt;BFGS&lt;/a&gt; as implemented in &lt;code&gt;scipy.optimize.fmin_l_bfgs_b&lt;/code&gt;. Contrary to the BFGS algorithm, which is written in Python, this one wraps a C implementation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trust Region&lt;/strong&gt; = Trust Region Newton method &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;http://fa.bianp.net/blog/feed/#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. This is the solver used by &lt;a href=&quot;http://www.csie.ntu.edu.tw/~cjlin/liblinear/&quot;&gt;LIBLINEAR&lt;/a&gt; that I've wrapped to accept any Python function in the package &lt;a href=&quot;http://github.com/fabianp/pytron/&quot;&gt;pytron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To assure the most accurate results across implementations, all timings were
collected by callback functions that were called from the algorithm on each
iteration. Finally, I plot the maximum absolute value of the gradient (=the
infinity norm of the gradient) with respect to time.&lt;/p&gt;
&lt;p&gt;The synthetic data used in the benchmarks was generated as described in &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;http://fa.bianp.net/blog/feed/#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and consists
primarily of the design matrix $X$ being Gaussian noise, the vector of
coefficients is drawn also from a Gaussian distribution and the explained
variable $y$ is generated as $y = \text{sign}(X w)$. We then perturb matrix
$X$ by adding Gaussian noise with covariance 0.8. The number of samples and features
was fixed to $10^4$ and $10^3$ respectively. The penalization parameter $\lambda$ was
fixed to 1.&lt;/p&gt;
&lt;p&gt;In this setting variables are typically uncorrelated and most solvers perform
decently:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://fa.bianp.net/blog/static/images/2013/comparison_logistic_corr_0.png&quot; alt=&quot;Benchmark Logistic&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here, the Trust Region and L-BFGS solver perform almost equally good, with
Conjugate Gradient and Truncated Newton falling shortly behind. I was surprised
by the difference between BFGS and L-BFGS, I would have thought that when memory was not an issue both algorithms should perform similarly.&lt;/p&gt;
&lt;p&gt;To make things more interesting, we now make the design to be slightly more
correlated. We do so by adding a constant term of 1 to the matrix $X$ and
adding also a column vector of ones this matrix to account for the intercept. These are the results:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://fa.bianp.net/blog/static/images/2013/comparison_logistic_corr_1.png&quot; alt=&quot;Benchmark Logistic&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here, we already see that second-order methods dominate over first-order
methods (well, except for BFGS), with Trust Region clearly dominating the
picture but with TNC not far behind.&lt;/p&gt;
&lt;p&gt;Finally, if we force the matrix to be even more correlated (we add 10. to the
design matrix $X$), then we have:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://fa.bianp.net/blog/static/images/2013/comparison_logistic_corr_10.png&quot; alt=&quot;Benchmark Logistic&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here, the Trust-Region method has the same timing as before, but all other
methods have got substantially worse.The Trust Region
method, unlike the other methods is surprisingly robust to correlated designs.&lt;/p&gt;
&lt;p&gt;To sum up, the Trust Region method performs extremely well for optimizing the
Logistic Regression model under different conditionings of the design matrix.
The &lt;a href=&quot;http://www.csie.ntu.edu.tw/~cjlin/liblinear/&quot;&gt;LIBLINEAR&lt;/a&gt; software uses
this solver and thus has similar performance, with the sole exception that the
evaluation of the logistic function and its derivatives is done in C++ instead
of Python. In practice, however, due to the small number of iterations of this
solver I haven't seen any significant difference.&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;A similar development can be found in the source code of &lt;a href=&quot;http://www.csie.ntu.edu.tw/~cjlin/liblinear/&quot;&gt;LIBLINEAR&lt;/a&gt;, and is probably also used elsewhere. &lt;a href=&quot;http://fa.bianp.net/blog/feed/#fnref:1&quot; rev=&quot;footnote&quot; title=&quot;Jump back to footnote 1 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;&quot;A comparison of numerical optimizers for logistic regression&quot;, P. Minka, &lt;a href=&quot;http://research.microsoft.com/en-us/um/people/minka/papers/logreg/&quot;&gt;URL&lt;/a&gt; &lt;a href=&quot;http://fa.bianp.net/blog/feed/#fnref:2&quot; rev=&quot;footnote&quot; title=&quot;Jump back to footnote 2 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;&quot;Newton's Method for Large Bound-Constrained Optimization Problems&quot;, Chih-Jen Lin, Jorge J. More &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.45.7340&quot;&gt;URL&lt;/a&gt; &lt;a href=&quot;http://fa.bianp.net/blog/feed/#fnref:3&quot; rev=&quot;footnote&quot; title=&quot;Jump back to footnote 3 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://nbviewer.ipython.org/urls/raw.github.com/fabianp/pytron/master/doc/benchmark_logistic.ipynb&quot;&gt;IPython Notebook to reproduce the benchmarks&lt;/a&gt; &lt;a href=&quot;https://github.com/fabianp/pytron/blob/master/doc/benchmark_logistic.ipynb&quot;&gt;source&lt;/a&gt; &lt;a href=&quot;http://fa.bianp.net/blog/feed/#fnref:4&quot; rev=&quot;footnote&quot; title=&quot;Jump back to footnote 4 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
	<pubDate>Sun, 19 May 2013 22:00:00 +0000</pubDate>
</item>

</channel>
</rss>
