<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet SymPy</title>
	<link>http://planet.sympy.org/</link>
	<language>en</language>
	<description>Planet SymPy - http://planet.sympy.org/</description>

<item>
	<title>Chetna Gupta: Week 6 &amp; 7</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=407</guid>
	<link>http://geekiology.wordpress.com/2013/08/09/week-6-7-2/</link>
	<description>&lt;p&gt;Week 6, brought me back to my coding arena “YES COLLEGE”. Though it was a messed up week with tons and tons of administration work, course selections, juniors arrival but still I could manage re-going through the Manuel Bronstien to see what the “HELL” has been causing the recursion error in the code.&lt;/p&gt;
&lt;p&gt;Though the code has started picking up the pace, it works for some of the simple cases I have included in my previous post (Week-5) but it ended others in recursion errors. These cases are the ones where I have more than one monomial, here is an example to demonstrate the failure.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png&quot;&gt;&lt;img src=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png?w=300&amp;amp;h=168&quot; alt=&quot;Screenshot from 2013-07-30 21:43:22&quot; width=&quot;300&quot; class=&quot;alignnone size-medium wp-image-397&quot; height=&quot;168&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There have been a lot of delays in me working on the PR, thanks to my awesome immunity system, after having food poisoning.&lt;/p&gt;
&lt;p&gt;I need to really gear-up now, so have planned to update the blog as well as PRs daily. There is a lot which I guess we all would like to see implemented for the Risch Algorithm. I would really like to have a meeting soon with Aaron to discuss if we could please have daily meet-ups.&lt;br /&gt;
PS  : Some Announcements&lt;br /&gt;
PS1 : YES !! i have passed the mid-term evaluation &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:D&quot; class=&quot;wp-smiley&quot; /&gt;&lt;br /&gt;
PS2 : I am finally 20 !! &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:D&quot; class=&quot;wp-smiley&quot; /&gt;  Adios teens !&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/407/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/407/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=407&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 09 Aug 2013 00:02:16 +0000</pubDate>
</item>
<item>
	<title>Chetna Gupta: Week – 6 &amp; 7</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=396</guid>
	<link>http://geekiology.wordpress.com/2013/08/08/week-6-7/</link>
	<description>&lt;p&gt;Week 6, brought me back to my coding arena “YES COLLEGE”. Though it was a messed up week with tons and tons of administration work, course selections, juniors arrival but still I could manage re-going through the Manuel Bronstien to see what the “HELL” has been causing the recursion error in the code.&lt;/p&gt;
&lt;p&gt;Though the code has started picking up the pace, it works for some of the simple cases I have included in my previous post (Week-5) but it ended others in recursion errors. These cases are the ones where I have more than one monomial, here is an example to demonstrate the failure.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png&quot;&gt;&lt;img src=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png?w=300&amp;amp;h=168&quot; alt=&quot;Screenshot from 2013-07-30 21:43:22&quot; width=&quot;300&quot; class=&quot;alignnone size-medium wp-image-397&quot; height=&quot;168&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There have been a lot of delays in me working on the PR, thanks to my awesome immunity system, after having food poisoning.&lt;/p&gt;
&lt;p&gt;I need to really gear-up now, so have planned to update the blog as well as PRs daily. There is a lot which I guess we all would like to see implemented for the Risch Algorithm. I would really like to have a meeting soon with Aaron to discuss if having daily meet-ups would be feasible for him.&lt;br /&gt;
PS  : Some Announcements&lt;br /&gt;
PS1 : YES !! i have passed the mid-term evaluation &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:D&quot; class=&quot;wp-smiley&quot; /&gt;&lt;br /&gt;
PS2 : I am finally 20 !! &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:D&quot; class=&quot;wp-smiley&quot; /&gt;  Adios teens !&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/396/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/396/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=396&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 08 Aug 2013 23:38:16 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: Seventh week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=246</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/08/04/seventh-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;I am very happy to report that I passed midterm evaluations! &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;So what happened this week? First, I implemented a (user facing) function to calculate a multivariate GCD of two polynomials over an algebraic field, building on the work of the previous two weeks. I also spent a considerable amount of time hunting bugs, but it seems I got everything in working order.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;However, I realized that the polynomial ring I had been working with was not the best choice. So I went over the whole code again and rewrote everything to use polynomials in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bt_1%2C+%5Cldots%2C+t_k%5D%5Bx%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z[t_1, \ldots, t_k][x, z]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z[t_1, \ldots, t_k][x, z]&quot; /&gt; instead of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bx%2C+t_1%2C+%5Cldots%2C+t_k%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z[x, t_1, \ldots, t_k, z]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z[x, t_1, \ldots, t_k, z]&quot; /&gt;. This made some parts easier and some parts more difficult, but overall it looks like the more natural choice. The parts that got more difficult now involve rings like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%28t_k%29%5Bt_1%2C+%5Cldots+%2C+t_%7Bk-1%7D%5D%5Bx%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z(t_k)[t_1, \ldots , t_{k-1}][x, z]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z(t_k)[t_1, \ldots , t_{k-1}][x, z]&quot; /&gt;, where I have to distinguish between the cases &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k+%3D+1&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;k = 1&quot; class=&quot;latex&quot; title=&quot;k = 1&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k+%3E+1&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;k &amp;gt; 1&quot; class=&quot;latex&quot; title=&quot;k &amp;gt; 1&quot; /&gt;. Maybe I will find a better solution for that in time.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In the next few days I want to finish this part of my project so I can start with the factorization algorithm, which will be the biggest and final part of my project.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/246/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/246/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=246&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 04 Aug 2013 20:59:18 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: GSoC Midterm Report (Week 7)</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-7293418503164480029</guid>
	<link>http://codesachin.blogspot.com/2013/08/gsoc-midterm-report-week-7.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Week 7 of GSoC is over, which means I am now in the 'second half' of the coding period. The midterms were conducted by Google from 29th to 2nd, and I am happy to report I passed them :-).&lt;br /&gt;&lt;br /&gt;&lt;div&gt;As I had predicted in my last blog post, this week wasn't very exciting, atleast as far as the project is concerned. I am now at Goa, and classes have started. However, I did get a few things done - The Dyadic framework is now almost complete, with all the classes functioning as expected (from point of view of dyadic operations). I also added all the special operations like cross, dot, express and time-differentiation. For now, just like last week, they use SymPy Symbols for temporary working.&lt;/div&gt;&lt;div&gt;Moreover, I finished writing all the tests for my first PR. Gilbert reviewed them, and I made a few changes (mostly API-wise).&lt;br /&gt;I also tested my MovingRefFrame implementation of vector time-derivatives on my hacked mechanics module, and I am happy that it worked fine. Thus, I now have the proof-of-concept for all the work I have done so far.&lt;/div&gt;&lt;div&gt;I have also submitted a PR to get the logic module docs into the online development documentation, but I am quite sure I am going wrong somewhere. I have pinged Aaron, and I hope it gets solved by the end of this week.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To sum up my work till now, this is what I got done-&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;1) &lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;u&gt;MovingRefFrame&lt;/u&gt;&lt;/span&gt; class - The basic class to represent moving reference frames in 3-D space. Inherits from the CoordSysRect class of the new vector module.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;2) &lt;u&gt;Particle&lt;/u&gt; class - Class to represent particles (mass but no volume) in space. Each particle is associated with a frame of its own, and all it's parameters are calculated wrt it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;3) Miscellaneous mechanics functions like the ones to obtain position vector given a time-dependent vector and boundary conditions.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;4) &lt;u&gt;Dyadic&lt;/u&gt; framework - Classes Dyadic, BaseDyadic, DyadicAdd, DyadicMul. All these classes are based on relevant SymPy core classes and build dyadic-based functionality on top of them.&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Currently, I am reading Griffith's book (very helpful suggestion from &lt;a href=&quot;https://plus.google.com/109170160946486271280&quot;&gt;Aditya&lt;/a&gt; - my collegemate) and taking notes for the EM module. Since the development of the new mechanics core is now nearing completion, I can focus time on working on the new addition to sympy.physics.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Hence, the coming week will be spent on polishing off the mechanics work, making sure all required parts are in place, maybe helping Prasoon with some functions of vector fields (so that he can concentrate on vector-space integration).&lt;br /&gt;Plus, I have to design the vector-dyadic interfacing. Basically, how dyadics will be instantiated from vector 'outer' functions. Obviously, having a dyadic framework is useless without fitting it to the vector module.&lt;br /&gt;And last but not the least, I plan to code the electrostatic functions for the EM sub-module by this weekend. Hope I succeed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Have a great week :-)&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 04 Aug 2013 14:54:18 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Prasoon Shukla: GSoC Weeks 6 and 7</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=195</guid>
	<link>http://musingsofafriend.wordpress.com/2013/08/04/gsoc-weeks-6-and-7/</link>
	<description>&lt;p&gt;I hadn’t realized that I didn’t write the blog post last week. Sorry! Anyway, let us describe what was done in the last two weeks.&lt;/p&gt;
&lt;p&gt;Okay, so first, off, I passed the midterm evaluation! I hoped I would, of course, but I didn’t know for sure. For the evaluations, I was hoping to get the basic framework of the module to work completely. I was pretty much there but for one particular method – the &lt;em&gt;express&lt;/em&gt; method for vectors – wasn’t coming along well; so unwell in fact that I wasn’t even sure what to do at one point.&lt;/p&gt;
&lt;p&gt;Taking a few steps back, in week 6, I was primarily testing and fixing things – and hoping that I’ll be ready with the basic framework working and ready to go. But alas, it was in vain. In the meantime, Gilbert made quite a bit of restructuring to the design of the existing code and made a PR against my branch. I didn’t know about this PR for at least 4 days from the time when it was made. Sachin brought it to my attention – just as the week 6 was ending. By now, I had made some commits of my own. Merge conflicts ensued. I reported this to GIlbert, and, he fixed the merge conflicts. But by the time he did that, I had made some more commits! But I hadn’t pushed them so Gilbert didn’t know about that. Anyway, Gilbert said, and I realized, that the longer I tarry in merging, the more difficult it will get. So, I decided to leave the completion of the express method till later and got on with the merge.&lt;/p&gt;
&lt;p&gt;Let me describe some of these structural changes. The first this is that we now have a new class, BaseVector, that would represent basis vectors. Just as a reminder, this class was called Vector up until the changes. Now, the Vector class is just a &lt;em&gt;foundation&lt;/em&gt; class – all classes representing vectors, namely, BaseVector, Vector and VectMul – inherit from this Vector class. This is a more uniform structure, I think. This also reduced the clutter of the code as well.&lt;/p&gt;
&lt;p&gt;Among other changes, we now don’t have &lt;em&gt;exec &lt;/em&gt;statements in the initialization of CoordSys classes. Instead, we are now using&lt;em&gt; __setattr__ &lt;/em&gt;special function now. This again, helped reduce clutter.&lt;/p&gt;
&lt;p&gt;Anyway, by the end of week 6, Stefan had asked me for a date – so that he could test the orientation methods. I was overly optimistic (as he was keen to point out) and assessed the situation to give him working orient methods by the end of Sunday. Right around this time, the new PR by Gilbert came to my attention. It needed merging and I couldn’t get the work done in time. I wrote and email to Stefan, naturally quite abashed, telling him that I couldn’t deliver the code on the previously accepted time. Stefan pointed me to a study in social science – which explored the lack of pessimism in students. It was quite apt, I tell you. Stefan wished, as did I, that I would learn, and I quote, “&lt;em&gt;the art of pessimism”.&lt;/em&gt;&lt;i&gt;&lt;br /&gt;
&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Later, when I had merged the work of Gilbert in my branch, I decided to get back on track. The first order of business was to fix the orientation methods. Now, orientation methods rely heavily on the &lt;em&gt;express&lt;/em&gt; method. So, I decided to write that one off first. I spent a day writing and testing things. I was confident that in a day or two at most, things will be good to go. But it seems that the art of pessimism was yet to be learned. Though this time, the problem was not an overestimation of my own abilities. Rather, it was an oversight that caused further delay. I wasn’t quite considering a certain case of vectors – and that had allowed me to cut a few corners. When that particular case finally dawned on me, well, I was quite angry with myself, to say the least. This particular case meant that I’d have to write a more general approach to a couple of methods – among them were &lt;em&gt;separate, dot, expres.&lt;/em&gt; Now, this meant quite some work. I fixed the separate method first – but I’m not at all sure what the fixed method will achieve – or that whether it will achieve anything. The new case seems to have made this method redundant. But we shall see. The next in line was the &lt;em&gt;express&lt;/em&gt; method – which is the foundation of a very large part of the code. Now, I was at a loss on how to implement this method the most general way – thanks to the new case that I talked about earlier. I had one idea that I had from doing a computer graphics course – but, I wasn’t quite sure about its feasibility. So, I ran for the hills &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt;  I asked a question stating my problems on the ML and got a reply by Sachin. Apparently, there’s an easier method. Gilbert made some further comments and finally, I had a solution – I hope it will work. I am currently coding it away though not wothout some difficulty (read academics).&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Sheeh! That was a long post. I hope to have covered all the major work done in the past two weeks. Hope to have a working implementation ready in a few days. Note that I haven’t said when – I seem to be learning &lt;em&gt;“the art of pessimism”.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/195/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/195/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=195&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 04 Aug 2013 14:42:07 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: GSoC – Mid term report</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=697</guid>
	<link>http://manojbits.wordpress.com/2013/08/04/gsoc-mid-term-report/</link>
	<description>&lt;p&gt;Hi,  I passed the midterm evaluations of GSoC, this is what I have accomplished till now.&lt;/p&gt;
&lt;p&gt;1] Built the basic infrastructure of the pde module, and added hints that could solve general Partial Differential Equations with constant coefficients&lt;/p&gt;
&lt;p&gt;2] Added a function, infinitesimals , that would try to find out the required infinitesimals of any given first order ODE. The following heuristics have been implemented.&lt;/p&gt;
&lt;p&gt;a] abaco1_simple (Assumes one of the infinitesimals to be zero, and the other to be a function to x or y)&lt;br /&gt;
b] abaco1_product (Assumes one of the infinitesimals to be zero, and the other to be a product of a function of x and y)&lt;br /&gt;
c] abaco2_similar (Assumes both infintesimals to be a function of x or y)&lt;br /&gt;
d] abaco2_unique_unknown (This is when, one infinitesimals is a function of x and the other to be a function of y)&lt;br /&gt;
e] abaco2_unique_general (This is a more general case of the above mentioned hint)&lt;br /&gt;
f] linear (Infinitesimals are of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax+%2B+by+%2B+c&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax + by + c&quot; class=&quot;latex&quot; title=&quot;ax + by + c&quot; /&gt;&lt;br /&gt;
g] bivariate (Infinitesimals are bivariate, more general form of the above mnetioned hint)&lt;br /&gt;
h] function_sum (When the infinitesimals are the sum of two functions)&lt;br /&gt;
i] chi (Finds a polynomial &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\chi&quot; class=&quot;latex&quot; title=&quot;\chi&quot; /&gt; , which helps in calculating the infinitesimals directly)&lt;/p&gt;
&lt;p&gt;3] Added a function&lt;strong&gt; checkinfsol &lt;/strong&gt;, which helps in checking if the infinitesimals are the actual solutions to the PDE.&lt;/p&gt;
&lt;p&gt;As far as this week went, I couldn’t do much but I managed to add a hint which helps in solving Linear PDE’s with variable coefficients. The general form of such a PDE is&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%28x%2C+y%29%5Cfrac%7B%5Cpartial+u%7D%7B%5Cpartial+x%7D+%2B+b%28x%2C+y%29%5Cfrac%7B%5Cpartial+u%7D%7B%5Cpartial+y%7D+%2B+c%28x%2C+y%29u%28x%2C+y%29+%3D+d%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a(x, y)\frac{\partial u}{\partial x} + b(x, y)\frac{\partial u}{\partial y} + c(x, y)u(x, y) = d(x, y)&quot; class=&quot;latex&quot; title=&quot;a(x, y)\frac{\partial u}{\partial x} + b(x, y)\frac{\partial u}{\partial y} + c(x, y)u(x, y) = d(x, y)&quot; /&gt; , where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%28x%2C+y%29%2C+b%28x%2C+y%29%2C+c%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a(x, y), b(x, y), c(x, y)&quot; class=&quot;latex&quot; title=&quot;a(x, y), b(x, y), c(x, y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=d%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;d(x, y)&quot; class=&quot;latex&quot; title=&quot;d(x, y)&quot; /&gt; are arbitrary functions in x and y.  This can be done using the method of characteristics. However a simpler way, according to a paper that I skimmed through is, to convert the PDE into an ODE of one variable. The change of coordinates is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; is the constant in the solution of the differential equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+%5Cfrac%7Bb%7D%7Ba%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx} = \frac{b}{a}&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx} = \frac{b}{a}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = x&quot; class=&quot;latex&quot; title=&quot;\eta = x&quot; /&gt; (I don’t know why surely though) is selected such that the Jacobian doesn’t become zero. This is the Pull request, &lt;a href=&quot;https://github.com/sympy/sympy/pull/2346&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2346&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TODO’s for this week&lt;/p&gt;
&lt;p&gt;1. Get the heuristics PR merged.&lt;br /&gt;
2. Try integrating the PDE hint with the ODE hint, (I can foresee a few problems here)&lt;/p&gt;
&lt;p&gt;I guess that’s it. Cheers to a new life.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/697/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/697/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=697&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 04 Aug 2013 07:51:25 +0000</pubDate>
</item>
<item>
	<title>Ondřej Čertík: How to support both Python 2 and 3</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-6568744196982634289.post-2033603696449441388</guid>
	<link>http://ondrejcertik.blogspot.com/2013/08/how-to-support-both-python-2-and-3.html</link>
	<description>&lt;p&gt;I'll start with the conclusion: making backwards incompatible version of a language is a terrible idea, and it was bad a mistake. This mistake was somewhat corrected over the years by eventually adding features to both Python 2.7 and 3.3 that actually allow to run a single code base on both Python versions --- which, as I show below, was discouraged by both Guido and the official Python documents (though the latest &lt;a href=&quot;http://docs.python.org/dev/howto/pyporting.html&quot;&gt;docs&lt;/a&gt; mention it)... Nevertheless, a single code base fixes pretty much all the problems and it actually is fun to use Python again. The rest of this post explains my conclusion in great detail. My hope is that it will be useful to  other Python projects to provide tips and examples how to support both Python 2 and 3, as well as to future language designers to keep languages backwards compatible.&lt;/p&gt; &lt;p&gt;When Python 3.x got released, it was pretty much a new language, backwards incompatible with Python 2.x, as it was not possible to run the same source code in both versions. I was extremely unhappy about this situation, because I simply didn't have time to port all my Python code to a new language.&lt;/p&gt; &lt;p&gt;I read the &lt;a href=&quot;http://www.python.org/dev/peps/pep-3000/#compatibility-and-transition&quot;&gt;official documentation&lt;/a&gt; about how the transition should be done, quoting:&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;You should have excellent unit tests with close to full coverage.&lt;/p&gt;     &lt;ol&gt;  &lt;li&gt;Port your project to Python 2.6.&lt;/li&gt;  &lt;li&gt;Turn on the Py3k warnings mode.&lt;/li&gt;  &lt;li&gt;Test and edit until no warnings remain.&lt;/li&gt;  &lt;li&gt;Use the 2to3 tool to convert this source code to 3.0 syntax. Do not manually edit the output!&lt;/li&gt;  &lt;li&gt;Test the converted source code under 3.0.&lt;/li&gt;  &lt;li&gt;If problems are found, make corrections to the 2.6 version of the source code and go back to step 3.&lt;/li&gt;  &lt;li&gt;When it's time to release, release separate 2.6 and 3.0 tarballs (or whatever archive form you use for releases).&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt; &lt;p&gt;I've also read Guido's blog &lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=208549&quot;&gt;post&lt;/a&gt;, which repeats the above list and adds an encouraging comment:&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;Python 3.0 will break backwards compatibility. Totally. We're not even aiming for a specific common subset.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;In other words, one has to maintain a Python 2.x code base, then run &lt;code&gt;2to3&lt;/code&gt; tool to get it converted. If you want to develop using Python 3.x, you can't, because all code must be developed using 2.x. As to the actual porting, Guido says in the above post:&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;If the conversion tool and the forward compatibility features in Python 2.6 work out as expected, steps (2) through (6) should not take much more effort than the typical transition from Python 2.x to 2.(x+1).&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;So sometime in 2010 or 2011 I started porting &lt;a href=&quot;http://sympy.org&quot;&gt;SymPy&lt;/a&gt;, which is now a pretty large code base (&lt;code&gt;sloccount&lt;/code&gt; says over 230,000 lines of code, and in January 2010 it said almost 170,000 lines). I remember spending a few full days on it, and I just gave up, because it wasn't just changing a few things, but pretty fundamental things inside the code base, and one cannot just do it half-way, one has to get all the way through and then polish it up. We ended up using one full Google Summer of Code project for it, you can read the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2011-Report-Vladimir-Peric%3A-Porting-to-Python-3&quot;&gt;final report&lt;/a&gt;. I should mention that we use metaclasses and other things, that make such porting harder. Conclusion: this was definitely not &quot;the typical transition from Python 2.x to 2.(x+1)&quot;.&lt;/p&gt; &lt;p&gt;Ok, after months of hard work by a lot of people, we finally have a Python 2.x code base that can be translated using the &lt;code&gt;2to3&lt;/code&gt; tool and it works and tests pass in Python 3.x.&lt;/p&gt; &lt;p&gt;The next problem is that Python 3.x is pretty much like a ghetto -- you can use it as a user, but you can't develop in it. The &lt;code&gt;2to3&lt;/code&gt; translation takes over 5 minutes on my laptop, so any interactivity is gone. It is true that the tool can cache results, so the next pass is somewhat faster, but in practice this still turns out to be much much worse than any compilation of C or Fortran programs (done for example with &lt;code&gt;cmake&lt;/code&gt;), both in terms of time and in terms of robustness. And I am not even talking about pip &lt;a href=&quot;https://github.com/pypa/pip/issues/701&quot;&gt;issues&lt;/a&gt; or setup.py &lt;a href=&quot;https://github.com/sympy/sympy/pull/2262&quot;&gt;issues&lt;/a&gt; regarding calling &lt;code&gt;2to3&lt;/code&gt;. What a big mess... Programming should be fun, but this is not fun.&lt;/p&gt; &lt;p&gt;I'll be honest, this situation killed a lot of my enthusiasm for Python as a platform. I learned modern Fortran in the meantime and with admiration I noticed that it still compiles old F77 programs without modification and I even managed to compile a 40 year old pre-F77 code with just minimal modifications (I had to port the code to F77). Yet modern Fortran is pretty much a completely different language, with all the fancy features that one would want. Together with my colleagues I created a &lt;a href=&quot;http://fortran90.org&quot;&gt;fortran90.org&lt;/a&gt; website, where you can compare Python/NumPy side by side with modern Fortran, it's pretty much 1:1 translation and a similar syntax (for numerical code), except that you need to add types of course. Yet Fortran is fully backwards compatible. What a pleasure to work with!&lt;/p&gt; &lt;p&gt;Fast forward to last week. A heroic effort by &lt;a href=&quot;https://github.com/flacjacket&quot;&gt;Sean Vig&lt;/a&gt; who ported SymPy to single code base (&lt;a href=&quot;https://github.com/sympy/sympy/pull/2318&quot;&gt;#2318&lt;/a&gt;) was merged. Earlier this year similar pull requests by other people have converted NumPy (&lt;a href=&quot;https://github.com/numpy/numpy/pull/3178&quot;&gt;#3178&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3191&quot;&gt;#3191&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3201&quot;&gt;#3201&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3202&quot;&gt;#3202&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3203&quot;&gt;#3203&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3205&quot;&gt;#3205&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3208&quot;&gt;#3208&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3216&quot;&gt;#3216&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3223&quot;&gt;#3223&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3226&quot;&gt;#3226&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3227&quot;&gt;#3227&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3231&quot;&gt;#3231&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3232&quot;&gt;#3232&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3235&quot;&gt;#3235&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3236&quot;&gt;#3236&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3237&quot;&gt;#3237&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3238&quot;&gt;#3238&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3241&quot;&gt;#3241&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3242&quot;&gt;#3242&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3244&quot;&gt;#3244&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3245&quot;&gt;#3245&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3248&quot;&gt;#3248&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3249&quot;&gt;#3249&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3257&quot;&gt;#3257&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3266&quot;&gt;#3266&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3281&quot;&gt;#3281&lt;/a&gt;, &lt;a href=&quot;https://github.com/numpy/numpy/pull/3191&quot;&gt;#3191&lt;/a&gt;, ...) and SciPy (&lt;a href=&quot;https://github.com/scipy/scipy/pull/397&quot;&gt;#397&lt;/a&gt;) codes as well. Now all these projects have just one code base and it works in all Python versions (2.x and 3.x) without the need to call the &lt;code&gt;2to3&lt;/code&gt; tool.&lt;/p&gt; &lt;p&gt;Having a single code base, programming in Python is fun again. You can choose any Python version, be it 2.x or 3.x, and simply submit a patch. The patch is then tested using &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis-CI&lt;/a&gt;, so that it works in all Python versions. Installation has been simplified (no need to call any &lt;code&gt;2to3&lt;/code&gt; tools and no more hacks to get &lt;code&gt;setup.py&lt;/code&gt; working).&lt;/p&gt; &lt;p&gt;In other words, this is how it should be, that you write your code once, and you can use any supported language version to run it/compile it, or develop in. But for some reason, this obvious solution has been discouraged by Guido and other Python documents, as seen above. I just looked up the latest official Python &lt;a href=&quot;http://docs.python.org/dev/howto/pyporting.html&quot;&gt;docs&lt;/a&gt;, and that one is not upfront negative about a single code base. But it still does not recommend this approach as &lt;em&gt;the&lt;/em&gt; one. So let me fix that: I do recommend a single code base as &lt;em&gt;the&lt;/em&gt; solution.&lt;/p&gt; &lt;p&gt;The newest Python documentation from the last paragraph also mentions&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;Regardless of which approach you choose, porting is not as hard or time-consuming as you might initially think.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Well, I encourage you to browse through the pull requests that I linked to above for SymPy, NumPy or SciPy. I think it is very time consuming, and that's just converting from &lt;code&gt;2to3&lt;/code&gt; to single code base, which is the easy part. The hard part was to actually get SymPy to work with Python 3 (as I discussed above, that took couple months of hard work), and I am pretty sure it was pretty hard to port NumPy and SciPy as well.&lt;/p&gt; &lt;p&gt;The docs also says:&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;It /single code base/ does lead to code that is not entirely idiomatic Python&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;That is true, but our experience has been, that with every Python version that we drop, we also delete lots of ugly hacks from our code base. This has been true for dropping support for 2.3, 2.4 and 2.5, and I expect it will also be true for dropping 2.6 and especially 2.7, when we can simply use the Python 3.x syntax. So not a big deal overall.&lt;/p&gt; &lt;p&gt;To sum this blog post up, as far as I am concerned, pretty much all the problems with supporting Python 2.x and 3.x are fixed by having a single code base. You can read the pull requests above to see how to implemented things (like metaclasses, and other fancy stuff...). Python is still quite the same language, you write your code, you use a Python version of your choice and things will just work. Not a big deal overall. The official documentation should be fixed to recommend this approach, and deprecate the other approaches.&lt;/p&gt; &lt;p&gt;I think that Python is great and I hope it will be used more in the future.&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;Written with &lt;a href=&quot;http://benweet.github.io/stackedit/&quot;&gt;StackEdit&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
	<pubDate>Sun, 04 Aug 2013 07:48:05 +0000</pubDate>
	<author>noreply@blogger.com (Ondřej Čertík)</author>
</item>
<item>
	<title>Thilina Rathnayake: Holzer reduction and some modifications</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=169</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/08/04/169/</link>
	<description>&lt;p&gt;Hi All, This week I managed to implement Holzer’s reduction and change the behaviour of DE module a little bit.  First let’s take a look at Holzer’s reduction.&lt;/p&gt;
&lt;h5&gt;Holzer Reduction&lt;/h5&gt;
&lt;p&gt;Holzer reduction is concerned with reducing solutions of the quadratic ternary nonrmal equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%2Bcz%5E2+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + by^2 +cz^2 = 0&quot; class=&quot;latex&quot; title=&quot;ax^2 + by^2 +cz^2 = 0&quot; /&gt;. The Holzer’s theorem says that if the above equation is solvable there is always a solution &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z)&quot; class=&quot;latex&quot; title=&quot;(x, y, z)&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x+%5Cleq+%5Csqrt%7B%7Cbc%7C%7D%2C+y+%5Cleq+%5Csqrt%7B%7Cac%7C%7D%2C+z+%5Cleq+%5Csqrt%7B%7Cab%7C%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x \leq \sqrt{|bc|}, y \leq \sqrt{|ac|}, z \leq \sqrt{|ab|}&quot; class=&quot;latex&quot; title=&quot;x \leq \sqrt{|bc|}, y \leq \sqrt{|ac|}, z \leq \sqrt{|ab|}&quot; /&gt;. The algorithm for this is explained in [1]. Below is a rough sketch. Before applying the algorithm we have to make &lt;img src=&quot;http://s0.wp.com/latex.php?latex=abc&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;abc&quot; class=&quot;latex&quot; title=&quot;abc&quot; /&gt; square free and we assume that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%2C+b&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a, b&quot; class=&quot;latex&quot; title=&quot;a, b&quot; /&gt; positive and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c&quot; class=&quot;latex&quot; title=&quot;c&quot; /&gt; is negative(We can always select &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%2C+b%2C+c&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a, b, c&quot; class=&quot;latex&quot; title=&quot;a, b, c&quot; /&gt; in such a way that this is the case). Suppose there is a solution &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x_%7B0%7D%2C+y_%7B0%7D%2C+z_%7B0%7D%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x_{0}, y_{0}, z_{0})&quot; class=&quot;latex&quot; title=&quot;(x_{0}, y_{0}, z_{0})&quot; /&gt; that is not Holzer reduced.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c&quot; class=&quot;latex&quot; title=&quot;c&quot; /&gt; is even set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k+%3D+c+%2F2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k = c /2&quot; class=&quot;latex&quot; title=&quot;k = c /2&quot; /&gt; and let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=u_%7B0%7D%2C+v_%7B0%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;u_{0}, v_{0}&quot; class=&quot;latex&quot; title=&quot;u_{0}, v_{0}&quot; /&gt; be any solution to the equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k+%3D+uy_%7B0%7D+-+vx_%7B0%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k = uy_{0} - vx_{0}&quot; class=&quot;latex&quot; title=&quot;k = uy_{0} - vx_{0}&quot; /&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c&quot; class=&quot;latex&quot; title=&quot;c&quot; /&gt; is odd, c is odd let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k+%3D+2c&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k = 2c&quot; class=&quot;latex&quot; title=&quot;k = 2c&quot; /&gt; and  let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=u_%7B0%7D%2C+v_%7B0%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;u_{0}, v_{0}&quot; class=&quot;latex&quot; title=&quot;u_{0}, v_{0}&quot; /&gt; be any solution to the equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c+%3D+uy_%7B0%7D+-+vx_%7B0%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c = uy_{0} - vx_{0}&quot; class=&quot;latex&quot; title=&quot;c = uy_{0} - vx_{0}&quot; /&gt;.&lt;/li&gt;
&lt;li&gt;Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=w&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;w&quot; class=&quot;latex&quot; title=&quot;w&quot; /&gt; be the nearest integer to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-%28aux_%7B0%7D+%2B+bvy_%7B0%7D%29%2F%28cz_%7B0%7D%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;-(aux_{0} + bvy_{0})/(cz_{0})&quot; class=&quot;latex&quot; title=&quot;-(aux_{0} + bvy_{0})/(cz_{0})&quot; /&gt;.&lt;/li&gt;
&lt;li&gt;Then the following expressions for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%2C+y%2C+z&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x, y, z&quot; class=&quot;latex&quot; title=&quot;x, y, z&quot; /&gt; gives a solution such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z+%3C+z_%7B0%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;z &amp;lt; z_{0}&quot; class=&quot;latex&quot; title=&quot;z &amp;lt; z_{0}&quot; /&gt;.&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=x+%3D+%28x_%7B0%7D%28au_%7B0%7D%5E2+%2B+bv_%7B0%7D%5E2+%2B+cw%5E2%29+-+2u_%7B0%7D%28au_%7B0%7Dx_%7B0%7D+%2B+bv_%7B0%7Dy_%7B0%7D+%2B+cwz_%7B0%7D%29%29+%2F+k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x = (x_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2u_{0}(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0})) / k&quot; class=&quot;latex&quot; title=&quot;x = (x_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2u_{0}(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0})) / k&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=y+%3D+%28y_%7B0%7D%28au_%7B0%7D%5E2+%2B+bv_%7B0%7D%5E2+%2B+cw%5E2%29+-+2v_%7B0%7D%28au_%7B0%7Dx_%7B0%7D+%2B+bv_%7B0%7Dy_%7B0%7D+%2B+cwz_%7B0%7D%29%29+%2F+k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y = (y_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2v_{0}(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0})) / k&quot; class=&quot;latex&quot; title=&quot;y = (y_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2v_{0}(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0})) / k&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=z+%3D+%28z_%7B0%7D%28au_%7B0%7D%5E2+%2B+bv_%7B0%7D%5E2+%2B+cw%5E2%29+-+2w%28au_%7B0%7Dx_%7B0%7D+%2B+bv_%7B0%7Dy_%7B0%7D+%2B+cwz_%7B0%7D%29%29%29+%2F+k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;z = (z_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2w(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0}))) / k&quot; class=&quot;latex&quot; title=&quot;z = (z_{0}(au_{0}^2 + bv_{0}^2 + cw^2) - 2w(au_{0}x_{0} + bv_{0}y_{0} + cwz_{0}))) / k&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Continuing this manner one would find a solution such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z_%7B0%7D+%5Cleq+%5Csqrt%7B%7Cab%7C%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;z_{0} \leq \sqrt{|ab|}&quot; class=&quot;latex&quot; title=&quot;z_{0} \leq \sqrt{|ab|}&quot; /&gt;.&lt;/p&gt;
&lt;h5&gt;Some changes to DE module&lt;/h5&gt;
&lt;p&gt;I made some changes to the structure of DE module too. Now every type of equation returns a tuple ordered according to the sorted order of variable names used in the equation. Quadratic ternary forms and linear equations returns only one tuple, the parametric solution,  and quadratic binary equation returns a set of tuples. This format may be changed in future. The most important change I did to the DE module is that, now before solving any given equation, DE module checks whether that can be factored and If so, solves those factors separately. For example, given the equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y%5E2+-+7xy+%2B+4yz+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y^2 - 7xy + 4yz = 0&quot; class=&quot;latex&quot; title=&quot;y^2 - 7xy + 4yz = 0&quot; /&gt;, it will solve &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y = 0&quot; class=&quot;latex&quot; title=&quot;y = 0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y-7x%2B4z+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y-7x+4z = 0&quot; class=&quot;latex&quot; title=&quot;y-7x+4z = 0&quot; /&gt; separately and combine those results. Also I managed to implement a general method for testing that would check whether the solutions returned by various methods satisfy the original equation. So I hope to get rid of the other redundant methods like check_ternary_quadratic(), solution_ok_quadratic() in the test file. A thank should go to Aaron for proposing such a methodology.&lt;/p&gt;
&lt;h5&gt;Future work&lt;/h5&gt;
&lt;p&gt;Pernici has pointed out that some of the solution methodologies in quadratic binary form can be improved so that they take less time. He also has done a great job in implementing the solutions for quadratic congruence &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+%5Cequiv+a+%28mod+%5C+b%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 \equiv a (mod \ b)&quot; class=&quot;latex&quot; title=&quot;x^2 \equiv a (mod \ b)&quot; /&gt;. I hope to use those results when his PR gets merged into master. He proposed a method due to cornacchia to improve the speed of the solutions but after a little surveying, I found that implementing solutions for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%3D+N&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + bxy + cy^2 = N&quot; class=&quot;latex&quot; title=&quot;ax^2 + bxy + cy^2 = N&quot; /&gt; can be used to improve the speed. Current algorithms for solving binary quadratic equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%2B+dx+%2B+ey+%2B+f+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + bxy + cy^2 + dx + ey + f = 0&quot; class=&quot;latex&quot; title=&quot;ax^2 + bxy + cy^2 + dx + ey + f = 0&quot; /&gt; employs a general solving method so it miss out some speed enhancements for the special case &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%3D+N&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + bxy + cy^2 = N&quot; class=&quot;latex&quot; title=&quot;ax^2 + bxy + cy^2 = N&quot; /&gt; . My plan is if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%2B+dx+%2B+ey+%2B+f+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + bxy + cy^2 + dx + ey + f = 0&quot; class=&quot;latex&quot; title=&quot;ax^2 + bxy + cy^2 + dx + ey + f = 0&quot; /&gt; can be converted to the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%3D+N&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + bxy + cy^2 = N&quot; class=&quot;latex&quot; title=&quot;ax^2 + bxy + cy^2 = N&quot; /&gt;, then solve it using methods for that, otherwise apply the general method. I found a good reference [2] for this. A huge thank should go to Pernici for pointing out the improvements.&lt;/p&gt;
&lt;h5&gt;References&lt;/h5&gt;
&lt;p&gt;[1] Efficient Solution of Rational Conices, J. E. Cremona and D. Rusin, Mathematics of Computation, Volume 00, Number 0.&lt;br /&gt;
[2] Binary Quadratic Forms: An Algorithmic Approach, J. Buchmann and U. Vollmer, Springer-Verlag, Berlin, Heidelberg, 2007.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/169/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/169/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=169&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 04 Aug 2013 04:49:10 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: Week 7</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=77</guid>
	<link>http://meclark256.wordpress.com/2013/08/01/week-7/</link>
	<description>&lt;p&gt;(Or maybe week 6.  See last week’s post).&lt;/p&gt;
&lt;p&gt;This week, I’ve started one new PR (&lt;a href=&quot;https://github.com/sympy/sympy/pull/2344&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2344&lt;/a&gt;) which includes the Dynkin diagram functionality for all classes.  I had PR 2297 merged, and I’m pretty sure I’ve fixed the merge conflicts for PR 2337 (which is the Cartan matrix stuff).&lt;/p&gt;
&lt;p&gt;Talking with David this week, he suggested that I include more technical information and sources in my code, to help explain some of the concepts in Lie algebras.  I thought this was a very good idea, and so I’ve started writing some more detailed docstrings, including sources.  &lt;/p&gt;
&lt;p&gt;Additionally, I changed some of the classes in my code so that instead of using __init__ they use __new__ instead, as is the norm in the sympy code base.  &lt;/p&gt;
&lt;p&gt;Currently, I am contemplating the root system class I want to write, and what it should contain/accomplish.   First off, it will need to generate all the simple roots for a given Lie algebra.  This is easy enough to accomplish, using functions from the individual classes, though I need to figure out how exactly I want to go about importing data from things type type_a.py, type_b.py, etc.  I think that it would be best to store these simple roots in a dictionary, with the keys being like, alpha1, alpha2, etc and then the values being vector representations of the roots.&lt;/p&gt;
&lt;p&gt;I’d also like to have an addition method for adding simple roots together, and as David suggests, a method which would only add roots if the sum was a root.   &lt;/p&gt;
&lt;p&gt;I’m still internally debating if I want to have the RootSystem class hold all the roots (well, hold all the positive roots, as a reflection would then generate the negative roots) or not.  I think it may make some of the above methods simpler, but then it might also just be overkill.  &lt;/p&gt;
&lt;p&gt;I’ll also have a method returns the root space of a given root system, which is just the span of all the simple roots.  &lt;/p&gt;
&lt;p&gt;So, yeah, that’s what I’m thinking and planning at the moment.  Hopefully I’ll be starting this stuff this weekend.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/77/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/77/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=77&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 01 Aug 2013 21:16:28 +0000</pubDate>
</item>
<item>
	<title>Tarun Gaba: GSoC Report : Week 5, 6</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7526836182390500993.post-4220162376949001608</guid>
	<link>http://tarun-gaba.blogspot.com/2013/07/gsoc-report-week-5-6.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;The last two weeks have been a little too hectic. I have been working on writing the source code for classes from Python side, and they are nearing the completion.&lt;br /&gt;&lt;br /&gt;This is the week for midterm evaluations, and as per the timeline, I was supposed to completely finish the python part by now. Although most of the stuff is complete, I have one or two days work to be left to be done.&lt;br /&gt;I have finished with Shape, and VisualizationFrame classes. Also yesterday I just finished writing complete code for Camera classes.&lt;br /&gt;There were two instances for Camera, one is PerspectiveCamera, and other is Orthographic Camera.&lt;br /&gt;&lt;br /&gt;The Camera class is inherited from VisualizationFrame class, which would make it inherit the generation of simulation data. This has very much utility for the fact that we can attach a camera to any moving object in our system, and hence we have  moving cameras, which is an aide for the effective visualizations.&lt;br /&gt;&lt;br /&gt;Another approach we have been thinking upon is the possibility of applying multiple cameras to a system, which can effectively be tied upon different moving objects. and they can be switched by a keystroke in the browser.&lt;br /&gt;It would be kinda cool to see an animation from one camera, and then we can switch it to a different camera, in between the animation, without any extra pain, with a keystroke.&lt;br /&gt;&lt;br /&gt;Anyways the priority is to get the basic functionality up, and then we can add these and many other features, as time permits.&lt;br /&gt;&lt;br /&gt;Another concept which requires a little brainstorming is the Lighting. I am thinking of letting user choose where and what type of lights they want in their system.&lt;br /&gt;&lt;br /&gt;These lights can be added in Scene class. and most probably they can also be inherited from VisualizationFrame class, giving them also the capability of motion, rather than static lights.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 31 Jul 2013 14:44:03 +0000</pubDate>
	<author>noreply@blogger.com (TARUN GABA)</author>
</item>
<item>
	<title>Thilina Rathnayake: Descent method with gaussian reduction.</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=154</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/07/29/descent-method-with-gaussian-reduction/</link>
	<description>&lt;p&gt;Sorry for a very late blog post, I had a really busy week and finally I managed to find sometime to write about the progress I made in the last week. I implemented an improved version of the descent method which uses gaussian reduction. I found this algorithm in [1]. Here is a sketch of the algorithm.&lt;/p&gt;
&lt;h4&gt;descent(a, b)&lt;/h4&gt;
&lt;p&gt;1. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7Ca%7C+%3E+%7Cb%7C&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;|a| &amp;gt; |b|&quot; class=&quot;latex&quot; title=&quot;|a| &amp;gt; |b|&quot; /&gt; then swap &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a&quot; class=&quot;latex&quot; title=&quot;a&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;b&quot; class=&quot;latex&quot; title=&quot;b&quot; /&gt;, solve the resulting equation, then swap &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;z&quot; class=&quot;latex&quot; title=&quot;z&quot; /&gt; in the solution obtained.&lt;br /&gt;
2. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b+%3D+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;b = 1&quot; class=&quot;latex&quot; title=&quot;b = 1&quot; /&gt; then set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%281%2C+1%2C+0%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z) = (1, 1, 0)&quot; class=&quot;latex&quot; title=&quot;(x, y, z) = (1, 1, 0)&quot; /&gt; and stop.&lt;br /&gt;
3. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%3D+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a = 1&quot; class=&quot;latex&quot; title=&quot;a = 1&quot; /&gt;  then set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%281%2C+0%2C+1%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z) = (1, 0, 1)&quot; class=&quot;latex&quot; title=&quot;(x, y, z) = (1, 0, 1)&quot; /&gt; and stop.&lt;br /&gt;
4. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b+%3D+-1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;b = -1&quot; class=&quot;latex&quot; title=&quot;b = -1&quot; /&gt; there is no solution (since &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a&quot; class=&quot;latex&quot; title=&quot;a&quot; /&gt; must be &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;-1&quot; class=&quot;latex&quot; title=&quot;-1&quot; /&gt;).&lt;br /&gt;
5. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b+%3D+-a&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;b = -a&quot; class=&quot;latex&quot; title=&quot;b = -a&quot; /&gt; then set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%280%2C+1%2C+1%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z) = (0, 1, 1)&quot; class=&quot;latex&quot; title=&quot;(x, y, z) = (0, 1, 1)&quot; /&gt; and stop.&lt;br /&gt;
6. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b+%3D+a&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;b = a&quot; class=&quot;latex&quot; title=&quot;b = a&quot; /&gt; then let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x_%7B1%7D%2C+y_%7B1%7D%2C+z_%7B1%7D%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x_{1}, y_{1}, z_{1})&quot; class=&quot;latex&quot; title=&quot;(x_{1}, y_{1}, z_{1})&quot; /&gt; be a solution of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=X_%7B1%7D%5E2+%2B+Z_%7B1%7D%5E2+%3D+aY_%7B1%7D%5E2+&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;X_{1}^2 + Z_{1}^2 = aY_{1}^2 &quot; class=&quot;latex&quot; title=&quot;X_{1}^2 + Z_{1}^2 = aY_{1}^2 &quot; /&gt;, set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%28ay_%7B1%7D%2C+x_%7B1%7D%2C+z_%7B1%7D%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z) = (ay_{1}, x_{1}, z_{1})&quot; class=&quot;latex&quot; title=&quot;(x, y, z) = (ay_{1}, x_{1}, z_{1})&quot; /&gt; and stop.&lt;br /&gt;
7. Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=w&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;w&quot; class=&quot;latex&quot; title=&quot;w&quot; /&gt; be a solution to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+%5Cequiv+a+%28mod+%5C+b%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 \equiv a (mod \ b)&quot; class=&quot;latex&quot; title=&quot;x^2 \equiv a (mod \ b)&quot; /&gt;. with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=w+%5Cleq+%7Cb%7C%2F2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;w \leq |b|/2&quot; class=&quot;latex&quot; title=&quot;w \leq |b|/2&quot; /&gt;, and set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x_%7B0%7D%2C+z_%7B0%7D%29+%3D+%28w%2C+1%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x_{0}, z_{0}) = (w, 1)&quot; class=&quot;latex&quot; title=&quot;(x_{0}, z_{0}) = (w, 1)&quot; /&gt;, so that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7B0%7D%5E2+-+az_%7B0%7D%5E2+%5Cequiv+0+%28mod+%5C+b%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_{0}^2 - az_{0}^2 \equiv 0 (mod \ b)&quot; class=&quot;latex&quot; title=&quot;x_{0}^2 - az_{0}^2 \equiv 0 (mod \ b)&quot; /&gt;.&lt;br /&gt;
8. Use&lt;strong&gt;&lt;em&gt; lattice reduction&lt;/em&gt;&lt;/strong&gt; to find a new nontrivial solution &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x_%7B0%7D%2C+z_%7B0%7D%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x_{0}, z_{0})&quot; class=&quot;latex&quot; title=&quot;(x_{0}, z_{0})&quot; /&gt; to the congruence &lt;img src=&quot;http://s0.wp.com/latex.php?latex=X%5E2+-+aZ%5E2+%5Cequiv+0+%28mod+%5C+b%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;X^2 - aZ^2 \equiv 0 (mod \ b)&quot; class=&quot;latex&quot; title=&quot;X^2 - aZ^2 \equiv 0 (mod \ b)&quot; /&gt; with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7B0%7D%5E2+%2B+%7Ca%7Cz_%7B0%7D%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_{0}^2 + |a|z_{0}^2&quot; class=&quot;latex&quot; title=&quot;x_{0}^2 + |a|z_{0}^2&quot; /&gt; as small as possible.&lt;br /&gt;
9. Set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t+%3D+%28x_%7B0%7D%5E2+-+az_%7B0%7D%5E2%29%2Fb+&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;t = (x_{0}^2 - az_{0}^2)/b &quot; class=&quot;latex&quot; title=&quot;t = (x_{0}^2 - az_{0}^2)/b &quot; /&gt; and write &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t+%3D+t_%7B1%7Dt_%7B2%7D%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;t = t_{1}t_{2}^2&quot; class=&quot;latex&quot; title=&quot;t = t_{1}t_{2}^2&quot; /&gt; with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t_%7B1%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;t_{1}&quot; class=&quot;latex&quot; title=&quot;t_{1}&quot; /&gt; square-free.&lt;br /&gt;
10. Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x_%7B1%7D%2C+y_%7B1%7D%2C+z_%7B1%7D%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x_{1}, y_{1}, z_{1})&quot; class=&quot;latex&quot; title=&quot;(x_{1}, y_{1}, z_{1})&quot; /&gt; be a solution to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=X%5E2+-+aZ%5E2+%3D+t_%7B1%7DY%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;X^2 - aZ^2 = t_{1}Y^2&quot; class=&quot;latex&quot; title=&quot;X^2 - aZ^2 = t_{1}Y^2&quot; /&gt; then&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%28x_%7B0+%7Dx_%7B1%7D+%2B+az_%7B0%7Dz_%7B1%7D%2C+t_%7B1%7Dt_%7B2%7Dy_%7B1%7D%2C+z_%7B0%7Dx_%7B1%7D+%2B+x_%7B0%7Dz_%7B1%7D%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z) = (x_{0 }x_{1} + az_{0}z_{1}, t_{1}t_{2}y_{1}, z_{0}x_{1} + x_{0}z_{1})&quot; class=&quot;latex&quot; title=&quot;(x, y, z) = (x_{0 }x_{1} + az_{0}z_{1}, t_{1}t_{2}y_{1}, z_{0}x_{1} + x_{0}z_{1})&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I spent a lot of time finding an algorithm for lattice reduction. There were generalized algorithms but I looked for something which is faster because we are concerned with vectors with two bases. I found  gaussian reduction algorithm in [2] which uses a method specific to this case.&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;p&gt;[1] .. Efficient Solution of Rational Conices, J. E. Cremona and D. Rusin, Mathematics of Computation, Volume 00, Number 0.&lt;br /&gt;
[2] .. Gaussian lattice Reduction [online]. Available: &lt;a href=&quot;http://home.ie.cuhk.edu.hk/~wkshum/wordpress/?p=404&quot; rel=&quot;nofollow&quot;&gt;http://home.ie.cuhk.edu.hk/~wkshum/wordpress/?p=404&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/154/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/154/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=154&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 29 Jul 2013 05:59:34 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: Sixth week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=222</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/07/28/sixth-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;This week I implemented most of the modular GCD algorithm for algebraic function fields [1], which I described in my last post. At the moment it works for univariate polynomials over algebraic extensions of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Q&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Q&quot; class=&quot;latex&quot; title=&quot;\mathbb Q&quot; /&gt;. Almost everything is in place to also calculate GCDs of polynomials over algebraic function fields, but at the moment there is no (easy) way to represent them, since there is no “&lt;code&gt;AlgebraicFunctionField&lt;/code&gt;” domain in sympy yet. However, if we wanted to compute the GCD of two polynomials &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%2C+g+%5Cin+%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle+%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f, g \in \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x]&quot; class=&quot;latex&quot; title=&quot;f, g \in \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x]&quot; /&gt; right now, we could compute their primitive associates &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ccheck+f%2C+%5Ccheck+g+%5Cin+%5Cmathbb+Z%5Bx%2C+t_1%2C+%5Cldots%2C+t_k%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\check f, \check g \in \mathbb Z[x, t_1, \ldots, t_k, z]&quot; class=&quot;latex&quot; title=&quot;\check f, \check g \in \mathbb Z[x, t_1, \ldots, t_k, z]&quot; /&gt; and the minimal polynomial in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bt_1%2C+%5Cldots%2C+t_k%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z[t_1, \ldots, t_k, z]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z[t_1, \ldots, t_k, z]&quot; /&gt; manually and then directly use the private function &lt;code&gt;_func_field_modgcd_m&lt;/code&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;So how to handle multivariate inputs? Van Hoeij and Monagan write that for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%2C+g+%5Cin+%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle+%5Bx_1%2C+%5Cldots%2C+x_n%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f, g \in \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_1, \ldots, x_n]&quot; class=&quot;latex&quot; title=&quot;f, g \in \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_1, \ldots, x_n]&quot; /&gt; we have to make three additional steps. First, we view &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g&quot; class=&quot;latex&quot; title=&quot;g&quot; /&gt; as univariate polynomials in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle+%5Bx_2%2C+%5Cldots%2C+x_n%5D%5Bx_1%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_2, \ldots, x_n][x_1]&quot; class=&quot;latex&quot; title=&quot;\mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_2, \ldots, x_n][x_1]&quot; /&gt; and calculate the GCD of their contents, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c_h&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;c_h&quot; class=&quot;latex&quot; title=&quot;c_h&quot; /&gt;. Here, we have to do multivariate GCD computations in one variable less. After dividing out &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c_h&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;c_h&quot; class=&quot;latex&quot; title=&quot;c_h&quot; /&gt;, we treat the variables &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_2%2C+%5Cldots%2C+x_n&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x_2, \ldots, x_n&quot; class=&quot;latex&quot; title=&quot;x_2, \ldots, x_n&quot; /&gt; as parameters, i.e. we view &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g&quot; class=&quot;latex&quot; title=&quot;g&quot; /&gt; as polynomials over &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%2C+x_2%2C+%5Cldots%2C+x_n%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Q(t_1, \ldots, t_k, x_2, \ldots, x_n)[z] / \langle m(z) \rangle&quot; class=&quot;latex&quot; title=&quot;\mathbb Q(t_1, \ldots, t_k, x_2, \ldots, x_n)[z] / \langle m(z) \rangle&quot; /&gt; and compute their univariate GCD &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt;. Finally, we divide out the content of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt;, which is again viewed as a polynomial in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle+%5Bx_2%2C+%5Cldots%2C+x_n%5D%5Bx_1%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_2, \ldots, x_n][x_1]&quot; class=&quot;latex&quot; title=&quot;\mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle [x_2, \ldots, x_n][x_1]&quot; /&gt;, and multiply it by the correct content &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c_h&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;c_h&quot; class=&quot;latex&quot; title=&quot;c_h&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Next week I plan to cover the multivariate case as well, write tests and documentation and clean up the code.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;[1] &lt;a href=&quot;http://www.cecm.sfu.ca/~mmonagan/papers/AFGCD.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.cecm.sfu.ca/~mmonagan/papers/AFGCD.pdf&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/222/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/222/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=222&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 28 Jul 2013 11:31:17 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: Half the “summer” gone by</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=666</guid>
	<link>http://manojbits.wordpress.com/2013/07/28/half-the-summer-gone-by/</link>
	<description>&lt;p&gt;Hello, before I blog about my SymPy work, its going to be an exciting new semester in college (I hope) , and a set of new interesting courses (or courses with interesting names atleast) to be bunked. Last semester, just flew away,  I have the faintest idea of what happened , and I’m just hoping this time, it wouldn’t be the same. The summer wasn’t any different, and I have no idea how it went by. I had thought maybe I could learn something other than my SymPy project, like revising my C concepts, or maybe basics of ML, but if there is anything that I suck at, it is definitely time management, for some strange reason I prefer to while away the entire mornings and afternoons, listening to music, on Quora, Facebook, and in the evenings when the guilty conscience of having done nothing pricks me, I start to write some SymPy code.  There are of course others things that I suck at, however this post is going to about my SymPy project and not about things that I suck at and don’t.&lt;/p&gt;
&lt;p&gt;Well poor jokes apart,  I guess this was the most productive week of my GSoC project (Was it something to do with the mid-term deadline? ). After numerous changes, I finally got my sphinx PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/2282&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2282&lt;/a&gt; and refactor PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/2286&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2286&lt;/a&gt; merged. Other than that I read five new heuristics that Raoul gave me, and pushed it to a single PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/2308&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2308&lt;/a&gt;. Since almost of all the algorithms are pretty straightforward, I’d just focus on the one that I found most interesting, and the one that I found well, not so interesting.&lt;/p&gt;
&lt;p&gt;1. &lt;strong&gt;Linear:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This one assumes &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; to be &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax+%2B+bf%28x%29+%2B+c&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax + bf(x) + c&quot; class=&quot;latex&quot; title=&quot;ax + bf(x) + c&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+to+be+fx+%2B+gf%28x%29+%2B+h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta to be fx + gf(x) + h&quot; class=&quot;latex&quot; title=&quot;\eta to be fx + gf(x) + h&quot; /&gt;, This is similar to the bivariate heuristic, except for the fact that, that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; need not be a rational function.  This would mean cases even in which the exponents are symbolic constants would satisfy this heuristic. Substituting, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; , the PDE is simplified to, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%2B+%28g+-+a%29h+-+bh%5E%7B2%7D+-+%28ax+%2B+by+%2B+c%29%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%28fx+%2B+gy+%2B+h%29%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f + (g - a)h - bh^{2} - (ax + by + c)\frac{\partial h}{\partial x} - (fx + gy + h)\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;f + (g - a)h - bh^{2} - (ax + by + c)\frac{\partial h}{\partial x} - (fx + gy + h)\frac{\partial h}{\partial y}&quot; /&gt;  And as usual. grouping the coefficients and by using solve, one could get the value of the constants, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%2C+b%2C+c%2C+f%2C+g%2C+h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a, b, c, f, g, h&quot; class=&quot;latex&quot; title=&quot;a, b, c, f, g, h&quot; /&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;strong&gt;A&lt;/strong&gt;&lt;strong&gt;baco2_unique_general&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;This algorithm seems like these huge formulae in my mechanical engineering exams (that nobody has any idea how it came into place, in which you just substitute things and get the answer, (I get most of them wrong anyway). This gist would explain the algorithm better than me, &lt;a href=&quot;https://gist.github.com/Manoj-Kumar-S/6095045&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/Manoj-Kumar-S/6095045&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I guess thats it for now. I am waiting for Sean to give his comments, before I can go any further in my project. Cheers.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/666/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/666/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=666&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 28 Jul 2013 07:28:57 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: GSoC Week 6: First half(almost) done</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-6303625907522831747</guid>
	<link>http://codesachin.blogspot.com/2013/07/gsoc-week-6-first-halfalmost-done.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;First, about the work done this week. It took me some time to set up my programming environment and get used to Ubuntu's interface. I fumbled around a bit messing up some things on the way, but now I can say I am quite comfortable...at least with the basics.&lt;br /&gt;For one, I got the docs for my work on the logic module merged into the master docs. Aaron also pointed me to the method for merging those changes with the &lt;a href=&quot;http://docs.sympy.org/dev/&quot;&gt;development version &lt;/a&gt; of the SymPy docs. I will try and get it done in a day or two, before I leave for my campus.&lt;br /&gt;Second, Gilbert and I submitted a PR to Prasoon's branch with some changes that we made to his code. Since the number of merge conflicts are high, he would most probably be merging the relevant parts manually.&lt;br /&gt;Third, I started working on the code for dyadics. Initially, I submitted a &lt;i&gt;slightly &lt;/i&gt;modified version of the earlier Dyadic class, but Gilbert soon made me realise that compatibility with SymPy's core would mean a lot more than just a few changes here and there. Sigh.&lt;br /&gt;So, I am now busy working on classes for dyadics, compatible with SymPy's global architecture-&lt;br /&gt;1) Dyadic(Expr), the super class - all operations and initializations will be handled from here&lt;br /&gt;2) BaseDyadic(Dyadic) - the class to represent basic components of dyadics, things like (R1.x|R2.y)&lt;br /&gt;3) DyadicAdd(Add, Dyadic) and DyadicMul(Mul, Dyadic) - additions and multiplications of dyadics&lt;br /&gt;&lt;br /&gt;The last two classes are a little shaky for now, and the code I have submitted at the PR at the time I write this makes it quite evident. Inspite of that, I have got the basic operations- add, sub, mul, div and some others like 'and' to work as expected(conceptually). To see how it looks as of now, you can see &lt;a href=&quot;http://pastebin.com/WxJ15ewk&quot;&gt;this&lt;/a&gt; (real SymPy session with mock arguments). However, it's quite obvious that getting these new classes to behave exactly according to SymPy's way of doing things and return accurate results is going to take quite some time, maybe a week more. Not to forget docs, doc examples and tests.&lt;br /&gt;&lt;br /&gt;Anyways, I can't believe I am almost at the end of the first half of my GSoC period. I have learnt *quite* a lot, well, that's obvious from my blog posts- not just vector math, but a bunch of Python as well. I am happy with the progress till now, though nothing has been merged yet. But well, Prasoon and my projects are such that when things &lt;i&gt;will &lt;/i&gt;get merged, a huge chunk will go in together.&lt;br /&gt;I plan to get the mechanics core done perfectly before I start with the EM module..and by 'done perfectly', I mean getting the main code merged, along with a lot of commentary-style documentation on the new module. I also have to enquire about putting deprecation signs on the old module- will have to consult the mailing list for this.&lt;br /&gt;&lt;br /&gt;As mentioned earlier, I will be moving to Goa on Tuesday, so that period is going to be quite busy with getting things in order @the insti. Then I can start working again.&lt;br /&gt;The mid-term GSoC evaluations will be done from 29th to 2nd of August, after which I will get my first big payment in 4-5 days :-)&lt;br /&gt;&lt;br /&gt;Thats all for now!&lt;br /&gt;Have a great week, and 'stay tuned' :-D.&lt;/div&gt;</description>
	<pubDate>Sat, 27 Jul 2013 18:32:15 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Mary Clark: Week 6</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=75</guid>
	<link>http://meclark256.wordpress.com/2013/07/25/week-6/</link>
	<description>&lt;p&gt;Or is it week 5? I’m no longer sure. My ability to count has decreased dramatically as my number of years studying mathematics has increased.&lt;/p&gt;
&lt;p&gt;Excitingly, this week I’ve have two PRs merged, 2259 and 2237. Other than that, this week has been fairly slow. I’ve been battling illness and haven’t accomplished overly much. I’ve generally been cleaning up code for all the types (type_A and type_B are done, since those were in the PRs), and I’ve made definite progress with types C-F. I also think I’ve figured out the ascii art for the Dynkin diagrams.&lt;/p&gt;
&lt;p&gt;To do the Dynkin diagrams, I learnt about the join function for strings in python, which made things 100 times easier. For instance, the code to generate the Dynkin diagram of A_n is:&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; diag = “—”.join(“0″ for i in range(1, n+1)) + “\n”&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; diag += ” “.join(str(i) for i in range(1, n+1))&lt;/p&gt;
&lt;p&gt;For example for A_3 it produces a Dynkin diagram that looks like:&lt;br /&gt;
0—0—0&lt;br /&gt;
1    2     3&lt;br /&gt;
which I’m quite happy with. I though that I was going to have to use a loop, but the join command is much more elegant. The code for the other types looks very similar.&lt;/p&gt;
&lt;p&gt;So yeah, that’s pretty much where I am. I seem to be getting over this illness, so I hope that I will be much more productive this weekend.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/75/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/75/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=75&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 25 Jul 2013 18:26:26 +0000</pubDate>
</item>
<item>
	<title>Fabian Pedregosa: Different ways to get memory consumption or lessons learned from ``memory_profiler``</title>
	<guid isPermaLink="false">tag:fabianp.net/blog,2013-07-25:2013/different-ways-to-get-memory-consumption-or-lessons-learned-from-memory_profiler/</guid>
	<link>http://fabianp.net/blog/2013/different-ways-to-get-memory-consumption-or-lessons-learned-from-memory_profiler/</link>
	<description>&lt;p&gt;As part of the development of
&lt;a href=&quot;https://pypi.python.org/pypi/memory_profiler&quot;&gt;memory_profiler&lt;/a&gt; I've tried
several ways to get memory usage of a program from within Python. In this post
I'll describe the different alternatives I've tested.&lt;/p&gt;
&lt;h3&gt;The psutil library&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/psutil/&quot;&gt;psutil&lt;/a&gt; is a python library that provides
an interface for retrieving information on running processes. It provides
convenient, fast and cross-platform functions to access the memory usage of a
Python module:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;memory_usage_psutil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# return the memory usage in MB&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psutil&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_memory_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above function returns the memory usage of the current Python process in
MiB. Depending on the platform it will choose the most accurate and fastest
way to get this information. For example, in Windows it will use the C++ Win32
API while in Linux it will read from &lt;code&gt;/proc&lt;/code&gt;, hiding the implementation
details and proving on each platform a fast and accurate measurement.&lt;/p&gt;
&lt;p&gt;If you are looking for an easy way to get the memory consumption within Python
this in my opinion your best shot. &lt;/p&gt;
&lt;h3&gt;The resource module&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;http://docs.python.org/2/library/resource.html&quot;&gt;resource module&lt;/a&gt; is part
of the standard Python library. It's basically a wrapper around
&amp;lt;sys&amp;gt;resource.h&amp;gt; &lt;a&gt;getrusage&lt;/a&gt;,
which is a POSIX standard but some methods are &lt;a href=&quot;http://linux.die.net/man/2/getrusage&quot;&gt;still missing in
Linux&lt;/a&gt; . However, the ones we are
interested seem to work fine in Ubuntu 10.04. You can get the memory usage
with this function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;memory_usage_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;resource&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rusage_denom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1024.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'darwin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ... it seems that in OSX the output is different units ...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rusage_denom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rusage_denom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rusage_denom&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getrusage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RUSAGE_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ru_maxrss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rusage_denom&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my experience this approach is several times faster than the one based in
psutil as was the default way to get the memory usage that I used in
&lt;code&gt;memory_profiler&lt;/code&gt; from version 0.23 up to 0.26. I changed this behavior in
0.27 after a bug report by &lt;a href=&quot;https://github.com/pgervais&quot;&gt;Philippe Gervais&lt;/a&gt;.
The problem with this approach is that it seems to report results that are
slightly different in some cases. Notably it seems to differ when objects
have been recently liberated from the python interpreter.&lt;/p&gt;
&lt;p&gt;In the following example, orphaned arrays are liberated by the python
interpreter, which is correctly seen by &lt;code&gt;psutil&lt;/code&gt; but not by &lt;code&gt;resource&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;mem_resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mem_psutil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mem_resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory_usage_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mem_psutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory_usage_psutil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src=&quot;http://fa.bianp.net/blog/static/code/2013/resource_vs_psutil.png&quot; alt=&quot;Memory plot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;By the way I would be delighted to be corrected if I'm doing something wrong
or informed of a workaround if this exists (I've got the code to reproduce the
figures &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;http://fa.bianp.net/blog/feed/#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;)&lt;/p&gt;
&lt;h3&gt;querying &lt;code&gt;ps&lt;/code&gt; directly&lt;/h3&gt;
&lt;p&gt;The method based on &lt;code&gt;psutils&lt;/code&gt; works great but is not available by default on all
Python systems. Because of this in &lt;code&gt;memory_profiler&lt;/code&gt; we use as last resort
something that's pretty ugly but works reasonably well when all else fails:
invoking the system's &lt;code&gt;ps&lt;/code&gt; command and parsing the output. The code is
something like::&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;memory_usage_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ps'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'v'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vsz_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'RSS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsz_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The main disadvantage of this approach is that it needs to fork a process for
each measurement. For some tasks where you need to get memory usage very fast,
like in line-by-line memory usage then this be a huge overhead on the code.
For other tasks such as getting information of long-running processes, where
the memory usage is anyway working on a separate process this is not too bad.&lt;/p&gt;
&lt;h3&gt;benchmarks&lt;/h3&gt;
&lt;p&gt;Here is a benchmark of the different alternatives presented above. I am
plotting the time it takes the different approaches to make 100 measurements
of the memory usage (lower is better). As can be seen the smallest one is
resource (although it suffers from the issues described above) followed
closely by &lt;code&gt;psutil&lt;/code&gt; which is in my opinion the best option if you can count on
it being installed on the host system and followed far away by &lt;code&gt;ps&lt;/code&gt; which is
roughly a hundred times slower than &lt;code&gt;psutil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://fa.bianp.net/blog/static/code/2013/time_100_measurements.png&quot; alt=&quot;Memory plot&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;IPython notebook to reproduce the figures: &lt;a href=&quot;http://nbviewer.ipython.org/url/fa.bianp.net/blog/static/code/2013/memory_usage.ipynb&quot;&gt;html&lt;/a&gt; &lt;a href=&quot;http://fa.bianp.net/blog/static/code/2013/memory_usage.ipynb&quot;&gt;ipynb&lt;/a&gt; &lt;a href=&quot;http://fa.bianp.net/blog/feed/#fnref:1&quot; rev=&quot;footnote&quot; title=&quot;Jump back to footnote 1 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
	<pubDate>Wed, 24 Jul 2013 22:00:00 +0000</pubDate>
</item>
<item>
	<title>Chetna Gupta: Week-5</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=377</guid>
	<link>http://geekiology.wordpress.com/2013/07/22/week-5/</link>
	<description>&lt;p&gt;This was the week where things did start sprouting slowly and steadily but some things came about of blue storming the entire progress.&lt;br /&gt;
Some of the outputs:&lt;br /&gt;
&lt;a href=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-200838.png&quot;&gt;&lt;img src=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-200838.png?w=300&amp;amp;h=168&quot; alt=&quot;Screenshot from 2013-07-22 20:08:38&quot; width=&quot;300&quot; class=&quot;alignnone size-medium wp-image-380&quot; height=&quot;168&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Input:&lt;br /&gt;
DE = DifferentialExtension(extension={‘D’: [Poly(1, x), Poly(1/x, t)],&lt;br /&gt;
  ‘L_K’: [1], ‘E_K’: [], ‘L_args’: [x], ‘E_args’: []})&lt;br /&gt;
g1 = Poly(t + 1 + x*t – x*t**3, t)&lt;br /&gt;
g2 = Poly(2 + 2*t + 3*x*t**3 + 2*x*t, t)&lt;br /&gt;
coupled_DE_system(Poly(t**2 + 1, t), Poly(t**2, t), g1, g2, DE)&lt;/p&gt;
&lt;p&gt;Output&lt;br /&gt;
-&amp;gt; The monomial is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Clog+x&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\log x&quot; class=&quot;latex&quot; title=&quot;\log x&quot; /&gt;&lt;br /&gt;
-&amp;gt; The s1, s2 should satisfy:&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=Ds1+%2B+%28t%5E2+%2B+1%29s1+-+%28t%5E2%29s2+%3D+2%2At+%2B+1+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Ds1 + (t^2 + 1)s1 - (t^2)s2 = 2*t + 1 &quot; class=&quot;latex&quot; title=&quot;Ds1 + (t^2 + 1)s1 - (t^2)s2 = 2*t + 1 &quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=Ds2+%2B+%28t%5E2%29s2+%2B+%28t%5E2+%2B+1%29s1+%3D+2%2At%5E2+%2B+2%2At+%2B+1+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Ds2 + (t^2)s2 + (t^2 + 1)s1 = 2*t^2 + 2*t + 1 &quot; class=&quot;latex&quot; title=&quot;Ds2 + (t^2)s2 + (t^2 + 1)s1 = 2*t^2 + 2*t + 1 &quot; /&gt;&lt;/p&gt;
&lt;p&gt;This case arises while solving&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=Ds+%2B+%281+%2B+%28%5Clog+x%29%5E2+%281+%2B+%5Ciota%29%29+s+%3D+%282%2A%5Clog+x+%2B+1%29%281+%2B+%5Ciota%29+%2B++2%2A%28%5Clog+x%29%5E2+%5Ciota+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Ds + (1 + (\log x)^2 (1 + \iota)) s = (2*\log x + 1)(1 + \iota) +  2*(\log x)^2 \iota &quot; class=&quot;latex&quot; title=&quot;Ds + (1 + (\log x)^2 (1 + \iota)) s = (2*\log x + 1)(1 + \iota) +  2*(\log x)^2 \iota &quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-200602.png&quot;&gt;&lt;img src=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-200602.png?w=300&amp;amp;h=168&quot; alt=&quot;Screenshot from 2013-07-22 20:06:02&quot; width=&quot;300&quot; class=&quot;alignnone size-medium wp-image-378&quot; height=&quot;168&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Input:&lt;br /&gt;
DE = DifferentialExtension(extension={‘D’: [Poly(1, x), Poly(t, t)],&lt;br /&gt;
   ‘L_K’: [], ‘E_K’: [1], ‘L_args’: [], ‘E_args’: [x]})&lt;br /&gt;
g1 = Poly(2*t + 1)&lt;br /&gt;
g2 = Poly(2*t^2 + 2*t + 1, t)&lt;br /&gt;
coupled_DE_system(Poly(t + 1, t), Poly(t – 1, t), g1, g2, DE)&lt;/p&gt;
&lt;p&gt;Output&lt;br /&gt;
-&amp;gt; The monomial is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Clog+x&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\log x&quot; class=&quot;latex&quot; title=&quot;\log x&quot; /&gt;&lt;br /&gt;
-&amp;gt; The s1, s2 should satisfy:&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=Ds1+%2B+%28t+%2B+1%29s1+-+%28t+-+1%29s2+%3D+2%2At+%2B+1+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Ds1 + (t + 1)s1 - (t - 1)s2 = 2*t + 1 &quot; class=&quot;latex&quot; title=&quot;Ds1 + (t + 1)s1 - (t - 1)s2 = 2*t + 1 &quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=Ds2+%2B+%28t+-+1%29s2+%2B+%28t+%2B+1%29s1+%3D+2%2At%5E2+%2B+2%2At+%2B+1+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Ds2 + (t - 1)s2 + (t + 1)s1 = 2*t^2 + 2*t + 1 &quot; class=&quot;latex&quot; title=&quot;Ds2 + (t - 1)s2 + (t + 1)s1 = 2*t^2 + 2*t + 1 &quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-201020.png&quot;&gt;&lt;img src=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-22-201020.png?w=300&amp;amp;h=168&quot; alt=&quot;Screenshot from 2013-07-22 20:10:20&quot; width=&quot;300&quot; class=&quot;alignnone size-medium wp-image-381&quot; height=&quot;168&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Input:&lt;br /&gt;
# t2 = e^(e^x)&lt;br /&gt;
t0, t1, t2 = symbols(‘t:3′)&lt;br /&gt;
DE = DifferentialExtension(extension={‘D’: [Poly(1, x), Poly(t1, t1), Poly(t2*t1, t2)],&lt;br /&gt;
   ‘L_K’: [], ‘E_K’: [1, 2], ‘L_args’: [], ‘E_args’: [t1, x]})&lt;br /&gt;
g1 = Poly(t2**2*t1 + t2**2*t1**2 – t2**4, t2, t1)&lt;br /&gt;
g2 = Poly(t2**4 + t1**3 + t2*t1**2 + t2*t1 + t1, t2, t1)&lt;br /&gt;
coupled_DE_system(Poly(t1**2, t1), Poly(t2**2, t2), g1, g2, DE)&lt;/p&gt;
&lt;p&gt;Output:&lt;br /&gt;
NoElementaryIntegrals&lt;br /&gt;
monomial &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%28e%5Ex%29&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;e^(e^x)&quot; class=&quot;latex&quot; title=&quot;e^(e^x)&quot; /&gt; is expected to return the above&lt;/p&gt;
&lt;p&gt;There are also other test(and probably the reason i am not able to commit the progress). These tests are ending up in recursion b/w cancellation algorithms and coupled_differential_system, probably I am missing the boundary conditions somewhere.&lt;br /&gt;
And yes i still need to add b1=0 ad b2=0 conditions(Asmeurer yups the book mentions about them at places) &lt;/p&gt;
&lt;p&gt; Mostly the re-opening of the college would bottleneck the progress for a couple of days, excluding the travel time and resettling life at college there would be ongoing campus-interviews, keeping me busy away from the terminal in office boardrooms(which makes every bone of my body to shiver).&lt;/p&gt;
&lt;p&gt;Life is definitely a roller-coaster, and I am about to the cross the highest point of it this week.&lt;br /&gt;
Hoping to witness no more crashes for a couple of days&lt;br /&gt;
Signing- off &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt;   &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/377/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/377/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=377&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 22 Jul 2013 15:05:01 +0000</pubDate>
</item>
<item>
	<title>Prasoon Shukla: GSoC Week 5 : A week gone bad</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=192</guid>
	<link>http://musingsofafriend.wordpress.com/2013/07/21/gsoc-week-5-a-week-gone-bad/</link>
	<description>&lt;p&gt;This was was rather eventful. And as such, I didn’t get much time to work. As a matter of fact, I hardly got any time to work at all.&lt;/p&gt;
&lt;p&gt;So, this week, a new semester in my college began, and, things were hectic, as it always does at the start of a new session. There was the usual hum-drum that is associated with a new session and more. But I was optimistic. I hoped that I’ll cover some ground in the weekend but alas! That was not to be. As it happens, a professor got hold of me for writing out some odd scripts. And the guy didn’t even offer a measly thanks in return. Nevertheless, as life settles down, I know I’ll find more time to work.&lt;/p&gt;
&lt;p&gt;Nevertheless, there was some work that I did get done. First thing – the basic structure finally did get completed. There were some small bugs that have been taken care of. Now that the basic building block of the project are in their final state, I have finally begun the testing of the code written till now. I have been able to initialize coordinate system objects correctly and also tested initialization of VectAdd and VectMul objects using operators defined on various classes.&lt;/p&gt;
&lt;p&gt;That’s pretty much it for this week. I know that it’s very little. But again, I am optimistic that I’ll get more time (much more in fact) in the coming weeks. By the end of this week, I hope to have corrected whatever errors that are still in the code, write tests and have a part of the code ready to go in.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/192/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/192/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=192&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 21 Jul 2013 16:12:37 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: Fifth week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=197</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/07/21/fifth-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;I began this week with tracking down two problems with the modular GCD algorithm for multivariate integer polynomials. The first one was fixed by choosing evaluation points randomly instead of in a fixed order. For example, this happened with the polynomials &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%3D+x+%2B+y&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f = x + y&quot; class=&quot;latex&quot; title=&quot;f = x + y&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g+%3D+x+%2B+y+%2B+z&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g = x + y + z&quot; class=&quot;latex&quot; title=&quot;g = x + y + z&quot; /&gt; because &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z+%3D+0&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;z = 0&quot; class=&quot;latex&quot; title=&quot;z = 0&quot; /&gt; is unlucky for every prime, but this was never detected.&lt;br /&gt;
The second problem occurred with polynomials in many variables. If one of the first variables was evaluated at an unlucky point, the algorithm would try out every combination of evaluation points for the remaining variables before the unlucky one was discarded. This was fixed by giving up an evaluation point if too many failures happen.&lt;br /&gt;
The good news is that now &lt;code&gt;bin/test&lt;/code&gt; passes when &lt;code&gt;heugcd&lt;/code&gt; is replaced by &lt;code&gt;modgcd_multivariate&lt;/code&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;After that, I started implementing the modular GCD algorithm for polynomials over (simple) algebraic function fields, as described in [1]. The setting is as follows. We consider the field of rational functions in the parameters &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t_1%2C+%5Cldots%2C+t_k&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;t_1, \ldots, t_k&quot; class=&quot;latex&quot; title=&quot;t_1, \ldots, t_k&quot; /&gt;, i.e. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Q(t_1, \ldots, t_k)&quot; class=&quot;latex&quot; title=&quot;\mathbb Q(t_1, \ldots, t_k)&quot; /&gt;. Since we also want to be able to work with expressions like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csqrt%7B2%7D%2C+%5C%2C+%5Csqrt%7Bt_1%7D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\sqrt{2}, \, \sqrt{t_1}&quot; class=&quot;latex&quot; title=&quot;\sqrt{2}, \, \sqrt{t_1}&quot; /&gt; etc., we construct a suitable algebraic extension &lt;img src=&quot;http://s0.wp.com/latex.php?latex=L+%3D+%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;L = \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle&quot; class=&quot;latex&quot; title=&quot;L = \mathbb Q(t_1, \ldots, t_k)[z] / \langle m(z) \rangle&quot; /&gt;, where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m%28z%29+%5Cin+%5Cmathbb+Q%28t_1%2C+%5Cldots%2C+t_k%29%5Bz%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;m(z) \in \mathbb Q(t_1, \ldots, t_k)[z]&quot; class=&quot;latex&quot; title=&quot;m(z) \in \mathbb Q(t_1, \ldots, t_k)[z]&quot; /&gt; is monic and irreducible. Our goal now is to calculate the GCD of two univariate polynomials &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29%2C+g%28x%29+%5Cin+L%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x), g(x) \in L[x]&quot; class=&quot;latex&quot; title=&quot;f(x), g(x) \in L[x]&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;First, the problem is reduced to polynomials over &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bt_1%2C+%5Cldots%2C+t_k%5D%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z[t_1, \ldots, t_k][z] / \langle m(z) \rangle&quot; class=&quot;latex&quot; title=&quot;\mathbb Z[t_1, \ldots, t_k][z] / \langle m(z) \rangle&quot; /&gt; by clearing fractions in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g&quot; class=&quot;latex&quot; title=&quot;g&quot; /&gt;. So basically, we are working with polynomials &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%2C+g+%5Cin+%5Cmathbb+Z%5Bt_1%2C+%5Cldots%2C+t_k%5D%5Bz%2C+x%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f, g \in \mathbb Z[t_1, \ldots, t_k][z, x]&quot; class=&quot;latex&quot; title=&quot;f, g \in \mathbb Z[t_1, \ldots, t_k][z, x]&quot; /&gt;. As always, the main loop picks suitable prime numbers &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt;, calculates the GCD of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%5C%3B+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f \; \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;f \; \mathrm{mod} \, p&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g+%5C%3B+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g \; \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;g \; \mathrm{mod} \, p&quot; /&gt; with algorithm P and combines the new result with previous ones (for different primes) using the Chinese Remainder Theorem. Here we only pick those prime numbers and GCDs, where the leading terms match the one of the new GCD and obtain &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c+%5C%3B+%5Cmathrm%7Bmod%7D%5C%2C+m_c&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;c \; \mathrm{mod}\, m_c&quot; class=&quot;latex&quot; title=&quot;c \; \mathrm{mod}\, m_c&quot; /&gt;. Next we use integer rational reconstruction (see [2]) on the coefficients of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c+%5C%3B+%5Cmathrm%7Bmod%7D%5C%2C+m_c&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;c \; \mathrm{mod}\, m_c&quot; class=&quot;latex&quot; title=&quot;c \; \mathrm{mod}\, m_c&quot; /&gt;, which tries to calculate &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac+a+b+%5Cin+%5Cmathbb+Q&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\frac a b \in \mathbb Q&quot; class=&quot;latex&quot; title=&quot;\frac a b \in \mathbb Q&quot; /&gt; from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+b%5E%7B-1%7D+%5C%3B+%5Cmathrm%7Bmod%7D+%5C%2C+m_c&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;a b^{-1} \; \mathrm{mod} \, m_c&quot; class=&quot;latex&quot; title=&quot;a b^{-1} \; \mathrm{mod} \, m_c&quot; /&gt;. This will only succeed if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;a&quot; class=&quot;latex&quot; title=&quot;a&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;b&quot; class=&quot;latex&quot; title=&quot;b&quot; /&gt; are smaller than &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csqrt%7B%5Cfrac+%7Bm_c%7D+2%7D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\sqrt{\frac {m_c} 2}&quot; class=&quot;latex&quot; title=&quot;\sqrt{\frac {m_c} 2}&quot; /&gt;. Finally we check if we have found our GCD with trial division.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Algorithm P works by recursively evaluating the parameters &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t_1%2C+%5Cldots%2C+t_k&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;t_1, \ldots, t_k&quot; class=&quot;latex&quot; title=&quot;t_1, \ldots, t_k&quot; /&gt; for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%2C+g&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f, g&quot; class=&quot;latex&quot; title=&quot;f, g&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;m&quot; class=&quot;latex&quot; title=&quot;m&quot; /&gt;. When there are no parameters left, we have two polynomials in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle+%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[z] / \langle m(z) \rangle [x]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[z] / \langle m(z) \rangle [x]&quot; /&gt;. Now we try to use the Euclidean Algorithm to compute their GCD. Because &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m%28z%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;m(z)&quot; class=&quot;latex&quot; title=&quot;m(z)&quot; /&gt; may not be irreducible anymore, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bz%5D+%2F+%5Clangle+m%28z%29+%5Crangle&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[z] / \langle m(z) \rangle&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[z] / \langle m(z) \rangle&quot; /&gt; is only a ring in general and we may encounter zero divisors. Therefore, it is possible that the Euclidean Algorithm fails. If a recursive call of algorithm P fails, then we have to choose a different evaluation point. Subresults are later combined with similar techniques as above. Again, we verify the result using trial division.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Next week I hope to finish a working version of this algorithm.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;[1] &lt;a href=&quot;http://www.cecm.sfu.ca/~mmonagan/papers/AFGCD.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.cecm.sfu.ca/~mmonagan/papers/AFGCD.pdf&lt;/a&gt;&lt;br /&gt;
[2] &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=806398&quot; rel=&quot;nofollow&quot;&gt;http://dl.acm.org/citation.cfm?id=806398&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/197/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/197/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=197&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 21 Jul 2013 14:58:48 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: GSoC: Week5</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-4735040836898965200</guid>
	<link>http://codesachin.blogspot.com/2013/07/gsoc-week5.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;A late post this week.&lt;div&gt;In terms of progress, last week was a bit slow, but things are going to move pretty fast now.&lt;/div&gt;&lt;div&gt;The past seven days, I wrote the tests for the code of MovingRefFrame, Particle and all the helper functions in the functions.py file. Trust me, if writing tests are the only thing you are doing, it can get &lt;i&gt;pretty &lt;/i&gt;boring. Testing your code and experimenting with it is a lot of fun, but sadly, writing unit tests is not. Anyways, I finished writing most of them for the classes built till now. Some more may have to be added, but that will be after Prasoon's code gets pushed into SymPy's master repo.&lt;/div&gt;&lt;div&gt;Apart from that, I did some groundwork on Dyadics, which would be the focus of my GSoC work for the upcoming week. I will be taking hints from the old module's Dyadic class, but I will have to modify and hack it considerably to fit SymPy's global architecture. Plus, some methods like the __eq__ one need improvement, which I plan to do. I hope I can finish the class (operation methods as well as those for printing, etc) by the end of this week. Tests later.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One great thing that happened this week- I &lt;i&gt;finally &lt;/i&gt;decided to give up Windows as my coding environment. Its not like you cannot code in Windows; if you are good enough for what you are trying to do, you can pretty much do whatever you want there...but in Linux, its 10x easier. Especially since any library you want is just one small command away.&lt;/div&gt;&lt;div&gt;My laptop's LAN card got replaced, and it prompted me to set up a dual boot system on my machine.&lt;/div&gt;&lt;div&gt;Anyways, I am very happy with the linux(Ubuntu 12.04 LTS) experience!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Yeah...one more thing! SymPy 0.7.3 finally got released, and this will be the first official release to include code from me (the work on sympy.logic)! However, the documentation for that code hasn't been added to the website docs, so I probably need to learn the basics of Sphinx documentation for that. I hope I can get it done this week. I tried working with Sphinx on Windows earlier, but it quite frankly was a little tricky for an impatient guy like me.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;That's all the 'progress' that happened this week.&lt;/div&gt;&lt;div&gt;The next week's post will be the last GSoC update I'll be posting from Mumbai. I'll be going to my campus at Goa on next Tuesday, that week's work may be a little bit delayed around the Tue-Wed period.&lt;/div&gt;&lt;div&gt;But thats for later.&lt;/div&gt;&lt;div&gt;Have a great week! &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 21 Jul 2013 06:15:00 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Manoj Kumar: Back on track, hopefully</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=656</guid>
	<link>http://manojbits.wordpress.com/2013/07/21/back-on-track-hopefully/</link>
	<description>&lt;p&gt;Hi, If you had read my rant on my previous post and the posts before that too, you would have realized my frustration with the Maple Paper. Thankfully Raoul gave me a series of research papers, which gave a more logical way of calculating the infinitesimals. Also, I had been on a “vacation” for four days and hence did nothing those four days. Rejuvenated (I think) after my “vacation”, I plan to speed up work the coming days. However this is what I managed to do, the previous weekend, and yesterday.&lt;/p&gt;
&lt;p&gt;1. &lt;strong&gt;Improve the documentation &lt;/strong&gt;: I had written the documentation, using normal English. I rewrote the maths part using sphinx, (which is a tool that helps neat rendering of mathematical stuff) . I had some trouble with the technical mathematical definitions, but thanks to Sean, this PR is finally merged. &lt;a href=&quot;https://github.com/sympy/sympy/pull/2282&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2282&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;strong&gt;Refactor the existing code:  &lt;/strong&gt;I also found out I would be needing to rewrite most of my heuristic code, due to the new research paper, I optimized it a bit, meaning it would break if it found the first infinitesimals, instead of looping through to find out all infinitesimals. There is still work to be done, but atleast I got it in. &lt;a href=&quot;https://github.com/sympy/sympy/pull/2286&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2286&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3. &lt;strong&gt;Rewrite the second heuristic: &lt;/strong&gt;In one of my previous posts &lt;a href=&quot;http://manojbits.wordpress.com/2013/06/18/algebraicity-dsolve-and-core-sympy/&quot; rel=&quot;nofollow&quot;&gt;http://manojbits.wordpress.com/2013/06/18/algebraicity-dsolve-and-core-sympy/&lt;/a&gt; , I described the second heuristic. However in one of the papers, there seems to a better way to find out if either &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; or &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; is of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29%2Ag%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f(x)*g(y)&quot; class=&quot;latex&quot; title=&quot;f(x)*g(y)&quot; /&gt; when the other is zero. Before going into further details, one would have to know what an inverse ode is. An inverse ode is when you replace &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f(x)&quot; class=&quot;latex&quot; title=&quot;f(x)&quot; /&gt; by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and vice versa in the ODE,  For example, the inverse ODE of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+h%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx} = h(x, y)&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx} = h(x, y)&quot; /&gt; would be &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+h%28y%2C+x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx} = h(y, x)&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx} = h(y, x)&quot; /&gt;. So the paper says that, if  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7Bh%5E2%7D%5Cfrac%7B%5Cpartial%5E2+%5Cleft%28%5Clog+h+%5Cright%29%7D%7B%5Cpartial+x+%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{1}{h^2}\frac{\partial^2 \left(\log h \right)}{\partial x \partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{h^2}\frac{\partial^2 \left(\log h \right)}{\partial x \partial y}&quot; /&gt; is separable in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt; , then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; would be of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29%2Ag%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f(x)*g(y)&quot; class=&quot;latex&quot; title=&quot;f(x)*g(y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; would be zero. Now the factors containing &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; when &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7Bh%5E2%7D%5Cfrac%7B%5Cpartial%5E2+%5Cleft%28%5Clog+h+%5Cright%29%7D%7B%5Cpartial+x+%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{1}{h^2}\frac{\partial^2 \left(\log h \right)}{\partial x \partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{h^2}\frac{\partial^2 \left(\log h \right)}{\partial x \partial y}&quot; /&gt; is separated, gives &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f(x)&quot; class=&quot;latex&quot; title=&quot;f(x)&quot; /&gt; , and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;g(y)&quot; class=&quot;latex&quot; title=&quot;g(y)&quot; /&gt; can be found out by integrating &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e%5E%7Bf%2A%5Cfrac%7B%5Cpartial+%7D%7B%5Cpartial+x%7D%5Cleft%28+%5Cfrac%7B1%7D%7BFh%7D%5Cright%29%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;e^{f*\frac{\partial }{\partial x}\left( \frac{1}{Fh}\right)}&quot; class=&quot;latex&quot; title=&quot;e^{f*\frac{\partial }{\partial x}\left( \frac{1}{Fh}\right)}&quot; /&gt; with respect to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;. If you need to know the condition for which, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; is of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29%2Ag%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f(x)*g(y)&quot; class=&quot;latex&quot; title=&quot;f(x)*g(y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; is zero, then one has to apply the same algorithm to the inverse ODE, and reverse the coordinates at the end. I neither know how this works out, nor did I try to find out why, however it works well and that is good enough for me right now.&lt;/p&gt;
&lt;p&gt;I guess that’s all.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/656/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/656/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=656&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 21 Jul 2013 04:30:29 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: Solving Ternary Quadratic forms by descent method</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=104</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/07/20/solving-ternary-quadratic-forms-by-descent-method/</link>
	<description>&lt;p&gt;Now SymPy can solve Ternary Quadratic forms !!!! I thought of adopting a new style for giving more details on this amazing news, So Let’s try a Q&amp;amp;A approach and see how it goes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q1. What is a “Ternary Quadratic form”?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A ternary quadratic form is an equation of the form, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q%28x%2C+y%2C+z%29+%5Cequiv+Ax%5E2+%2B+Bxy+%2B+Cxz+%2B+Dy%5E2+%2B+Eyz+%2B+Fz%5E2+%3D+0+&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Q(x, y, z) \equiv Ax^2 + Bxy + Cxz + Dy^2 + Eyz + Fz^2 = 0 &quot; class=&quot;latex&quot; title=&quot;Q(x, y, z) \equiv Ax^2 + Bxy + Cxz + Dy^2 + Eyz + Fz^2 = 0 &quot; /&gt; (Yes, It’s a little bit odd representation with square terms scattered but you will see later why this is a better representation). One important thing worth observing is that the degree of each term is precisely two. This makes it a lot easier to solve the equation and moreover, it makes finding integer solutions to the equation equivalent to finding the rational solutions. We are particularly interested in the case where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A%2C+B%2C+C%2C+D%2C+E%2C+F%2C+x%2C+y%2C+z+%5Cin+%5Cmathbb%7BZ%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;A, B, C, D, E, F, x, y, z \in \mathbb{Z}&quot; class=&quot;latex&quot; title=&quot;A, B, C, D, E, F, x, y, z \in \mathbb{Z}&quot; /&gt; and  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%5Cneq+%280%2C+0%2C+0%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z) \neq (0, 0, 0)&quot; class=&quot;latex&quot; title=&quot;(x, y, z) \neq (0, 0, 0)&quot; /&gt;. In other words, we want to find non-trivial integer solutions to the equation when it has integer coefficients (clearly &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%280%2C+0%2C+0%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z) = (0, 0, 0)&quot; class=&quot;latex&quot; title=&quot;(x, y, z) = (0, 0, 0)&quot; /&gt; is always a solution to this equation so we call it the `trivial` solution).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Q2. Can we make the equation more simpler to deal with?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yes, It turns out that we can. We can convert &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Q&quot; class=&quot;latex&quot; title=&quot;Q&quot; /&gt; to a normal form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q%27+%5Cequiv+ax%5E2+%2B+by%5E2+%2B+cz%5E2+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Q' \equiv ax^2 + by^2 + cz^2 = 0&quot; class=&quot;latex&quot; title=&quot;Q' \equiv ax^2 + by^2 + cz^2 = 0&quot; /&gt; by two rational transformations of the variables. Lets assume that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A+%5Cneq+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;A \neq 0&quot; class=&quot;latex&quot; title=&quot;A \neq 0&quot; /&gt;(We can always switch variables if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;A = 0&quot; class=&quot;latex&quot; title=&quot;A = 0&quot; /&gt;).  With an easy simplification followed by clearing of the denominators , one can easily see that the transformation given by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x+%5Crightarrow+x+-+%28By+%2B+Cz%29%2F2A&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x \rightarrow x - (By + Cz)/2A&quot; class=&quot;latex&quot; title=&quot;x \rightarrow x - (By + Cz)/2A&quot; /&gt; puts our original equation in the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A%27x+%5E2+%2B+D%27y%5E+2+%2B+E%27yz+%2B+F%27z%5E+2%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;A'x ^2 + D'y^ 2 + E'yz + F'z^ 2= 0&quot; class=&quot;latex&quot; title=&quot;A'x ^2 + D'y^ 2 + E'yz + F'z^ 2= 0&quot; /&gt; where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A%27%2C+D%27%2C+E%27+%2C+F%27+%5Cin+%5Cmathbb%7BZ%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;A', D', E' , F' \in \mathbb{Z}&quot; class=&quot;latex&quot; title=&quot;A', D', E' , F' \in \mathbb{Z}&quot; /&gt;. Finally,  the transformation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y+%5Crightarrow+y+-+E%27z%2F2D%27&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y \rightarrow y - E'z/2D'&quot; class=&quot;latex&quot; title=&quot;y \rightarrow y - E'z/2D'&quot; /&gt; puts the equation in the desired form, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%2B+cz%5E2+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + by^2 + cz^2 = 0&quot; class=&quot;latex&quot; title=&quot;ax^2 + by^2 + cz^2 = 0&quot; /&gt;. Since finding integer solutions is equivalent to finding rational solutions and the transformations we used were rational, If an integer solution exist for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Q&quot; class=&quot;latex&quot; title=&quot;Q&quot; /&gt; we can conclude that the new form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q%27&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Q'&quot; class=&quot;latex&quot; title=&quot;Q'&quot; /&gt; should also have an integer solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q3. What are the required conditions to have a non-trivial solution(s)?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s sufficient to consider the conditions on  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q%27&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Q'&quot; class=&quot;latex&quot; title=&quot;Q'&quot; /&gt; to have a non-trivial integer solution. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q%27&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Q'&quot; class=&quot;latex&quot; title=&quot;Q'&quot; /&gt; has a non-trivial integer solution, we can use the inverse transformation to recover the solutions for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Q&quot; class=&quot;latex&quot; title=&quot;Q&quot; /&gt;. It turns out that the conditions for solubility of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q%27&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Q'&quot; class=&quot;latex&quot; title=&quot;Q'&quot; /&gt; are,&lt;br /&gt;
1. All three variables, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%2C+b%2C+c&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a, b, c&quot; class=&quot;latex&quot; title=&quot;a, b, c&quot; /&gt; should not have the same sign.&lt;br /&gt;
2. The three quadratic congruence equations, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+%2B+bc+%5Cequiv+0+%5C+%28mod+%5C+a%29%2C+x%5E2+%2B+ca+%5Cequiv+0+%5C+%28mod+%5C+b%29%2C+x%5E2+%2B+ab+%5Cequiv+0+%5C+%28mod+%5C+c%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 + bc \equiv 0 \ (mod \ a), x^2 + ca \equiv 0 \ (mod \ b), x^2 + ab \equiv 0 \ (mod \ c)&quot; class=&quot;latex&quot; title=&quot;x^2 + bc \equiv 0 \ (mod \ a), x^2 + ca \equiv 0 \ (mod \ b), x^2 + ab \equiv 0 \ (mod \ c)&quot; /&gt; should be solvable.&lt;/p&gt;
&lt;p&gt;You can find the proofs for  the sufficiency of these conditions in the references. It is also a proven fact that If one non-trivial solution exist for one of the equations, there will be infinitely many non-trivial solutions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q4. What are the algorithms that can be used ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are quite a few algorithms which can be used to tackle down a non-trivial solution. There is a method which uses sieving and another one based on quadratic number fields. But the descent method due to Lagrange beats the above methods when it comes to performance. The idea is like this. Suppose there is a solution, then under some conditions we can deduce that an even smaller solution should exist. We continue making the solution smaller and smaller until we find an equation which has a solution we can easily spot.  First we convert &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%2B+cz%5E2+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + by^2 + cz^2 = 0&quot; class=&quot;latex&quot; title=&quot;ax^2 + by^2 + cz^2 = 0&quot; /&gt; to the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=w%5E2+%3D+Ax%5E2+%2B+By%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;w^2 = Ax^2 + By^2&quot; class=&quot;latex&quot; title=&quot;w^2 = Ax^2 + By^2&quot; /&gt; (We can easily do this by multiplying entire equation by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-c&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;-c&quot; class=&quot;latex&quot; title=&quot;-c&quot; /&gt;). If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A+%3D+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;A = 1&quot; class=&quot;latex&quot; title=&quot;A = 1&quot; /&gt; then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+w%29+%3D+%281%2C+0%2C+1%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, w) = (1, 0, 1)&quot; class=&quot;latex&quot; title=&quot;(x, y, w) = (1, 0, 1)&quot; /&gt; is a solution to our equation. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B+%3D+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;B = 1&quot; class=&quot;latex&quot; title=&quot;B = 1&quot; /&gt; then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%280%2C+1%2C+1%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z) = (0, 1, 1)&quot; class=&quot;latex&quot; title=&quot;(x, y, z) = (0, 1, 1)&quot; /&gt; is a solution to our equation. Otherwise we continue reducing &lt;img src=&quot;http://s0.wp.com/latex.php?latex=A&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=B&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;B&quot; class=&quot;latex&quot; title=&quot;B&quot; /&gt; until we arrive at a situation like above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q5. How can one find all the non-trivial solutions?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, All the non-trivial solutions can be represented using two parameters, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p%2C+q&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;p, q&quot; class=&quot;latex&quot; title=&quot;p, q&quot; /&gt; which are co-prime to each other. Suppose we have found a non-trivial solution &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x_%7B0%7D%2C+y_%7B0%7D%2C+z_%7B0%7D%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x_{0}, y_{0}, z_{0})&quot; class=&quot;latex&quot; title=&quot;(x_{0}, y_{0}, z_{0})&quot; /&gt; for the equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q%28x%2C+y%2C+z%29+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Q(x, y, z) = 0&quot; class=&quot;latex&quot; title=&quot;Q(x, y, z) = 0&quot; /&gt;. We can always assume that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7B0%7D+%5Cneq+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_{0} \neq 0&quot; class=&quot;latex&quot; title=&quot;x_{0} \neq 0&quot; /&gt; by a switching of the variables. Then assuming &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%28x_%7B0%7Dr%2C+y_%7B0%7Dr+%2B+p%2C+z_%7B0%7Dr+%2B+q%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z) = (x_{0}r, y_{0}r + p, z_{0}r + q)&quot; class=&quot;latex&quot; title=&quot;(x, y, z) = (x_{0}r, y_{0}r + p, z_{0}r + q)&quot; /&gt; and substituting in the original equation, one can find an expression for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;r&quot; class=&quot;latex&quot; title=&quot;r&quot; /&gt; using &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=q&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;q&quot; class=&quot;latex&quot; title=&quot;q&quot; /&gt;. So we can find parametrized solutions for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z)&quot; class=&quot;latex&quot; title=&quot;(x, y, z)&quot; /&gt; by substituting the value of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;r&quot; class=&quot;latex&quot; title=&quot;r&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q6. Any Improvements to current methodology?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes, An efficient algorithm for solving the quadratic congruence should be implemented. Also, there is an algorithm in MAGMA which currently solves this kind of equations. I plan to implement that also so that I can verify my results and if it is faster than the descent method, replace the descent method with it.&lt;/p&gt;
&lt;p&gt;And a special thank should go to Mario for helping me out with the bugs in my code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[1] The algorithmic resolution of Diophantine equations, Nigel P. Smart, London Mathematical Society Student Texts 41, Cambridge University Press, Cambridge, 1998.&lt;br /&gt;
[2] Efficient Solution of Rational Conices, J. E. Cremona and D. Rusin, Mathematics of Computation, Volume 00, Number 0.&lt;br /&gt;
[3] L.J. Mordell, Diophantine Equations, Academic Press, 1969.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/104/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/104/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=104&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 20 Jul 2013 19:26:59 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: Dynkin diagrams and Cartan matrices</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=2</guid>
	<link>http://meclark256.wordpress.com/2013/07/17/dynkin-diagrams-and-cartan-matrices/</link>
	<description>&lt;p&gt;First off, I’ll start by saying I’ve just made another PR (&lt;a href=&quot;https://github.com/sympy/sympy/pull/2297&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2297&lt;/a&gt;) which includes the code for the C and D series, as well as the exception Lie algebras of type E, F, and G.  &lt;/p&gt;
&lt;p&gt;So, this week so far has really been a mix of things, as far as what I’ve been working on.  I’ve done a fair amount of (attempting to) clean up code for type_A.py so as to make it ready to actually be merged with sympy master.  I think I’m heading in the right direction on that front, though I doubt that I’m all the way there.  There are always more typos or trailing white spaces to fix.&lt;/p&gt;
&lt;p&gt;I’ve also (more or less) put together Cartan_Matrix.py.  Originally, this was going to be a subclass (I think of CartanType? Not really sure what exactly I was thinking when I wrote my proposal).  However, once I actually started thinking about things (and after consulting with David), I think it actually makes much more sense to just have a single method, called CartanMatrix.  As written, it takes an argument t, and then returns CartanType(t).cartan_matrix.   Then, the user can do things like&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; CartanMatrix(“A2″)&lt;br /&gt;
[2 -1]&lt;br /&gt;
[-1 2]&lt;/p&gt;
&lt;p&gt;As written, the naming convention obviously goes against camel case, and is named as if it were a class.  However I’d like to keep it this way.  I’m finding it difficult to be able to vocalise /why/ exactly, so I suppose some discussion on this front would be useful/necessary.&lt;/p&gt;
&lt;p&gt;This sort of leads on to dynkin_diagram.py.  I’m still trying to think/decide whether or not I should go in the same way that I did with cartan_matrix, or if I should make it an actual class.  Currently I don’t have anything about dynkin diagrams coded into type_A, type_B etc but it would be easy enough (once I get past figuring out how to do the ascii art and whatnot) to add that into those files.  Alternatively, I could just hardcode it into dynkin_diagram.py.  I’m thinking that it might make more sense to do things in the same fashion as cartan_matrix, since I don’t really want to have this (potential) class do anything /other/ than display the Dynkin diagram, so it would probably be overkill to have it be a class.  &lt;/p&gt;
&lt;p&gt;In any case, I suppose that I have a little bit more time to think about this, because I need to figure out how exactly to do the ascii art that will be the actual diagrams.  Type A is obviously very easy, because the diagram has no double/triple lines or arrows or weird angles.  I want type A to look like:&lt;/p&gt;
&lt;p&gt;0–0–0….-0&lt;/p&gt;
&lt;p&gt;Type B is again fairly easy:&lt;br /&gt;
0–0–0….0=&amp;gt;=0&lt;/p&gt;
&lt;p&gt;as is C:&lt;br /&gt;
0–0–0…0=&amp;lt;=0&lt;br /&gt;
and type F is very similar.&lt;/p&gt;
&lt;p&gt;However, type G has a triple line with an arrow, and I'm not sure how to do that.  Type E has one edge that sticks up, so it'll take up two or three lines, and I'll need to figure out how to print that out, and similarly for D.&lt;/p&gt;
&lt;p&gt;So….that's pretty much what's going on right now.  Having typed that all out, I think that I have come to a conclusion on how I want to structure dynkin_diagram.py which is good.  It should also be pretty easy to implement things for type_A at the very least, so that's what I'm going to work on tomorrow and Friday.  We'll see where that gets me!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/2/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/2/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=2&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 17 Jul 2013 20:32:31 +0000</pubDate>
</item>
<item>
	<title>Tarun Gaba: GSoC Report Week 4</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7526836182390500993.post-3347566173929214655</guid>
	<link>http://tarun-gaba.blogspot.com/2013/07/gsoc-report-week-4.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Week four is over, and it has been an exhaustive week. I had been working parallely on two instances of project, which are equally relevant.&lt;br /&gt;One is to write a complete extended illustrative example, which involved simulating a three link conical pendulum.&lt;br /&gt;The current work on this problem can be checked here:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The problem is a quick implementation of the whole project, and a very naive one. It has some dirty code, and some hacks, which would need addressing during the implementations in the actual project.&lt;br /&gt;&lt;br /&gt;The example is in a stable state, and I have been able to produce static visualizations. With a small change in Javascripts. It can be readily converted to animations.&lt;br /&gt;I have created some instances of classes, according API, with only basic functionality, which has helped in bringing the illustrative example(three link conical pendulum) to life.&lt;br /&gt;The python part of the example is complete, as I have been able to create the JSON file containing the simulation data from the problem.&lt;br /&gt;As far as javascript part is concerned, Only thing left is to animate the visualization by properly reading the simulation data from the JSON object and applying it to the static visualizations.&lt;br /&gt;The simulation data is being stored in the form of a (4 by 4) transformation matrices, which are then mapped to a visualization frame.&lt;br /&gt;the frame will be calling the animation matrices from the javascript side and render them.&lt;br /&gt;&lt;br /&gt;There has been certain issues on converting the symbolic transformation matrices to the numpy, or numerical matrices. I tried using lambdify, but ran into some problems.It seems that lambdify doesnt work properly with the time dependent symbols, i.e it works fine on symbols like:&lt;br /&gt;'a', but fails on 'a(t)'.&lt;br /&gt;&lt;br /&gt;Right now for the example I am using SymPy's evalf method, with substitutions for the symbols.&lt;br /&gt;But it is not considered as efficient as lambdify, so I need to figure out the way to resolve the problem.&lt;br /&gt;&lt;br /&gt;The other part which I am working is to write the unittests for the project. It is getting a bit delayed,&lt;br /&gt;and I am two or three days behind the stipulated timeline. I am hoping to cover it up in the coming two weeks, before the midterm evaluations.&lt;br /&gt;The tests seems to be coming much easier, once I have done the three link pendulum example.&lt;br /&gt;The example has helped me a lot in determining how different classes should be working, so I am a little more confident on the implementations.&lt;br /&gt;It is also because I have already implemented the basic functionality of nearly all classes, I just need to flesh them out, provide some more functionality to them, and they would be ready to be merged into the  master.&lt;br /&gt;&lt;br /&gt;In a nutshell, this week has been  a little exhaustive, but now I feel running towards my milestone at a much better pace.&lt;br /&gt;&lt;br /&gt;Cheers&lt;/div&gt;</description>
	<pubDate>Tue, 16 Jul 2013 17:47:49 +0000</pubDate>
	<author>noreply@blogger.com (TARUN GABA)</author>
</item>
<item>
	<title>Saurabh Jha: Profile of new  rref function and some comparative profiles for addition</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-4476450566660748829</guid>
	<link>http://sympymatrix.blogspot.com/2013/07/profile-of-new-rref-function-and-some.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;For a new rref given in last commit of [1],  here is the profile for a 200 by 200 matrix--&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;rref(m, ZZ)&quot;)&lt;br /&gt;         119411 function calls in 3.140 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    3.140    3.140 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 densetools.py:108(rowdiv)&lt;br /&gt;    39800    3.067    0.000    3.115    0.000 densetools.py:115(rowadd)&lt;br /&gt;        1    0.025    0.025    3.140    3.140 densetools.py:82(rref)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {gmpy.mpq}&lt;br /&gt;    39803    0.003    0.000    0.003    0.000 {len}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;    39801    0.045    0.000    0.045    0.000 {range}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In contrast the older rref is &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt; cProfile.run(&quot;a.rref()&quot;)&lt;/div&gt;&lt;div&gt;         766832 function calls in 0.514 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.514    0.514 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;    40401    0.027    0.000    0.050    0.000 compatibility.py:19(iterable)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;/div&gt;&lt;div&gt;    40401    0.025    0.000    0.084    0.000 compatibility.py:64(is_sequence)&lt;/div&gt;&lt;div&gt;    40400    0.067    0.000    0.427    0.000 dense.py:33(__getitem__)&lt;/div&gt;&lt;div&gt;        2    0.001    0.000    0.039    0.020 dense.py:588(_new)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.039    0.039 dense.py:600(as_mutable)&lt;/div&gt;&lt;div&gt;    40000    0.017    0.000    0.030    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;/div&gt;&lt;div&gt;    40400    0.008    0.000    0.008    0.000 matrices.py:23(_iszero)&lt;/div&gt;&lt;div&gt;        1    0.040    0.040    0.514    0.514 matrices.py:2414(rref)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.039    0.039 matrices.py:283(copy)&lt;/div&gt;&lt;div&gt;    80800    0.076    0.000    0.094    0.000 matrices.py:3571(a2idx)&lt;/div&gt;&lt;div&gt;    40400    0.012    0.000    0.012    0.000 matrices.py:390(shape)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.039    0.019 matrices.py:81(_handle_creation_inputs)&lt;/div&gt;&lt;div&gt;    40400    0.125    0.000    0.359    0.000 matrices.py:977(key2ij)&lt;/div&gt;&lt;div&gt;    40000    0.013    0.000    0.013    0.000 sympify.py:50(sympify)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10894b248}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;/div&gt;&lt;div&gt;    40401    0.009    0.000    0.009    0.000 {hasattr}&lt;/div&gt;&lt;div&gt;   202004    0.056    0.000    0.056    0.000 {isinstance}&lt;/div&gt;&lt;div&gt;    40401    0.006    0.000    0.006    0.000 {iter}&lt;/div&gt;&lt;div&gt;    40409    0.004    0.000    0.004    0.000 {len}&lt;/div&gt;&lt;div&gt;        1    0.009    0.009    0.039    0.039 {map}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;    40400    0.020    0.000    0.020    0.000 {zip}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So, we have a slowing down of the rref operation. Most of the time is taken by the rowadd.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I also realized earlier this week that if I have a 2000 by 2000 matrix like this--&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;m, n = [], []&lt;/div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(1000, 3000):&lt;/div&gt;&lt;div&gt;...     n.append(i)&lt;/div&gt;&lt;div&gt;... &lt;/div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(1000, 3000):&lt;/div&gt;&lt;div&gt;...     m.append(n)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I get this profile&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;cProfile.run(&quot;add(m, m, ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         4008005 function calls in 1.657 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.030    0.030    1.657    1.657 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;     2000    1.335    0.001    1.625    0.001 densetools.py:11(addrow)&lt;/div&gt;&lt;div&gt;        1    0.002    0.002    1.627    1.627 densetools.py:4(add)&lt;/div&gt;&lt;div&gt;     2001    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;  4002000    0.271    0.000    0.271    0.000 {method 'append' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;     2001    0.019    0.000    0.019    0.000 {range}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But surprisingly, if I have a matrix like this&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; m, n = [], []&lt;/div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(1000, 3000):&lt;/div&gt;&lt;div&gt;...     n.append(ZZ(i))&lt;/div&gt;&lt;div&gt;... &lt;/div&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(1000, 3000):&lt;/div&gt;&lt;div&gt;...     m.append(n)&lt;/div&gt;&lt;div&gt;... &lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I get this--&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;cProfile.run(&quot;add(m, m, ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         4008005 function calls in 2.855 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.402    0.402    2.855    2.855 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;     2000    2.142    0.001    2.450    0.001 densetools.py:11(addrow)&lt;/div&gt;&lt;div&gt;        1    0.002    0.002    2.452    2.452 densetools.py:4(add)&lt;/div&gt;&lt;div&gt;     2001    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;  4002000    0.287    0.000    0.287    0.000 {method 'append' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;     2001    0.021    0.000    0.021    0.000 {range}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Maybe I am doing this in a wrong way.  I should have speed up because of coercion.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] https://github.com/sympy/sympy/pull/2248&lt;/div&gt;</description>
	<pubDate>Mon, 15 Jul 2013 07:45:59 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Official SymPy blog: SymPy 0.7.3 is released</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2520472460430880330.post-7920297498163589526</guid>
	<link>http://sympy.blogspot.com/2013/07/sympy-073-is-released.html</link>
	<description>&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;I'm happy to announce the release of SymPy 0.7.3.  It can be&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;downloaded from&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;a style=&quot;background-color: white; color: #1155cc; font-family: arial, sans-serif; font-size: 13px;&quot; href=&quot;https://github.com/sympy/sympy/releases/tag/sympy-0.7.3&quot; target=&quot;_blank&quot;&gt;https://github.com/sympy/&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;sympy/releases/tag/sympy-0.7.3&lt;/a&gt;&amp;lt;wbr style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&amp;gt;&amp;lt;/wbr&amp;gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;. The release&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;notes for this release are at&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;a style=&quot;background-color: white; color: #1155cc; font-family: arial, sans-serif; font-size: 13px;&quot; href=&quot;https://github.com/sympy/sympy/wiki/release-notes-for-0.7.3&quot; target=&quot;_blank&quot;&gt;https://github.com/sympy/&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;sympy/wiki/release-notes-for-&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;0.7.3&lt;/a&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;.&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;To update SymPy, you can use pip install sympy --upgrade or download&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;the source and use setup.py install. SymPy has no dependencies.&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Some highlights:&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Improved integrate() with the Risch algorithm, and it now splits &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;integrals into Piecewise more often. Support for more special &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;functions.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Basic infrastructure for the PDE module.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Many improvements to the matrix expressions, and assumptions relating to them.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;New context manager for the new assumptions (with assuming(...)).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;This will be the last version of SymPy to support Python 2.5.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Many bug fixes.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Note: I suspect that these release notes are still not complete. If&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;you know of any new major change in this release that is not there,&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;please edit the wiki page and add it.&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;The following people contributed at least one patch to this release&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;(names are given in alphabetical order by last name). A total of 85&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;people contributed to this release. People with a * by their names&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;contributed a patch for the first time for this release; 56 people&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;contributed for the first time for this release.&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;I particularly want to thank Ondrej, who helped set up an&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;infrastructure for automating this release, without with this release&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;would not have been possible.&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Thanks to everyone who contributed to this release!&lt;/span&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;br style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot; /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Acebulf*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Akshit Agarwal*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Ankit Agrawal*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Tom Bachmann&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Madeleine Ball*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Raoul Bourquin&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Christian Bühler&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;CJ Carey*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Ondřej Čertík&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Mary Clark*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Chris Conley*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Renato Coutinho&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Björn Dahlgren*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Christopher Dembia*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Guru Devanla&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Rishabh Dixit*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Alexander Eberspächer*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Pavel Fedotov&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Benjamin Fishbein*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sean Ge*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Gilbert Gede&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Brian E. Granger&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Angus Griffith*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Chetna Gupta*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Ananya H*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Randy Heydon*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Alexander Hirzel*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Thomas Hisch*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;hm*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Matthew Hoff*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Case Van Horsen*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Katja Sophie Hotz*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Max Hutchinson*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sachin Irukula&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sergiu Ivanov&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Amit Jamadagni*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Saurabh Jha&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sachin Joglekar*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Varun Joshi*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Robert Kern&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sergey B Kirpichev*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Stefan Krastanov&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Manoj Kumar*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Patrick Lacasse*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Ronan Lamy&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Colleen Lee*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Oliver Lee*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;David Li&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Stephen Loo*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Huijun Mai*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Aaron Meurer&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Angadh Nanjangud&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Eric Nelson*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sherjil Ozair&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Mateusz Paprocki&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Tarang Patel*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Khagesh Patel*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Mario Pernici&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Luke Peterson&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Tyler Pirtle*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Vasily Povalyaev*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Seshagiri Prabhu*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Pradyumna*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Roland Puntaier*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Bharath M R&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Shravas K Rao*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Thilina Rathnayake*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Timothy Reluga*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Julien Rioux&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Matthew Rocklin&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Christophe Saint-Jean*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Prasoon Shukla*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Chris Smith&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Cristóvão Sousa&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Brian Stephanik*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Marek Šuppa*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Tim Swast*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Grzegorz Świrski&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Matthew Tadd*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Niklas Thörne*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Ramana Venkata*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Sean Vig&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Demian Wassermann*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Erik Welch*&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Stefen Yin*&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;</description>
	<pubDate>Sun, 14 Jul 2013 19:48:50 +0000</pubDate>
	<author>noreply@blogger.com (Aaron Meurer)</author>
</item>
<item>
	<title>Katja Sophie Hotz: Fourth week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=174</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/07/14/fourth-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;This week I finalized my work on the modular GCD algorithms for integer polynomials and submitted a &lt;a href=&quot;https://github.com/sympy/sympy/pull/2281&quot;&gt;PR&lt;/a&gt; on github!&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;I spent my time writing documentation and additional tests and cleaning up my code. Since the &lt;a href=&quot;https://github.com/sympy/sympy/pull/2126&quot;&gt;new-polys&lt;/a&gt; branch was merged a few days ago, I could rewrite some parts of my algorithms to make the code more consistent and elegant. In particular, some of the conversions to dense representation are now being avoided.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Mateusz showed me the very useful tool &lt;code&gt;coverage_report&lt;/code&gt;, which finds untested lines of code. There was quite a lot untested, so I spent some time with the construction of tests. Sometimes finding the right examples was not as easy as it seemed and there are still some lines untested, but I did reach 97% coverage.&lt;br /&gt;
Another new tool I learned to use this week was Sphinx. I like the html documentation very much, since it is a lot more readable than plain text and even supports LaTeX.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Next week I will start with the modular GCD algorithm for polynomials over algebraic domains.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/174/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/174/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=174&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 14 Jul 2013 16:52:07 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: GSoC Week4: Improvements</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-1263476314884744181</guid>
	<link>http://codesachin.blogspot.com/2013/07/gsoc-week4-improvements.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This has been a slow week, with a lot of ups and downs, work-wise.&lt;br /&gt;Firstly, my laptop's LAN card decided to stop working properly, keeping me busy talking to the Dell customer service and convincing them that something &lt;i&gt;is &lt;/i&gt;wrong with the thing. After a lot of troubleshooting and failed tests on their part (they even tried remote desktop connection to see what was going wrong), they finally agreed that something needs to be done. I hope it gets fixed before I go back to campus.&lt;br /&gt;&lt;br /&gt;As far as the GSoC work is concerned, firstly, I got the Particle code finalised on Tuesday after a review by Gilbert.&lt;br /&gt;Next, I spent the whole of Wednesday hacking the old mechanics framework to act as the base to test my own code on. I felt the need to do this, as I was anxious to see whether my own work was functioning as I thought it would, and it would take some time before Prasoon could get his framework in a completely consistent state (thats natural, considering the complexity of the work involved). It took a lot of time, as I had to tweak the old framework to support coordinate variables, use substitution on them during re-expression and time-differentiation, and so on...&lt;br /&gt;Finally, I got it to work and tested my own code. It worked perfectly! There were a few errors that had to be rectified for the tuple-args format to function, but the rest of it went smoothly.&lt;br /&gt;&lt;br /&gt;This is a &lt;i&gt;real &lt;/i&gt;SymPy session using the hacked module and my own work-&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;1:  &amp;gt;&amp;gt;&amp;gt; O = MovingRefFrame('O')  &lt;br /&gt;2:  &amp;gt;&amp;gt;&amp;gt; F1 = MovingRefFrame('F1', trans_vel = 3 * O.x + 4 * O.y,  &lt;br /&gt;3:                    pos_vector_b = O.x + O.y + O.z, parentframe = O)  &lt;br /&gt;4:  &amp;gt;&amp;gt;&amp;gt; F1.pos_vector_in(O)  &lt;br /&gt;5:  (3*t + 1)*O.x + (4*t + 1)*O.y + O.z  &lt;br /&gt;6:  &amp;gt;&amp;gt;&amp;gt; Q = Symbol('Q', positive = True)  &lt;br /&gt;7:  &amp;gt;&amp;gt;&amp;gt; F2 = MovingRefFrame('F2', ang_vel = Q * O.z, parentframe = O)  &lt;br /&gt;8:  &amp;gt;&amp;gt;&amp;gt; F3 = MovingRefFrame('F3', pos_vector = F2.x, parentframe = F2)  &lt;br /&gt;9:  &amp;gt;&amp;gt;&amp;gt; F3.pos_vector_in(O)  &lt;br /&gt;10:  F2.x  &lt;br /&gt;11:  &amp;gt;&amp;gt;&amp;gt; O.express(F3.trans_acc_in(O))  &lt;br /&gt;12:  - Q**2*cos(Q*t)*O.x - Q**2*sin(Q*t)*O.y  &lt;br /&gt;13:  &amp;gt;&amp;gt;&amp;gt; P = Symbol('P')  &lt;br /&gt;14:  &amp;gt;&amp;gt;&amp;gt; F4 = MovingRefFrame('F4', orient_type = 'Axis', orient_amount = [P * t, F1.x], \  &lt;br /&gt;15:                    parentframe = F1)  &lt;br /&gt;16:  &amp;gt;&amp;gt;&amp;gt; F4.ang_vel_in(F3)  &lt;br /&gt;17:  P*F1.x - Q*O.z  &lt;br /&gt;18:  &amp;gt;&amp;gt;&amp;gt; F5 = MovingRefFrame('F5', orient_type = 'Axis', orient_amount = [Q, F1.x], \  &lt;br /&gt;19:                    trans_vel = ((0, 0, 1), 0), parentframe = F4)  &lt;br /&gt;20:  &amp;gt;&amp;gt;&amp;gt; F3.express(F5.pos_vector_in(O))  &lt;br /&gt;21:  (-t*sin(Q*t)*sin(P*t + Q) + 4*t*sin(Q*t) + 3*t*cos(Q*t) + sqrt(2)*sin(Q*t + pi/4))*F3.x + (-3*t*sin(Q*t) - t*sin(P*t + Q)*cos(Q*t) + 4*t*cos(Q*t) + sqrt(2)*cos(Q*t + pi/4))*F3.y + (t*cos(P*t + Q) + 1)*F3.z  &lt;br /&gt;22:  &amp;gt;&amp;gt;&amp;gt; F5.pos_vector_in(F4)  &lt;br /&gt;23:  - t*sin(Q)*F4.y + t*cos(Q)*F4.z  &lt;br /&gt;24:  &amp;gt;&amp;gt;&amp;gt; F5.trans_vel_in(O)  &lt;br /&gt;25:  (-P*t*cos(Q) - sin(Q))*F4.y + (-P*t*sin(Q) + cos(Q))*F4.z + 3*O.x + 4*O.y  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Line 3 means that frame F1 should have an initial position of O.x + O.y + O.z wrt O. Substituting t = 0 in the output at line 5 will confirm this. To put in the boundary conditions at some other value of time, user just has to enter the keyword arg 't'.&lt;br /&gt;Line 21 adequately shows how complicated things can get after a while.&lt;br /&gt;Line 19 is an example how a tuple argument can be used in the new framework to position/orient new frames wrt their parents. Line 19 essentially means that F5 will have a translational velocity of 1 * F5.z after being oriented as per the user's conditions.&lt;br /&gt;(All these things are adequately explained in the docs)&lt;br /&gt;&lt;br /&gt;This work with the old module convinced me that dynamicsymbols should also be a part of my own work, since it makes handling of time variables &lt;i&gt;considerably&lt;/i&gt; simpler. Hence, I added the function in my last commit to the PR.&lt;br /&gt;&lt;br /&gt;Last but not the least, I planned out some basic vector/scalar field functions for my E-M module. But more on that later.&lt;br /&gt;&lt;br /&gt;Now that I have my entire workspace up and running on my old laptop (temporarily), I will continue with the following work in the coming time-&lt;br /&gt;1) Enable users to enter initial orientation in the same way they enter the time-dependent orientation. As of now, they get to do so only by entering the initial rotation in terms of a vector. Awkward, I agree.&lt;br /&gt;2) Write tests for the MovingRefFrame and Particle classes as well as all the helper functions. Now that I have a system to test these things on, it will be much easier to do so.&lt;br /&gt;3) Start working on the last part of the new framework - dyadics.&lt;br /&gt;&lt;br /&gt;Thats all for now.&lt;br /&gt;Have a great week ahead :-)&lt;/div&gt;</description>
	<pubDate>Sat, 13 Jul 2013 13:26:18 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Chetna Gupta: Coupled Differential System</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=290</guid>
	<link>http://geekiology.wordpress.com/2013/07/13/coupled-differential-system/</link>
	<description>&lt;p&gt;Pseudo-Code for the coupled_differential_system in cds.py (Marked things differently to increase readability of the code snippets required in the method to solve coupled_differential_system)&lt;/p&gt;
&lt;p&gt;   # taking the general case that is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Calpha+%3D+-1+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\alpha = -1 &quot; class=&quot;latex&quot; title=&quot;\alpha = -1 &quot; /&gt;&lt;br /&gt;
   # it &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csqrt-1+does+not+%5Cin+K+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\sqrt-1 does not \in K &quot; class=&quot;latex&quot; title=&quot;\sqrt-1 does not \in K &quot; /&gt;&lt;br /&gt;
   # &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Dy1+%2B+b1%2Ay1+-+b2%2Ay2+%3D+c1+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Dy1 + b1*y1 - b2*y2 = c1 &quot; class=&quot;latex&quot; title=&quot;Dy1 + b1*y1 - b2*y2 = c1 &quot; /&gt;&lt;br /&gt;
   # &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Dy2+%2B+b2%2Ay1+%2B+b1%2Ay2+%3D+c2+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Dy2 + b2*y1 + b1*y2 = c2 &quot; class=&quot;latex&quot; title=&quot;Dy2 + b2*y1 + b1*y2 = c2 &quot; /&gt;&lt;br /&gt;
   # so we have second order differential equations&lt;br /&gt;
   # we are interested in finding s = s1 + &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csqrt-1s2+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\sqrt-1s2 &quot; class=&quot;latex&quot; title=&quot;\sqrt-1s2 &quot; /&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;   fa = b1a*b2d + b1d*b2a*i
   fd = b1d*b2d
   ga = c1a*c2d + c1d*c2a*i
   gd = c1d*c2d
   _, (fa, fd) = weak_normalizer(fa, fd, DE)
   a, (ba, bd), (ca, cd), hn = normal_denom(fa, fd, ga, gd, DE)
   A, B, C, hs = special_denom(a, ba, bd, ca, cd, DE)
   g = gcd(A, B)
   A, B, G = A.quo(g), B.quo(g), [gia.cancel(gid*g, include=True) for
    gia, gid in G]
   Q, M = prde_linear_constraints(A, B, G, DE)
   M, _ = constant_system(M, zeros(M.rows, 1), DE)
   n = bound_degree(A, B, C, DE)
   b, c, m, alpha, beta = spde(A, B, C, n, DE)
   # either proved that there exists y such that
   # y = (alpha*q + beta)/m &amp;amp;amp;&amp;amp;amp; Dq + bq = c
   # else return &quot;No Solution&quot;
   /non-cancellation cases
   if deg(b) &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cle+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\le &quot; class=&quot;latex&quot; title=&quot;\le &quot; /&gt; DE.d.degree(DE.t) - 1 and (derivation(DE.t, DE)==1or DE.d.degree(DE.t) &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%26gt%3B%3D+2%29+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;&amp;gt;= 2) &quot; class=&quot;latex&quot; title=&quot;&amp;gt;= 2) &quot; /&gt; :
       H, A = prde_no_cancel_b_small(b, Q, n, DE)
   else if b!=0 and (derivation(DE.t, DE)==1 or DE.d.degree(DE.t) &amp;amp;gt; max(0, derivation(DE.t, DE) - 1 )):
       H, A = prde_no_cancel_b_large(b, Q, n, DE)

    # A = (c1...cm, d1.. dr)T q = &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum+d_i%2Ah_i+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\sum d_i*h_i &quot; class=&quot;latex&quot; title=&quot;\sum d_i*h_i &quot; /&gt;
    return y
    /cancellation cases&amp;lt;/strong&amp;gt;&amp;lt;/code&amp;gt;

    case = DE.case
    else if case == 'primitive':
       (q1, q2) = cds_cancel_prim(a, b1, b2, c1, c2, DE, n)
    else if case == 'exp':
       (q1, q2) = cds_cancel_exp(a, b1, b2, c1, c2, DE, n)
    else if case == 'tan' :&amp;lt;/span&amp;gt;
       (q1, q2) = cds_cancel_tan(b1, b2, c1, c2, DE, n)  
    else if case == 'other non linear':
       (q1, q2) = cds_cancel_non_linear(b1, b2, c1, c2, DE, n)
    return y
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Where Y = &lt;code&gt;(alpha*q + beta)/m&lt;/code&gt; &lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;q = q1 +  sqrt(-1)*q2&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;em&gt;&lt;strong&gt;
&lt;p&gt;There have been a lot of changes in the above code (which shows how the files would integrate to get the cds working)&lt;/p&gt;
&lt;p&gt;————So here is Version 1.1 for the above —————–&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;def coupled_DE_System()
    from sympy.integrals.rde import (no_cancel_b_large,
    no_cancel_b_small, no_cancel_equal)
    b1a, b1d = frac_in(b1, DE.t)
    b2a, b2d = frac_in(b2, DE.t)
    c1a, c1d = frac_in(c1, DE.t)
    c2a, c2d = frac_in(c2, DE.t)
    fa = b1a*b2d + b1d*b2a*sqrt(-1) 
    fd = b1d*b2d
    ga = c1a*c2d + c1d*c2a*sqrt(-1)
    gd = c1d*c2d
    _, (fa, fd) = weak_normalizer(fa, fd, DE)
    a, (ba, bd), (ca, cd), hn = normal_denom(fa, fd, ga, gd, DE)
    A, B, C, hs = special_denom(a, ba, bd, ca, cd, DE)
    n = bound_degree(A, B, C, DE)
    b, c, m, alpha, beta = spde(A, B, C, n, DE)
    # non cancellation cases solve for q
    if not b.is_zero and (DE.case == 'base' or b.degree(DE.t) &amp;amp;gt; max(0, DE.d.degree(DE.t) - 1)):
        try:
           q = no_cancel_b_large(b, c, n, DE)
           return Poly(cancel((alpha*q + beta)/m) , DE.t)
        except NonElementaryIntegralException:
           return None
    elif (b.is_zero or b.degree(DE.t) &amp;amp;lt; DE.d.degree(DE.t) - 1) and (DE.case == 'base' or DE.d.degree(DE.t) &amp;amp;gt;= 2):
        try:
           q = no_cancel_b_small(b, c, n, DE)
           return Poly(cancel((alpha*q + beta)/m) , DE.t)
        except NonElementaryIntegralException:
           return None
    elif DE.d.degree(DE.t) &amp;amp;gt;= 2 and b.degree(DE.t) == DE.d.degree(DE.t) - 1 and n &amp;amp;gt; -b.as_poly(DE.t).LC()/DE.d.as_poly(DE.t).LC():
        try:
           q = no_cancel_equal(b, c, n, DE)
           return Poly(cancel((alpha*q + beta)/m) , DE.t)
        except NonElementaryIntegralException:
           return None
    # Does not fall in non cancellation
    # Hence cancellation cases 
    case = DE.case
    a = Poly(sqrt(-1) , DE.t)
    if case == 'primtive':
       (q1, q2) = cds_cancel_prim(a, b1, b2, c1, c2, DE, n)
    if case == 'exp':
       (q1, q2) = cds_cancel_exp(a, b1, b2, c1, c2, DE, n)
    if case == 'tan':
       (q1, q2) = cds_cancel_tan(a, b1, b2, c1, c2, DE, n)
    return Poly(cancel(((q1 + sqrt(-1)*q2)*alpha + beta)/m), DE.t)&amp;lt;/p&amp;gt;
&lt;/pre&gt;
&lt;p&gt;I have written this code here due to unavailability of pseudo code and not-working test-cases. So don’t want anything to be left as my guess work. Comments/Reviews about the code or the style of implementation are most welcome&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/290/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/290/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=290&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;/strong&gt;&lt;/em&gt;</description>
	<pubDate>Sat, 13 Jul 2013 08:16:37 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: Stuck in the guessing game</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=596</guid>
	<link>http://manojbits.wordpress.com/2013/07/13/stuck-in-the-guessing-game/</link>
	<description>&lt;p&gt;Hello. I had thought that at the time of writing this post, I would have comfortably finished the sixth heuristic. However the Maple paper hasn’t been kind to me, because not knowing how to implement an algorithm is tough enough, but not knowing what the algorithm is, is hell. The good part (?)  is that Sean too had no idea, when he had a quick look (though he said he may help me get some insight later on), when I talked to him on GTalk and Aaron too when I met on IRC. I’ve also not written anything for ten days, so I’m trying to write, a detailed post here, so that if anyone at Planet SymPy stumble upon this, they could comment here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The fifth heuristic:&lt;/strong&gt;&lt;br /&gt;
The Maple paper has been giving me mixed signals, and half of my time goes in interpreting what the authors are trying to say, and most of the time I get it wrong, and so the other half goes in trying to interpret it the right way. So these are the two steps, as described by the paper.&lt;br /&gt;
1. A basis of functions and algebraic objects is built by taking, from the given ODE, all the known functions and composite algebraic objects, together with their derivatives, as well as all the unknown functions&lt;br /&gt;
2. A polynomial of degree 2 in such objects is built; its coefficients, in turn, are polynomials of degree d in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So what does this mean? This is what even I was trying to figure out. Let us now look at the single example that they managed to provide.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%2A%5Cfrac%7Bdy%7D%7Bdx%7D%2Alog%28x%29%2Asin%28x%29+%2B+cos%28y%29%2A%281+-+x%2Acosy%29+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x*\frac{dy}{dx}*log(x)*sin(x) + cos(y)*(1 - x*cosy) = 0&quot; class=&quot;latex&quot; title=&quot;x*\frac{dy}{dx}*log(x)*sin(x) + cos(y)*(1 - x*cosy) = 0&quot; /&gt;. Rearranging this gives me &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bcos%28y%29%2A%281+-+x%2Acosy%29%7D%7Bx%2Alog%28x%29%2Asin%28x%29%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{cos(y)*(1 - x*cosy)}{x*log(x)*sin(x)}&quot; class=&quot;latex&quot; title=&quot;\frac{cos(y)*(1 - x*cosy)}{x*log(x)*sin(x)}&quot; /&gt;. Fair enough.&lt;/p&gt;
&lt;p&gt;My first impression was that I had to take all algebraic objects from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=cos%28y%29%2Fx%2C+x%2Acos%28y%29%5E%7B2%7D%2C+cos%28y%29%2Flog%28x%29%2C+cos%28y%29%2Fsin%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;cos(y)/x, x*cos(y)^{2}, cos(y)/log(x), cos(y)/sin(x)&quot; class=&quot;latex&quot; title=&quot;cos(y)/x, x*cos(y)^{2}, cos(y)/log(x), cos(y)/sin(x)&quot; /&gt;, and I wrote a bit of optimised &lt;a href=&quot;https://github.com/Manoj-Kumar-S/sympy/commit/66362477f8779a9f00ab9bd30b73c99ae966a7e9&quot;&gt;code&lt;/a&gt;, (atleast I think), I found out that there are 19 possible factors, and according to the step 2, including the derivatives, and the second degree terms I would get a maximum of 19 + 19(derivatives) + 19*&lt;img src=&quot;http://s0.wp.com/latex.php?latex=C_%7B2%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;C_{2}&quot; class=&quot;latex&quot; title=&quot;C_{2}&quot; /&gt;(second degree terms of power one) + 19(terms of power 2) from which I can built the polynomial. Obviously, substituting it in the PDE, grouping terms, and using solve, would be computationally expensive for SymPy. Sean then told me its since the paper tells only ‘composite algebraic objects’  it is enough to limit to three algebraic objects, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=cos%28y%29%2C+x%2Acos%28y%29%5E%7B2%7D%2C+x%2Alog%28x%29%2Asin%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;cos(y), x*cos(y)^{2}, x*log(x)*sin(y)&quot; class=&quot;latex&quot; title=&quot;cos(y), x*cos(y)^{2}, x*log(x)*sin(y)&quot; /&gt;. So this is the approach, that I used.&lt;/p&gt;
&lt;p&gt;1. Use &lt;strong&gt;as_numer_denom&lt;/strong&gt;() to extract the numerator, denominator of unsimplified &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt;,  expand the numerator and denominator,  which would give the list of factors. Obviously suppose I have something like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=2%2Asiny&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;2*siny&quot; class=&quot;latex&quot; title=&quot;2*siny&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-+siny&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;- siny&quot; class=&quot;latex&quot; title=&quot;- siny&quot; /&gt;, they should be treated as same, I wrote a helper function called _rem_num, which would remove the numeric arguments from &lt;strong&gt;Mul &lt;/strong&gt;and &lt;strong&gt;Pow.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2. Iterate over the list and add derivatives, From this add the second degree terms, and first terms. This gives the basis with which I can build the polynomial. For the given differential equation, I get the following basis, &lt;a href=&quot;https://gist.github.com/Manoj-Kumar-S/5989623&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/Manoj-Kumar-S/5989623&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;3. Now, since instead of taking the factors, one at a time, two at a time, three at a time and so on, I thought it would be better to build a general polynomial, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum_%7Bk%3D1%7D%5EnCk%2Atermk&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\sum_{k=1}^nCk*termk&quot; class=&quot;latex&quot; title=&quot;\sum_{k=1}^nCk*termk&quot; /&gt; and substitute it in the PDE, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Cchi%7D%7B%5Cpartial+x%7D+%2B+h%2A%5Cfrac%7B%5Cpartial+%5Cchi%7D%7B%5Cpartial+y%7D+-+%5Cchi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \chi}{\partial x} + h*\frac{\partial \chi}{\partial y} - \chi*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \chi}{\partial x} + h*\frac{\partial \chi}{\partial y} - \chi*\frac{\partial h}{\partial y}&quot; /&gt;. If it is a single term polynomial, then the coefficients of the other terms become zero. So the first sub-step is done.&lt;/p&gt;
&lt;p&gt;4. For the second step, Maple says I need bivariate coefficients in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;, for the terms in the polynomial, So to sum up this is the pseudocode I used,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize a coefficient dict to {}&lt;/li&gt;
&lt;li&gt;Take the first term in the basis, substitute it in the PDE, if it simplifies to zero, great you’ve got your infinitesimal, If it doesn’t group the like terms and store it in the coefficient_dict&lt;/li&gt;
&lt;li&gt;Repeat the above mentioned process for all the terms in the basis&lt;/li&gt;
&lt;li&gt;Once, it is done for all the terms in the basis, use solve to find if the coefficients, give a non-trivial solution.&lt;/li&gt;
&lt;li&gt;If it doesn’t then start from beginning, however use &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28a%2Ax+%2B+b%2Ay%29%2Aterm&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(a*x + b*y)*term&quot; class=&quot;latex&quot; title=&quot;(a*x + b*y)*term&quot; /&gt;, and then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a%2Ax%5E%7B2%7D+%2B+b%2Ax%2Ay+%2B+c%2Ay%5E%7B2%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a*x^{2} + b*x*y + c*y^{2}&quot; class=&quot;latex&quot; title=&quot;a*x^{2} + b*x*y + c*y^{2}&quot; /&gt; till it reaches a maximum limit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the most optimized way that I could think of,  and the code works well for the example given. But I am facing weird test failures, for the tests that I have added, For example when I do&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;eq3 = (1 + 2*x)*f(x).diff(x) + 2 - 4*exp(-f(x))
infinitesimals(eq3)
[{eta(x, f(x)): 0, xi(x, f(x)): 2*x + 1},
{eta(x, f(x)): 0, xi(x, f(x)): 1/(exp(f(x)) - 2)}]
&lt;/pre&gt;
&lt;p&gt;However, when I try to print it while running tests, I get an extra term. I have no idea how I get this difference.&lt;br /&gt;
&lt;strong&gt;The sixth heuristic:&lt;/strong&gt;&lt;br /&gt;
Okay, so this is where I had no idea what to implement and how, and I am in this position for about three days, and that isn’t promising. Let us take the PDE again, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D+%2B+%28%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+y%7D+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+x%7D%29%2Ah+-+%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D%2Ah%5E%7B2%7D+-+%5Cxi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%5Ceta%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x})*h - \frac{\partial \eta}{\partial x}*h^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y} = 0&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x})*h - \frac{\partial \eta}{\partial x}*h^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y} = 0&quot; /&gt; . So I make the following four assumptions on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt;&lt;/p&gt;
&lt;p&gt;1. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+f%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = f(x)&quot; class=&quot;latex&quot; title=&quot;\eta = f(x)&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi+%3D+g%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi = g(y)&quot; class=&quot;latex&quot; title=&quot;\xi = g(y)&quot; /&gt;&lt;br /&gt;
2. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+f%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = f(x)&quot; class=&quot;latex&quot; title=&quot;\eta = f(x)&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi+%3D+g%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi = g(x)&quot; class=&quot;latex&quot; title=&quot;\xi = g(x)&quot; /&gt;&lt;br /&gt;
3. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+f%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = f(y)&quot; class=&quot;latex&quot; title=&quot;\eta = f(y)&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi+%3D+g%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi = g(y)&quot; class=&quot;latex&quot; title=&quot;\xi = g(y)&quot; /&gt;&lt;br /&gt;
4. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+f%28y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = f(y)&quot; class=&quot;latex&quot; title=&quot;\eta = f(y)&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi+%3D+g%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi = g(x)&quot; class=&quot;latex&quot; title=&quot;\xi = g(x)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let us take the fourth assumption, the PDE reduces to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28%5Cfrac%7Bdf%7D%7Bdy%7D+-+%5Cfrac%7Bdg%7D%7Bdx%7D%29%2Ah+-+f%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+g%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(\frac{df}{dy} - \frac{dg}{dx})*h - f*\frac{\partial h}{\partial x} - g*\frac{\partial h}{\partial y} = 0&quot; class=&quot;latex&quot; title=&quot;(\frac{df}{dy} - \frac{dg}{dx})*h - f*\frac{\partial h}{\partial x} - g*\frac{\partial h}{\partial y} = 0&quot; /&gt;. The Maple paper says:&lt;br /&gt;
1. subdivide the equation into subexpressions involving only one of {f, g};&lt;br /&gt;
2. build a list of candidates for f and for g with the solutions to these subexpressions;&lt;br /&gt;
3. build a list of pairs of candidates by taking one candidate from each list.&lt;/p&gt;
&lt;p&gt;Now what on earth, the first step is supposed to mean, I have no idea. My first impression, when I was writing my proposal and a few days back, was that I had to split it into,  two different ODE’s so that I should solve &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdf%7D%7Bdy%7D+-+f%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{df}{dy} - f*\frac{\partial h}{\partial x}= 0&quot; class=&quot;latex&quot; title=&quot;\frac{df}{dy} - f*\frac{\partial h}{\partial x}= 0&quot; /&gt;and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdg%7D%7Bdx%7D%2Ah+%2B+g%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D+%3D+0&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{dg}{dx}*h + g*\frac{\partial h}{\partial y} = 0&quot; class=&quot;latex&quot; title=&quot;\frac{dg}{dx}*h + g*\frac{\partial h}{\partial y} = 0&quot; /&gt; individually. However I can never be more wrong, since it then is a sub-part of the first heuristic, and also according to the example given that is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+%5Cfrac%7Be%5E%7Bx%7D%7D%7B%5Csqrt%7By%7D%7D%2AF%28%5Csqrt%5B3%5D%7By%7D+-+%5Cfrac%7B3%2Ae%5E%7Bx%7D%7D%7B2%7D%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx} = \frac{e^{x}}{\sqrt{y}}*F(\sqrt[3]{y} - \frac{3*e^{x}}{2})&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx} = \frac{e^{x}}{\sqrt{y}}*F(\sqrt[3]{y} - \frac{3*e^{x}}{2})&quot; /&gt; , the infinitesimals found out are &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7Be%5E%7Bx%7D%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{1}{e^{x}}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{e^{x}}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7By%7D%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{1}{\sqrt{y}}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{\sqrt{y}}&quot; /&gt; , there seems to be a term that is common to both &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;g&quot; class=&quot;latex&quot; title=&quot;g&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;So that sums up, my last ten days coding or trying to code rather. I know Maple is not open-source and all that, but it would have been really nice if they had provided a few more examples on each of the heuristics, instead of just giving a single line which can be comprehended in a thousand different ways.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/596/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/596/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=596&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 13 Jul 2013 07:46:04 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: From Euclid To Gauss via Pell</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=92</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/07/12/to-gauss-from-euclid-via-pell/</link>
	<description>&lt;div class=&quot;markdown-here-wrapper&quot; id=&quot;markdown-here-wrapper-947996&quot;&gt;
&lt;p style=&quot;&quot;&gt;While the fourth week of GSoC is coming to an end, I managed to finish two of the five deliverables of my project proposal. So the fourth week is more of a transition week for me as I had to correct few bugs associated with current implementation of QDEs (Quadratic Diophantine Equation) and LDEs (Linear Diophantine Equation) and find new resources for the future work, solving Ternary Quadratic Forms.&lt;/p&gt;
&lt;p style=&quot;&quot;&gt;In QDE I had a little problem dealing with the case where &lt;code style=&quot;font-size: .85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0 .15em; padding: 0 .3em; white-space: pre-wrap; border: 1px solid #eaeaea; background-color: #f8f8f8; border-radius: 3px 3px 3px 3px; display: inline;&quot;&gt;B**2 - 4*A*C&lt;/code&gt; is a perfect square. General solution procedure for this case is to use a transformation which converts this case to the Simple Hyperbolic case which I had solved previously. Then the original solutions can be recovered from the solutions of the transformed equation using two divisible criteria which should be satisfied to honour the transformation. Things went wrong when the solutions of the transformed equation involved parameters because I had to check finitely many equivalence classes with respect to modulo &lt;code style=&quot;font-size: .85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0 .15em; padding: 0 .3em; white-space: pre-wrap; border: 1px solid #eaeaea; background-color: #f8f8f8; border-radius: 3px 3px 3px 3px; display: inline;&quot;&gt;4*A*sqrt(B**2 - 4*A*C&lt;/code&gt; in that case and find whether there are any classes satisfying the criteria and find a nice representation for the solutions if at least one such class exist. I found this hard going but finally managed to implement it. Work related to the QDEs are almost finished and there are a few optimization steps to be carried out. For example I use brute force to solve the congruence equation &lt;code style=&quot;font-size: .85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0 .15em; padding: 0 .3em; white-space: pre-wrap; border: 1px solid #eaeaea; background-color: #f8f8f8; border-radius: 3px 3px 3px 3px; display: inline;&quot;&gt;x**2 = D (mod a)&lt;/code&gt; and there is an algorithm which is more efficient. I hope to implement it since this equation will come up in my future work too. Several extensions can also be carried out like finding the rational solutions satisfying a given QDE and implementing other algorithms like the cyclic method which also solves QDEs.&lt;/p&gt;
&lt;p style=&quot;&quot;&gt;I also corrected an error I had done in linear Diophantine equations due to which the solutions returned by the solver were only a subset of the exact solutions. I corrected this and checked the results with the Wolfram Alpha. Now, the solutions returned by the solver can be made identical to that returned by the Wolfram Alpha by a single shift or by inverting the parameter. Since the parameters returned in solutions for linear Diophantine equations has no boundary conditions and can be an any integer, this does not make the two solution sets different.&lt;/p&gt;
&lt;p style=&quot;&quot;&gt;During the week, I also studied the ternary quadratic forms, on which I plan to work in the weeks to come. A ternary quadratic form is a homogeneous equation in three variables and having a degree two, i.e. a equation of the form &lt;code style=&quot;font-size: .85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0 .15em; padding: 0 .3em; white-space: pre-wrap; border: 1px solid #eaeaea; background-color: #f8f8f8; border-radius: 3px 3px 3px 3px; display: inline;&quot;&gt;Ax**2 + By**2 + Cz**2 + Dyz + Exz + Fxy = 0&lt;/code&gt;. I found a good resource on this, “Algorithmic resolution of Diophantine equations” by Nigel P. Smart.&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/92/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/92/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=92&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 12 Jul 2013 20:45:21 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: On Semisimple Lie Algebras (Part 2)</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=54</guid>
	<link>http://meclark256.wordpress.com/2013/07/11/on-semisimple-lie-algebras-part-2/</link>
	<description>&lt;p&gt;Let’s continue on from last week.  So, we have a Lie algebra g, with a root system.  Specifically, we want to consider the simple roots of g.  We can define the Cartan matrix A of g as the matrix whose elements a_{i,j} are defined by&lt;/p&gt;
&lt;p&gt;a_{i,j} = 2 (alpha_i, alpha_j)/(alpha_i, alpha_i) = &amp;lt;alpha_i, alpha_j&amp;gt;&lt;/p&gt;
&lt;p&gt;where the inner product (a, b) is the Killing form: (a, b) = Tr (ad a) (ad b) where ad denotes the adjoint action.  Effectively, the Cartan matrix is one way of encoding the simple roots (and by extension, the entire root system) of the Lie algebra.&lt;/p&gt;
&lt;p&gt;Next we want to understand a bit more about Dynkin diagrams.   Given g and its simple roots, we may construct its Dynkin diagram as follows.&lt;/p&gt;
&lt;p&gt;For every simple root, draw a dot.  Join the ith dot to the jth dot with &amp;lt;alpha_i, alpha_j&amp;gt;&amp;lt;alpha_j, alpha_i&amp;gt; edges.  If the two simple roots alpha_i and alpha_j have different length, add an arrow pointing to the shorter root.  Now, it can be shown that one can classify the irreducible root systems by classifying the connected Dynkin diagrams.  Thus, if we have an irreducible root system Φ of rank l, then its Dynkin diagram is one of the following:&lt;/p&gt;
&lt;div style=&quot;width: 330px;&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Finite_Dynkin_diagrams.svg/320px-Finite_Dynkin_diagrams.svg.png&quot; alt=&quot;&quot; width=&quot;320&quot; height=&quot;112&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;(From wikipedia)&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;So again, Dynkin diagrams are another way of classifying simple and semisimple Lie algebras.  I think that more or less covers the basics of simple and semisimple Lie algebras, so I’ll leave things there.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;On the coding front, I’ve finished writing and commenting type_A.py, type_B.py, type_C.py, type_D.py, type_E.py, type_F.py, and type_G.py as well as writing tests.  I’ve got pull requests up for type_A and type_B, and I’ll do the rest this weekend. I’m about to write start writing tests for cartan_type.py.  That will be tomorrow’s project.&lt;/p&gt;
&lt;p&gt;I’ve realised that implementing the commutation relations is a huge undertaking (I’d need to first implement matrix representations of every Lie algebra, the adjoint action, actual physical bases and so on) so I’m going to leave that until the end of the project, if I have time.    I’m currently right on schedule, if perhaps a bit ahead, and I want to accomplish everything I listed in my project proposal, and I fear I’d be derailed from that if I were to focus so specifically on commutation relations.&lt;/p&gt;
&lt;p&gt;So…that about sums things up.  Til next week!&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/54/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/54/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=54&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 11 Jul 2013 19:19:04 +0000</pubDate>
</item>
<item>
	<title>Saurabh Jha: Some improved profiles of dense matrix</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-1967164123336361963</guid>
	<link>http://sympymatrix.blogspot.com/2013/07/some-improved-profiles-of-dense-matrix.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;br /&gt;I have some improved profiles of dense addition and multiplication, the fundamental operators of dense matrix. For all the description of various functions I use, please see this &lt;a href=&quot;https://github.com/SaurabhJha/sympy/commit/395cefeb1dd70940cc5ee674c09ec60031aaff76&quot;&gt;commit.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;I diden't use gmpy now, because I was not able to get these to work. I was not able to see how can I use it. So here the focus is only on the data structures of Dense Matrix.&lt;br /&gt;&lt;br /&gt;I am not posting full profiles but only those operations that comparatively cost more.&lt;br /&gt;&lt;br /&gt;========================================================================&lt;br /&gt;First of all we will look at the creation of matrices itself.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;generate_matrix(1000, ZZ)&quot;)&lt;br /&gt;         4009035 function calls in 2.915 seconds&lt;br /&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;      1        0.673    0.673    2.901    2.901 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;1000000  0.741    0.000    0.985    0.000 numbers.py:1522(__new__)&lt;br /&gt;1000000  1.159    0.000    2.144    0.000 sympify.py:50(sympify)&lt;br /&gt;1001005  0.244    0.000    0.244    0.000 {isinstance}&lt;br /&gt;1003000  0.079    0.000    0.079    0.000 {method 'append' of 'list' objects}&lt;span style=&quot;white-space: pre;&quot; class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;generate_matrix2(1000, ZZ)&quot;)&lt;br /&gt;         4005 function calls in 0.003 seconds&lt;br /&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;     1    0.002    0.002    0.003    0.003 densetools.py:157(generate_matrix2)&lt;br /&gt;    &lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;generate_matrix(2000, ZZ)&quot;)&lt;br /&gt;         16018035 function calls in 11.980 seconds&lt;br /&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;           1    2.769    2.769   11.933   11.933 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;4000000   3.046    0.000    4.055    0.000 numbers.py:1522(__new__)   &lt;br /&gt;4000000   4.763    0.000    8.818    0.000 sympify.py:50(sympify)&lt;br /&gt;4002005   1.010    0.000    1.010    0.000 {isinstance}&lt;br /&gt;4006000   0.325    0.000    0.325    0.000 {method 'append' of 'list' objects}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;generate_matrix2(2000, ZZ)&quot;)&lt;br /&gt;         8005 function calls in 0.006 seconds&lt;br /&gt;&lt;br /&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;     1    0.003    0.003    0.006    0.006 densetools.py:157(generate_matrix2)&lt;br /&gt;  2000    0.001    0.000    0.002    0.000 domain.py:67(__call__)&lt;br /&gt;&lt;br /&gt;Bottlenecks: sympify, numbers, isinstance.&lt;br /&gt;&lt;br /&gt;Will sympify and numbers problems get solved if we use gmpy.&lt;br /&gt;========================================================================&lt;br /&gt;&lt;br /&gt;Let's look at addition now.&lt;br /&gt;&lt;br /&gt;&lt;span id=&quot;goog_1615297234&quot;&gt;&lt;/span&gt;&lt;span id=&quot;goog_1615297235&quot;&gt;&lt;/span&gt;a = generate_matrix(1000, ZZ)&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;a + a&quot;)&lt;br /&gt;         10006072 function calls in 6.123 seconds&lt;br /&gt;ncalls    tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;1000000    0.423    0.000    0.739    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;br /&gt;1000000    0.666    0.000    3.566    0.000 matrices.py:519(&amp;lt;lambda&amp;gt;)&lt;br /&gt;            2    0.667    0.334    2.078    1.039 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;1000000    0.831    0.000    1.079    0.000 numbers.py:1522(__new__)&lt;br /&gt;1000000    1.256    0.000    2.900    0.000 numbers.py:1588(__add__)&lt;br /&gt;2000000    0.663    0.000    0.663    0.000 sympify.py:50(sympify)&lt;br /&gt;3001006    0.814    0.000    0.814    0.000 {isinstance}&lt;br /&gt;      1001    0.622    0.001    4.927    0.005 {map}&lt;span style=&quot;white-space: pre;&quot; class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_add(a, a, ZZ)&quot;)&lt;br /&gt;         11010042 function calls in 7.284 seconds&lt;br /&gt;&lt;br /&gt; ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;      1000    1.286    0.001    3.805    0.004 densetools.py:27(_addr)&lt;br /&gt;2000000    1.295    0.000    1.592    0.000 domain.py:64(new)&lt;br /&gt;2000000    0.849    0.000    2.440    0.000 domain.py:67(__call__)&lt;br /&gt;            1    0.789    0.789    3.425    3.425 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;1000000    0.889    0.000    1.181    0.000 numbers.py:1522(__new__)&lt;br /&gt;2000000    0.297    0.000    0.297    0.000 numbers.py:1552(__int__)&lt;br /&gt;1000000    1.349    0.000    2.530    0.000 sympify.py:50(sympify)&lt;br /&gt;1001005    0.292    0.000    0.292    0.000 {isinstance}&lt;br /&gt;2002000    0.178    0.000    0.178    0.000 {method 'append' of 'list' objects}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_add2(a, a, ZZ)&quot;)&lt;br /&gt;         7005012 function calls in 3.870 seconds&lt;br /&gt; ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;   1000    1.293    0.001    3.830    0.004 densetools.py:27(_addr)&lt;br /&gt;2000000    1.303    0.000    1.600    0.000 domain.py:64(new)&lt;br /&gt;2000000    0.857    0.000    2.458    0.000 domain.py:67(__call__)&lt;br /&gt;2000000    0.298    0.000    0.298    0.000 numbers.py:1552(__int__)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Bottlenecks: lambda, numbers, simplify, is instance in original implementation and domains in second one.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;========================================================================&lt;br /&gt;&lt;br /&gt;Let's look at multiplication now.&lt;br /&gt;&lt;br /&gt;a = generate_matrix(100, ZZ)&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;a*a&quot;)&lt;br /&gt;         11060373 function calls in 7.685 seconds&lt;br /&gt;&lt;br /&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt; 10000    0.781    0.000    7.611    0.001 matrices.py:463(&amp;lt;lambda&amp;gt;)&lt;br /&gt;990000    0.669    0.000    3.597    0.000 matrices.py:464(&amp;lt;lambda&amp;gt;)&lt;br /&gt;2000000   1.790    0.000    2.274    0.000 numbers.py:1522(__new__)&lt;br /&gt;990000    1.223    0.000    2.928    0.000 numbers.py:1588(__add__)&lt;br /&gt;1000000   1.257    0.000    2.916    0.000 numbers.py:1612(__mul__)&lt;br /&gt;  10000   0.268    0.000    3.865    0.000 {_functools.reduce}&lt;br /&gt;5980002    1.585    0.000    1.585    0.000 {isinstance}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_mulmatmat(a, a, ZZ)&quot;)&lt;br /&gt;         6070642 function calls in 3.732 seconds&lt;br /&gt; ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;  10000    1.159    0.000    3.688    0.000 densetools.py:112(_mulrc)&lt;br /&gt;2000000    1.339    0.000    1.639    0.000 domain.py:64(new)&lt;br /&gt;2000000    0.889    0.000    2.527    0.000 domain.py:67(__call__)&lt;br /&gt;2000000    0.300    0.000    0.300    0.000 numbers.py:1552(__int__)&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_mulmatmat2(a, a, ZZ)&quot;)&lt;br /&gt;         6030112 function calls in 3.526 seconds&lt;br /&gt;&lt;br /&gt; ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;  10000    1.106    0.000    3.517    0.000 densetools.py:112(_mulrc)&lt;br /&gt;2000000    1.279    0.000    1.564    0.000 domain.py:64(new)&lt;br /&gt;2000000    0.846    0.000    2.411    0.000 domain.py:67(__call__)&lt;br /&gt;2000000    0.286    0.000    0.286    0.000 numbers.py:1552(__int__)&lt;br /&gt;&lt;br /&gt;This seems promising,  but the domains itself consume a lot of space. So will gmpy boost this up?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Conclusion:&lt;br /&gt;&lt;br /&gt;For addition, we _add2 &amp;gt;&amp;gt; _add but for multiplication, we have _mulmatmat2 ~ _mulmatmat2. So, the situation is somewhat more interesting. A new data structure alone will not fix it. How about making a new basic dense matrix again focssing just on arithmetics, slicing operations and solving equations using rref?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Can we make reductions to lambda calls?&lt;/li&gt;&lt;li&gt;Can numbers.py bottleneck be solved by gmpy?&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 09 Jul 2013 10:14:42 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Tarun Gaba: GSoC Report Week 3</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7526836182390500993.post-2448841775059804252</guid>
	<link>http://tarun-gaba.blogspot.com/2013/07/gsoc-report-week-3.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;So, week three has also came to an end.&lt;br /&gt;Main considerations for this week were to write some unit tests, which would be determining the way main coding is to be done.&lt;br /&gt;As per the timeline,  all tests for Python side, should be complete by the coming week, i.e. which has started from today.&lt;br /&gt;&lt;br /&gt;As for now, I have almost completed tests for Shape class, and I have written some tests for VisualizationFrame. After that I would focus on tests for Scene class, which would act as a manager class, for holding and manipulating JSON data from the Python side, as well as be able to display output in IPython output cells, as well as fire up a server in case of Python interpreter.&lt;br /&gt;&lt;br /&gt;Scene and VisualizationFrame are very important classes for this package. They make up the majority of the API for the visualization implementations.&lt;br /&gt;Also there has been a little confusion on the extent of modularity the package would/should provide.&lt;br /&gt;&lt;br /&gt;Hopefully in a few days things would be more clear, so that I would be able to write tests more exhaustively according to the same.&lt;br /&gt;&lt;br /&gt;Anyways regarding general stuff, the summer period is amazing, and I am getting good responses from my mentor, and also huge support from the community people. So, it makes things easier to do, when we have so much people to help out there, which is also one of the perks of the open source environment.&lt;br /&gt;&lt;br /&gt;Cheers&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 08 Jul 2013 17:34:47 +0000</pubDate>
	<author>noreply@blogger.com (TARUN GABA)</author>
</item>
<item>
	<title>Chetna Gupta: Parametric Lograthimic Derivative</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=292</guid>
	<link>http://geekiology.wordpress.com/2013/07/08/parametric-lograthimic-derivative/</link>
	<description>&lt;p&gt;“Sometimes you have to give up the fight and walk away, and move on to something that’s more productive”. This Week has been full of moments of happiness and sorrow, ecstasy and blues, chaos and system which have all undergone a “git-rebase” to fit into this blog post&lt;br /&gt;
There have been moments when I have felt that things would start working just to realize that there is a lot of heuristic code-snippets, awaiting me to fix their failures. Here is another one “The Great Parametric Log Derivative Problem” which looks like the last problem to me at the moment (hoping it is the last).&lt;br /&gt;
Okay so let me put the important things before I let any of them go unsaid.&lt;br /&gt;
Parametric Lograthimic Derivative which is currently implemented in prde.py has a heuristic code working ie is given a differntial field K of characterstic 0, a hyperexponential monomial &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctheta+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\theta &quot; class=&quot;latex&quot; title=&quot;\theta &quot; /&gt; over K for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%5Cin+K+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f \in K &quot; class=&quot;latex&quot; title=&quot;f \in K &quot; /&gt; to decide whether there are integers &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%2C+m+%5Cin+Z+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n, m \in Z &quot; class=&quot;latex&quot; title=&quot;n, m \in Z &quot; /&gt; with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%5Cne+0+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n \ne 0 &quot; class=&quot;latex&quot; title=&quot;n \ne 0 &quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=nf+%3D+%5Cfrac%7BDv%7D%7Bv%7D+%2B+m%5Cfrac%7BD%5Ctheta%7D%7B%5Ctheta%7D+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; class=&quot;latex&quot; title=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; /&gt;&lt;br /&gt;
has a solution &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v+%5Cin+K+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v \in K &quot; class=&quot;latex&quot; title=&quot;v \in K &quot; /&gt; and to find one such solution if there are solutions.&lt;/p&gt;
&lt;p&gt;This problem arises from determining wheteher elements of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K%28%5Ctheta%29+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K(\theta) &quot; class=&quot;latex&quot; title=&quot;K(\theta) &quot; /&gt; are log-derivative of elements of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K%28%5Ctheta%29+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K(\theta) &quot; class=&quot;latex&quot; title=&quot;K(\theta) &quot; /&gt; or log derivative of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K%28%5Ctheta%29+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K(\theta) &quot; class=&quot;latex&quot; title=&quot;K(\theta) &quot; /&gt; -radical&lt;br /&gt;
Though as mentioned above we have a heuristic but not a complete solution Or if I  put this correctly the parametric log derivative heuristics would fail for most of the cases that are required to be tested in integrate_hypertangent (added in risch.py)&lt;br /&gt;
So here is what needs to be done or probably what looks like the rescue system for now. Yes you gussed it right! Structure theorem has been completely awesome through out, trying to rescue this risch_integrate from each tide of NotImplementedError(though they don’t do it very easily).&lt;/p&gt;
&lt;p&gt;According to structure theorem, f satisfying the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=nf+%3D+%5Cfrac%7BDv%7D%7Bv%7D+%2B+m%5Cfrac%7BD%5Ctheta%7D%7B%5Ctheta%7D+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; class=&quot;latex&quot; title=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; /&gt; equation has an elementary integral over K, which turns out always to be the case in the parametric log derivative problem that arise from the integration of elemetary functions. Let F be an elementary extension of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=K%28%5Ctheta%29+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;K(\theta) &quot; class=&quot;latex&quot; title=&quot;K(\theta) &quot; /&gt; and g &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cin+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\in &quot; class=&quot;latex&quot; title=&quot;\in &quot; /&gt; F be such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%3D+Dg+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f = Dg &quot; class=&quot;latex&quot; title=&quot;f = Dg &quot; /&gt;. Then &lt;img src=&quot;http://s0.wp.com/latex.php?latex=nf+%3D+%5Cfrac%7BDv%7D%7Bv%7D+%2B+m%5Cfrac%7BD%5Ctheta%7D%7B%5Ctheta%7D+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; class=&quot;latex&quot; title=&quot;nf = \frac{Dv}{v} + m\frac{D\theta}{\theta} &quot; /&gt; has a solution with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%5Cne+0+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n \ne 0 &quot; class=&quot;latex&quot; title=&quot;n \ne 0 &quot; /&gt; we get &lt;img src=&quot;http://s0.wp.com/latex.php?latex=nf+%3D+%5Cfrac%7BDv%7D%7Bv%7D+%2B+m%5Cfrac%7BD%28%5Ctheta%29%7D%7B%5Ctheta%7D+%3D+%5Cfrac%7BD%28v%5Ctheta+%5Em%29%7D%7Bv%5Ctheta+%5Em%7D+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;nf = \frac{Dv}{v} + m\frac{D(\theta)}{\theta} = \frac{D(v\theta ^m)}{v\theta ^m} &quot; class=&quot;latex&quot; title=&quot;nf = \frac{Dv}{v} + m\frac{D(\theta)}{\theta} = \frac{D(v\theta ^m)}{v\theta ^m} &quot; /&gt; which implies that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%3D+Dq+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;f = Dq &quot; class=&quot;latex&quot; title=&quot;f = Dq &quot; /&gt; is a log derivative of an F-radical, which ultimately turn outs to be &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum+r_i+Dt_i+%2B+%5Csum+r_i+%5Cfrac%7BDt_i%7D%7Bt_i%7D+%3D+f+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\sum r_i Dt_i + \sum r_i \frac{Dt_i}{t_i} = f &quot; class=&quot;latex&quot; title=&quot;\sum r_i Dt_i + \sum r_i \frac{Dt_i}{t_i} = f &quot; /&gt;&lt;br /&gt;
Finding the rational solutions for all &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r_i+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;r_i &quot; class=&quot;latex&quot; title=&quot;r_i &quot; /&gt; can be done by considering it a system of one linear equation for the r,’s with coefficients in F, then applying constant_system (in prde.py) to obtain a system with coefficients in C and the same constant solutions. Assuming that we have a vector space basis containing 1 for C over Q, projecting that system on 1 yields a system with coefficients in Q and the same rational solutions for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r_i+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;r_i &quot; class=&quot;latex&quot; title=&quot;r_i &quot; /&gt;.&lt;br /&gt;
I know this is a lot of talking and nothing like psudeo code, though we can draw some sort of code out of this, but that is actually the major concern for now. We don’t really have psudeo codes for the rest of the sections and it takes a bit longer to actually see how the implementation should be planned to fit into all the conditions. I cannot assure that everything would start working because there are thin lines which would probbaly now start connecting rde.py , prde.py and cds.py together and if any of them have some failures which bottlenecks the test-cases of other, I would have to redraw the dots to get better interconnections&lt;/p&gt;
&lt;p&gt;…. (Hope we get them connected soon)&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/292/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/292/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=292&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 08 Jul 2013 01:01:32 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer: Automating the SymPy release process</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1348</guid>
	<link>http://asmeurersympy.wordpress.com/2013/07/07/automating-the-sympy-release-process/</link>
	<description>&lt;p&gt;So I have just published &lt;a href=&quot;https://github.com/sympy/sympy/releases/sympy-0.7.3.rc1&quot;&gt;SymPy 0.7.3.rc1&lt;/a&gt;. I’ll write a blog post about the release itself when we release 0.7.3 final, but for now, I wanted to write about how we managed to automate our release process.&lt;/p&gt;
&lt;p&gt;Our story begins back in October of 2012, when I wrote a long winded &lt;a href=&quot;https://groups.google.com/d/msg/sympy/UfNhyFv-oMg/PkwIz32K-lsJ&quot;&gt;rant&lt;/a&gt; to the mailing list about how long it was taking to get the 0.7.2 release out (it took over a month from the time the release branch was created). &lt;/p&gt;
&lt;p&gt;The rant is fun, and I recommend reading it. Here are some quotes&lt;/p&gt;
&lt;p&gt;The intro:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Now here’s a timeline: 0.7.1 was released July 29, 2011, more than a year and two months ago.  0.7.0 was released just over a month before that, on June 28.  0.6.7 was released March 18, 2010, again over a year before 0.7.0.  In almost two year’s time, we’ve had three releases, and are struggling to get out a fourth.  And it’s not like there were no changes; quite the opposite in fact.  If you look at SymPy 0.6.6 compared to the current master, it’s unbelievable the amount of changes that have gone forward in that time.  We’ve had&lt;br /&gt;
since then the new polys, at least four completely new submodules (combinatorics, sets, differential geometry, and stats), massive improvements to integration and special functions, a ton of new stuff in the physics module, literally thousands of bug fixes, and the list goes on.  Each of these changes on it’s own was enough to warrant a release. &lt;/p&gt;
&lt;p&gt;So in case I didn’t make my point, le me state it explicitly: we need to release more often.  We need to release *way* more often.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My views on some of the fundamental (non-technical) issues:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
I think that one other thing that has held back many releases is the feeling of “wait, we should put this in the release”. The use of a release branch has helped keep master moving along independently, but there still seems to be the feeling with many branches of, “this is a nice feature, it ought to go in the release.”  My hope is that by making the release process smoother, we can release more often, and this feeling will go away, because it won’t be a big deal if something waits until the next release.  As far as deprecations go, the real issue with them is time, not release numbers.  So if we deprecate a feature today vs. one month from today, it’s not a big deal (as opposed to today vs. a year from today), regardless of how many versions are in between. &lt;/p&gt;
&lt;p&gt;I read about what GitHub does for their Windows product regarding releasing often on their blog: &lt;a href=&quot;https://github.com/blog/1271-how-we-ship-github-for-windows&quot; rel=&quot;nofollow&quot;&gt;https://github.com/blog/1271-how-we-ship-github-for-windows&lt;/a&gt; (they actually have this philosophy for all their products).  One thing that they said is, “And by shipping updates so often, there is less anxiety about getting a particular feature ready for a particular release. If your pull request isn’t ready to be merged in time for today’s release, relax. There will be another one soon, so make that code shine!”  I think that is exactly the point here.  Another thing that they noted is that automation is the key to doing this, which is what I am aiming for with the above point.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My vision:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Once we start releasing very often (and believe me, this is way down the road, but I’m trying to be forward looking here), we can do away with release candidates.  A release candidate lives in the wild for a week before the full release.  But if we are capable of releasing literally every week, then having release candidates is pointless.  If a bug slips into a release, we just fix it and it will be in the next release.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
We should release *at least* once a month.  I think that if the process is automated enough, that this will be very possible (as opposed to the current situation, where the release branch lasts longer than a month).  In times of high activity, we can release more often than that (e.g., after a big pull request is merged, we can release).
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That was October. Today is July. Basically, our release process was way too long. Half of it was testing stuff, half of it was tedious releasing stuff (like making tarballs and so on), and half of it was updating websites. &lt;/p&gt;
&lt;p&gt;We have moved all our testing to Travis CI. So now every pull request is tested, and we can be pretty much assured that master is always passing the tests.  There is still some work to do here (currently Travis CI doesn’t test with external dependencies), but it’s mostly a solved problem.&lt;/p&gt;
&lt;p&gt;For updating websites, we conceded that we are not going to update anything that we don’t own. That means no attempting to make Debian or Sage packages, or updating Wikipedia or Freshmeat. Someone else will do that (and does anyone even use Freshmeat any more?). &lt;/p&gt;
&lt;p&gt;That leaves the releasing itself. It’s still a pain, because we have to make a source tarball, Windows installer, html docs, and pdf docs, and do them all for both Python 2 and Python 3. &lt;/p&gt;
&lt;p&gt;So Ondrej suggested moving to fabric/vagrant. At the SciPy 2013 sprints, he started working on a fabfile that automates the whole process. Basically vagrant is a predefined Linux virtual machine that makes it easy to make everything completely reproducible. Fabric is a tool that makes it easy to write commands (in Python) that are run on that machine. &lt;/p&gt;
&lt;p&gt;Building the basic stuff was easy, but I want to automate &lt;em&gt;everything&lt;/em&gt;. So far, not everything is done yet, but we’re getting close. For example, in addition to building the tarballs, the fabric script checks the contents of the tarball against &lt;code&gt;git ls-files&lt;/code&gt; to make sure that nothing is included that shouldn’t be or left out accidentally (and, indeed, we caught some missing files that weren’t included in the tarball, including the README). &lt;/p&gt;
&lt;p&gt;You can run all this yourself. Checkout the 0.7.3 branch from SymPy, then cd into the release directory, and read the README. Basically, you just install Fabric and Vagrant if you don’t have them already, then run&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;vagrant up
fab vagrant prepare
fab vagrant release
&lt;/pre&gt;
&lt;p&gt;Note that this downloads a 280 MB virtual machine, so it will take some time to run for the first time. When you do this, the releases are in the `release` directory. &lt;/p&gt;
&lt;p&gt;Finally, I uploaded 0.7.3.rc1 to GitHub using the new releases feature. This is what the release looks like on GitHub, from the user point of view&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-05-31.png&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-05-31.png?w=450&amp;amp;h=260&quot; alt=&quot;SymPy 0.7.3.rc1&quot; width=&quot;450&quot; class=&quot;alignnone size-full wp-image-1352&quot; height=&quot;260&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is what it looks like to me&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-08-19.png&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-08-19.png?w=450&amp;amp;h=470&quot; alt=&quot;SymPy 0.7.3.rc1 Edit&quot; width=&quot;450&quot; class=&quot;alignnone size-full wp-image-1353&quot; height=&quot;470&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub has (obviously) the best interface I’ve ever seen for this. Of course, even better would be if there were an API, so that I could automate this too.  But since Google’s &lt;a href=&quot;http://google-opensource.blogspot.com/2013/05/a-change-to-google-code-download-service.html&quot;&gt;announcement&lt;/a&gt; that they are discontinuing downloads, we can no longer upload to Google Code. Our plan was to just use PyPI, but I am glad that we can have at least one other location, especially since PyPI is so buggy and unreliable (I can’t even log in, I get a 502).&lt;/p&gt;
&lt;p&gt;So please download this release candidate and test it. We espeically need people to test the Windows installer, since we haven’t automated that part yet (actually, we are considering not making them any more, especailly given the existence of people like Christoph Gohlke who &lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/#sympy&quot;&gt;make them&lt;/a&gt; for SymPy anyway, but we’ll see). The only thing that remains to be done is to finish writing the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/release-notes-for-0.7.3&quot;&gt;release notes&lt;/a&gt;. If you made any contributions to SymPy since the last release, please add them there. Or if you want to help out, you can go through our pull requests and make sure that nothing is missing.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1348/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1348/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1348&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 07 Jul 2013 03:13:57 +0000</pubDate>
</item>
<item>
	<title>Saurabh Jha: Profile results of Dense Matrix</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-83592426202169687</guid>
	<link>http://sympymatrix.blogspot.com/2013/07/profile-results-of-dense-matrix.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Seems Planet is now fine. Anyways, here are some profiling results of arithmetic operations of dense matrix. I am working on level 0 currently. [1]&lt;br /&gt;&lt;br /&gt;The profile results will be like this- for each operation, the first one is the profile of previous implementation, the second is the profile of new ones and the third is the profile of new one *with last call to Matrix removed*.&lt;br /&gt;For example, I am doing manipulations by first converting matrices to lists. Suppose &quot;result&quot; is the resultant list of the matrix. Then second profiles will be the implementations with returns Matrix(result) and the third ones will return just result.&lt;br /&gt;&lt;br /&gt;All the third profiles will be discussed later.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;a = Matrix([[3, 4, 5], [6, 7, 8], [9, 10, 11]])&lt;br /&gt;b = Matrix([[4, 5, 6], [7, 8, 9], [10, 11, 12]])&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;For addition:&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;cProfile.run(&quot;a + b&quot;)&lt;br /&gt;         180 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 decorators.py:105(binary_op_wrapper)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:532(__add__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:573(_force_mutable)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:600(as_mutable)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:283(copy)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:3537(classof)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 matrices.py:390(shape)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:508(__add__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 matrices.py:519(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1588(__add__)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10b8fc248}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {getattr}&lt;br /&gt;        5    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;       36    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;       22    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        4    0.000    0.000    0.000    0.000 {map}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}&lt;br /&gt;       12    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}&lt;br /&gt;        7    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_add(a, b, ZZ)&quot;)&lt;br /&gt;         171 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:597(__new__)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 densetools.py:15(_addr)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 densetools.py:3(_add)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10b8fc248}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;       17    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;       25    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}&lt;br /&gt;       24    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_add(a, b, ZZ)&quot;)&lt;br /&gt;         90 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 densetools.py:15(_addr)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 densetools.py:3(_add)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;       12    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;       12    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Conclusion: Improvement is zilch.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;For Negation:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;-a&quot;)&lt;br /&gt;         104 function calls (103 primitive calls) in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;      2/1    0.000    0.000    0.000    0.000 decorators.py:105(binary_op_wrapper)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:548(__mul__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:552(__rmul__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 dense.py:573(_force_mutable)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:414(__mul__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 matrices.py:468(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:470(__rmul__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:532(__neg__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1612(__mul__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10a1d9248}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;        4    0.000    0.000    0.000    0.000 {getattr}&lt;br /&gt;        5    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;       21    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;        7    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {map}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_neg(a, ZZ)&quot;)&lt;br /&gt;         130 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:597(__new__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 densetools.py:34(_neg)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 densetools.py:42(_negr)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10a1d9248}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;       17    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;       14    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}&lt;br /&gt;       24    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}&lt;br /&gt;        5    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_neg(a, ZZ)&quot;)&lt;br /&gt;         49 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 densetools.py:34(_neg)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 densetools.py:42(_negr)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;       12    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Conclusion: slightly slower.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;For Multiplication Matrix * Matrix:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;cProfile.run(&quot;a*b&quot;)&lt;/div&gt;&lt;div&gt;         491 function calls in 0.001 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.001    0.001 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;       29    0.000    0.000    0.000    0.000 basic.py:81(__new__)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;/div&gt;&lt;div&gt;        6    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.001    0.001 decorators.py:105(binary_op_wrapper)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:210(_eval_transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.001    0.001 dense.py:548(__mul__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:573(_force_mutable)&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.001    0.000 dense.py:588(_new)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:600(as_mutable)&lt;/div&gt;&lt;div&gt;       18    0.000    0.000    0.000    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:283(copy)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:298(transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:3537(classof)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.001    0.001 matrices.py:414(__mul__)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 matrices.py:463(&amp;lt;lambda&amp;gt;)&lt;/div&gt;&lt;div&gt;       18    0.000    0.000    0.000    0.000 matrices.py:464(&amp;lt;lambda&amp;gt;)&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.001    0.000 matrices.py:81(_handle_creation_inputs)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;/div&gt;&lt;div&gt;       18    0.000    0.000    0.000    0.000 numbers.py:1588(__add__)&lt;/div&gt;&lt;div&gt;       27    0.000    0.000    0.000    0.000 numbers.py:1612(__mul__)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1679(__index__)&lt;/div&gt;&lt;div&gt;       36    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 {_functools.reduce}&lt;/div&gt;&lt;div&gt;       32    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10ded7248}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {callable}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {getattr}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;/div&gt;&lt;div&gt;      146    0.000    0.000    0.000    0.000 {isinstance}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {iter}&lt;/div&gt;&lt;div&gt;       21    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {map}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        6    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}&lt;/div&gt;&lt;div&gt;        7    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 {zip}&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;cProfile.run(&quot;_mulmatmat(a, b, ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         285 function calls in 0.000 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:597(__new__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 densetools.py:49(_mulmatmat)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 densetools.py:69(_mulrc)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10ded7248}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;/div&gt;&lt;div&gt;       17    0.000    0.000    0.000    0.000 {isinstance}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {iter}&lt;/div&gt;&lt;div&gt;       24    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}&lt;/div&gt;&lt;div&gt;       24    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}&lt;/div&gt;&lt;div&gt;        6    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {zip}&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;cProfile.run(&quot;_mulmatmat(a, b ,ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         204 function calls in 0.000 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 densetools.py:49(_mulmatmat)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 densetools.py:69(_mulrc)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;/div&gt;&lt;div&gt;       54    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;/div&gt;&lt;div&gt;       11    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;       12    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {zip}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Conclusion: Definitely some improvement.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;For Transpose: &lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;cProfile.run(&quot;a.transpose()&quot;)&lt;/div&gt;&lt;div&gt;         45 function calls in 0.000 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:210(_eval_transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 matrices.py:152(&amp;lt;lambda&amp;gt;)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:298(transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x107365248}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {hasattr}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {isinstance}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {iter}&lt;/div&gt;&lt;div&gt;        7    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {map}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;cProfile.run(&quot;_transpose(a, ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         71 function calls in 0.000 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:597(__new__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 densetools.py:86(_transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;/div&gt;&lt;div&gt;        9    0.000    0.000    0.000    0.000 sympify.py:50(sympify)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x107365248}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;/div&gt;&lt;div&gt;        8    0.000    0.000    0.000    0.000 {isinstance}&lt;/div&gt;&lt;div&gt;        2    0.000    0.000    0.000    0.000 {iter}&lt;/div&gt;&lt;div&gt;       14    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}&lt;/div&gt;&lt;div&gt;       12    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}&lt;/div&gt;&lt;div&gt;        5    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {zip}&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;cProfile.run(&quot;_transpose(a, ZZ)&quot;)&lt;/div&gt;&lt;div&gt;         8 function calls in 0.000 seconds&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   Ordered by: standard name&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 dense.py:101(tolist)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 densetools.py:86(_transpose)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {len}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {range}&lt;/div&gt;&lt;div&gt;        1    0.000    0.000    0.000    0.000 {zip}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Conclusion : Not worth it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What is really interesting now is that the third profiles are outperforming others by a huge margin. It turns out that _handle_creation_matrix is takes quite a lot of calls to execute itself. This I think is one of the significant bottlenecks in the current matrix code. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It turns out that if we somehow manage to make a more efficient data structure for dense matrix, we can speed up things significantly.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;[1] https://github.com/sympy/sympy/pull/2248&lt;/div&gt;</description>
	<pubDate>Sat, 06 Jul 2013 18:35:33 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Sachin Joglekar: Singletons in Python (and GSoC update)</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-2643645454030390642</guid>
	<link>http://codesachin.blogspot.com/2013/07/singletons-in-python-and-gsoc-update.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This week, there isn't any interesting stuff to write about as far as the project is concerned, as I pretty much cleaned up what I had done in the previous two weeks. By 'clean up', I mean PEP-8 modifications to the existing code and rectification of some tiny(but serious) conceptual errors in the MovingRefFrame methods. I also spent quite some time reviewing, or rather, trying to understand Prasoon's code. I pulled his vector branch on my machine and started executing some tests on it. I have left some comments on his &lt;a href=&quot;https://github.com/sympy/sympy/pull/2208&quot;&gt;PR&lt;/a&gt;, and hopefully they will get sorted out soon. One good thing is, I also wrote the first draft of my code for Particle class-including methods for angular momentum, translational motion calculation, etc. This wasnt much of a problem, as I 'attached' a dedicated reference frame to each Particle that would be initialized. Hence, all of Particle's methods would call the relevant methods in MovingRefFrame.&lt;br /&gt;&lt;br /&gt;I got to learn about a pretty neat method of implementing Singleton classes in Python. How? I saw the __new__ method being called in Prasoon's code, and after an hour of going from website to website, I somehow ended up learning this.&lt;br /&gt;&lt;br /&gt;Have a look at the following code-&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;1:  class MutableSingletonClass(object):  &lt;br /&gt;2:    instance = None  &lt;br /&gt;3:      &lt;br /&gt;4:    def __new__(cls, *args, **kwargs):  &lt;br /&gt;5:      print (&quot;In __new__&quot;)  &lt;br /&gt;6:      instance = cls.instance  &lt;br /&gt;7:      if instance is None:  &lt;br /&gt;8:        print (&quot;No instance found&quot;)  &lt;br /&gt;9:        instance = cls.instance = \  &lt;br /&gt;10:              object.__new__(cls)  &lt;br /&gt;11:      else:  &lt;br /&gt;12:        print (&quot;Instance found&quot;)  &lt;br /&gt;13:      return instance  &lt;br /&gt;14:      &lt;br /&gt;15:    def __init__(self, *args, **kwargs):  &lt;br /&gt;16:      print (&quot;In __init__&quot;)  &lt;br /&gt;17:      pass  &lt;br /&gt;18:    &lt;br /&gt;19:  class Class1(MutableSingletonClass):  &lt;br /&gt;20:    def __init__(self, x):  &lt;br /&gt;21:      print (&quot;In Class1 __init__&quot;)  &lt;br /&gt;22:      self.x = x  &lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;MutableSingletonClass's subclasses (and that class itself) will have &lt;i&gt;only &lt;/i&gt;one instance being generated per session (the first time, that is). The next time you try to initialize a new instance of Class1, that &lt;i&gt;same &lt;/i&gt;instance that was created earlier will be modified. Mind you, that one common instance WILL be modified everytime you call the constructor with new arguments. The reason this happens is, every time __new__ returns an object (which __new__ ensures is only one per session in this case), the __init__method is called. You cannot avoid that.&lt;br /&gt;To get a better idea, look at the output-&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;1:  &amp;gt;&amp;gt;&amp;gt; c1 = Class1(3)  &lt;br /&gt;2:  In __new__  &lt;br /&gt;3:  No instance found  &lt;br /&gt;4:  In Class1 __init__  &lt;br /&gt;5:  &amp;gt;&amp;gt;&amp;gt; c2 = Class1(4)  &lt;br /&gt;6:  In __new__  &lt;br /&gt;7:  Instance found  &lt;br /&gt;8:  In Class1 __init__  &lt;br /&gt;9:  &amp;gt;&amp;gt;&amp;gt; c1.x  &lt;br /&gt;10:  4  &lt;br /&gt;11:  &amp;gt;&amp;gt;&amp;gt;c1 == c2  &lt;br /&gt;12:  True  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Now, if we want to implement a &lt;b style=&quot;font-style: italic;&quot;&gt;real &lt;/b&gt;Singleton type, the &lt;a href=&quot;http://www.python.org/download/releases/2.2/descrintro/#__new__&quot;&gt;Python docs&lt;/a&gt; show a nice method-&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;1:  class FixedSingletonClass(object):  &lt;br /&gt;2:    instance = None  &lt;br /&gt;3:      &lt;br /&gt;4:    def __new__(cls, *args, **kwargs):  &lt;br /&gt;5:      print (&quot;In __new__&quot;)  &lt;br /&gt;6:      instance = cls.instance  &lt;br /&gt;7:      if instance is not None:  &lt;br /&gt;8:        print (&quot;Instance found&quot;)  &lt;br /&gt;9:      else:  &lt;br /&gt;10:        print (&quot;No instance found&quot;)  &lt;br /&gt;11:        instance = cls.instance = \  &lt;br /&gt;12:              object.__new__(cls)  &lt;br /&gt;13:        instance.init(*args, **kwargs)  &lt;br /&gt;14:      return instance  &lt;br /&gt;15:    &lt;br /&gt;16:    def init(self, *args, **kwargs):  &lt;br /&gt;17:      #This is where the subclasses should implement their  &lt;br /&gt;18:      #initialization  &lt;br /&gt;19:      pass  &lt;br /&gt;20:      &lt;br /&gt;21:    def __init__(self, *args, **kwargs):  &lt;br /&gt;22:      #Subclasses should only define this as a dummy so users no which  &lt;br /&gt;23:      #arguments to pass for initialization  &lt;br /&gt;24:      print (&quot;In __init__&quot;)  &lt;br /&gt;25:      pass  &lt;br /&gt;26:    &lt;br /&gt;27:  class Class2(FixedSingletonClass):  &lt;br /&gt;28:    def init(self, x):  &lt;br /&gt;29:      print (&quot;In Class2 init&quot;)  &lt;br /&gt;30:      self.x = x  &lt;br /&gt;31:    &lt;br /&gt;32:    def __init__(self, x):  &lt;br /&gt;33:      print(&quot;In Class2 __init__&quot;)  &lt;br /&gt;34:      pass  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;As you can see here, this implementation reduces the __init__ method to a mere formality/dummy (just to tell the users which values to enter for initialization, in the shell). Actually speaking, all the work is done by the 'init' method, which can now be controlled by the program. Hence, this real initializer (not __init__) is called &lt;i&gt;only &lt;/i&gt;once..the first time an instance of Class2 is created. The rest of the times, __init__ &lt;i&gt;is &lt;/i&gt;called, but it makes no changes to the existing instance. This ensures all references of Class2 point to a common instance.&lt;br /&gt;Hence, the output-&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;1:  &amp;gt;&amp;gt;&amp;gt; d1 = Class2(5)  &lt;br /&gt;2:  In __new__  &lt;br /&gt;3:  No instance found  &lt;br /&gt;4:  In Class2 init  &lt;br /&gt;5:  In Class2 init  &lt;br /&gt;6:  &amp;gt;&amp;gt;&amp;gt; d2 = Class2(10)  &lt;br /&gt;7:  In __new__  &lt;br /&gt;8:  Instance found  &lt;br /&gt;9:  In Class2 init  &lt;br /&gt;10:  &amp;gt;&amp;gt;&amp;gt; d1.x  &lt;br /&gt;11:  5  &lt;br /&gt;12:  &amp;gt;&amp;gt;&amp;gt; assert d1 is d2  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;I hope this was useful.&lt;br /&gt;That's all for now.&lt;br /&gt;Have a great week ahead :-)&lt;/div&gt;</description>
	<pubDate>Sat, 06 Jul 2013 13:16:27 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Prasoon Shukla: GSoC Week 3 : SymPy Development – Finishing the basic structure</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=185</guid>
	<link>http://musingsofafriend.wordpress.com/2013/07/06/gsoc-week-3-sympy-development-finishing-the-basic-structure/</link>
	<description>&lt;p&gt;In the last two weeks, I made the classes on top of which the whole module will be based – namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BaseScalar&lt;/li&gt;
&lt;li&gt;Vector&lt;/li&gt;
&lt;li&gt;VectMul&lt;/li&gt;
&lt;li&gt;VectAdd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Until then, I had been writing code for these classes which required several unwritten methods from different classes. But, I left writing of these methods for later. So finally in this week, I started with writing those methods. This I did so as to have a basic level of functionality working. This part of the functionality will allow be to build the rest of the code on top of it.&lt;/p&gt;
&lt;p&gt;Now, these methods were generally for the basic vector operations – addition, multiplication etc. Also, because of the way we are handling the design, we require many helper methods that would allow the vectors to be handled. One such method is the ‘separate’ method about which I talked about in the last blog. Another important method is the ‘express_in’ method which takes a vector represented in a given coordinate system and returns a vector in any specified coordinate system.&lt;/p&gt;
&lt;p&gt;There are actually several problems I faced this week. The first one was regarding the implementation of special methods – such as __add__ and __mul__ – which would overload the corresponding operators. The problem (and its solution) has been discussed &lt;a href=&quot;https://groups.google.com/d/topic/sympy/QV6m9Nfp9kw/discussion&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next problem I faced was more ingrained in the design than I’d like it to be.&lt;/p&gt;
&lt;p&gt;Consider declaring a base scalar and a base vector:&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;&amp;gt;&amp;gt;&amp;gt; C = CoordSysRect('C')
&amp;gt;&amp;gt;&amp;gt; x = BaseScalar('x', C)
&amp;gt;&amp;gt;&amp;gt; e_x = Vector('e_x', C)

&lt;/pre&gt;
&lt;p&gt;Okay. Now, it should be clear that while both BaseScalar and Vector store a reference to CoordSysRect object C, the opposite it not true. Now, this is the basis for the problem I am facing. For example, if I have a vector object, say ‘v’, then:&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;&amp;gt;&amp;gt;&amp;gt; v.express_in(N)
&lt;/pre&gt;
&lt;p&gt;where N is a different coordinate system. Now, since we have to return a vector, therefore, we need to know the base scalars and base vectors in that coordinate system. But here, we don’t. Also, because all objects are immutable, therefore, we cannot change the object ‘C’ to include the base scalars and the base vectors – infact, we shouldn’t do it. The coordinate system object provides just the methods to express vectors in – it shouldn’t store base vectors or base scalars. This way, the same coordinate system object can be used with for many different base scalars and base vectors. Nevertheless, that doesn’t solve our problem. So, I decided that the express_in method should work in two ways – first, if the user provides the base scalars and base vectors to use, then we can return the result using those. Second, if the user provides only a CoordSys object – then we generate base scalars and base vectors on the fly and return a vector composed of those objects. Then, if the user wants, he can convert the returned vector to a vector formed by base scalars and base vectors provided by the user.&lt;/p&gt;
&lt;p&gt;This is of course, just one solution to this problem. The other way that we can extend this is using a separate cache object that would hold these relationships between these objects. But, that still needs to be discussed.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/185/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/185/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=185&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 06 Jul 2013 10:41:59 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: Solving the generalized Pell equation</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=74</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/07/06/solving-the-generalized-pell-equation/</link>
	<description>&lt;p&gt;Continuing the work from last week, I was aiming to solve quadratic Diophantine equations with delta = B**2 – 4*A*C &amp;gt; 0. I found two better references on this case which can be found in [1] and [2]. These two papers describe all the necessary algorithms for solving the generalized Pell equation, to which the quadratic Diophantine equation reduces in the case delta &amp;gt; 0. So let’s take a look at the generalized Pell equation and methods I used to solve the equation.&lt;/p&gt;
&lt;p&gt;The generalized Pell equation is an equation of the form x**2 – D * y**2 = N. The main case of the equation is D &amp;gt; 0, D is not a perfect square and abs(N) &amp;gt; 0. Other cases are fairly easy and solutions are straightforward.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case D &amp;lt; 0&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Since D &amp;lt; 0,  equation becomes x**2 + |D| * y**2 = N, which is always positive or zero. So there are no solutions when  N &amp;lt; 0 and only the trivial solution x = 0 and y = 0 when N = 0. If N &amp;gt; 0, we can note that |D| * y**2 &amp;lt;= N which implies y &amp;lt;= sqrt(N/|D|), so a brute force search on this interval would find us all the solutions. That’s what I did in this case. But there are more better ways like using methods of binary quadratic forms for positive definite forms. I hope to implement it in the near future.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case D = 0&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Equation reduces to x**2 = N, solution procedure is straight forward and no solutions exist if N &amp;lt; 0 or N is not a perfect square.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case D &amp;gt; 0&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;If D is a square, then let D = r**2 for some integer r. Then the LHS is x**2 – r**2 * y**2 = N –&amp;gt; (x – r*y) (x + r*y) = N. Now if N = 0 either x – r*y = 0 or x+ r*y = 0 and the parametric solutions for the above two cases are (r*t, t) and (-r*t, t) respectively. If N does not equal zero, then both x – r*y and x + r*y should be factors of N. We should find an upper bound M for y so that we can search through the solutions in the range 0 &amp;lt;= y &amp;lt;= M (We don’t have to consider negative solutions, reason is explained later in the article).  Let x – r*y = a and x + r*y = b. Solving for y we get y = (b – a)/(2*r). Now N = (x – r*y) * (x + r*y) = a * b so b &amp;lt;= N and a &amp;gt;= 1 since a is a positive factor o f N. which implies b &amp;lt;= N and -a &amp;lt;= -1. Now adding up the two inequalities gives b – a &amp;lt;= N – 1 which gives y &amp;lt;= (N – 1)/ (2*r) which is the required upper bound.&lt;/p&gt;
&lt;p&gt;Now suppose D is not a perfect square. If  N = 0, x**2 – D*y**2 = 0 –&amp;gt; x**2 = D * y**2.  Suppose y is non zero. Then y should divide x (Otherwise y**2 can’t divide x**2 which is the case here). Putting x = k*y on the LHS one can see that D = k**2 which is in contradiction to the fact that D is not a perfect square. So y = 0 and consequently x = 0. Hence if N = 0 we will have only the trivial solution x = 0 and y = 0. Now if N is non zero comes our main case.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PQa Algorithm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This algorithm computes the continued fraction expansion of the quadratic irrational (P + sqrt(D))/Q and some auxiliary variables, i.e of numbers like (2 + sqrt(3))/5 and (-34 + sqrt(19))/24. Note that D should not be perfect square otherwise the expression (P + sqrt(D))/Q will not be a quadratic irrational. For more details on algorithm refer [2]. Algorithm takes three variables P, Q, D as input and output six quantities P_i, Q_i, a_i, A_i, B_i and G_i for each time it’s called for a given set of initial values (This is implemented as a generator, please see python documentation). a_i is the ith term of continued fraction expansion of (P + sqrt(D))/Q and others are required in the LMM algorithm described below. Here i &amp;gt;= 0.&lt;/p&gt;
&lt;p&gt;It is also important to know that continued fraction representation of a quadratic irrationality is periodic (most of the time) after a few terms. In the solution we need to know the sum of the lengths of the aperiodic part and the periodic part. I implemented a separate function, length() to find this.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;LMM Algorithm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;LMM algorithm finds primitive solutions of the each equivalence class of the solution set of x**2 – D * y**2 = N. We have to construct the general solution of each class afterwards. Here is a rough description how the algorithm works.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Make a list of f &amp;gt; 0 such that f**2 divides N&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; Set m = N / f**2 and find all z such that z**2 ≡ D( mod |m|) and |m|/2 &amp;lt; z &amp;lt;= |m|/2&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; Apply PQa algorithm with P = z, Q = |m| and D = D&lt;br /&gt;
&lt;strong&gt;4.&lt;/strong&gt; Continue till there is an i &amp;gt;= 1 such that |Q_i| = 1 or reach the end of first period of continued fraction expansion without such a &lt;em&gt;i&lt;/em&gt;, i.e continue till i exceeds the value returned by length()&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;&lt;/em&gt;5&lt;em&gt;.&lt;/em&gt;&lt;/strong&gt; If you reached an i with |Q_i| = 1 then set r = G_i-1 and s = B_i-1. if r**2 – D * s**2 = m, then add x = f*r and y = f*s to the list of solutions. Otherwise r**2 – D * s**2 = -m. Now if x**2 – D * y**2 = -1 has solutions, find it’s minimal positive solution (u, v) and add x = f*(r*u+ s*v*d) and y = f*(r*v + s*u) to the list of solutions. If x**2 – D * y**2 = -1 does not have solution, continue with next z&lt;br /&gt;
&lt;strong&gt;6.&lt;/strong&gt;Repeat this for every z for corresponding f, and then for every f corresponding to N&lt;/p&gt;
&lt;p&gt;We can solve the x**2 – D * y**2 = -1 by reapplying LMM algorithm but in the Diophantine module I separately solved the equation for |N| = 1 and used the solutions returned by them in the LMM algorithm.&lt;/p&gt;
&lt;p&gt;If you are interested, a lot of cool information about solving process and the history of the Pell equation can be found in [3].&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;[1] Solving the equation ax^2 + bxy + cy^2 + dx + ey + f = 0, John P.Robertson, May 8, 2003. &lt;a href=&quot;http://www.jpr2718.org/ax2p.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.jpr2718.org/ax2p.pdf&lt;/a&gt;&lt;br /&gt;
[2] Solving the generalized Pell equation x**2 – D*y**2 = N, John P. Robertson, July 31, 2004. &lt;a href=&quot;http://www.jpr2718.org/pell.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.jpr2718.org/pell.pdf&lt;/a&gt;&lt;br /&gt;
[3] H.W Lenstra, Jr. &lt;a href=&quot;http://www.ams.org/notices/200202/fea-lenstra.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.ams.org/notices/200202/fea-lenstra.pdf&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/74/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/74/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=74&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 06 Jul 2013 07:52:58 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: Solving the generalized Pell equation</title>
	<guid isPermaLink="false">http://theperceptiveway.wordpress.com/?p=74</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/07/06/solving-the-generalized-pell-equation/</link>
	<description>&lt;p&gt;Continuing the work from last week, I was aiming to solve quadratic Diophantine equations with delta = B**2 – 4*A*C &amp;gt; 0. I found two better references on this case which can be found in [1] and [2]. These two papers describe all the necessary algorithms for solving the generalized Pell equation, to which the quadratic Diophantine equation reduces in the case delta &amp;gt; 0. So let’s take a look at the generalized Pell equation and methods I used to solve the equation.&lt;/p&gt;
&lt;p&gt;The generalized Pell equation is an equation of the form x**2 – D * y**2 = N. The main case of the equation is D &amp;gt; 0, D is not a perfect square and abs(N) &amp;gt; 0. Other cases are fairly easy and solutions are straightforward.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case D &amp;lt; 0&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Since D &amp;lt; 0,  equation becomes x**2 + |D| * y**2 = N, which is always positive or zero. So there are no solutions when  N &amp;lt; 0 and only the trivial solution x = 0 and y = 0 when N = 0. If N &amp;gt; 0, we can note that |D| * y**2 &amp;lt;= N which implies y &amp;lt;= sqrt(N/|D|), so a brute force search on this interval would find us all the solutions. That’s what I did in this case. But there are more better ways like using methods of binary quadratic forms for positive definite forms. I hope to implement it in the near future.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case D = 0&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Equation reduces to x**2 = N, solution procedure is straight forward and no solutions exist if N &amp;lt; 0 or N is not a perfect square.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case D &amp;gt; 0&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;If D is a square, then let D = r**2 for some integer r. Then the LHS is x**2 – r**2 * y**2 = N –&amp;gt; (x – r*y) (x + r*y) = N. Now if N = 0 either x – r*y = 0 or x+ r*y = 0 and the parametric solutions for the above two cases are (r*t, t) and (-r*t, t) respectively. If N does not equal zero, then both x – r*y and x + r*y should be factors of N. We should find an upper bound M for y so that we can search through the solutions in the range 0 &amp;lt;= y &amp;lt;= M (We don’t have to consider negative solutions, reason is explained later in the article).  Let x – r*y = a and x + r*y = b. Solving for y we get y = (b – a)/(2*r). Now N = (x – r*y) * (x + r*y) = a * b so b &amp;lt;= N and a &amp;gt;= 1 since a is a positive factor o f N. which implies b &amp;lt;= N and -a &amp;lt;= -1. Now adding up the two inequalities gives b – a &amp;lt;= N – 1 which gives y &amp;lt;= (N – 1)/ (2*r) which is the required upper bound.&lt;/p&gt;
&lt;p&gt;Now suppose D is not a perfect square. If  N = 0, x**2 – D*y**2 = 0 –&amp;gt; x**2 = D * y**2.  Suppose y is non zero. Then y should divide x (Otherwise y**2 can’t divide x**2 which is the case here). Putting x = k*y on the LHS one can see that D = k**2 which is in contradiction to the fact that D is not a perfect square. So y = 0 and consequently x = 0. Hence if N = 0 we will have only the trivial solution x = 0 and y = 0. Now if N is non zero comes our main case.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PQa Algorithm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This algorithm computes the continued fraction expansion of the quadratic irrational (P + sqrt(D))/Q and some auxiliary variables, i.e of numbers like (2 + sqrt(3))/5 and (-34 + sqrt(19))/24. Note that D should not be perfect square otherwise the expression (P + sqrt(D))/Q will not be a quadratic irrational. For more details on algorithm refer [2]. Algorithm takes three variables P, Q, D as input and output six quantities P_i, Q_i, a_i, A_i, B_i and G_i for each time it’s called for a given set of initial values (This is implemented as a generator, please see python documentation). a_i is the ith term of continued fraction expansion of (P + sqrt(D))/Q and others are required in the LMM algorithm described below. Here i &amp;gt;= 0.&lt;/p&gt;
&lt;p&gt;It is also important to know that continued fraction representation of a quadratic irrationality is periodic (most of the time) after a few terms. In the solution we need to know the sum of the lengths of the aperiodic part and the periodic part. I implemented a separate function, length() to find this.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;LMM Algorithm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;LMM algorithm finds primitive solutions of the each equivalence class of the solution set of x**2 – D * y**2 = N. We have to construct the general solution of each class afterwards. Here is a rough description how the algorithm works.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Make a list of f &amp;gt; 0 such that f**2 divides N&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; Set m = N / f**2 and find all z such that z**2 ≡ D( mod |m|) and |m|/2 &amp;lt; z &amp;lt;= |m|/2&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; Apply PQa algorithm with P = z, Q = |m| and D = D&lt;br /&gt;
&lt;strong&gt;4.&lt;/strong&gt; Continue till there is an i &amp;gt;= 1 such that |Q_i| = 1 or reach the end of first period of continued fraction expansion without such a &lt;em&gt;i&lt;/em&gt;, i.e continue till i exceeds the value returned by length()&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;&lt;/em&gt;5&lt;em&gt;.&lt;/em&gt;&lt;/strong&gt; If you reached an i with |Q_i| = 1 then set r = G_i-1 and s = B_i-1. if r**2 – D * s**2 = m, then add x = f*r and y = f*s to the list of solutions. Otherwise r**2 – D * s**2 = -m. Now if x**2 – D * y**2 = -1 has solutions, find it’s minimal positive solution (u, v) and add x = f*(r*u+ s*v*d) and y = f*(r*v + s*u) to the list of solutions. If x**2 – D * y**2 = -1 does not have solution, continue with next z&lt;br /&gt;
&lt;strong&gt;6.&lt;/strong&gt;Repeat this for every z for corresponding f, and then for every f corresponding to N&lt;/p&gt;
&lt;p&gt;We can solve the x**2 – D * y**2 = -1 by reapplying LMM algorithm but in the Diophantine module I separately solved the equation for |N| = 1 and used the solutions returned by them in the LMM algorithm.&lt;/p&gt;
&lt;p&gt;If you are interested, a lot of cool information about solving process and the history of the Pell equation can be found in [3].&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;[1] Solving the equation ax^2 + bxy + cy^2 + dx + ey + f = 0, John P.Robertson, May 8, 2003. &lt;a href=&quot;http://www.jpr2718.org/ax2p.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.jpr2718.org/ax2p.pdf&lt;/a&gt;&lt;br /&gt;
[2] Solving the generalized Pell equation x**2 – D*y**2 = N, John P. Robertson, July 31, 2004. &lt;a href=&quot;http://www.jpr2718.org/pell.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.jpr2718.org/pell.pdf&lt;/a&gt;&lt;br /&gt;
[3] H.W Lenstra, Jr. &lt;a href=&quot;http://www.ams.org/notices/200202/fea-lenstra.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.ams.org/notices/200202/fea-lenstra.pdf&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/74/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/74/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=74&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 06 Jul 2013 07:52:58 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: Third week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=147</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/07/05/third-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;This week I finished implementing a working version of the modular GCD algorithm for multivariate integer polynomials. As I mentioned last week, Monagan and Wittkopf [1] only described their algorithm for bivariate integer polynomials, so figuring out the right generalization was the main obstacle. This took more time than expected, but I am very happy to report that it seems to have worked out.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;To help me understand the multivariate case, I implemented parts of Brown’s original algorithm [2]. Brown uses a recursive subroutine (Algorithm P) to compute the GCD in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bx_0%2C+%5Cldots%2C+x_%7Bk-1%7D%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[x_0, \ldots, x_{k-1}]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[x_0, \ldots, x_{k-1}]&quot; /&gt;. It reduces the problem step by step by evaluating the polynomials at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7Bk-1%7D+%3D+a&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x_{k-1} = a&quot; class=&quot;latex&quot; title=&quot;x_{k-1} = a&quot; /&gt; for suitable &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%5Cin+%5Cmathbb+Z_p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;a \in \mathbb Z_p&quot; class=&quot;latex&quot; title=&quot;a \in \mathbb Z_p&quot; /&gt; and then calling Algorithm P recursively to compute the GCD in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bx_0%2C+%5Cldots%2C+x_%7Bk-2%7D%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[x_0, \ldots, x_{k-2}]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[x_0, \ldots, x_{k-2}]&quot; /&gt;. Each time a GCD in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k-1&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;k-1&quot; class=&quot;latex&quot; title=&quot;k-1&quot; /&gt; variables has been computed, it uses a version of the Chinese Remainder Theorem for polynomial rings to interpolate the GCD in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; variables. At the deepest recursion level the problem is reduced to a univariate one, in which case we can just use the Euclidean Algorithm to compute the GCD.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In the bivariate case, however, there is no need for this recursive subroutine, because the problem is reduced to a univariate one after evaluating in only one variable. This made it harder to figure out which ideas used in [1] could be generalized to the multivariate case.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;There are two major improvements in the algorithm from [1] compared to Brown’s original one. First, it tries to detect unlucky primes and evaluation points, i.e. ones where we get a wrong result, as soon as possible. This is done by successively calculating tight degree bounds during the recursion and comparing them with the degrees of the computed GCDs. In addition, those bounds provide a much better estimate for the number of needed evaluation points.&lt;br /&gt;
Another improvement is to wait until enough evaluation points are found and then interpolate in one go. This has the advantage that interpolation is only done if enough (lucky) evaluation points can be found. It also avoids creating a lot of intermediate polynomials.&lt;br /&gt;
I was able to make use of both of them in my implementation for the multivariate case.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Next week I will complete the documentation, write additional tests and tidy up the code. If everything goes well, I should be able to make a pull request by the end of next week.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;[1] &lt;a href=&quot;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&lt;/a&gt;&lt;br /&gt;
[2] &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=321664&quot; rel=&quot;nofollow&quot;&gt;http://dl.acm.org/citation.cfm?id=321664&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/147/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/147/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=147&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 05 Jul 2013 22:26:34 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: On Semisimple Lie Algebras (Part 1)</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=44</guid>
	<link>http://meclark256.wordpress.com/2013/07/03/on-semisimple-lie-algebras-part-1/</link>
	<description>&lt;p&gt;So, belatedly, here is the promised introductory post about semisimple Lie algebras.  Firstly, what is a Lie algebra?&lt;/p&gt;
&lt;p&gt;A Lie algebra, g, is a vector space over a field F with a binary operator (the bracket) [· , · ] : g × g → g .  The bracket must satisfy the following three relations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bilinearity: [ax + by, z] = a[x, z] + b[y,z] and [x, ay + bz] = a[x, y] + b[x, z] for scalars a, b in F and x, y, and z in g&lt;/li&gt;
&lt;li&gt;Alternating: [x, x] = 0 for all x in g&lt;/li&gt;
&lt;li&gt;The Jacobi identity: [x, [y, z]] + [z, [x, y]] + [y, [z, x]] = 0 for all x, y, and z in g&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A Lie algebra is simple if it is non-zero and has no nontrivial ideals.  The simple Lie algebras fall into two categories: Classical and Exceptional.  The classical Lie algebras are the four series A_n, B_n, C_n and D_n.  The exceptional Lie algebras are E_6, E_7, E_8, F_4, and G_2.  These Lie algebras are classified via their Dynkin diagrams (or equivalently their root systems):&lt;/p&gt;
&lt;div style=&quot;width: 370px;&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Connected_Dynkin_Diagrams.svg/360px-Connected_Dynkin_Diagrams.svg.png&quot; alt=&quot;&quot; width=&quot;360&quot; height=&quot;600&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Dynkin diagrams (from wikipedia)&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;To find the root system, we first consider the Cartan subalgebra of g, which is the maximal abelian subalgebra, and consider the adjoint action of g on this subalgebra.  There is a root system associated with this action.  Now, a root system over a vector space V is a set of finite vectors Φ(called roots), which satisfy&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The roots span V&lt;/li&gt;
&lt;li&gt;The only scalar multiples of x in Φ are x and -x&lt;/li&gt;
&lt;li&gt;For every x in Φ, the set Φ is closed under reflection through the hyperplane perpendicular to x.&lt;/li&gt;
&lt;li&gt;If &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; are roots in Φ, then the projection of &lt;i&gt;y&lt;/i&gt; onto the line through &lt;i&gt;x&lt;/i&gt; is a half-integral multiple of &lt;i&gt;x&lt;/i&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, there is a subset of Φ, which we will call Δ, such that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Δ is a basis of V&lt;/li&gt;
&lt;li&gt;Each root x in Φ can be written x = Σ k_y y for y in Δ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The elements of Δ are called the simple roots.&lt;/p&gt;
&lt;p&gt;So, basically, for each simple Lie algebra, there is a unique Dynkin diagram, which can be reached from the root system (which I’ll cover in a second post).  The simple Lie algebras are totally classified by their Dynkin diagrams.  Next time I’ll cover the Dynkin diagrams and Cartan matrices.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In terms of work this week, I’m currently writing tests for my code to see if things actually work.  I’ve written tests so far for type_A.py and things seem to be working out well.  I’ve also created a pull request (&lt;a href=&quot;https://github.com/sympy/sympy/pull/2237&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2237&lt;/a&gt;) for type_A.py.  I’m hoping to also get type_B.py up tomorrow evening.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/44/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/44/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=44&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 03 Jul 2013 20:51:02 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: The guessing game (still) continues</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=560</guid>
	<link>http://manojbits.wordpress.com/2013/07/03/the-guessing-game-still-continues/</link>
	<description>&lt;p&gt;Hello, before I go on with my weekly update, I would like to say that I’m really struggling to find good names for each of my blog posts. As you know, I’m not a really creative person, and Week 1, Week 2 and so sound so mainstream, so I decided to add a “still” , in between the title of my previous blog post in a sudden fit of creative exuberance. After all if movies can have sequels, blog posts can have them too. [Oh and please don't say I did not read this blog post because I had missed the prequel]&lt;/p&gt;
&lt;p&gt;So this is what I was upto the previous week, with respect to my GSoC project and SymPy&lt;/p&gt;
&lt;p&gt;1. &lt;strong&gt;Get the third heuristic PR merged:&lt;br /&gt;
&lt;/strong&gt;I had described the algorithm that I followed in my previous blog post.  &lt;a href=&quot;http://manojbits.wordpress.com/2013/06/26/the-guessing-game-continues/&quot; rel=&quot;nofollow&quot;&gt;http://manojbits.wordpress.com/2013/06/26/the-guessing-game-continues/&lt;/a&gt; .  I made few minor changes, to the algorithm, as advised by Sean.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of substituting, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; in the PDE &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D+%2B+%28%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+y%7D+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+x%7D%29+%2A+h%28x%2C+y%29+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+y%7D%2Ah%28x%2Cy%29%5E%7B2%7D+-+%5Cxi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%5Ceta%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; /&gt; and using dummy symbols, to find the maximum degree upto which I need to iterate &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt;, one can simply &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%2C+%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D%2C+%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D%2C+h%2A%2A2&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h, \frac{\partial h}{\partial x}, \frac{\partial h}{\partial y}, h**2&quot; class=&quot;latex&quot; title=&quot;h, \frac{\partial h}{\partial x}, \frac{\partial h}{\partial y}, h**2&quot; /&gt;. If all of them are positive, then the degree limit would be the maximum among these, Otherwise, the degree limit would be the difference between the maximum degree and the minimum degree&lt;/li&gt;
&lt;li&gt;I hadn’t read the documentation pretty well. There already was a function in SymPy called Poly().as_dict(), which would give the power of the respective variables, and the coefficients in dict form. Great, that just reduced my 15 line separatevars code into one line.
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;from sympy import *
from sympy.abc import x, y
Poly(3*x*y + x**2).as_dict()
{(1, 1): 3, (2, 0): 1}
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Also, it was agreed that If I find an infinitesimal, by this method that is already there, still the for loop would break, and the code would no more look for bivariates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The merged source code can be found here: &lt;a href=&quot;https://github.com/sympy/sympy/pull/2196&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2196&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.  &lt;strong&gt;The fourth heuristic: &lt;/strong&gt;If you had read my rant on the previous post, regarding the inability of anyone to give me any insight onto how to solve the PDE for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Cchi%7D%7B%5Cpartial+x%7D+%2B+h%2A%5Cfrac%7B%5Cpartial+%5Cchi%7D%7B%5Cpartial+y%7D+-+%5Cchi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \chi}{\partial x} + h*\frac{\partial \chi}{\partial y} - \chi*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \chi}{\partial x} + h*\frac{\partial \chi}{\partial y} - \chi*\frac{\partial h}{\partial y}&quot; /&gt;. I finally though that I would follow the same algorithm as I had mentioned in the third heuristic, since &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\chi&quot; class=&quot;latex&quot; title=&quot;\chi&quot; /&gt; is a bivariate polynomial in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt; . A minor difference would be that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\chi&quot; class=&quot;latex&quot; title=&quot;\chi&quot; /&gt; cannot be a constant since it gives a trivial solution. Also after finding &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\chi&quot; class=&quot;latex&quot; title=&quot;\chi&quot; /&gt;, by this method, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; can be found by this &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+%5Cxi%2Ah+%2B+%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta = \xi*h + \chi&quot; class=&quot;latex&quot; title=&quot;\eta = \xi*h + \chi&quot; /&gt;. An interesting way, as suggested by mentor would be to simply rearrange the equation, which would give &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cchi%7D%7Bh%7D+%3D+-%5Cxi+%2B+%5Cfrac%7B%5Ceta%7D%7Bh%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\chi}{h} = -\xi + \frac{\eta}{h}&quot; class=&quot;latex&quot; title=&quot;\frac{\chi}{h} = -\xi + \frac{\eta}{h}&quot; /&gt; , which would mean when I divide &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cchi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\chi&quot; class=&quot;latex&quot; title=&quot;\chi&quot; /&gt; with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt;, it would give me &lt;img src=&quot;http://s0.wp.com/latex.php?latex=-%5Cxi&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;-\xi&quot; class=&quot;latex&quot; title=&quot;-\xi&quot; /&gt; as the quotient and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt; as the remainder.&lt;/p&gt;
&lt;p&gt;The unmerged source code can be found here: &lt;a href=&quot;https://github.com/sympy/sympy/pull/2214&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2214&lt;/a&gt; . (Sean is yet to give his comments)&lt;/p&gt;
&lt;p&gt;I had a very brief look, at the fifth heuristic yesterday , it looks pretty scary, but of course I’ve survived through scarier things in life. Also I tried to review two other Pull Requests, &lt;a href=&quot;https://github.com/sympy/sympy/pull/2207&quot; title=&quot;https://github.com/sympy/sympy/pull/2207&quot;&gt;https://github.com/sympy/sympy/pull/2207&lt;/a&gt; , &lt;a href=&quot;https://github.com/sympy/sympy/pull/2207&quot; title=&quot;https://github.com/sympy/sympy/pull/2207&quot;&gt;https://github.com/sympy/sympy/pull/2010&lt;/a&gt; . I have to admit I didn’t do a really good job, but then I at least tried.&lt;/p&gt;
&lt;p&gt;I guess that it for the previous week.&lt;/p&gt;
&lt;p&gt;P.S : I think I am a freelancer now.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/560/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/560/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=560&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 03 Jul 2013 13:26:19 +0000</pubDate>
</item>
<item>
	<title>Ondřej Čertík: My impressions from the SciPy 2013 conference</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-6568744196982634289.post-1968760474047261373</guid>
	<link>http://ondrejcertik.blogspot.com/2013/07/my-impressions-from-scipy-2013.html</link>
	<description>I have attended the &lt;a href=&quot;https://conference.scipy.org/scipy2013/&quot;&gt;SciPy 2013 conference&lt;/a&gt; in Austin, Texas. Here are my impressions.&lt;br /&gt;&lt;br /&gt;Number one is the fact that the &lt;a href=&quot;http://ipython.org/notebook.html&quot;&gt;IPython notebook&lt;/a&gt; was used by pretty much everyone. I use it a lot myself, but I didn't realize how ubiquitous it has become. It is quickly becoming the standard now. The IPython notebook is using Markdown and in fact it is better than Rest. The way to remember the &quot;[]()&quot; syntax for links is that in regular text you put links into () parentheses, so you do the same in Markdown, and append [] for the text of the link. The other way to remember is that [] feel more serious and thus are used for the text of the link. I stressed several times to &lt;a href=&quot;http://plus.google.com/105051551851350439748&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Fernando Perez&lt;/a&gt; and &lt;a href=&quot;http://plus.google.com/110706953761515533762&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Brian Granger&lt;/a&gt; how awesome it would be to have interactive widgets in the notebook. Fortunately that was pretty much preaching to the choir, as that's one of the first things they plan to implement good foundations for and I just can't wait to use that.&lt;br /&gt;&lt;br /&gt;It is now clear, that the IPython notebook is &lt;i&gt;the&lt;/i&gt; way to store computations that I want to share with other people, or to use it as a &quot;lab notebook&quot; for myself, so that I can remember what exactly I did to obtain the results (for example how exactly I obtained some figures from raw data). In other words --- instead of having sets of scripts and manual bash commands that have to be executed in particular order to do what I want, just use IPython notebook and put everything in there.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Number two is that how big the conference has become since the last time I attended (couple years ago), yet it still has the friendly feeling. Unfortunately, I had to miss a lot of talks, due to scheduling conflicts (there were three parallel sessions), so I look forward to seeing them on video.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://plus.google.com/111657756858197263626&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Aaron Meurer&lt;/a&gt; and I have done the &lt;a href=&quot;https://conference.scipy.org/scipy2013/tutorial_detail.php?id=101&quot;&gt;SymPy tutorial&lt;/a&gt; (see the link for videos and other tutorial materials). It's been nice to finally meet &lt;a href=&quot;http://plus.google.com/109882876523836932473&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Matthew Rocklin&lt;/a&gt; (very active SymPy contributor) in person. He also had an interesting presentation&lt;br /&gt;about symbolic matrices + Lapack code generation. &lt;a href=&quot;http://plus.google.com/110966557175293116547&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Jason Moore&lt;/a&gt; presented PyDy.&lt;br /&gt;It's been a great pleasure for us to invite &lt;a href=&quot;http://plus.google.com/112898427768461421869&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+David Li&lt;/a&gt; (still a high school student) to attend the conference and give a presentation about his work on &lt;a href=&quot;http://sympygamma.com/&quot;&gt;sympygamma.com&lt;/a&gt; and &lt;a href=&quot;http://live.sympy.org/&quot;&gt;live.sympy.org&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;It was nice to meet the Julia guys, &lt;a href=&quot;http://plus.google.com/104556984762576706263&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Jeff Bezanson&lt;/a&gt; and &lt;a href=&quot;http://plus.google.com/106011176106265292073&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Stefan Karpinski&lt;/a&gt;. I contributed the Fortran benchmarks on the Julia's website some time ago, but I had the feeling that a lot of them are quite artificial and not very meaningful. I think Jeff and Stefan confirmed my feeling. Julia seems to have quite interesting type system and multiple dispatch, that SymPy should learn from.&lt;br /&gt;&lt;br /&gt;I met the VTK guys &lt;a href=&quot;http://plus.google.com/117876587154330177046&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Matthew McCormick&lt;/a&gt; and &lt;a href=&quot;http://plus.google.com/101821293118663904053&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Pat Marion&lt;/a&gt;. One of the keynotes was given by &lt;a href=&quot;http://plus.google.com/105850319012996814544&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Will Schroeder&lt;/a&gt; from Kitware about publishing. I remember him stressing to manage dependencies well as well as to use BSD like license (as opposed to viral licenses like GPL or LGPL). That opensource has pretty much won (i.e. it is now clear that that is the way to go).&lt;br /&gt;&lt;br /&gt;I had great discussions with &lt;a href=&quot;http://plus.google.com/110321315348047026192&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Francesc Alted&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/106486100774697058597&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Andy Terrel&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/101681894269884323551&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Brett Murphy&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/106311201257953729437&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Jonathan Rocher&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/104443012252347946160&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Eric Jones&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/110081663265512493333&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Travis Oliphant&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/113023052893273684980&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Mark Wiebe&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/111480164393314519931&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Ilan Schnell&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/104831275312843762750&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Stéfan van der Walt&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/108585099026155174191&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+David Cournapeau&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/116439624339414215461&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Anthony Scopatz&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/105656345164808608690&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Paul Ivanov&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/105753151742916635749&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Michael Droettboom&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/102862681530523589739&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Wes McKinney&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/101985752635828670051&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Jake Vanderplas&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/115993532093165217430&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Kurt Smith&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/105827017409315158569&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Aron Ahmadia&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/110786793649177800375&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Kyle Mandli&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/103293634823298090368&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Benjamin Root&lt;/a&gt; and others. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;It's also been nice to have a chat with &lt;a href=&quot;http://plus.google.com/105603936345485877784&quot; class=&quot;g-profile&quot; target=&quot;_blank&quot;&gt;+Jason Vertrees&lt;/a&gt; and other guys from &lt;a href=&quot;https://www.schrodinger.com/&quot;&gt;Schrödinger&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;One other thing that I realized last week at the conference is that pretty much everyone agreed on the fact that NumPy should act as the default way to represent memory (no matter if the array was created in Fortran or other code) and allow manipulations on it. Faster libraries like &lt;a href=&quot;http://blaze.pydata.org/&quot;&gt;Blaze&lt;/a&gt; or &lt;a href=&quot;http://blog.enthought.com/general/enthought-awarded-1m-doe-sbir-grant-to-develop-open-source-python-hpc-framework/&quot;&gt;ODIN&lt;/a&gt; should then hook themselves up into NumPy using &lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_dispatch&quot;&gt;multiple dispatch&lt;/a&gt;. Also SymPy would then hook itself up so that it can be used with array operations natively. Currently SymPy does work with NumPy (see our &lt;a href=&quot;https://github.com/sympy/sympy/blob/master/sympy/external/tests/test_numpy.py&quot;&gt;tests&lt;/a&gt; for some examples what works), but the solution is a bit fragile (it is not possible to override NumPy behavior, but because NumPy supports general objects, we simply give it SymPy objects and things mostly work).&lt;br /&gt;&lt;br /&gt;Similar to this, I would like to create multiple dispatch in SymPy core itself, so that other (faster) libraries for symbolic manipulation can hook themselves up, so that their own (faster) multiplication, expansion or series expansion would get called instead of the SymPy default one implemented in pure Python.&lt;br /&gt;&lt;br /&gt;Other blog posts from the conference:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Aaron's &lt;a href=&quot;http://asmeurersympy.wordpress.com/2013/07/02/scipy-2013/&quot;&gt;post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Fernando's &lt;a href=&quot;http://blog.fperez.org/2013/07/in-memoriam-john-d-hunter-iii-1968-2012.html&quot;&gt;post&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
	<pubDate>Tue, 02 Jul 2013 18:05:05 +0000</pubDate>
	<author>noreply@blogger.com (Ondřej Čertík)</author>
</item>
<item>
	<title>Tarun Gaba: GSoC Report Week 2</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7526836182390500993.post-8131354423549423501</guid>
	<link>http://tarun-gaba.blogspot.com/2013/07/gsoc-report-week-2.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;So, week two has also ended.&lt;br /&gt;&lt;br /&gt;I have found several ideas and new features to implement from various people in the community.&lt;br /&gt;We have finished fleshing out the API, although a few things need to be fleshed out.&lt;br /&gt;&lt;br /&gt;As recommended from my mentor, I would be doing test-driven development for the project.&lt;br /&gt;&lt;br /&gt;We have discussed the base classes , and the coming two weeks would be dedicated to writing sole tests for the classes, related to python part of the project.&lt;br /&gt;As a part of improvised timeline, we have decided to keep this month of July, for coding the python side of the project, and after midterm evaluations,. I would be working on the Javascripts.&lt;br /&gt;&lt;br /&gt;The interaction between the Python and Javascripts would take place with the JSON objects, either written in the form of JSON Objects or as written to files.&lt;br /&gt;&lt;br /&gt;This approach would help to provide required level of modularity to the project.&lt;br /&gt;Another major approach to modularity is to make the visualization module(from python side) independent of the mechanics package, i.e. it need not know whether the visualization data comes from sympy.physics.mechanics, or from any other software which could provide the output in the form desired tby the module.&lt;br /&gt;Although the focus is to make the project as mechanics friendly as possible, but still trying to maintain the modularity, and every major API decision is being taken with this point in view.&lt;br /&gt;&lt;br /&gt;This week, I will focus on writing some tests, and commit them to the repo.&lt;br /&gt;&lt;br /&gt;Cheers &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &lt;/div&gt;</description>
	<pubDate>Tue, 02 Jul 2013 09:01:56 +0000</pubDate>
	<author>noreply@blogger.com (TARUN GABA)</author>
</item>
<item>
	<title>Aaron Meurer: SciPy 2013</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1287</guid>
	<link>http://asmeurersympy.wordpress.com/2013/07/02/scipy-2013/</link>
	<description>&lt;p&gt;This past week was the 2013 SciPy conference. It was an exciting time, and a lot of interesting things happened. &lt;/p&gt;
&lt;p&gt;First, a background. This summer, I have been doing an internship with &lt;a href=&quot;http://continuum.io/&quot;&gt;Continuum Analytics&lt;/a&gt;. There I have been working mainly on Anaconda and conda. Anaconda is Continuum’s free (to everyone) Python distribution, which makes it really easy to get bootstrapped with all the scientific software (including SymPy). Conda is Anaconda’s package manager, which, I think, solves many if not all of the main issues with the Python packaging tools like pip, easy_install, PyPI, and virtualenv. &lt;/p&gt;
&lt;p&gt;I may write more about that later, but for now, I want to write about my experiences at the conference. The main point there is that I have already been in Austin for about a month, so getting to the conference this year was pretty easy.&lt;/p&gt;
&lt;p&gt;On the first day of the conference, on Monday morning, Ondrej Certik and I had our tutorial for SymPy. For the past couple of months, I have been rewriting the official SymPy tutorial from scratch. The official tutorial for SymPy was very old, and had many issues. It only went over features that were good at the time of its writing, so while nothing in the tutorial was wrong, it didn’t really represent the latest and greatest of the library. Also, it was written just like a list of examples, which is not much more than the API docs. In my new tutorial, I aimed to give a narrative style documentation, which starts from the very beginning of what symbolics are and works its way up to the basic functionality of things like solving and simplifying expressions. My goal was also to lead by example, and in particular, to avoid teaching things that I think either are antipatterns, or lead to antipatterns. In Python, there is one– and preferably only one –way to do it. In SymPy, by the nature of the library, there are about seven different ways to create a Symbol, for example (see &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Idioms-and-Antipatterns&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/wiki/Idioms-and-Antipatterns&lt;/a&gt;, the section, “Creating Symbols”). But there is one &lt;em&gt;best&lt;/em&gt; way to do it: by using symbols(). So all throughout the tutorial, I just use symbols(), even if I am creating a single Symbol. I avoid messy things like var. &lt;/p&gt;
&lt;p&gt;The final tutorial is at &lt;a href=&quot;http://docs.sympy.org/tutorial/tutorial/&quot; rel=&quot;nofollow&quot;&gt;http://docs.sympy.org/tutorial/tutorial/&lt;/a&gt;. This was the basis for the tutorial that Ondrej and I gave at SciPy. The site for our tutorial is at &lt;a href=&quot;http://certik.github.io/scipy-2013-tutorial/html/index.html&quot; rel=&quot;nofollow&quot;&gt;http://certik.github.io/scipy-2013-tutorial/html/index.html&lt;/a&gt;. There are links to videos, slides, and exercise notebooks there. &lt;/p&gt;
&lt;p&gt;I think our tutorial was a great success. People liked (I think) the introduction from nothing to SymPy. For our exercises, we used the &lt;a href=&quot;https://pypi.python.org/pypi/ipython_doctester&quot;&gt;IPython Doctester&lt;/a&gt;. I think that people really liked this way of doing exercises, but there were some issues getting it to work on everyone’s machine. &lt;/p&gt;
&lt;p&gt;In addition to my stuff, Ondrej presented some notebooks of examples of work that he has used in his work at LANL. I think this worked well. There were several physicists in the audience, who understood most of the content, but even for those who weren’t (including me!), it really showed that SymPy is a useful tool. In a beginner tutorial, it is easy to get lost in the easy details, and forget that in the end, you can actually use SymPy to compute some powerful things.  SymPy has in the past year or two really passed the barrier of toy to tool. &lt;/p&gt;
&lt;p&gt;After our tutorial, I attended the IPython tutorial, and the two-part Scikit-Learn tutorial. The most awesome part of this was just getting to meet people. Fernando Perez, Thomas Kluyver, and Brian Granger of IPython were at the conference. Brain is also a SymPy developer, who has spearheaded the quantum module. From SymPy, in addition to Ondrej (who created SymPy), I met Matthew Rocklin, one of the top contributors, Jason Moore, one of the developers of PyDy, which uses SymPy’s mechanics module, and David Li, who works on SymPy Gamma and SymPy Live (more on these people later). &lt;/p&gt;
&lt;p&gt;After the tutorials, Wednesday and Thursday were the talks. There were a lot of good ones. Here are the ones that I remember the most&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fernando’s keynote. If you’ve ever seen one of Fernando’s talks, you know that he is a great speaker. &lt;/li&gt;
&lt;li&gt;Matthew’s talk. His talk was about his work on using SymPy’s matrix expressions to compile expressions for BLAS/LAPACK. This talk excited many people in the audience. I think this is great, because it shows people some of the real power of things you can only do with symbolics.&lt;/li&gt;
&lt;li&gt;Jason Moore’s talk about PyDy and the mechanics module. He ran out of time, but there is a nice example of using SymPy to generate a controller for an inverted triple pendulum, which seems impossible, but then he shows a video of an actual thing that can do it.&lt;/li&gt;
&lt;li&gt;William Schroeder’s keynote. The message was that the academic model is broken, and doesn’t lead to reproducible research. While they are fixing things, the message is that we are the new publishers. There was also mention at the end that we should stop using noncommercial licenses, and stop using viral licenses like the GPL and LGPL. I was a little surprised to hear such a controversial statement, but it’s actually very true, and I agree with him that if people don’t stop using the GPL, then we will never achieve openness in science. &lt;/li&gt;
&lt;li&gt;David Li’s talk. David Li is a high school student (starting his senior year in the fall), who started with SymPy two years ago with Google Code-In. He has continued working on &lt;a href=&quot;http://live.sympy.org/&quot;&gt;SymPy Live&lt;/a&gt;, and &lt;a href=&quot;http://gamma.sympy.org/&quot;&gt;SymPy Gamma&lt;/a&gt; since. He is the reason that we have &lt;a href=&quot;http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/&quot;&gt;SymPy Live in our docs&lt;/a&gt;. His talk was also well received.  David is a good speaker, and SymPy Gamma and SymPy Live are pretty cool (for those of you who don’t know, SymPy Live is an online shell where you can run a Python session with SymPy in the browser, and SymPy Gamma is the SymPy version of WolframAlpha).&lt;/li&gt;
&lt;li&gt;Brian Granger’s talk. His talk is entitled “&lt;strong&gt;&lt;a href=&quot;http://conference.scipy.org/scipy2013/presentation_detail.php?id=195&quot;&gt;Why you should write buggy software with as few features as possible&lt;/a&gt;“. &lt;/strong&gt;I think he had some good messages in there. You have to reduce the scope of your project, or it will get out of hand. As for bugs, getting bug reports is a good thing, because it shows that people are using the software, and what parts of it they are using. &lt;/li&gt;
&lt;li&gt;The lightning talks. Especially Matthew Rocklin’s lightning talk. His talk was about splitting things up into very small packages, so that you don’t have to get a huge package just for one function. He went a little far with it, and I think his ideas aren’t really usable in the current Python packaging ecosystem, but, taken in moderation, I agree with him. At any rate, it was very entertaining (I don’t have any video links here because they aren’t posted yet, but I encourage you to watch the lightning talks once they are posted). &lt;/li&gt;
&lt;li&gt;I heard the matplotlib talk was good, but I haven’t seen it because it was at the same time as Matthew’s talk. I plan to watch it when the videos come out. If you saw it, I encourage you to watch Matthew’s talk, especially if you’ve ever used BLAS/LAPACK.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topping off the week were the sprints on Friday and Saturday. My goal was to get out a release of SymPy. We didn’t quite get that far, but we got close. We are only blocking on a few small things to get out a release candidate, so expect one before the end of the week. We did introduce a lot of people to SymPy at the sprints, though, and got some first time contributions. Definitely I think we made a lot more people aware of SymPy at this conference than we ever have before. &lt;/p&gt;
&lt;p&gt;Another interesting thing at the sprints: before the conference, I was telling David Li that we should switch to Dill for SymPy Live (the way SymPy Live works on the App Engine, it has to pickle the session between runs, because there is a 60 time limit on each execution). Dill is a library that extends Python’s pickle so that it can pickle just about anything. At the end of David’s talk, the guy who wrote Dill, Mike McKerns raised his hand and asked him about it! At the sprints, David and he worked together to get it working in SymPy Live (and coincidentally, he also uses SymPy in another package, mystic). There were some fixes needed for Dill. He also moved Dill out of a larger project (in the spirit of Matthew’s lightning talk), and over to &lt;a href=&quot;https://github.com/uqfoundation/dill&quot;&gt;GitHub&lt;/a&gt;. Now all they need is a logo (Paul Ivanov suggested a variation on “we can pickle that!”). &lt;/p&gt;
&lt;p&gt;In all, it was a fun conference. The best part, as always, was meeting people in person, and talking to them. To conclude, I want to mention two other interesting things that happened.&lt;/p&gt;
&lt;p&gt;The first is that Matthew and I talked seriously about how to go about fixing the assumptions in SymPy. I will write to the list about this soon, but the basic idea is to just get in there and hack things together, so that we can get something that works. The work there is started at &lt;a href=&quot;https://github.com/sympy/sympy/pull/2210&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2210&lt;/a&gt;, where I am seeing if we can merge the old and new assumptions, so that something assumed in one can be asked in the old one.&lt;/p&gt;
&lt;p&gt;The second thing is that Ondrej got a new hat: &lt;a href=&quot;http://asmeurersympy.files.wordpress.com/2013/07/2013-06-26-08-02-40-hdr.jpg&quot;&gt;&lt;img src=&quot;http://asmeurersympy.files.wordpress.com/2013/07/2013-06-26-08-02-40-hdr.jpg?w=450&amp;amp;h=602&quot; alt=&quot;Ondrej's Hat&quot; width=&quot;450&quot; class=&quot;alignnone size-full wp-image-1344&quot; height=&quot;602&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1287/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1287/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1287&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 02 Jul 2013 01:42:08 +0000</pubDate>
</item>
<item>
	<title>Saurabh Jha: Week3</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-4981516222455411508</guid>
	<link>http://sympymatrix.blogspot.com/2013/06/week3.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;I am done with level 0 and level 1 of sparse matrix. I am going to push the last bits of code of level 0 today. I am also almost done with the level 1 of sparse matrix and open the PR as soon as the level 0 gets merged in the code.&lt;br /&gt;&lt;br /&gt;For level 0, I need to implement a version of Cholesky decomposition. I am still not sure that I use CSR or DOK. I am not able to find any CSR Cholesky algorithms, so maybe I'll use CSR.&lt;br /&gt;&lt;br /&gt;I am thinking about changing my plan now. Earlier, it was  first implement level 0 completely, then level 1,  then level 2 and then level 3. Now I am going to implement the whole sparse structure from level 0 to level 3. The reason I am doing this is--&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;The level 1 cannot be used as it is in the rest of Sympy.&lt;/li&gt;&lt;li&gt;I am still not sure about the whole design. I have mostly been planning about it on the fly.&lt;/li&gt;&lt;li&gt;Others can see the advantages/disadvantages of the proposed architecture right away&lt;/li&gt;&lt;li&gt;Sparse are not as much used so I can test my ideas before moving on to dense&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;I have realised now that most of the code will be in level 0. Level 1 is really about having the functions of level 0 in the methods of the classes.  Level 1, 2, 3 would be just interface to the real code in level 0.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I hope dense matrix will not take me as much time as sparse matrices since they are comparatively straightforward and less esoteric for me. Plus I would have the concrete design in front of my eyes (in sparse matrix), so hopefully there would be less detours.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;[1] https://github.com/sympy/sympy/pull/2206&lt;/div&gt;</description>
	<pubDate>Mon, 01 Jul 2013 01:58:15 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Sachin Joglekar: GSoC: Week 2 : Reference Frames</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-8215975183868191855</guid>
	<link>http://codesachin.blogspot.com/2013/06/gsoc-week-2-reference-frames.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This is an update for the second week of my GSoC coding period. Its been long and quite tedious (though very interesting at times), as far as the code was concerned. Got a lot of stuff done in the commits this week, and I guess the major components of the reference frame class are now in place. Well, I can't be sure whether its perfect till Gilbert reviews it, but all that we discussed is more or less there. The things that got done this week-&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;The initializer for the MovingRefFrame class. Its huge and dense as I had said earlier, but it gets the job done well, and prevents any 'special cases' from wreaking havoc while at the same time giving all the needed functionality. As mentioned in the last week, the functions for boundary conditions have now been implemented in a file of their own, and they get called in this class' 'init' function. There were some other issues as well, like allowing velocities to be defined in frames that don't 'exist' yet, etc. But thankfully, they got solved after some thinking(read: thinking hard).&lt;/li&gt;&lt;li&gt;I rewrote the tree algorithm for finding relative motion parameters, since the one I had implemented earlier went via the global frame everytime- something that made the whole process very inefficient(and computationally impractical) at times. To get an idea of what I am talking about, imagine a 100 reference frames, each defined at some orientation/position wrt its predecessor. Now I want to know the motion of the 98th frame wrt the 96th. Earlier, I would find the motion of the 98th wrt the first(global) frame, do the same for 96th, and then 'process' the info to get the required motion params. Some tests with the current framework made me realise how stupid that was. So now, it just goes this way - 98th-&amp;gt;97th-&amp;gt;96th, the way its supposed to be.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;A small mock SymPy session with the use of this class is shown below-&lt;/div&gt;&lt;div&gt;The conditions are-&lt;/div&gt;&lt;div&gt;1) A frame R1&lt;/div&gt;&lt;div&gt;2) A frame R2 defined wrt R1, such that it initially coincides with R1, but has angular velocity of &lt;span style=&quot;background-color: white; font-family: arial, sans-serif; font-size: x-small; line-height: 16px;&quot;&gt;&lt;b&gt;k̂&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; font-family: sans-serif; font-size: 13px; line-height: 19.1875px;&quot;&gt; &lt;/span&gt;wrt it&lt;/div&gt;&lt;div&gt;3) A frame R3 defined wrt R2, such that it has a constant position vector of &lt;span style=&quot;background-color: white; color: #444444; font-family: arial, sans-serif; font-size: x-small; line-height: 16px;&quot;&gt;&lt;b&gt; î&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;span style=&quot;background-color: #f9f9f9; font-family: sans-serif; line-height: 31px; text-align: center;&quot;&gt; &lt;/span&gt;&lt;/span&gt; wrt it.&lt;/div&gt;&lt;div&gt;Since R2 is rotating wrt R1, R3's position vector wrt R1 will be a function of time, as expected. Heres the working-&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt; &amp;gt;&amp;gt;&amp;gt; from sympy.physics.mechanics import MovingRefFrame  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; R1 = MovingRefFrame('R1', parentframe=None)  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; R2 = MovingRefFrame('R2', parentframe = R1, ang_vel = R1.basis(2))  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; R3 = MovingRefFrame('R3', parentframe = R2, pos_vector = R2.basis(0))&lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; R1.express(R3.pos_vector_in(R1))  &lt;br /&gt; - cos(t)*R1.basis(0) - sin(t)*R1.basis(1)  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;Thats all for now. You can have a look at the &lt;a href=&quot;https://github.com/sympy/sympy/pull/2187&quot;&gt;PR&lt;/a&gt; if you wish. The coming week will majorly be spent fine-tuning my current code and making it perfectly compatible with Prasoon's API, adding a few other helper functions if needed, and writing unit tests/example docs for all that's implemented so far.&lt;br /&gt;Have a great week :-)&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 29 Jun 2013 19:36:40 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>
<item>
	<title>Thilina Rathnayake: Quadratic Diophantine equation – I</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=61</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/06/29/quadratic-diophantine-equation-i/</link>
	<description>&lt;p&gt;Quadratic Diophantine equation is an equation of the form &lt;em&gt;Ax**2 + Bxy + Cy**2 + Dx + Ey + F = 0&lt;/em&gt; where&lt;em&gt; A, B, C, D, E,&lt;/em&gt; and &lt;em&gt;F&lt;/em&gt; are integer constants and x and y being integer variables. Study of this equation has always been an interesting area among number theorists. The famous pell equation is a special case of the above with&lt;em&gt; delta = B**2-4AC &amp;gt; 0&lt;/em&gt; and delta not being a perfect square. Normally, this equation is broken down into five cases for analytical purposes.&lt;/p&gt;
&lt;p&gt;1)&lt;em&gt; A = B = C = 0&lt;/em&gt; (Linear case): Reduces to a linear Diophantine equation of two variables.&lt;/p&gt;
&lt;p&gt;2) &lt;em&gt;A = B = 0&lt;/em&gt; and&lt;em&gt; C != 0 &lt;/em&gt; (Simple hyperbolic case): Equation reduces to &lt;em&gt;(Bx + E) (By + D) = DE – BF, &lt;/em&gt;which can be solved by considering the factors of &lt;em&gt;DE – BF&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;3) &lt;em&gt;B**2 – 4AC &amp;lt; 0 &lt;/em&gt;(Elliptical case): In this case, values of the x should lie between the roots of the equation &lt;em&gt;(B**2-4AC)x**2 + 2(BE – 2CD)x + E**2 – 4CF = 0. &lt;/em&gt;Values for x should be selected so that y is an integer.&lt;/p&gt;
&lt;p&gt;4) &lt;em&gt;B**2 – 4AC = 0 &lt;/em&gt;(Parabolic case): Solution procedure is rather complex in this case.&lt;/p&gt;
&lt;p&gt;I will describe these cases in detail in the future posts. I had almost completed the above cases at the start of Week 2.&lt;/p&gt;
&lt;p&gt;5) &lt;em&gt;delta = B**2 – 4AC &amp;gt; 0&lt;/em&gt;: This is split into several subcases.&lt;em&gt; &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case &lt;em&gt;delta = B**2 – 4AC &amp;gt; 0&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Subcase 1:&lt;em&gt; D = E = 0&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;This is the homogeneous case and again considered under two cases &lt;em&gt;F = 0&lt;/em&gt; and &lt;em&gt;F != 0&lt;/em&gt;. If&lt;em&gt; F = 0&lt;/em&gt;, then &lt;em&gt;x = 0&lt;/em&gt; and &lt;em&gt;y = 0&lt;/em&gt; are solutions. More solutions may exist if&lt;em&gt; B**2 – 4AC&lt;/em&gt; is a perfect square. Otherwise&lt;em&gt; x = 0&lt;/em&gt; and &lt;em&gt;y = 0&lt;/em&gt; is the only solution. I implemented this case in the module. If &lt;em&gt;F != 0&lt;/em&gt; the solution procedure is rather complex and involves continued fractions. I am currently working on this.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/61/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/61/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=61&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 29 Jun 2013 19:17:39 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: Second week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=109</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/06/29/second-week-2/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;I started this week with writing documentation and more tests for the univariate GCD. I originally planned to do this later right before making a pull request, but it felt more right to do it now.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;After that I made some progress on the multivariate GCD implementation. What is working at the moment is the bivariate case, i.e. for polynomials in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bx%2Cy%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z[x,y]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z[x,y]&quot; /&gt;. This is what is described in the article by Monagan and Wittkopf [1]. Sadly, they do not talk about general multivariate polynomials. That is why I looked into Brown’s original article [2] on the modular GCD algorithm. My plan now is to create a mixture of the two algorithms to cover multivariate polynomials but also take advantage of the ideas in [1].&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;I am writing everything for the new &lt;code&gt;PolyElement&lt;/code&gt; module, which is both an advantage and a disadvantage at the same time. On the one hand, the design of the new module is very nice, but on the other hand there are still a lot of functions which are not yet ported. This means that for a lot of calculations I have to convert to the old representation and back. Therefore, speed comparisons with the heuristic GCD algorithm do not make much sense at this point.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Next week I plan to finish a working version for multivariate polynomials and maybe try to reduce the number of needed conversions.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;[1] &lt;a href=&quot;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&lt;/a&gt;&lt;br /&gt;
[2] &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=321664&quot; rel=&quot;nofollow&quot;&gt;http://dl.acm.org/citation.cfm?id=321664&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/109/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/109/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=109&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 29 Jun 2013 16:34:54 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: The modular GCD algorithm for univariate integer polynomials</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=113</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/06/29/the-modular-gcd-algorithm-for-univariate-integer-polynomials/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;In this post I will briefly describe the algorithm from [1], which I implemented for computing the greatest common divisor of two univariate integer polynomials.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;strong&gt;Input:&lt;/strong&gt; two polynomials &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29%2C+g%28x%29+%5Cin+%5Cmathbb+Z%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x), g(x) \in \mathbb Z[x]&quot; class=&quot;latex&quot; title=&quot;f(x), g(x) \in \mathbb Z[x]&quot; /&gt;&lt;br /&gt; &lt;strong&gt;Output:&lt;/strong&gt; their GCD &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x)&quot; class=&quot;latex&quot; title=&quot;h(x)&quot; /&gt; and cofactors, i.e. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29%2Fh%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x)/h(x)&quot; class=&quot;latex&quot; title=&quot;f(x)/h(x)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%28x%29%2Fh%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g(x)/h(x)&quot; class=&quot;latex&quot; title=&quot;g(x)/h(x)&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The main loop iterates over all primes &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; does not divide the leading coefficients of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x)&quot; class=&quot;latex&quot; title=&quot;f(x)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g(x)&quot; class=&quot;latex&quot; title=&quot;g(x)&quot; /&gt; at the same time. This has the effect that the degree of the GCD of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29+%5C%2C+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x) \, \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;f(x) \, \mathrm{mod} \, p&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%28x%29+%5C%2C+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g(x) \, \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;g(x) \, \mathrm{mod} \, p&quot; /&gt; in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[x]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[x]&quot; /&gt; is not smaller than the degree of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x)&quot; class=&quot;latex&quot; title=&quot;h(x)&quot; /&gt;. If the degree is the same, we call the prime &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; &lt;em&gt;lucky,&lt;/em&gt; otherwise we call it &lt;em&gt;unlucky. &lt;/em&gt;The efficiency of the algorithm relies on the fact that unlucky primes are rare.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;For a lucky prime &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; the GCD of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29+%5C%2C+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f(x) \, \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;f(x) \, \mathrm{mod} \, p&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=g%28x%29+%5C%2C+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;g(x) \, \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;g(x) \, \mathrm{mod} \, p&quot; /&gt; in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[x]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[x]&quot; /&gt; differs only by a constant factor from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29+%5C%2C+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x) \, \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;h(x) \, \mathrm{mod} \, p&quot; /&gt;. Therefore the strategy is to calculate the former for enough lucky primes and then reconstruct &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x)&quot; class=&quot;latex&quot; title=&quot;h(x)&quot; /&gt; with the Chinese Remainder Theorem. The tricky part is to decide which primes are lucky and how many primes are enough.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The algorithm detects unlucky primes by comparing the degrees of the GCDs for different primes. It assumes that the first prime is lucky. If the GCD for the next prime has higher degree, we know that it is unlucky and skip it. If the degree is the same, we assume that it is also lucky. We continue in this way. If at some point we encounter a prime where the degree is lower, we know all previous primes were unlucky and have to start over. For each (presumably) lucky prime we reconstruct a polynomial in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z[x]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z[x]&quot; /&gt; from the previously reconstructed polynomial and the GCD in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%5Bx%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p[x]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p[x]&quot; /&gt; using the Chinese Remainder Theorem. (For the first prime we just take the GCD itself.) When there is no change to the previous one it is very likely &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x)&quot; class=&quot;latex&quot; title=&quot;h(x)&quot; /&gt; and we do a trial division to verify the result. If this is successful we have found &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;h(x)&quot; class=&quot;latex&quot; title=&quot;h(x)&quot; /&gt; (and the cofactors), otherwise we need more primes and have to continue.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;[1] &lt;a href=&quot;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.cecm.sfu.ca/~monaganm/papers/BrownGCD.pdf&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/113/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/113/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=113&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 29 Jun 2013 14:53:07 +0000</pubDate>
</item>
<item>
	<title>Prasoon Shukla: GSoC Week 2 : SymPy Development</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=177</guid>
	<link>http://musingsofafriend.wordpress.com/2013/06/29/gsoc-week-2-sympy-development/</link>
	<description>&lt;p&gt;This is the summary of the work done and problems faced by me during my second week of development.&lt;/p&gt;
&lt;p&gt;Okay, so this week, I had planned to add some code that would work more on the structural part of the project. So, first I added support for cylindrical coordinate systems as well as the spherical coordinate system (along with the already present Rectangular coordinates). That was added without any problems.&lt;/p&gt;
&lt;p&gt;The next thing to do was to begin with the classes that will handle the vectors. There are 3 such classes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Vector&lt;/strong&gt; : This class is designed to hold just the base vectors. Initially, this class was supposed to hold the complete vector field but now we have changed that.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VectMul&lt;/strong&gt; : This class is made to hold product of type &lt;em&gt;scalar * Vector&lt;/em&gt;. Also, this can hold items of type &lt;em&gt;scalar * VectAdd (see point 3).&lt;/em&gt; This class is subclassed from &lt;strong&gt;Mul&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VectAdd &lt;/strong&gt;: This is a class subclassed from &lt;strong&gt;Add&lt;/strong&gt;. Just like Add, this will hold the sum of Vector and VectMul objects.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of these classes initialize a variable&lt;em&gt; is_Vector =True &lt;/em&gt;that is used for determining whether the an object is a vectors.&lt;/p&gt;
&lt;p&gt;I have implemented these class in their basic form. Once I had some structure to build on top of,  I started implementing basic functionality on these three classes. Here’s where the problem came. Let us take an example of VectAdd. A VectAdd stores many vector objects added together. Now, there is no requirement for the all the vector objects to be in the same frame. As an example, take this:&lt;i&gt;&lt;br /&gt;
&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cvec%7Bv%7D+%3D+%5Chat%7Bx%7D+%2B+%5Chat%7B%5Cvarphi%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\vec{v} = \hat{x} + \hat{\varphi}&quot; class=&quot;latex&quot; title=&quot;\vec{v} = \hat{x} + \hat{\varphi}&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Then clearly, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cvec%7Bv%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\vec{v}&quot; class=&quot;latex&quot; title=&quot;\vec{v}&quot; /&gt; has vectors in different coordinate systems. Therefore, implementing even the basic vector operations like the dot product becomes difficult because we need to have components of each vector in every coordinate system.&lt;/p&gt;
&lt;p&gt;Now for this problem, I have tried a couple of things. I still haven’t been able to successfully win over this problem but here’s an approach that I think will work. First, we need to have methods that will take a vector (VectAdd/VectMul/Vector) and output a list of vectors – only this time, each vector will be in different coordinate system. To implement such a method (which I’ll call &lt;em&gt;separate&lt;/em&gt;), we need to proceed as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loop over the &lt;em&gt;args&lt;/em&gt; of the vector and for every different coordinate system you encounter, add that to a dictionary.&lt;/li&gt;
&lt;li&gt;Then, for that dictionary key, the value will be a list that contains the &lt;em&gt;args&lt;/em&gt; for which have been defined in that particular coordinate system.&lt;/li&gt;
&lt;li&gt;Now, just take the args and construct a vector from those args – if there’s just one arg, we return it as is; if there are more than one, we return a VectAdd constructed with those args.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, the problem doesn’t end there. The Vector/VectAdd/VectMul can each represent vectors. Now, we will need to have methods that do a certain operation (for example the dot product) defined for every such class. A better way would be to make a generic function for each such functionality and indeed, that is what I have tried out with the dot product. But this won’t work until we have completed the separate method.&lt;/p&gt;
&lt;p&gt;I’ll be working on finishing the ‘separate’ method next. Then, if it works as expected, we can move and implement various other vector operators. Also, finishing this method (separate) will give me the opportunity to finally finish the helper methods and have something working – right now, I ‘m just writing the code without knowing how it would work. Anyway, that’s the plan for the next few days.&lt;/p&gt;
&lt;p&gt;And by the way, I just switched to &lt;a href=&quot;http://www.gnu.org/s/emacs/&quot; target=&quot;_blank&quot; title=&quot;Emacs!&quot;&gt;Emacs&lt;/a&gt; and it’s just great! ^__^ I can finally see what all the buzz was about &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/177/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/177/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=177&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 29 Jun 2013 11:09:44 +0000</pubDate>
</item>
<item>
	<title>Saurabh Jha: Week 2.5 Profiling of different implementations of sparse</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-212141304695696653</guid>
	<link>http://sympymatrix.blogspot.com/2013/06/week-25-profiling-of-different.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;br /&gt;I spent the last couple of days experimenting with alternate implementation of various algorithms. Here are the results--&lt;br /&gt;&lt;br /&gt;for three implementations of sparse*sparse-- _mulspsp, _mulspsp2, _mulspsp3, on two matrices&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;a = SparseMatrix(3, 4, {(0, 0): 1, (0, 1): 2, (2, 2): 3})&lt;br /&gt;b = SparseMatrix(4, 3, {(0, 0): 2, (0, 2): 4, (1, 2): 5})&lt;br /&gt;&lt;br /&gt;The profile results are&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cProfile.run(&quot;_mulspsp(a, b, ZZ)&quot;)&lt;br /&gt;         709 function calls (691 primitive calls) in 0.001 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;       38    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;       39    0.000    0.000    0.000    0.000 matrices.py:3571(a2idx)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 matrices.py:390(shape)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 matrices.py:947(key2bounds)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 matrices.py:977(key2ij)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1595(__radd__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1619(__rmul__)&lt;br /&gt;       10    0.000    0.000    0.000    0.000 numbers.py:1873(__nonzero__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sparse.py:1046(_new)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sparse.py:163(col)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparse.py:182(row_list)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 sparse.py:201(&amp;lt;lambda&amp;gt;)&lt;br /&gt;       19    0.000    0.000    0.000    0.000 sparse.py:34(__init__)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sparse.py:476(submatrix)&lt;br /&gt;       33    0.000    0.000    0.001    0.000 sparse.py:83(__getitem__)&lt;br /&gt;    33/15    0.000    0.000    0.000    0.000 sparsetools.py:116(_binsearch)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 sparsetools.py:43(_mulspsp)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparsetools.py:5(_doktocsr)&lt;br /&gt;        9    0.000    0.000    0.000    0.000 sparsetools.py:95(_mulspvec)&lt;br /&gt;       19    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;       18    0.000    0.000    0.000    0.000 {divmod}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;      158    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;      103    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        8    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}&lt;br /&gt;       24    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}&lt;br /&gt;        9    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}&lt;br /&gt;       21    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}&lt;br /&gt;        9    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {sorted}&lt;br /&gt;       17    0.000    0.000    0.000    0.000 {zip}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; cProfile.run(&quot;_mulspsp2(a, b, ZZ)&quot;)&lt;br /&gt;         585 function calls in 0.001 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;       40    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;       31    0.000    0.000    0.000    0.000 matrices.py:3571(a2idx)&lt;br /&gt;       10    0.000    0.000    0.000    0.000 matrices.py:383(__len__)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 matrices.py:390(shape)&lt;br /&gt;       15    0.000    0.000    0.000    0.000 matrices.py:947(key2bounds)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 matrices.py:977(key2ij)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 numbers.py:1595(__radd__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 numbers.py:1619(__rmul__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1873(__nonzero__)&lt;br /&gt;       15    0.000    0.000    0.000    0.000 sparse.py:1046(_new)&lt;br /&gt;        5    0.000    0.000    0.000    0.000 sparse.py:145(row)&lt;br /&gt;       10    0.000    0.000    0.000    0.000 sparse.py:163(col)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparse.py:182(row_list)&lt;br /&gt;        3    0.000    0.000    0.000    0.000 sparse.py:201(&amp;lt;lambda&amp;gt;)&lt;br /&gt;       20    0.000    0.000    0.000    0.000 sparse.py:34(__init__)&lt;br /&gt;       15    0.000    0.000    0.000    0.000 sparse.py:476(submatrix)&lt;br /&gt;       28    0.000    0.000    0.001    0.000 sparse.py:83(__getitem__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparsetools.py:5(_doktocsr)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 sparsetools.py:62(_mulspsp2)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 sparsetools.py:95(_mulspvec)&lt;br /&gt;       20    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;       10    0.000    0.000    0.000    0.000 {divmod}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;      154    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;       85    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        5    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}&lt;br /&gt;       13    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}&lt;br /&gt;       15    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}&lt;br /&gt;       22    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}&lt;br /&gt;        4    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {sorted}&lt;br /&gt;        9    0.000    0.000    0.000    0.000 {zip}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; cProfile.run(&quot;_mulspsp3(a, b, ZZ)&quot;)&lt;br /&gt;         159 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        7    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;       12    0.000    0.000    0.000    0.000 matrices.py:3571(a2idx)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 matrices.py:390(shape)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 matrices.py:977(key2ij)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:1019(zeros)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparse.py:182(row_list)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 sparse.py:201(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:34(__init__)&lt;br /&gt;        6    0.000    0.000    0.000    0.000 sparse.py:83(__getitem__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparsetools.py:78(_mulspsp3)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;        7    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;       43    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;        8    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'iteritems' of 'dict' objects}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {sorted}&lt;br /&gt;        6    0.000    0.000    0.000    0.000 {zip}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;It turns out that the fastest implementation is _mulspsp3 (which is the same as the one used in sparse.py) is fastest.&lt;br /&gt;&lt;br /&gt;However, great improvement is shown in sparse*vec. I will just take a single example as I have earlier written that new algorithm is O(nnz) asymptotically in any case.&lt;br /&gt;&lt;br /&gt;m =                              &lt;br /&gt;&lt;br /&gt;[1, 2, 0, 0, 0, 0]&lt;br /&gt;[0, 3, 0, 4, 0, 0]&lt;br /&gt;[0, 0, 5, 6, 7, 0]&lt;br /&gt;[0, 0, 0, 0, 0, 8]&lt;br /&gt;&lt;br /&gt;and equivalent csr= [[ZZ(1), ZZ(2), ZZ(3), ZZ(4), ZZ(5), ZZ(6), ZZ(7), ZZ(8)], [0, 1, 1, 3, 2, 3, 4, 5], [0, 2, 4, 7, 8], [4, 6]]&lt;br /&gt;&lt;br /&gt;n = Matrix([[ZZ(4)], [ZZ(7)], [ZZ(12)], [ZZ(14)], [ZZ(17)], [ZZ(2)]]) (vector)&lt;br /&gt;&lt;br /&gt;Profile results are given below&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; cProfile.run(&quot;m*n&quot;)&lt;br /&gt;         545 function calls (540 primitive calls) in 0.001 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;       22    0.000    0.000    0.000    0.000 compatibility.py:19(iterable)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;       27    0.000    0.000    0.000    0.000 compatibility.py:64(is_sequence)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 dense.py:588(_new)&lt;br /&gt;      5/1    0.000    0.000    0.000    0.000 iterables.py:16(flatten)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 iterables.py:62(&amp;lt;lambda&amp;gt;)&lt;br /&gt;       36    0.000    0.000    0.000    0.000 matrices.py:3571(a2idx)&lt;br /&gt;       19    0.000    0.000    0.000    0.000 matrices.py:390(shape)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 matrices.py:81(_handle_creation_inputs)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 matrices.py:977(key2ij)&lt;br /&gt;       16    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1588(__add__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1595(__radd__)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 numbers.py:1619(__rmul__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:1019(zeros)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:1046(_new)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:120(tolist)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparse.py:182(row_list)&lt;br /&gt;       14    0.000    0.000    0.000    0.000 sparse.py:201(&amp;lt;lambda&amp;gt;)&lt;br /&gt;        1    0.000    0.000    0.001    0.001 sparse.py:295(multiply)&lt;br /&gt;      2/1    0.000    0.000    0.001    0.001 sparse.py:338(__mul__)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 sparse.py:34(__init__)&lt;br /&gt;       18    0.000    0.000    0.000    0.000 sparse.py:83(__getitem__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x10a127248}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;       31    0.000    0.000    0.000    0.000 {hasattr}&lt;br /&gt;      178    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;       22    0.000    0.000    0.000    0.000 {iter}&lt;br /&gt;       25    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;       10    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        4    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}&lt;br /&gt;       18    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'iteritems' of 'dict' objects}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}&lt;br /&gt;       13    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;        2    0.000    0.000    0.000    0.000 {sorted}&lt;br /&gt;       18    0.000    0.000    0.000    0.000 {zip}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; cProfile.run(&quot;_mulspvec(csr, n, ZZ)&quot;)&lt;br /&gt;         104 function calls in 0.000 seconds&lt;br /&gt;&lt;br /&gt;   Ordered by: standard name&lt;br /&gt;&lt;br /&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)&lt;br /&gt;        2    0.000    0.000    0.000    0.000 compatibility.py:543(as_int)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 dense.py:33(__getitem__)&lt;br /&gt;       12    0.000    0.000    0.000    0.000 domain.py:64(new)&lt;br /&gt;       12    0.000    0.000    0.000    0.000 domain.py:67(__call__)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 matrices.py:3571(a2idx)&lt;br /&gt;        8    0.000    0.000    0.000    0.000 numbers.py:1522(__new__)&lt;br /&gt;        7    0.000    0.000    0.000    0.000 numbers.py:1552(__int__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1595(__radd__)&lt;br /&gt;        4    0.000    0.000    0.000    0.000 numbers.py:1619(__rmul__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparse.py:34(__init__)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 sparsetools.py:95(_mulspvec)&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {callable}&lt;br /&gt;       25    0.000    0.000    0.000    0.000 {isinstance}&lt;br /&gt;        3    0.000    0.000    0.000    0.000 {len}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}&lt;br /&gt;        1    0.000    0.000    0.000    0.000 {range}&lt;br /&gt;        4    0.000    0.000    0.000    0.000 {zip}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The new implementations of _applyfunc and scaler*sparse give little improvements but the code is simpler and thus less chances for error.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;All the code can be found at the latest commit of https://github.com/sympy/sympy/pull/2206. Also written there is the rationale of using csr internally.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 27 Jun 2013 09:40:11 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Mary Clark: Week 2</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=22</guid>
	<link>http://meclark256.wordpress.com/2013/06/26/week-2/</link>
	<description>&lt;p&gt;This week, I have more or less finished up the Type_B class.  The Lie algebra B_n corresponds to the Lie algebra so(2n + 1).  A fair amount of this work was more or less a copy/paste from the Type_A class, but there was additional work, since the root system is more complicated, and the Cartan matrix is different.&lt;/p&gt;
&lt;p&gt;I also decided that it would be good to add more functionality than I had talked about in my GSOC proposal.  I specifically wanted to add a function which tells a Sympy user the total number of roots a given Lie algebra has.  While only the simple roots of a Lie algebra are the most important/worked with, the total number of roots can be useful for calculations.  &lt;/p&gt;
&lt;p&gt;Having successfully (I hope) finished Type_A and Type_B, I think that I want to pause work in this direction for the moment, and begin properly building CartanType.  I want to make sure that I have this basic functionality working early, so that everything doesn’t go to hell in a handbasket later from not having a solid foundation.  I hope that I can have this working by the beginning of next week.&lt;/p&gt;
&lt;p&gt;After I finish that, I need to sit down and learn and concentrate and understand the algorithm for generating the commutation relations of a given Lie algebra.  From Cahn’s notes on semisimple Lie algebras (&lt;a href=&quot;http://phyweb.lbl.gov/~rncahn/www/liealgebras/texall.pdf&quot; rel=&quot;nofollow&quot;&gt;http://phyweb.lbl.gov/~rncahn/www/liealgebras/texall.pdf&lt;/a&gt;) all the commutations relations are determined by the Cartan matrix of a Lie algebra.   However, at this point I don’t really understand the mathematics behind this, since I’ve only looked at it somewhat cursorily.   I’m not sure how long this will take, in the end, but hopefully not too long.&lt;/p&gt;
&lt;p&gt;Later this week or this weekend I’m going to write a brief post on Lie algebras in general, so that anyone who isn’t familiar with them can get an introduction to root systems, Cartan matrices, etc.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/22/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/22/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=22&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 26 Jun 2013 19:13:54 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: The guessing game continues</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=536</guid>
	<link>http://manojbits.wordpress.com/2013/06/26/the-guessing-game-continues/</link>
	<description>&lt;p&gt;So, I started my week trying my best to figure out how to implement the third heuristic, given the fact that the Maple paper gave me no clue, on how do to it. I had also posted these questions on Math Stack and Math Overflow.&lt;/p&gt;
&lt;p&gt;1.&lt;a href=&quot;http://mathoverflow.net/questions/134011/best-approach-to-solve-this-pde&quot; rel=&quot;nofollow&quot;&gt;http://mathoverflow.net/questions/134011/best-approach-to-solve-this-pde&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&quot;http://math.stackexchange.com/questions/423334/method-of-characteristics-a-general-doubt&quot; rel=&quot;nofollow&quot;&gt;http://math.stackexchange.com/questions/423334/method-of-characteristics-a-general-doubt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The answer to the first question [1] was highly misleading, and I again wasted time trying to find the fallacy in the answer. (By the way, if anyone is able to find where the answer is supposedly wrong, please do add a comment) . Also to add fuel to the fire, the Math Overflow guys gave me a so called &lt;a href=&quot;http://math.stackexchange.com/help/badges/40/tumbleweed&quot;&gt;Tumbleweed&lt;/a&gt; badge, which is given to a person who asks a question with no votes, no answers, no comments, and low views for a week. Sigh.&lt;/p&gt;
&lt;p&gt;Then Sean, gave me a &lt;a href=&quot;http://www.google.co.in/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=3&amp;amp;ved=0CDsQFjAC&amp;amp;url=http%3A%2F%2Fwww.physics.drexel.edu%2F~bob%2FLieGroups%2FLG_16.pdf&amp;amp;ei=M-nKUcyRKMuqkgWyzYGgAg&amp;amp;usg=AFQjCNGkleRIkesil88wTDOlvErLjYBUMQ&amp;amp;sig2=iNN4uk09kOTV5CkB-1WCng&amp;amp;bvm=bv.48340889,d.dGI&amp;amp;cad=rja&quot;&gt;paper&lt;/a&gt; which had a heuristic, that follows a logic that I intelligently(?) used in my eleventh and twelfth entrance examinations, assume one of the four answers given in the options, substitute it back and see which one satisfies the question best (Umm. Did I mention this somewhere before?). Okay,now more seriously,let us once again examine the PDE in question,&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D+%2B+%28%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+y%7D+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+x%7D%29+%2A+h%28x%2C+y%29+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+y%7D%2Ah%28x%2Cy%29%5E%7B2%7D+-+%5Cxi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%5Ceta%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;The algorithm is as follows:&lt;/p&gt;
&lt;p&gt;1. Since &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x, y)&quot; class=&quot;latex&quot; title=&quot;\eta(x, y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x, y)&quot; class=&quot;latex&quot; title=&quot;\xi(x, y)&quot; /&gt; ,  are assumed to be bi-variate polynomials in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;, by intuition &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h(x, y)&quot; class=&quot;latex&quot; title=&quot;h(x, y)&quot; /&gt; should be a rational function in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt;  and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;. There could also be cases like when &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h%28x%2C+y%29+%3D+sin%28x%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h(x, y) = sin(x)&quot; class=&quot;latex&quot; title=&quot;h(x, y) = sin(x)&quot; /&gt; and there could be a series expansion on both sides. But its best that things are kept simple and hence those cases are left alone.&lt;/p&gt;
&lt;p&gt;2. Then we substitute &lt;img src=&quot;http://s0.wp.com/latex.php?latex=h&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;h&quot; class=&quot;latex&quot; title=&quot;h&quot; /&gt; it in the equation,  reduce it into a (numerator / denominator) form, throw away the denominator,  and find the degree of the numerator. By intuition again, this is the maximum limit upto which &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x, y)&quot; class=&quot;latex&quot; title=&quot;\eta(x, y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y)&quot; class=&quot;latex&quot; title=&quot;\xi(x,y)&quot; /&gt; can reach.&lt;/p&gt;
&lt;p&gt;3. First &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2C+y%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x, y)&quot; class=&quot;latex&quot; title=&quot;\eta(x, y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y)&quot; class=&quot;latex&quot; title=&quot;\xi(x,y)&quot; /&gt; are assumed to be constants and substituted in the PDE. Terms that are monomials in y are grouped together, for example &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y%2C+1%2C+y%2Ax%2C+y%2Ax%7B2%7D%2C+y%5E%7B2%7D%2Ax&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y, 1, y*x, y*x{2}, y^{2}*x&quot; class=&quot;latex&quot; title=&quot;y, 1, y*x, y*x{2}, y^{2}*x&quot; /&gt; and the coefficients are equated to zero, this gives us a set of linear equations in the coefficients which are tried to solve for using solve(). If it gives a non-trivial solution, those are the infinitesimals.  If it doesn’t&lt;/p&gt;
&lt;p&gt;4. Then keep iterating &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\eta(x,y)&quot; class=&quot;latex&quot; title=&quot;\eta(x,y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%28x%2Cy%29&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\xi(x,y)&quot; class=&quot;latex&quot; title=&quot;\xi(x,y)&quot; /&gt; . The next step would be to assume the infinitesimals to be &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%2B+b%2Ax+%2B+c%2Ay&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a + b*x + c*y&quot; class=&quot;latex&quot; title=&quot;a + b*x + c*y&quot; /&gt; , and follow step 3 again. If it doesn’t work out then, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%2B+b%2Ax+%2B+c%2Ay+%2B+d%2Ax%5E%7B2%7D+%2B+e%2Ax%2Ay+%2B+f%2Ay%7B2%7D&amp;amp;bg=fff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a + b*x + c*y + d*x^{2} + e*x*y + f*y{2}&quot; class=&quot;latex&quot; title=&quot;a + b*x + c*y + d*x^{2} + e*x*y + f*y{2}&quot; /&gt; and step 3 and so on, till the max limit given by step 2 is reached.&lt;/p&gt;
&lt;p&gt;5. It should be understood that non-trivial solutions for a homogeneous set of equations always return a set of equations, with arbitrary constants. For now, I’ve assumed all these constants to be one. I still don’t know how effective this is.&lt;/p&gt;
&lt;p&gt;The source code can be seen here: &lt;a href=&quot;https://github.com/sympy/sympy/pull/2196&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2196&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Towards the end of the week, my mentor Sean Vig went out for a bike race, so I took this to my advantage, and went for a movie marathon (race) as well, for four days and did not do any work. I also learnt not to be overly-dependent on your mentor, and you can do stuff like thinking about algos, even when your mentor is taking time to review your pull requests. But for now I’ve just started work on another heuristic, and have to respond to his comments on my previous Pull Request. Till then bye.&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/536/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/536/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=536&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 26 Jun 2013 14:10:01 +0000</pubDate>
</item>
<item>
	<title>Chetna Gupta: Week-1</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=284</guid>
	<link>http://geekiology.wordpress.com/2013/06/26/outset-week-1/</link>
	<description>&lt;p&gt;This June 17th marked the beginning of my term as a GSoC intern at Sympy. Thanks Aaron for being the constant support while I was taking my tender first-steps towards the world of open source.&lt;/p&gt;
&lt;p&gt;Here I am to possibly discuss what I did in the first week but I would like to open this by not just rushing to the recent three PRs, I issued but to some of the most amazing things I have learned before and after the proposal phase.&lt;/p&gt;
&lt;p&gt;Firslty &lt;strong&gt;Indentation is God&lt;/strong&gt;!! I am serious, it is God. I am today aware of the number of spaces I put. (4 for a long lost tab) , a space after an if, no spaces before and after ‘=’.. and so on . I hate trailing space errors and my savior is (:%s/\s\+$//) , we all love vim dont we &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Secondly &lt;strong&gt;Design is important&lt;/strong&gt;!! Last couple of weeks taught me how important it is to follow the mockups , respect the well thought of designs, each precision and detail.&lt;/p&gt;
&lt;p&gt;I realized it is completely “logit” to spend couple of hours nudging a few pixels here and there..Following are the hours I spent nudging pixels .. some reaped commits, while many still lie to be put in&lt;/p&gt;
&lt;p&gt;Thirdly &lt;strong&gt;Learn about your Rescue tools&lt;/strong&gt; .. Last but not the least, I learned that life is not so daunting &lt;img src=&quot;http://s2.wp.com/wp-includes/images/smilies/icon_razz.gif&quot; alt=&quot;:P&quot; class=&quot;wp-smiley&quot; /&gt;  , we have a lot of rescue tools which work only if we know about them. “./bin/test sympy/utilities” comes in most frequent use out of all. Apart from this I also realized that git can become your best friend, it just needs sometime to bond with new people&lt;/p&gt;
&lt;p&gt;All this wouldn’t have been possible without having amazing people, guiding me on the IRC channel of Sympy&lt;/p&gt;
&lt;p&gt;Reverting back to my 3 PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/2191&quot;&gt;2191&lt;/a&gt;:
&lt;p&gt;Determines if for a given function f in k(t) there exists u in k(t) such that Du = f. Returns q such that i = h + r – Dq; Output -&amp;gt; tuple (q, i ) if there exists a derivative for given function in k(t) else returns None &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/2185&quot;&gt;2185&lt;/a&gt;:
&lt;p&gt;This method is used for solving Coupled Differntial System.&lt;br /&gt;
Given a differntial field K of characterstic 0 and f1, f2, g1, g2&lt;br /&gt;
in K, it decides whether the system of equations&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbegin%7Bpmatrix%7D+Dy1+%5C%5C+Dy2+%5Cend%7Bpmatrix%7D+%2B+%5Cbegin%7Bpmatrix%7D+f1+%26%26+af2+%5C%5C+f2+%26%26+f1+%5Cend%7Bpmatrix%7D+%5Cbegin%7Bpmatrix%7D+y1+%5C%5C+y2+%5Cend%7Bpmatrix%7D+%3D+%5Cbegin%7Bpmatrix%7D+g1+%5C%5C+g2+%5Cend%7Bpmatrix%7D+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\begin{pmatrix} Dy1 \\ Dy2 \end{pmatrix} + \begin{pmatrix} f1 &amp;amp;&amp;amp; af2 \\ f2 &amp;amp;&amp;amp; f1 \end{pmatrix} \begin{pmatrix} y1 \\ y2 \end{pmatrix} = \begin{pmatrix} g1 \\ g2 \end{pmatrix} &quot; class=&quot;latex&quot; title=&quot;\begin{pmatrix} Dy1 \\ Dy2 \end{pmatrix} + \begin{pmatrix} f1 &amp;amp;&amp;amp; af2 \\ f2 &amp;amp;&amp;amp; f1 \end{pmatrix} \begin{pmatrix} y1 \\ y2 \end{pmatrix} = \begin{pmatrix} g1 \\ g2 \end{pmatrix} &quot; /&gt;&lt;br /&gt;
has a solution. Hence returning (y1, y2) if a solution exist, None otherwise&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/2184&quot;&gt;2184&lt;/a&gt;:
&lt;p&gt;This is still in implementation phase, In this Pr i have tried adding simple trigonometric functions of the form tan(x), which would call integrate_hypertangent_reduce and integrate_hypertangent_polynomial under method risch_integrate&lt;/p&gt;
&lt;p&gt;To get this working i need coupledDifferntialSystem which still stands TODO&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Three PRs within a week, adding completely new code to the codebase, is a fairy tale in itself, still with a missing ending. So here I am to put down what has been achieved and what still needs to be done urgently to get things operational&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;&lt;code&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; risch_integrate((tan(x)**5 + tan(x)**3 + x**2*tan(x) + 1)/(tan(x)**2 + 1)**3, x)&lt;/p&gt;
&lt;p&gt;raise NotImplementedError(&quot;Trigonometric extensions are not &quot;&lt;/p&gt;
&lt;p&gt;NotImplementedError: Trigonometric extensions are not supported (yet!)&lt;/p&gt;
&lt;/code&gt;&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So it all started with the aim to support structure theorem for trigonometric extensions, things did start working with addition of functions tan_part, atan_part added in the risch.py as can be seen in the PR 2184 referenced above. But this lead to an urgent call for a module to support coupled differential system as the integrate_hypertangent function which was supposed to work on the new expression &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28t_0%5E5+%2B+t_0%5E3+%2B+t_0%2Ax%5E2+%2B+1%29%2F%28t_0%5E2+%2B+1%29%5E3+&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(t_0^5 + t_0^3 + t_0*x^2 + 1)/(t_0^2 + 1)^3 &quot; class=&quot;latex&quot; title=&quot;(t_0^5 + t_0^3 + t_0*x^2 + 1)/(t_0^2 + 1)^3 &quot; /&gt; , produced after run through tan_part, did not seem to work without CDS.&lt;/p&gt;
&lt;p&gt;On the other hand cases like risch_integrate(x*tan(x)**2 – tan(x)**3 + x, x) (even without the CDS) would now be able to see a clean &amp;amp; bug free screen with no error traces, once we have is_deriv repo pushed in. Wondering Why ? I was doing that too a couple of days back, before Aaron put forth the very fact that “ALL CASES don’t tread the same path, PATH in an algorithmic sense though”. The above case can be thought of as independent of CDS, not because it is actually independent but because CDS returns “No Solution” for the equation system referenced in the description of PR 2185 above.&lt;/p&gt;
&lt;p&gt;Though things may not look as smooth as a choco-pie for now, but pushing is_deriv repo (which includes functions to support hypertangent cases) would definitely act as feast for the brainstorming FIRST WEEK. Though not all the cases, but YES! we would have an optimistic outlook for some of the cases which could be hooked back to the risch_integrate function and could be added as initial cases which would support the risch_integrate calls for trigonometric extensions&lt;/p&gt;
&lt;p&gt;The is_deriv repo would also enable me to make CDS worth testing and pushing.&lt;/p&gt;
&lt;p&gt;Looking forward to work with things at a fast enough pace for now, I intend to put in all possible test cases for all the open pull requests as and when required for the next couple of days from now. Also apart from the above 3 PRS &lt;a href=&quot;https://github.com/sympy/sympy/pull/2049&quot;&gt;2049&lt;/a&gt; could be soon looked into as I am possibly done with the tasks allocated by Aaron for the same.&lt;/p&gt;
&lt;p&gt;There is another PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/2034&quot;&gt;2034&lt;/a&gt;, which I am not very sure for now, interms of TODO, hope to get all the PRs merged quickly without bothering Aaron much.&lt;/p&gt;
&lt;p&gt;Signing off ~ Life is a roller-coaster (or well right now it is &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:D&quot; class=&quot;wp-smiley&quot; /&gt;  )&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/284/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/284/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=284&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 26 Jun 2013 07:24:09 +0000</pubDate>
</item>
<item>
	<title>Tarun Gaba</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7526836182390500993.post-434358419365808792</guid>
	<link>http://tarun-gaba.blogspot.com/2013/06/gsoc-report-week-1-finally-much-awaited.html</link>
	<description>&lt;h2&gt;&lt;b&gt;GSoC Report Week 1:&lt;/b&gt;&lt;/h2&gt;&lt;b&gt; &lt;/b&gt;Finally, the much awaited summer coding period has started. I am already feeling very enthusiastic about it.&lt;br /&gt;For the first week&lt;b&gt;&lt;/b&gt;&lt;b&gt;, &lt;/b&gt;I have been working on an detailed API, alongwith functions(their arguments and return values). Everything is being fleshed out.&lt;br /&gt;&lt;br /&gt;Also we(other PyDy members) have been holding discussions on various facets of implementations, how and what would be done for effective visualizations.&lt;br /&gt;&lt;br /&gt;An illustrative example has also been made, which utilizes different methods from the new API, to demonstrate the complete workflow.&lt;br /&gt;The illustrative example can be checked here:&lt;br /&gt;https://github.com/PythonDynamics/pydy_examples/pull/11&lt;br /&gt;&lt;br /&gt;And the API is in development form and can be checked here:&lt;br /&gt;http://pydy.org/visualization_temp_api&lt;br /&gt;&lt;br /&gt;Once the API is in a more finished form it can be ported to a more relevant location(link).&lt;br /&gt;In the coming week I hope to write some functions following the API, and related documentation and tests too.&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;&lt;h2&gt;&lt;b&gt; &lt;/b&gt;&lt;/h2&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Mon, 24 Jun 2013 09:14:48 +0000</pubDate>
	<author>noreply@blogger.com (TARUN GABA)</author>
</item>
<item>
	<title>Saurabh Jha: Week 2</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2736678015821545355.post-7871624797346734784</guid>
	<link>http://sympymatrix.blogspot.com/2013/06/week-2.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;It took me a long time to get the CSR to DOK conversion and vice-versa PR[1] to get merged, but it seems fine now. I am thankful to Christopher Smith for helpful discussions and his pushes. Here is my progress in previous two weeks--&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Reliable CSR to DOK and inverse conversion[1]&lt;/li&gt;&lt;li&gt;Efficient implementation of sparsematrix-vector product. The running time of the program is O(nnz), where nnz is number of non-zero elements of sparse matrix[2]&lt;/li&gt;&lt;li&gt;Trying to support domains here. I tried some methods and ultimately chose the one that is similar to one done in polys module.[2]&lt;/li&gt;&lt;li&gt;Realisation that CSR is not appropriate for CSR + CSR, CSR - CSR and CSR*CSR. This is slower than other dictionary based implementation so I dropped the ideas&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;I was poking around with the current sparse code since I want to try my ideas on sparse before getting to dense. I think I have a clear direction for at least the next week.&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Improving sparse*sparse, I want to play with this idea tomorrow as I suspect I can improve the existing multiplication implementation. The implementation will use dictionaries, not CSR.&lt;/li&gt;&lt;li&gt;get sparse to support domains. My model would be to have procedural implementation in the new file sparsetools.py and then having these functions &quot;powering&quot; methods of sparse.py&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The current matrix can vaguely be considered as having Level 1 only. My strategy is to get Level 0 up. I don't want to plan more ahead since I think I should just plan on the fly as time comes and not putting any detail plan. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One problem I was having last two weeks is I  was not iterating fast enough. Ideally, I should push commits daily so that the code can be reviewed and discussed. It is a good boost for morale. It also makes sure that the project can be done piecemeal. &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] &lt;a href=&quot;https://github.com/sympy/sympy/pull/2169&quot;&gt;PR 2169&lt;/a&gt;&lt;br /&gt;[2] &lt;a href=&quot;https://github.com/sympy/sympy/pull/2190&quot;&gt;PR 2190&lt;/a&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 23 Jun 2013 17:07:54 +0000</pubDate>
	<author>noreply@blogger.com (Saurabh Jha)</author>
</item>
<item>
	<title>Sachin Joglekar: Hello World!</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5472769892551526876.post-8317629035648079156</guid>
	<link>http://codesachin.blogspot.com/2013/05/hello-world.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Aha. My first ever blog post. The inspiration for this blog came from the Google Summer of Code program, which will be my primary focus till September.&lt;br /&gt;&lt;div&gt;I came to know that I was selected only yesterday night, and what a day that was! Phew... I was going round in circles thinking about my chances, what I had done right, what I had done wrong, blah blah. Never has been a wait of 24 hours been so torturous. I have to give credit to Gilbert Gede, Sean Vig, Jason Moore, DL Peterson, Angadh and all the other SymPy physics community mentors who helped me shape my proposal to a presentable, well-thought out condition. Earlier it was just one haphazard list of things that I intended to do over the summer(mainly monsoon, due to the late arrival of GSoC), and my chances wouldn't have been half as good without these people giving their input time and again.&lt;/div&gt;&lt;div&gt;Gilbert Gede, from UC-Davis, will be my mentor throughout the whole GSoC period, and I hope to learn a lot from him....not just physics, but also coding and coding styles in general. He is one of the authors of sympy.physics.mechanics (PyDy).&lt;/div&gt;&lt;div&gt;My co-mentor will be Stefan Krastanov, who has done awesome work for SymPy during his GSoC project last year. Considering both my mentors are former GSoCers, their experiences with the program will go a long way in making sure I don't stumble around too much.&lt;/div&gt;&lt;div&gt;I will be working alongside Prasoon Shukla, a student of IIT-R, as his project is closely related to mine in terms of dealing with vector fields.&lt;/div&gt;&lt;div&gt;Some others I need to thank are Christopher Smith, who helped me immensely during my first PRs for SymPy, Aaron, the SymPy head, who took the pains to comment on all my stupid coding mistakes in my initial work, Manoj Kumar, Priyans Murarka, Jay Rambhia and Divyansh Khanna who were great supports during my application period. Thanks to all of you, I am penning my first ever blog post :-)&lt;/div&gt;&lt;div&gt;I hope I have a great 3 months coding for GSoC. I do realise it's not gonna be very easy, and I am bound to get stuck at times, but I hope to live up to my proposal(&lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSOC-2013-Application:-Sachin-Joglekar:-Electromagnetism-module&quot;&gt;https://github.com/sympy/sympy/wiki/GSOC-2013-Application:-Sachin-Joglekar:-Electromagnetism-module&lt;/a&gt;) and finish well what I intend to do, to begin with.&lt;br /&gt;The past few months have been very eventful and anxious at the same time, I hope I can work in peace now. &lt;/div&gt;&lt;div&gt;A lot more blog posts are going to come, mostly about my GSoC work, but some also about the other interesting coding things I do here and there. Hope I live up to the expectations of the SymPy community :-).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 23 Jun 2013 10:58:36 +0000</pubDate>
	<author>noreply@blogger.com (Sachin Joglekar)</author>
</item>

</channel>
</rss>
